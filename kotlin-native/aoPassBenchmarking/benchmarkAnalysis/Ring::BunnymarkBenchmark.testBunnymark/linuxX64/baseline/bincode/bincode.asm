
../../benchmarkAnalysis/Ring::BunnymarkBenchmark.testBunnymark/linuxX64/baseline/main.kexe:	file format elf64-x86-64

Disassembly of section .init:

<_init>:
               	subq	$8, %rsp
               	movq	309541(%rip), %rax      # 0x45efb0 <write+0x45efb0>
               	testq	%rax, %rax
               	je	0x413695 <_init+0x15>
               	callq	0x4136d0 <__gmon_start__@plt>
               	callq	0x415251 <frame_dummy>
               	callq	0x442958 <__do_global_ctors_aux>
               	addq	$8, %rsp
               	retq

Disassembly of section .plt:

<.plt>:
               	pushq	309562(%rip)            # 0x45eff0 <_GLOBAL_OFFSET_TABLE_+0x8>
               	jmpq	*309564(%rip)           # 0x45eff8 <_GLOBAL_OFFSET_TABLE_+0x10>
               	nop
               	nop
               	nop
               	nop

<__libc_start_main@plt>:
               	jmpq	*309562(%rip)           # 0x45f000 <_GLOBAL_OFFSET_TABLE_+0x18>
               	pushq	$0
               	jmp	0x4136b0 <.plt>

<__gmon_start__@plt>:
               	jmpq	*309554(%rip)           # 0x45f008 <_GLOBAL_OFFSET_TABLE_+0x20>
               	pushq	$1
               	jmp	0x4136b0 <.plt>

<__tls_get_addr@plt>:
               	jmpq	*309546(%rip)           # 0x45f010 <_GLOBAL_OFFSET_TABLE_+0x28>
               	pushq	$2
               	jmp	0x4136b0 <.plt>

<memmove@plt>:
               	jmpq	*309538(%rip)           # 0x45f018 <_GLOBAL_OFFSET_TABLE_+0x30>
               	pushq	$3
               	jmp	0x4136b0 <.plt>

<calloc@plt>:
               	jmpq	*309530(%rip)           # 0x45f020 <_GLOBAL_OFFSET_TABLE_+0x38>
               	pushq	$4
               	jmp	0x4136b0 <.plt>

<strlen@plt>:
               	jmpq	*309522(%rip)           # 0x45f028 <_GLOBAL_OFFSET_TABLE_+0x40>
               	pushq	$5
               	jmp	0x4136b0 <.plt>

<memcpy@plt>:
               	jmpq	*309514(%rip)           # 0x45f030 <_GLOBAL_OFFSET_TABLE_+0x48>
               	pushq	$6
               	jmp	0x4136b0 <.plt>

<free@plt>:
               	jmpq	*309506(%rip)           # 0x45f038 <_GLOBAL_OFFSET_TABLE_+0x50>
               	pushq	$7
               	jmp	0x4136b0 <.plt>

<_Unwind_Resume@plt>:
               	jmpq	*309498(%rip)           # 0x45f040 <_GLOBAL_OFFSET_TABLE_+0x58>
               	pushq	$8
               	jmp	0x4136b0 <.plt>

<memset@plt>:
               	jmpq	*309490(%rip)           # 0x45f048 <_GLOBAL_OFFSET_TABLE_+0x60>
               	pushq	$9
               	jmp	0x4136b0 <.plt>

<fmod@plt>:
               	jmpq	*309482(%rip)           # 0x45f050 <_GLOBAL_OFFSET_TABLE_+0x68>
               	pushq	$10
               	jmp	0x4136b0 <.plt>

<sched_yield@plt>:
               	jmpq	*309474(%rip)           # 0x45f058 <_GLOBAL_OFFSET_TABLE_+0x70>
               	pushq	$11
               	jmp	0x4136b0 <.plt>

<pthread_mutex_lock@plt>:
               	jmpq	*309466(%rip)           # 0x45f060 <_GLOBAL_OFFSET_TABLE_+0x78>
               	pushq	$12
               	jmp	0x4136b0 <.plt>

<pthread_cond_timedwait@plt>:
               	jmpq	*309458(%rip)           # 0x45f068 <_GLOBAL_OFFSET_TABLE_+0x80>
               	pushq	$13
               	jmp	0x4136b0 <.plt>

<pthread_mutex_unlock@plt>:
               	jmpq	*309450(%rip)           # 0x45f070 <_GLOBAL_OFFSET_TABLE_+0x88>
               	pushq	$14
               	jmp	0x4136b0 <.plt>

<pthread_self@plt>:
               	jmpq	*309442(%rip)           # 0x45f078 <_GLOBAL_OFFSET_TABLE_+0x90>
               	pushq	$15
               	jmp	0x4136b0 <.plt>

<pthread_setname_np@plt>:
               	jmpq	*309434(%rip)           # 0x45f080 <_GLOBAL_OFFSET_TABLE_+0x98>
               	pushq	$16
               	jmp	0x4136b0 <.plt>

<memcmp@plt>:
               	jmpq	*309426(%rip)           # 0x45f088 <_GLOBAL_OFFSET_TABLE_+0xa0>
               	pushq	$17
               	jmp	0x4136b0 <.plt>

<fputs@plt>:
               	jmpq	*309418(%rip)           # 0x45f090 <_GLOBAL_OFFSET_TABLE_+0xa8>
               	pushq	$18
               	jmp	0x4136b0 <.plt>

<clock_gettime@plt>:
               	jmpq	*309410(%rip)           # 0x45f098 <_GLOBAL_OFFSET_TABLE_+0xb0>
               	pushq	$19
               	jmp	0x4136b0 <.plt>

<syscall@plt>:
               	jmpq	*309402(%rip)           # 0x45f0a0 <_GLOBAL_OFFSET_TABLE_+0xb8>
               	pushq	$20
               	jmp	0x4136b0 <.plt>

<getrusage@plt>:
               	jmpq	*309394(%rip)           # 0x45f0a8 <_GLOBAL_OFFSET_TABLE_+0xc0>
               	pushq	$21
               	jmp	0x4136b0 <.plt>

<snprintf@plt>:
               	jmpq	*309386(%rip)           # 0x45f0b0 <_GLOBAL_OFFSET_TABLE_+0xc8>
               	pushq	$22
               	jmp	0x4136b0 <.plt>

<pthread_key_create@plt>:
               	jmpq	*309378(%rip)           # 0x45f0b8 <_GLOBAL_OFFSET_TABLE_+0xd0>
               	pushq	$23
               	jmp	0x4136b0 <.plt>

<pthread_setspecific@plt>:
               	jmpq	*309370(%rip)           # 0x45f0c0 <_GLOBAL_OFFSET_TABLE_+0xd8>
               	pushq	$24
               	jmp	0x4136b0 <.plt>

<sysconf@plt>:
               	jmpq	*309362(%rip)           # 0x45f0c8 <_GLOBAL_OFFSET_TABLE_+0xe0>
               	pushq	$25
               	jmp	0x4136b0 <.plt>

<mmap@plt>:
               	jmpq	*309354(%rip)           # 0x45f0d0 <_GLOBAL_OFFSET_TABLE_+0xe8>
               	pushq	$26
               	jmp	0x4136b0 <.plt>

<__errno_location@plt>:
               	jmpq	*309346(%rip)           # 0x45f0d8 <_GLOBAL_OFFSET_TABLE_+0xf0>
               	pushq	$27
               	jmp	0x4136b0 <.plt>

<strerror@plt>:
               	jmpq	*309338(%rip)           # 0x45f0e0 <_GLOBAL_OFFSET_TABLE_+0xf8>
               	pushq	$28
               	jmp	0x4136b0 <.plt>

<munmap@plt>:
               	jmpq	*309330(%rip)           # 0x45f0e8 <_GLOBAL_OFFSET_TABLE_+0x100>
               	pushq	$29
               	jmp	0x4136b0 <.plt>

<vsnprintf@plt>:
               	jmpq	*309322(%rip)           # 0x45f0f0 <_GLOBAL_OFFSET_TABLE_+0x108>
               	pushq	$30
               	jmp	0x4136b0 <.plt>

<strncpy@plt>:
               	jmpq	*309314(%rip)           # 0x45f0f8 <_GLOBAL_OFFSET_TABLE_+0x110>
               	pushq	$31
               	jmp	0x4136b0 <.plt>

<strncat@plt>:
               	jmpq	*309306(%rip)           # 0x45f100 <_GLOBAL_OFFSET_TABLE_+0x118>
               	pushq	$32
               	jmp	0x4136b0 <.plt>

<__ctype_toupper_loc@plt>:
               	jmpq	*309298(%rip)           # 0x45f108 <_GLOBAL_OFFSET_TABLE_+0x120>
               	pushq	$33
               	jmp	0x4136b0 <.plt>

<strstr@plt>:
               	jmpq	*309290(%rip)           # 0x45f110 <_GLOBAL_OFFSET_TABLE_+0x128>
               	pushq	$34
               	jmp	0x4136b0 <.plt>

<strtol@plt>:
               	jmpq	*309282(%rip)           # 0x45f118 <_GLOBAL_OFFSET_TABLE_+0x130>
               	pushq	$35
               	jmp	0x4136b0 <.plt>

<madvise@plt>:
               	jmpq	*309274(%rip)           # 0x45f120 <_GLOBAL_OFFSET_TABLE_+0x138>
               	pushq	$36
               	jmp	0x4136b0 <.plt>

<access@plt>:
               	jmpq	*309266(%rip)           # 0x45f128 <_GLOBAL_OFFSET_TABLE_+0x140>
               	pushq	$37
               	jmp	0x4136b0 <.plt>

<mprotect@plt>:
               	jmpq	*309258(%rip)           # 0x45f130 <_GLOBAL_OFFSET_TABLE_+0x148>
               	pushq	$38
               	jmp	0x4136b0 <.plt>

<write@plt>:
               	jmpq	*309250(%rip)           # 0x45f138 <_GLOBAL_OFFSET_TABLE_+0x150>
               	pushq	$39
               	jmp	0x4136b0 <.plt>

<abort@plt>:
               	jmpq	*309242(%rip)           # 0x45f140 <_GLOBAL_OFFSET_TABLE_+0x158>
               	pushq	$40
               	jmp	0x4136b0 <.plt>

<dladdr@plt>:
               	jmpq	*309234(%rip)           # 0x45f148 <_GLOBAL_OFFSET_TABLE_+0x160>
               	pushq	$41
               	jmp	0x4136b0 <.plt>

<strrchr@plt>:
               	jmpq	*309226(%rip)           # 0x45f150 <_GLOBAL_OFFSET_TABLE_+0x168>
               	pushq	$42
               	jmp	0x4136b0 <.plt>

<open@plt>:
               	jmpq	*309218(%rip)           # 0x45f158 <_GLOBAL_OFFSET_TABLE_+0x170>
               	pushq	$43
               	jmp	0x4136b0 <.plt>

<__fxstat@plt>:
               	jmpq	*309210(%rip)           # 0x45f160 <_GLOBAL_OFFSET_TABLE_+0x178>
               	pushq	$44
               	jmp	0x4136b0 <.plt>

<_Unwind_Backtrace@plt>:
               	jmpq	*309202(%rip)           # 0x45f168 <_GLOBAL_OFFSET_TABLE_+0x180>
               	pushq	$45
               	jmp	0x4136b0 <.plt>

<_Unwind_GetIP@plt>:
               	jmpq	*309194(%rip)           # 0x45f170 <_GLOBAL_OFFSET_TABLE_+0x188>
               	pushq	$46
               	jmp	0x4136b0 <.plt>

<bcmp@plt>:
               	jmpq	*309186(%rip)           # 0x45f178 <_GLOBAL_OFFSET_TABLE_+0x190>
               	pushq	$47
               	jmp	0x4136b0 <.plt>

<pthread_cond_signal@plt>:
               	jmpq	*309178(%rip)           # 0x45f180 <_GLOBAL_OFFSET_TABLE_+0x198>
               	pushq	$48
               	jmp	0x4136b0 <.plt>

<pthread_mutex_init@plt>:
               	jmpq	*309170(%rip)           # 0x45f188 <_GLOBAL_OFFSET_TABLE_+0x1a0>
               	pushq	$49
               	jmp	0x4136b0 <.plt>

<pthread_cond_init@plt>:
               	jmpq	*309162(%rip)           # 0x45f190 <_GLOBAL_OFFSET_TABLE_+0x1a8>
               	pushq	$50
               	jmp	0x4136b0 <.plt>

<pthread_mutex_destroy@plt>:
               	jmpq	*309154(%rip)           # 0x45f198 <_GLOBAL_OFFSET_TABLE_+0x1b0>
               	pushq	$51
               	jmp	0x4136b0 <.plt>

<pthread_cond_destroy@plt>:
               	jmpq	*309146(%rip)           # 0x45f1a0 <_GLOBAL_OFFSET_TABLE_+0x1b8>
               	pushq	$52
               	jmp	0x4136b0 <.plt>

<pthread_once@plt>:
               	jmpq	*309138(%rip)           # 0x45f1a8 <_GLOBAL_OFFSET_TABLE_+0x1c0>
               	pushq	$53
               	jmp	0x4136b0 <.plt>

<pthread_getspecific@plt>:
               	jmpq	*309130(%rip)           # 0x45f1b0 <_GLOBAL_OFFSET_TABLE_+0x1c8>
               	pushq	$54
               	jmp	0x4136b0 <.plt>

<pthread_detach@plt>:
               	jmpq	*309122(%rip)           # 0x45f1b8 <_GLOBAL_OFFSET_TABLE_+0x1d0>
               	pushq	$55
               	jmp	0x4136b0 <.plt>

<pthread_cond_broadcast@plt>:
               	jmpq	*309114(%rip)           # 0x45f1c0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
               	pushq	$56
               	jmp	0x4136b0 <.plt>

<sleep@plt>:
               	jmpq	*309106(%rip)           # 0x45f1c8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
               	pushq	$57
               	jmp	0x4136b0 <.plt>

<_Exit@plt>:
               	jmpq	*309098(%rip)           # 0x45f1d0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
               	pushq	$58
               	jmp	0x4136b0 <.plt>

<_Unwind_GetDataRelBase@plt>:
               	jmpq	*309090(%rip)           # 0x45f1d8 <_GLOBAL_OFFSET_TABLE_+0x1f0>
               	pushq	$59
               	jmp	0x4136b0 <.plt>

<_Unwind_GetTextRelBase@plt>:
               	jmpq	*309082(%rip)           # 0x45f1e0 <_GLOBAL_OFFSET_TABLE_+0x1f8>
               	pushq	$60
               	jmp	0x4136b0 <.plt>

<_Unwind_GetRegionStart@plt>:
               	jmpq	*309074(%rip)           # 0x45f1e8 <_GLOBAL_OFFSET_TABLE_+0x200>
               	pushq	$61
               	jmp	0x4136b0 <.plt>

<_Unwind_GetLanguageSpecificData@plt>:
               	jmpq	*309066(%rip)           # 0x45f1f0 <_GLOBAL_OFFSET_TABLE_+0x208>
               	pushq	$62
               	jmp	0x4136b0 <.plt>

<_Unwind_GetIPInfo@plt>:
               	jmpq	*309058(%rip)           # 0x45f1f8 <_GLOBAL_OFFSET_TABLE_+0x210>
               	pushq	$63
               	jmp	0x4136b0 <.plt>

<_Unwind_SetGR@plt>:
               	jmpq	*309050(%rip)           # 0x45f200 <_GLOBAL_OFFSET_TABLE_+0x218>
               	pushq	$64
               	jmp	0x4136b0 <.plt>

<_Unwind_SetIP@plt>:
               	jmpq	*309042(%rip)           # 0x45f208 <_GLOBAL_OFFSET_TABLE_+0x220>
               	pushq	$65
               	jmp	0x4136b0 <.plt>

<strcmp@plt>:
               	jmpq	*309034(%rip)           # 0x45f210 <_GLOBAL_OFFSET_TABLE_+0x228>
               	pushq	$66
               	jmp	0x4136b0 <.plt>

<malloc@plt>:
               	jmpq	*309026(%rip)           # 0x45f218 <_GLOBAL_OFFSET_TABLE_+0x230>
               	pushq	$67
               	jmp	0x4136b0 <.plt>

<_Unwind_RaiseException@plt>:
               	jmpq	*309018(%rip)           # 0x45f220 <_GLOBAL_OFFSET_TABLE_+0x238>
               	pushq	$68
               	jmp	0x4136b0 <.plt>

<_Unwind_DeleteException@plt>:
               	jmpq	*309010(%rip)           # 0x45f228 <_GLOBAL_OFFSET_TABLE_+0x240>
               	pushq	$69
               	jmp	0x4136b0 <.plt>

<_Unwind_Resume_or_Rethrow@plt>:
               	jmpq	*309002(%rip)           # 0x45f230 <_GLOBAL_OFFSET_TABLE_+0x248>
               	pushq	$70
               	jmp	0x4136b0 <.plt>

<fputc@plt>:
               	jmpq	*308994(%rip)           # 0x45f238 <_GLOBAL_OFFSET_TABLE_+0x250>
               	pushq	$71
               	jmp	0x4136b0 <.plt>

<pthread_key_delete@plt>:
               	jmpq	*308986(%rip)           # 0x45f240 <_GLOBAL_OFFSET_TABLE_+0x258>
               	pushq	$72
               	jmp	0x4136b0 <.plt>

<__cxa_atexit@plt>:
               	jmpq	*308978(%rip)           # 0x45f248 <_GLOBAL_OFFSET_TABLE_+0x260>
               	pushq	$73
               	jmp	0x4136b0 <.plt>

<pthread_cond_wait@plt>:
               	jmpq	*308970(%rip)           # 0x45f250 <_GLOBAL_OFFSET_TABLE_+0x268>
               	pushq	$74
               	jmp	0x4136b0 <.plt>

<ceil@plt>:
               	jmpq	*308962(%rip)           # 0x45f258 <_GLOBAL_OFFSET_TABLE_+0x270>
               	pushq	$75
               	jmp	0x4136b0 <.plt>

<floor@plt>:
               	jmpq	*308954(%rip)           # 0x45f260 <_GLOBAL_OFFSET_TABLE_+0x278>
               	pushq	$76
               	jmp	0x4136b0 <.plt>

<memchr@plt>:
               	jmpq	*308946(%rip)           # 0x45f268 <_GLOBAL_OFFSET_TABLE_+0x280>
               	pushq	$77
               	jmp	0x4136b0 <.plt>

<pthread_join@plt>:
               	jmpq	*308938(%rip)           # 0x45f270 <_GLOBAL_OFFSET_TABLE_+0x288>
               	pushq	$78
               	jmp	0x4136b0 <.plt>

<pthread_create@plt>:
               	jmpq	*308930(%rip)           # 0x45f278 <_GLOBAL_OFFSET_TABLE_+0x290>
               	pushq	$79
               	jmp	0x4136b0 <.plt>

<get_nprocs@plt>:
               	jmpq	*308922(%rip)           # 0x45f280 <_GLOBAL_OFFSET_TABLE_+0x298>
               	pushq	$80
               	jmp	0x4136b0 <.plt>

<nanosleep@plt>:
               	jmpq	*308914(%rip)           # 0x45f288 <_GLOBAL_OFFSET_TABLE_+0x2a0>
               	pushq	$81
               	jmp	0x4136b0 <.plt>

<_ITM_RU1@plt>:
               	jmpq	*308906(%rip)           # 0x45f290 <_GLOBAL_OFFSET_TABLE_+0x2a8>
               	pushq	$82
               	jmp	0x4136b0 <.plt>

<_ZGTtnam@plt>:
               	jmpq	*308898(%rip)           # 0x45f298 <_GLOBAL_OFFSET_TABLE_+0x2b0>
               	pushq	$83
               	jmp	0x4136b0 <.plt>

<_ITM_memcpyRtWn@plt>:
               	jmpq	*308890(%rip)           # 0x45f2a0 <_GLOBAL_OFFSET_TABLE_+0x2b8>
               	pushq	$84
               	jmp	0x4136b0 <.plt>

<_ITM_RU8@plt>:
               	jmpq	*308882(%rip)           # 0x45f2a8 <_GLOBAL_OFFSET_TABLE_+0x2c0>
               	pushq	$85
               	jmp	0x4136b0 <.plt>

<_ITM_addUserCommitAction@plt>:
               	jmpq	*308874(%rip)           # 0x45f2b0 <_GLOBAL_OFFSET_TABLE_+0x2c8>
               	pushq	$86
               	jmp	0x4136b0 <.plt>

<_ITM_memcpyRnWt@plt>:
               	jmpq	*308866(%rip)           # 0x45f2b8 <_GLOBAL_OFFSET_TABLE_+0x2d0>
               	pushq	$87
               	jmp	0x4136b0 <.plt>

<_ZGTtdlPv@plt>:
               	jmpq	*308858(%rip)           # 0x45f2c0 <_GLOBAL_OFFSET_TABLE_+0x2d8>
               	pushq	$88
               	jmp	0x4136b0 <.plt>

<fopen@plt>:
               	jmpq	*308850(%rip)           # 0x45f2c8 <_GLOBAL_OFFSET_TABLE_+0x2e0>
               	pushq	$89
               	jmp	0x4136b0 <.plt>

<strtoul@plt>:
               	jmpq	*308842(%rip)           # 0x45f2d0 <_GLOBAL_OFFSET_TABLE_+0x2e8>
               	pushq	$90
               	jmp	0x4136b0 <.plt>

<fclose@plt>:
               	jmpq	*308834(%rip)           # 0x45f2d8 <_GLOBAL_OFFSET_TABLE_+0x2f0>
               	pushq	$91
               	jmp	0x4136b0 <.plt>

<fileno@plt>:
               	jmpq	*308826(%rip)           # 0x45f2e0 <_GLOBAL_OFFSET_TABLE_+0x2f8>
               	pushq	$92
               	jmp	0x4136b0 <.plt>

<read@plt>:
               	jmpq	*308818(%rip)           # 0x45f2e8 <_GLOBAL_OFFSET_TABLE_+0x300>
               	pushq	$93
               	jmp	0x4136b0 <.plt>

<ioctl@plt>:
               	jmpq	*308810(%rip)           # 0x45f2f0 <_GLOBAL_OFFSET_TABLE_+0x308>
               	pushq	$94
               	jmp	0x4136b0 <.plt>

Disassembly of section .text:

<_GLOBAL__sub_I_GlobalData.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 315533(%rip)     # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	movups	%xmm0, 315510(%rip)     # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	movl	$1, 315532(%rip)        # 0x460d68 <kotlin::mm::GlobalData::instance_+0x38>
               	movq	$0, 315553(%rip)        # 0x460d88 <kotlin::mm::GlobalData::instance_+0x58>
               	movups	%xmm0, 315518(%rip)     # 0x460d6c <kotlin::mm::GlobalData::instance_+0x3c>
               	movq	$0, 315523(%rip)        # 0x460d7c <kotlin::mm::GlobalData::instance_+0x4c>
               	leaq	315536(%rip), %rax      # 0x460d90 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 315537(%rip)      # 0x460d98 <kotlin::mm::GlobalData::instance_+0x68>
               	movq	%rax, 315522(%rip)      # 0x460d90 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	$0, 315527(%rip)        # 0x460da0 <kotlin::mm::GlobalData::instance_+0x70>
               	leaq	315528(%rip), %rax      # 0x460da8 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	%rax, 315529(%rip)      # 0x460db0 <kotlin::mm::GlobalData::instance_+0x80>
               	movq	%rax, 315514(%rip)      # 0x460da8 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	$0, 315519(%rip)        # 0x460db8 <kotlin::mm::GlobalData::instance_+0x88>
               	movb	$0, 315520(%rip)        # 0x460dc0 <kotlin::mm::GlobalData::instance_+0x90>
               	leaq	315521(%rip), %rax      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 315522(%rip)      # 0x460dd0 <kotlin::mm::GlobalData::instance_+0xa0>
               	movq	%rax, 315507(%rip)      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	$0, 315512(%rip)        # 0x460dd8 <kotlin::mm::GlobalData::instance_+0xa8>
               	leaq	315513(%rip), %rax      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%rax, 315514(%rip)      # 0x460de8 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%rax, 315499(%rip)      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	$0, 315504(%rip)        # 0x460df0 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 315505(%rip)        # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	leaq	315506(%rip), %rax      # 0x460e00 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 315507(%rip)      # 0x460e08 <kotlin::mm::GlobalData::instance_+0xd8>
               	movq	%rax, 315492(%rip)      # 0x460e00 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	$0, 315497(%rip)        # 0x460e10 <kotlin::mm::GlobalData::instance_+0xe0>
               	leaq	315498(%rip), %rax      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%rax, 315499(%rip)      # 0x460e20 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%rax, 315484(%rip)      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	$0, 315489(%rip)        # 0x460e28 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 315490(%rip)        # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	movl	$1, %edi
               	movl	$512, %esi              # imm = 0x200
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	addq	$8, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%r13)
               	movups	%xmm0, 32(%r13)
               	movb	$0, 48(%r13)
               	leaq	56(%r13), %rcx
               	movl	$100000, 56(%r13)       # imm = 0x186A0
               	movq	$10240, 64(%r13)        # imm = 0x2800
               	movb	$1, 72(%r13)
               	movaps	191530(%rip), %xmm0     # 0x442a40 <_IO_stdin_used+0x80>
               	movups	%xmm0, 80(%r13)
               	movabsq	$4602678819172646912, %rdx # imm = 0x3FE0000000000000
               	movq	%rdx, 96(%r13)
               	movaps	191520(%rip), %xmm0     # 0x442a50 <_IO_stdin_used+0x90>
               	movups	%xmm0, 104(%r13)
               	leaq	160(%r13), %r12
               	movq	%rax, 160(%r13)
               	movq	%rcx, 168(%r13)
               	leaq	176(%r13), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 176(%r13)
               	movups	%xmm0, 192(%r13)
               	movups	%xmm0, 208(%r13)
               	movq	%rbp, 224(%r13)
               	leaq	232(%r13), %rdi
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	movq	$0, 280(%r13)
               	movq	%rbp, 288(%r13)
               	leaq	296(%r13), %rdi
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	movq	$0, 344(%r13)
               	movq	%rbp, 352(%r13)
               	leaq	360(%r13), %rdi
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	movq	$0, 408(%r13)
               	movq	%rbp, 416(%r13)
               	leaq	424(%r13), %rdi
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	movb	$0, 472(%r13)
               	movq	$0, 480(%r13)
               	movl	$1, %edi
               	movl	$312, %esi              # imm = 0x138
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	$0, 32(%rax)
               	leaq	40(%rax), %rdi
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movups	%xmm0, 88(%rbx)
               	movq	$0, 120(%rbx)
               	movq	%r12, 128(%rbx)
               	leaq	73737(%rip), %rax       # 0x425f40 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 144(%rbx)
               	leaq	73771(%rip), %rax       # 0x425f70 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>
               	movq	%rax, 152(%rbx)
               	movq	$0, 160(%rbx)
               	movw	$256, 168(%rbx)         # imm = 0x100
               	movups	%xmm0, 176(%rbx)
               	movups	%xmm0, 192(%rbx)
               	movq	$0, 208(%rbx)
               	leaq	216(%rbx), %rdi
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	movb	$0, 264(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 272(%rbx)
               	movups	%xmm0, 288(%rbx)
               	movq	$0, 304(%rbx)
               	movq	%rbx, 488(%r13)
               	leaq	319042(%rip), %rax      # 0x461df8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 496(%r13)
               	movq	168(%r13), %r14
               	movq	%r12, 208(%rsp)
               	leaq	73773(%rip), %rax       # 0x426000 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
               	movq	%rax, 232(%rsp)
               	leaq	73774(%rip), %rax       # 0x426010 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 224(%rsp)
               	movdqu	224(%rsp), %xmm0
               	movq	$0, 224(%rsp)
               	movups	72(%r14), %xmm1
               	movaps	%xmm1, 48(%rsp)
               	movq	208(%rsp), %rax
               	movq	%rax, 72(%r14)
               	movq	216(%rsp), %rax
               	movq	%rax, 80(%r14)
               	movdqu	88(%r14), %xmm1
               	movdqa	%xmm1, 64(%rsp)
               	movdqu	%xmm0, 88(%r14)
               	movq	%xmm1, %rcx
               	testq	%rcx, %rcx
               	je	0x414093 <_GLOBAL__sub_I_GlobalData.cpp+0x3e3>
               	leaq	48(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rcx
               	movq	88(%r14), %rcx
               	movq	$0, 192(%rsp)
               	testq	%rcx, %rcx
               	movq	%rbp, 240(%rsp)
               	je	0x4140b1 <_GLOBAL__sub_I_GlobalData.cpp+0x401>
               	leaq	72(%r14), %rsi
               	leaq	176(%rsp), %rdi
               	movl	$2, %edx
               	callq	*%rcx
               	movups	88(%r14), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movups	%xmm0, 192(%rsp)
               	jmp	0x4140c1 <_GLOBAL__sub_I_GlobalData.cpp+0x411>
               	movq	%xmm0, %rcx
               	movq	$0, 192(%rsp)
               	testq	%rcx, %rcx
               	movq	%rbp, 240(%rsp)
               	jne	0x414069 <_GLOBAL__sub_I_GlobalData.cpp+0x3b9>
               	movups	192(%rsp), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movl	$1, %edi
               	movl	$224, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movups	176(%rsp), %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 192(%rsp)
               	movaps	128(%rsp), %xmm0
               	movaps	%xmm0, 160(%rsp)
               	leaq	298874(%rip), %rax      # 0x45d080 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rbx)
               	movq	%r14, 8(%rbx)
               	leaq	314476(%rip), %rax      # 0x460d80 <kotlin::mm::GlobalData::instance_+0x50>
               	movq	%rax, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%rbx)
               	movq	%r14, 48(%rbx)
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 56(%rbx)
               	movaps	144(%rsp), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movups	64(%rbx), %xmm1
               	movaps	%xmm1, 144(%rsp)
               	movups	%xmm0, 64(%rbx)
               	movaps	160(%rsp), %xmm0
               	movq	$0, 160(%rsp)
               	movq	88(%rbx), %rax
               	movq	%rax, 168(%rsp)
               	movups	%xmm0, 80(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 112(%rbx)
               	movups	%xmm0, 96(%rbx)
               	movq	$0, 128(%rbx)
               	leaq	136(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	callq	0x43c760 <std::condition_variable::condition_variable()>
               	movb	$1, 184(%rbx)
               	movabsq	$9223372036854775807, %r15 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r15), %rax
               	testq	%rbp, %rbp
               	cmovnsq	%r15, %rax
               	imulq	$1000, %rbp, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r15, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	leaq	96(%rbx), %rcx
               	movq	%rax, 200(%rbx)
               	movb	$0, 208(%rbx)
               	leaq	16(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rsp)
               	movups	%xmm0, 24(%rsp)
               	movq	%rax, (%rsp)
               	movabsq	$8243114992121955143, %rax # imm = 0x72656D6954204347
               	movq	%rax, 16(%rsp)
               	movabsq	$7233174018586845298, %rax # imm = 0x6461657268742072
               	movq	%rax, 23(%rsp)
               	movq	$15, 8(%rsp)
               	movw	$256, 31(%rsp)          # imm = 0x100
               	movq	$0, 216(%rbx)
               	movq	%rbx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	leaq	61948(%rip), %rax       # 0x423460 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rax, %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, 80(%rsp)
               	movq	16(%rsp), %rax
               	movq	23(%rsp), %rcx
               	movq	%rax, 96(%rsp)
               	movq	%rcx, 103(%rsp)
               	movq	$15, 88(%rsp)
               	movw	$256, 111(%rsp)         # imm = 0x100
               	leaq	62476(%rip), %r15       # 0x4236b0 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%r15, 120(%rsp)
               	movl	$88, %edi
               	callq	0x43bb19 <operator new(unsigned long)>
               	leaq	216(%rbx), %rdi
               	leaq	298487(%rip), %rcx      # 0x45d0b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rcx, (%rax)
               	movaps	48(%rsp), %xmm0
               	movups	%xmm0, 8(%rax)
               	movdqa	64(%rsp), %xmm0
               	movdqu	%xmm0, 24(%rax)
               	movb	$0, 72(%rax)
               	movq	%rax, %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	80(%rsp), %rdx
               	cmpq	%rbp, %rdx
               	je	0x414300 <_GLOBAL__sub_I_GlobalData.cpp+0x650>
               	movq	%rdx, 40(%rax)
               	movq	96(%rsp), %rcx
               	movq	%rcx, 56(%rax)
               	jmp	0x414309 <_GLOBAL__sub_I_GlobalData.cpp+0x659>
               	movdqu	(%rbp), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	88(%rsp), %rcx
               	movq	%rcx, 48(%rax)
               	movq	%rbp, 80(%rsp)
               	movq	$0, 88(%rsp)
               	movb	$0, 96(%rsp)
               	movb	$1, 72(%rax)
               	movq	%r15, 80(%rax)
               	movq	%rax, 40(%rsp)
               	movq	306311(%rip), %rdx      # 0x45efc0 <write+0x45efc0>
               	leaq	40(%rsp), %rsi
               	callq	0x43ed4e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414353 <_GLOBAL__sub_I_GlobalData.cpp+0x6a3>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	je	0x414372 <_GLOBAL__sub_I_GlobalData.cpp+0x6c2>
               	movq	80(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x414372 <_GLOBAL__sub_I_GlobalData.cpp+0x6c2>
               	callq	0x413730 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x41438c <_GLOBAL__sub_I_GlobalData.cpp+0x6dc>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41438c <_GLOBAL__sub_I_GlobalData.cpp+0x6dc>
               	callq	0x413730 <free@plt>
               	movq	160(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143ab <_GLOBAL__sub_I_GlobalData.cpp+0x6fb>
               	leaq	144(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	64(%r14), %rbp
               	movq	%rbx, 64(%r14)
               	testq	%rbp, %rbp
               	je	0x4143c9 <_GLOBAL__sub_I_GlobalData.cpp+0x719>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbp, %rdi
               	callq	0x413730 <free@plt>
               	movq	192(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143e8 <_GLOBAL__sub_I_GlobalData.cpp+0x738>
               	leaq	176(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	224(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414407 <_GLOBAL__sub_I_GlobalData.cpp+0x757>
               	leaq	208(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%r13, %r15
               	addq	$480, %r15              # imm = 0x1E0
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	movdqa	%xmm0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, (%rsp)
               	movabsq	$7018141387277222727, %rax # imm = 0x6165726874204347
               	movq	%rax, 16(%rsp)
               	movw	$100, 24(%rsp)
               	movq	$9, 8(%rsp)
               	movb	$1, 32(%rsp)
               	movq	$0, 176(%rsp)
               	movq	%r12, 48(%rsp)
               	leaq	72(%rsp), %rbx
               	movq	%rbx, 56(%rsp)
               	movq	%rax, 72(%rsp)
               	movw	$100, 80(%rsp)
               	movq	$9, 64(%rsp)
               	movb	$1, 88(%rsp)
               	leaq	72622(%rip), %rbp       # 0x426040 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
               	movq	%rbp, 96(%rsp)
               	movl	$64, %edi
               	callq	0x43bb19 <operator new(unsigned long)>
               	leaq	300048(%rip), %rcx      # 0x45d8b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	%r12, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	movq	56(%rsp), %rdx
               	cmpq	%rbx, %rdx
               	je	0x4144d7 <_GLOBAL__sub_I_GlobalData.cpp+0x827>
               	movq	%rdx, 16(%rax)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x4144df <_GLOBAL__sub_I_GlobalData.cpp+0x82f>
               	movdqu	(%rbx), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	$0, 64(%rsp)
               	movb	$0, 72(%rsp)
               	movb	$1, 48(%rax)
               	movq	%rbp, 56(%rax)
               	movq	%rax, 144(%rsp)
               	movq	305838(%rip), %rdx      # 0x45efc0 <write+0x45efc0>
               	leaq	176(%rsp), %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x43ed4e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x41453a <_GLOBAL__sub_I_GlobalData.cpp+0x88a>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	je	0x41455c <_GLOBAL__sub_I_GlobalData.cpp+0x8ac>
               	movq	56(%rsp), %rdi
               	cmpq	%rbx, %rdi
               	je	0x41455c <_GLOBAL__sub_I_GlobalData.cpp+0x8ac>
               	callq	0x413730 <free@plt>
               	cmpq	$0, (%r15)
               	jne	0x41480f <_GLOBAL__sub_I_GlobalData.cpp+0xb5f>
               	movq	176(%rsp), %rax
               	movq	%rax, (%r15)
               	movq	$0, 176(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x414597 <_GLOBAL__sub_I_GlobalData.cpp+0x8e7>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414597 <_GLOBAL__sub_I_GlobalData.cpp+0x8e7>
               	callq	0x413730 <free@plt>
               	movl	$0, 504(%r13)
               	movq	%r13, 313487(%rip)      # 0x460e38 <kotlin::mm::GlobalData::instance_+0x108>
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	192(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4145f5 <_GLOBAL__sub_I_GlobalData.cpp+0x945>
               	leaq	176(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, 128(%rsp)
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414628 <_GLOBAL__sub_I_GlobalData.cpp+0x978>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	jne	0x414645 <_GLOBAL__sub_I_GlobalData.cpp+0x995>
               	jmp	0x414654 <_GLOBAL__sub_I_GlobalData.cpp+0x9a4>
               	movq	%rax, 128(%rsp)
               	movq	56(%rsp), %rdi
               	cmpq	%rbx, %rdi
               	je	0x414654 <_GLOBAL__sub_I_GlobalData.cpp+0x9a4>
               	callq	0x413730 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x41466e <_GLOBAL__sub_I_GlobalData.cpp+0x9be>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41466e <_GLOBAL__sub_I_GlobalData.cpp+0x9be>
               	callq	0x413730 <free@plt>
               	movq	488(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x4147e2 <_GLOBAL__sub_I_GlobalData.cpp+0xb32>
               	leaq	88(%rbx), %rbp
               	cmpq	$0, 305454(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x41469c <_GLOBAL__sub_I_GlobalData.cpp+0x9ec>
               	movq	%rbp, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x414723 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	cmpq	$0, (%rbx)
               	jne	0x4146ba <_GLOBAL__sub_I_GlobalData.cpp+0xa0a>
               	cmpq	$0, 305422(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x414739 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
               	movq	%rbp, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	jmp	0x414739 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
               	movb	$1, 168(%rbx)
               	leaq	40(%rbx), %r12
               	movq	%r12, %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	cmpq	$0, 305379(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4146df <_GLOBAL__sub_I_GlobalData.cpp+0xa2f>
               	movq	%rbp, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x43ecf4 <std::thread::join()>
               	movb	$0, 168(%rbx)
               	cmpq	$0, 305346(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x41472a <_GLOBAL__sub_I_GlobalData.cpp+0xa7a>
               	movq	%rbp, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x414814 <_GLOBAL__sub_I_GlobalData.cpp+0xb64>
               	movb	$1, 169(%rbx)
               	movq	%r12, %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	cmpq	$0, 305305(%rip)        # 0x45efb8 <write+0x45efb8>
               	jne	0x4146b0 <_GLOBAL__sub_I_GlobalData.cpp+0xa00>
               	jmp	0x414739 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movb	$1, 169(%rbx)
               	movq	%r12, %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	leaq	216(%rbx), %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	movq	144(%rbx), %rax
               	testq	%rax, %rax
               	je	0x414762 <_GLOBAL__sub_I_GlobalData.cpp+0xab2>
               	leaq	128(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	leaq	40(%rbx), %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	leaq	16(%rbx), %r12
               	movq	16(%rbx), %rbp
               	movq	$0, 16(%rbx)
               	movq	%rbp, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x4147b4 <_GLOBAL__sub_I_GlobalData.cpp+0xb04>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	48(%rsp), %r14
               	movq	%rbp, 48(%rsp)
               	testq	%r14, %r14
               	je	0x414780 <_GLOBAL__sub_I_GlobalData.cpp+0xad0>
               	movq	%r14, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x414780 <_GLOBAL__sub_I_GlobalData.cpp+0xad0>
               	leaq	48(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r12, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpq	$0, (%rbx)
               	je	0x4147da <_GLOBAL__sub_I_GlobalData.cpp+0xb2a>
               	movq	%rbx, %rdi
               	callq	0x43ecf4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x41480f <_GLOBAL__sub_I_GlobalData.cpp+0xb5f>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 488(%r13)
               	movq	%r15, %rdi
               	callq	0x423b40 <kotlin::ScopedThread::~ScopedThread()>
               	movq	240(%rsp), %rdi
               	callq	0x4272a0 <GCStateHolder::~GCStateHolder()>
               	movq	128(%rsp), %rdi
               	callq	0x423450 <__clang_call_terminate>
               	callq	0x43bec3 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	(%rbx), %rdi
               	callq	0x423b30 <std::thread::~thread()>
               	movq	%rbp, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414861 <_GLOBAL__sub_I_GlobalData.cpp+0xbb1>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	jne	0x414876 <_GLOBAL__sub_I_GlobalData.cpp+0xbc6>
               	jmp	0x414885 <_GLOBAL__sub_I_GlobalData.cpp+0xbd5>
               	movq	%rax, %rbx
               	movq	80(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x414885 <_GLOBAL__sub_I_GlobalData.cpp+0xbd5>
               	callq	0x413730 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x41489f <_GLOBAL__sub_I_GlobalData.cpp+0xbef>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41489f <_GLOBAL__sub_I_GlobalData.cpp+0xbef>
               	callq	0x413730 <free@plt>
               	movq	128(%rsp), %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_CallsChecker.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	312779(%rip), %rax      # 0x460ea0 <(anonymous namespace)::checker+0x30>
               	movq	%rax, 312724(%rip)      # 0x460e70 <(anonymous namespace)::checker>
               	movq	$1, 312721(%rip)        # 0x460e78 <(anonymous namespace)::checker+0x8>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 312719(%rip)     # 0x460e80 <(anonymous namespace)::checker+0x10>
               	movl	$1065353216, 312725(%rip) # imm = 0x3F800000
                                                # 0x460e90 <(anonymous namespace)::checker+0x20>
               	leaq	312726(%rip), %rdi      # 0x460e98 <(anonymous namespace)::checker+0x28>
               	xorl	%ebp, %ebp
               	movl	$3792, %edx             # imm = 0xED0
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movl	$237, %ebx
               	leaq	296932(%rip), %r12      # 0x45d100 <Kotlin_callsCheckerGoodFunctionNames>
               	leaq	312653(%rip), %r15      # 0x460e70 <(anonymous namespace)::checker>
               	jmp	0x414950 <_GLOBAL__sub_I_CallsChecker.cpp+0x90>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	callq	0x413710 <strlen@plt>
               	movq	%rax, 56(%r15,%rbp,2)
               	movq	%r14, 64(%r15,%rbp,2)
               	addq	$-1, %rbx
               	addq	$8, %rbp
               	cmpq	$1, %rbx
               	jbe	0x41495e <_GLOBAL__sub_I_CallsChecker.cpp+0x9e>
               	movq	(%rbp,%r12), %r14
               	testq	%r14, %r14
               	jne	0x414930 <_GLOBAL__sub_I_CallsChecker.cpp+0x70>
               	xorl	%eax, %eax
               	jmp	0x414938 <_GLOBAL__sub_I_CallsChecker.cpp+0x78>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414a86 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	leaq	312633(%rip), %rbx      # 0x460ea8 <(anonymous namespace)::checker+0x38>
               	leaq	316402(%rip), %rsi      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	movl	$14, %edx
               	movq	%rbx, %rdi
               	callq	0x423b90 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	leaq	312622(%rip), %rax      # 0x460eb8 <(anonymous namespace)::checker+0x48>
               	leaq	312855(%rip), %rbp      # 0x460fa8 <(anonymous namespace)::checker+0x138>
               	movq	%r15, %r13
               	negq	%r13
               	jmp	0x414a0c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	nopl	(%rax)
               	testl	%eax, %eax
               	js	0x4149c0 <_GLOBAL__sub_I_CallsChecker.cpp+0x100>
               	movq	%r14, %rdi
               	callq	0x424070 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	jne	0x414a0c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	jmp	0x414a65 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	nopl	(%rax)
               	movups	(%r14), %xmm0
               	movaps	%xmm0, (%rsp)
               	leaq	(%r14,%r13), %rax
               	addq	$-56, %rax
               	testq	%rax, %rax
               	jle	0x4149f5 <_GLOBAL__sub_I_CallsChecker.cpp+0x135>
               	shrq	$4, %rax
               	addq	$1, %rax
               	movq	%r14, %rcx
               	movups	-16(%rcx), %xmm0
               	movups	%xmm0, (%rcx)
               	addq	$-16, %rcx
               	addq	$-1, %rax
               	cmpq	$1, %rax
               	jg	0x4149e0 <_GLOBAL__sub_I_CallsChecker.cpp+0x120>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, 312488(%rip)     # 0x460ea8 <(anonymous namespace)::checker+0x38>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	je	0x414a65 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	movq	%rax, %r14
               	movq	(%rax), %rdx
               	movq	312463(%rip), %rax      # 0x460ea8 <(anonymous namespace)::checker+0x38>
               	movq	%rdx, %r12
               	subq	%rax, %r12
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x414a40 <_GLOBAL__sub_I_CallsChecker.cpp+0x180>
               	movq	312449(%rip), %rsi      # 0x460eb0 <(anonymous namespace)::checker+0x40>
               	movq	24(%rbx), %rdi
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x4149a0 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	cmpq	$2147483647, %r12       # imm = 0x7FFFFFFF
               	jg	0x4149a4 <_GLOBAL__sub_I_CallsChecker.cpp+0xe4>
               	cmpq	$-2147483648, %r12      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %r12d
               	movl	%r12d, %eax
               	jmp	0x4149a0 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414a86 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	movl	$312, %ebx              # imm = 0x138
               	leaq	(%r15,%rbx), %rdi
               	callq	0x424070 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	addq	$16, %rbx
               	cmpq	$3832, %rbx             # imm = 0xEF8
               	jne	0x414a70 <_GLOBAL__sub_I_CallsChecker.cpp+0x1b0>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_ThreadSuspension.cpp>:
               	leaq	312217(%rip), %rdi      # 0x460e40 <(anonymous namespace)::gSuspensionCondVar>
               	jmp	0x43c760 <std::condition_variable::condition_variable()>
               	nopl	(%rax)

<_GLOBAL__sub_I_ConcurrentMarkAndSweep.cpp>:
               	leaq	316129(%rip), %rdi      # 0x461d98 <(anonymous namespace)::markingCondVar>
               	jmp	0x43c760 <std::condition_variable::condition_variable()>

<_GLOBAL__sub_I_eh_alloc.cc>:
               	xorl	%eax, %eax
               	leaq	416379(%rip), %rdi      # 0x47a540 <(anonymous namespace)::emergency_pool>
               	movl	$10, %ecx
               	pushq	%rdx
               	rep		stosl	%eax, %es:(%rdi)
               	movl	$72704, %edi            # imm = 0x11C00
               	movq	$72704, 416411(%rip)    # imm = 0x11C00
                                                # 0x47a578 <(anonymous namespace)::emergency_pool+0x38>
               	callq	0x413af0 <malloc@plt>
               	movq	%rax, 416391(%rip)      # 0x47a570 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rax, %rax
               	jne	0x414b06 <_GLOBAL__sub_I_eh_alloc.cc+0x4a>
               	movq	$0, 416383(%rip)        # 0x47a578 <(anonymous namespace)::emergency_pool+0x38>
               	movq	$0, 416356(%rip)        # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x414b1c <_GLOBAL__sub_I_eh_alloc.cc+0x60>
               	movq	%rax, 416347(%rip)      # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	movq	$72704, (%rax)          # imm = 0x11C00
               	movq	$0, 8(%rax)
               	popq	%rax
               	retq

<_GLOBAL__sub_I_system_error.cc>:
               	pushq	%rax
               	leaq	305122(%rip), %rdx      # 0x45f308 <__dso_handle>
               	leaq	311147(%rip), %rsi      # 0x460a98 <(anonymous namespace)::generic_category_instance>
               	leaq	163412(%rip), %rdi      # 0x43c988 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	callq	0x413b50 <__cxa_atexit@plt>
               	leaq	305096(%rip), %rdx      # 0x45f308 <__dso_handle>
               	leaq	311113(%rip), %rsi      # 0x460a90 <(anonymous namespace)::system_category_instance>
               	popq	%rcx
               	leaq	163351(%rip), %rdi      # 0x43c966 <(anonymous namespace)::system_error_category::~system_error_category()>
               	jmp	0x413b50 <__cxa_atexit@plt>

<get_available_features>:
               	btl	$27, %edi
               	pushq	%rbx
               	movl	%edx, %r11d
               	jae	0x414b86 <get_available_features+0x32>
               	xorl	%ecx, %ecx
               	xgetbv
               	movl	%eax, %edx
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x414b86 <get_available_features+0x32>
               	andl	$230, %eax
               	xorl	%r10d, %r10d
               	movl	$1, %r9d
               	cmpl	$230, %eax
               	sete	%r10b
               	jmp	0x414b8c <get_available_features+0x38>
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	movl	%esi, %r8d
               	shrl	$15, %r8d
               	andl	$1, %r8d
               	btl	$23, %esi
               	jae	0x414ba1 <get_available_features+0x4d>
               	orl	$2, %r8d
               	btl	$25, %esi
               	jae	0x414bab <get_available_features+0x57>
               	orl	$8, %r8d
               	btl	$26, %esi
               	jae	0x414bb5 <get_available_features+0x61>
               	orl	$16, %r8d
               	btl	$23, %edi
               	jae	0x414bbf <get_available_features+0x6b>
               	orl	$4, %r8d
               	btl	$25, %edi
               	jae	0x414bcc <get_available_features+0x78>
               	orl	$262144, %r8d           # imm = 0x40000
               	testb	$2, %dil
               	je	0x414bd9 <get_available_features+0x85>
               	orl	$524288, %r8d           # imm = 0x80000
               	testb	$1, %dil
               	je	0x414be3 <get_available_features+0x8f>
               	orl	$32, %r8d
               	btl	$9, %edi
               	jae	0x414bed <get_available_features+0x99>
               	orl	$64, %r8d
               	btl	$19, %edi
               	jae	0x414bf7 <get_available_features+0xa3>
               	orb	$-128, %r8b
               	btl	$20, %edi
               	jae	0x414c04 <get_available_features+0xb0>
               	orl	$256, %r8d              # imm = 0x100
               	testl	%r9d, %r9d
               	je	0x414c23 <get_available_features+0xcf>
               	btl	$28, %edi
               	jae	0x414c16 <get_available_features+0xc2>
               	orl	$512, %r8d              # imm = 0x200
               	btl	$12, %edi
               	jae	0x414c23 <get_available_features+0xcf>
               	orl	$16384, %r8d            # imm = 0x4000
               	xorl	%esi, %esi
               	cmpl	$6, %r11d
               	jle	0x414d33 <get_available_features+0x1df>
               	movl	$7, %eax
               	movl	%esi, %ecx
               	cpuid
               	testb	$8, %bl
               	je	0x414c44 <get_available_features+0xf0>
               	orl	$65536, %r8d            # imm = 0x10000
               	testl	%r9d, %r9d
               	je	0x414c55 <get_available_features+0x101>
               	testb	$32, %bl
               	je	0x414c55 <get_available_features+0x101>
               	orl	$1024, %r8d             # imm = 0x400
               	btl	$8, %ebx
               	jae	0x414c62 <get_available_features+0x10e>
               	orl	$131072, %r8d           # imm = 0x20000
               	xorl	%esi, %esi
               	testl	%r10d, %r10d
               	je	0x414d33 <get_available_features+0x1df>
               	btl	$16, %ebx
               	jae	0x414c7a <get_available_features+0x126>
               	orl	$32768, %r8d            # imm = 0x8000
               	testl	%ebx, %ebx
               	jns	0x414c85 <get_available_features+0x131>
               	orl	$1048576, %r8d          # imm = 0x100000
               	btl	$30, %ebx
               	jae	0x414c92 <get_available_features+0x13e>
               	orl	$2097152, %r8d          # imm = 0x200000
               	btl	$17, %ebx
               	jae	0x414c9f <get_available_features+0x14b>
               	orl	$4194304, %r8d          # imm = 0x400000
               	btl	$28, %ebx
               	jae	0x414cac <get_available_features+0x158>
               	orl	$8388608, %r8d          # imm = 0x800000
               	btl	$26, %ebx
               	jae	0x414cb9 <get_available_features+0x165>
               	orl	$33554432, %r8d         # imm = 0x2000000
               	btl	$27, %ebx
               	jae	0x414cc6 <get_available_features+0x172>
               	orl	$16777216, %r8d         # imm = 0x1000000
               	btl	$21, %ebx
               	jae	0x414cd3 <get_available_features+0x17f>
               	orl	$134217728, %r8d        # imm = 0x8000000
               	testb	$2, %cl
               	je	0x414cdf <get_available_features+0x18b>
               	orl	$67108864, %r8d         # imm = 0x4000000
               	testb	$64, %cl
               	je	0x414ceb <get_available_features+0x197>
               	orl	$2147483648, %r8d       # imm = 0x80000000
               	movl	%ecx, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	btl	$10, %ecx
               	jae	0x414cfc <get_available_features+0x1a8>
               	orl	$2, %esi
               	btl	$11, %ecx
               	jae	0x414d05 <get_available_features+0x1b1>
               	orl	$4, %esi
               	btl	$12, %ecx
               	jae	0x414d0e <get_available_features+0x1ba>
               	orl	$8, %esi
               	btl	$14, %ecx
               	jae	0x414d1b <get_available_features+0x1c7>
               	orl	$1073741824, %r8d       # imm = 0x40000000
               	testb	$4, %dl
               	je	0x414d27 <get_available_features+0x1d3>
               	orl	$268435456, %r8d        # imm = 0x10000000
               	andb	$8, %dl
               	je	0x414d33 <get_available_features+0x1df>
               	orl	$536870912, %r8d        # imm = 0x20000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cpuid
               	cmpl	$2147483648, %eax       # imm = 0x80000000
               	jbe	0x414d73 <get_available_features+0x21f>
               	movl	$2147483649, %eax       # imm = 0x80000001
               	cpuid
               	testb	$64, %cl
               	je	0x414d54 <get_available_features+0x200>
               	orl	$2048, %r8d             # imm = 0x800
               	testl	%r9d, %r9d
               	je	0x414d73 <get_available_features+0x21f>
               	btl	$16, %ecx
               	jae	0x414d66 <get_available_features+0x212>
               	orl	$4096, %r8d             # imm = 0x1000
               	btl	$11, %ecx
               	jae	0x414d73 <get_available_features+0x21f>
               	orl	$8192, %r8d             # imm = 0x2000
               	movl	%r8d, 415826(%rip)      # 0x47a5cc <__cpu_model+0xc>
               	popq	%rbx
               	movl	%esi, 415823(%rip)      # 0x47a5d0 <__cpu_features2>
               	retq

<__cpu_indicator_init>:
               	xorl	%r9d, %r9d
               	cmpl	$0, 415796(%rip)        # 0x47a5c0 <__cpu_model>
               	jne	0x415176 <__cpu_indicator_init+0x3f4>
               	pushq	%rbx
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414dab <__cpu_indicator_init+0x29>
               	movl	%r9d, %eax
               	cpuid
               	movl	%ebx, %r10d
               	movl	%eax, %r8d
               	testl	%eax, %eax
               	jg	0x414dbe <__cpu_indicator_init+0x3c>
               	movl	$3, 415755(%rip)        # 0x47a5c0 <__cpu_model>
               	orl	$-1, %r9d
               	jmp	0x415171 <__cpu_indicator_init+0x3ef>
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414dab <__cpu_indicator_init+0x29>
               	movl	$1, %eax
               	cpuid
               	movl	%edx, %esi
               	movl	%ecx, %edi
               	movl	%eax, %edx
               	movl	%eax, %r11d
               	shrl	$4, %edx
               	movl	%eax, %ecx
               	shrl	$8, %r11d
               	shrl	$12, %ecx
               	andl	$15, %edx
               	andl	$15, %r11d
               	andl	$240, %ecx
               	cmpl	$1970169159, %r10d      # imm = 0x756E6547
               	jne	0x415048 <__cpu_indicator_init+0x2c6>
               	cmpl	$6, %r11d
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	movl	%edx, %eax
               	orl	%ecx, %eax
               	testb	%bl, %bl
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$62, %eax
               	je	0x414fe4 <__cpu_indicator_init+0x262>
               	ja	0x414ed5 <__cpu_indicator_init+0x153>
               	cmpl	$38, %eax
               	je	0x414f8a <__cpu_indicator_init+0x208>
               	ja	0x414e79 <__cpu_indicator_init+0xf7>
               	cmpl	$28, %eax
               	je	0x414f8a <__cpu_indicator_init+0x208>
               	ja	0x414e58 <__cpu_indicator_init+0xd6>
               	cmpl	$23, %eax
               	je	0x415027 <__cpu_indicator_init+0x2a5>
               	cmpl	$26, %eax
               	je	0x414fc0 <__cpu_indicator_init+0x23e>
               	cmpl	$15, %eax
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	jmp	0x415027 <__cpu_indicator_init+0x2a5>
               	cmpl	$31, %eax
               	ja	0x414e6b <__cpu_indicator_init+0xe9>
               	cmpl	$30, %eax
               	jb	0x415027 <__cpu_indicator_init+0x2a5>
               	jmp	0x414fc0 <__cpu_indicator_init+0x23e>
               	cmpl	$37, %eax
               	je	0x414fcc <__cpu_indicator_init+0x24a>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$47, %eax
               	je	0x414fcc <__cpu_indicator_init+0x24a>
               	ja	0x414eb4 <__cpu_indicator_init+0x132>
               	cmpl	$44, %eax
               	je	0x414fcc <__cpu_indicator_init+0x24a>
               	ja	0x414e9d <__cpu_indicator_init+0x11b>
               	cmpl	$42, %eax
               	je	0x414fd8 <__cpu_indicator_init+0x256>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$45, %eax
               	je	0x414fd8 <__cpu_indicator_init+0x256>
               	cmpl	$46, %eax
               	je	0x414fc0 <__cpu_indicator_init+0x23e>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$58, %eax
               	je	0x414fe4 <__cpu_indicator_init+0x262>
               	ja	0x414ec7 <__cpu_indicator_init+0x145>
               	cmpl	$55, %eax
               	jmp	0x414f47 <__cpu_indicator_init+0x1c5>
               	cmpl	$60, %eax
               	je	0x414ff0 <__cpu_indicator_init+0x26e>
               	cmpl	$61, %eax
               	jmp	0x414f1e <__cpu_indicator_init+0x19c>
               	cmpl	$85, %eax
               	je	0x415014 <__cpu_indicator_init+0x292>
               	ja	0x414f29 <__cpu_indicator_init+0x1a7>
               	cmpl	$71, %eax
               	je	0x414ffc <__cpu_indicator_init+0x27a>
               	ja	0x414f02 <__cpu_indicator_init+0x180>
               	cmpl	$63, %eax
               	je	0x414ff0 <__cpu_indicator_init+0x26e>
               	cmpl	$69, %eax
               	jae	0x414ff0 <__cpu_indicator_init+0x26e>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$77, %eax
               	je	0x414f99 <__cpu_indicator_init+0x217>
               	ja	0x414f12 <__cpu_indicator_init+0x190>
               	cmpl	$74, %eax
               	jmp	0x414f47 <__cpu_indicator_init+0x1c5>
               	cmpl	$78, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	cmpl	$79, %eax
               	je	0x414ffc <__cpu_indicator_init+0x27a>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$94, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	ja	0x414f4e <__cpu_indicator_init+0x1cc>
               	cmpl	$87, %eax
               	je	0x414fa8 <__cpu_indicator_init+0x226>
               	jb	0x414ffc <__cpu_indicator_init+0x27a>
               	cmpl	$90, %eax
               	je	0x414f99 <__cpu_indicator_init+0x217>
               	cmpl	$93, %eax
               	je	0x414f99 <__cpu_indicator_init+0x217>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$133, %eax
               	je	0x414fb4 <__cpu_indicator_init+0x232>
               	ja	0x414f6f <__cpu_indicator_init+0x1ed>
               	cmpl	$102, %eax
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	movabsq	$73014444035, %rax      # imm = 0x1100000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	cmpl	$142, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	cmpl	$158, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$1, 415280(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$6, 415265(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$7, 415250(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$11, 415238(%rip)       # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movabsq	$4294967299, %rax       # imm = 0x100000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$8589934595, %rax       # imm = 0x200000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$12884901891, %rax      # imm = 0x300000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$51539607555, %rax      # imm = 0xC00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$55834574851, %rax      # imm = 0xD00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$60129542147, %rax      # imm = 0xE00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$64424509443, %rax      # imm = 0xF00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$68719476739, %rax      # imm = 0x1000000003
               	movq	%rax, 415135(%rip)      # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$2, 415123(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	movl	%r8d, %edx
               	callq	0x414b54 <get_available_features>
               	movl	$1, 415101(%rip)        # 0x47a5c0 <__cpu_model>
               	jmp	0x415162 <__cpu_indicator_init+0x3e0>
               	cmpl	$1752462657, %r10d      # imm = 0x68747541
               	jne	0x415167 <__cpu_indicator_init+0x3e5>
               	cmpl	$15, %r11d
               	jne	0x415150 <__cpu_indicator_init+0x3ce>
               	shrl	$20, %eax
               	orl	%ecx, %edx
               	movzbl	%al, %eax
               	decl	%eax
               	cmpl	$7, %eax
               	ja	0x415150 <__cpu_indicator_init+0x3ce>
               	leaq	201199(%rip), %rcx      # 0x446268 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::word_size+0x8>
               	movslq	(%rcx,%rax,4), %rax
               	addq	%rcx, %rax
               	jmpq	*%rax
               	movl	$4, 415032(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	cmpl	$4, %edx
               	je	0x4150ae <__cpu_indicator_init+0x32c>
               	cmpl	$8, %edx
               	je	0x4150bd <__cpu_indicator_init+0x33b>
               	cmpl	$2, %edx
               	jne	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$4, 415007(%rip)        # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$5, 414992(%rip)        # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$6, 414977(%rip)        # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$8, 414958(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$5, 414946(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	cmpl	$2, %edx
               	jne	0x4150f3 <__cpu_indicator_init+0x371>
               	movl	$8, 414935(%rip)        # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	cmpl	$15, %edx
               	ja	0x415104 <__cpu_indicator_init+0x382>
               	movl	$7, 414918(%rip)        # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	cmpl	$47, %edx
               	jbe	0x4150e7 <__cpu_indicator_init+0x365>
               	cmpl	$79, %edx
               	ja	0x41511a <__cpu_indicator_init+0x398>
               	movl	$9, 414896(%rip)        # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	cmpl	$127, %edx
               	ja	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$10, 414879(%rip)       # 0x47a5c8 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$9, 414863(%rip)        # 0x47a5c4 <__cpu_model+0x4>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$10, 414851(%rip)       # 0x47a5c4 <__cpu_model+0x4>
               	cmpl	$31, %edx
               	ja	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$11, 414840(%rip)       # 0x47a5c8 <__cpu_model+0x8>
               	movl	%r8d, %edx
               	callq	0x414b54 <get_available_features>
               	movl	$2, 414814(%rip)        # 0x47a5c0 <__cpu_model>
               	xorl	%r9d, %r9d
               	jmp	0x415171 <__cpu_indicator_init+0x3ef>
               	movl	$3, 414799(%rip)        # 0x47a5c0 <__cpu_model>
               	movl	%r9d, %eax
               	popq	%rbx
               	retq
               	movl	%r9d, %eax
               	retq

<_start>:
               	xorl	%ebp, %ebp
               	movq	%rdx, %r9
               	popq	%rsi
               	movq	%rsp, %rdx
               	andq	$-16, %rsp
               	pushq	%rax
               	pushq	%rsp
               	movq	$4466992, %r8           # imm = 0x442930
               	movq	$4466896, %rcx          # imm = 0x4428D0
               	movq	$4434336, %rdi          # imm = 0x43A9A0
               	callq	0x4136c0 <__libc_start_main@plt>
               	hlt

<deregister_tm_clones>:
               	movl	$4590240, %eax          # imm = 0x460AA0
               	cmpq	$4590240, %rax          # imm = 0x460AA0
               	je	0x4151c2 <deregister_tm_clones+0x1e>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x4151c2 <deregister_tm_clones+0x1e>
               	movl	$4590240, %edi          # imm = 0x460AA0
               	jmpq	*%rax
               	retq

<register_tm_clones>:
               	movl	$4590240, %esi          # imm = 0x460AA0
               	movl	$2, %ecx
               	subq	$4590240, %rsi          # imm = 0x460AA0
               	sarq	$3, %rsi
               	movq	%rsi, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	testq	%rax, %rax
               	je	0x4151f9 <register_tm_clones+0x36>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x4151f9 <register_tm_clones+0x36>
               	movl	$4590240, %edi          # imm = 0x460AA0
               	jmpq	*%rax
               	retq

<__do_global_dtors_aux>:
               	cmpb	$0, 309439(%rip)        # 0x460ac0 <completed.7240>
               	jne	0x415250 <__do_global_dtors_aux+0x56>
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%r12
               	movl	$4549656, %r12d         # imm = 0x456C18
               	pushq	%rbx
               	movl	$4549664, %ebx          # imm = 0x456C20
               	subq	$4549656, %rbx          # imm = 0x456C18
               	sarq	$3, %rbx
               	decq	%rbx
               	movq	309406(%rip), %rax      # 0x460ac8 <dtor_idx.7242>
               	cmpq	%rbx, %rax
               	jae	0x41523f <__do_global_dtors_aux+0x45>
               	incq	%rax
               	movq	%rax, 309391(%rip)      # 0x460ac8 <dtor_idx.7242>
               	callq	*(%r12,%rax,8)
               	jmp	0x415223 <__do_global_dtors_aux+0x29>
               	callq	0x4151a4 <deregister_tm_clones>
               	popq	%rbx
               	popq	%r12
               	movb	$1, 309362(%rip)        # 0x460ac0 <completed.7240>
               	popq	%rbp
               	retq
               	retq

<frame_dummy>:
               	jmp	0x4151c3 <register_tm_clones>
               	nopl	(%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	278989(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 16(%rsp)
               	movb	314022(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4152f3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x93>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r12d, %r12d
               	js	0x4154c4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x264>
               	movq	296(%r15), %rdi
               	movl	%r12d, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rcx)
               	movq	$0, 24(%rcx)
               	leaq	268696(%rip), %rdx      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rcx)
               	movl	%r12d, 24(%rcx)
               	movq	%rax, 80(%rsp)
               	movl	8(%rbx), %edx
               	cmpl	%r12d, %edx
               	cmovlel	%edx, %r12d
               	movq	(%rbx), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41556b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x30b>
               	movq	(%rax), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41557a <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x31a>
               	testl	%r12d, %r12d
               	js	0x4154bf <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25f>
               	cmpl	%r12d, 8(%rbx)
               	jb	0x4154bf <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25f>
               	cmpl	%r12d, 24(%rcx)
               	jb	0x4154bf <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25f>
               	movq	(%rax), %rdx
               	testl	%r12d, %r12d
               	jle	0x41549c <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x23c>
               	leaq	32(%rcx), %r10
               	leaq	16(%rbx), %rbp
               	movl	%r12d, %r9d
               	cmpl	$1, %r12d
               	je	0x4153d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x173>
               	leaq	(%rbx,%r9,8), %rdx
               	addq	$16, %rdx
               	cmpq	%rdx, %r10
               	jae	0x41546b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x20b>
               	leaq	(%rcx,%r9,8), %rdx
               	addq	$32, %rdx
               	cmpq	%rdx, %rbp
               	jae	0x41546b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x20b>
               	xorl	%esi, %esi
               	movl	%r9d, %edx
               	subl	%esi, %edx
               	movq	%rsi, %r8
               	notq	%r8
               	addq	%r9, %r8
               	andq	$7, %rdx
               	je	0x415403 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1a3>
               	nopl	(%rax)
               	movq	(%rbp,%rsi,8), %rdi
               	movq	%rdi, (%r10,%rsi,8)
               	addq	$1, %rsi
               	addq	$-1, %rdx
               	jne	0x4153f0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x190>
               	cmpq	$7, %r8
               	jb	0x41549c <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x23c>
               	nopl	(%rax)
               	movq	16(%rbx,%rsi,8), %rdx
               	movq	%rdx, 32(%rcx,%rsi,8)
               	movq	24(%rbx,%rsi,8), %rdx
               	movq	%rdx, 40(%rcx,%rsi,8)
               	movq	32(%rbx,%rsi,8), %rdx
               	movq	%rdx, 48(%rcx,%rsi,8)
               	movq	40(%rbx,%rsi,8), %rdx
               	movq	%rdx, 56(%rcx,%rsi,8)
               	movq	48(%rbx,%rsi,8), %rdx
               	movq	%rdx, 64(%rcx,%rsi,8)
               	movq	56(%rbx,%rsi,8), %rdx
               	movq	%rdx, 72(%rcx,%rsi,8)
               	movq	64(%rbx,%rsi,8), %rdx
               	movq	%rdx, 80(%rcx,%rsi,8)
               	movq	72(%rbx,%rsi,8), %rdx
               	movq	%rdx, 88(%rcx,%rsi,8)
               	addq	$8, %rsi
               	cmpq	%rsi, %r9
               	jne	0x415410 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1b0>
               	jmp	0x41549c <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x23c>
               	movl	%r9d, %esi
               	andl	$-2, %esi
               	xorl	%edx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movups	(%rbp,%rdx,8), %xmm0
               	movups	%xmm0, (%r10,%rdx,8)
               	addq	$2, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x415480 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x220>
               	cmpq	%r9, %rsi
               	jne	0x4153d5 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x175>
               	movq	%rax, 88(%rsp)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r14
               	leaq	40(%rsp), %rbp
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	291394(%rip), %rsi      # 0x45c740 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r12d, %esi
               	movq	%r14, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	269857(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	leaq	268126(%rip), %rsi      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	leaq	268111(%rip), %rsi      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	nopl	(%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	278170(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	313201(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415628 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x98>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4156d8 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x148>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	268311(%rip), %rcx      # 0x456e80 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415683 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4156d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4156d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4156d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	shlq	$2, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136f0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	290862(%rip), %rsi      # 0x45c740 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	269325(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	nop

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	277674(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	312705(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415818 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x98>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4158c7 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x147>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	267671(%rip), %rcx      # 0x456df0 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415873 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4158c2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4158c2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4158c2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136f0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	290367(%rip), %rsi      # 0x45c740 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	268830(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	nop

<kfun:kotlin.Any#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	312342(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415983 <kfun:kotlin.Any#hashCode(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Any#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	272507(%rip), %rax      # 0x458250 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 128(%rsp)
               	leaq	277123(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 120(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	312154(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415a3f <kfun:kotlin.Any#toString(){}kotlin.String+0xaf>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 16(%rsp)
               	movq	8(%rsp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x415a92 <kfun:kotlin.Any#toString(){}kotlin.String+0x102>
               	leaq	64(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x4195f0 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	movq	%rax, 64(%rsp)
               	testq	%rax, %rax
               	leaq	290084(%rip), %r13      # 0x45c7b0 <__unnamed_2>
               	cmovneq	%rax, %r13
               	jmp	0x415aa2 <kfun:kotlin.Any#toString(){}kotlin.String+0x112>
               	movq	$0, 64(%rsp)
               	leaq	290062(%rip), %r13      # 0x45c7b0 <__unnamed_2>
               	leaq	72(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	288(%r14), %rcx
               	movq	%rcx, 152(%rsp)
               	leaq	144(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movabsq	$51539607552, %rcx      # imm = 0xC00000000
               	movq	%rcx, 160(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movl	%eax, %edi
               	movq	%r15, %rsi
               	callq	0x43a180 <Kotlin_Long_toStringRadix>
               	movq	%rax, %rbp
               	leaq	120(%rsp), %rbx
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	289899(%rip), %rsi      # 0x45c7d0 <__unnamed_3>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	311744(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415bd9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x415bf9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	movb	8(%r14), %al
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$82, 92(%rcx)
               	jne	0x415bf9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	xorb	8(%rbx), %al
               	xorb	$1, %al
               	jmp	0x415bfb <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x3b>
               	xorl	%eax, %eax
               	andb	$1, %al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	311664(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c29 <kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	289728(%rip), %rcx      # 0x45c7f0 <__unnamed_4>
               	cmpb	$0, 8(%rbx)
               	leaq	289749(%rip), %rax      # 0x45c810 <__unnamed_5>
               	cmovneq	%rcx, %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	311606(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c63 <kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movzbl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	311568(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c89 <kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Enum#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	311526(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415cb3 <kfun:kotlin.Enum#hashCode(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Enum#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	311488(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415cd9 <kfun:kotlin.Enum#toString(){}kotlin.String+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	311440(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d09 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	nopl	(%rax,%rax)

<kfun:kotlin.String#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	311392(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d39 <kfun:kotlin.String#toString(){}kotlin.String+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.String#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	311350(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d63 <kfun:kotlin.String#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$168, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	40(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rbp      # imm = 0x600000000
               	movq	%rbp, 32(%rsp)
               	movb	311216(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415de9 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x79>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, 8(%r14)
               	movq	$0, 16(%r14)
               	movq	%r15, %rdi
               	callq	0x43a280 <Kotlin_getCurrentStackTrace>
               	movq	%rax, 24(%r14)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	269430(%rip), %rcx      # 0x457aa0 <ktypeglobal:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 48(%rsp)
               	movq	%r14, 24(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	270221(%rip), %rax      # 0x457df0 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 8(%rsp)
               	movq	%rcx, 56(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 128(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	269820(%rip), %rbp      # 0x457cd0 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 136(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 24(%r15)
               	movl	306214(%rip), %eax      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x415f06 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x196>
               	leaq	306202(%rip), %rdi      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	12079(%rip), %rsi       # 0x418e30 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	movq	306131(%rip), %rbx      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 32(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	270385(%rip), %rax      # 0x457fa0 <ktypeglobal:kotlin.native.concurrent.Lock#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rbp, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	269693(%rip), %r13      # 0x457d60 <ktypeglobal:kotlin.native.concurrent.AtomicInt#internal>
               	movq	%r13, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 24(%rbx)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%r13, 16(%rax)
               	movq	%rcx, 96(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 32(%rbx)
               	movq	%rbp, 40(%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 32(%r14)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$168, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable#<get-message>(){}kotlin.String?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	310560(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416079 <kfun:kotlin.Throwable#<get-message>(){}kotlin.String?+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	310512(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160a9 <kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	310464(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160d9 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	269570(%rip), %rcx      # 0x457df0 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%r14, %rsi
               	cmpq	%rcx, %rax
               	je	0x4160fd <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x3d>
               	callq	0x418b40 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>
               	jmp	0x416102 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x42>
               	callq	0x418800 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.Throwable#printStackTrace(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$280, %rsp              # imm = 0x118
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movups	%xmm0, 80(%rsp)
               	movups	%xmm0, 96(%rsp)
               	leaq	268488(%rip), %rax      # 0x457a10 <ktypeglobal:kotlin.Throwable.ExceptionTraceBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 72(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 184(%rsp)
               	leaq	176(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbp      # imm = 0x400000000
               	movq	%rbp, 192(%rsp)
               	movb	310260(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4161a5 <kfun:kotlin.Throwable#printStackTrace(){}+0x95>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	72(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 160(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 144(%rsp)
               	movq	%rbx, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	275007(%rip), %rcx      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 152(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, 88(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	%rcx, 120(%rsp)
               	movq	$0, 8(%rax)
               	leaq	273456(%rip), %rax      # 0x458eb0 <ktypeglobal:kotlin.collections.HashSet#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 256(%rsp)
               	movaps	%xmm0, 240(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 248(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 256(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$96, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rcx
               	movq	%rcx, 112(%rsp)
               	movq	$0, 8(%rax)
               	leaq	272008(%rip), %rax      # 0x458980 <ktypeglobal:kotlin.collections.HashMap#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rcx, 264(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	264539(%rip), %rcx      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%r14, 32(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	264907(%rip), %r13      # 0x456e80 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%r13, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%rbp, 40(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%r13, 16(%rax)
               	movl	$16, 24(%rax)
               	movq	%rcx, 48(%rsp)
               	movq	%r14, 24(%rbx)
               	movq	$0, 32(%rbx)
               	movq	%rbp, 40(%rbx)
               	movq	%rcx, 48(%rbx)
               	movq	$2, 80(%rbx)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	xorps	%xmm0, %xmm0
               	movq	288(%r12), %rax
               	movq	%rax, 216(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 224(%rsp)
               	movq	48(%rbx), %rax
               	movq	%rax, 232(%rsp)
               	movl	8(%rax), %eax
               	movq	216(%rsp), %rcx
               	bsrl	%eax, %edx
               	xorl	$31, %edx
               	addl	$1, %edx
               	testl	%eax, %eax
               	movl	$33, %eax
               	cmovnel	%edx, %eax
               	movq	%rcx, 288(%r12)
               	movl	%eax, 88(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%r15)
               	movq	120(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movb	$1, 104(%rsp)
               	movq	80(%rsp), %rbx
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	leaq	286768(%rip), %rdx      # 0x45c548 <__unnamed_6>
               	leaq	72(%rsp), %rdi
               	movq	%rbx, %rsi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	testb	%al, %al
               	je	0x416550 <kfun:kotlin.Throwable#printStackTrace(){}+0x440>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movq	%rax, 32(%rsp)
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x416572 <kfun:kotlin.Throwable#printStackTrace(){}+0x462>
               	movq	184(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$280, %rsp              # imm = 0x118
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	309272(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416581 <kfun:kotlin.Throwable#printStackTrace(){}+0x471>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rsp), %rsi
               	movq	%rsi, 48(%rsp)
               	leaq	287390(%rip), %rdx      # 0x45c830 <__unnamed_7>
               	leaq	72(%rsp), %rdi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	269431(%rip), %rcx      # 0x458250 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 64(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419e60 <ThrowInvalidReceiverTypeException>
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	309045(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416664 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x74>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 32(%rbx)
               	jne	0x4166c2 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xd2>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	%rbx, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	testq	%r14, %r14
               	je	0x4166d9 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xe9>
               	leaq	72(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*128(%rax)
               	movq	%rax, %rdi
               	jmp	0x4166e0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xf0>
               	leaq	32(%rsp), %rdx
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e880 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x4168d3 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2e3>
               	leaq	286688(%rip), %rdi      # 0x45c6c0 <__unnamed_8>
               	callq	0x43a630 <Kotlin_io_Console_println>
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 128(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 64(%rsp)
               	movslq	16(%r14), %r15
               	testq	%r15, %r15
               	jns	0x4168af <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movq	8(%r14), %r13
               	movq	%r13, 120(%rsp)
               	movq	%r13, 128(%rsp)
               	movl	8(%r13), %edx
               	movl	%edx, %ebx
               	sarl	$31, %ebx
               	andl	%edx, %ebx
               	movl	%r15d, %edi
               	movl	%ebx, %esi
               	callq	0x417bf0 <checkRangeIndexes>
               	movq	(%r13), %rax
               	cmpl	%ebx, %r15d
               	jge	0x4168af <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	leaq	16(,%r15,2), %r10
               	addq	%r13, %r10
               	movl	%r15d, %r9d
               	notl	%r9d
               	addl	%ebx, %r9d
               	cmpl	$15, %r9d
               	jb	0x41688c <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x29c>
               	addq	$1, %r9
               	movq	%r9, %r8
               	andq	$-16, %r8
               	leaq	-16(%r8), %rax
               	movq	%rax, %rdi
               	shrq	$4, %rdi
               	addq	$1, %rdi
               	movl	%edi, %esi
               	andl	$7, %esi
               	cmpq	$112, %rax
               	jae	0x4167c8 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1d8>
               	xorl	%eax, %eax
               	jmp	0x416851 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x261>
               	leaq	240(,%r15,2), %rdx
               	addq	%r13, %rdx
               	andq	$-8, %rdi
               	negq	%rdi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, -208(%rdx,%rcx,2)
               	movups	%xmm0, -224(%rdx,%rcx,2)
               	movups	%xmm0, -192(%rdx,%rcx,2)
               	movups	%xmm0, -176(%rdx,%rcx,2)
               	movups	%xmm0, -160(%rdx,%rcx,2)
               	movups	%xmm0, -144(%rdx,%rcx,2)
               	movups	%xmm0, -128(%rdx,%rcx,2)
               	movups	%xmm0, -112(%rdx,%rcx,2)
               	movups	%xmm0, -96(%rdx,%rcx,2)
               	movups	%xmm0, -80(%rdx,%rcx,2)
               	movups	%xmm0, -64(%rdx,%rcx,2)
               	movups	%xmm0, -48(%rdx,%rcx,2)
               	movups	%xmm0, -32(%rdx,%rcx,2)
               	movups	%xmm0, -16(%rdx,%rcx,2)
               	leaq	128(%rcx), %rax
               	movups	%xmm0, 16(%rdx,%rcx,2)
               	movups	%xmm0, (%rdx,%rcx,2)
               	movq	%rax, %rcx
               	addq	$8, %rdi
               	jne	0x4167e0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1f0>
               	testq	%rsi, %rsi
               	je	0x416880 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x290>
               	movq	%r15, %rcx
               	addq	%r15, %rcx
               	leaq	(%rcx,%rax,2), %rax
               	addq	%r13, %rax
               	addq	$16, %rax
               	negq	%rsi
               	xorps	%xmm0, %xmm0
               	nopl	(%rax)
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x416870 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x280>
               	cmpq	%r8, %r9
               	je	0x4168af <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	addl	%r8d, %r15d
               	leaq	(%r10,%r8,2), %r10
               	subl	%r15d, %ebx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movw	$0, (%r10,%rax,2)
               	addq	$1, %rax
               	cmpl	%eax, %ebx
               	jne	0x4168a0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2b0>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	$0, 16(%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, 24(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 256(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rcx, (%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$124554051584, %rax     # imm = 0x1D00000000
               	movq	%rax, 48(%rsp)
               	movb	308165(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4169d4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0xd4>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	8(%rax), %rdi
               	movq	%r14, %rsi
               	callq	0x41c510 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x416af9 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1f9>
               	leaq	120(%rsp), %rbx
               	leaq	112(%rsp), %r13
               	leaq	104(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	285504(%rip), %rsi      # 0x45c548 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	128(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x4165f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	8(%r12), %rax
               	cmpq	%r14, %rax
               	movq	%r14, %rbp
               	movq	%r14, 8(%rsp)
               	je	0x416b8a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28a>
               	movq	24(%rax), %r15
               	movl	8(%r15), %ebx
               	movq	24(%rbp), %r14
               	movl	8(%r14), %ebp
               	cmpl	%ebp, %ebx
               	movl	%ebx, %edx
               	cmovgl	%ebp, %edx
               	xorl	%r13d, %r13d
               	testl	%edx, %edx
               	cmovsl	%r13d, %edx
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	movq	%r12, 24(%rsp)
               	cmpq	%r13, %rdx
               	je	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	nopl	(%rax)
               	movzbl	307945(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416abb <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1bb>
               	movq	%rdx, %r12
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdx
               	movq	24(%rsp), %r12
               	cmpl	%ebp, 8(%r14)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	cmpl	%ebx, 8(%r15)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movslq	%ebp, %rax
               	movq	16(%r14,%rax,8), %rax
               	movslq	%ebx, %rcx
               	cmpq	16(%r15,%rcx,8), %rax
               	jne	0x416b8e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>
               	addq	$1, %r13
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	cmpq	%r13, %rdx
               	jne	0x416aa0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1a0>
               	jmp	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	leaq	72(%rsp), %r13
               	leaq	64(%rsp), %rbx
               	leaq	56(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	285236(%rip), %rsi      # 0x45c548 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	285999(%rip), %rsi      # 0x45c860 <__unnamed_9>
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	leaq	80(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	285621(%rip), %rsi      # 0x45c720 <__unnamed_10>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x4165f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	xorl	%eax, %eax
               	jmp	0x416cf3 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3f3>
               	xorl	%ebx, %ebx
               	jmp	0x416ba1 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2a1>
               	movl	%r13d, %edx
               	xorl	%eax, %eax
               	addl	$-1, %edx
               	cmovsl	%eax, %edx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rbx
               	leaq	136(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x4160c0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %eax
               	movq	%rbx, 16(%rsp)
               	subl	%ebx, %eax
               	testl	%eax, %eax
               	jle	0x416c68 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x368>
               	movl	%eax, %r14d
               	xorl	%r15d, %r15d
               	leaq	285920(%rip), %rbx      # 0x45c8b0 <__unnamed_11>
               	movzbl	307641(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416be0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2e0>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x4160c0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r15
               	jae	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movq	16(%rax,%r15,8), %r13
               	addq	$1, %r15
               	movq	%r13, 152(%rsp)
               	movq	16(%r12), %rbp
               	movq	%rbp, %rdi
               	leaq	284972(%rip), %rsi      # 0x45c548 <__unnamed_6>
               	leaq	160(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	168(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	leaq	176(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x4165f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	cmpq	%r15, %r14
               	movq	8(%rsp), %rbp
               	jne	0x416bd0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2d0>
               	movq	16(%rsp), %r14
               	testl	%r14d, %r14d
               	je	0x416ce0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3e0>
               	leaq	192(%rsp), %r13
               	leaq	184(%rsp), %rdx
               	leaq	200(%rsp), %r15
               	movq	16(%r12), %rbx
               	leaq	284850(%rip), %rsi      # 0x45c548 <__unnamed_6>
               	movq	%rbx, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	285739(%rip), %rsi      # 0x45c8d0 <__unnamed_12>
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r14d, %esi
               	movq	%r15, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	285755(%rip), %rsi      # 0x45c900 <__unnamed_13>
               	movq	%rbx, %rdi
               	leaq	208(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x4165f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	40(%rbp), %rcx
               	movq	%rcx, 216(%rsp)
               	movb	$1, %al
               	testq	%rcx, %rcx
               	jne	0x416d1a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x41a>
               	movq	40(%rsp), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 288(%rdx)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	(%rsp), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	267520(%rip), %rcx      # 0x458250 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 224(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419e60 <ThrowInvalidReceiverTypeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	$0, 8(%rsp)
               	leaq	267402(%rip), %rax      # 0x458250 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 136(%rsp)
               	leaq	272019(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 32(%rsp)
               	movb	307047(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416e32 <kfun:kotlin.Throwable#toString(){}kotlin.String+0xc2>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	64(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rsp, %rdi
               	movq	%rdi, 40(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rbx, %rsi
               	callq	0x419360 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x416e7a <kfun:kotlin.Throwable#toString(){}kotlin.String+0x10a>
               	leaq	56(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x419290 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	276650(%rip), %rbx      # 0x45a720 <__unnamed_14>
               	cmovneq	%rax, %rbx
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f46 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1d6>
               	movq	%rbp, %r15
               	leaq	80(%rsp), %r13
               	leaq	128(%rsp), %rbp
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	285327(%rip), %rsi      # 0x45c960 <__unnamed_15>
               	movq	%rbp, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f19 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1a9>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x416f20 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1b0>
               	leaq	284576(%rip), %rsi      # 0x45c6c0 <__unnamed_8>
               	movq	%r15, %rbp
               	leaq	128(%rsp), %rbx
               	movq	%rbx, %rdi
               	leaq	112(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%rbp)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	%rbx, %rax
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1608, %rsp             # imm = 0x648
               	movq	%rsi, 136(%rsp)
               	movq	%rdi, %rbx
               	movb	306686(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416f9b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x2b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 560(%rsp)
               	movaps	%xmm0, 544(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 552(%rsp)
               	leaq	544(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 560(%rsp)
               	movq	24(%rbx), %r15
               	movl	8(%r15), %ebp
               	movq	-64(%rax), %rbx
               	movl	$1, %r14d
               	xchgl	%r14d, 328(%rbx)
               	movq	%rax, 8(%rsp)
               	movl	$1, %ecx
               	movq	-64(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x417034 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc4>
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rdi)
               	jmp	0x417036 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc6>
               	xorl	%edi, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 64(%rsp)
               	testl	%ebp, %ebp
               	je	0x41768a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x71a>
               	movl	%r14d, 116(%rsp)
               	movq	%rbx, 128(%rsp)
               	movl	%ecx, 44(%rsp)
               	movq	%rdi, 120(%rsp)
               	movl	$32, %esi
               	movq	%rbp, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	%rbp, %rcx
               	shlq	$5, %rcx
               	addq	%rax, %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 144(%rsp)
               	movq	$0, 152(%rsp)
               	movb	$0, 160(%rsp)
               	movq	$-1, 176(%rsp)
               	leaq	200(%rsp), %rax
               	movq	%rax, 184(%rsp)
               	movq	$0, 192(%rsp)
               	movb	$0, 200(%rsp)
               	movq	$-1, 216(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 224(%rsp)
               	movq	$0, 232(%rsp)
               	movb	$0, 240(%rsp)
               	movq	$-1, 256(%rsp)
               	leaq	280(%rsp), %rax
               	movq	%rax, 264(%rsp)
               	movq	$0, 272(%rsp)
               	movb	$0, 280(%rsp)
               	movq	$-1, 296(%rsp)
               	leaq	320(%rsp), %rax
               	movq	%rax, 304(%rsp)
               	movq	$0, 312(%rsp)
               	movb	$0, 320(%rsp)
               	movq	$-1, 336(%rsp)
               	leaq	360(%rsp), %rax
               	movq	%rax, 344(%rsp)
               	movq	$0, 352(%rsp)
               	movb	$0, 360(%rsp)
               	movq	$-1, 376(%rsp)
               	leaq	400(%rsp), %rax
               	movq	%rax, 384(%rsp)
               	movq	$0, 392(%rsp)
               	movb	$0, 400(%rsp)
               	movq	$-1, 416(%rsp)
               	leaq	440(%rsp), %rax
               	movq	%rax, 424(%rsp)
               	movq	$0, 432(%rsp)
               	movb	$0, 440(%rsp)
               	movq	$-1, 456(%rsp)
               	leaq	480(%rsp), %rax
               	movq	%rax, 464(%rsp)
               	movq	$0, 472(%rsp)
               	movb	$0, 480(%rsp)
               	movq	$-1, 496(%rsp)
               	leaq	520(%rsp), %rax
               	movq	%rax, 504(%rsp)
               	movq	$0, 512(%rsp)
               	movb	$0, 520(%rsp)
               	movq	$-1, 536(%rsp)
               	leaq	88(%rsp), %r13
               	movq	64(%rsp), %r12
               	xorl	%eax, %eax
               	movq	%r15, 32(%rsp)
               	movq	%rbp, 104(%rsp)
               	jmp	0x4172d0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x360>
               	movq	%rcx, (%r14)
               	movq	88(%rsp), %rax
               	movq	%rax, 16(%r14)
               	movq	32(%rsp), %r15
               	movq	104(%rsp), %rbp
               	movq	80(%rsp), %rax
               	movq	%rax, 8(%r14)
               	movq	%r13, 72(%rsp)
               	movq	$0, 80(%rsp)
               	movb	$0, 88(%rsp)
               	addq	$32, %r14
               	movq	%r14, 56(%rsp)
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	cmpq	%rbp, %rax
               	je	0x41756b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5fb>
               	movq	16(%r15,%rax,8), %rcx
               	cmpq	$2, %rcx
               	jb	0x4172c3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x353>
               	movq	%rax, 16(%rsp)
               	addq	$-1, %rcx
               	movq	48(%rsp), %rax
               	movq	56(%rsp), %r14
               	movq	%r14, %r15
               	movq	%rax, 24(%rsp)
               	subq	%rax, %r15
               	movq	%r15, %rbx
               	sarq	$5, %rbx
               	leaq	186228(%rip), %rax      # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%rax, (%rsp)
               	leaq	576(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rdx
               	xorl	%r8d, %r8d
               	leaq	186201(%rip), %r9       # 0x444a7c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%eax, %eax
               	callq	0x435b70 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
               	movq	%r13, 72(%rsp)
               	movq	%rbp, %rdi
               	callq	0x413710 <strlen@plt>
               	movq	%rax, %rbp
               	cmpq	$16, %rax
               	jb	0x417364 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x3f4>
               	testq	%rbp, %rbp
               	js	0x417917 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x9a7>
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	movq	%rax, 72(%rsp)
               	movq	%rbp, 88(%rsp)
               	testq	%rbp, %rbp
               	je	0x41737a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x40a>
               	cmpq	$1, %rbp
               	jne	0x4173b1 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x441>
               	movb	576(%rsp), %al
               	movb	%al, (%r13)
               	movq	%rbp, 80(%rsp)
               	movb	$0, (%r13,%rbp)
               	cmpq	%r14, %r12
               	je	0x4173d4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
               	leaq	16(%r14), %rax
               	movq	%rax, (%r14)
               	movq	72(%rsp), %rcx
               	leaq	88(%rsp), %r13
               	cmpq	%r13, %rcx
               	jne	0x417283 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x313>
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x41728f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x31f>
               	movq	%r13, %rdi
               	leaq	576(%rsp), %rsi
               	movq	%rbp, %rdx
               	callq	0x413720 <memcpy@plt>
               	movq	%rbp, 80(%rsp)
               	movb	$0, (%r13,%rbp)
               	cmpq	%r14, %r12
               	jne	0x41738a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x41a>
               	testq	%r15, %r15
               	movq	%rbx, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rbx), %r13
               	movabsq	$576460752303423487, %rcx # imm = 0x7FFFFFFFFFFFFFF
               	cmpq	%rcx, %r13
               	cmovaq	%rcx, %r13
               	addq	%rbx, %rax
               	cmovbq	%rcx, %r13
               	movq	%r12, %rbp
               	movq	24(%rsp), %rbx
               	subq	%rbx, %rbp
               	sarq	$5, %rbp
               	testq	%r13, %r13
               	je	0x417425 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4b5>
               	movl	$32, %esi
               	movq	%r13, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r14
               	jmp	0x417428 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4b8>
               	xorl	%r14d, %r14d
               	shlq	$5, %rbp
               	leaq	(%r14,%rbp), %rax
               	addq	$16, %rax
               	movq	%rax, (%r14,%rbp)
               	movq	72(%rsp), %rcx
               	leaq	88(%rsp), %rdx
               	cmpq	%rdx, %rcx
               	movq	32(%rsp), %r15
               	je	0x41745f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ef>
               	leaq	(%r14,%rbp), %rax
               	movq	%rcx, (%rax)
               	movq	88(%rsp), %rax
               	movq	%rax, 16(%r14,%rbp)
               	jmp	0x417465 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4f5>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rax)
               	movq	80(%rsp), %rax
               	movq	%rax, 8(%r14,%rbp)
               	movq	%rdx, 72(%rsp)
               	movq	$0, 80(%rsp)
               	movb	$0, 88(%rsp)
               	cmpq	%rbx, %r12
               	je	0x417560 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5f0>
               	leaq	16(%r14), %rcx
               	leaq	16(%rbx), %rax
               	jmp	0x4174d6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x566>
               	nopl	(%rax,%rax)
               	movq	%rcx, -16(%rbp)
               	movq	(%rax), %rcx
               	movq	%rcx, (%rbp)
               	movq	-8(%rax), %rcx
               	movq	%rcx, -8(%rbp)
               	movq	%rax, -16(%rax)
               	movq	$0, -8(%rax)
               	movb	$0, (%rax)
               	leaq	32(%rbp), %rcx
               	leaq	32(%rax), %rdx
               	addq	$16, %rax
               	cmpq	%r12, %rax
               	movq	%rdx, %rax
               	je	0x4174ef <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x57f>
               	movq	%rcx, %rbp
               	movq	%rcx, -16(%rcx)
               	movq	-16(%rax), %rcx
               	cmpq	%rax, %rcx
               	jne	0x4174a0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x530>
               	movups	(%rcx), %xmm0
               	movups	%xmm0, (%rbp)
               	jmp	0x4174ab <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x53b>
               	addq	$16, %rbp
               	addq	$32, %rbp
               	cmpq	%rbx, %r12
               	jne	0x417509 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
               	jmp	0x417521 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5b1>
               	nop
               	addq	$16, %rbx
               	cmpq	%r12, %rbx
               	je	0x41751c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5ac>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x417500 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x590>
               	callq	0x413730 <free@plt>
               	jmp	0x417500 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x590>
               	movq	24(%rsp), %rbx
               	testq	%rbx, %rbx
               	je	0x41752e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5be>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, 48(%rsp)
               	movq	%rbp, 56(%rsp)
               	shlq	$5, %r13
               	movq	%r13, %r12
               	addq	%r14, %r12
               	movq	72(%rsp), %rdi
               	leaq	88(%rsp), %r13
               	cmpq	%r13, %rdi
               	je	0x417556 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5e6>
               	callq	0x413730 <free@plt>
               	movq	104(%rsp), %rbp
               	jmp	0x4172be <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x34e>
               	leaq	32(%r14), %rbp
               	testq	%rbx, %rbx
               	jne	0x417526 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5b6>
               	jmp	0x41752e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5be>
               	movq	%r12, 64(%rsp)
               	movq	504(%rsp), %rdi
               	leaq	520(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41758a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x61a>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	464(%rsp), %rdi
               	leaq	480(%rsp), %rax
               	cmpq	%rax, %rdi
               	movq	128(%rsp), %rbx
               	movl	116(%rsp), %r14d
               	je	0x4175b1 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x641>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	424(%rsp), %rdi
               	leaq	440(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4175cb <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x65b>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	384(%rsp), %rdi
               	leaq	400(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4175e5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x675>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	344(%rsp), %rdi
               	leaq	360(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4175ff <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x68f>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	304(%rsp), %rdi
               	leaq	320(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417619 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a9>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	264(%rsp), %rdi
               	leaq	280(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417633 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6c3>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	224(%rsp), %rdi
               	leaq	240(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41764d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6dd>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	184(%rsp), %rdi
               	leaq	200(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417667 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6f7>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417681 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x711>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	120(%rsp), %rdi
               	movl	44(%rsp), %ecx
               	testq	%rdi, %rdi
               	je	0x4176b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x4176b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	cmpl	$1, %eax
               	jne	0x4176b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	movb	304874(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4176b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x4176e3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%r14d, %eax
               	xchgl	%eax, (%rbx)
               	testl	%r14d, %r14d
               	jne	0x4176e3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	cmpl	$1, %eax
               	jne	0x4176e3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	movb	304825(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4176e3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 600(%rsp)
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 584(%rsp)
               	leaq	576(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 592(%rsp)
               	movq	48(%rsp), %r13
               	movq	56(%rsp), %r14
               	movq	%r14, %r15
               	subq	%r13, %r15
               	movq	%r15, %rbx
               	shrq	$5, %rbx
               	testl	%ebx, %ebx
               	movq	%r13, 16(%rsp)
               	movq	%r14, 24(%rsp)
               	js	0x417923 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x9b3>
               	movq	296(%rax), %rdi
               	movq	%r15, %rax
               	shrq	$2, %rax
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%rax, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	259379(%rip), %rax      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbp)
               	movl	%ebx, 24(%rbp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 600(%rsp)
               	cmpq	%r13, %r14
               	jne	0x4177c7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x857>
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x41787a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x90a>
               	sarq	$5, %r15
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	cmpq	$1, %r15
               	movl	$1, %ebx
               	cmovaq	%r15, %rbx
               	movq	288(%rax), %rcx
               	xorl	%r15d, %r15d
               	leaq	144(%rsp), %r12
               	movabsq	$4294967296, %r14       # imm = 0x100000000
               	movq	$0, 168(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 160(%rsp)
               	movq	(%r13), %rdi
               	leaq	168(%rsp), %rsi
               	callq	0x436470 <CreateStringFromCString>
               	movq	168(%rsp), %rax
               	movq	%r15, %rcx
               	sarq	$29, %rcx
               	movq	%rax, 32(%rbp,%rcx)
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	%r14, %r15
               	addq	$32, %r13
               	addq	$-1, %rbx
               	jne	0x417800 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x890>
               	movq	32(%rsp), %r15
               	movq	%r15, 568(%rsp)
               	movq	584(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	16(%rsp), %r14
               	movq	24(%rsp), %rbp
               	cmpq	%rbp, %r14
               	je	0x4178cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x95c>
               	movq	%r14, %rbx
               	jmp	0x4178b9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x949>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%rbp, %rbx
               	je	0x4178cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x95c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4178b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x940>
               	callq	0x413730 <free@plt>
               	jmp	0x4178b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x940>
               	testq	%r14, %r14
               	je	0x4178d9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x969>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	136(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	552(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$1608, %rsp             # imm = 0x648
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	184802(%rip), %rdi      # 0x444b00 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4361d0 <std::__throw_length_error(char const*)>
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	movq	%rax, %rbp
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417b90 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc20>
               	movq	%rax, %rbx
               	movq	%r12, 64(%rsp)
               	movq	504(%rsp), %rdi
               	leaq	520(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417a5f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaef>
               	movq	464(%rsp), %rdi
               	leaq	480(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417a7d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb0d>
               	movq	424(%rsp), %rdi
               	leaq	440(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417a9b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb2b>
               	movq	384(%rsp), %rdi
               	leaq	400(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417ab9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb49>
               	movq	344(%rsp), %rdi
               	leaq	360(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417ad7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb67>
               	movq	304(%rsp), %rdi
               	leaq	320(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417af5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb85>
               	movq	264(%rsp), %rdi
               	leaq	280(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b13 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xba3>
               	movq	224(%rsp), %rdi
               	leaq	240(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b31 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbc1>
               	movq	184(%rsp), %rdi
               	leaq	200(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b4f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbdf>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a3f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xacf>
               	callq	0x43b1e5 <operator delete(void*)>
               	leaq	48(%rsp), %rdi
               	callq	0x4361f0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
               	movq	120(%rsp), %rdi
               	movl	44(%rsp), %esi
               	callq	0x436250 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	464(%rsp), %rdi
               	leaq	480(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417976 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa06>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	424(%rsp), %rdi
               	leaq	440(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41798f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa1f>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	384(%rsp), %rdi
               	leaq	400(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4179a8 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa38>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	344(%rsp), %rdi
               	leaq	360(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4179c1 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa51>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	304(%rsp), %rdi
               	leaq	320(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4179da <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa6a>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	264(%rsp), %rdi
               	leaq	280(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4179f3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa83>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	224(%rsp), %rdi
               	leaq	240(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a0c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa9c>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	184(%rsp), %rdi
               	leaq	200(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a25 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xab5>
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417a3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaca>
               	jmp	0x417a3f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xacf>
               	movq	%rax, %rbp
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	584(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	24(%rsp), %rax
               	cmpq	%rax, 16(%rsp)
               	je	0x417bcc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc5c>
               	movq	16(%rsp), %rbx
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x417bc1 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc51>
               	callq	0x413730 <free@plt>
               	addq	$16, %rbx
               	cmpq	24(%rsp), %rbx
               	jne	0x417bb0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc40>
               	cmpq	$0, 16(%rsp)
               	je	0x417bde <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc6e>
               	movq	16(%rsp), %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<checkRangeIndexes>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movl	%edi, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 192(%rsp)
               	movups	%xmm0, 8(%rsp)
               	leaq	268312(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 32(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 64(%rsp)
               	movb	303331(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417cb6 <checkRangeIndexes+0xc6>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebx, %ebx
               	js	0x417ce8 <checkRangeIndexes+0xf8>
               	cmpl	%r15d, %ebp
               	jg	0x417ce8 <checkRangeIndexes+0xf8>
               	cmpl	%ebp, %ebx
               	jg	0x417dc5 <checkRangeIndexes+0x1d5>
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rsp, %rdi
               	movq	%rdi, 72(%rsp)
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	80(%rsp), %rdx
               	leaq	281722(%rip), %rsi      # 0x45c980 <__unnamed_16>
               	movq	%rsp, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	88(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebx, %esi
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	96(%rsp), %rdx
               	leaq	281735(%rip), %rsi      # 0x45c9b0 <__unnamed_17>
               	movq	%rsp, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	104(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebp, %esi
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	112(%rsp), %rdx
               	leaq	281748(%rip), %rsi      # 0x45c9e0 <__unnamed_18>
               	movq	%rsp, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	120(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%r15d, %esi
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	259370(%rip), %rcx      # 0x4572d0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 136(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 144(%rsp)
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	152(%rsp), %rdx
               	leaq	281493(%rip), %rsi      # 0x45c980 <__unnamed_16>
               	leaq	24(%rsp), %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	160(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	168(%rsp), %rdx
               	leaq	281576(%rip), %rsi      # 0x45ca00 <__unnamed_19>
               	leaq	24(%rsp), %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	176(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebp, %esi
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	184(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	259318(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 192(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	302786(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417ed7 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x17>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x417f02 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x42>
               	cmpl	%ebp, 8(%rbx)
               	jbe	0x417f11 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x51>
               	movq	(%rbx), %rax
               	movslq	%ebp, %rax
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257479(%rip), %rsi      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edx, %r14d
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	302686(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417f3b <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x1b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x417fc6 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa6>
               	movl	8(%rbx), %edx
               	movl	%ebp, %edi
               	movl	%r14d, %esi
               	callq	0x417bf0 <checkRangeIndexes>
               	movq	(%rbx), %rax
               	cmpl	%r14d, %ebp
               	jge	0x417fc1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movslq	%ebp, %rdx
               	notl	%ebp
               	addl	%r14d, %ebp
               	je	0x417fa4 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x84>
               	addq	$1, %rbp
               	movq	%rbp, %rcx
               	andq	$-2, %rcx
               	leaq	(%rcx,%rdx), %rax
               	leaq	(%rbx,%rdx,8), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, (%rdx,%rsi,8)
               	addq	$2, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x417f90 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x70>
               	cmpq	%rcx, %rbp
               	jne	0x417fa7 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x87>
               	jmp	0x417fc1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movq	%rdx, %rax
               	movl	%r14d, %ecx
               	nopw	(%rax,%rax)
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$1, %rax
               	cmpl	%eax, %ecx
               	jne	0x417fb0 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x90>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	257283(%rip), %rsi      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.MemoryModel.$init_global#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$384, %rsp              # imm = 0x180
               	leaq	88(%rsp), %rbx
               	movl	$296, %edx              # imm = 0x128
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 96(%rsp)
               	movq	%rbx, 288(%r14)
               	movabsq	$158913789952, %rax     # imm = 0x2500000000
               	movq	%rax, 104(%rsp)
               	movb	302421(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418044 <kfun:kotlin.native.MemoryModel.$init_global#internal+0x64>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	260916(%rip), %rbx      # 0x457ba0 <ktypeglobal:kotlin.native.MemoryModel#internal>
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 112(%rsp)
               	movq	%rcx, 120(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 128(%rsp)
               	movq	%rcx, 136(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	256957(%rip), %rbx      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 160(%rsp)
               	movq	%rcx, 168(%rsp)
               	movq	%rcx, 176(%rsp)
               	movq	120(%rsp), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	16(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	136(%rsp), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 192(%rsp)
               	movq	%rax, 200(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 24(%rcx)
               	movq	152(%rsp), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 208(%rsp)
               	movq	%rax, 216(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 32(%rcx)
               	movq	168(%rsp), %rsi
               	movq	%rsi, 224(%rsp)
               	movq	%rsi, 297248(%rip)      # 0x460ad0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	leaq	297241(%rip), %rdi      # 0x460ad0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rsi), %rax
               	movq	%rax, 232(%rsp)
               	leaq	280678(%rip), %rcx      # 0x45ca30 <__unnamed_20>
               	movq	%rcx, 8(%rax)
               	movl	$0, 16(%rax)
               	movq	24(%rsi), %rax
               	movq	%rax, 240(%rsp)
               	leaq	280680(%rip), %rcx      # 0x45ca50 <__unnamed_21>
               	movq	%rcx, 8(%rax)
               	movl	$1, 16(%rax)
               	movq	16(%rsi), %rax
               	movq	%rax, 248(%rsp)
               	leaq	280682(%rip), %rcx      # 0x45ca70 <__unnamed_22>
               	movq	%rcx, 8(%rax)
               	movl	$2, 16(%rax)
               	callq	0x424ab0 <InitAndRegisterGlobal>
               	movq	297139(%rip), %rax      # 0x460ad0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rax), %rcx
               	movq	%rcx, 256(%rsp)
               	movq	%rcx, 264(%rsp)
               	movq	24(%rax), %rcx
               	movq	%rcx, 272(%rsp)
               	movq	%rcx, 280(%rsp)
               	movq	16(%rax), %rax
               	movq	%rax, 288(%rsp)
               	movq	%rax, 296(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 304(%rsp)
               	movq	%rcx, 312(%rsp)
               	movq	%rcx, 320(%rsp)
               	movq	264(%rsp), %rcx
               	movq	%rcx, 328(%rsp)
               	movq	16(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	280(%rsp), %rax
               	movq	312(%rsp), %rcx
               	movq	%rcx, 336(%rsp)
               	movq	%rax, 344(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 24(%rcx)
               	movq	296(%rsp), %rax
               	movq	312(%rsp), %rcx
               	movq	%rcx, 352(%rsp)
               	movq	%rax, 360(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 32(%rcx)
               	movq	312(%rsp), %rbx
               	movq	%rbx, 368(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r15
               	movq	$0, 8(%rax)
               	leaq	268055(%rip), %rcx      # 0x459a90 <ktypeglobal:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0#internal>
               	movq	%rcx, 16(%rax)
               	movq	%r15, 24(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	267762(%rip), %rcx      # 0x4599a0 <ktypeglobal:kotlin.enums.EnumEntriesList#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r15, 24(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	leaq	72(%rsp), %rsi
               	movq	288(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	%rbx, %rdi
               	callq	0x41fd00 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rbx, 376(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	leaq	296641(%rip), %rdi      # 0x460ad8 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movq	%rbx, %rsi
               	callq	0x424ab0 <InitAndRegisterGlobal>
               	movq	96(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$384, %rsp              # imm = 0x180
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	32(%rsp), %r12
               	leaq	40(%rsp), %rbp
               	movups	%xmm0, 88(%rsp)
               	leaq	266219(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	301252(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4184d5 <kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String+0x95>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r14
               	movq	%r14, 24(%rsp)
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	0x418570 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	279956(%rip), %rsi      # 0x45caa0 <__unnamed_23>
               	movq	%r14, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 56(%rsp)
               	leaq	64(%rsp), %rsi
               	callq	0x418570 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	leaq	72(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r15)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.debugString#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movups	%xmm0, 144(%rsp)
               	leaq	265918(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 136(%rsp)
               	movq	$0, 40(%rsp)
               	leaq	261250(%rip), %rax      # 0x458250 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 64(%rsp)
               	movb	300921(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418620 <kfun:kotlin.native.concurrent.debugString#internal+0xb0>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x418785 <kfun:kotlin.native.concurrent.debugString#internal+0x215>
               	leaq	96(%rsp), %rbp
               	leaq	88(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	%r12, 72(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	32(%rsp), %rdi
               	movq	%rdi, 80(%rsp)
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rsi
               	callq	0x419360 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	279261(%rip), %rsi      # 0x45c960 <__unnamed_15>
               	movq	%r12, %rdi
               	leaq	104(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*120(%rax)
               	movl	%eax, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 168(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 176(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbp, %rsi
               	callq	0x43a180 <Kotlin_Long_toStringRadix>
               	movq	%rax, 24(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	leaq	120(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	jmp	0x41878c <kfun:kotlin.native.concurrent.debugString#internal+0x21c>
               	leaq	278324(%rip), %rax      # 0x45c6c0 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	300493(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4187cc <kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String+0x1c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	leaq	181058(%rip), %rdx      # 0x444b18 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x436ea0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x436470 <CreateStringFromCString>
               	movq	%rax, (%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 16(%rsp)
               	movb	300304(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418889 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x89>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	295538(%rip), %eax      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x4188ba <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0xba>
               	leaq	295526(%rip), %rdi      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1403(%rip), %rsi        # 0x418e30 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 295455(%rip)      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418957 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x157>
               	movq	24(%r12), %r15
               	movq	%r15, %rdi
               	callq	0x419030 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	movq	16(%r12), %rax
               	movq	%rax, 40(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 48(%rsp)
               	cmpq	%rbx, 295410(%rip)      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x41894f <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x14f>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	movq	8(%rax), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x418978 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x178>
               	leaq	80(%rsp), %rsi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$89, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	callq	*(%rax)
               	movq	%rax, %rbx
               	movq	16(%r12), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rbx, 8(%rax)
               	movq	8(%r12), %rax
               	movq	%rax, 112(%rsp)
               	movq	$0, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x4190d0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%r15, %rdi
               	callq	0x4190d0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	299905(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418a18 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x68>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r14), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	295140(%rip), %eax      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418a48 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x98>
               	leaq	295128(%rip), %rdi      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1005(%rip), %rsi        # 0x418e30 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 295057(%rip)      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	setne	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	299719(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x418b03 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x93>
               	movq	%r15, %rdi
               	callq	0x4189b0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	je	0x418b14 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xa4>
               	leaq	24(%rsp), %rsi
               	movq	%r15, %rdi
               	callq	0x418800 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	testq	%rax, %rax
               	je	0x418b1d <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xad>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rcx)
               	jmp	0x418b24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x4189b0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x418ad9 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x69>
               	leaq	278437(%rip), %rax      # 0x45cac0 <__unnamed_24>
               	jmp	0x418b24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	leaq	277404(%rip), %rax      # 0x45c6c0 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	299492(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418bb5 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x75>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %r14
               	movq	%r14, %rdi
               	callq	0x419030 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 176(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$73014444032, %rax      # imm = 0x1100000000
               	movq	%rax, 64(%rsp)
               	movq	8(%rbx), %rax
               	movq	8(%rax), %r13
               	movq	%r13, 72(%rsp)
               	movq	%r13, 80(%rsp)
               	movq	%r13, 88(%rsp)
               	movl	294605(%rip), %eax      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418c5f <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x11f>
               	leaq	294593(%rip), %rdi      # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	470(%rip), %rsi         # 0x418e30 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	cmpq	%r13, 294522(%rip)      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	je	0x418d01 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1c1>
               	movq	80(%rsp), %rbp
               	movq	%rbp, 96(%rsp)
               	movl	294556(%rip), %eax      # 0x460b18 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418c94 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x154>
               	leaq	294544(%rip), %rdi      # 0x460b18 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	673(%rip), %rsi         # 0x418f30 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	movq	294477(%rip), %rax      # 0x460ae8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 104(%rsp)
               	cmpq	%rax, %rbp
               	jne	0x418d73 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x233>
               	movq	8(%rbx), %rax
               	movq	294444(%rip), %rcx      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	255791(%rip), %rcx      # 0x457410 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	278047(%rip), %rsi      # 0x45cb10 <__unnamed_25>
               	movq	%rbx, %rdi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	8(%rbx), %rbp
               	movl	294413(%rip), %eax      # 0x460b18 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418d23 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1e3>
               	leaq	294401(%rip), %rdi      # 0x460b18 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	530(%rip), %rsi         # 0x418f30 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	movq	294334(%rip), %rax      # 0x460ae8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	testq	%rdi, %rdi
               	je	0x418db7 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x277>
               	leaq	144(%rsp), %rsi
               	callq	0x416f70 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, 80(%rsp)
               	movq	$0, 16(%rbx)
               	movq	8(%rbx), %rax
               	movq	80(%rsp), %rcx
               	movq	%rcx, 176(%rsp)
               	movq	%rcx, 8(%rax)
               	movq	80(%rsp), %rbx
               	movq	%rbx, 32(%rsp)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, %rdi
               	callq	0x4190d0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %r15
               	movq	%r15, 136(%rsp)
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	8(%rbx), %rax
               	movq	294128(%rip), %rcx      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 24(%rsp)
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%r14, %rdi
               	callq	0x4190d0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>

<kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	298767(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418e8a <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal+0x5a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	257998(%rip), %rdx      # 0x457e80 <ktypeglobal:kotlin.native.concurrent.UNINITIALIZED#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 293918(%rip)      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	leaq	293911(%rip), %rdi      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	293845(%rip), %rsi      # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	callq	0x424ab0 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	298511(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418f8a <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal+0x5a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	257886(%rip), %rdx      # 0x457f10 <ktypeglobal:kotlin.native.concurrent.INITIALIZING#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 293670(%rip)      # 0x460ae8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	leaq	293663(%rip), %rdi      # 0x460ae8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	293597(%rip), %rsi      # 0x460ae8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	callq	0x424ab0 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#lock(){}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	298324(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419045 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x15>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %rcx
               	cmpl	$2, -72(%rax)
               	je	0x419070 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x40>
               	leaq	-72(%rax), %rdi
               	leaq	197(%rip), %rsi         # 0x419130 <kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal>
               	callq	0x43a140 <CallInitThreadLocal>
               	xorl	%edi, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	nopl	(%rax)
               	movzbl	298233(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4190a0 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x70>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	sete	%cl
               	cmpl	%ebp, %eax
               	je	0x4190bd <kfun:kotlin.native.concurrent.Lock#lock(){}+0x8d>
               	testb	%cl, %cl
               	je	0x419090 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x60>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	16(%rbx), %rax
               	lock
               	addl	$1, 8(%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.Lock#unlock(){}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	298164(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4190e5 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x15>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movl	8(%rax), %eax
               	testl	%eax, %eax
               	jle	0x419100 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x30>
               	movq	16(%rbx), %rax
               	lock
               	addl	$-1, 8(%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	xorl	%ebp, %ebp
               	xorl	%edi, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	8(%rbx), %rcx
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$80, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movb	297994(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41918f <kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal+0x5f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%edi, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	%rax, %r14
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	257647(%rip), %rcx      # 0x458030 <ktypeglobal:kotlin.native.concurrent.CurrentThread#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	%rbx, (%rax)
               	xorl	%edi, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	252416(%rip), %rdx      # 0x456c40 <ktypeglobal:kotlin.Any#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	xorl	%edi, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$80, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	297630(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x419302 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x72>
               	movq	8(%r15), %rax
               	testb	$2, 89(%rax)
               	jne	0x419311 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x81>
               	jmp	0x419340 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	testb	$2, 89(%rax)
               	je	0x419340 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
               	movq	80(%rax), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x419340 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
               	leaq	32(%rsp), %rdx
               	movl	$46, %esi
               	callq	0x420030 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	movq	%rax, %rdi
               	movl	$36, %esi
               	movq	%r14, %rdx
               	callq	0x420030 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	jmp	0x419342 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb2>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	262353(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	movb	297386(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4193ef <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x8f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	88(%rax), %ecx
               	testl	$256, %ecx              # imm = 0x100
               	jne	0x419421 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xc1>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	72(%rax), %r15
               	movq	%r15, 24(%rsp)
               	xorl	%ebx, %ebx
               	testq	%r15, %r15
               	je	0x419400 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	andl	$512, %ecx              # imm = 0x200
               	je	0x419400 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	movq	80(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	testq	%rbx, %rbx
               	je	0x4193fe <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x9e>
               	cmpl	$0, 8(%r15)
               	je	0x419400 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	leaq	48(%rsp), %r12
               	leaq	80(%rsp), %r13
               	movq	%r13, 40(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	276193(%rip), %rsi      # 0x45cb60 <__unnamed_26>
               	movq	%r13, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	leaq	64(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	jmp	0x419400 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	nop

<kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	297168(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4194c9 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x4194f4 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x4194f4 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	8(%r14), %rax
               	cmpq	8(%rbx), %rax
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	297094(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419513 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	movl	292351(%rip), %eax      # 0x460b1c <state_global$kotlin.native.internal.NativePtr>
               	cmpl	$2, %eax
               	je	0x419535 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x35>
               	leaq	292339(%rip), %rdi      # 0x460b1c <state_global$kotlin.native.internal.NativePtr>
               	leaq	704(%rip), %rsi         # 0x4197f0 <kfun:kotlin.native.internal.NativePtr.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	xorl	%ebx, %eax
               	popq	%rbx
               	retq

<kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	296944(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4195a9 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String+0x69>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x4195f0 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	275938(%rip), %rsi      # 0x45cba0 <__unnamed_27>
               	cmovneq	%rax, %rsi
               	leaq	275895(%rip), %rdi      # 0x45cb80 <__unnamed_28>
               	movq	%r12, %rdx
               	callq	0x436c70 <Kotlin_String_plusImpl>
               	movq	%rax, (%r12)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movups	%xmm0, 120(%rsp)
               	leaq	261697(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	296726(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419683 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x93>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	80(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	testq	%rbx, %rbx
               	je	0x419729 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x139>
               	movq	72(%rax), %r15
               	movq	%r15, 64(%rsp)
               	testq	%r15, %r15
               	je	0x4197c3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	movl	8(%r15), %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	cmpb	$0, 170623(%rip)        # 0x443168 <BOOLEAN_RANGE_TO>
               	jne	0x419730 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	testl	%ebp, %ebp
               	jne	0x419730 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	testl	%ebp, %ebp
               	movq	$0, 8(%rax)
               	leaq	251894(%rip), %rdx      # 0x456f10 <ktypeglobal:kotlin.Boolean#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	sete	24(%rax)
               	jmp	0x41974a <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x15a>
               	xorl	%ebx, %ebx
               	jmp	0x4197c3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	xorl	%eax, %eax
               	testl	%ebp, %ebp
               	sete	%al
               	shlq	$4, %rax
               	leaq	274270(%rip), %rcx      # 0x45c6a0 <BOOLEAN_CACHE>
               	addq	%rax, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	%rcx, 72(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	testq	%rcx, %rcx
               	je	0x4197c3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	cmpb	$0, 8(%rcx)
               	jne	0x4197c3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	leaq	88(%rsp), %r13
               	leaq	112(%rsp), %rbp
               	movq	%rbp, 80(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	275400(%rip), %rsi      # 0x45cb60 <__unnamed_26>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.internal.NativePtr.$init_global#internal>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	296273(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419848 <kfun:kotlin.native.internal.NativePtr.$init_global#internal+0x58>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256880(%rip), %rdx      # 0x4583e0 <ktypeglobal:kotlin.native.internal.NativePtr.Companion#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 291440(%rip)      # 0x460af0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	leaq	291433(%rip), %rdi      # 0x460af0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	$0, 24(%rax)
               	movq	291418(%rip), %rsi      # 0x460af0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	callq	0x424ab0 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	leaq	32(%rsp), %rbx
               	movups	%xmm0, 104(%rsp)
               	leaq	260980(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	296011(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41994e <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x9e>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	96(%rsp), %rdi
               	movq	%rdi, 24(%rsp)
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	leaq	275070(%rip), %rbx      # 0x45cc10 <__unnamed_29>
               	movq	%rbx, %rsi
               	cmpq	%r15, %rax
               	je	0x4199c3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	testq	%rax, %rax
               	je	0x4199bc <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x10c>
               	leaq	40(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x4199c3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	leaq	273661(%rip), %rsi      # 0x45c6c0 <__unnamed_8>
               	movq	%rsi, 40(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	275039(%rip), %rsi      # 0x45cc40 <__unnamed_30>
               	movq	%rbp, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*8(%rax)
               	cmpq	%r15, %rax
               	je	0x419a48 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	testq	%rax, %rax
               	je	0x419a41 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x191>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rbx
               	jmp	0x419a48 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	leaq	273528(%rip), %rbx      # 0x45c6c0 <__unnamed_8>
               	leaq	80(%rsp), %rdx
               	movq	%rbx, 72(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	295660(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419aad <kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4198b0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<ThrowNullPointerException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	295532(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419b2d <ThrowNullPointerException+0x5d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	252564(%rip), %rcx      # 0x4575f0 <ktypeglobal:kotlin.NullPointerException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowArrayIndexOutOfBoundsException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	295324(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419bfd <ThrowArrayIndexOutOfBoundsException+0x5d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	252516(%rip), %rcx      # 0x457690 <ktypeglobal:kotlin.ArrayIndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowClassCastException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$176, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 160(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	255371(%rip), %rax      # 0x458250 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 32(%rsp)
               	leaq	259990(%rip), %rcx      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 72(%rsp)
               	leaq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 80(%rsp)
               	movb	295004(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419d3d <ThrowClassCastException+0xcd>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 88(%rsp)
               	movq	%rbx, 16(%rsp)
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 96(%rsp)
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	112(%rsp), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	48(%rsp), %rdi
               	movq	%rdi, 104(%rsp)
               	movq	%rax, 56(%rsp)
               	callq	0x419540 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	120(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rdx
               	leaq	274108(%rip), %rsi      # 0x45cc60 <__unnamed_31>
               	leaq	24(%rsp), %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	136(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419540 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	144(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	152(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	252183(%rip), %rcx      # 0x457730 <ktypeglobal:kotlin.ClassCastException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 160(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	72(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowInvalidReceiverTypeException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	294605(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419ecc <ThrowInvalidReceiverTypeException+0x6c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$27, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	leaq	32(%rsp), %rdx
               	testq	%rax, %rax
               	leaq	273904(%rip), %rsi      # 0x45ccf0 <__unnamed_32>
               	cmovneq	%rax, %rsi
               	leaq	273813(%rip), %rdi      # 0x45cca0 <__unnamed_33>
               	callq	0x436c70 <Kotlin_String_plusImpl>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	250606(%rip), %rcx      # 0x457230 <ktypeglobal:kotlin.RuntimeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 40(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax)

<ThrowIllegalArgumentException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	294332(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419fdd <ThrowIllegalArgumentException+0x5d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	250724(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowFileFailedToInitializeException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	294124(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a0ad <ThrowFileFailedToInitializeException+0x5d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	252756(%rip), %rcx      # 0x457c30 <ktypeglobal:kotlin.native.FileFailedToInitializeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	leaq	273444(%rip), %rsi      # 0x45cd10 <__unnamed_34>
               	movq	%rbx, %rdi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<ReportUnhandledException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %rbx
               	movq	$0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 16(%rsp)
               	movb	293917(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a17c <ReportUnhandledException+0x5c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	273405(%rip), %rdi      # 0x45cd80 <__unnamed_35>
               	callq	0x43a450 <Kotlin_io_Console_print>
               	movq	%rbx, %rdi
               	callq	0x416110 <kfun:kotlin.Throwable#printStackTrace(){}>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 80(%rsp)
               	movb	293728(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a239 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x69>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdx
               	movq	$0, 8(%rax)
               	leaq	254622(%rip), %rcx      # 0x458500 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
               	movq	%rax, 8(%rsp)
               	movq	%rcx, 16(%rax)
               	movq	%rdx, 88(%rsp)
               	movq	%rdx, 288897(%rip)      # 0x460af8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 144(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 104(%rsp)
               	leaq	96(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, 112(%rsp)
               	movl	288789(%rip), %eax      # 0x460b10 <state_global$kotlin.native.MemoryModel>
               	cmpl	$2, %eax
               	je	0x41a313 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x143>
               	leaq	288777(%rip), %rdi      # 0x460b10 <state_global$kotlin.native.MemoryModel>
               	leaq	-9006(%rip), %rsi       # 0x417fe0 <kfun:kotlin.native.MemoryModel.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	movq	288694(%rip), %r13      # 0x460ad0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 32(%rsp)
               	movl	8(%r13), %ebp
               	testl	%ebp, %ebp
               	js	0x41a50f <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33f>
               	movq	296(%r12), %rdi
               	leaq	31(,%rbp,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	248113(%rip), %rax      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r15, 40(%rsp)
               	movl	8(%r13), %ebp
               	xorl	%r14d, %r14d
               	testl	%ebp, %ebp
               	cmovsl	%r14d, %ebp
               	cmpl	%r14d, %ebp
               	je	0x41a3f9 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x229>
               	nopl	(%rax)
               	movzbl	293321(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a3d0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x200>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r13,%r14,8), %rax
               	movq	%rax, 48(%rsp)
               	movslq	16(%rax), %rcx
               	cmpl	%ecx, 24(%rbx)
               	jbe	0x41a50a <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33a>
               	movq	16(%rbx), %rdx
               	movq	%rax, 32(%rbx,%rcx,8)
               	addq	$1, %r14
               	cmpl	%r14d, %ebp
               	jne	0x41a3c0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x1f0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x41a514 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x344>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r15, 120(%rsp)
               	cmpl	$2, 24(%rbx)
               	jbe	0x41a50a <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33a>
               	movq	48(%rbx), %rdi
               	movq	%rdi, 152(%rsp)
               	movq	104(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	288391(%rip), %rax      # 0x460ad0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	16(%rax), %rsi
               	movq	%rsi, 160(%rsp)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*112(%rax)
               	movl	%eax, %ebx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	251971(%rip), %rdx      # 0x457cd0 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rdx, 16(%rax)
               	testb	%bl, %bl
               	je	0x41a4a7 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2d7>
               	movq	%rcx, 168(%rsp)
               	movq	$0, 24(%rax)
               	jmp	0x41a4bf <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2ef>
               	movq	%rcx, 176(%rsp)
               	movq	$0, 24(%rax)
               	movq	%rcx, 184(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rcx, 24(%rax)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	288281(%rip), %rsi      # 0x460af8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	leaq	288274(%rip), %rdi      # 0x460af8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	callq	0x424ab0 <InitAndRegisterGlobal>
               	movq	72(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	leaq	247733(%rip), %rsi      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%r15, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r14d
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 144(%rsp)
               	movups	%xmm0, 184(%rsp)
               	leaq	257755(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 176(%rsp)
               	movups	%xmm0, 160(%rsp)
               	movq	%rax, 152(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 16(%rsp)
               	movb	292769(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a5f8 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xc8>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41a627 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%r14d, %ebx
               	jg	0x41a627 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%ebx, %ebp
               	jg	0x41a6f4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x1c4>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	32(%rsp), %r12
               	leaq	176(%rsp), %r13
               	movq	%r13, 24(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	272259(%rip), %rsi      # 0x45cdd0 <__unnamed_36>
               	movq	%r13, %rdi
               	movq	%r12, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebp, %esi
               	leaq	40(%rsp), %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	272274(%rip), %rsi      # 0x45ce00 <__unnamed_37>
               	movq	%r13, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	271183(%rip), %rsi      # 0x45c9e0 <__unnamed_18>
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%r14d, %esi
               	leaq	72(%rsp), %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	leaq	80(%rsp), %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	248810(%rip), %rcx      # 0x4572d0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 88(%rsp)
               	jmp	0x41a7a4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x274>
               	leaq	112(%rsp), %r14
               	leaq	104(%rsp), %r13
               	leaq	152(%rsp), %r12
               	movq	%r12, 96(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	272049(%rip), %rsi      # 0x45cdd0 <__unnamed_36>
               	movq	%r12, %rdi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	272114(%rip), %rsi      # 0x45ce30 <__unnamed_38>
               	movq	%r12, %rdi
               	leaq	120(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	128(%rsp), %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	136(%rsp), %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	248792(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 144(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdi, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movq	$0, 224(%rsp)
               	movups	%xmm0, 248(%rsp)
               	leaq	257124(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 240(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 200(%rsp)
               	leaq	192(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 208(%rsp)
               	movb	292143(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a86a <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0xaa>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	240(%rsp), %rbx
               	movq	%rbx, 216(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	$0, 176(%rsp)
               	leaq	144(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	288(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 128(%rsp)
               	leaq	249837(%rip), %rax      # 0x4578e1 <ktypeglobal:kotlin.String#internal+0x1>
               	andq	$-4, %rax
               	movq	%rax, 8(%rsp)
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	269798(%rip), %r14      # 0x45c700 <__unnamed_39>
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r12, %r8
               	callq	0x41e9e0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 136(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%rax, %r12
               	movl	$1, %ebp
               	leaq	32(%rsp), %r14
               	jmp	0x41a98f <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1cf>
               	nop
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	leaq	80(%rsp), %rdx
               	callq	0x41e960 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addl	$1, %ebp
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41abaa <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3ea>
               	movzbl	291788(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a9cd <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x20d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	leaq	152(%rsp), %rsi
               	callq	*8(%rax)
               	movq	%rax, %r15
               	cmpl	$2, %ebp
               	jl	0x41aa5b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x29b>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %r14
               	movq	%r13, %r12
               	leaq	269492(%rip), %r13      # 0x45c6e0 <__unnamed_40>
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	movq	%r12, %r13
               	movq	%r14, %r12
               	leaq	32(%rsp), %r14
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	leaq	160(%rsp), %r8
               	callq	0x41e9e0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r14, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	cmpq	$0, 16(%rsp)
               	je	0x41ab00 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x340>
               	movq	16(%rsp), %rcx
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	8(%rcx), %rdi
               	leaq	252341(%rip), %rcx      # 0x458470 <ktypeglobal:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	cmpq	%rcx, %rax
               	je	0x41ab60 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3a0>
               	leaq	271637(%rip), %rsi      # 0x45cfe0 <__unnamed_41>
               	cmpq	%rdi, %r15
               	je	0x41aaf7 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	leaq	269289(%rip), %rsi      # 0x45c6c0 <__unnamed_8>
               	testq	%r15, %r15
               	je	0x41aaf7 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%rsi, 64(%rsp)
               	jmp	0x41ab75 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3b5>
               	nop
               	testq	%r15, %r15
               	je	0x41a970 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	cmpl	$25, (%rax,%rcx)
               	je	0x41a970 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$84, 92(%rax)
               	jne	0x41ab82 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3c2>
               	movzwl	8(%r15), %esi
               	movq	%rbx, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41e880 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x41a980 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1c0>
               	nopw	%cs:(%rax,%rax)
               	movq	%r15, %rsi
               	leaq	56(%rsp), %rdx
               	callq	0x4198b0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, %rsi
               	movq	%rax, 56(%rsp)
               	movq	%rbx, %rdi
               	leaq	72(%rsp), %rdx
               	jmp	0x41a97b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	leaq	104(%rsp), %rdx
               	jmp	0x41a97b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	leaq	176(%rsp), %r14
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	269132(%rip), %rbp      # 0x45c720 <__unnamed_10>
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41e9e0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 176(%rsp)
               	movq	%rbx, 224(%rsp)
               	movq	120(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	200(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	291136(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ac59 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41ad07 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc7>
               	testq	%rbx, %rbx
               	je	0x41ad00 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41ad00 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41ad00 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	16(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movb	290925(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ad2c <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x1c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	xorl	%ebp, %ebp
               	jmp	0x41ae00 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xf0>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41ae40 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x130>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41ae44 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x134>
               	movzbl	290656(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41adc0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41adc0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41adfe <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xee>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%ebp, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	290582(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ae83 <kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	290550(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aea3 <kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpl	$0, 76(%rbx)
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	290512(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aec9 <kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	movb	290439(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41af12 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x22>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movl	68(%r12), %r13d
               	leal	-1(%r13), %eax
               	movslq	%eax, %rbx
               	jmp	0x41af7d <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x8d>
               	nop
               	testq	%r14, %r14
               	je	0x41b011 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x121>
               	addq	$-1, %rbx
               	testl	%ebx, %ebx
               	js	0x41afe4 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xf4>
               	movzbl	290312(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41af91 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xa1>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b016 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	addl	$-1, %r13d
               	cmpl	$0, 16(%rax,%rbx,4)
               	js	0x41af79 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41b01b <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x12b>
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b016 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	movq	16(%rax,%rbx,8), %rdi
               	movq	%rdi, 40(%rsp)
               	testq	%rdi, %rdi
               	je	0x41af70 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x80>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41af79 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	jmp	0x41afea <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	movl	$4294967295, %r13d      # imm = 0xFFFFFFFF
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testl	%r13d, %r13d
               	setns	%al
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ebx, %r13d
               	jmp	0x41afea <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419ad0 <ThrowNullPointerException>

<kfun:kotlin.collections.HashMap#get(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	290066(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b087 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x67>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41b0b6 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x96>
               	movq	16(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	testq	%rcx, %rcx
               	je	0x41b0d3 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb3>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41b0d8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb8>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, (%r14)
               	jmp	0x41b0b8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x98>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	289856(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b159 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x79>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x41bc70 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x41c510 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	movl	%eax, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movq	16(%r12), %rcx
               	movq	%rcx, 104(%rsp)
               	testq	%rcx, %rcx
               	jne	0x41b259 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x179>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	8(%r12), %rax
               	movq	%rax, 72(%rsp)
               	movl	8(%rax), %r13d
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%r13d, %r13d
               	js	0x41b2c4 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1e4>
               	movq	296(%rbx), %rdi
               	leaq	31(,%r13,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	244361(%rip), %rdx      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r13d, 24(%rax)
               	movq	%rcx, 120(%rsp)
               	movq	%rcx, 16(%r12)
               	movq	%rcx, 24(%rsp)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%ebp, %ebp
               	js	0x41b282 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1a2>
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b2bf <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movq	(%rcx), %rax
               	movslq	%ebp, %rax
               	movq	%r15, 16(%rcx,%rax,8)
               	xorl	%eax, %eax
               	jmp	0x41b29e <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1be>
               	notl	%ebp
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b2bf <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movslq	%ebp, %rdx
               	movq	16(%rcx,%rdx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	(%rcx), %rsi
               	movq	%r15, 16(%rcx,%rdx,8)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	245892(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	267364(%rip), %rsi      # 0x45c760 <__unnamed_42>
               	movq	%rbx, %rdi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#remove(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	289303(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b382 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0x72>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41cbc0 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x41b3ba <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xaa>
               	movq	16(%rbx), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b3db <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xcb>
               	cmpl	%eax, 8(%rdi)
               	jbe	0x41b3e0 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xd0>
               	movslq	%eax, %rcx
               	movq	16(%rdi,%rcx,8), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	%eax, %esi
               	callq	0x417ec0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	jmp	0x41b3bc <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xac>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	289086(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b45b <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0x6b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	40(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b4a5 <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	251836(%rip), %rdx      # 0x458c50 <ktypeglobal:kotlin.collections.HashMapKeys#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 40(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	288878(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b52b <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x6b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b575 <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	251868(%rip), %rdx      # 0x458d40 <ktypeglobal:kotlin.collections.HashMapEntrySet#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 56(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	288746(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b5af <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x1f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41b68f <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xff>
               	testq	%rbx, %rbx
               	je	0x41b68b <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	cmpl	$65, (%rax,%rcx)
               	jne	0x41b68b <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movl	76(%r14), %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41b693 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x103>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41d280 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	movl	%eax, %ecx
               	jmp	0x41b695 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x105>
               	xorl	%ecx, %ecx
               	jmp	0x41b6ab <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	movb	$1, %cl
               	jmp	0x41b6ab <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	xorl	%ecx, %ecx
               	movq	%r15, %rax
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	288368(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b729 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x69>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d4b0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r14d, %r14d
               	leaq	32(%rsp), %r12
               	movabsq	$34359738368, %r13      # imm = 0x800000000
               	jmp	0x41b776 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xb6>
               	nop
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	xorl	%eax, %ebp
               	movq	%rbx, %rdi
               	callq	0x41d530 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addl	%ebp, %r14d
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41b84b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x18b>
               	movzbl	288259(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b796 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xd6>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r12, 288(%r15)
               	movq	%r13, 48(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41b86e <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1ae>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rsp)
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b869 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1a9>
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b810 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x150>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	jmp	0x41b812 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x152>
               	xorl	%ebp, %ebp
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 80(%rsp)
               	testq	%rax, %rax
               	je	0x41b8b1 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1f1>
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b869 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1a9>
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 88(%rsp)
               	testq	%rdi, %rdi
               	jne	0x41b750 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x90>
               	xorl	%eax, %eax
               	jmp	0x41b75d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x9d>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%r14d, %eax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	243962(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	callq	0x419ad0 <ThrowNullPointerException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, 8(%rsp)
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	48(%rsp), %rbp
               	leaq	56(%rsp), %r15
               	movups	%xmm0, 216(%rsp)
               	leaq	252775(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 208(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 32(%rsp)
               	movb	287803(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b95e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x9e>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	leal	(%rax,%rax,2), %esi
               	addl	$2, %esi
               	leaq	208(%rsp), %r12
               	movq	%r12, 40(%rsp)
               	movq	%r12, %rdi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	266829(%rip), %rsi      # 0x45cbd0 <__unnamed_43>
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41d4b0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	jmp	0x41b9da <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	leaq	192(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	callq	0x41d530 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addl	$1, %r13d
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41bbd4 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x314>
               	movzbl	287647(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b9fa <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x13a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r13d, %r13d
               	jle	0x41ba13 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x153>
               	movq	%r12, %rdi
               	leaq	265431(%rip), %rsi      # 0x45c6e0 <__unnamed_40>
               	leaq	64(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 192(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 96(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41bc26 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x366>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 112(%rsp)
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bc21 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x361>
               	movq	16(%rax,%rcx,8), %r15
               	movq	%r15, 120(%rsp)
               	testq	%r15, %r15
               	je	0x41baf0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x230>
               	movq	8(%rbx), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bb00 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x240>
               	movq	%r12, %rdi
               	leaq	266544(%rip), %rsi      # 0x45cc10 <__unnamed_29>
               	leaq	128(%rsp), %rdx
               	jmp	0x41bb29 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x269>
               	nopl	(%rax)
               	xorl	%esi, %esi
               	jmp	0x41bb1e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x25e>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	136(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	leaq	144(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	$61, %esi
               	leaq	152(%rsp), %rdx
               	callq	0x41e880 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 160(%rsp)
               	testq	%rax, %rax
               	je	0x41bc69 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3a9>
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bc21 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x361>
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 168(%rsp)
               	testq	%rbp, %rbp
               	je	0x41b9b0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf0>
               	movq	8(%rbx), %rsi
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bbb0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x2f0>
               	movq	%r12, %rdi
               	leaq	266350(%rip), %rsi      # 0x45cc10 <__unnamed_29>
               	leaq	176(%rsp), %rdx
               	jmp	0x41b9bd <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xfd>
               	nop
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	leaq	184(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	jmp	0x41b9b2 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf2>
               	leaq	72(%rsp), %rdx
               	leaq	266256(%rip), %rsi      # 0x45cbf0 <__unnamed_44>
               	leaq	208(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	8(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	243010(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	callq	0x419ad0 <ThrowNullPointerException>
               	nop

<kfun:kotlin.collections.HashMap#checkIsMutable(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	286924(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bccd <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x5d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 80(%r14)
               	je	0x41bce8 <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x78>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	243616(%rip), %rcx      # 0x4574b0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.rehash#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 144(%rsp)
               	movb	286693(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bdb4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	68(%rbx), %eax
               	cmpl	76(%rbx), %eax
               	jle	0x41bebc <kfun:kotlin.collections.HashMap.rehash#internal+0x18c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movq	16(%rbx), %r15
               	movq	%r15, 56(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	jmp	0x41be30 <kfun:kotlin.collections.HashMap.rehash#internal+0x100>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	movq	%rdx, 16(%r15,%rcx,8)
               	addl	$1, %r12d
               	addq	$1, %r13
               	movslq	68(%rbx), %rdx
               	cmpq	%rdx, %r13
               	jge	0x41bec5 <kfun:kotlin.collections.HashMap.rehash#internal+0x195>
               	movzbl	286540(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41be4d <kfun:kotlin.collections.HashMap.rehash#internal+0x11d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %rax
               	movq	%rax, 64(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	cmpl	$0, 16(%rax,%r13,4)
               	js	0x41be2c <kfun:kotlin.collections.HashMap.rehash#internal+0xfc>
               	movq	8(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	16(%rax,%r13,8), %rdx
               	movq	%rdx, 88(%rsp)
               	cmpl	%r12d, %ecx
               	jbe	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	(%rax), %rcx
               	movslq	%r12d, %rcx
               	movq	%rdx, 16(%rax,%rcx,8)
               	testq	%r15, %r15
               	je	0x41be28 <kfun:kotlin.collections.HashMap.rehash#internal+0xf8>
               	movl	8(%r15), %eax
               	cmpq	%rax, %r13
               	jae	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	16(%r15,%r13,8), %rdx
               	movq	%rdx, 96(%rsp)
               	cmpl	%r12d, %eax
               	ja	0x41be20 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	movq	288(%rbp), %rax
               	jmp	0x41bef9 <kfun:kotlin.collections.HashMap.rehash#internal+0x1c9>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%r12d, %esi
               	callq	0x417f20 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	testq	%r15, %r15
               	je	0x41bee9 <kfun:kotlin.collections.HashMap.rehash#internal+0x1b9>
               	movl	68(%rbx), %edx
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x417f20 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	movl	%r12d, 68(%rbx)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rdx
               	movq	%rdx, 288(%rbp)
               	movabsq	$17179869184, %r13      # imm = 0x400000000
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ecx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	cmpl	%r14d, %ecx
               	jne	0x41bfdf <kfun:kotlin.collections.HashMap.rehash#internal+0x2af>
               	movq	32(%rbx), %r15
               	movq	%r15, 160(%rsp)
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rdx, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r14d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	8(%r15), %edx
               	xorl	%r12d, %r12d
               	xorl	%edi, %edi
               	movl	%r14d, %esi
               	callq	0x417bf0 <checkRangeIndexes>
               	movq	(%r15), %rax
               	testl	%r14d, %r14d
               	jle	0x41c131 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	16(%r15), %r9
               	leal	-1(%r14), %r8d
               	cmpl	$7, %r8d
               	jb	0x41c119 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e9>
               	addq	$1, %r8
               	movq	%r8, %r12
               	andq	$-8, %r12
               	leaq	-8(%r12), %rax
               	movq	%rax, %rsi
               	shrq	$3, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$56, %rax
               	jae	0x41c052 <kfun:kotlin.collections.HashMap.rehash#internal+0x322>
               	xorl	%eax, %eax
               	jmp	0x41c0de <kfun:kotlin.collections.HashMap.rehash#internal+0x3ae>
               	testl	%r14d, %r14d
               	js	0x41c352 <kfun:kotlin.collections.HashMap.rehash#internal+0x622>
               	movq	296(%rbp), %rdi
               	movl	%r14d, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	241247(%rip), %rdx      # 0x456e80 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r14d, 24(%rax)
               	movq	%rcx, 152(%rsp)
               	movq	%rcx, 32(%rbx)
               	bsrl	%r14d, %eax
               	xorl	$31, %eax
               	addl	$1, %eax
               	testl	%r14d, %r14d
               	movl	$33, %ecx
               	cmovnel	%eax, %ecx
               	movl	%ecx, 72(%rbx)
               	jmp	0x41c131 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	240(%r15), %rdi
               	andq	$-8, %rsi
               	negq	%rsi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, -208(%rdi,%rcx,4)
               	movups	%xmm0, -224(%rdi,%rcx,4)
               	movups	%xmm0, -192(%rdi,%rcx,4)
               	movups	%xmm0, -176(%rdi,%rcx,4)
               	movups	%xmm0, -160(%rdi,%rcx,4)
               	movups	%xmm0, -144(%rdi,%rcx,4)
               	movups	%xmm0, -128(%rdi,%rcx,4)
               	movups	%xmm0, -112(%rdi,%rcx,4)
               	movups	%xmm0, -96(%rdi,%rcx,4)
               	movups	%xmm0, -80(%rdi,%rcx,4)
               	movups	%xmm0, -64(%rdi,%rcx,4)
               	movups	%xmm0, -48(%rdi,%rcx,4)
               	movups	%xmm0, -32(%rdi,%rcx,4)
               	movups	%xmm0, -16(%rdi,%rcx,4)
               	leaq	64(%rcx), %rax
               	movups	%xmm0, 16(%rdi,%rcx,4)
               	movups	%xmm0, (%rdi,%rcx,4)
               	movq	%rax, %rcx
               	addq	$8, %rsi
               	jne	0x41c070 <kfun:kotlin.collections.HashMap.rehash#internal+0x340>
               	testq	%rdx, %rdx
               	je	0x41c110 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e0>
               	leaq	(%r15,%rax,4), %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x41c100 <kfun:kotlin.collections.HashMap.rehash#internal+0x3d0>
               	cmpq	%r12, %r8
               	je	0x41c131 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	(%r9,%r12,4), %r9
               	subl	%r12d, %r14d
               	xorl	%eax, %eax
               	nop
               	movl	$0, (%r9,%rax,4)
               	addq	$1, %rax
               	cmpl	%eax, %r14d
               	jne	0x41c120 <kfun:kotlin.collections.HashMap.rehash#internal+0x3f0>
               	xorl	%r14d, %r14d
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jge	0x41c2da <kfun:kotlin.collections.HashMap.rehash#internal+0x5aa>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movb	285754(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c15f <kfun:kotlin.collections.HashMap.rehash#internal+0x42f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 48(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	16(%rax,%r14,8), %rdi
               	movq	%rdi, 64(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c1e0 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %r15d # imm = 0x9E3779B9
               	movb	72(%rbx), %cl
               	shrl	%cl, %r15d
               	jmp	0x41c1e3 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b3>
               	xorl	%r15d, %r15d
               	leaq	1(%r14), %rax
               	movq	%rax, 120(%rsp)
               	movl	64(%rbx), %r12d
               	jmp	0x41c204 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addl	$-1, %r15d
               	addl	$-1, %r12d
               	movzbl	285569(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c218 <kfun:kotlin.collections.HashMap.rehash#internal+0x4e8>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	cmpl	%r15d, 8(%rax)
               	jbe	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movslq	%r15d, %rcx
               	cmpl	$0, 16(%rax,%rcx,4)
               	je	0x41c290 <kfun:kotlin.collections.HashMap.rehash#internal+0x560>
               	testl	%r12d, %r12d
               	js	0x41c2fb <kfun:kotlin.collections.HashMap.rehash#internal+0x5cb>
               	testl	%r15d, %r15d
               	jne	0x41c200 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r15d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c200 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	movq	%rax, 80(%rsp)
               	movq	(%rax), %rdx
               	movq	120(%rsp), %rdx
               	movl	%edx, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41beb7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	(%rax), %rcx
               	movl	%r15d, 16(%rax,%r14,4)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rdx, %r14
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jl	0x41c150 <kfun:kotlin.collections.HashMap.rehash#internal+0x420>
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241889(%rip), %rcx      # 0x457410 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 168(%rsp)
               	leaq	265150(%rip), %rsi      # 0x45cf00 <__unnamed_45>
               	movq	%rbx, %rdi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.findKey#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 48(%rsp)
               	movb	285130(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c3cf <kfun:kotlin.collections.HashMap.findKey#internal+0x6f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41c3f3 <kfun:kotlin.collections.HashMap.findKey#internal+0x93>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %ebx # imm = 0x9E3779B9
               	movb	72(%r12), %cl
               	shrl	%cl, %ebx
               	jmp	0x41c3f5 <kfun:kotlin.collections.HashMap.findKey#internal+0x95>
               	xorl	%ebx, %ebx
               	movl	64(%r12), %r13d
               	jmp	0x41c403 <kfun:kotlin.collections.HashMap.findKey#internal+0xa3>
               	nop
               	addl	$-1, %ebx
               	addl	$-1, %r13d
               	movzbl	285058(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c417 <kfun:kotlin.collections.HashMap.findKey#internal+0xb7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%r12), %rax
               	movq	%rax, 56(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41c508 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebx, %rcx
               	movl	16(%rax,%rcx,4), %ebp
               	testl	%ebp, %ebp
               	je	0x41c4e6 <kfun:kotlin.collections.HashMap.findKey#internal+0x186>
               	jle	0x41c485 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	addl	$-1, %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41c508 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebp, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c480 <kfun:kotlin.collections.HashMap.findKey#internal+0x120>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41c485 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	jmp	0x41c4eb <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testq	%r14, %r14
               	je	0x41c4eb <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	testl	%r13d, %r13d
               	js	0x41c4eb <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testl	%ebx, %ebx
               	jne	0x41c400 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ebx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	jmp	0x41c400 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%ebp, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 192(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 144(%rsp)
               	movb	284657(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c5a8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x98>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bc70 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	xorps	%xmm0, %xmm0
               	movq	%rbp, 40(%rsp)
               	movb	284626(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c5ca <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xba>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	xorl	%r15d, %r15d
               	movl	$0, %r13d
               	testq	%r14, %r14
               	je	0x41c5f8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xe8>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	imull	$2654435769, %eax, %r13d # imm = 0x9E3779B9
               	movb	72(%rbx), %cl
               	shrl	%cl, %r13d
               	movq	%r14, %r12
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rdx
               	movq	288(%rdx), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rdx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	movq	8(%rsp), %rcx
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	movq	%rcx, 288(%rdx)
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	jmp	0x41c678 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x168>
               	nopl	(%rax,%rax)
               	addl	$1, %r15d
               	addl	$-1, %r13d
               	movzbl	284433(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c68b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x17b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movq	32(%rbx), %rcx
               	movq	%rcx, 152(%rsp)
               	cmpl	%r13d, 8(%rcx)
               	jbe	0x41cb72 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movslq	%r13d, %rax
               	movl	16(%rcx,%rax,4), %ebp
               	testl	%ebp, %ebp
               	jle	0x41c770 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x260>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%rbp), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41cb72 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c700 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rsi
               	callq	*112(%rax)
               	xorps	%xmm0, %xmm0
               	testb	%al, %al
               	je	0x41c709 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f9>
               	jmp	0x41cada <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5ca>
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x41cada <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5ca>
               	cmpl	%r15d, %r14d
               	je	0x41c990 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x480>
               	testl	%r13d, %r13d
               	jne	0x41c670 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rcx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r13d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rcx)
               	jmp	0x41c670 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	nopl	(%rax)
               	movl	68(%rbx), %r8d
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	%rsp, %rdi
               	movq	%rdi, 288(%rbp)
               	movabsq	$17179869184, %rsi      # imm = 0x400000000
               	movq	%rsi, 16(%rsp)
               	movq	8(%rbx), %rdx
               	movq	%rdx, 24(%rsp)
               	movq	8(%rsp), %rcx
               	cmpl	8(%rdx), %r8d
               	movq	%rcx, 288(%rbp)
               	jl	0x41cb04 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5f4>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdi, 288(%rbp)
               	movq	%rsi, 16(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ecx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	68(%rbx), %eax
               	movl	%ecx, %edx
               	subl	%eax, %edx
               	testl	%edx, %edx
               	movq	%r12, %r14
               	movq	%rdi, %r12
               	movq	%rsi, %r13
               	jg	0x41c86a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35a>
               	movl	76(%rbx), %edx
               	subl	%edx, %ecx
               	testl	%ecx, %ecx
               	jle	0x41c86a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35a>
               	subl	%edx, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %edx
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	leal	3(%rdx), %esi
               	testl	%edx, %edx
               	cmovnsl	%edx, %esi
               	sarl	$2, %esi
               	cmpl	%esi, %eax
               	jge	0x41c9f0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>
               	movl	68(%rbx), %eax
               	incl	%eax
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	movabsq	$42949672960, %rcx      # imm = 0xA00000000
               	movq	%rcx, 64(%rsp)
               	js	0x41cb77 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x667>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %edx
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%eax, %edx
               	jge	0x41cac9 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5b9>
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	(%rcx,%rcx,2), %ecx
               	movl	%ecx, %r15d
               	shrl	$31, %r15d
               	addl	%ecx, %r15d
               	sarl	%r15d
               	cmpl	%eax, %r15d
               	cmovll	%eax, %r15d
               	movq	8(%rbx), %rdi
               	movq	%rdi, 80(%rsp)
               	movl	%r15d, %esi
               	leaq	88(%rsp), %rdx
               	callq	0x415260 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 88(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 96(%rsp)
               	testq	%rdi, %rdi
               	je	0x41ca32 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x522>
               	movl	%r15d, %esi
               	leaq	104(%rsp), %rdx
               	callq	0x415260 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 104(%rsp)
               	jmp	0x41ca34 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x524>
               	nopw	(%rax,%rax)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x41bd30 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	%r12, %r14
               	jmp	0x41c5b8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rdi
               	callq	0x41bd30 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	jmp	0x41c5b8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	xorl	%eax, %eax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rdi
               	movq	%rdi, 112(%rsp)
               	movl	%r15d, %esi
               	leaq	120(%rsp), %rdx
               	callq	0x415590 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 24(%rbx)
               	testl	%r15d, %r15d
               	jle	0x41ca6b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x55b>
               	leal	(%r15,%r15,2), %eax
               	testl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	jne	0x41ca73 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x563>
               	xorl	%esi, %esi
               	jmp	0x41ca83 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x573>
               	movl	$3, %eax
               	xorps	%xmm0, %xmm0
               	bsrl	%eax, %ecx
               	xorl	$31, %ecx
               	xorb	$31, %cl
               	movl	$1, %esi
               	shll	%cl, %esi
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rsp), %rcx
               	cmpl	8(%rax), %esi
               	movq	%rcx, 288(%rbp)
               	jle	0x41cac9 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5b9>
               	movq	%rbx, %rdi
               	callq	0x41bd30 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c5b8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	negl	%ebp
               	movq	136(%rsp), %rax
               	movq	40(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	movl	%ebp, %eax
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	68(%rbx), %ebp
               	leal	1(%rbp), %ecx
               	movl	%ecx, 68(%rbx)
               	movq	8(%rbx), %rsi
               	movq	%rsi, 160(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41cb72 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movslq	%ebp, %rdx
               	movq	(%rsi), %rdi
               	movq	%r12, 16(%rsi,%rdx,8)
               	movq	24(%rbx), %rsi
               	movq	%rsi, 168(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41cb72 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movq	(%rsi), %rdi
               	movl	%r13d, 16(%rsi,%rdx,4)
               	movq	32(%rbx), %rdx
               	movq	%rdx, 176(%rsp)
               	cmpl	%r13d, 8(%rdx)
               	jbe	0x41cb72 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movq	(%rdx), %rsi
               	movl	%ecx, 16(%rdx,%rax,4)
               	addl	$1, 76(%rbx)
               	cmpl	64(%rbx), %r15d
               	jle	0x41cadc <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5cc>
               	movl	%r15d, 64(%rbx)
               	jmp	0x41cadc <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5cc>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	240689(%rip), %rcx      # 0x4577d0 <ktypeglobal:kotlin.OutOfMemoryError#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	283072(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cbd9 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bc70 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41cbfe <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x3e>
               	movl	%eax, %ebp
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	callq	0x41cc10 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	jmp	0x41cc03 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x43>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movl	%ebp, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.removeKeyAt#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movb	282899(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cc86 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x76>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%ebp, %esi
               	callq	0x417ec0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	movq	24(%rbx), %rax
               	movq	%rax, 112(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movl	%ebp, 12(%rsp)
               	movslq	%ebp, %rcx
               	movq	%rcx, 64(%rsp)
               	movl	16(%rax,%rcx,4), %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	56(%rsp), %rsi
               	movq	288(%rsi), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 144(%rsp)
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	jmp	0x41cdae <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x19e>
               	movq	(%rax), %rcx
               	movq	72(%rsp), %rcx
               	movl	%edx, 16(%rax,%rcx,4)
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	addl	$-1, %r14d
               	js	0x41cfd7 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3c7>
               	movzbl	282587(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x41cde0 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1d0>
               	testl	%r12d, %r12d
               	je	0x41cdef <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1df>
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jle	0x41ce4e <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x23e>
               	jmp	0x41cf9d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%rsp), %rsi
               	testl	%r12d, %r12d
               	jne	0x41cdbe <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1ae>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movl	8(%rax), %r12d
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jg	0x41cf9d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	addl	$-1, %r12d
               	movq	%rax, 160(%rsp)
               	movl	8(%rax), %ecx
               	cmpl	%r12d, %ecx
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movslq	%r12d, %rdx
               	movl	16(%rax,%rdx,4), %r13d
               	testl	%r13d, %r13d
               	je	0x41cfb3 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3a3>
               	js	0x41ced0 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2c0>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%r13), %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movslq	%ebp, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41cf00 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	56(%rsp), %rsi
               	imull	$2654435769, %eax, %eax # imm = 0x9E3779B9
               	movzbl	72(%rbx), %ecx
               	shrl	%cl, %eax
               	jmp	0x41cf02 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f2>
               	nop
               	movq	%rax, 176(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	jmp	0x41cd9c <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x18c>
               	nopw	(%rax,%rax)
               	xorl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	subl	%r12d, %eax
               	addl	$-1, %ecx
               	andl	%eax, %ecx
               	cmpl	%r15d, %ecx
               	jl	0x41cda4 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x194>
               	movq	32(%rbx), %rax
               	movq	%rax, 200(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	%r13d, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 208(%rsp)
               	cmpl	%ebp, 8(%rax)
               	ja	0x41cd90 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x180>
               	jmp	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	%rax, 152(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	ja	0x41cfc7 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3b7>
               	jmp	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	%rax, 168(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$0, 16(%rax,%rcx,4)
               	jmp	0x41cffa <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3ea>
               	movq	32(%rbx), %rax
               	movq	%rax, 216(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	12(%rsp), %ecx
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movq	24(%rbx), %rax
               	movq	%rax, 120(%rsp)
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d04d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movq	64(%rsp), %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	addl	$-1, 76(%rbx)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	281792(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d0d9 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x79>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d176 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x116>
               	movq	16(%r14), %rcx
               	movq	%rcx, 32(%rsp)
               	testq	%rcx, %rcx
               	je	0x41d19a <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13a>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d19f <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13f>
               	leaq	48(%rsp), %rsi
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*8(%rax)
               	testq	%rbx, %rbx
               	je	0x41d17a <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x11a>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41d180 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	xorl	%eax, %eax
               	jmp	0x41d180 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	testq	%rax, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	281465(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d220 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0x70>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d254 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa4>
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d271 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xc1>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	jne	0x41d256 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa6>
               	callq	0x419ad0 <ThrowNullPointerException>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r12
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	281256(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d2f1 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x71>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r14
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41d3c2 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x142>
               	movzbl	281152(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d359 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xd9>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41d3be <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	60(%rcx), %edx
               	movq	64(%rcx), %rcx
               	andl	$168, %edx
               	shlq	$4, %rdx
               	cmpl	$168, (%rcx,%rdx)
               	jne	0x41d3df <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x15f>
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41d060 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x41d320 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xa0>
               	xorl	%eax, %eax
               	jmp	0x41d3c4 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x144>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	245226(%rip), %rsi      # 0x4591d0 <kclass:kotlin.collections.Map.Entry>
               	movq	%rax, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	jmp	0x41d3f0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x170>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	$4294967165, %ecx       # imm = 0xFFFFFF7D
               	addl	92(%rax), %ecx
               	cmpl	$2, %ecx
               	jb	0x41d3be <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nop

<kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	280911(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d44a <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>+0x1a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	243227(%rip), %rcx      # 0x458aa0 <ktypeglobal:kotlin.collections.HashMap.KeysItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d530 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	280783(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d4ca <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>+0x1a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	243243(%rip), %rcx      # 0x458b30 <ktypeglobal:kotlin.collections.HashMap.EntriesItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d530 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#initNext(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	280588(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d58d <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x5d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	jmp	0x41d5a9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x79>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	16(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 16(%rbx)
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d5db <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xab>
               	movq	24(%rcx), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d5ef <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xbf>
               	cltq
               	cmpl	$0, 16(%rcx,%rax,4)
               	jns	0x41d5db <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xab>
               	movzbl	280512(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d5a0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x70>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d5a0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x70>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	280454(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d613 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	setl	%al
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#remove(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	280406(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d643 <kfun:kotlin.collections.HashMap.Itr#remove(){}+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	callq	0x41bc70 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	8(%rbx), %rdi
               	movl	20(%rbx), %esi
               	callq	0x41cc10 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movl	$4294967295, 20(%rbx)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	280254(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6db <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %eax
               	movq	8(%r15), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d734 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc4>
               	leal	1(%rax), %edx
               	movl	%edx, 16(%r15)
               	movl	%eax, 20(%r15)
               	movq	8(%rcx), %rcx
               	movq	%rcx, 32(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d778 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x108>
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	%r15, %rdi
               	callq	0x41d530 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	236083(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	279975(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d7f2 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %r13d
               	movq	8(%r15), %rbp
               	cmpl	68(%rbp), %r13d
               	jge	0x41d870 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf0>
               	leal	1(%r13), %eax
               	movl	%eax, 16(%r15)
               	movl	%r13d, 20(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	242571(%rip), %rcx      # 0x458bc0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%rbp, 24(%rax)
               	movl	%r13d, 32(%rax)
               	movq	%r15, %rdi
               	callq	0x41d530 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	235767(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	279671(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d922 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x62>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movslq	16(%r15), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d956 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x96>
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	279511(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d9c2 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x62>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	je	0x41d9fb <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9b>
               	movslq	16(%r15), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41da00 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa0>
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	279317(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41da84 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x74>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41db6b <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41db6b <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	32(%rsp), %r12
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%rax, %r15
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	0x41d8c0 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%r15, %r15
               	je	0x41db66 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x156>
               	movq	(%r15), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41db6b <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41d960 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rbx, %rbx
               	je	0x41db87 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x177>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41db6d <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	testq	%rax, %rax
               	je	0x41db0e <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0xfe>
               	xorl	%eax, %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%rax, %rax
               	sete	%al
               	jmp	0x41db6d <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	24(%rsp), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	278935(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dc02 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0x72>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r15
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x41d8c0 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	xorl	%ebx, %ebx
               	movl	$0, %ebp
               	testq	%rax, %rax
               	je	0x41dc30 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xa0>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebp
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41d960 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41dc52 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xc2>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebx
               	xorl	%ebx, %ebp
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movl	%ebp, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	64(%rsp), %rbp
               	movups	%xmm0, 16(%rsp)
               	leaq	243638(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 48(%rsp)
               	movb	278669(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dd0c <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x9c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r13
               	leaq	88(%rsp), %r12
               	leaq	8(%rsp), %rdi
               	movq	%rdi, 56(%rsp)
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d8c0 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%rax, %rax
               	je	0x41dd57 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe7>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41dd59 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe9>
               	xorl	%esi, %esi
               	leaq	8(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	257744(%rip), %rsi      # 0x45cc40 <__unnamed_30>
               	movq	%rbp, %rdi
               	movq	%r12, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rsi
               	callq	0x41d960 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41ddaa <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13a>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41ddac <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13c>
               	xorl	%esi, %esi
               	leaq	112(%rsp), %rdx
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	278422(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de03 <kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	278390(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de23 <kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	278352(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de49 <kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	278284(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de8d <kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?+0x1d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d1b0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	278161(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df08 <kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean+0x58>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234880(%rip), %rcx      # 0x4574b0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	278064(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df69 <kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cbc0 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	278000(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dfa9 <kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d430 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	277939(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dfe6 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x26>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbp), %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e139 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movl	%eax, %r13d
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e166 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1a6>
               	cmpl	%r13d, 8(%rax)
               	jbe	0x41e16b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r13d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e134 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x174>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e139 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	240285(%rip), %rdx      # 0x458bc0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%r15)
               	movq	%r12, 24(%rax)
               	movl	%r13d, 32(%rax)
               	jmp	0x41e13b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x17b>
               	testq	%rax, %rax
               	je	0x41e0f4 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x134>
               	xorl	%ecx, %ecx
               	movq	%rcx, (%r15)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movq	%rcx, (%r15)
               	movq	%rcx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	277520(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e189 <kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d4b0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	277478(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e1b3 <kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	277446(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e1d3 <kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	277408(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e1f9 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e235 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e235 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d060 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	277308(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e25d <kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?+0x1d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	*248(%rax)
               	movq	%rax, (%r15)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	277185(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2d8 <kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean+0x58>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	233904(%rip), %rcx      # 0x4574b0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	277080(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e341 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x21>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e496 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e496 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	8(%rbp), %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, %rdi
               	callq	0x41bc70 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e49f <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movl	%eax, %r12d
               	movq	16(%r15), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e4c6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1a6>
               	cmpl	%r12d, 8(%rax)
               	jbe	0x41e4cb <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r12d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e49a <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17a>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e49f <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x41cc10 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movb	$1, %cl
               	jmp	0x41e4a1 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x181>
               	xorl	%ecx, %ecx
               	jmp	0x41e4b7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x197>
               	testq	%rax, %rax
               	je	0x41e487 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x167>
               	xorl	%ecx, %ecx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ad0 <ThrowNullPointerException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	276656(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e4e9 <kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d280 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	276614(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e513 <kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	276582(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e533 <kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	276544(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e559 <kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c360 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	276476(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e59d <kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?+0x1d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d1b0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	276416(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e5d9 <kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c510 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	276352(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e619 <kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cbc0 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	276288(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e659 <kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d430 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	276169(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e6d0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0x60>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41e731 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0xc1>
               	movq	296(%rbx), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	231140(%rip), %rdx      # 0x456df0 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 8(%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	276038(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e753 <kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 16(%rsp)
               	movb	275927(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e7c2 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x62>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r15, 48(%rsp)
               	testl	%ebp, %ebp
               	js	0x41e82f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	cmpl	%ebp, 16(%r14)
               	jle	0x41e82f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	8(%r14), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41e872 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x112>
               	movslq	%ebp, %rcx
               	movzwl	16(%rax,%rcx,2), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	232057(%rip), %rcx      # 0x4572d0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, 8(%rsp)
               	movl	%esi, %r15d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	275624(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e8f1 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0x71>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 40(%rsp)
               	movslq	16(%rbx), %r14
               	leal	1(%r14), %r13d
               	movq	%rbx, %rdi
               	movl	%r13d, %esi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r13d, 16(%rbx)
               	cmpl	%r14d, 8(%rbp)
               	jbe	0x41e956 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd6>
               	movq	(%rbp), %rax
               	movw	%r15w, 16(%rbp,%r14,2)
               	movq	8(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	movb	275481(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e980 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder+0x20>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	leaq	253238(%rip), %rbx      # 0x45c6c0 <__unnamed_8>
               	cmovneq	%r12, %rbx
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41e9e0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r15, (%r14)
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%r8, 24(%rsp)
               	movl	%ecx, %ebp
               	movl	%edx, %r13d
               	movq	%rsi, %rbx
               	movq	%rdi, 8(%rsp)
               	movb	275338(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ea0f <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	leaq	253095(%rip), %r12      # 0x45c6c0 <__unnamed_8>
               	cmovneq	%rbx, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 16(%rsp)
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%r13d, %edi
               	movl	%ebp, %esi
               	movl	%eax, %edx
               	callq	0x41a530 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
               	movl	%ebp, %ebx
               	subl	%r13d, %ebx
               	movq	8(%rsp), %r14
               	movl	16(%r14), %esi
               	addl	%ebx, %esi
               	movq	%r14, %rdi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x41eb3d <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x15d>
               	movslq	16(%r14), %rbp
               	movq	8(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	(%rax,%rbp,2), %rdi
               	addq	$16, %rdi
               	movslq	%r13d, %rax
               	leaq	(%r12,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebx, %rdx
               	addq	%rdx, %rdx
               	callq	0x413720 <memcpy@plt>
               	addl	%ebp, %ebx
               	movq	%r14, %rdi
               	movl	%ebx, %esi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebx, 16(%r14)
               	movq	%r14, %rbx
               	movq	24(%rsp), %rdx
               	movq	%rbx, (%rdx)
               	movq	16(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%rbx, (%rdx)
               	movq	%rbx, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpl	%r13d, %ebp
               	cmovll	%r13d, %ebp
               	movq	%r12, %r14
               	movl	%ebp, 4(%rsp)
               	movq	8(%rsp), %rbx
               	cmpl	%r13d, %ebp
               	je	0x41eb08 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x128>
               	nopl	(%rax)
               	movzbl	274985(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eb70 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 64(%rsp)
               	movslq	16(%rbx), %r12
               	leal	1(%r12), %r15d
               	movq	%rbx, %rdi
               	movl	%r15d, %esi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%rbx)
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movl	%r13d, %esi
               	callq	*8(%rax)
               	cmpl	%r12d, 8(%rbp)
               	jbe	0x41ebd9 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x1f9>
               	addl	$1, %r13d
               	movq	(%rbp), %rcx
               	movw	%ax, 16(%rbp,%r12,2)
               	movl	4(%rsp), %ebp
               	cmpl	%r13d, %ebp
               	jne	0x41eb60 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
               	jmp	0x41eb08 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x128>
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdx, 24(%rsp)
               	movl	%esi, %r12d
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 48(%rsp)
               	movb	274762(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ec4f <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %esi
               	addl	$11, %esi
               	movq	%r15, %rdi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movslq	16(%r15), %r13
               	movq	8(%r15), %r14
               	movq	%r14, 56(%rsp)
               	leaq	12(%rsp), %rbx
               	leaq	155297(%rip), %rdx      # 0x444b18 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movl	$12, %esi
               	movq	%rbx, %rdi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x436ea0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movb	12(%rsp), %al
               	testb	%al, %al
               	je	0x41ecb6 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
               	leaq	12(%rsp), %rbx
               	leaq	(%r14,%r13,2), %rcx
               	addq	$16, %rcx
               	nop
               	movsbl	%al, %eax
               	movw	%ax, (%rcx)
               	addq	$2, %rcx
               	movzbl	1(%rbx), %eax
               	addq	$1, %rbx
               	testb	%al, %al
               	jne	0x41eca0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xc0>
               	leaq	12(%rsp), %rax
               	subl	%eax, %ebx
               	addl	%r13d, %ebx
               	movq	%r15, %rdi
               	movl	%ebx, %esi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebx, 16(%r15)
               	movq	24(%rsp), %rax
               	movq	%r15, (%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r15, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	274479(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ed6a <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder+0x6a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	252236(%rip), %rbx      # 0x45c6c0 <__unnamed_8>
               	cmovneq	%r15, %rbx
               	movl	16(%r12), %esi
               	addl	8(%rbx), %esi
               	movq	%r12, %rdi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movslq	16(%r12), %r15
               	movq	8(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movslq	8(%rbx), %rbp
               	leaq	(%rax,%r15,2), %rdi
               	addq	$16, %rdi
               	addq	$16, %rbx
               	movq	%rbp, %rdx
               	addq	%rbp, %rdx
               	movq	%rbx, %rsi
               	callq	0x413720 <memcpy@plt>
               	leal	(%r15,%rbp), %ebx
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	callq	0x41edf0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebx, 16(%r12)
               	movq	%r12, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	274234(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ee5f <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0x6f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%r14d, 8(%rax)
               	jge	0x41eea3 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0xb3>
               	leaq	48(%rsp), %rdx
               	movq	8(%rbx), %rax
               	movq	%rax, 32(%rsp)
               	movl	8(%rax), %eax
               	leal	(%rax,%rax), %esi
               	addl	$2, %esi
               	cmpl	%r14d, %esi
               	cmovll	%r14d, %esi
               	movq	8(%rbx), %rdi
               	movq	%rdi, 40(%rsp)
               	callq	0x415780 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	274034(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ef27 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x67>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %r15
               	movq	%r15, 24(%rsp)
               	movl	16(%rbx), %ebp
               	testq	%rbp, %rbp
               	je	0x41efa1 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0xe1>
               	testl	%ebp, %ebp
               	js	0x41f008 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x148>
               	movslq	%ebp, %r12
               	movq	296(%r13), %rdi
               	leaq	31(,%rbp), %rsi
               	addq	%rbp, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	231780(%rip), %rcx      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, (%r14)
               	leaq	32(%rax), %rdi
               	addq	$16, %r15
               	addq	%r12, %r12
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x413720 <memcpy@plt>
               	movq	%rbx, (%r14)
               	jmp	0x41efe7 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x127>
               	movq	$0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 48(%rsp)
               	leaq	251248(%rip), %rbx      # 0x45c548 <__unnamed_6>
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	273690(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f07f <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x6f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41f0d1 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	cmpl	$18, (%rax,%rcx)
               	jne	0x41f0d1 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*24(%rax)
               	movl	%eax, %ecx
               	movb	$1, %al
               	testb	%cl, %cl
               	jne	0x41f195 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f154 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movq	(%r12), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	*144(%rcx)
               	testb	%al, %al
               	je	0x41f18f <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x17f>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f193 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x183>
               	movzbl	273420(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f110 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f110 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	xorl	%eax, %eax
               	jmp	0x41f195 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	273366(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f1c3 <kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testl	%eax, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	leaq	238436(%rip), %rax      # 0x459570 <ktypeglobal:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	273212(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f25d <kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String+0x7d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rsp, %rsi
               	movq	%rsi, 40(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	callq	0x41a7c0 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>
               	movq	%rax, (%r14)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movb	273132(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f2ad <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%rbx, 8(%r15)
               	je	0x41f2d0 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x40>
               	testq	%rbx, %rbx
               	je	0x41f2d9 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x49>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rax)
               	jmp	0x41f2e0 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	253193(%rip), %rax      # 0x45cfe0 <__unnamed_41>
               	jmp	0x41f2e0 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	250848(%rip), %rax      # 0x45c6c0 <__unnamed_8>
               	movq	%rax, (%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	273040(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f309 <kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	238380(%rip), %rdx      # 0x459670 <ktypeglobal:kotlin.collections.AbstractList.IteratorImpl#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%rbx)
               	movq	%r14, 24(%rax)
               	movq	%rcx, (%rbx)
               	movq	%rcx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r13
               	movb	272918(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f383 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r13, %rbx
               	je	0x41f598 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x238>
               	testq	%rbx, %rbx
               	je	0x41f594 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$43, %ecx
               	shlq	$4, %rcx
               	cmpl	$43, (%rax,%rcx)
               	jne	0x41f594 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41f59c <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23c>
               	movq	%r14, 8(%rsp)
               	leaq	64(%rsp), %r15
               	leaq	56(%rsp), %r12
               	leaq	48(%rsp), %rbp
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	%rax, %r14
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f4d9 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	nopl	(%rax)
               	testq	%rax, %rax
               	jne	0x41f590 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x230>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f5a0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x240>
               	movzbl	272515(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f516 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x1b6>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbp
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41f4d0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x170>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	jne	0x41f4d9 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	xorl	%ecx, %ecx
               	jmp	0x41f5a2 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x242>
               	xorl	%ecx, %ecx
               	jmp	0x41f5bd <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	movb	$1, %cl
               	jmp	0x41f5bd <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	xorl	%ecx, %ecx
               	jmp	0x41f5a7 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x247>
               	movb	$1, %cl
               	movq	8(%rsp), %r14
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	movb	272299(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f5ee <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x1e>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	movl	$1, %r12d
               	jmp	0x41f6cc <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xfc>
               	nopl	(%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movl	%r12d, %ebp
               	shll	$5, %ebp
               	subl	%r12d, %ebp
               	testq	%rax, %rax
               	je	0x41f710 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x140>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movl	%ebp, %r12d
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f714 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x144>
               	movzbl	272020(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f680 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f680 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41f6c7 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xf7>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%r12d, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	271940(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f755 <kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal+0x15>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %ebp
               	movq	8(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*136(%rax)
               	cmpl	%eax, %ebp
               	setl	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	271799(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f7e2 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0x62>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testb	%al, %al
               	je	0x41f832 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0xb2>
               	movq	8(%rbx), %rdi
               	movl	16(%rbx), %esi
               	leal	1(%rsi), %eax
               	movl	%eax, 16(%rbx)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdx
               	callq	*192(%rax)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	227638(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	236471(%rip), %rax      # 0x459470 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	271504(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f909 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0x89>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41f92c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	cmpl	%ebx, %ebp
               	jge	0x41f92c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r15
               	leaq	80(%rsp), %r12
               	movq	%r12, 24(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e670 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	251276(%rip), %rsi      # 0x45cee0 <__unnamed_46>
               	movq	%r12, %rdi
               	movq	%r15, %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	249965(%rip), %rsi      # 0x45c9e0 <__unnamed_18>
               	movq	%r12, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ed00 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ebe0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	64(%rsp), %rsi
               	callq	0x41eec0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	227593(%rip), %rcx      # 0x4572d0 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a250 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	271257(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fa00 <kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean+0x10>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	271153(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fa68 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing+0x58>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	227072(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d70 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any>:
               	pushq	%rax
               	movb	271065(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fac0 <kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any+0x10>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x41fa10 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	271030(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fae3 <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fb2a <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5a>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41fb2a <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5a>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*24(%rax)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	270937(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb40 <kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int+0x10>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	270902(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb63 <kfun:kotlin.collections.EmptySet#toString(){}kotlin.String+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	251062(%rip), %rax      # 0x45d020 <__unnamed_47>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int>:
               	pushq	%rax
               	movb	270873(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb80 <kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int+0x10>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	270841(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fba0 <kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean+0x10>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	270806(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fbc3 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fbd2 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x22>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	270758(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fbf3 <kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*24(%rax)
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	270694(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc33 <kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	259798(%rip), %rax      # 0x45f310 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?>:
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movb	270662(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc53 <kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	$0, (%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rsi, %rbx
               	movb	270624(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc79 <kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rdi, %rbx
               	movb	270576(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fca9 <kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	270537(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcd0 <kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int+0x10>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	270502(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcf3 <kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String+0x13>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	247030(%rip), %rax      # 0x45c1f0 <__unnamed_48>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 16(%rsp)
               	movb	270381(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd6c <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x6c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r15), %rax
               	movq	%rax, 24(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x41fd9f <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x9f>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	%rax, 16(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.<get-size>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	270197(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe24 <kfun:kotlin.enums.EnumEntriesList.<get-size>#internal+0x64>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	callq	0x41fd00 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.get#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	270044(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41febd <kfun:kotlin.enums.EnumEntriesList.get#internal+0x6d>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41fd00 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rax, %rbx
               	movl	8(%rax), %esi
               	movl	%r12d, %edi
               	callq	0x41f880 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>
               	cmpl	%r12d, 8(%rbx)
               	jbe	0x41ff00 <kfun:kotlin.enums.EnumEntriesList.get#internal+0xb0>
               	movslq	%r12d, %rax
               	movq	16(%rbx,%rax,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.contains#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	269854(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ff7b <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x6b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x41ff95 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x85>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$-86, %eax
               	cmpl	$14, %eax
               	jbe	0x41ff99 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x89>
               	xorl	%eax, %eax
               	jmp	0x41ffd6 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xc6>
               	leaq	24(%rsp), %rsi
               	movq	%r14, %rdi
               	callq	0x41fd00 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movslq	16(%r15), %rcx
               	testq	%rcx, %rcx
               	js	0x41ffb9 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa9>
               	movl	8(%rax), %edx
               	leal	-1(%rdx), %esi
               	cmpl	%ecx, %esi
               	jge	0x41ffbd <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xad>
               	xorl	%eax, %eax
               	jmp	0x41ffcb <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xbb>
               	cmpl	%ecx, %edx
               	jbe	0x41ffec <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xdc>
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rax, 32(%rsp)
               	cmpq	%r15, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	269696(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420019 <kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x19>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	269646(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42004b <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x1b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	leal	-1(%rax), %edx
               	movzwl	%bp, %esi
               	movq	%rbx, %rdi
               	callq	0x4200c0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
               	cmpl	$-1, %eax
               	je	0x4200a6 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x76>
               	movl	8(%rbx), %edx
               	addl	$1, %eax
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	movq	%r14, %rcx
               	callq	0x436d40 <Kotlin_String_subSequence>
               	movq	%rax, %rbx
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x4200b1 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x81>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	227368(%rip), %rsi      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419c70 <ThrowClassCastException>

<kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 128(%rsp)
               	leaq	224498(%rip), %rax      # 0x456df0 <ktypeglobal:kotlin.CharArray#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movl	$1, 16(%rsp)
               	movw	$0, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 96(%rsp)
               	movb	269370(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42015f <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x9f>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	je	0x4201cc <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x4201cc <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	8(%r12), %ecx
               	testl	%ecx, %ecx
               	je	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	leal	-1(%rcx), %edx
               	cmpl	%r15d, %ecx
               	cmoval	%r15d, %edx
               	testl	%edx, %edx
               	js	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%edx, %edx
               	nopl	(%rax)
               	cmpw	%bp, 16(%r12,%rdx,2)
               	je	0x4203bc <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2fc>
               	addq	$-1, %rdx
               	leal	1(%rdx), %ecx
               	testl	%ecx, %ecx
               	jg	0x4201b0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
               	jmp	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	leaq	8(%rsp), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	%rax, 120(%rsp)
               	movq	8(%rsp), %rcx
               	movw	%bp, 24(%rsp)
               	movq	%rax, 128(%rsp)
               	cmpl	$1, 16(%rsp)
               	jne	0x4202cc <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	testq	%r12, %r12
               	je	0x4202cc <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x4202cc <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movl	16(%rsp), %eax
               	cmpl	$1, %eax
               	jne	0x4203c4 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x304>
               	movzwl	24(%rsp), %esi
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	8(%r12), %edx
               	testl	%edx, %edx
               	je	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	leal	-1(%rdx), %ecx
               	cmpl	%r15d, %edx
               	cmoval	%r15d, %ecx
               	testl	%ecx, %ecx
               	js	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%ecx, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpw	%si, 16(%r12,%rcx,2)
               	je	0x4203c0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x300>
               	addq	$-1, %rcx
               	leal	1(%rcx), %edx
               	testl	%edx, %edx
               	jg	0x4202b0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f0>
               	jmp	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	addl	$-1, %ebp
               	cmpl	%r15d, %ebp
               	cmovgl	%r15d, %ebp
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%ebp, %ebp
               	js	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	xorl	%r15d, %r15d
               	movb	268927(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42031a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x25a>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbp), %eax
               	movl	%eax, 28(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	callq	*8(%rax)
               	movl	%eax, %ebx
               	movl	16(%rsp), %r14d
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	xorl	%r15d, %r15d
               	cmpl	%r15d, %r14d
               	je	0x420381 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c1>
               	nopl	(%rax)
               	movzbl	268841(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420370 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b0>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpw	%bx, 24(%rsp,%r15,2)
               	je	0x42039c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2dc>
               	addq	$1, %r15
               	cmpl	%r15d, %r14d
               	jne	0x420360 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a0>
               	testl	%ebp, %ebp
               	movl	28(%rsp), %eax
               	movl	%eax, %ebp
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	$0, %r15d
               	jg	0x42030b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x24b>
               	jmp	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%ebp, %eax
               	movq	88(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%edx, %eax
               	jmp	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%ecx, %eax
               	jmp	0x42039e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	testl	%eax, %eax
               	jne	0x420402 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x342>
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	224672(%rip), %rcx      # 0x457190 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	leaq	248416(%rip), %rsi      # 0x45ce60 <__unnamed_49>
               	jmp	0x42043a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x37a>
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	225094(%rip), %rcx      # 0x457370 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 64(%rsp)
               	leaq	248406(%rip), %rsi      # 0x45ce90 <__unnamed_50>
               	movq	%rbx, %rdi
               	callq	0x415cf0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:BunnymarkBenchmark#testBunnymark(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movq	%rdi, 48(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movups	%xmm0, 16(%rsp)
               	movups	%xmm0, 32(%rsp)
               	leaq	235756(%rip), %rax      # 0x459d70 <ktypeglobal:BunnyContainer#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 64(%rsp)
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 96(%rsp)
               	movb	268478(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4204db <kfun:BunnymarkBenchmark#testBunnymark(){}+0x8b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	48(%rsp), %rax
               	movl	32(%rax), %ebx
               	leaq	8(%rsp), %rax
               	movq	%rax, 104(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	leaq	136(%rsp), %r14
               	movq	288(%rbp), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r15, 128(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	leaq	168(%rsp), %rsi
               	movq	288(%rbp), %rax
               	movq	%rax, 152(%rsp)
               	leaq	144(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r15, 160(%rsp)
               	movl	%ebx, 32(%rsp)
               	movl	%ebx, %edi
               	shll	$5, %edi
               	callq	0x420960 <kfun:FBuffer.Companion#invoke(kotlin.Int){}FBuffer>
               	movq	%rax, 16(%rsp)
               	movq	16(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movq	152(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	shll	$3, %ebx
               	movl	%ebx, %edi
               	movq	%r14, %rsi
               	callq	0x420960 <kfun:FBuffer.Companion#invoke(kotlin.Int){}FBuffer>
               	movq	16(%rax), %rax
               	movq	%rax, 40(%rsp)
               	movq	120(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	32(%rsp), %ebx
               	testl	%ebx, %ebx
               	jg	0x4205ea <kfun:BunnymarkBenchmark#testBunnymark(){}+0x19a>
               	movq	%rbp, 72(%rsp)
               	movq	48(%rsp), %rax
               	movl	28(%rax), %eax
               	movl	%eax, 56(%rsp)
               	testl	%eax, %eax
               	jle	0x42093d <kfun:BunnymarkBenchmark#testBunnymark(){}+0x4ed>
               	xorl	%ebx, %ebx
               	jmp	0x42060e <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1be>
               	nopl	(%rax,%rax)
               	addl	$1, 36(%rsp)
               	addl	$-1, %ebx
               	je	0x4205b8 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x168>
               	movzbl	268191(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4205e0 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x190>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x4205e0 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x190>
               	nop
               	movl	60(%rsp), %ebx
               	cmpl	56(%rsp), %ebx
               	je	0x42093d <kfun:BunnymarkBenchmark#testBunnymark(){}+0x4ed>
               	movb	268156(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42061d <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1cd>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$1, %ebx
               	movl	%ebx, 60(%rsp)
               	movl	36(%rsp), %r14d
               	testl	%r14d, %r14d
               	jle	0x420600 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1b0>
               	xorl	%ebx, %ebx
               	jmp	0x42064e <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1fe>
               	nopl	(%rax)
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	addl	$8, %ebx
               	addl	$-1, %r14d
               	je	0x420600 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1b0>
               	movzbl	268091(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42065e <kfun:BunnymarkBenchmark#testBunnymark(){}+0x20e>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	movss	%xmm0, 4(%rsp)
               	movq	40(%rsp), %rdi
               	leal	7(%rbx), %ebp
               	testl	%ebx, %ebx
               	cmovnsl	%ebx, %ebp
               	sarl	$3, %ebp
               	leal	(%rbp,%rbp), %r15d
               	movl	%r15d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	addss	4(%rsp), %xmm0
               	movq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movq	24(%rsp), %rdi
               	leal	1(%rbx), %r12d
               	movl	%r12d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	movss	%xmm0, 4(%rsp)
               	movq	40(%rsp), %rdi
               	leal	1(%rbp,%rbp), %r13d
               	movl	%r13d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	addss	4(%rsp), %xmm0
               	movq	24(%rsp), %rdi
               	movl	%r12d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movq	40(%rsp), %rdi
               	movl	%r13d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	movq	48(%rsp), %rbp
               	addss	24(%rbp), %xmm0
               	movq	40(%rsp), %rdi
               	movl	%r13d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	ucomiss	8(%rbp), %xmm0
               	jbe	0x420740 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x2f0>
               	movq	40(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	xorps	139991(%rip), %xmm0     # 0x442a00 <_IO_stdin_used+0x40>
               	movq	40(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movss	8(%rbp), %xmm0          # xmm0 = mem[0],zero,zero,zero
               	jmp	0x42077c <kfun:BunnymarkBenchmark#testBunnymark(){}+0x32c>
               	movq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	movss	12(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
               	ucomiss	%xmm0, %xmm1
               	jbe	0x420788 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x338>
               	movq	40(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	xorps	139926(%rip), %xmm0     # 0x442a00 <_IO_stdin_used+0x40>
               	movq	40(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movss	12(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
               	movq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movq	24(%rsp), %rdi
               	movl	%r12d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	ucomiss	16(%rbp), %xmm0
               	jbe	0x420900 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x4b0>
               	movq	40(%rsp), %rdi
               	movl	%r13d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	mulss	139792(%rip), %xmm0     # 0x4429c4 <_IO_stdin_used+0x4>
               	movq	40(%rsp), %rdi
               	movl	%r13d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movss	16(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
               	movq	24(%rsp), %rdi
               	movl	%r12d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movq	64(%rsp), %rax
               	cmpl	$2, -68(%rax)
               	je	0x4207f9 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x3a9>
               	movq	64(%rsp), %rax
               	leaq	-68(%rax), %rdi
               	leaq	1308(%rip), %rsi        # 0x420d10 <kfun:Random.$init_thread_local#internal>
               	callq	0x43a140 <CallInitThreadLocal>
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rbp
               	movsd	8(%rbp), %xmm0          # xmm0 = mem[0],zero
               	movsd	139997(%rip), %xmm1     # xmm1 = mem[0],zero
                                                # 0x442af0 <_IO_stdin_used+0x130>
               	mulsd	%xmm1, %xmm0
               	addsd	%xmm1, %xmm0
               	movsd	139989(%rip), %xmm1     # xmm1 = mem[0],zero
                                                # 0x442af8 <_IO_stdin_used+0x138>
               	callq	0x413760 <fmod@plt>
               	movsd	%xmm0, 8(%rbp)
               	cvtsd2ss	%xmm0, %xmm0
               	addss	139663(%rip), %xmm0     # 0x4429c8 <_IO_stdin_used+0x8>
               	mulss	139659(%rip), %xmm0     # 0x4429cc <_IO_stdin_used+0xc>
               	movq	24(%rsp), %rdi
               	leal	4(%rbx), %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rbp
               	movsd	8(%rbp), %xmm0          # xmm0 = mem[0],zero
               	movsd	139912(%rip), %xmm1     # xmm1 = mem[0],zero
                                                # 0x442af0 <_IO_stdin_used+0x130>
               	mulsd	%xmm1, %xmm0
               	addsd	%xmm1, %xmm0
               	movsd	139904(%rip), %xmm1     # xmm1 = mem[0],zero
                                                # 0x442af8 <_IO_stdin_used+0x138>
               	callq	0x413760 <fmod@plt>
               	movsd	%xmm0, 8(%rbp)
               	cvtsd2ss	%xmm0, %xmm0
               	ucomiss	139587(%rip), %xmm0     # 0x4429d0 <_IO_stdin_used+0x10>
               	jbe	0x420645 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1f5>
               	movq	40(%rsp), %rdi
               	movl	%r13d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	movss	%xmm0, 4(%rsp)
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rbp
               	movsd	8(%rbp), %xmm0          # xmm0 = mem[0],zero
               	movsd	139824(%rip), %xmm1     # xmm1 = mem[0],zero
                                                # 0x442af0 <_IO_stdin_used+0x130>
               	mulsd	%xmm1, %xmm0
               	addsd	%xmm1, %xmm0
               	movsd	139816(%rip), %xmm1     # xmm1 = mem[0],zero
                                                # 0x442af8 <_IO_stdin_used+0x138>
               	callq	0x413760 <fmod@plt>
               	xorps	%xmm1, %xmm1
               	cvtsd2ss	%xmm0, %xmm1
               	movsd	%xmm0, 8(%rbp)
               	mulss	139499(%rip), %xmm1     # 0x4429d4 <_IO_stdin_used+0x14>
               	movss	4(%rsp), %xmm0          # xmm0 = mem[0],zero,zero,zero
               	addss	%xmm1, %xmm0
               	movq	40(%rsp), %rdi
               	movl	%r13d, %esi
               	jmp	0x420640 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1f0>
               	movq	24(%rsp), %rdi
               	movl	%r12d, %esi
               	callq	0x420ba0 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>
               	movss	20(%rbp), %xmm1         # xmm1 = mem[0],zero,zero,zero
               	ucomiss	%xmm0, %xmm1
               	jbe	0x420645 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1f5>
               	movq	40(%rsp), %rdi
               	xorps	%xmm0, %xmm0
               	movl	%r13d, %esi
               	callq	0x420bf0 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>
               	movss	20(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
               	movq	24(%rsp), %rdi
               	movl	%r12d, %esi
               	jmp	0x420640 <kfun:BunnymarkBenchmark#testBunnymark(){}+0x1f0>
               	movq	88(%rsp), %rax
               	movq	72(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:FBuffer.Companion#invoke(kotlin.Int){}FBuffer>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, 40(%rsp)
               	movl	%edi, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rbp      # imm = 0x400000000
               	movq	%rbp, 64(%rsp)
               	movb	267214(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209cb <kfun:FBuffer.Companion#invoke(kotlin.Int){}FBuffer+0x6b>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rax
               	movq	%rbx, 80(%rsp)
               	addl	$15, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movq	%rbp, 16(%rsp)
               	andl	$-16, %ebx
               	js	0x420b99 <kfun:FBuffer.Companion#invoke(kotlin.Int){}FBuffer+0x239>
               	movq	296(%r15), %rdi
               	movl	%ebx, %esi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	221990(%rip), %rcx      # 0x456d60 <ktypeglobal:kotlin.ByteArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebx, 24(%rax)
               	movq	%r12, 24(%rsp)
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r14
               	movq	$0, 8(%rax)
               	leaq	234671(%rip), %rax      # 0x459f20 <ktypeglobal:MemBuffer#internal>
               	movq	%rax, 16(%rbx)
               	movq	%r14, 72(%rsp)
               	movq	%r12, 24(%rbx)
               	movq	%r14, 72(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r13
               	leaq	16(%rax), %r12
               	movq	$0, 8(%rax)
               	leaq	234454(%rip), %rax      # 0x459e90 <ktypeglobal:FBuffer#internal>
               	movq	%rax, 16(%r13)
               	movq	40(%rsp), %rax
               	movq	%r12, (%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movq	%rbp, 16(%rsp)
               	movq	%r14, 24(%r13)
               	movq	80(%rsp), %rax
               	movl	%eax, 40(%r13)
               	movq	24(%rbx), %rax
               	movl	8(%rax), %eax
               	leal	3(%rax), %ebx
               	leal	15(%rax), %ebp
               	testl	%eax, %eax
               	cmovnsl	%eax, %ebx
               	movq	296(%r15), %rdi
               	cmovnsl	%eax, %ebp
               	sarl	$2, %ebx
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	234614(%rip), %rdx      # 0x459fb0 <ktypeglobal:Float32Buffer#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%r14, 24(%rax)
               	movl	$0, 32(%rax)
               	movl	%ebx, 36(%rax)
               	movl	$0, 40(%rax)
               	sarl	$4, %ebp
               	movl	%ebp, 44(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 32(%r13)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	40(%rsp), %rax
               	movq	%r12, (%rax)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%r12, %rax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	nop

<kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebx
               	movq	%rdi, %r14
               	movb	266721(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420bb8 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float+0x18>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	shll	$2, %ebx
               	addl	16(%r14), %ebx
               	js	0x420be1 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float+0x41>
               	movq	8(%r14), %rax
               	movq	8(%rax), %rax
               	leal	3(%rbx), %ecx
               	cmpl	8(%rax), %ecx
               	jae	0x420be1 <kfun:#get__at__Float32Buffer(kotlin.Int){}kotlin.Float+0x41>
               	movl	%ebx, %ecx
               	movss	16(%rax,%rcx), %xmm0    # xmm0 = mem[0],zero,zero,zero
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebx
               	movq	%rdi, %r14
               	movb	266641(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c14 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}+0x24>
               	movss	%xmm0, 4(%rsp)
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movss	4(%rsp), %xmm0          # xmm0 = mem[0],zero,zero,zero
               	shll	$2, %ebx
               	addl	16(%r14), %ebx
               	js	0x420c40 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}+0x50>
               	movq	8(%r14), %rax
               	movq	8(%rax), %rax
               	leal	3(%rbx), %ecx
               	cmpl	8(%rax), %ecx
               	jae	0x420c40 <kfun:#set__at__Float32Buffer(kotlin.Int;kotlin.Float){}+0x50>
               	movq	(%rax), %rcx
               	movl	%ebx, %ecx
               	movss	%xmm0, 16(%rax,%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:#main(){}>:
               	pushq	%rbx
               	subq	$80, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 48(%rsp)
               	movups	%xmm0, 64(%rsp)
               	leaq	233582(%rip), %rax      # 0x459ce0 <ktypeglobal:BunnymarkBenchmark#internal>
               	orq	$3, %rax
               	movq	%rax, 40(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	266455(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cc2 <kfun:#main(){}+0x72>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	40(%rsp), %rdi
               	movq	%rdi, 24(%rsp)
               	movl	$1142947840, 48(%rsp)   # imm = 0x44200000
               	movl	$1139802112, 56(%rsp)   # imm = 0x43F00000
               	movabsq	$258755002368, %rax     # imm = 0x3C3F000000
               	movq	%rax, 64(%rsp)
               	movl	$800000, 72(%rsp)       # imm = 0xC3500
               	callq	0x420450 <kfun:BunnymarkBenchmark#testBunnymark(){}>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$80, %rsp
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:Random.$init_thread_local#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	266285(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d6c <kfun:Random.$init_thread_local#internal+0x5c>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	%rax, %r14
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234143(%rip), %rcx      # 0x45a040 <ktypeglobal:Random.Companion#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	%rbx, (%rax)
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rax
               	movabsq	$4591870180066957722, %rcx # imm = 0x3FB999999999999A
               	movq	%rcx, 8(%rax)
               	movl	$3, %edi
               	callq	0x424e80 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	266114(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e17 <kfun:Random.$init_thread_local#internal+0x107>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e26 <kfun:Random.$init_thread_local#internal+0x116>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261339(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	266050(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e57 <kfun:Random.$init_thread_local#internal+0x147>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e66 <kfun:Random.$init_thread_local#internal+0x156>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261275(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265986(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e97 <kfun:Random.$init_thread_local#internal+0x187>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ea6 <kfun:Random.$init_thread_local#internal+0x196>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261211(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265922(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ed7 <kfun:Random.$init_thread_local#internal+0x1c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ee6 <kfun:Random.$init_thread_local#internal+0x1d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261147(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265858(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f17 <kfun:Random.$init_thread_local#internal+0x207>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f26 <kfun:Random.$init_thread_local#internal+0x216>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261083(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265794(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f57 <kfun:Random.$init_thread_local#internal+0x247>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f66 <kfun:Random.$init_thread_local#internal+0x256>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261019(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265730(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f97 <kfun:Random.$init_thread_local#internal+0x287>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420fa6 <kfun:Random.$init_thread_local#internal+0x296>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260955(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265666(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420fd7 <kfun:Random.$init_thread_local#internal+0x2c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420fe6 <kfun:Random.$init_thread_local#internal+0x2d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260891(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265602(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421017 <kfun:Random.$init_thread_local#internal+0x307>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421026 <kfun:Random.$init_thread_local#internal+0x316>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260827(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265538(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421057 <kfun:Random.$init_thread_local#internal+0x347>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421066 <kfun:Random.$init_thread_local#internal+0x356>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260763(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265474(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421097 <kfun:Random.$init_thread_local#internal+0x387>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4210a6 <kfun:Random.$init_thread_local#internal+0x396>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260699(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265410(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4210d7 <kfun:Random.$init_thread_local#internal+0x3c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4210e6 <kfun:Random.$init_thread_local#internal+0x3d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260635(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265346(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421117 <kfun:Random.$init_thread_local#internal+0x407>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421126 <kfun:Random.$init_thread_local#internal+0x416>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260571(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265282(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421157 <kfun:Random.$init_thread_local#internal+0x447>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421166 <kfun:Random.$init_thread_local#internal+0x456>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260507(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265218(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421197 <kfun:Random.$init_thread_local#internal+0x487>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4211a6 <kfun:Random.$init_thread_local#internal+0x496>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260443(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265154(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4211d7 <kfun:Random.$init_thread_local#internal+0x4c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4211e6 <kfun:Random.$init_thread_local#internal+0x4d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260379(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265090(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421217 <kfun:Random.$init_thread_local#internal+0x507>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421226 <kfun:Random.$init_thread_local#internal+0x516>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260315(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265026(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421257 <kfun:Random.$init_thread_local#internal+0x547>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421266 <kfun:Random.$init_thread_local#internal+0x556>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260251(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264962(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421297 <kfun:Random.$init_thread_local#internal+0x587>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4212a6 <kfun:Random.$init_thread_local#internal+0x596>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260187(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264898(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212d7 <kfun:Random.$init_thread_local#internal+0x5c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4212e6 <kfun:Random.$init_thread_local#internal+0x5d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260123(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264834(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421317 <kfun:Random.$init_thread_local#internal+0x607>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421326 <kfun:Random.$init_thread_local#internal+0x616>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260059(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264770(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421357 <kfun:Random.$init_thread_local#internal+0x647>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421366 <kfun:Random.$init_thread_local#internal+0x656>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259995(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264706(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421397 <kfun:Random.$init_thread_local#internal+0x687>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4213a6 <kfun:Random.$init_thread_local#internal+0x696>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259931(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264642(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4213d7 <kfun:Random.$init_thread_local#internal+0x6c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4213e6 <kfun:Random.$init_thread_local#internal+0x6d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259867(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264578(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421417 <kfun:Random.$init_thread_local#internal+0x707>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421426 <kfun:Random.$init_thread_local#internal+0x716>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259803(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264514(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421457 <kfun:Random.$init_thread_local#internal+0x747>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421466 <kfun:Random.$init_thread_local#internal+0x756>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259739(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264450(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421497 <kfun:Random.$init_thread_local#internal+0x787>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4214a6 <kfun:Random.$init_thread_local#internal+0x796>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259675(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264386(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214d7 <kfun:Random.$init_thread_local#internal+0x7c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4214e6 <kfun:Random.$init_thread_local#internal+0x7d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259611(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264322(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421517 <kfun:Random.$init_thread_local#internal+0x807>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421526 <kfun:Random.$init_thread_local#internal+0x816>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259547(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264258(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421557 <kfun:Random.$init_thread_local#internal+0x847>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421566 <kfun:Random.$init_thread_local#internal+0x856>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259483(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264194(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421597 <kfun:Random.$init_thread_local#internal+0x887>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4215a6 <kfun:Random.$init_thread_local#internal+0x896>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259419(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264130(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4215d7 <kfun:Random.$init_thread_local#internal+0x8c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4215e6 <kfun:Random.$init_thread_local#internal+0x8d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259355(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264066(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421617 <kfun:Random.$init_thread_local#internal+0x907>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421626 <kfun:Random.$init_thread_local#internal+0x916>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259291(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264002(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421657 <kfun:Random.$init_thread_local#internal+0x947>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421666 <kfun:Random.$init_thread_local#internal+0x956>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259227(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263938(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421697 <kfun:Random.$init_thread_local#internal+0x987>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4216a6 <kfun:Random.$init_thread_local#internal+0x996>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259163(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263874(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4216d7 <kfun:Random.$init_thread_local#internal+0x9c7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4216e6 <kfun:Random.$init_thread_local#internal+0x9d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259099(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263810(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421717 <kfun:Random.$init_thread_local#internal+0xa07>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421726 <kfun:Random.$init_thread_local#internal+0xa16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259035(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263746(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421757 <kfun:Random.$init_thread_local#internal+0xa47>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421766 <kfun:Random.$init_thread_local#internal+0xa56>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258971(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263682(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421797 <kfun:Random.$init_thread_local#internal+0xa87>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4217a6 <kfun:Random.$init_thread_local#internal+0xa96>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258907(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263618(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217d7 <kfun:Random.$init_thread_local#internal+0xac7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4217e6 <kfun:Random.$init_thread_local#internal+0xad6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258843(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	263553(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421818 <kfun:Random.$init_thread_local#internal+0xb08>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421844 <kfun:Random.$init_thread_local#internal+0xb34>
               	testl	%ebx, %ebx
               	je	0x42184c <kfun:Random.$init_thread_local#internal+0xb3c>
               	movq	$0, 258721(%rip)        # 0x460ad0 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	$0, 258718(%rip)        # 0x460ad8 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movl	$0, 258764(%rip)        # 0x460b10 <state_global$kotlin.native.MemoryModel>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	258741(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopw	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263442(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421887 <kfun:Random.$init_thread_local#internal+0xb77>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421896 <kfun:Random.$init_thread_local#internal+0xb86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258667(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263378(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218c7 <kfun:Random.$init_thread_local#internal+0xbb7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4218d6 <kfun:Random.$init_thread_local#internal+0xbc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258603(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263314(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421907 <kfun:Random.$init_thread_local#internal+0xbf7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421916 <kfun:Random.$init_thread_local#internal+0xc06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258539(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263250(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421947 <kfun:Random.$init_thread_local#internal+0xc37>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421956 <kfun:Random.$init_thread_local#internal+0xc46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258475(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	263185(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421988 <kfun:Random.$init_thread_local#internal+0xc78>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4219a9 <kfun:Random.$init_thread_local#internal+0xc99>
               	testl	%ebx, %ebx
               	je	0x4219b1 <kfun:Random.$init_thread_local#internal+0xca1>
               	movq	$0, 258369(%rip)        # 0x460ae0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movl	$0, 258411(%rip)        # 0x460b14 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	258384(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	263089(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4219e8 <kfun:Random.$init_thread_local#internal+0xcd8>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421a09 <kfun:Random.$init_thread_local#internal+0xcf9>
               	testl	%ebx, %ebx
               	je	0x421a11 <kfun:Random.$init_thread_local#internal+0xd01>
               	movq	$0, 258281(%rip)        # 0x460ae8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movl	$0, 258319(%rip)        # 0x460b18 <state_global$kotlin.native.concurrent.INITIALIZING>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	258288(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262994(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a47 <kfun:Random.$init_thread_local#internal+0xd37>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421a56 <kfun:Random.$init_thread_local#internal+0xd46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258219(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262930(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a87 <kfun:Random.$init_thread_local#internal+0xd77>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421a96 <kfun:Random.$init_thread_local#internal+0xd86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258155(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262866(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ac7 <kfun:Random.$init_thread_local#internal+0xdb7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ad6 <kfun:Random.$init_thread_local#internal+0xdc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258091(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262802(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b07 <kfun:Random.$init_thread_local#internal+0xdf7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421b16 <kfun:Random.$init_thread_local#internal+0xe06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258027(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262738(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b47 <kfun:Random.$init_thread_local#internal+0xe37>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421b56 <kfun:Random.$init_thread_local#internal+0xe46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257963(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262673(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b88 <kfun:Random.$init_thread_local#internal+0xe78>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421ba9 <kfun:Random.$init_thread_local#internal+0xe99>
               	testl	%ebx, %ebx
               	je	0x421bb1 <kfun:Random.$init_thread_local#internal+0xea1>
               	movq	$0, 257873(%rip)        # 0x460af0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movl	$0, 257907(%rip)        # 0x460b1c <state_global$kotlin.native.internal.NativePtr>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257872(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262578(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421be7 <kfun:Random.$init_thread_local#internal+0xed7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421bf6 <kfun:Random.$init_thread_local#internal+0xee6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257803(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262514(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c27 <kfun:Random.$init_thread_local#internal+0xf17>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421c36 <kfun:Random.$init_thread_local#internal+0xf26>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257739(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262449(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c68 <kfun:Random.$init_thread_local#internal+0xf58>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421c89 <kfun:Random.$init_thread_local#internal+0xf79>
               	testl	%ebx, %ebx
               	je	0x421c91 <kfun:Random.$init_thread_local#internal+0xf81>
               	movq	$0, 257657(%rip)        # 0x460af8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movl	$0, 257687(%rip)        # 0x460b20 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257648(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262354(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421cc7 <kfun:Random.$init_thread_local#internal+0xfb7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421cd6 <kfun:Random.$init_thread_local#internal+0xfc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257579(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262290(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d07 <kfun:Random.$init_thread_local#internal+0xff7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d16 <kfun:Random.$init_thread_local#internal+0x1006>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257515(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262226(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d47 <kfun:Random.$init_thread_local#internal+0x1037>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d56 <kfun:Random.$init_thread_local#internal+0x1046>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257451(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262162(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d87 <kfun:Random.$init_thread_local#internal+0x1077>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d96 <kfun:Random.$init_thread_local#internal+0x1086>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257387(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262098(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421dc7 <kfun:Random.$init_thread_local#internal+0x10b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421dd6 <kfun:Random.$init_thread_local#internal+0x10c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257323(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262034(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e07 <kfun:Random.$init_thread_local#internal+0x10f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e16 <kfun:Random.$init_thread_local#internal+0x1106>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257259(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261970(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e47 <kfun:Random.$init_thread_local#internal+0x1137>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e56 <kfun:Random.$init_thread_local#internal+0x1146>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257195(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261906(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e87 <kfun:Random.$init_thread_local#internal+0x1177>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e96 <kfun:Random.$init_thread_local#internal+0x1186>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257131(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261842(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ec7 <kfun:Random.$init_thread_local#internal+0x11b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ed6 <kfun:Random.$init_thread_local#internal+0x11c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257067(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261778(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f07 <kfun:Random.$init_thread_local#internal+0x11f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f16 <kfun:Random.$init_thread_local#internal+0x1206>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257003(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261714(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f47 <kfun:Random.$init_thread_local#internal+0x1237>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f56 <kfun:Random.$init_thread_local#internal+0x1246>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256939(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261650(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f87 <kfun:Random.$init_thread_local#internal+0x1277>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f96 <kfun:Random.$init_thread_local#internal+0x1286>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256875(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261586(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fc7 <kfun:Random.$init_thread_local#internal+0x12b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421fd6 <kfun:Random.$init_thread_local#internal+0x12c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256811(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261522(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422007 <kfun:Random.$init_thread_local#internal+0x12f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422016 <kfun:Random.$init_thread_local#internal+0x1306>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256747(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	261457(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422048 <kfun:Random.$init_thread_local#internal+0x1338>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x42205f <kfun:Random.$init_thread_local#internal+0x134f>
               	testl	%ebx, %ebx
               	je	0x422067 <kfun:Random.$init_thread_local#internal+0x1357>
               	movq	$0, 250545(%rip)        # 0x45f310 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	256666(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261362(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220a7 <kfun:Random.$init_thread_local#internal+0x1397>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220b6 <kfun:Random.$init_thread_local#internal+0x13a6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256587(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	261297(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220e8 <kfun:Random.$init_thread_local#internal+0x13d8>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4220ff <kfun:Random.$init_thread_local#internal+0x13ef>
               	testl	%ebx, %ebx
               	je	0x422107 <kfun:Random.$init_thread_local#internal+0x13f7>
               	movq	$0, 250393(%rip)        # 0x45f318 <kvar:kotlin.collections.EmptySet.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	256506(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261202(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422147 <kfun:Random.$init_thread_local#internal+0x1437>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422156 <kfun:Random.$init_thread_local#internal+0x1446>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256427(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261138(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422187 <kfun:Random.$init_thread_local#internal+0x1477>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422196 <kfun:Random.$init_thread_local#internal+0x1486>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256363(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	261073(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4221c8 <kfun:Random.$init_thread_local#internal+0x14b8>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4221df <kfun:Random.$init_thread_local#internal+0x14cf>
               	testl	%ebx, %ebx
               	je	0x4221e7 <kfun:Random.$init_thread_local#internal+0x14d7>
               	movq	$0, 250177(%rip)        # 0x45f320 <kvar:kotlin.coroutines.EmptyCoroutineContext.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	256282(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260978(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422227 <kfun:Random.$init_thread_local#internal+0x1517>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422236 <kfun:Random.$init_thread_local#internal+0x1526>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256203(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260914(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422267 <kfun:Random.$init_thread_local#internal+0x1557>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422276 <kfun:Random.$init_thread_local#internal+0x1566>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256139(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260849(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4222a8 <kfun:Random.$init_thread_local#internal+0x1598>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4222c9 <kfun:Random.$init_thread_local#internal+0x15b9>
               	testl	%ebx, %ebx
               	je	0x4222d1 <kfun:Random.$init_thread_local#internal+0x15c1>
               	movq	$0, 256065(%rip)        # 0x460b00 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	movl	$0, 256091(%rip)        # 0x460b24 <state_global$kotlin.ranges.IntRange>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	256048(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424b20 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260754(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422307 <kfun:Random.$init_thread_local#internal+0x15f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422316 <kfun:Random.$init_thread_local#internal+0x1606>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255979(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260690(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422347 <kfun:Random.$init_thread_local#internal+0x1637>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422356 <kfun:Random.$init_thread_local#internal+0x1646>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255915(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260626(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422387 <kfun:Random.$init_thread_local#internal+0x1677>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422396 <kfun:Random.$init_thread_local#internal+0x1686>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255851(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260562(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4223c7 <kfun:Random.$init_thread_local#internal+0x16b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4223d6 <kfun:Random.$init_thread_local#internal+0x16c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255787(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260498(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422407 <kfun:Random.$init_thread_local#internal+0x16f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422416 <kfun:Random.$init_thread_local#internal+0x1706>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255723(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260434(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422447 <kfun:Random.$init_thread_local#internal+0x1737>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422456 <kfun:Random.$init_thread_local#internal+0x1746>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255659(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260370(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422487 <kfun:Random.$init_thread_local#internal+0x1777>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422496 <kfun:Random.$init_thread_local#internal+0x1786>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255595(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260306(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4224c7 <kfun:Random.$init_thread_local#internal+0x17b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4224d6 <kfun:Random.$init_thread_local#internal+0x17c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255531(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260242(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422507 <kfun:Random.$init_thread_local#internal+0x17f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422516 <kfun:Random.$init_thread_local#internal+0x1806>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255467(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260178(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422547 <kfun:Random.$init_thread_local#internal+0x1837>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422556 <kfun:Random.$init_thread_local#internal+0x1846>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255403(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260114(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422587 <kfun:Random.$init_thread_local#internal+0x1877>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422596 <kfun:Random.$init_thread_local#internal+0x1886>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255339(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260050(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4225c7 <kfun:Random.$init_thread_local#internal+0x18b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4225d6 <kfun:Random.$init_thread_local#internal+0x18c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255275(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259986(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422607 <kfun:Random.$init_thread_local#internal+0x18f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422616 <kfun:Random.$init_thread_local#internal+0x1906>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255211(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259922(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422647 <kfun:Random.$init_thread_local#internal+0x1937>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422656 <kfun:Random.$init_thread_local#internal+0x1946>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255147(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259858(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422687 <kfun:Random.$init_thread_local#internal+0x1977>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422696 <kfun:Random.$init_thread_local#internal+0x1986>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255083(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259794(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4226c7 <kfun:Random.$init_thread_local#internal+0x19b7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4226d6 <kfun:Random.$init_thread_local#internal+0x19c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255019(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259730(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422707 <kfun:Random.$init_thread_local#internal+0x19f7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422716 <kfun:Random.$init_thread_local#internal+0x1a06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254955(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259666(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422747 <kfun:Random.$init_thread_local#internal+0x1a37>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422756 <kfun:Random.$init_thread_local#internal+0x1a46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254891(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259602(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422787 <kfun:Random.$init_thread_local#internal+0x1a77>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422796 <kfun:Random.$init_thread_local#internal+0x1a86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254827(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259538(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4227c7 <kfun:Random.$init_thread_local#internal+0x1ab7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4227d6 <kfun:Random.$init_thread_local#internal+0x1ac6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254763(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259474(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422807 <kfun:Random.$init_thread_local#internal+0x1af7>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422816 <kfun:Random.$init_thread_local#internal+0x1b06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254699(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259410(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422847 <kfun:Random.$init_thread_local#internal+0x1b37>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422856 <kfun:Random.$init_thread_local#internal+0x1b46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254635(%rip), %rsi      # 0x460b08 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x424b20 <AddTLSRecord>

<_Konan_constructors>:
               	cmpb	$0, 254641(%rip)        # 0x460b28 <_Konan_init_stdlib_guard>
               	je	0x422887 <_Konan_constructors+0x17>
               	cmpb	$0, 254633(%rip)        # 0x460b29 <_Konan_init_main_guard>
               	je	0x42338d <_Konan_constructors+0xb1d>
               	retq
               	movb	$1, 254618(%rip)        # 0x460b28 <_Konan_init_stdlib_guard>
               	leaq	359539(%rip), %rax      # 0x47a508 <(anonymous namespace)::initHeadNode>
               	movq	359564(%rip), %rcx      # 0x47a528 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 359520(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	248437(%rip), %rdx      # 0x45f328 <init_node>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359498(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248427(%rip), %rcx      # 0x45f330 <init_node+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248424(%rip), %rdx      # 0x45f338 <init_node.16>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359469(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248414(%rip), %rcx      # 0x45f340 <init_node.16+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248411(%rip), %rdx      # 0x45f348 <init_node.17>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359440(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248401(%rip), %rcx      # 0x45f350 <init_node.17+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248398(%rip), %rdx      # 0x45f358 <init_node.18>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359411(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248388(%rip), %rcx      # 0x45f360 <init_node.18+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248385(%rip), %rdx      # 0x45f368 <init_node.19>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359382(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248375(%rip), %rcx      # 0x45f370 <init_node.19+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248372(%rip), %rdx      # 0x45f378 <init_node.20>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359353(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248362(%rip), %rcx      # 0x45f380 <init_node.20+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248359(%rip), %rdx      # 0x45f388 <init_node.21>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359324(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248349(%rip), %rcx      # 0x45f390 <init_node.21+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248346(%rip), %rdx      # 0x45f398 <init_node.22>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359295(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248336(%rip), %rcx      # 0x45f3a0 <init_node.22+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248333(%rip), %rdx      # 0x45f3a8 <init_node.23>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359266(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248323(%rip), %rcx      # 0x45f3b0 <init_node.23+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248320(%rip), %rdx      # 0x45f3b8 <init_node.24>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359237(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248310(%rip), %rcx      # 0x45f3c0 <init_node.24+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248307(%rip), %rdx      # 0x45f3c8 <init_node.25>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359208(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248297(%rip), %rcx      # 0x45f3d0 <init_node.25+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248294(%rip), %rdx      # 0x45f3d8 <init_node.26>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359179(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248284(%rip), %rcx      # 0x45f3e0 <init_node.26+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248281(%rip), %rdx      # 0x45f3e8 <init_node.27>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359150(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248271(%rip), %rcx      # 0x45f3f0 <init_node.27+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248268(%rip), %rdx      # 0x45f3f8 <init_node.28>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359121(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248258(%rip), %rcx      # 0x45f400 <init_node.28+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248255(%rip), %rdx      # 0x45f408 <init_node.29>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359092(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248245(%rip), %rcx      # 0x45f410 <init_node.29+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248242(%rip), %rdx      # 0x45f418 <init_node.30>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359063(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248232(%rip), %rcx      # 0x45f420 <init_node.30+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248229(%rip), %rdx      # 0x45f428 <init_node.31>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359034(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248219(%rip), %rcx      # 0x45f430 <init_node.31+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248216(%rip), %rdx      # 0x45f438 <init_node.32>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 359005(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248206(%rip), %rcx      # 0x45f440 <init_node.32+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248203(%rip), %rdx      # 0x45f448 <init_node.33>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358976(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248193(%rip), %rcx      # 0x45f450 <init_node.33+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248190(%rip), %rdx      # 0x45f458 <init_node.34>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358947(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248180(%rip), %rcx      # 0x45f460 <init_node.34+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248177(%rip), %rdx      # 0x45f468 <init_node.35>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358918(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248167(%rip), %rcx      # 0x45f470 <init_node.35+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248164(%rip), %rdx      # 0x45f478 <init_node.36>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358889(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248154(%rip), %rcx      # 0x45f480 <init_node.36+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248151(%rip), %rdx      # 0x45f488 <init_node.37>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358860(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248141(%rip), %rcx      # 0x45f490 <init_node.37+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248138(%rip), %rdx      # 0x45f498 <init_node.38>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358831(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248128(%rip), %rcx      # 0x45f4a0 <init_node.38+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248125(%rip), %rdx      # 0x45f4a8 <init_node.39>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358802(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248115(%rip), %rcx      # 0x45f4b0 <init_node.39+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248112(%rip), %rdx      # 0x45f4b8 <init_node.40>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358773(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248102(%rip), %rcx      # 0x45f4c0 <init_node.40+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248099(%rip), %rdx      # 0x45f4c8 <init_node.41>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358744(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248089(%rip), %rcx      # 0x45f4d0 <init_node.41+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248086(%rip), %rdx      # 0x45f4d8 <init_node.42>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358715(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248076(%rip), %rcx      # 0x45f4e0 <init_node.42+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248073(%rip), %rdx      # 0x45f4e8 <init_node.43>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358686(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248063(%rip), %rcx      # 0x45f4f0 <init_node.43+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248060(%rip), %rdx      # 0x45f4f8 <init_node.44>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358657(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248050(%rip), %rcx      # 0x45f500 <init_node.44+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248047(%rip), %rdx      # 0x45f508 <init_node.45>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358628(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248037(%rip), %rcx      # 0x45f510 <init_node.45+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248034(%rip), %rdx      # 0x45f518 <init_node.46>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358599(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248024(%rip), %rcx      # 0x45f520 <init_node.46+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248021(%rip), %rdx      # 0x45f528 <init_node.47>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358570(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	248011(%rip), %rcx      # 0x45f530 <init_node.47+0x8>
               	cmoveq	%rax, %rcx
               	leaq	248008(%rip), %rdx      # 0x45f538 <init_node.48>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358541(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247998(%rip), %rcx      # 0x45f540 <init_node.48+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247995(%rip), %rdx      # 0x45f548 <init_node.49>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358512(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247985(%rip), %rcx      # 0x45f550 <init_node.49+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247982(%rip), %rdx      # 0x45f558 <init_node.50>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358483(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247972(%rip), %rcx      # 0x45f560 <init_node.50+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247969(%rip), %rdx      # 0x45f568 <init_node.51>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358454(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247959(%rip), %rcx      # 0x45f570 <init_node.51+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247956(%rip), %rdx      # 0x45f578 <init_node.52>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358425(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247946(%rip), %rcx      # 0x45f580 <init_node.52+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247943(%rip), %rdx      # 0x45f588 <init_node.53>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358396(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247933(%rip), %rcx      # 0x45f590 <init_node.53+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247930(%rip), %rdx      # 0x45f598 <init_node.54>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358367(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247920(%rip), %rcx      # 0x45f5a0 <init_node.54+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247917(%rip), %rdx      # 0x45f5a8 <init_node.55>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358338(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247907(%rip), %rcx      # 0x45f5b0 <init_node.55+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247904(%rip), %rdx      # 0x45f5b8 <init_node.56>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358309(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247894(%rip), %rcx      # 0x45f5c0 <init_node.56+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247891(%rip), %rdx      # 0x45f5c8 <init_node.57>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358280(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247881(%rip), %rcx      # 0x45f5d0 <init_node.57+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247878(%rip), %rdx      # 0x45f5d8 <init_node.58>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358251(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247868(%rip), %rcx      # 0x45f5e0 <init_node.58+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247865(%rip), %rdx      # 0x45f5e8 <init_node.59>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358222(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247855(%rip), %rcx      # 0x45f5f0 <init_node.59+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247852(%rip), %rdx      # 0x45f5f8 <init_node.60>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358193(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247842(%rip), %rcx      # 0x45f600 <init_node.60+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247839(%rip), %rdx      # 0x45f608 <init_node.61>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358164(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247829(%rip), %rcx      # 0x45f610 <init_node.61+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247826(%rip), %rdx      # 0x45f618 <init_node.62>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358135(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247816(%rip), %rcx      # 0x45f620 <init_node.62+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247813(%rip), %rdx      # 0x45f628 <init_node.63>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358106(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247803(%rip), %rcx      # 0x45f630 <init_node.63+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247800(%rip), %rdx      # 0x45f638 <init_node.64>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358077(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247790(%rip), %rcx      # 0x45f640 <init_node.64+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247787(%rip), %rdx      # 0x45f648 <init_node.65>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358048(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247777(%rip), %rcx      # 0x45f650 <init_node.65+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247774(%rip), %rdx      # 0x45f658 <init_node.66>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 358019(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247764(%rip), %rcx      # 0x45f660 <init_node.66+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247761(%rip), %rdx      # 0x45f668 <init_node.67>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357990(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247751(%rip), %rcx      # 0x45f670 <init_node.67+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247748(%rip), %rdx      # 0x45f678 <init_node.68>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357961(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247738(%rip), %rcx      # 0x45f680 <init_node.68+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247735(%rip), %rdx      # 0x45f688 <init_node.69>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357932(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247725(%rip), %rcx      # 0x45f690 <init_node.69+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247722(%rip), %rdx      # 0x45f698 <init_node.70>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357903(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247712(%rip), %rcx      # 0x45f6a0 <init_node.70+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247709(%rip), %rdx      # 0x45f6a8 <init_node.71>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357874(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247699(%rip), %rcx      # 0x45f6b0 <init_node.71+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247696(%rip), %rdx      # 0x45f6b8 <init_node.72>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357845(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247686(%rip), %rcx      # 0x45f6c0 <init_node.72+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247683(%rip), %rdx      # 0x45f6c8 <init_node.73>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357816(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247673(%rip), %rcx      # 0x45f6d0 <init_node.73+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247670(%rip), %rdx      # 0x45f6d8 <init_node.74>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357787(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247660(%rip), %rcx      # 0x45f6e0 <init_node.74+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247657(%rip), %rdx      # 0x45f6e8 <init_node.75>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357758(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247647(%rip), %rcx      # 0x45f6f0 <init_node.75+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247644(%rip), %rdx      # 0x45f6f8 <init_node.76>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357729(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247634(%rip), %rcx      # 0x45f700 <init_node.76+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247631(%rip), %rdx      # 0x45f708 <init_node.77>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357700(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247621(%rip), %rcx      # 0x45f710 <init_node.77+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247618(%rip), %rdx      # 0x45f718 <init_node.78>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357671(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247608(%rip), %rcx      # 0x45f720 <init_node.78+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247605(%rip), %rdx      # 0x45f728 <init_node.79>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357642(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247595(%rip), %rcx      # 0x45f730 <init_node.79+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247592(%rip), %rdx      # 0x45f738 <init_node.80>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357613(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247582(%rip), %rcx      # 0x45f740 <init_node.80+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247579(%rip), %rdx      # 0x45f748 <init_node.81>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357584(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247569(%rip), %rcx      # 0x45f750 <init_node.81+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247566(%rip), %rdx      # 0x45f758 <init_node.82>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357555(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247556(%rip), %rcx      # 0x45f760 <init_node.82+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247553(%rip), %rdx      # 0x45f768 <init_node.83>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357526(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247543(%rip), %rcx      # 0x45f770 <init_node.83+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247540(%rip), %rdx      # 0x45f778 <init_node.84>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357497(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247530(%rip), %rcx      # 0x45f780 <init_node.84+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247527(%rip), %rdx      # 0x45f788 <init_node.85>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357468(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247517(%rip), %rcx      # 0x45f790 <init_node.85+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247514(%rip), %rdx      # 0x45f798 <init_node.86>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357439(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247504(%rip), %rcx      # 0x45f7a0 <init_node.86+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247501(%rip), %rdx      # 0x45f7a8 <init_node.87>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357410(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247491(%rip), %rcx      # 0x45f7b0 <init_node.87+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247488(%rip), %rdx      # 0x45f7b8 <init_node.88>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357381(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247478(%rip), %rcx      # 0x45f7c0 <init_node.88+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247475(%rip), %rdx      # 0x45f7c8 <init_node.89>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357352(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247465(%rip), %rcx      # 0x45f7d0 <init_node.89+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247462(%rip), %rdx      # 0x45f7d8 <init_node.90>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357323(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247452(%rip), %rcx      # 0x45f7e0 <init_node.90+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247449(%rip), %rdx      # 0x45f7e8 <init_node.91>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357294(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247439(%rip), %rcx      # 0x45f7f0 <init_node.91+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247436(%rip), %rdx      # 0x45f7f8 <init_node.92>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357265(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247426(%rip), %rcx      # 0x45f800 <init_node.92+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247423(%rip), %rdx      # 0x45f808 <init_node.93>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357236(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247413(%rip), %rcx      # 0x45f810 <init_node.93+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247410(%rip), %rdx      # 0x45f818 <init_node.94>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357207(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247400(%rip), %rcx      # 0x45f820 <init_node.94+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247397(%rip), %rdx      # 0x45f828 <init_node.95>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357178(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247387(%rip), %rcx      # 0x45f830 <init_node.95+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247384(%rip), %rdx      # 0x45f838 <init_node.96>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357149(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247374(%rip), %rcx      # 0x45f840 <init_node.96+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247371(%rip), %rdx      # 0x45f848 <init_node.97>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357120(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247361(%rip), %rcx      # 0x45f850 <init_node.97+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247358(%rip), %rdx      # 0x45f858 <init_node.98>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357091(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247348(%rip), %rcx      # 0x45f860 <init_node.98+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247345(%rip), %rdx      # 0x45f868 <init_node.99>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357062(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247335(%rip), %rcx      # 0x45f870 <init_node.99+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247332(%rip), %rdx      # 0x45f878 <init_node.100>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357033(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247322(%rip), %rcx      # 0x45f880 <init_node.100+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247319(%rip), %rdx      # 0x45f888 <init_node.101>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 357004(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247309(%rip), %rcx      # 0x45f890 <init_node.101+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247306(%rip), %rdx      # 0x45f898 <init_node.102>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356975(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247296(%rip), %rcx      # 0x45f8a0 <init_node.102+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247293(%rip), %rdx      # 0x45f8a8 <init_node.103>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356946(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247283(%rip), %rcx      # 0x45f8b0 <init_node.103+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247280(%rip), %rdx      # 0x45f8b8 <init_node.104>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356917(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247270(%rip), %rcx      # 0x45f8c0 <init_node.104+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247267(%rip), %rdx      # 0x45f8c8 <init_node.105>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356888(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247257(%rip), %rcx      # 0x45f8d0 <init_node.105+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247254(%rip), %rdx      # 0x45f8d8 <init_node.106>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356859(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247244(%rip), %rcx      # 0x45f8e0 <init_node.106+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247241(%rip), %rdx      # 0x45f8e8 <init_node.107>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356830(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247231(%rip), %rcx      # 0x45f8f0 <init_node.107+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247228(%rip), %rdx      # 0x45f8f8 <init_node.108>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356801(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247218(%rip), %rcx      # 0x45f900 <init_node.108+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247215(%rip), %rdx      # 0x45f908 <init_node.109>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356772(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247205(%rip), %rcx      # 0x45f910 <init_node.109+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247202(%rip), %rax      # 0x45f918 <init_node.110>
               	movq	%rax, (%rcx)
               	movq	%rax, 356776(%rip)      # 0x47a528 <(anonymous namespace)::initTailNode>
               	cmpb	$0, 251810(%rip)        # 0x460b29 <_Konan_init_main_guard>
               	jne	0x422886 <_Konan_constructors+0x16>
               	movb	$1, 251797(%rip)        # 0x460b29 <_Konan_init_main_guard>
               	leaq	356717(%rip), %rax      # 0x47a508 <(anonymous namespace)::initHeadNode>
               	movq	356742(%rip), %rcx      # 0x47a528 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356698(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	247151(%rip), %rdx      # 0x45f928 <init_node.111>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356676(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247141(%rip), %rcx      # 0x45f930 <init_node.111+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247138(%rip), %rdx      # 0x45f938 <init_node.112>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356647(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247128(%rip), %rcx      # 0x45f940 <init_node.112+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247125(%rip), %rdx      # 0x45f948 <init_node.113>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356618(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247115(%rip), %rcx      # 0x45f950 <init_node.113+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247112(%rip), %rdx      # 0x45f958 <init_node.114>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 356589(%rip)        # 0x47a508 <(anonymous namespace)::initHeadNode>
               	leaq	247102(%rip), %rcx      # 0x45f960 <init_node.114+0x8>
               	cmoveq	%rax, %rcx
               	leaq	247099(%rip), %rax      # 0x45f968 <init_node.115>
               	movq	%rax, (%rcx)
               	movq	%rax, 356593(%rip)      # 0x47a528 <(anonymous namespace)::initTailNode>
               	retq
               	nopl	(%rax,%rax)

<kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>:
               	jmp	0x413770 <sched_yield@plt>
               	nopw	%cs:(%rax,%rax)

<__clang_call_terminate>:
               	pushq	%rax
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bec3 <std::terminate()>
               	nopl	(%rax,%rax)

<void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, (%rsp)
               	movq	%rdi, %r13
               	cmpq	$0, 244539(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42348f <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2f>
               	movq	%r13, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x423668 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x208>
               	cmpb	$0, 88(%r13)
               	je	0x423642 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	leaq	40(%r13), %r15
               	jmp	0x4234db <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x7b>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	96(%r13), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	movabsq	$9223372036854775807, %rsi # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rsi, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 104(%r13)
               	nopl	(%rax)
               	cmpb	$0, 88(%r13)
               	je	0x423642 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	movb	$0, 112(%r13)
               	movq	104(%r13), %r14
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	cmpq	%r14, %rax
               	jge	0x42359f <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x13f>
               	xorl	%ecx, %ecx
               	cmpq	%rax, %r14
               	setns	%cl
               	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rdx, %rcx
               	movq	%r14, %rbp
               	subq	%rax, %rbp
               	cmovoq	%rcx, %rbp
               	movabsq	$86400000000000, %rax   # imm = 0x4E94914F0000
               	cmpq	%rax, %rbp
               	cmovgq	%rax, %rbp
               	callq	0x43cb00 <std::chrono::_V2::system_clock::now()>
               	movq	%rax, %rbx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	movabsq	$1237940039285380275, %rcx # imm = 0x112E0BE826D694B3
               	imulq	%rcx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$26, %rbp
               	addq	%rax, %rbp
               	imulq	$-1000000000, %rbp, %r12 # imm = 0xC4653600
               	addq	%rbx, %r12
               	nopl	(%rax,%rax)
               	cmpb	$0, 112(%r13)
               	jne	0x4234d0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	movq	%rbp, 8(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	leaq	8(%rsp), %rdx
               	callq	0x413790 <pthread_cond_timedwait@plt>
               	callq	0x43cb00 <std::chrono::_V2::system_clock::now()>
               	cmpq	%rbx, %rax
               	jl	0x423560 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x100>
               	cmpb	$0, 112(%r13)
               	je	0x4234e4 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x84>
               	jmp	0x4234d0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	cmpq	$0, 244241(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4235b1 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x151>
               	movq	%r13, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	(%rsp), %rax
               	movq	(%rax), %rbx
               	movq	16(%rbx), %rax
               	movl	(%rax), %eax
               	cmpl	$1, %eax
               	je	0x42361d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	56(%rbx), %rcx
               	movq	48(%rbx), %rdx
               	movq	24(%rdx), %rdx
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%rbp), %rsi
               	testq	%rdx, %rdx
               	cmovnsq	%rbp, %rsi
               	imulq	$1000, %rdx, %rdx       # imm = 0x3E8
               	cmovoq	%rsi, %rdx
               	xorl	%esi, %esi
               	movq	%rcx, %rdi
               	addq	%rdx, %rdi
               	setns	%sil
               	addq	%rbp, %rsi
               	addq	%rcx, %rdx
               	cmovoq	%rsi, %rdx
               	cmpq	%rdx, %rax
               	jl	0x42361d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	cmpq	$0, 80(%rbx)
               	je	0x423663 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x203>
               	leaq	64(%rbx), %rdi
               	callq	*88(%rbx)
               	cmpq	$0, 244115(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4234a0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	%r13, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x4234a0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	cmpq	$0, 244078(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x423654 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1f4>
               	movq	%r13, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43cb72 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpq	$0, 244006(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42369c <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x23c>
               	movq	%r13, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x4236da <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2a>
               	movq	(%rdi), %r12
               	callq	0x4137b0 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x4137c0 <pthread_setname_np@plt>
               	movq	(%r15), %rdi
               	movq	(%rbx), %rax
               	addq	8(%rbx), %rdi
               	testb	$1, %al
               	je	0x4236f0 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	(%rdi), %rcx
               	movq	-1(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	235949(%rip), %rax      # 0x45d0b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423726 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423726 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43ece0 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	235901(%rip), %rax      # 0x45d0b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423756 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423756 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43ece0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rcx
               	leaq	24(%rdi), %rsi
               	leaq	16(%rdi), %rdx
               	movq	80(%rdi), %r9
               	movb	$0, 40(%rsp)
               	cmpb	$0, 72(%rdi)
               	je	0x4237dc <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x6c>
               	leaq	24(%rsp), %r8
               	movq	%r8, 8(%rsp)
               	movq	40(%rdi), %rax
               	leaq	56(%rdi), %rbx
               	cmpq	%rbx, %rax
               	je	0x4237b7 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x47>
               	movq	%rax, 8(%rsp)
               	movq	56(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	jmp	0x4237be <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x4e>
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%r8)
               	movq	48(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movq	%rbx, 40(%rdi)
               	movq	$0, 48(%rdi)
               	movb	$0, 56(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%r9
               	cmpb	$0, 40(%rsp)
               	je	0x4237ff <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4237ff <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	callq	0x413730 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x423823 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x423823 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	235589(%rip), %rax      # 0x45d080 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x423a70 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x423861 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x31>
               	addq	$64, %rbx
               	movq	%rbx, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	235525(%rip), %rax      # 0x45d080 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x423a70 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42389e <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x2e>
               	leaq	64(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nop

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)>:
               	pushq	%rax
               	movq	40(%rsi), %rcx
               	lock
               	addq	%rcx, 32(%rdi)
               	movq	32(%rdi), %rcx
               	movq	40(%rdi), %rdx
               	addq	%rcx, %rdx
               	movq	24(%rdi), %rcx
               	movq	32(%rcx), %rcx
               	cmpq	%rcx, %rdx
               	jb	0x4238e3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x33>
               	movq	%rdi, %rax
               	cmpq	$0, 80(%rdi)
               	je	0x4238e5 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x35>
               	leaq	64(%rax), %rdi
               	callq	*88(%rax)
               	popq	%rax
               	retq
               	callq	0x43cb72 <std::__throw_bad_function_call()>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	xorl	%eax, %eax
               	xchgq	%rax, 32(%rdi)
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	xchgq	%rax, 56(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %r15
               	leaq	96(%rbx), %r14
               	cmpq	$0, 243338(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x423940 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0x40>
               	movq	%r14, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4239c3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xc3>
               	movabsq	$9223372036854775807, %r12 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r12), %rax
               	testq	%r15, %r15
               	cmovnsq	%r12, %rax
               	imulq	$1000, %r15, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r12, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 200(%rbx)
               	movb	$1, 208(%rbx)
               	cmpq	$0, 243225(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4239a9 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xa9>
               	movq	%r14, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	addq	$136, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x43c798 <std::condition_variable::notify_all()>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)>:
               	movq	%rsi, %rax
               	xchgq	%rax, 40(%rdi)
               	movq	24(%rdi), %rax
               	movb	16(%rax), %al
               	testb	$1, %al
               	je	0x423a68 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	%rsi, %xmm1
               	punpckldq	126993(%rip), %xmm1 # xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
                                                # 0x442a10 <_IO_stdin_used+0x50>
               	subpd	127001(%rip), %xmm1     # 0x442a20 <_IO_stdin_used+0x60>
               	movapd	%xmm1, %xmm0
               	unpckhpd	%xmm1, %xmm0            # xmm0 = xmm0[1],xmm1[1]
               	addsd	%xmm1, %xmm0
               	movq	24(%rdi), %rax
               	movsd	40(%rax), %xmm1         # xmm1 = mem[0],zero
               	divsd	%xmm1, %xmm0
               	movapd	126984(%rip), %xmm1     # 0x442a30 <_IO_stdin_used+0x70>
               	andpd	%xmm0, %xmm1
               	ucomisd	127180(%rip), %xmm1     # 0x442b00 <_IO_stdin_used+0x140>
               	je	0x423a68 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	24(%rdi), %rax
               	movq	48(%rax), %rax
               	xorps	%xmm1, %xmm1
               	cvtsi2sd	%rax, %xmm1
               	movq	24(%rdi), %rax
               	movq	56(%rax), %rax
               	cvtsi2sd	%rax, %xmm2
               	maxsd	%xmm0, %xmm1
               	minsd	%xmm1, %xmm2
               	cvttsd2si	%xmm2, %rax
               	movq	24(%rdi), %rcx
               	xchgq	%rax, 32(%rcx)
               	retq
               	nopl	(%rax)

<kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	cmpq	$0, 243000(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x423a8e <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x1e>
               	movq	%r15, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x423aed <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x7d>
               	movb	$0, 88(%r15)
               	movb	$1, 112(%r15)
               	testq	%r15, %r15
               	je	0x423aaf <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	cmpq	$0, 242963(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x423aaf <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	movq	%r15, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	leaq	40(%r15), %r14
               	movq	%r14, %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	leaq	120(%r15), %rbx
               	movq	%rbx, %rdi
               	callq	0x43ecf4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	je	0x423adb <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x6b>
               	movq	%rbx, %rdi
               	callq	0x43ecf4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x423ae8 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x78>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x43c76a <std::condition_variable::~condition_variable()>
               	callq	0x43bec3 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	jmp	0x423b09 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x99>
               	movq	%rax, %r14
               	movq	(%rbx), %rdi
               	callq	0x423b30 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	120(%r15), %rdi
               	callq	0x423b40 <kotlin::ScopedThread::~ScopedThread()>
               	addq	$40, %r15
               	movq	%r15, %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopl	(%rax)

<std::thread::~thread()>:
               	testq	%rdi, %rdi
               	jne	0x423b36 <std::thread::~thread()+0x6>
               	retq
               	pushq	%rax
               	callq	0x43bec3 <std::terminate()>
               	nopl	(%rax)

<kotlin::ScopedThread::~ScopedThread()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	je	0x423b58 <kotlin::ScopedThread::~ScopedThread()+0x18>
               	movq	%rdi, %rbx
               	callq	0x43ecf4 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x423b60 <kotlin::ScopedThread::~ScopedThread()+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x43bec3 <std::terminate()>
               	movq	%rax, %r14
               	movq	(%rbx), %rdi
               	callq	0x423b30 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopl	(%rax,%rax)
               	nopl	(%rax)
		...

<void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %rbx
               	subq	%rdi, %rbx
               	cmpq	$257, %rbx              # imm = 0x101
               	jl	0x42405f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movq	%rdx, %r12
               	movq	%rsi, %r14
               	movq	%rdi, %rbp
               	leaq	16(%rdi), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rdi, 64(%rsp)
               	nopl	(%rax,%rax)
               	testq	%r12, %r12
               	movq	%r14, 8(%rsp)
               	je	0x423fb6 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x426>
               	shrq	%rbx
               	andq	$-16, %rbx
               	leaq	(%rbx,%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	-16(%r14), %rax
               	movq	%rax, 48(%rsp)
               	movq	16(%rbp), %r15
               	movq	24(%rbp), %rdi
               	movq	(%rbp,%rbx), %r13
               	movq	8(%rbp,%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rbx
               	subq	%r13, %rbx
               	movq	%r15, %rdx
               	cmovaq	%r13, %rdx
               	testq	%rdx, %rdx
               	movq	%r12, 80(%rsp)
               	je	0x423c50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	movq	%r13, 72(%rsp)
               	movq	%rdi, %r13
               	movq	40(%rsp), %rsi
               	callq	0x4137d0 <memcmp@plt>
               	movq	%r13, %rdi
               	movq	72(%rsp), %r13
               	testl	%eax, %eax
               	je	0x423c50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	testl	%eax, %eax
               	jns	0x423c72 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	jmp	0x423d50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423c72 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423d50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x423cb0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423cb0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	testl	%eax, %eax
               	jns	0x423cd2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	jmp	0x423d8a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423cd2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423d8a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423d10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423d10 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423d3c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	jmp	0x423e4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	nop
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423d3c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423e4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	jmp	0x423e59 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2c9>
               	nop
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423db5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	movq	%r13, %rdx
               	movq	%rdi, %r13
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x4137d0 <memcmp@plt>
               	movq	%r13, %rdi
               	testl	%eax, %eax
               	je	0x423db5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	testl	%eax, %eax
               	jns	0x423dd7 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	jmp	0x423f8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	movq	8(%rsp), %r15
               	jmp	0x423e8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423dd7 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423f8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x423e00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423e00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423e28 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	jmp	0x423e4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423e28 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423e4b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	jmp	0x423e8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	48(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	32(%rsp), %r13
               	jmp	0x423e8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	nop
               	movups	(%r14), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movups	(%r15), %xmm0
               	movups	%xmm0, (%r14)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	movq	64(%rsp), %rbp
               	movq	(%rbp), %rbx
               	movq	8(%rbp), %r12
               	jmp	0x423ec2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x332>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423ef0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x360>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	16(%r14), %r13
               	testl	%eax, %eax
               	jns	0x423ef4 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x364>
               	movq	%r13, %r14
               	movq	(%r13), %rdx
               	movq	%rdx, %rbp
               	subq	%rbx, %rbp
               	cmovaq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423ea0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	movq	8(%r14), %rdi
               	movq	%r12, %rsi
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423eba <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x32a>
               	jmp	0x423ea0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	nopl	(%rax)
               	leaq	16(%r14), %r13
               	addq	$-16, %r15
               	movq	%r15, %rcx
               	jmp	0x423f22 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x392>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423f50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	-16(%r15), %rcx
               	testl	%eax, %eax
               	jns	0x423f50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	movq	%rcx, %r15
               	movq	(%rcx), %rdx
               	movq	%rbx, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423f00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	movq	8(%r15), %rsi
               	movq	%r12, %rdi
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423f1a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x38a>
               	jmp	0x423f00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	cmpq	%r15, %r14
               	jb	0x423e70 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2e0>
               	movq	80(%rsp), %r12
               	addq	$-1, %r12
               	movq	%r14, %rdi
               	movq	8(%rsp), %rsi
               	movq	%r12, %rdx
               	callq	0x423b90 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	movq	%r14, %rbx
               	movq	64(%rsp), %rbp
               	subq	%rbp, %rbx
               	cmpq	$256, %rbx              # imm = 0x100
               	jg	0x423bd0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
               	jmp	0x42405f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	8(%rsp), %r15
               	jmp	0x423e68 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2d8>
               	shrq	$4, %rbx
               	leaq	-2(%rbx), %rax
               	shrq	$63, %rax
               	leaq	(%rbx,%rax), %r14
               	addq	$-2, %r14
               	sarq	%r14
               	movq	%r14, %r15
               	shlq	$4, %r15
               	movq	(%rbp,%r15), %rcx
               	movq	8(%rbp,%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4240f0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	%rbp, %r15
               	addq	$-8, %r15
               	cmpq	$-1, %r14
               	je	0x424023 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x493>
               	nopl	(%rax)
               	movq	-8(%r15), %rcx
               	movq	(%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4240f0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	$-16, %r15
               	cmpq	$-1, %r14
               	jne	0x424000 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x470>
               	movq	8(%rsp), %rbx
               	addq	$-16, %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	8(%rbx), %r8
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rbx)
               	movq	%rbx, %r14
               	subq	%rbp, %r14
               	movq	%r14, %rdx
               	sarq	$4, %rdx
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x4240f0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-16, %rbx
               	cmpq	$16, %r14
               	jg	0x424030 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4a0>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %r15
               	movq	8(%rdi), %r14
               	movl	$2147483648, %r12d      # imm = 0x80000000
               	nopl	(%rax,%rax)
               	movq	-16(%rbx), %rdx
               	movq	%r15, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%r15, %rdx
               	testq	%rdx, %rdx
               	je	0x4240b3 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x43>
               	movq	-8(%rbx), %rsi
               	movq	%r14, %rdi
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x4240c9 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x59>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x4240da <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	cmovlel	%r12d, %ebp
               	movl	%ebp, %eax
               	testl	%eax, %eax
               	jns	0x4240da <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	movups	-16(%rbx), %xmm0
               	movups	%xmm0, (%rbx)
               	addq	$-16, %rbx
               	jmp	0x424090 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x20>
               	movq	%r15, (%rbx)
               	movq	%r14, 8(%rbx)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, 16(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%rdi, %r14
               	leaq	-1(%rdx), %rax
               	shrq	$63, %rax
               	movq	%rdx, 32(%rsp)
               	leaq	(%rdx,%rax), %rbx
               	addq	$-1, %rbx
               	sarq	%rbx
               	movq	%rsi, %r12
               	movq	%rsi, 8(%rsp)
               	cmpq	%rsi, %rbx
               	jle	0x4241ef <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	movq	8(%rsp), %rbp
               	jmp	0x424164 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x74>
               	nop
               	movq	%r13, %r12
               	movq	%r12, %rax
               	shlq	$4, %rax
               	shlq	$4, %rbp
               	movups	(%r14,%rax), %xmm0
               	movups	%xmm0, (%r14,%rbp)
               	movq	%r12, %rbp
               	cmpq	%rbx, %r12
               	jge	0x4241ef <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	leaq	2(,%rbp), %r12
               	addq	%rbp, %r12
               	leaq	1(,%rbp), %r13
               	addq	%rbp, %r13
               	movq	%r12, %rax
               	shlq	$4, %rax
               	movq	(%r14,%rax), %rdx
               	movq	%r13, %rcx
               	shlq	$4, %rcx
               	movq	(%r14,%rcx), %rsi
               	movq	%rdx, %r15
               	subq	%rsi, %r15
               	cmovaq	%rsi, %rdx
               	testq	%rdx, %rdx
               	je	0x4241c0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	movq	8(%r14,%rcx), %rsi
               	movq	8(%r14,%rax), %rdi
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x4241c0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	testl	%eax, %eax
               	js	0x424140 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	jmp	0x4241e7 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf7>
               	nop
               	cmpq	$2147483647, %r15       # imm = 0x7FFFFFFF
               	jg	0x424143 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x53>
               	cmpq	$-2147483648, %r15      # imm = 0x80000000
               	jg	0x4241dc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xec>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	movl	%r15d, %eax
               	testl	%eax, %eax
               	js	0x424140 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	%r12, %r13
               	jmp	0x424140 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	32(%rsp), %rcx
               	testb	$1, %cl
               	jne	0x424230 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	-2(%rcx), %rax
               	shrq	$63, %rax
               	addq	%rcx, %rax
               	addq	$-2, %rax
               	sarq	%rax
               	cmpq	%rax, %r12
               	jne	0x424230 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	(%r12,%r12), %rax
               	addq	$1, %rax
               	movq	%rax, %rcx
               	shlq	$4, %rcx
               	shlq	$4, %r12
               	movups	(%r14,%rcx), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%rax, %r12
               	cmpq	8(%rsp), %r12
               	jle	0x4242cc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leaq	-1(%r12), %rax
               	shrq	$63, %rax
               	leaq	(%r12,%rax), %r13
               	addq	$-1, %r13
               	sarq	%r13
               	movq	%r13, %rbp
               	shlq	$4, %rbp
               	movq	(%r14,%rbp), %rdx
               	movq	%rdx, %rbx
               	movq	24(%rsp), %rax
               	subq	%rax, %rbx
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x424296 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1a6>
               	movq	8(%r14,%rbp), %rdi
               	movq	16(%rsp), %rsi
               	callq	0x4137d0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x4242ac <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1bc>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x4242cc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	cmovlel	%r15d, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	jns	0x4242cc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	addq	%r14, %rbp
               	shlq	$4, %r12
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%r13, %r12
               	cmpq	8(%rsp), %r13
               	jg	0x424250 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x160>
               	jmp	0x4242cf <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1df>
               	movq	%r12, %r13
               	shlq	$4, %r13
               	movq	24(%rsp), %rax
               	movq	%rax, (%r14,%r13)
               	movq	16(%rsp), %rax
               	movq	%rax, 8(%r14,%r13)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	352(%rdi), %r14
               	testq	%r14, %r14
               	je	0x424323 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)+0x23>
               	movq	%r14, %rdi
               	callq	0x424300 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	addq	$8, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424350 <kotlin::mm::ThreadData::~ThreadData()>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadData::~ThreadData()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	movq	296(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x424369 <kotlin::mm::ThreadData::~ThreadData()+0x19>
               	callq	0x413730 <free@plt>
               	leaq	288(%r15), %rdi
               	callq	0x427e20 <kotlin::gc::GC::ThreadData::~ThreadData()>
               	leaq	224(%r15), %rdi
               	callq	0x424500 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	leaq	256(%r15), %r14
               	movq	256(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4243b0 <kotlin::mm::ThreadData::~ThreadData()+0x60>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430410 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4243a0 <kotlin::mm::ThreadData::~ThreadData()+0x50>
               	leaq	232(%r15), %r14
               	movq	232(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4243e0 <kotlin::mm::ThreadData::~ThreadData()+0x90>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430410 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4243d0 <kotlin::mm::ThreadData::~ThreadData()+0x80>
               	leaq	168(%r15), %rdi
               	callq	0x4245c0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	200(%r15), %r14
               	movq	200(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424410 <kotlin::mm::ThreadData::~ThreadData()+0xc0>
               	nop
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424400 <kotlin::mm::ThreadData::~ThreadData()+0xb0>
               	leaq	176(%r15), %r14
               	movq	176(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424440 <kotlin::mm::ThreadData::~ThreadData()+0xf0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424430 <kotlin::mm::ThreadData::~ThreadData()+0xe0>
               	leaq	104(%r15), %r14
               	movq	104(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x424460 <kotlin::mm::ThreadData::~ThreadData()+0x110>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x424450 <kotlin::mm::ThreadData::~ThreadData()+0x100>
               	movq	88(%r15), %rdi
               	movq	96(%r15), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	88(%r15), %rdi
               	leaq	136(%r15), %rax
               	cmpq	%rdi, %rax
               	je	0x42448f <kotlin::mm::ThreadData::~ThreadData()+0x13f>
               	callq	0x413730 <free@plt>
               	movq	64(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x42449d <kotlin::mm::ThreadData::~ThreadData()+0x14d>
               	callq	0x413730 <free@plt>
               	leaq	8(%r15), %rdi
               	callq	0x424680 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	40(%r15), %r14
               	movq	40(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4244d0 <kotlin::mm::ThreadData::~ThreadData()+0x180>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4244c0 <kotlin::mm::ThreadData::~ThreadData()+0x170>
               	movq	16(%r15), %rdi
               	addq	$16, %r15
               	cmpq	%r15, %rdi
               	je	0x4244f0 <kotlin::mm::ThreadData::~ThreadData()+0x1a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r15, %rbx
               	jne	0x4244e0 <kotlin::mm::ThreadData::~ThreadData()+0x190>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42452e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 48(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x424520 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424550 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x50>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424540 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42457a <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x7a>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x4245a0 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0xa0>
               	leaq	24(%r15), %rdi
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4245ee <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4245e0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424610 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x50>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424600 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42463a <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x7a>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424660 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0xa0>
               	leaq	24(%r15), %rdi
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4246ae <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4246a0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x4246d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x50>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x4246c0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x4246fa <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x7a>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424720 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0xa0>
               	leaq	24(%r15), %rdi
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movb	251456(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x424824 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	%rdi, %r14
               	movq	8(%rdi), %rax
               	movq	288(%rax), %rdi
               	addq	$72, %rdi
               	callq	0x4250c0 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>
               	leaq	251378(%rip), %rax      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	movq	%rax, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 239664(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42479e <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0x5e>
               	leaq	251351(%rip), %rdi      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42482f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xef>
               	movb	$1, 16(%rsp)
               	callq	0x4357a0 <konan::gettid()>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movb	16(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 16(%r14)
               	andb	$1, %bpl
               	movb	251343(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4247f6 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xb6>
               	leaq	247408(%rip), %r15      # 0x460e40 <(anonymous namespace)::gSuspensionCondVar>
               	leaq	8(%rsp), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43c770 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	251294(%rip), %eax      # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x4247e0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xa0>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	xchgb	%bpl, 16(%r14)
               	cmpb	$0, 16(%rsp)
               	je	0x424824 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424824 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	cmpq	$0, 239520(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42481f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xdf>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nop

<kotlin::mm::RequestThreadsSuspension()>:
               	pushq	%rbx
               	cmpq	$0, 239471(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42485b <kotlin::mm::RequestThreadsSuspension()+0x1b>
               	leaq	251158(%rip), %rdi      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424884 <kotlin::mm::RequestThreadsSuspension()+0x44>
               	movb	$1, %cl
               	xorl	%eax, %eax
               	lock
               	cmpxchgb	%cl, 251177(%rip)       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	sete	%bl
               	cmpq	$0, 239430(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x424880 <kotlin::mm::RequestThreadsSuspension()+0x40>
               	leaq	251117(%rip), %rdi      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	168(%rdi), %rax
               	movq	8(%rsi), %rcx
               	cmpq	%rcx, %rax
               	je	0x4248ee <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)+0x4e>
               	leaq	200(%rbx), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c174 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 216(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%r14), %r14
               	addq	$-1, 192(%rbx)
               	movq	%r14, %rdi
               	callq	0x43c18c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413730 <free@plt>
               	nop

<kotlin::mm::SuspendIfRequestedSlowPath()>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movl	$328, %edi              # imm = 0x148
               	addq	-64(%rax), %rdi
               	popq	%rax
               	jmp	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nop

<ExceptionObjHolder::Throw(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movl	$16, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	0x424970 <(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>
               	leaq	233242(%rip), %rsi      # 0x45d870 <typeinfo for (anonymous namespace)::ExceptionObjHolderImpl>
               	leaq	163(%rip), %rdx         # 0x424a00 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	leaq	233234(%rip), %rax      # 0x45d898 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	176(%rbx), %r13
               	leaq	184(%rbx), %r15
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c174 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 200(%rbx)
               	movq	192(%rbx), %rax
               	leaq	16(%rax), %rcx
               	movq	%rax, 32(%rax)
               	movq	%rcx, 8(%r12)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	233097(%rip), %rax      # 0x45d898 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	leaq	176(%r14), %rax
               	movq	8(%rbx), %rbx
               	movq	8(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x424a6c <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()+0x6c>
               	leaq	208(%r14), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rbx, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c174 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 224(%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%rbx), %rbx
               	addq	$-1, 200(%r14)
               	movq	%rbx, %rdi
               	callq	0x43c18c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413730 <free@plt>
               	nopl	(%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x424a00 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>
               	nopw	%cs:(%rax,%rax)

<InitAndRegisterGlobal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	16(%rbx), %r13
               	leaq	24(%rbx), %r12
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%r15, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x43c174 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 40(%rbx)
               	movq	32(%rbx), %rax
               	movq	%rax, 32(%rax)
               	testq	%r14, %r14
               	je	0x424b11 <InitAndRegisterGlobal+0x61>
               	movq	%r14, (%r15)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<AddTLSRecord>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, (%rsp)
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	104(%rdi), %rbp
               	movq	%rsi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424b5f <AddTLSRecord+0x3f>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rbx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424b75 <AddTLSRecord+0x55>
               	jmp	0x424bd4 <AddTLSRecord+0xb4>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ebx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424bd4 <AddTLSRecord+0xb4>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x424bcb <AddTLSRecord+0xab>
               	nop
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x424bd4 <AddTLSRecord+0xb4>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424bb0 <AddTLSRecord+0x90>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x424bbb <AddTLSRecord+0x9b>
               	jmp	0x424bd4 <AddTLSRecord+0xb4>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x424bd4 <AddTLSRecord+0xb4>
               	cmpq	%rcx, %r13
               	jne	0x424b80 <AddTLSRecord+0x60>
               	testq	%rdi, %rdi
               	jne	0x424e5c <AddTLSRecord+0x33c>
               	jmp	0x424bd4 <AddTLSRecord+0xb4>
               	testq	%rsi, %rsi
               	jne	0x424e5c <AddTLSRecord+0x33c>
               	movl	156(%r15), %r12d
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rcx
               	movq	%r13, 8(%rax)
               	movq	(%rsp), %rax
               	shlq	$32, %rax
               	orq	%r12, %rax
               	movq	%rcx, %r12
               	movq	%rax, 16(%rcx)
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424c69 <AddTLSRecord+0x149>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x424d6a <AddTLSRecord+0x24a>
               	nopl	(%rax)
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x424c69 <AddTLSRecord+0x149>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424c50 <AddTLSRecord+0x130>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x424c5b <AddTLSRecord+0x13b>
               	jmp	0x424c69 <AddTLSRecord+0x149>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x424c69 <AddTLSRecord+0x149>
               	cmpq	%rcx, %r13
               	jne	0x424c20 <AddTLSRecord+0x100>
               	testq	%rdi, %rdi
               	jne	0x424d73 <AddTLSRecord+0x253>
               	leaq	128(%r15), %rdi
               	movq	120(%r15), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rsi
               	callq	0x43ccaa <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x424c9c <AddTLSRecord+0x17c>
               	movq	96(%r15), %rbp
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424de5 <AddTLSRecord+0x2c5>
               	jmp	0x424e0a <AddTLSRecord+0x2ea>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	je	0x424d80 <AddTLSRecord+0x260>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	je	0x424da7 <AddTLSRecord+0x287>
               	leaq	112(%r15), %rsi
               	xorl	%edi, %edi
               	jmp	0x424d0d <AddTLSRecord+0x1ed>
               	nopl	(%rax,%rax)
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x424da7 <AddTLSRecord+0x287>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x424d40 <AddTLSRecord+0x220>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424cf0 <AddTLSRecord+0x1d0>
               	jmp	0x424d4f <AddTLSRecord+0x22f>
               	nop
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424cf0 <AddTLSRecord+0x1d0>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x424d01 <AddTLSRecord+0x1e1>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x424d01 <AddTLSRecord+0x1e1>
               	testq	%rsi, %rsi
               	je	0x424c69 <AddTLSRecord+0x149>
               	movq	%r12, %rdi
               	callq	0x413730 <free@plt>
               	jmp	0x424e51 <AddTLSRecord+0x331>
               	leaq	144(%r15), %rbp
               	movq	$0, 144(%r15)
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	jne	0x424ce0 <AddTLSRecord+0x1c0>
               	movq	96(%r15), %rdi
               	leaq	144(%r15), %rax
               	cmpq	%rax, %rdi
               	je	0x424dbc <AddTLSRecord+0x29c>
               	callq	0x413730 <free@plt>
               	movq	%r14, 104(%r15)
               	movq	%rbp, 96(%r15)
               	movq	%r13, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x424df6 <AddTLSRecord+0x2d6>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424e0a <AddTLSRecord+0x2ea>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rbx,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x424e4c <AddTLSRecord+0x32c>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424de5 <AddTLSRecord+0x2c5>
               	leaq	112(%r15), %rcx
               	movq	112(%r15), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 112(%r15)
               	testq	%rax, %rax
               	je	0x424e47 <AddTLSRecord+0x327>
               	movq	104(%r15), %rsi
               	movq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x424e3a <AddTLSRecord+0x31a>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x424e3e <AddTLSRecord+0x31e>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	96(%r15), %rbp
               	movq	%rcx, (%rbp,%rbx,8)
               	addq	$1, 120(%r15)
               	movq	(%rsp), %rax
               	addl	%eax, 156(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<LookupTLS>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edi, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r9
               	leaq	244839(%rip), %r8       # 0x460b08 <__KonanTlsKey>
               	cmpq	%r8, 160(%r9)
               	je	0x424edb <LookupTLS+0x5b>
               	movq	104(%r9), %rbx
               	movq	%r8, %rax
               	orq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x424ee7 <LookupTLS+0x67>
               	leaq	244807(%rip), %rax      # 0x460b08 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rdx, %rcx
               	movq	96(%r9), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x424f01 <LookupTLS+0x81>
               	jmp	0x424f5c <LookupTLS+0xdc>
               	addl	168(%r9), %r14d
               	jmp	0x424f78 <LookupTLS+0xf8>
               	leaq	244762(%rip), %rax      # 0x460b08 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%edx, %ecx
               	movq	96(%r9), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x424f5c <LookupTLS+0xdc>
               	movq	(%rax), %rbp
               	cmpq	%r8, 8(%rbp)
               	je	0x424f57 <LookupTLS+0xd7>
               	nop
               	movq	%rbp, %rdi
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x424f5c <LookupTLS+0xdc>
               	movq	8(%rbp), %rsi
               	movq	%rsi, %rax
               	orq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x424f40 <LookupTLS+0xc0>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rbx
               	cmpq	%rcx, %rdx
               	je	0x424f4b <LookupTLS+0xcb>
               	jmp	0x424f5c <LookupTLS+0xdc>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ebx
               	cmpq	%rcx, %rdx
               	jne	0x424f5c <LookupTLS+0xdc>
               	cmpq	%r8, %rsi
               	jne	0x424f10 <LookupTLS+0x90>
               	testq	%rdi, %rdi
               	jne	0x424f5e <LookupTLS+0xde>
               	jmp	0x424f5c <LookupTLS+0xdc>
               	testq	%rbp, %rbp
               	jne	0x424f5e <LookupTLS+0xde>
               	xorl	%ebp, %ebp
               	movq	8(%rbp), %rax
               	movq	%rax, 160(%r9)
               	movq	16(%rbp), %rax
               	movq	%rax, 168(%r9)
               	addl	16(%rbp), %r14d
               	movslq	%r14d, %rax
               	shlq	$3, %rax
               	addq	72(%r9), %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<Kotlin_processObjectInMark>:
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %r8
               	movl	40(%r8), %r9d
               	testl	%r9d, %r9d
               	jle	0x424fee <Kotlin_processObjectInMark+0x5e>
               	xorl	%edx, %edx
               	jmp	0x424fc0 <Kotlin_processObjectInMark+0x30>
               	nop
               	movl	40(%r8), %r9d
               	addq	$1, %rdx
               	movslq	%r9d, %rax
               	cmpq	%rax, %rdx
               	jge	0x424fee <Kotlin_processObjectInMark+0x5e>
               	movq	32(%r8), %rcx
               	movslq	(%rcx,%rdx,4), %rcx
               	movq	(%rcx,%rsi), %rcx
               	testq	%rcx, %rcx
               	je	0x424fb4 <Kotlin_processObjectInMark+0x24>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424fb4 <Kotlin_processObjectInMark+0x24>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424fb0 <Kotlin_processObjectInMark+0x20>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	jmp	0x424fb0 <Kotlin_processObjectInMark+0x20>
               	retq
               	nop

<Kotlin_processArrayInMark>:
               	movslq	8(%rsi), %rdx
               	testq	%rdx, %rdx
               	je	0x4250a6 <Kotlin_processArrayInMark+0xb6>
               	leaq	16(%rsi), %rcx
               	leaq	-8(,%rdx,8), %r8
               	testb	$8, %r8b
               	jne	0x425036 <Kotlin_processArrayInMark+0x46>
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x425032 <Kotlin_processArrayInMark+0x42>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x425032 <Kotlin_processArrayInMark+0x42>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x425032 <Kotlin_processArrayInMark+0x42>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	leaq	24(%rsi), %rcx
               	testq	%r8, %r8
               	je	0x4250a6 <Kotlin_processArrayInMark+0xb6>
               	leaq	(%rsi,%rdx,8), %r8
               	addq	$16, %r8
               	jmp	0x425059 <Kotlin_processArrayInMark+0x69>
               	nopl	(%rax)
               	addq	$16, %rcx
               	cmpq	%r8, %rcx
               	je	0x4250a6 <Kotlin_processArrayInMark+0xb6>
               	movq	(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x425080 <Kotlin_processArrayInMark+0x90>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x425080 <Kotlin_processArrayInMark+0x90>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x425080 <Kotlin_processArrayInMark+0x90>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movq	8(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x425050 <Kotlin_processArrayInMark+0x60>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x425050 <Kotlin_processArrayInMark+0x60>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x425050 <Kotlin_processArrayInMark+0x60>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	jmp	0x425050 <Kotlin_processArrayInMark+0x60>
               	retq
               	nopw	(%rax,%rax)

<Kotlin_processEmptyObjectInMark>:
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %r14
               	leaq	249076(%rip), %rax      # 0x461dc8 <(anonymous namespace)::markingMutex>
               	movq	%rax, (%rsp)
               	movb	$0, 8(%rsp)
               	cmpq	$0, 237267(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4250fb <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x3b>
               	leaq	249050(%rip), %rdi      # 0x461dc8 <(anonymous namespace)::markingMutex>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425217 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x157>
               	movb	$1, 8(%rsp)
               	movb	249066(%rip), %al       # 0x461df0 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x4251e8 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x128>
               	movb	24(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 24(%r14)
               	movq	8(%r14), %rbx
               	leaq	8(%rbx), %rdi
               	callq	0x424680 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	168(%rbx), %rdi
               	callq	0x4245c0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	224(%rbx), %rdi
               	callq	0x424500 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	288(%rbx), %rdi
               	addq	$112, %rdi
               	callq	0x425b80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movb	248989(%rip), %al       # 0x461df0 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x425186 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xc6>
               	leaq	248886(%rip), %r15      # 0x461d98 <(anonymous namespace)::markingCondVar>
               	movq	%rsp, %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43c770 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	248942(%rip), %eax      # 0x461df0 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	jne	0x425170 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xb0>
               	andb	$1, %bpl
               	cmpb	$0, 8(%rsp)
               	je	0x42521e <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x15e>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4251b2 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xf2>
               	cmpq	$0, 237074(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4251ad <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xed>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	248903(%rip), %rbx      # 0x461e00 <(anonymous namespace)::markingEpoch (.0)>
               	leaq	248888(%rip), %rax      # 0x461df8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 16(%rsp)
               	movq	8(%r14), %rdx
               	leaq	16(%rsp), %r15
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x4257a0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425c50 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	xchgb	%bpl, 24(%r14)
               	cmpb	$0, 8(%rsp)
               	je	0x42520c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42520c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	cmpq	$0, 236984(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x425207 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x147>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movl	$1, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	xchgb	%bpl, 24(%r14)
               	movq	%rax, %rbx
               	cmpb	$0, 8(%rsp)
               	je	0x425253 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x425253 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	cmpq	$0, 236913(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42524e <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x18e>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	cmpq	$0, 236844(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4252a2 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x32>
               	leaq	248627(%rip), %rdi      # 0x461dc8 <(anonymous namespace)::markingMutex>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425771 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x501>
               	xorl	%eax, %eax
               	xchgb	%al, 248646(%rip)       # 0x461df0 <(anonymous namespace)::markingRequested (.0.0)>
               	leaq	248647(%rip), %rax      # 0x461df8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 336(%r15)
               	cmpq	$0, 236792(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4252d6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x66>
               	leaq	244367(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425778 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x508>
               	addq	$336, %r15              # imm = 0x150
               	movq	244324(%rip), %rbp      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	jmp	0x4252f7 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x87>
               	nopl	(%rax)
               	movq	352(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x425350 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xe0>
               	movq	296(%rbp), %rax
               	movzbl	96(%rax), %eax
               	testb	$1, %al
               	jne	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	leaq	8(%rbp), %rbx
               	leaq	16(%rbp), %rdi
               	callq	0x424680 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	176(%rbp), %rdi
               	callq	0x4245c0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	232(%rbp), %rdi
               	callq	0x424500 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	callq	0x425b80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x4257a0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	jmp	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	cmpq	$0, 236640(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x425366 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xf6>
               	leaq	244215(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movb	$1, %al
               	xchgb	%al, 244357(%rip)       # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	je	0x425391 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x121>
               	nopl	(%rax,%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 244331(%rip)       # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x425380 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x110>
               	leaq	8(%rsp), %r12
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	244272(%rip), %rbp      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	leaq	244265(%rip), %r13      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rbp
               	je	0x425450 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1e0>
               	movq	%rbp, %rsi
               	jmp	0x4253f4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x184>
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rbx
               	addq	$-1, 244220(%rip)       # 0x460dd8 <kotlin::mm::GlobalData::instance_+0xa8>
               	movq	%rbx, %rdi
               	callq	0x43c18c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rsi
               	cmpq	%r13, %rbp
               	je	0x42542a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1ba>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4253d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x160>
               	cmpq	%rsi, %r12
               	je	0x4253ec <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
               	movq	(%rsi), %rdx
               	cmpq	%r12, %rdx
               	je	0x4253ec <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
               	movq	%r12, %rdi
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	addq	$1, 24(%rsp)
               	addq	$-1, 244168(%rip)       # 0x460df0 <kotlin::mm::GlobalData::instance_+0xc0>
               	jmp	0x4253ec <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
               	movq	244143(%rip), %rdi      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rdi
               	je	0x425450 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1e0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r13, %rbx
               	jne	0x425440 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1d0>
               	movq	8(%rsp), %rax
               	cmpq	%r12, %rax
               	je	0x425495 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x225>
               	movq	%rax, 244095(%rip)      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	16(%rsp), %rax
               	movq	%rax, 244091(%rip)      # 0x460de8 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, (%rax)
               	movq	244073(%rip), %rax      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%r13, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x4254a5 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x235>
               	movq	%r13, 244044(%rip)      # 0x460de8 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, 244029(%rip)      # 0x460de0 <kotlin::mm::GlobalData::instance_+0xb0>
               	xorl	%eax, %eax
               	movq	%rax, 244036(%rip)      # 0x460df0 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 244037(%rip)        # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$1, %bl
               	movb	$1, %al
               	xchgb	%al, 243971(%rip)       # 0x460dc0 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	je	0x4254e1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x271>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 243939(%rip)       # 0x460dc0 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	jne	0x4254d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x260>
               	xchgb	%bl, 243985(%rip)       # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%bl, %bl
               	je	0x425501 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x291>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 243963(%rip)       # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x4254f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x280>
               	movq	243848(%rip), %rsi      # 0x460d90 <kotlin::mm::GlobalData::instance_+0x60>
               	xorl	%eax, %eax
               	movq	243895(%rip), %rdx      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	243888(%rip), %r12      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	243825(%rip), %r13      # 0x460d90 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rsi, %rbx
               	movl	%eax, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %ecx
               	je	0x425562 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2f2>
               	cmpl	$1, %ecx
               	je	0x425540 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2d0>
               	testl	%ecx, %ecx
               	jne	0x425530 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2c0>
               	jmp	0x425550 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x425530 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2c0>
               	jmp	0x425644 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3d4>
               	nop
               	movl	$1, %eax
               	movq	%rdx, %rsi
               	cmpq	%r13, %rbx
               	je	0x42551f <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2af>
               	jmp	0x425646 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3d6>
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 32(%rsp)
               	movb	$0, 243845(%rip)        # 0x460df8 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$0, 243782(%rip)        # 0x460dc0 <kotlin::mm::GlobalData::instance_+0x90>
               	movb	$1, %al
               	xchgb	%al, 243112(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4255a1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x331>
               	nopw	(%rax,%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 243085(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425590 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x320>
               	cmpb	$0, 243088(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x4255ca <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x35a>
               	cmpq	%r14, 243071(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	jne	0x4255ca <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x35a>
               	leaq	243062(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpb	$0, 128(%rax)
               	je	0x4255ec <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37c>
               	movupd	112(%rax), %xmm0
               	jmp	0x425601 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x391>
               	cmpb	$0, 243303(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x42560c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	cmpq	%r14, 243286(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x42560c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	leaq	243277(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	cmpb	$0, 128(%rax)
               	jne	0x4255c3 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x353>
               	xorpd	%xmm0, %xmm0
               	movupd	%xmm0, 112(%rax)
               	movupd	%xmm0, 96(%rax)
               	movb	$1, 128(%rax)
               	paddq	32(%rsp), %xmm0
               	movdqu	%xmm0, 112(%rax)
               	movb	$0, 242967(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	leaq	247678(%rip), %rdi      # 0x461d98 <(anonymous namespace)::markingCondVar>
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	cmpq	$0, 235921(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x425635 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3c5>
               	leaq	247704(%rip), %rdi      # 0x461dc8 <(anonymous namespace)::markingMutex>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %ecx
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%ecx, %ecx
               	je	0x4256e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x470>
               	cmpl	$1, %ecx
               	jne	0x42577f <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x50f>
               	movq	16(%rbx), %rsi
               	movq	%r15, %rdi
               	callq	0x425b30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425694 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x424>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	movq	(%rbx), %rdx
               	movq	243498(%rip), %rax      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rdx, %rbx
               	movl	$1, %ecx
               	nopw	%cs:(%rax,%rax)
               	cmpl	$2, %ecx
               	je	0x42556c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2fc>
               	cmpl	$1, %ecx
               	je	0x4256c4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x454>
               	testl	%ecx, %ecx
               	jne	0x4256b0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x440>
               	jmp	0x4256d3 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x463>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x4256b0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x440>
               	jmp	0x425767 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4f7>
               	movq	%rax, %rdx
               	cmpq	%r13, %rbx
               	je	0x42569e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x42e>
               	jmp	0x425650 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movq	16(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425b30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425711 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4a1>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	movq	(%rbx), %rsi
               	xorl	%ecx, %ecx
               	movq	243371(%rip), %rax      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rsi, %rbx
               	movl	%ecx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpl	$2, %edx
               	je	0x42556c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2fc>
               	cmpl	$1, %edx
               	je	0x425744 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4d4>
               	testl	%edx, %edx
               	jne	0x425730 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c0>
               	jmp	0x425753 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e3>
               	movl	$2, %edx
               	cmpq	%r12, %rbx
               	je	0x425730 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c0>
               	jmp	0x425650 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movl	$1, %ecx
               	movq	%rax, %rsi
               	cmpq	%r13, %rbx
               	je	0x42571d <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4ad>
               	movl	%edx, %ecx
               	jmp	0x425650 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movl	$1, %ecx
               	jmp	0x425650 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	leaq	125400(%rip), %rdx      # 0x44415e <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435880 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nop

<void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r12
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	288(%r12), %rax
               	movq	$0, 40(%rax)
               	movq	$0, 56(%rax)
               	movq	(%rax), %rcx
               	movq	8(%rcx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%rax), %rcx
               	movl	(%rcx), %ecx
               	movslq	%ecx, %rcx
               	movq	%rcx, 64(%rax)
               	movq	280(%r12), %rdx
               	xorl	%ecx, %ecx
               	testq	%rdx, %rdx
               	je	0x425867 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xc7>
               	movslq	16(%rdx), %rax
               	leaq	(%rdx,%rax,8), %rsi
               	leaq	(,%rax,8), %rdi
               	movslq	20(%rdx), %rbp
               	leaq	(%rsi,%rbp,8), %rbx
               	addq	$24, %rbx
               	subq	%rdi, %rbx
               	addq	$-24, %rbx
               	leaq	(%rdx,%rax,8), %r13
               	addq	$24, %r13
               	testq	%rdx, %rdx
               	je	0x425875 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	nop
               	cmpq	%rbx, %r13
               	jb	0x425875 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	movq	8(%rdx), %rdx
               	testq	%rdx, %rdx
               	je	0x42586e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xce>
               	movslq	16(%rdx), %rax
               	leaq	(%rdx,%rax,8), %r13
               	addq	$24, %r13
               	shlq	$3, %rax
               	movslq	20(%rdx), %rsi
               	leaq	-24(,%rsi,8), %rbx
               	addq	%r13, %rbx
               	subq	%rax, %rbx
               	cmpq	%rbx, %r13
               	jae	0x425835 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x95>
               	jmp	0x425875 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	jmp	0x425875 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	xorl	%edx, %edx
               	movq	64(%r12), %rsi
               	movq	72(%r12), %rdi
               	movl	%ecx, %eax
               	movq	%rdx, %rbp
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x425a65 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2c5>
               	cmpl	$1, %eax
               	je	0x4258c0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x120>
               	testl	%eax, %eax
               	jne	0x425890 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf0>
               	testq	%rbp, %rbp
               	jne	0x4258cd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x12d>
               	movl	$1, %ecx
               	movq	%rsi, %rdx
               	testq	%r13, %r13
               	je	0x42587f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xdf>
               	jmp	0x4258cd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x12d>
               	nopl	(%rax)
               	movl	$2, %ecx
               	movq	%rbp, %rdx
               	cmpq	%rbp, %rdi
               	je	0x42587f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xdf>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	testl	%eax, %eax
               	je	0x42597c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1dc>
               	cmpl	$1, %eax
               	jne	0x425b11 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x371>
               	movq	(%rbp), %rsi
               	movq	%r15, %rdi
               	callq	0x425b30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425918 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x178>
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, (%rsp)
               	addq	$8, %rbp
               	movq	64(%r12), %rcx
               	movq	72(%r12), %rdx
               	movq	%rbp, %rdi
               	movq	%rbp, %rsi
               	movq	%rdi, %rbp
               	movl	$1, %eax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x425a75 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
               	cmpl	$1, %eax
               	je	0x425954 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1b4>
               	testl	%eax, %eax
               	jne	0x425940 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1a0>
               	jmp	0x425963 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1c3>
               	movl	$2, %eax
               	cmpq	%rdx, %rsi
               	je	0x425940 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1a0>
               	jmp	0x425a5b <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2bb>
               	testq	%rbp, %rbp
               	jne	0x4258d6 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movq	%rcx, %rdi
               	movq	%rcx, %rsi
               	testq	%r13, %r13
               	je	0x42592c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x18c>
               	jmp	0x4258d6 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movq	(%r13), %rsi
               	movq	%r15, %rdi
               	callq	0x425b30 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4259a8 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x208>
               	movdqa	(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, (%rsp)
               	addq	$8, %r13
               	testq	%rbp, %rbp
               	je	0x425a01 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rbx, %r13
               	jb	0x425a01 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x4259fa <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x25a>
               	movslq	16(%rbp), %rax
               	leaq	24(,%rax,8), %r13
               	addq	%rbp, %r13
               	shlq	$3, %rax
               	movslq	20(%rbp), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%r13, %rbx
               	subq	%rax, %rbx
               	cmpq	%rbx, %r13
               	jae	0x4259c5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x225>
               	jmp	0x425a01 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
               	xorl	%r13d, %r13d
               	xorl	%ebx, %ebx
               	xorl	%ebp, %ebp
               	movq	64(%r12), %rcx
               	movq	72(%r12), %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	movl	%esi, %eax
               	movq	%rdi, %rbp
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x425a75 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
               	cmpl	$1, %eax
               	je	0x425a49 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2a9>
               	testl	%eax, %eax
               	jne	0x425a20 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x280>
               	testq	%rbp, %rbp
               	jne	0x4258d6 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movl	$1, %esi
               	movq	%rcx, %rdi
               	testq	%r13, %r13
               	je	0x425a10 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	jmp	0x4258d6 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movl	$2, %esi
               	movq	%rbp, %rdi
               	cmpq	%rbp, %rdx
               	je	0x425a10 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	jmp	0x4258d6 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movl	$1, %eax
               	jmp	0x4258d6 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	jmp	0x425a75 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 241837(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425a70 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d0>
               	cmpb	$0, 241840(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x425ab3 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x313>
               	cmpq	%r14, 241823(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	jne	0x425ab3 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x313>
               	leaq	241814(%rip), %rcx      # 0x460b30 <(anonymous namespace)::current>
               	pshufd	$78, (%rsp), %xmm0      # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	je	0x425adf <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x33f>
               	movdqu	(%rax), %xmm1
               	jmp	0x425af3 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x353>
               	cmpb	$0, 242046(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x425afb <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x35b>
               	cmpq	%r14, 242029(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x425afb <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x35b>
               	leaq	242020(%rip), %rcx      # 0x460c30 <(anonymous namespace)::last>
               	pshufd	$78, (%rsp), %xmm0      # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	jne	0x425aad <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x30d>
               	pxor	%xmm1, %xmm1
               	movdqu	%xmm1, 16(%rax)
               	movdqu	%xmm1, (%rax)
               	movb	$1, 128(%rcx)
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, (%rax)
               	movb	$0, 241704(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	124486(%rip), %rdx      # 0x44415e <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435880 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>:
               	pushq	%rbx
               	cmpq	$2, %rsi
               	jae	0x425b3d <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0xd>
               	xorl	%ebx, %ebx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	(%rsi), %rax
               	testb	$3, %al
               	je	0x425b55 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x25>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movb	$1, %bl
               	callq	*104(%rax)
               	jmp	0x425b39 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	movq	(%rdi), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	movb	$1, %bl
               	jne	0x425b39 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	cmpq	$0, 24(%rdi)
               	je	0x425c17 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x97>
               	movq	%rdi, %r15
               	movq	(%rdi), %rbx
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	je	0x425bae <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x2e>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	jne	0x425ba0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x20>
               	movq	(%r15), %rax
               	cmpq	$0, (%rax)
               	je	0x425bbb <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x3b>
               	movq	8(%rax), %rax
               	movq	24(%r15), %rcx
               	movq	$0, 24(%r15)
               	movq	(%rax), %r14
               	movq	%rcx, (%rax)
               	testq	%r14, %r14
               	je	0x425be2 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x62>
               	movq	%r14, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430410 <mi_free>
               	movq	(%r15), %rax
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%rax)
               	movq	$0, 32(%r15)
               	movdqu	40(%r15), %xmm0
               	movdqu	16(%rax), %xmm1
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, 16(%rax)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 40(%r15)
               	movb	$0, 32(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x425c3f <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()+0x1f>
               	movq	%rbx, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, 16(%rsp)
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	(%r15), %rax
               	leaq	246147(%rip), %r12      # 0x461df8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	pxor	%xmm1, %xmm1
               	jmp	0x425cc3 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
               	movl	%ebx, %ebx
               	addq	$15, %rbx
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*104(%rax)
               	andq	$-8, %rbx
               	addq	$15, %rbx
               	andq	$-8, %rbx
               	addq	%rbx, %r14
               	movq	%r14, %xmm0
               	addq	$2, %r13
               	movq	%r13, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	(%r15), %rax
               	cmpq	%r12, %rax
               	je	0x425dc5 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x175>
               	movq	(%rax), %rcx
               	movq	%rcx, (%r15)
               	testq	%rax, %rax
               	je	0x425dc5 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x175>
               	leaq	8(%rax), %rbx
               	movq	8(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movslq	20(%rcx), %rbp
               	testq	%rbp, %rbp
               	movdqa	%xmm1, (%rsp)
               	js	0x425d00 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
               	movl	%ebp, %ebp
               	addq	$15, %rbp
               	jmp	0x425d12 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc2>
               	addq	$-8, %rax
               	movl	24(%rax), %eax
               	negq	%rbp
               	imulq	%rax, %rbp
               	addq	$31, %rbp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	*104(%rax)
               	andq	$-8, %rbp
               	addq	$15, %rbp
               	andq	$-8, %rbp
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %r14
               	addq	%rbp, %r14
               	movq	%r14, %xmm0
               	movq	%xmm1, %r13
               	leaq	1(%r13), %rax
               	movq	%rax, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	je	0x425cc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	cmpq	%rax, (%rax)
               	je	0x425cc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	16(%rax), %rsi
               	testb	$1, %sil
               	je	0x425cc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	andq	$-2, %rsi
               	je	0x425cc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	xorl	%eax, %eax
               	movl	$1, %ecx
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	jne	0x425cc0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movslq	20(%rax), %rbx
               	testq	%rbx, %rbx
               	jns	0x425c7b <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
               	movl	8(%rsi), %eax
               	negq	%rbx
               	imulq	%rax, %rbx
               	addq	$31, %rbx
               	jmp	0x425c81 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x31>
               	movdqa	%xmm1, (%rsp)
               	movb	$1, %al
               	xchgb	%al, 240984(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425df1 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
               	nopw	(%rax,%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 240957(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425de0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x190>
               	cmpb	$0, 240960(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	movq	16(%rsp), %rax
               	je	0x425e2a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	cmpq	%rax, 240938(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	jne	0x425e2a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	leaq	240929(%rip), %rcx      # 0x460b30 <(anonymous namespace)::current>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	je	0x425e58 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x208>
               	movdqu	(%rax), %xmm0
               	jmp	0x425e67 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x217>
               	cmpb	$0, 241159(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x425e6f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	cmpq	%rax, 241142(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x425e6f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	leaq	241133(%rip), %rcx      # 0x460c30 <(anonymous namespace)::last>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	jne	0x425e24 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1d4>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$1, 152(%rcx)
               	paddq	%xmm1, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$0, 240820(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::schedule()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	cmpq	$0, 233737(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x425ebd <GCStateHolder::schedule()+0x1d>
               	movq	%rbx, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425f08 <GCStateHolder::schedule()+0x68>
               	movq	40(%rbx), %rax
               	movq	168(%rbx), %r14
               	cmpq	%rax, %r14
               	jg	0x425eeb <GCStateHolder::schedule()+0x4b>
               	addq	$1, %rax
               	movq	%rax, 168(%rbx)
               	leaq	184(%rbx), %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	movq	168(%rbx), %r14
               	cmpq	$0, 233669(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x425efd <GCStateHolder::schedule()+0x5d>
               	movq	%rbx, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	nop

<kotlin::ThreadStateGuard::~ThreadStateGuard()>:
               	testq	%rdi, %rdi
               	je	0x425f30 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
               	movl	%esi, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%esi, %esi
               	jne	0x425f30 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
               	cmpl	$1, %eax
               	jne	0x425f30 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
               	movb	245348(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x425f31 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x21>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425f57 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425f60 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425f5d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	227811(%rip), %rax      # 0x45d938 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>
               	jmp	0x425f5a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>:
               	pushq	%rbx
               	movq	(%rsi), %rbx
               	movl	$248, %eax
               	addq	(%rdi), %rax
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	callq	0x4274c0 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 240539(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425fb1 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
               	nopw	(%rax,%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 240509(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425fa0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x30>
               	cmpb	$0, 240512(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x425fcc <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	cmpq	%rbx, 240495(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	jne	0x425fcc <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	leaq	240486(%rip), %rbx      # 0x460b30 <(anonymous namespace)::current>
               	jmp	0x425fe5 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x75>
               	cmpb	$0, 240741(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x425ff2 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	cmpq	%rbx, 240724(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x425ff2 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	leaq	240715(%rip), %rbx      # 0x460c30 <(anonymous namespace)::last>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 80(%rbx)
               	movb	$1, 88(%rbx)
               	movb	$0, 240433(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>:
               	movq	(%rdi), %rdi
               	jmp	0x427c20 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
               	nopl	(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x426027 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x426030 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x42602d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	227587(%rip), %rax      # 0x45d928 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>
               	jmp	0x42602a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42606d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x4137b0 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x4137c0 <pthread_setname_np@plt>
               	movq	(%rbx), %rbx
               	leaq	16(%rbx), %rsi
               	leaq	184(%rbx), %rdi
               	movq	%rdi, 224(%rsp)
               	movq	%rsi, 232(%rsp)
               	callq	0x427410 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	cmpb	$1, 312(%rbx)
               	jne	0x4260ab <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b>
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	56(%rbx), %rcx
               	movq	%rcx, 216(%rsp)
               	leaq	336(%rbx), %rcx
               	movq	%rcx, 208(%rsp)
               	leaq	120(%rbx), %rcx
               	movq	%rcx, 200(%rsp)
               	movq	233183(%rip), %r12      # 0x45efb8 <write+0x45efb8>
               	movq	%rbx, 72(%rsp)
               	jmp	0x426125 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe5>
               	movq	%r15, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	224(%rsp), %rdi
               	movq	232(%rsp), %rsi
               	callq	0x427410 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	movq	72(%rsp), %rbx
               	cmpb	$1, 312(%rbx)
               	je	0x426099 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
               	movq	(%rax), %r13
               	movb	$1, %al
               	xchgb	%al, 240122(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426151 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x111>
               	nopl	(%rax,%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 240093(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426140 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x100>
               	cmpb	$0, 240096(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x4261e9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1a9>
               	movl	$256, %edx              # imm = 0x100
               	leaq	240326(%rip), %rdi      # 0x460c30 <(anonymous namespace)::last>
               	leaq	240063(%rip), %rsi      # 0x460b30 <(anonymous namespace)::current>
               	callq	0x413720 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 240048(%rip)     # 0x460b30 <(anonymous namespace)::current>
               	movups	%xmm0, 240057(%rip)     # 0x460b40 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 240066(%rip)     # 0x460b50 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 240075(%rip)     # 0x460b60 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 240084(%rip)     # 0x460b70 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 240093(%rip)     # 0x460b80 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 240102(%rip)     # 0x460b90 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 240111(%rip)     # 0x460ba0 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 240120(%rip)     # 0x460bb0 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 240129(%rip)     # 0x460bc0 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 240138(%rip)     # 0x460bd0 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 240147(%rip)     # 0x460be0 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 240156(%rip)     # 0x460bf0 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 240165(%rip)     # 0x460c00 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 240174(%rip)     # 0x460c10 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 240183(%rip)     # 0x460c20 <(anonymous namespace)::current+0xf0>
               	movq	%r13, 239936(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	movb	$1, 239937(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 239933(%rip)      # 0x460b40 <(anonymous namespace)::current+0x10>
               	movb	$1, 239934(%rip)        # 0x460b48 <(anonymous namespace)::current+0x18>
               	movb	$0, 239897(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	cmpl	$0, 344(%rbx)
               	sete	%al
               	xchgb	%al, 244687(%rip)       # 0x461df0 <(anonymous namespace)::markingRequested (.0.0)>
               	movq	%r13, %rax
               	xchgq	%rax, 244693(%rip)      # 0x461e00 <(anonymous namespace)::markingEpoch (.0)>
               	callq	0x424840 <kotlin::mm::RequestThreadsSuspension()>
               	movb	$1, %al
               	xchgb	%al, 239858(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426251 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x211>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239837(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426240 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x200>
               	cmpb	$0, 239840(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x42626a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x22a>
               	leaq	239823(%rip), %rbx      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 239816(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x426283 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x243>
               	cmpb	$0, 240071(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x426290 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x250>
               	leaq	240054(%rip), %rbx      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%r13, 240047(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x426290 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x250>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 48(%rbx)
               	movb	$1, 56(%rbx)
               	movb	$0, 239763(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	nopw	(%rax,%rax)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	leaq	8(%rax), %rbp
               	testq	%rax, %rax
               	cmoveq	%rax, %rbp
               	testq	%r12, %r12
               	je	0x4262da <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x29a>
               	leaq	240267(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42710c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10cc>
               	movq	240231(%rip), %rax      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bl
               	jmp	0x4262f7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b7>
               	nopl	(%rax,%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426330 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2f0>
               	leaq	8(%rax), %rcx
               	cmpq	%rbp, %rcx
               	je	0x4262f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x4262f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x4262f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	movq	296(%rax), %rcx
               	movzbl	96(%rcx), %ecx
               	testb	$1, %cl
               	jne	0x4262f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	xorl	%ebx, %ebx
               	nop
               	testq	%r12, %r12
               	je	0x426341 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x301>
               	leaq	240156(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testb	%bl, %bl
               	jne	0x426355 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x315>
               	callq	0x413770 <sched_yield@plt>
               	jmp	0x4262a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239565(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426350 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x310>
               	cmpb	$0, 239568(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	movq	72(%rsp), %rbx
               	je	0x42637f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x33f>
               	leaq	239546(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 239539(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x426398 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x358>
               	cmpb	$0, 239794(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x4263a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
               	leaq	239777(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%r13, 239770(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x4263a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
               	cmpb	$0, 56(%rax)
               	je	0x4263a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movb	$0, 239488(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movq	8(%rbx), %r15
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*24(%rax)
               	movq	216(%rsp), %rdi
               	movq	%r13, %rsi
               	callq	0x4274c0 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x425270 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
               	movq	%r13, %rdi
               	movq	208(%rsp), %rsi
               	callq	0x425c50 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	leaq	8(%rax), %rbx
               	testq	%rax, %rax
               	cmoveq	%rax, %rbx
               	testq	%r12, %r12
               	je	0x42641e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3de>
               	leaq	239943(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427113 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10d3>
               	movq	239907(%rip), %rax      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bpl
               	jmp	0x426437 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f7>
               	nopl	(%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426460 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x420>
               	leaq	8(%rax), %rcx
               	cmpq	%rbx, %rcx
               	je	0x426430 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426430 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426430 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f0>
               	xorl	%ebp, %ebp
               	nop
               	testq	%r12, %r12
               	je	0x426471 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x431>
               	leaq	239852(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testb	%bpl, %bpl
               	jne	0x426485 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x445>
               	callq	0x413770 <sched_yield@plt>
               	jmp	0x4263f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3b0>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239261(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426480 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x440>
               	cmpb	$0, 239264(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	leaq	239993(%rip), %r14      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	je	0x4264b1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x471>
               	leaq	239240(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 239233(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x4264cf <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x48f>
               	cmpb	$0, 239488(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x4264f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b0>
               	leaq	239471(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	movl	$0, %esi
               	cmpq	%r13, 239459(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x4264f2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b2>
               	cmpb	$0, 152(%rax)
               	je	0x4264f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b0>
               	movq	144(%rax), %rsi
               	jmp	0x4264f2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b2>
               	nopl	(%rax,%rax)
               	xorl	%esi, %esi
               	movb	$0, 239153(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*32(%rax)
               	movb	$1, %al
               	xchgb	%al, 239909(%rip)       # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426521 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4e1>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239891(%rip)       # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426510 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4d0>
               	leaq	16(%rsp), %r15
               	movq	%r15, 24(%rsp)
               	movq	%r15, 16(%rsp)
               	movq	$0, 32(%rsp)
               	movq	239832(%rip), %rbp      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rbp
               	je	0x4265d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x590>
               	movq	%rbp, %rsi
               	jmp	0x426574 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x534>
               	nop
               	movq	40(%rax), %rbx
               	addq	$-1, 239796(%rip)       # 0x460e10 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c18c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	movq	%rbp, %rsi
               	cmpq	%r14, %rbp
               	je	0x4265b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x570>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	32(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x426550 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x510>
               	cmpq	%rsi, %r15
               	je	0x42656c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
               	movq	(%rsi), %rdx
               	cmpq	%r15, %rdx
               	je	0x42656c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
               	movq	%r15, %rdi
               	callq	0x43c12e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	addq	$1, 32(%rsp)
               	addq	$-1, 239744(%rip)       # 0x460e28 <kotlin::mm::GlobalData::instance_+0xf8>
               	jmp	0x42656c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
               	nopl	(%rax)
               	movq	239713(%rip), %rdi      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rdi
               	je	0x4265d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x590>
               	movq	(%rdi), %rbx
               	callq	0x430410 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4265c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x580>
               	movq	16(%rsp), %rax
               	cmpq	%r15, %rax
               	je	0x426620 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5e0>
               	movq	%rax, 239667(%rip)      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	24(%rsp), %rax
               	movq	%rax, 239663(%rip)      # 0x460e20 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, (%rax)
               	movq	239645(%rip), %rax      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%r14, 8(%rax)
               	movq	32(%rsp), %rax
               	movq	%r15, 24(%rsp)
               	movq	%r15, 16(%rsp)
               	movq	$0, 32(%rsp)
               	jmp	0x426630 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5f0>
               	nopl	(%rax)
               	movq	%r14, 239609(%rip)      # 0x460e20 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, 239594(%rip)      # 0x460e18 <kotlin::mm::GlobalData::instance_+0xe8>
               	xorl	%eax, %eax
               	movq	%rax, 239601(%rip)      # 0x460e28 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 239602(%rip)        # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	239558(%rip), %rbx      # 0x460e10 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 238808(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426671 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x631>
               	nopw	(%rax,%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238781(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426660 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
               	cmpb	$0, 238784(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x42668a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x64a>
               	leaq	238767(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 238760(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x4266a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x663>
               	cmpb	$0, 239015(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x4266cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
               	leaq	238998(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%r13, 238991(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x4266cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 200(%rax)
               	movq	%rbx, 184(%rax)
               	movq	%rcx, 192(%rax)
               	jne	0x4266cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
               	movb	$1, 200(%rax)
               	movb	$0, 238678(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movb	$1, %al
               	xchgb	%al, 239444(%rip)       # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x4266f1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b1>
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239427(%rip)       # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x4266e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6a0>
               	movq	239368(%rip), %rbx      # 0x460e00 <kotlin::mm::GlobalData::instance_+0xd0>
               	leaq	239361(%rip), %rdx      # 0x460e00 <kotlin::mm::GlobalData::instance_+0xd0>
               	jmp	0x426713 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d3>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rbx
               	cmpq	%rdx, %rbx
               	je	0x4267e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7a0>
               	movl	32(%rbx), %eax
               	testb	$4, %al
               	jne	0x426710 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x426733 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6f3>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%rax), %rcx
               	testb	$3, %cl
               	jne	0x426710 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	-8(%rax), %rax
               	testq	%rax, %rax
               	jne	0x426710 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4267a4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x764>
               	movq	40(%rbx), %rcx
               	testb	$1, %cl
               	je	0x42675d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x71d>
               	andq	$-2, %rcx
               	movq	8(%rcx), %rcx
               	movl	$1, %esi
               	movq	40(%rbx), %rax
               	movl	%eax, %edx
               	andl	$1, %edx
               	negq	%rdx
               	andq	%rax, %rdx
               	andq	$-2, %rdx
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	cmpl	$1, %eax
               	je	0x426780 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x740>
               	movq	$0, 8(%rdx)
               	movl	$1, %eax
               	xorl	%esi, %esi
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	xchgq	%rcx, 40(%rbx)
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4267b4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x774>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	24(%rbx), %rcx
               	movq	%rcx, (%rax)
               	movq	(%rbx), %rbp
               	addq	$-1, 239178(%rip)       # 0x460e10 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c18c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	movq	%rbp, %rbx
               	jmp	0x4266f8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b8>
               	nop
               	movb	$0, 239177(%rip)        # 0x460e30 <kotlin::mm::GlobalData::instance_+0x100>
               	movq	239138(%rip), %rbx      # 0x460e10 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 238388(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426811 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7d1>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238365(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426800 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7c0>
               	cmpb	$0, 238368(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x42682a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7ea>
               	leaq	238351(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 238344(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x426843 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x803>
               	cmpb	$0, 238599(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x42686d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
               	leaq	238582(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%r13, 238575(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x42686d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 248(%rax)
               	movq	%rbx, 232(%rax)
               	movq	%rcx, 240(%rax)
               	jne	0x42686d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
               	movb	$1, 248(%rax)
               	movb	$0, 238262(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movq	72(%rsp), %rax
               	movq	(%rax), %rbx
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	je	0x42689e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x85e>
               	nopl	(%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	jne	0x426890 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x850>
               	testq	%r12, %r12
               	je	0x4268e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8a0>
               	leaq	242874(%rip), %rdi      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42711a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10da>
               	xorl	%eax, %eax
               	xchgb	%al, 242893(%rip)       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testq	%r12, %r12
               	je	0x4268e8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8a8>
               	leaq	242837(%rip), %rdi      # 0x461d68 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	jmp	0x4268e8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8a8>
               	nopl	(%rax)
               	xorl	%eax, %eax
               	xchgb	%al, 242856(%rip)       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	movq	%rbx, 128(%rsp)
               	leaq	238921(%rip), %rdi      # 0x460e40 <(anonymous namespace)::gSuspensionCondVar>
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	movb	$1, %al
               	xchgb	%al, 238118(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426921 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e1>
               	nopl	(%rax)
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238093(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426910 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8d0>
               	cmpb	$0, 238096(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x42693a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8fa>
               	leaq	238079(%rip), %rbx      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 238072(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x426953 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x913>
               	cmpb	$0, 238327(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x426960 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x920>
               	leaq	238310(%rip), %rbx      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%r13, 238303(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x426960 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x920>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 64(%rbx)
               	movb	$1, 72(%rbx)
               	movb	$0, 238019(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	xorps	%xmm0, %xmm0
               	leaq	104(%rsp), %rax
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	238770(%rip), %rax      # 0x460e38 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 237972(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4269b1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x971>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237949(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4269a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	movq	128(%rsp), %rax
               	leaq	8(%rax), %r14
               	cmpb	$0, 237940(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	je	0x4269d6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x996>
               	leaq	237923(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%r13, 237916(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x4269ef <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9af>
               	cmpb	$0, 238171(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x426a0d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
               	leaq	238154(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%r13, 238147(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x426a0d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
               	cmpb	$0, 176(%rax)
               	movq	%rbx, 160(%rax)
               	movq	%rbp, 168(%rax)
               	jne	0x426a0d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
               	movb	$1, 176(%rax)
               	movq	%r13, 136(%rsp)
               	movb	$0, 237838(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x426bc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
               	xorl	%r13d, %r13d
               	jmp	0x426a47 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
               	movq	$0, 8(%rbx)
               	movq	%rbx, %r13
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x426bc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
               	movq	8(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x426a30 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9f0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	je	0x426a5f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa1f>
               	cmpq	%rax, (%rax)
               	jne	0x426aa0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa60>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	testb	$64, 88(%rax)
               	jne	0x426aa0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa60>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movslq	20(%rax), %rcx
               	testq	%rcx, %rcx
               	js	0x426b76 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb36>
               	movl	%ecx, %ecx
               	addq	$15, %rcx
               	jmp	0x426b84 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb44>
               	nopw	(%rax,%rax)
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movslq	20(%rax), %rcx
               	testq	%rcx, %rcx
               	js	0x426abc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa7c>
               	movl	%ecx, %ecx
               	addq	$15, %rcx
               	jmp	0x426aca <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa8a>
               	movl	24(%rbx), %eax
               	negq	%rcx
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427b80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %r15
               	movq	24(%rsp), %rbx
               	movq	$0, 16(%rsp)
               	movq	%r15, 160(%rsp)
               	cmpq	$0, 104(%rsp)
               	je	0x426b35 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaf5>
               	movq	112(%rsp), %rax
               	movq	$0, 160(%rsp)
               	movq	(%rax), %rbp
               	movq	%r15, (%rax)
               	testq	%rbp, %rbp
               	je	0x426b46 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb06>
               	movq	%rbp, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x426b46 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb06>
               	movq	$0, 160(%rsp)
               	movq	%r15, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	addq	$1, 120(%rsp)
               	leaq	160(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x426a47 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
               	jmp	0x426bc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
               	movl	24(%rbx), %eax
               	negq	%rcx
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427b80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	24(%rsp), %rbx
               	movq	%r15, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x426a47 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	238193(%rip), %rax      # 0x460e38 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 237395(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426bf1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbb1>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237373(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426be0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba0>
               	cmpb	$0, 237376(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	movq	136(%rsp), %rsi
               	je	0x426c12 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbd2>
               	leaq	237351(%rip), %rax      # 0x460b30 <(anonymous namespace)::current>
               	cmpq	%rsi, 237344(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	je	0x426c2b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbeb>
               	cmpb	$0, 237599(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x426c49 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
               	leaq	237582(%rip), %rax      # 0x460c30 <(anonymous namespace)::last>
               	cmpq	%rsi, 237575(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x426c49 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
               	cmpb	$0, 224(%rax)
               	movq	%rbx, 208(%rax)
               	movq	%rbp, 216(%rax)
               	jne	0x426c49 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
               	movb	$1, 224(%rax)
               	movb	$0, 237274(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movq	200(%rsp), %rdi
               	callq	0x4274c0 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 237253(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	movq	72(%rsp), %rbx
               	je	0x426c81 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc41>
               	nop
               	callq	0x423440 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237229(%rip)       # 0x460b2a <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426c70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc30>
               	cmpb	$0, 237232(%rip)        # 0x460b38 <(anonymous namespace)::current+0x8>
               	movq	136(%rsp), %r13
               	je	0x426d50 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd10>
               	cmpq	%r13, 237203(%rip)      # 0x460b30 <(anonymous namespace)::current>
               	jne	0x426d50 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd10>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 237217(%rip)      # 0x460b50 <(anonymous namespace)::current+0x20>
               	movb	$1, 237218(%rip)        # 0x460b58 <(anonymous namespace)::current+0x28>
               	movl	$256, %edx              # imm = 0x100
               	leaq	237422(%rip), %rdi      # 0x460c30 <(anonymous namespace)::last>
               	leaq	237159(%rip), %rsi      # 0x460b30 <(anonymous namespace)::current>
               	callq	0x413720 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 237144(%rip)     # 0x460b30 <(anonymous namespace)::current>
               	movups	%xmm0, 237153(%rip)     # 0x460b40 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 237162(%rip)     # 0x460b50 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 237171(%rip)     # 0x460b60 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 237180(%rip)     # 0x460b70 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 237189(%rip)     # 0x460b80 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 237198(%rip)     # 0x460b90 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 237207(%rip)     # 0x460ba0 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 237216(%rip)     # 0x460bb0 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 237225(%rip)     # 0x460bc0 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 237234(%rip)     # 0x460bd0 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 237243(%rip)     # 0x460be0 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 237252(%rip)     # 0x460bf0 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 237261(%rip)     # 0x460c00 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 237270(%rip)     # 0x460c10 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 237279(%rip)     # 0x460c20 <(anonymous namespace)::current+0xf0>
               	jmp	0x426d75 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
               	nopw	%cs:(%rax,%rax)
               	cmpb	$0, 237281(%rip)        # 0x460c38 <(anonymous namespace)::last+0x8>
               	je	0x426d75 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
               	cmpq	%r13, 237264(%rip)      # 0x460c30 <(anonymous namespace)::last>
               	jne	0x426d75 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
               	callq	0x43cb20 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 237282(%rip)      # 0x460c50 <(anonymous namespace)::last+0x20>
               	movb	$1, 237283(%rip)        # 0x460c58 <(anonymous namespace)::last+0x28>
               	movb	$0, 236974(%rip)        # 0x460b2a <(anonymous namespace)::lock>
               	movq	328(%rbx), %rbp
               	leaq	88(%rbp), %rdi
               	movq	%rdi, 80(%rsp)
               	movb	$0, 88(%rsp)
               	testq	%r12, %r12
               	je	0x426da3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd63>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427121 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10e1>
               	movb	$1, 88(%rsp)
               	movq	120(%rsp), %rax
               	testq	%rax, %rax
               	leaq	80(%rsp), %rbx
               	jne	0x426dc2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd82>
               	cmpq	$0, (%rbp)
               	je	0x4270e8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a8>
               	movq	%rax, 240(%rsp)
               	leaq	40(%rbp), %r14
               	cmpb	$0, 169(%rbp)
               	jne	0x426df4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdb4>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x43c770 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpb	$0, 169(%rbp)
               	je	0x426de0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda0>
               	leaq	272(%rbp), %rbx
               	testq	%r12, %r12
               	je	0x426e10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd0>
               	movq	%rbx, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427128 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10e8>
               	cmpq	$0, (%rbp)
               	je	0x426e70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe30>
               	testq	%r12, %r12
               	je	0x426e24 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xde4>
               	movq	%rbx, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	104(%rsp), %rax
               	testq	%rax, %rax
               	je	0x42706e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x102e>
               	cmpq	$0, 16(%rbp)
               	je	0x427040 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1000>
               	movq	24(%rbp), %rcx
               	movq	$0, 104(%rsp)
               	movq	(%rcx), %rbx
               	movq	%rax, (%rcx)
               	testq	%rbx, %rbx
               	je	0x42704d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x100d>
               	movq	%rbx, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x42704d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x100d>
               	nop
               	movq	%rbx, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 184(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 160(%rsp)
               	movq	$22, 176(%rsp)
               	movups	119502(%rip), %xmm0     # 0x44417b <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movabsq	$8245936382198116210, %r13 # imm = 0x726F737365636F72
               	movq	%r13, 14(%rax)
               	movq	$22, 168(%rsp)
               	movb	$1, 192(%rsp)
               	movq	$0, 144(%rsp)
               	movq	%rbp, 16(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 24(%rsp)
               	movq	$22, 40(%rsp)
               	movups	119409(%rip), %xmm0     # 0x44417b <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movq	%r13, 14(%rax)
               	movq	$22, 32(%rsp)
               	movb	$1, 56(%rsp)
               	leaq	1530(%rip), %r13        # 0x427520 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%r13, 64(%rsp)
               	movl	$64, %edi
               	callq	0x43bb19 <operator new(unsigned long)>
               	leaq	223676(%rip), %rcx      # 0x45d8f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	%rbp, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rbx, 16(%rax)
               	movq	$22, 32(%rax)
               	movq	$22, 24(%rax)
               	leaq	40(%rsp), %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 32(%rsp)
               	movb	$0, 40(%rsp)
               	movb	$1, 48(%rax)
               	movq	%r13, 56(%rax)
               	movq	%rax, 8(%rsp)
               	leaq	144(%rsp), %rdi
               	leaq	8(%rsp), %rsi
               	movq	229420(%rip), %rdx      # 0x45efc0 <write+0x45efc0>
               	callq	0x43ed4e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	movq	136(%rsp), %r13
               	movq	152(%rsp), %rbx
               	je	0x426fb9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf79>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 8(%rsp)
               	cmpb	$0, 56(%rsp)
               	je	0x426fdd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf9d>
               	movq	24(%rsp), %rdi
               	leaq	40(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426fdd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf9d>
               	callq	0x413730 <free@plt>
               	cmpq	$0, (%rbp)
               	jne	0x42712f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10ef>
               	movq	144(%rsp), %rax
               	movq	%rax, (%rbp)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 192(%rsp)
               	je	0x426e17 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426e17 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
               	callq	0x413730 <free@plt>
               	jmp	0x426e17 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	$0, 104(%rsp)
               	movq	%rax, 16(%rbp)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%rbp)
               	movq	240(%rsp), %rax
               	addq	%rax, 32(%rbp)
               	xorps	%xmm0, %xmm0
               	leaq	104(%rsp), %rax
               	movups	%xmm0, 8(%rax)
               	movq	%r13, 160(%rbp)
               	movq	%r14, %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	cmpb	$0, 88(%rsp)
               	je	0x42709d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x105d>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42709d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x105d>
               	testq	%r12, %r12
               	je	0x427098 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1058>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	104(%rsp), %rbp
               	movq	$0, 104(%rsp)
               	movq	%rbp, 16(%rsp)
               	testq	%rbp, %rbp
               	je	0x4260e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	16(%rsp), %rbx
               	movq	%rbp, 16(%rsp)
               	testq	%rbx, %rbx
               	je	0x4270b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1070>
               	movq	%rbx, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x4270b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1070>
               	movq	%r13, 16(%rsp)
               	cmpq	$0, 144(%rbp)
               	je	0x427134 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10f4>
               	leaq	128(%rbp), %rdi
               	movq	%r15, %rsi
               	callq	*152(%rbp)
               	jmp	0x42707d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x103d>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	callq	0x43bec3 <std::terminate()>
               	callq	0x43cb72 <std::__throw_bad_function_call()>
               	jmp	0x42715d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x111d>
               	jmp	0x42728c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x124c>
               	movq	%rax, %rbx
               	jmp	0x427171 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1131>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpb	$0, 88(%rsp)
               	je	0x427171 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1131>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	jne	0x427179 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1139>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	cmpq	$0, 228919(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427188 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1148>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4271a8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1168>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 8(%rsp)
               	cmpb	$0, 56(%rsp)
               	je	0x4271d4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1194>
               	movq	24(%rsp), %rbx
               	leaq	40(%rsp), %rax
               	cmpq	%rax, %rbx
               	jne	0x4271cc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x118c>
               	jmp	0x4271d4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1194>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	cmpb	$0, 192(%rsp)
               	je	0x4271f8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11b8>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4271f8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11b8>
               	callq	0x413730 <free@plt>
               	cmpq	$0, 228792(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42728f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x124f>
               	movq	152(%rsp), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	104(%rsp), %rbx
               	movq	$0, 104(%rsp)
               	movq	%rbx, 16(%rsp)
               	testq	%rbx, %rbx
               	je	0x427264 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1224>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	16(%rsp), %rbp
               	movq	%rbx, 16(%rsp)
               	testq	%rbp, %rbp
               	je	0x427231 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f1>
               	movq	%rbp, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x427231 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f1>
               	leaq	16(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	%r14, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	%r14, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<GCStateHolder::~GCStateHolder()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	addq	$248, %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	leaq	184(%rbx), %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	leaq	120(%rbx), %rdi
               	callq	0x43c76a <std::condition_variable::~condition_variable()>
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c76a <std::condition_variable::~condition_variable()>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	222669(%rip), %rax      # 0x45d8b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427306 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427306 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43ece0 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	222621(%rip), %rax      # 0x45d8b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427336 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427336 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43ece0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x4273b3 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x42738f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427395 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x4273d5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4273d5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	callq	0x413730 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x4273f9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4273f9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	8(%rdi), %r15
               	movq	%r15, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 228225(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427445 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x35>
               	movq	%r15, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4274b8 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0xa8>
               	movb	$1, 16(%rsp)
               	movq	168(%rbx), %rax
               	cmpq	104(%rbx), %rax
               	jg	0x42748d <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x7d>
               	leaq	16(%r14), %r15
               	leaq	8(%rsp), %r12
               	cmpb	$0, 296(%rbx)
               	jne	0x427481 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x71>
               	movq	%r15, %rdi
               	movq	%r12, %rsi
               	callq	0x43c770 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	168(%rbx), %rax
               	cmpq	104(%rbx), %rax
               	jle	0x427460 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
               	cmpb	$0, 16(%rsp)
               	je	0x4274a9 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x99>
               	movq	8(%rsp), %r15
               	testq	%r15, %r15
               	je	0x4274a9 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x99>
               	cmpq	$0, 228126(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4274a4 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x94>
               	movq	%r15, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	nop

<GCStateHolder::ValueWithCondVar<long>::set(long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	movq	8(%rdi), %r14
               	cmpq	$0, 228065(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4274e5 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x25>
               	movq	%r14, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427516 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x56>
               	movq	%r15, (%rbx)
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	testq	%r14, %r14
               	je	0x427510 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	cmpq	$0, 228023(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427510 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4137a0 <pthread_mutex_unlock@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	nopl	(%rax)

<std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42754d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x4137b0 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x4137c0 <pthread_setname_np@plt>
               	movq	(%rbx), %r13
               	callq	0x438230 <Kotlin_initRuntimeIfNeeded>
               	leaq	176(%r13), %rax
               	movq	%rax, 32(%rsp)
               	cmpq	$0, 227919(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42757d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x5d>
               	movq	32(%rsp), %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4279b0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x490>
               	movb	$1, 264(%r13)
               	cmpq	$0, 227883(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427599 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x79>
               	movq	32(%rsp), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	leaq	216(%r13), %rdi
               	movq	%rdi, 96(%rsp)
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	leaq	88(%r13), %r14
               	leaq	40(%r13), %r15
               	leaq	24(%r13), %rax
               	movq	%rax, 128(%rsp)
               	leaq	128(%r13), %rax
               	movq	%rax, 120(%rsp)
               	xorl	%eax, %eax
               	movq	%rax, 40(%rsp)
               	leaq	8(%rsp), %rbp
               	movq	%r14, 112(%rsp)
               	movq	%r15, 104(%rsp)
               	jmp	0x4275f5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movb	$0, 16(%rsp)
               	movq	%r14, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 227761(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427619 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xf9>
               	movq	%r14, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4279b0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x490>
               	movb	$1, 16(%rsp)
               	movq	32(%r13), %rbx
               	movb	$1, %al
               	testq	%rbx, %rbx
               	jne	0x427668 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x148>
               	nopl	(%rax)
               	movq	40(%rsp), %rax
               	cmpq	%rax, 160(%r13)
               	jne	0x427662 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x142>
               	cmpb	$0, 168(%r13)
               	jne	0x42791a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3fa>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	callq	0x43c770 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	32(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x427630 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x110>
               	jmp	0x427664 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x144>
               	xorl	%ebx, %ebx
               	movb	16(%rsp), %al
               	movq	16(%r13), %rcx
               	movq	$0, 16(%r13)
               	movq	%rcx, 72(%rsp)
               	movq	24(%r13), %rcx
               	movq	160(%r13), %rdx
               	movq	%rdx, 40(%rsp)
               	movq	%rbx, 88(%rsp)
               	movq	%rcx, 80(%rsp)
               	movq	128(%rsp), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	testb	%al, %al
               	je	0x4279a1 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x481>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4276c7 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1a7>
               	cmpq	$0, 227581(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4276c2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1a2>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	testq	%rbx, %rbx
               	je	0x427850 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rbx
               	xorl	%eax, %eax
               	movq	%rcx, 136(%rsp)
               	xchgl	%eax, 328(%rcx)
               	movl	%eax, 60(%rsp)
               	cmpl	$1, %eax
               	jne	0x427718 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1f8>
               	movb	239236(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427718 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1f8>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 144(%rsp)
               	movq	72(%rsp), %rbx
               	testq	%rbx, %rbx
               	jne	0x427764 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x244>
               	jmp	0x427810 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	nop
               	leaq	264(%r14), %rbp
               	movl	$24, %edi
               	callq	0x428110 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%r12, 16(%rax)
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x43c174 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 280(%r14)
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x427810 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	leaq	16(%rbx), %rbp
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rsi
               	testb	$64, 88(%rsi)
               	je	0x427781 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x261>
               	movq	%rbp, %rdi
               	callq	0x437a20 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	je	0x427758 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x238>
               	cmpq	%rax, (%rax)
               	je	0x427758 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x238>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	cmpq	%rax, (%rax)
               	movl	$0, %r12d
               	cmovneq	%rax, %r12
               	movq	16(%r12), %rax
               	testb	$1, %al
               	je	0x4277b6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x296>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%r12), %rcx
               	movq	%rcx, (%rax)
               	movq	%r15, %rax
               	movq	-64(%r15), %r14
               	leaq	232(%r14), %rax
               	movq	24(%r12), %rcx
               	addq	$-8, %r12
               	cmpq	%rcx, %rax
               	jne	0x427730 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x210>
               	movq	40(%r12), %rbp
               	addq	$-1, 256(%r14)
               	movq	%rbp, %rdi
               	callq	0x43c18c <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbp, %rdi
               	callq	0x430410 <mi_free>
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x427764 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x244>
               	nopl	(%rax)
               	cmpq	$0, 136(%rsp)
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %r15
               	movq	144(%rsp), %rdi
               	je	0x427850 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	movl	60(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x427850 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	cmpl	$1, %eax
               	jne	0x427850 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	movb	238924(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427850 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 24(%rsp)
               	cmpq	$0, 144(%r13)
               	je	0x4279ab <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x48b>
               	movq	120(%rsp), %rdi
               	leaq	24(%rsp), %rsi
               	callq	*152(%r13)
               	movq	72(%rsp), %rbx
               	movq	$0, 72(%rsp)
               	movq	%rbx, 24(%rsp)
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	je	0x4278d0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3b0>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	24(%rsp), %rbp
               	movq	%rbx, 24(%rsp)
               	testq	%rbp, %rbp
               	je	0x427890 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x370>
               	movq	%rbp, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x427890 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x370>
               	nop
               	leaq	24(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	72(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	leaq	8(%rsp), %rbp
               	je	0x4275f5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4275f5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
               	cmpq	$0, 226990(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4275f0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd0>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	jmp	0x4275f0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd0>
               	movb	$0, 169(%r13)
               	cmpb	$0, 16(%rsp)
               	je	0x427947 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x427>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427947 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x427>
               	cmpq	$0, 226941(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427942 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x422>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 226921(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x42797d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x45d>
               	movq	32(%rsp), %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4279b0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x490>
               	movb	$0, 264(%r13)
               	cmpq	$0, 226889(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427985 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x465>
               	movq	32(%rsp), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	jmp	0x427985 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x465>
               	movb	$0, 264(%r13)
               	movq	96(%rsp), %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	callq	0x43cb72 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	jmp	0x4279b9 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x499>
               	movq	%rax, %r14
               	movq	72(%rsp), %rbx
               	movq	$0, 72(%rsp)
               	movq	%rbx, 48(%rsp)
               	testq	%rbx, %rbx
               	je	0x427a02 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4e2>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	48(%rsp), %rbp
               	movq	%rbx, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x4279cf <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4af>
               	movq	%rbp, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x4279cf <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4af>
               	leaq	48(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	72(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	je	0x427a3b <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x51b>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427a3b <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x51b>
               	cmpq	$0, 226697(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427a36 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x516>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	220829(%rip), %rax      # 0x45d8f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427a76 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427a76 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43ece0 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	220781(%rip), %rax      # 0x45d8f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427aa6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427aa6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43ece0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x427b23 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x427aff <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427b05 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x427b45 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427b45 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	callq	0x413730 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x427b69 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427b69 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r12
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	movq	%rdx, %rbp
               	cmoveq	%rsi, %rbp
               	movq	(%rbp), %rcx
               	movq	$0, (%rbp)
               	movq	%rcx, (%rsp)
               	movq	(%rcx), %rax
               	movq	$0, (%rcx)
               	movq	(%rbp), %rbx
               	movq	%rax, (%rbp)
               	testq	%rbx, %rbx
               	je	0x427bdc <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
               	movq	%rbx, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	jne	0x427be9 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x69>
               	movq	%r12, 8(%r13)
               	movq	(%rbp), %rax
               	addq	$-1, 16(%r13)
               	subq	%r14, 24(%r13)
               	movq	(%rsp), %rcx
               	movq	$0, (%rsp)
               	movq	%rcx, (%r15)
               	movq	%rax, 8(%r15)
               	movq	%rsp, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	testq	%r15, %r15
               	je	0x427c50 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x30>
               	xchgl	%ebp, 328(%r15)
               	jmp	0x427c53 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x33>
               	xorl	%r15d, %r15d
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x425ea0 <GCStateHolder::schedule()>
               	testq	%r15, %r15
               	je	0x427c80 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427c80 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	cmpl	$1, %eax
               	jne	0x427c80 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movb	237844(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x427c8b <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x6b>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%r15, %r15
               	je	0x427cd7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427cd7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	cmpl	$1, %eax
               	jne	0x427cd7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movb	237772(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427cd7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	movl	$1, %edi
               	movl	$168, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movq	(%r12), %rax
               	leaq	56(%rax), %rcx
               	movq	%rcx, (%rsp)
               	movq	%rcx, (%rbx)
               	movaps	(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movups	8(%rbx), %xmm1
               	movaps	%xmm1, (%rsp)
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 16(%rsp)
               	leaq	166(%rip), %rcx         # 0x427de0 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rcx, 24(%rbx)
               	movq	$0, 24(%rsp)
               	leaq	194(%rip), %rcx         # 0x427e10 <std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>
               	movq	%rcx, 32(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 40(%rbx)
               	movups	%xmm0, 56(%rbx)
               	movq	64(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movq	16(%rsp), %rax
               	testq	%rax, %rax
               	je	0x427d87 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)+0xa7>
               	movq	%rsp, %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rax
               	addq	$72, %rax
               	movq	(%r12), %rcx
               	leaq	160(%rcx), %rdx
               	movq	%rdx, 72(%rbx)
               	movq	%r15, 80(%rbx)
               	movq	%rbx, 88(%rbx)
               	addq	$16, %rcx
               	movq	%rcx, 112(%rbx)
               	movq	%rax, 128(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 136(%rbx)
               	movups	%xmm0, 152(%rbx)
               	movq	%rbx, (%r14)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x427df7 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x427e00 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x427dfd <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	219987(%rip), %rax      # 0x45d948 <typeinfo for kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>
               	jmp	0x427dfa <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>:
               	movq	(%rdi), %rax
               	movq	64(%rax), %rdi
               	movq	(%rdi), %rax
               	movq	16(%rax), %rax
               	jmpq	*%rax

<kotlin::gc::GC::ThreadData::~ThreadData()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x427e63 <kotlin::gc::GC::ThreadData::~ThreadData()+0x43>
               	leaq	112(%rbx), %rdi
               	callq	0x425b80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	leaq	136(%rbx), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x427e5b <kotlin::gc::GC::ThreadData::~ThreadData()+0x3b>
               	leaq	8(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	addq	$15, %r12
               	andq	$-8, %r12
               	movq	16(%rdi), %rax
               	movq	16(%rax), %rbp
               	movq	40(%rbp), %rax
               	addq	%r12, %rax
               	movq	%rax, 40(%rbp)
               	cmpq	48(%rbp), %rax
               	jb	0x427ef2 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x72>
               	cmpq	$0, 24(%rbp)
               	je	0x428098 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x218>
               	leaq	8(%rbp), %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rbp)
               	movq	$0, 40(%rbp)
               	movq	$0, 56(%rbp)
               	movq	(%rbp), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rbp)
               	movq	(%rbp), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbp)
               	movb	237208(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427f01 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x81>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x428110 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%rax, %rbp
               	testq	%rax, %rax
               	jne	0x428024 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1a4>
               	movq	16(%r14), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movl	$1, %ecx
               	movq	%rax, 32(%rsp)
               	xchgl	%ecx, 328(%rax)
               	movl	%ecx, 12(%rsp)
               	movq	(%rbx), %rdi
               	addq	$16, %rdi
               	callq	0x425ea0 <GCStateHolder::schedule()>
               	movq	%rax, %rbp
               	movq	(%rbx), %r15
               	movq	128(%r15), %r13
               	movq	%r13, 16(%rsp)
               	movb	$0, 24(%rsp)
               	cmpq	$0, 225357(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427f7d <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfd>
               	movq	%r13, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4280b3 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x233>
               	movb	$1, 24(%rsp)
               	cmpq	%rbp, 120(%r15)
               	jge	0x427fc7 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x147>
               	leaq	136(%r15), %rbx
               	leaq	16(%rsp), %r13
               	nopl	(%rax,%rax)
               	cmpb	$0, 312(%r15)
               	jne	0x427fbb <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13b>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x43c770 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpq	%rbp, 120(%r15)
               	jl	0x427fa0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
               	cmpb	$0, 24(%rsp)
               	je	0x427fe3 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x163>
               	movq	16(%rsp), %r13
               	testq	%r13, %r13
               	je	0x427fe3 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x163>
               	cmpq	$0, 225252(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x427fde <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15e>
               	movq	%r13, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	$0, 24(%rsp)
               	movq	32(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x428014 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	addq	$328, %rdi              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x428014 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	cmpl	$1, %eax
               	jne	0x428014 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movb	236933(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x428014 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x428110 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%rax, %rbp
               	testq	%rax, %rax
               	je	0x42809d <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x21d>
               	movq	$0, (%rbp)
               	movq	%rbp, 16(%rsp)
               	cmpq	$0, 24(%r14)
               	je	0x428062 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1e2>
               	movq	32(%r14), %rax
               	movq	$0, 16(%rsp)
               	movq	(%rax), %rbx
               	movq	%rbp, (%rax)
               	testq	%rbx, %rbx
               	je	0x42806f <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1ef>
               	movq	%rbx, %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430410 <mi_free>
               	jmp	0x42806f <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1ef>
               	movq	$0, 16(%rsp)
               	movq	%rbp, 24(%r14)
               	movq	%rbp, 32(%r14)
               	addq	$1, 40(%r14)
               	addq	%r12, 48(%r14)
               	leaq	16(%rsp), %rdi
               	callq	0x425c20 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43cb72 <std::__throw_bad_function_call()>
               	leaq	114926(%rip), %rdi      # 0x444192 <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x4356d0 <konan::consoleErrorf(char const*, ...)>
               	callq	0x4359b0 <konan::abort()>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	32(%rsp), %rdi
               	movl	12(%rsp), %esi
               	callq	0x425f10 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>:
               	movq	$1, 231405(%rip)        # 0x4608e8 <options+0x78>
               	movl	$2, 231403(%rip)        # 0x4608f0 <options+0x80>
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::allocateInObjectPool(unsigned long)>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	js	0x4281f2 <kotlin::allocateInObjectPool(unsigned long)+0xe2>
               	movq	%rdi, %rsi
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x42818f <kotlin::allocateInObjectPool(unsigned long)+0x7f>
               	leaq	7(%rsi), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x42818f <kotlin::allocateInObjectPool(unsigned long)+0x7f>
               	movl	%ebx, %ecx
               	andl	$7, %ecx
               	testq	%rcx, %rcx
               	jne	0x42818f <kotlin::allocateInObjectPool(unsigned long)+0x7f>
               	addl	$1, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	cmpq	$9, %rsi
               	jb	0x428175 <kotlin::allocateInObjectPool(unsigned long)+0x65>
               	movb	7(%rax), %al
               	andb	$1, %al
               	je	0x428175 <kotlin::allocateInObjectPool(unsigned long)+0x65>
               	movq	$0, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rbx, %rdi
               	callq	0x4353b0 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413750 <memset@plt>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	leaq	-8(%rsi), %rax
               	cmpq	$131064, %rax           # imm = 0x1FFF8
               	ja	0x4281ab <kotlin::allocateInObjectPool(unsigned long)+0x9b>
               	movl	%esi, %eax
               	andl	$7, %eax
               	testq	%rax, %rax
               	jne	0x4281ab <kotlin::allocateInObjectPool(unsigned long)+0x9b>
               	popq	%rbx
               	jmp	0x435620 <_mi_heap_malloc_zero>
               	addq	$7, %rsi
               	callq	0x435620 <_mi_heap_malloc_zero>
               	testq	%rax, %rax
               	je	0x4281f2 <kotlin::allocateInObjectPool(unsigned long)+0xe2>
               	movq	%rax, %rbx
               	andq	$-8, %rbx
               	addq	$8, %rbx
               	testb	$7, %al
               	cmoveq	%rax, %rbx
               	cmpq	%rax, %rbx
               	je	0x4281f9 <kotlin::allocateInObjectPool(unsigned long)+0xe9>
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movb	96(%rdx), %cl
               	shrq	%cl, %rax
               	shlq	$6, %rax
               	orb	$2, 126(%rdx,%rax)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_process_init>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 230020(%rip)        # 0x4604a0 <_mi_heap_main+0xb28>
               	jne	0x428272 <_mi_process_init+0x62>
               	movq	%fs:0, %rax
               	movq	%rax, 229994(%rip)      # 0x460498 <_mi_heap_main+0xb20>
               	leaq	227139(%rip), %rbx      # 0x45f978 <_mi_heap_main>
               	leaq	868(%rip), %rdi         # 0x4285a0 <mi_heap_main_init>
               	callq	0x428610 <_os_random_weak>
               	movq	%rax, 229976(%rip)      # 0x4604a0 <_mi_heap_main+0xb28>
               	leaq	229993(%rip), %rdi      # 0x4604b8 <_mi_heap_main+0xb40>
               	callq	0x428720 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 229957(%rip)      # 0x4604a8 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 229950(%rip)      # 0x4604b0 <_mi_heap_main+0xb38>
               	movb	$1, 237063(%rip)        # 0x462080 <os_preloading>
               	leaq	2832(%rip), %rdi        # 0x428d90 <mi_process_done>
               	callq	0x442940 <atexit>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 237701(%rip)      # 0x462318 <out_len>
               	cmpq	$32768, %rax            # imm = 0x8000
               	movl	$32768, %ebx            # imm = 0x8000
               	cmovbq	%rax, %rbx
               	leaq	237687(%rip), %r14      # 0x462320 <out_buf>
               	movb	$0, (%rbx,%r14)
               	movq	224531(%rip), %rax      # 0x45efc8 <write+0x45efc8>
               	movq	(%rax), %rsi
               	movq	%r14, %rdi
               	callq	0x4137e0 <fputs@plt>
               	movb	$10, (%rbx,%r14)
               	leaq	34164(%rip), %rax       # 0x430840 <mi_out_buf_stderr>
               	movq	%rax, 237629(%rip)      # 0x462310 <mi_out_default>
               	xorl	%edi, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230815(%rip), %rsi      # 0x460880 <options+0x10>
               	movq	230792(%rip), %rdx      # 0x460870 <options>
               	leaq	115867(%rip), %rbx      # 0x44478a <typeinfo name for kotlin::gc::GCSchedulerData+0x1621>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$1, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230798(%rip), %rsi      # 0x460898 <options+0x28>
               	movq	230775(%rip), %rdx      # 0x460888 <options+0x18>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$2, %edi
               	callq	0x42abe0 <mi_option_get>
               	movl	$3, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230802(%rip), %rsi      # 0x4608c8 <options+0x58>
               	movq	230779(%rip), %rdx      # 0x4608b8 <options+0x48>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$4, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230792(%rip), %rsi      # 0x4608e0 <options+0x70>
               	movq	230769(%rip), %rdx      # 0x4608d0 <options+0x60>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$5, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230782(%rip), %rsi      # 0x4608f8 <options+0x88>
               	movq	230759(%rip), %rdx      # 0x4608e8 <options+0x78>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$6, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230772(%rip), %rsi      # 0x460910 <options+0xa0>
               	movq	230749(%rip), %rdx      # 0x460900 <options+0x90>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$7, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230762(%rip), %rsi      # 0x460928 <options+0xb8>
               	movq	230739(%rip), %rdx      # 0x460918 <options+0xa8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$8, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230752(%rip), %rsi      # 0x460940 <options+0xd0>
               	movq	230729(%rip), %rdx      # 0x460930 <options+0xc0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$9, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230742(%rip), %rsi      # 0x460958 <options+0xe8>
               	movq	230719(%rip), %rdx      # 0x460948 <options+0xd8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230732(%rip), %rsi      # 0x460970 <options+0x100>
               	movq	230709(%rip), %rdx      # 0x460960 <options+0xf0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$11, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230722(%rip), %rsi      # 0x460988 <options+0x118>
               	movq	230699(%rip), %rdx      # 0x460978 <options+0x108>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$12, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230712(%rip), %rsi      # 0x4609a0 <options+0x130>
               	movq	230689(%rip), %rdx      # 0x460990 <options+0x120>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$13, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230702(%rip), %rsi      # 0x4609b8 <options+0x148>
               	movq	230679(%rip), %rdx      # 0x4609a8 <options+0x138>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$14, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230692(%rip), %rsi      # 0x4609d0 <options+0x160>
               	movq	230669(%rip), %rdx      # 0x4609c0 <options+0x150>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$15, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230682(%rip), %rsi      # 0x4609e8 <options+0x178>
               	movq	230659(%rip), %rdx      # 0x4609d8 <options+0x168>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$16, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230672(%rip), %rsi      # 0x460a00 <options+0x190>
               	movq	230649(%rip), %rdx      # 0x4609f0 <options+0x180>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$17, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230662(%rip), %rsi      # 0x460a18 <options+0x1a8>
               	movq	230639(%rip), %rdx      # 0x460a08 <options+0x198>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230652(%rip), %rsi      # 0x460a30 <options+0x1c0>
               	movq	230629(%rip), %rdx      # 0x460a20 <options+0x1b0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$19, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	230642(%rip), %rsi      # 0x460a48 <options+0x1d8>
               	movq	230619(%rip), %rdx      # 0x460a38 <options+0x1c8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	%rax, 230616(%rip)      # 0x460a50 <mi_max_error_count>
               	movl	$19, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	%rax, 230111(%rip)      # 0x460868 <mi_max_warning_count>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4294d0 <mi_process_init>
               	nopw	%cs:(%rax,%rax)

<mi_heap_main_init>:
               	pushq	%rbx
               	cmpq	$0, 229111(%rip)        # 0x4604a0 <_mi_heap_main+0xb28>
               	je	0x4285ad <mi_heap_main_init+0xd>
               	popq	%rbx
               	retq
               	movq	%fs:0, %rax
               	movq	%rax, 229083(%rip)      # 0x460498 <_mi_heap_main+0xb20>
               	leaq	226228(%rip), %rbx      # 0x45f978 <_mi_heap_main>
               	leaq	-43(%rip), %rdi         # 0x4285a0 <mi_heap_main_init>
               	callq	0x428610 <_os_random_weak>
               	movq	%rax, 229065(%rip)      # 0x4604a0 <_mi_heap_main+0xb28>
               	leaq	229082(%rip), %rdi      # 0x4604b8 <_mi_heap_main+0xb40>
               	callq	0x428720 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 229046(%rip)      # 0x4604a8 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 229039(%rip)      # 0x4604b0 <_mi_heap_main+0xb38>
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_os_random_weak>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movabsq	$-4658895280553007687, %r15 # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r14 # imm = 0x94D049BB133111EB
               	leaq	-36(%rip), %rbx         # 0x428610 <_os_random_weak>
               	xorq	%rdi, %rbx
               	movq	%rsp, %rsi
               	movl	$1, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	xorq	(%rsp), %rbx
               	xorq	8(%rsp), %rbx
               	movl	%ebx, %ecx
               	shrl	$17, %ecx
               	xorl	%ebx, %ecx
               	andl	$15, %ecx
               	leaq	1(%rcx), %rax
               	testq	%rcx, %rcx
               	je	0x4286db <_os_random_weak+0xcb>
               	movl	%eax, %ecx
               	andl	$-2, %ecx
               	negq	%rcx
               	jmp	0x42869c <_os_random_weak+0x8c>
               	nopl	(%rax)
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdx
               	shrq	$27, %rdx
               	xorq	%rsi, %rdx
               	imulq	%r14, %rdx
               	movq	%rdx, %rbx
               	shrq	$31, %rbx
               	xorq	%rdx, %rbx
               	addq	$2, %rcx
               	je	0x4286db <_os_random_weak+0xcb>
               	movl	$17, %edx
               	movl	$17, %esi
               	testq	%rbx, %rbx
               	je	0x4286ae <_os_random_weak+0x9e>
               	movq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r14, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	je	0x428670 <_os_random_weak+0x60>
               	movq	%rdi, %rdx
               	jmp	0x428670 <_os_random_weak+0x60>
               	testb	$1, %al
               	je	0x428711 <_os_random_weak+0x101>
               	testq	%rbx, %rbx
               	movl	$17, %eax
               	cmovneq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r14, %rax
               	movq	%rax, %rbx
               	shrq	$31, %rbx
               	xorq	%rax, %rbx
               	movq	%rbx, %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<_mi_random_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdi, %r14
               	movq	%rsp, %rsi
               	movl	$318, %edi              # imm = 0x13E
               	movl	$32, %edx
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x413800 <syscall@plt>
               	cmpq	$32, %rax
               	jne	0x428806 <_mi_random_init+0xe6>
               	movb	(%rsp), %r8b
               	movb	1(%rsp), %r15b
               	movb	2(%rsp), %dil
               	movb	3(%rsp), %al
               	movl	%eax, 44(%rsp)
               	movb	4(%rsp), %cl
               	movb	5(%rsp), %al
               	movl	%eax, 52(%rsp)
               	movb	6(%rsp), %al
               	movl	%eax, 48(%rsp)
               	movb	7(%rsp), %al
               	movl	%eax, 64(%rsp)
               	movb	8(%rsp), %dl
               	movb	9(%rsp), %al
               	movl	%eax, 76(%rsp)
               	movb	10(%rsp), %al
               	movl	%eax, 92(%rsp)
               	movb	11(%rsp), %al
               	movl	%eax, 100(%rsp)
               	movb	12(%rsp), %sil
               	movb	13(%rsp), %al
               	movl	%eax, 60(%rsp)
               	movb	14(%rsp), %al
               	movl	%eax, 80(%rsp)
               	movb	15(%rsp), %al
               	movl	%eax, 96(%rsp)
               	movb	16(%rsp), %r10b
               	movb	17(%rsp), %r13b
               	movb	18(%rsp), %al
               	movl	%eax, 56(%rsp)
               	movb	19(%rsp), %al
               	movl	%eax, 88(%rsp)
               	movb	20(%rsp), %r11b
               	movb	21(%rsp), %bpl
               	movb	22(%rsp), %r12b
               	movb	23(%rsp), %al
               	movl	%eax, 68(%rsp)
               	movb	24(%rsp), %r9b
               	movb	25(%rsp), %al
               	movl	%eax, 72(%rsp)
               	movb	26(%rsp), %al
               	jmp	0x428b47 <_mi_random_init+0x427>
               	movabsq	$-4658895280553007687, %rbx # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r15 # imm = 0x94D049BB133111EB
               	leaq	115014(%rip), %rdi      # 0x444967 <typeinfo name for kotlin::gc::GCSchedulerData+0x17fe>
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	leaq	104(%rsp), %rsi
               	movl	$1, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	leaq	-558(%rip), %rcx        # 0x428610 <_os_random_weak>
               	xorq	104(%rsp), %rcx
               	xorq	112(%rsp), %rcx
               	movl	%ecx, %edx
               	shrl	$17, %edx
               	xorl	%ecx, %edx
               	andl	$15, %edx
               	leaq	1(%rdx), %rax
               	testq	%rdx, %rdx
               	je	0x4288db <_mi_random_init+0x1bb>
               	movl	%eax, %edx
               	andl	$-2, %edx
               	negq	%rdx
               	jmp	0x42889c <_mi_random_init+0x17c>
               	nopl	(%rax)
               	movq	%rsi, %rcx
               	shrq	$30, %rcx
               	xorq	%rsi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rsi
               	shrq	$27, %rsi
               	xorq	%rcx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	addq	$2, %rdx
               	je	0x4288db <_mi_random_init+0x1bb>
               	movl	$17, %esi
               	movl	$17, %edi
               	testq	%rcx, %rcx
               	je	0x4288ae <_mi_random_init+0x18e>
               	movq	%rcx, %rdi
               	movq	%rdi, %rcx
               	shrq	$30, %rcx
               	xorq	%rdi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rdi
               	shrq	$27, %rdi
               	xorq	%rcx, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rcx
               	shrq	$31, %rcx
               	xorq	%rdi, %rcx
               	je	0x428870 <_mi_random_init+0x150>
               	movq	%rcx, %rsi
               	jmp	0x428870 <_mi_random_init+0x150>
               	testb	$1, %al
               	je	0x428911 <_mi_random_init+0x1f1>
               	testq	%rcx, %rcx
               	movl	$17, %eax
               	cmovneq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	testq	%rcx, %rcx
               	movl	$17, %ebp
               	cmoveq	%rbp, %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$27, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %r8
               	shrq	$31, %r8
               	xorq	%rcx, %r8
               	movq	%r8, %rax
               	cmoveq	%rbp, %rax
               	movl	%r8d, (%rsp)
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	movl	%ecx, 4(%rsp)
               	movq	%rcx, %rax
               	cmoveq	%rbp, %rax
               	movq	%rax, %rdx
               	shrq	$30, %rdx
               	xorq	%rax, %rdx
               	imulq	%rbx, %rdx
               	movq	%rdx, %rax
               	shrq	$27, %rax
               	xorq	%rdx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$31, %rdx
               	xorq	%rax, %rdx
               	movl	%edx, 8(%rsp)
               	movq	%rdx, %rax
               	cmoveq	%rbp, %rax
               	movq	%rax, %rsi
               	shrq	$30, %rsi
               	xorq	%rax, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rax
               	shrq	$27, %rax
               	xorq	%rsi, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rsi
               	shrq	$31, %rsi
               	xorq	%rax, %rsi
               	movl	%esi, 12(%rsp)
               	movq	%rsi, %rax
               	cmoveq	%rbp, %rax
               	movq	%rax, %rdi
               	shrq	$30, %rdi
               	xorq	%rax, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rax
               	shrq	$27, %rax
               	xorq	%rdi, %rax
               	imulq	%r15, %rax
               	movq	%rax, %r10
               	shrq	$31, %r10
               	xorq	%rax, %r10
               	movq	%r10, %rax
               	cmoveq	%rbp, %rax
               	movl	%r10d, 16(%rsp)
               	movq	%rax, %rdi
               	shrq	$30, %rdi
               	xorq	%rax, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rax
               	shrq	$27, %rax
               	xorq	%rdi, %rax
               	imulq	%r15, %rax
               	movq	%rax, %r11
               	shrq	$31, %r11
               	xorq	%rax, %r11
               	movl	%r11d, 20(%rsp)
               	movq	%r11, %rdi
               	cmoveq	%rbp, %rdi
               	movq	%rdi, %rax
               	shrq	$30, %rax
               	xorq	%rdi, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rdi
               	shrq	$27, %rdi
               	xorq	%rax, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %r9
               	shrq	$31, %r9
               	xorq	%rdi, %r9
               	movl	%r9d, 24(%rsp)
               	cmovneq	%r9, %rbp
               	movq	%rbp, %rax
               	shrq	$30, %rax
               	xorq	%rbp, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rdi
               	shrq	$27, %rdi
               	xorq	%rax, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rax
               	shrq	$31, %rax
               	xorl	%edi, %eax
               	movl	%eax, 28(%rsp)
               	movl	%r8d, %r15d
               	shrl	$8, %r15d
               	movl	%r8d, %edi
               	shrl	$16, %edi
               	movl	%r8d, %eax
               	shrl	$24, %eax
               	movl	%eax, 44(%rsp)
               	movl	%ecx, %eax
               	shrl	$8, %eax
               	movl	%eax, 52(%rsp)
               	movl	%ecx, %eax
               	shrl	$16, %eax
               	movl	%eax, 48(%rsp)
               	movl	%ecx, %eax
               	shrl	$24, %eax
               	movl	%eax, 64(%rsp)
               	movl	%edx, %eax
               	shrl	$8, %eax
               	movl	%eax, 76(%rsp)
               	movl	%edx, %eax
               	shrl	$16, %eax
               	movl	%eax, 92(%rsp)
               	movl	%edx, %eax
               	shrl	$24, %eax
               	movl	%eax, 100(%rsp)
               	movl	%esi, %eax
               	shrl	$8, %eax
               	movl	%eax, 60(%rsp)
               	movl	%esi, %eax
               	shrl	$16, %eax
               	movl	%eax, 80(%rsp)
               	movl	%esi, %eax
               	shrl	$24, %eax
               	movl	%eax, 96(%rsp)
               	movl	%r10d, %r13d
               	shrl	$8, %r13d
               	movl	%r10d, %eax
               	shrl	$16, %eax
               	movl	%eax, 56(%rsp)
               	movl	%r10d, %eax
               	shrl	$24, %eax
               	movl	%eax, 88(%rsp)
               	movl	%r11d, %ebp
               	shrl	$8, %ebp
               	movl	%r11d, %r12d
               	shrl	$16, %r12d
               	movl	%r11d, %eax
               	shrl	$24, %eax
               	movl	%eax, 68(%rsp)
               	movl	%r9d, %eax
               	shrl	$8, %eax
               	movl	%eax, 72(%rsp)
               	movl	%r9d, %eax
               	shrl	$16, %eax
               	movl	%eax, 84(%rsp)
               	movzbl	%r8b, %ebx
               	movzbl	%r15b, %eax
               	shll	$8, %eax
               	orl	%ebx, %eax
               	movzbl	%dil, %edi
               	shll	$16, %edi
               	orl	%eax, %edi
               	movzbl	44(%rsp), %eax
               	shll	$24, %eax
               	orl	%edi, %eax
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 116(%r14)
               	movdqu	%xmm0, 104(%r14)
               	movdqu	%xmm0, 88(%r14)
               	movdqu	%xmm0, 72(%r14)
               	movdqu	%xmm0, 56(%r14)
               	movaps	106188(%rip), %xmm1     # 0x442a60 <_IO_stdin_used+0xa0>
               	movups	%xmm1, (%r14)
               	movl	%eax, 16(%r14)
               	movzbl	%cl, %eax
               	movzbl	52(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	48(%rsp), %edi
               	shll	$16, %edi
               	orl	%ecx, %edi
               	movzbl	%r10b, %eax
               	movzbl	%r11b, %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%dl, %eax
               	movzbl	%sil, %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm1
               	pinsrw	$1, %ecx, %xmm1
               	movzbl	64(%rsp), %eax
               	shll	$24, %eax
               	orl	%edi, %eax
               	movzbl	%r13b, %ecx
               	movzbl	%bpl, %edx
               	shll	$8, %edx
               	orl	%ecx, %edx
               	movzbl	76(%rsp), %ecx
               	movzbl	60(%rsp), %esi
               	shll	$8, %esi
               	orl	%ecx, %esi
               	movd	%esi, %xmm2
               	pinsrw	$1, %edx, %xmm2
               	movzbl	56(%rsp), %ecx
               	movzbl	%r12b, %edx
               	shll	$8, %edx
               	orl	%ecx, %edx
               	movzbl	92(%rsp), %ecx
               	movzbl	80(%rsp), %esi
               	shll	$8, %esi
               	orl	%ecx, %esi
               	movd	%esi, %xmm3
               	pinsrw	$1, %edx, %xmm3
               	movzbl	100(%rsp), %ecx
               	movd	%ecx, %xmm4
               	movzbl	96(%rsp), %ecx
               	pinsrw	$2, %ecx, %xmm4
               	movl	%eax, 20(%r14)
               	movzbl	88(%rsp), %eax
               	pinsrw	$4, %eax, %xmm4
               	movzbl	68(%rsp), %eax
               	pinsrw	$6, %eax, %xmm4
               	movzbl	%r9b, %eax
               	movzbl	72(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	punpcklbw	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm3    # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3],xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
               	punpcklwd	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3]
               	pslld	$8, %xmm2
               	por	%xmm1, %xmm0
               	por	%xmm2, %xmm0
               	pslld	$24, %xmm4
               	por	%xmm0, %xmm4
               	movdqu	%xmm4, 24(%r14)
               	movzbl	84(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	27(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 40(%r14)
               	movl	28(%rsp), %eax
               	movl	%eax, 44(%r14)
               	movq	$0, 48(%r14)
               	movl	%r14d, 56(%r14)
               	movq	%r14, %rax
               	shrq	$32, %rax
               	movl	%eax, 60(%r14)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<_mi_heap_random_next>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	leaq	2880(%rdi), %r14
               	movl	3008(%rdi), %eax
               	testl	%eax, %eax
               	jg	0x428d12 <_mi_heap_random_next+0x32>
               	movq	%r14, %rdi
               	callq	0x431970 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	movl	$16, %ebp
               	movl	$16, %ecx
               	subl	%eax, %ecx
               	movslq	%ecx, %rax
               	movl	2944(%rbx,%rax,4), %r15d
               	movl	$0, 2944(%rbx,%rax,4)
               	movl	3008(%rbx), %ecx
               	leal	-1(%rcx), %eax
               	movl	%eax, 3008(%rbx)
               	cmpl	$1, %ecx
               	jg	0x428d5f <_mi_heap_random_next+0x7f>
               	movq	%r14, %rdi
               	callq	0x431970 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	shlq	$32, %r15
               	subl	%eax, %ebp
               	movslq	%ebp, %rcx
               	movl	2944(%rbx,%rcx,4), %eax
               	orq	%r15, %rax
               	movl	$0, 2944(%rbx,%rcx,4)
               	addl	$-1, 3008(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_process_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$472, %rsp              # imm = 0x1D8
               	cmpb	$1, 233572(%rip)        # 0x461e0c <_mi_process_is_initialized>
               	jne	0x4294ab <mi_process_done+0x71b>
               	cmpb	$0, 333603(%rip)        # 0x47a4d8 <mi_process_done.process_done>
               	jne	0x4294ab <mi_process_done+0x71b>
               	movb	$1, 333590(%rip)        # 0x47a4d8 <mi_process_done.process_done>
               	movq	$-80, %rbx
               	movq	%fs:(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x42c690 <mi_heap_collect_ex>
               	movl	$1, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x428df9 <mi_process_done+0x69>
               	movl	$2, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42948f <mi_process_done+0x6ff>
               	callq	0x42a9e0 <mi_thread_init>
               	movq	%fs:(%rbx), %rax
               	movl	$176, %edi
               	addq	(%rax), %rdi
               	callq	0x42c1a0 <mi_stats_merge_from>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	105554(%rip), %xmm0     # 0x442a70 <_IO_stdin_used+0xb0>
               	movups	%xmm0, 40(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	leaq	113106(%rip), %rdi      # 0x444809 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a0>
               	leaq	113092(%rip), %rbp      # 0x444802 <typeinfo name for kotlin::gc::GCSchedulerData+0x1699>
               	leaq	113075(%rip), %r10      # 0x4447f8 <typeinfo name for kotlin::gc::GCSchedulerData+0x168f>
               	leaq	113060(%rip), %r11      # 0x4447f0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1687>
               	leaq	112990(%rip), %rdx      # 0x4447b1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1648>
               	leaq	113020(%rip), %rcx      # 0x4447d6 <typeinfo name for kotlin::gc::GCSchedulerData+0x166d>
               	leaq	113024(%rip), %r8       # 0x4447e1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1678>
               	leaq	113024(%rip), %r9       # 0x4447e8 <typeinfo name for kotlin::gc::GCSchedulerData+0x167f>
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %rbx
               	movq	%rbx, %rsi
               	movl	$0, %eax
               	pushq	%rdi
               	pushq	%rbp
               	pushq	%r10
               	pushq	%r11
               	callq	0x430a30 <_mi_fprintf>
               	addq	$32, %rsp
               	leaq	233458(%rip), %rdi      # 0x461e80 <_mi_stats_main+0x40>
               	leaq	113020(%rip), %rsi      # 0x444811 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a8>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233367(%rip), %rbp      # 0x461e40 <_mi_stats_main>
               	leaq	233456(%rip), %rdi      # 0x461ea0 <_mi_stats_main+0x60>
               	leaq	112995(%rip), %rsi      # 0x44481a <typeinfo name for kotlin::gc::GCSchedulerData+0x16b1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233461(%rip), %rdi      # 0x461ec0 <_mi_stats_main+0x80>
               	leaq	112978(%rip), %rsi      # 0x444824 <typeinfo name for kotlin::gc::GCSchedulerData+0x16bb>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233466(%rip), %rdi      # 0x461ee0 <_mi_stats_main+0xa0>
               	leaq	112957(%rip), %rsi      # 0x44482a <typeinfo name for kotlin::gc::GCSchedulerData+0x16c1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	112945(%rip), %rsi      # 0x444832 <typeinfo name for kotlin::gc::GCSchedulerData+0x16c9>
               	movq	%rbp, %rdi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233446(%rip), %rdi      # 0x461f00 <_mi_stats_main+0xc0>
               	leaq	112922(%rip), %rbp      # 0x44483b <typeinfo name for kotlin::gc::GCSchedulerData+0x16d2>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233638(%rip), %rdi      # 0x461fe0 <_mi_stats_main+0x1a0>
               	leaq	112901(%rip), %rsi      # 0x444846 <typeinfo name for kotlin::gc::GCSchedulerData+0x16dd>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233225(%rip), %rdi      # 0x461e60 <_mi_stats_main+0x20>
               	leaq	112880(%rip), %rsi      # 0x44484e <typeinfo name for kotlin::gc::GCSchedulerData+0x16e5>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233388(%rip), %rdi      # 0x461f20 <_mi_stats_main+0xe0>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	leaq	233587(%rip), %rdi      # 0x462000 <_mi_stats_main+0x1c0>
               	leaq	112832(%rip), %rsi      # 0x444854 <typeinfo name for kotlin::gc::GCSchedulerData+0x16eb>
               	movq	%rbx, %rdx
               	callq	0x431820 <mi_stat_counter_print>
               	leaq	233613(%rip), %rdi      # 0x462030 <_mi_stats_main+0x1f0>
               	leaq	112820(%rip), %rsi      # 0x44485e <typeinfo name for kotlin::gc::GCSchedulerData+0x16f5>
               	movq	%rbx, %rdx
               	callq	0x431820 <mi_stat_counter_print>
               	leaq	233559(%rip), %rdi      # 0x462010 <_mi_stats_main+0x1d0>
               	leaq	112808(%rip), %rsi      # 0x444868 <typeinfo name for kotlin::gc::GCSchedulerData+0x16ff>
               	movq	%rbx, %rdx
               	callq	0x431820 <mi_stat_counter_print>
               	leaq	233553(%rip), %rdi      # 0x462020 <_mi_stats_main+0x1e0>
               	leaq	112792(%rip), %rsi      # 0x44486e <typeinfo name for kotlin::gc::GCSchedulerData+0x1705>
               	movq	%rbx, %rdx
               	callq	0x431820 <mi_stat_counter_print>
               	leaq	233307(%rip), %rdi      # 0x461f40 <_mi_stats_main+0x100>
               	leaq	112778(%rip), %rsi      # 0x444876 <typeinfo name for kotlin::gc::GCSchedulerData+0x170d>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b50 <mi_stat_print>
               	movq	233542(%rip), %rcx      # 0x462048 <_mi_stats_main+0x208>
               	testq	%rcx, %rcx
               	je	0x429032 <mi_process_done+0x2a2>
               	movq	233522(%rip), %rax      # 0x462040 <_mi_stats_main+0x200>
               	addq	%rax, %rax
               	leaq	(%rax,%rax,4), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x42902b <mi_process_done+0x29b>
               	cqto
               	idivq	%rcx
               	movq	%rax, %r14
               	jmp	0x429032 <mi_process_done+0x2a2>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %r14d
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%r14, %rax
               	imulq	%rcx
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %r8
               	addq	%rax, %r8
               	leaq	(%r8,%r8), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %r14
               	leaq	112665(%rip), %rdx      # 0x44487e <typeinfo name for kotlin::gc::GCSchedulerData+0x1715>
               	leaq	112678(%rip), %rcx      # 0x444892 <typeinfo name for kotlin::gc::GCSchedulerData+0x1729>
               	leaq	16(%rsp), %rsi
               	movq	%r14, %r9
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	266966(%rip), %r8       # 0x46a358 <_mi_numa_node_count>
               	testq	%r8, %r8
               	je	0x4294bd <mi_process_done+0x72d>
               	leaq	112649(%rip), %rdx      # 0x44489b <typeinfo name for kotlin::gc::GCSchedulerData+0x1732>
               	leaq	112653(%rip), %rcx      # 0x4448a6 <typeinfo name for kotlin::gc::GCSchedulerData+0x173d>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	266977(%rip), %rbx      # 0x46a390 <mi_process_start>
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	72(%rsp)
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	addq	266906(%rip), %rbx      # 0x46a388 <mi_clock_diff>
               	subq	%rbx, %rbp
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413810 <getrusage@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$2361183241434822607, %r14 # imm = 0x20C49BA5E353F7CF
               	movq	%r14, %rax
               	imulq	72(%rsp)
               	movq	%rdx, %r13
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r13
               	addq	%rax, %r13
               	imulq	$1000, 80(%rsp), %rsi   # imm = 0x3E8
               	addq	%rcx, %r13
               	movq	%r14, %rax
               	imulq	88(%rsp)
               	movq	%rdx, %rbx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rbx
               	addq	%rax, %rbx
               	addq	%rsi, %rbx
               	movq	136(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	232779(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	movq	%rax, 8(%rsp)
               	movq	232775(%rip), %rax      # 0x461eb8 <_mi_stats_main+0x78>
               	movq	96(%rsp), %r12
               	shlq	$10, %r12
               	movq	%rbp, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %rbp
               	leaq	112399(%rip), %rdx      # 0x4448b1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1748>
               	leaq	112412(%rip), %rcx      # 0x4448c5 <typeinfo name for kotlin::gc::GCSchedulerData+0x175c>
               	movq	%r15, %rsi
               	movq	%rbp, %r9
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	%r13, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %r13
               	movq	%rbx, %rax
               	imulq	%r14
               	movq	%rdx, %rdi
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rdi
               	addq	%rax, %rdi
               	imulq	$1000, %rdi, %rax       # imm = 0x3E8
               	subq	%rax, %rbx
               	subq	$8, %rsp
               	leaq	112330(%rip), %rdx      # 0x4448cd <typeinfo name for kotlin::gc::GCSchedulerData+0x1764>
               	leaq	112388(%rip), %rcx      # 0x44490e <typeinfo name for kotlin::gc::GCSchedulerData+0x17a5>
               	movq	%r15, %rsi
               	movq	%r13, %r9
               	movl	$0, %eax
               	pushq	64(%rsp)
               	pushq	%rbx
               	pushq	%rdi
               	callq	0x430a30 <_mi_fprintf>
               	addq	$32, %rsp
               	movq	%r12, %rax
               	negq	%rax
               	cmovlq	%r12, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x429262 <mi_process_done+0x4d2>
               	leaq	112345(%rip), %rdx      # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	112345(%rip), %r8       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	movq	8(%rsp), %rbx
               	jmp	0x429330 <mi_process_done+0x5a0>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	112304(%rip), %rcx      # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	112299(%rip), %rdx      # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	112266(%rip), %r9       # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%r12, %rax
               	shrq	$32, %rax
               	je	0x4292c4 <mi_process_done+0x534>
               	movq	%r12, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4292cd <mi_process_done+0x53d>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	8(%rsp), %rbx
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	112138(%rip), %rbp      # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	112139(%rip), %rdx      # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x413820 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	112453(%rip), %rdx      # 0x444a7c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	testq	%rbx, %rbx
               	je	0x42947c <mi_process_done+0x6ec>
               	leaq	112090(%rip), %rdx      # 0x444932 <typeinfo name for kotlin::gc::GCSchedulerData+0x17c9>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	%rbx, %rax
               	negq	%rax
               	cmovlq	%rbx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x42939c <mi_process_done+0x60c>
               	leaq	112025(%rip), %rdx      # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	112025(%rip), %r8       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%ebx, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x429464 <mi_process_done+0x6d4>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	111990(%rip), %rcx      # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	111985(%rip), %rdx      # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	111952(%rip), %r9       # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x4293fe <mi_process_done+0x66e>
               	movq	%rbx, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x429406 <mi_process_done+0x676>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	111830(%rip), %rbp      # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	111831(%rip), %rdx      # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x413820 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	112145(%rip), %rdx      # 0x444a7c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	112282(%rip), %rdx      # 0x444b1d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	225282(%rip), %rsi      # 0x460498 <_mi_heap_main+0xb20>
               	leaq	111359(%rip), %rdi      # 0x44479c <typeinfo name for kotlin::gc::GCSchedulerData+0x1633>
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movb	$0, 232405(%rip)        # 0x462080 <os_preloading>
               	addq	$472, %rsp              # imm = 0x1D8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42bf90 <_mi_os_numa_node_count_get>
               	movq	%rax, %r8
               	jmp	0x42908b <mi_process_done+0x2fb>
               	nopw	(%rax,%rax)

<mi_process_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	cmpb	$0, 231719(%rip)        # 0x461e0c <_mi_process_is_initialized>
               	jne	0x42a29c <mi_process_init+0xdcc>
               	movb	$1, 231706(%rip)        # 0x461e0c <_mi_process_is_initialized>
               	cmpb	$0, 232328(%rip)        # 0x462081 <mi_process_setup_auto_thread_done.tls_initialized>
               	jne	0x42953e <mi_process_init+0x6e>
               	movb	$1, 232319(%rip)        # 0x462081 <mi_process_setup_auto_thread_done.tls_initialized>
               	leaq	226127(%rip), %rdi      # 0x460858 <_mi_heap_default_key>
               	leaq	3504(%rip), %rsi        # 0x42a2c0 <mi_pthread_done>
               	callq	0x413830 <pthread_key_create@plt>
               	leaq	222300(%rip), %rax      # 0x45f978 <_mi_heap_main>
               	movq	$-80, %rcx
               	movq	%rax, %fs:(%rcx)
               	movl	226091(%rip), %edi      # 0x460858 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42953e <mi_process_init+0x6e>
               	leaq	222271(%rip), %rsi      # 0x45f978 <_mi_heap_main>
               	callq	0x413840 <pthread_setspecific@plt>
               	movq	%fs:0, %rsi
               	leaq	109691(%rip), %rdi      # 0x4441c9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1060>
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movl	$30, %edi
               	callq	0x413850 <sysconf@plt>
               	testq	%rax, %rax
               	jle	0x42956b <mi_process_init+0x9b>
               	movq	%rax, 226037(%rip)      # 0x460860 <os_page_size>
               	movb	$1, 265654(%rip)        # 0x46a328 <large_os_page_size>
               	cmpq	$0, 225062(%rip)        # 0x4604a0 <_mi_heap_main+0xb28>
               	jne	0x4295d0 <mi_process_init+0x100>
               	movq	%fs:0, %rax
               	movq	%rax, 225036(%rip)      # 0x460498 <_mi_heap_main+0xb20>
               	leaq	222181(%rip), %rbx      # 0x45f978 <_mi_heap_main>
               	leaq	-4090(%rip), %rdi       # 0x4285a0 <mi_heap_main_init>
               	callq	0x428610 <_os_random_weak>
               	movq	%rax, 225018(%rip)      # 0x4604a0 <_mi_heap_main+0xb28>
               	leaq	225035(%rip), %rdi      # 0x4604b8 <_mi_heap_main+0xb40>
               	callq	0x428720 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 224999(%rip)      # 0x4604a8 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 224992(%rip)      # 0x4604b0 <_mi_heap_main+0xb38>
               	leaq	109575(%rip), %rdi      # 0x4441de <typeinfo name for kotlin::gc::GCSchedulerData+0x1075>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	callq	0x42a9e0 <mi_thread_init>
               	callq	0x42a9e0 <mi_thread_init>
               	movq	$-80, %r15
               	movq	%fs:(%r15), %rax
               	movl	$176, %edi
               	addq	(%rax), %rdi
               	leaq	231484(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x429615 <mi_process_init+0x145>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	leaq	231460(%rip), %rdi      # 0x461e40 <_mi_stats_main>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	cmpq	$0, 265568(%rip)        # 0x46a390 <mi_process_start>
               	jne	0x4296f2 <mi_process_init+0x222>
               	cmpq	$0, 265546(%rip)        # 0x46a388 <mi_clock_diff>
               	jne	0x4296b6 <mi_process_init+0x1e6>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	movabsq	$-4835703278458516699, %rax # imm = 0xBCE4217D2849CB25
               	imulq	16(%rsp)
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 265426(%rip)      # 0x46a388 <mi_clock_diff>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rcx, %rdx
               	movq	%rdx, 265374(%rip)      # 0x46a390 <mi_process_start>
               	movl	$7, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a08b <mi_process_init+0xbbb>
               	movl	$7, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a08b <mi_process_init+0xbbb>
               	movq	%rax, %rbx
               	movq	265270(%rip), %rax      # 0x46a358 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x42a2ab <mi_process_init+0xddb>
               	imulq	$500, %rbx, %rcx        # imm = 0x1F4
               	testq	%rax, %rax
               	movl	$1, %esi
               	cmovneq	%rax, %rsi
               	movq	%rbx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429777 <mi_process_init+0x2a7>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	je	0x42978c <mi_process_init+0x2bc>
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429790 <mi_process_init+0x2c0>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429796 <mi_process_init+0x2c6>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	jne	0x429761 <mi_process_init+0x291>
               	xorl	%eax, %eax
               	jmp	0x42979a <mi_process_init+0x2ca>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	addq	$50, %rax
               	leaq	(%rax,%rax), %rcx
               	movq	%rcx, 88(%rsp)
               	movq	%rax, 32(%rsp)
               	addq	$1, %rax
               	movq	%rax, 80(%rsp)
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	xorl	%ecx, %ecx
               	movq	%rsi, 40(%rsp)
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	xorl	%r12d, %r12d
               	cmpq	56(%rsp), %rcx
               	setb	%r12b
               	addq	48(%rsp), %r12
               	je	0x429f2b <mi_process_init+0xa5b>
               	testl	%ecx, %ecx
               	movq	%rbx, 72(%rsp)
               	movq	%rcx, 64(%rsp)
               	js	0x429820 <mi_process_init+0x350>
               	movl	%ecx, %ebp
               	movq	265050(%rip), %rcx      # 0x46a358 <_mi_numa_node_count>
               	testq	%rcx, %rcx
               	je	0x429f77 <mi_process_init+0xaa7>
               	cmpq	%rcx, %rbp
               	jb	0x429814 <mi_process_init+0x344>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %ebp
               	movq	%rbp, 24(%rsp)
               	jmp	0x42982a <mi_process_init+0x35a>
               	nop
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movq	%rax, 24(%rsp)
               	movq	%r12, %rbp
               	shlq	$30, %rbp
               	movq	265032(%rip), %rbx      # 0x46a380 <mi_huge_start>
               	jmp	0x429855 <mi_process_init+0x385>
               	nopl	(%rax)
               	leaq	(%r14,%rbp), %rcx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rcx, 265008(%rip)      # 0x46a380 <mi_huge_start>
               	movq	%rax, %rbx
               	je	0x429880 <mi_process_init+0x3b0>
               	movq	%rbx, %r14
               	testq	%rbx, %rbx
               	jne	0x429840 <mi_process_init+0x370>
               	movq	%fs:(%r15), %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, %r14
               	andl	$536739840, %r14d       # imm = 0x1FFE0000
               	shlq	$13, %r14
               	orq	%r13, %r14
               	jmp	0x429840 <mi_process_init+0x370>
               	cmpq	$0, 264960(%rip)        # 0x46a388 <mi_clock_diff>
               	jne	0x429901 <mi_process_init+0x431>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %r15
               	movq	%r15, %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	movabsq	$-4835703278458516699, %rax # imm = 0xBCE4217D2849CB25
               	imulq	16(%rsp)
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	xorl	%edi, %edi
               	movq	%r15, %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 264839(%rip)      # 0x46a388 <mi_clock_diff>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	movl	$1, %eax
               	movq	24(%rsp), %rcx
               	shlq	%cl, %rax
               	movq	%rax, 96(%rsp)
               	xorl	%r13d, %r13d
               	cmpl	$64, %ecx
               	jb	0x429983 <mi_process_init+0x4b3>
               	jmp	0x429b9f <mi_process_init+0x6cf>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429f52 <mi_process_init+0xa82>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429e40 <mi_process_init+0x970>
               	movq	%r13, %r15
               	shlq	$30, %r15
               	addq	%r14, %r15
               	movq	264628(%rip), %rax      # 0x46a348 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 264629(%rip)        # 0x46a350 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x429a1e <mi_process_init+0x54e>
               	movb	$1, 264569(%rip)        # 0x46a350 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	108800(%rip), %rdi      # 0x4442e5 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jb	0x429a7a <mi_process_init+0x5aa>
               	movq	%rax, %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movl	$0, (%rsp)
               	movl	$237, %edi
               	movl	$1073741824, %edx       # imm = 0x40000000
               	movl	$1, %ecx
               	movl	$64, %r9d
               	movq	%rbx, %rsi
               	leaq	8(%rsp), %r8
               	xorl	%eax, %eax
               	callq	0x413800 <syscall@plt>
               	testq	%rax, %rax
               	je	0x429a7a <mi_process_init+0x5aa>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	leaq	108854(%rip), %rdi      # 0x4443a1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1238>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	cmpq	%r15, %rbx
               	jne	0x429d50 <mi_process_init+0x880>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 230439(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	230417(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x429ab0 <mi_process_init+0x5e0>
               	lock
               	cmpxchgq	%rcx, 230402(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x429aa0 <mi_process_init+0x5d0>
               	lock
               	addq	$1073741824, 230372(%rip) # imm = 0x40000000
                                                # 0x461ea0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 230350(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	230328(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429af0 <mi_process_init+0x620>
               	lock
               	cmpxchgq	%rcx, 230306(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x429ae0 <mi_process_init+0x610>
               	lock
               	addq	$1073741824, 230276(%rip) # imm = 0x40000000
                                                # 0x461e80 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x429976 <mi_process_init+0x4a6>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	264260(%rip), %rax      # 0x46a388 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x42996d <mi_process_init+0x49d>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429958 <mi_process_init+0x488>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42995e <mi_process_init+0x48e>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429f52 <mi_process_init+0xa82>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429e40 <mi_process_init+0x970>
               	movq	%r13, %r15
               	shlq	$30, %r15
               	addq	%r14, %r15
               	movq	264088(%rip), %rax      # 0x46a348 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 264089(%rip)        # 0x46a350 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x429c3b <mi_process_init+0x76b>
               	movb	$1, 264029(%rip)        # 0x46a350 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	108260(%rip), %rdi      # 0x4442e5 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jae	0x429d40 <mi_process_init+0x870>
               	cmpq	%r15, %rbx
               	jne	0x429d50 <mi_process_init+0x880>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 229990(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	229968(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x429c70 <mi_process_init+0x7a0>
               	lock
               	cmpxchgq	%rcx, 229954(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x429c60 <mi_process_init+0x790>
               	lock
               	addq	$1073741824, 229924(%rip) # imm = 0x40000000
                                                # 0x461ea0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 229902(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	229880(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429cb0 <mi_process_init+0x7e0>
               	lock
               	cmpxchgq	%rcx, 229858(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x429ca0 <mi_process_init+0x7d0>
               	lock
               	addq	$1073741824, 229828(%rip) # imm = 0x40000000
                                                # 0x461e80 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x429b92 <mi_process_init+0x6c2>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	263812(%rip), %rax      # 0x46a388 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x429b89 <mi_process_init+0x6b9>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429b74 <mi_process_init+0x6a4>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429b7a <mi_process_init+0x6aa>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rbx
               	cmpq	%r15, %rbx
               	je	0x429c44 <mi_process_init+0x774>
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	movq	24(%rsp), %rbp
               	je	0x429e48 <mi_process_init+0x978>
               	leaq	108145(%rip), %rdi      # 0x4443d6 <typeinfo name for kotlin::gc::GCSchedulerData+0x126d>
               	movq	%r13, %rsi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%rbx, %rdi
               	callq	0x413890 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 229673(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	229649(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rdx, %rax
               	jge	0x429db0 <mi_process_init+0x8e0>
               	lock
               	cmpxchgq	%rdx, 229634(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x429da0 <mi_process_init+0x8d0>
               	lock
               	addq	$1073741824, 229612(%rip) # imm = 0x40000000
                                                # 0x461ea8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 229580(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	229558(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429df0 <mi_process_init+0x920>
               	lock
               	cmpxchgq	%rdx, 229538(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x429de0 <mi_process_init+0x910>
               	lock
               	addq	$1073741824, 229516(%rip) # imm = 0x40000000
                                                # 0x461e88 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429e48 <mi_process_init+0x978>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	leaq	107554(%rip), %rdi      # 0x44423f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r14
               	testq	%r14, %r14
               	jne	0x429e58 <mi_process_init+0x988>
               	jmp	0x429f8d <mi_process_init+0xabd>
               	nop
               	movq	%r12, %r13
               	movq	24(%rsp), %rbp
               	testq	%r13, %r13
               	cmoveq	%r13, %r14
               	testq	%r14, %r14
               	je	0x429f8d <mi_process_init+0xabd>
               	testq	%r13, %r13
               	je	0x429f8d <mi_process_init+0xabd>
               	leaq	107765(%rip), %rdi      # 0x44435d <typeinfo name for kotlin::gc::GCSchedulerData+0x11f4>
               	movl	%ebp, %esi
               	movq	%r13, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	movabsq	$1099511627712, %rax    # imm = 0xFFFFFFFFC0
               	andq	%rax, %rbx
               	movq	%rbx, %rdi
               	shrq	$2, %rdi
               	addq	$64, %rdi
               	callq	0x42b850 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x429fa3 <mi_process_init+0xad3>
               	movq	%rbx, 8(%rax)
               	shrq	$6, %rbx
               	movq	%rbx, 16(%rax)
               	xchgq	%r14, (%rax)
               	movl	%ebp, 24(%rax)
               	movb	$1, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	movl	$0, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	56(%rax,%rbx,8), %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 229848(%rip)      # 0x4620c0 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x429f00 <mi_process_init+0xa30>
               	lock
               	subq	$1, 229829(%rip)        # 0x4620c0 <mi_arena_count>
               	jmp	0x429f0b <mi_process_init+0xa3b>
               	leaq	229881(%rip), %rdx      # 0x462100 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	movq	$-80, %r15
               	movq	72(%rsp), %rbx
               	movq	40(%rsp), %rsi
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	movq	64(%rsp), %rcx
               	movq	%rbx, %rax
               	movl	$0, %ebx
               	subq	%r12, %rax
               	cmovaeq	%rax, %rbx
               	jbe	0x42a08b <mi_process_init+0xbbb>
               	addq	$1, %rcx
               	cmpq	%rsi, %rcx
               	jb	0x4297d0 <mi_process_init+0x300>
               	jmp	0x42a08b <mi_process_init+0xbbb>
               	movq	24(%rsp), %rbp
               	leaq	107691(%rip), %rdi      # 0x444409 <typeinfo name for kotlin::gc::GCSchedulerData+0x12a0>
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r14
               	testq	%r14, %r14
               	jne	0x429e58 <mi_process_init+0x988>
               	jmp	0x429f8d <mi_process_init+0xabd>
               	callq	0x42bf90 <_mi_os_numa_node_count_get>
               	movq	%rax, %rcx
               	cmpq	%rcx, %rbp
               	jae	0x42980c <mi_process_init+0x33c>
               	jmp	0x429814 <mi_process_init+0x344>
               	leaq	107428(%rip), %rdi      # 0x444338 <typeinfo name for kotlin::gc::GCSchedulerData+0x11cf>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	jmp	0x42a08b <mi_process_init+0xbbb>
               	shlq	$30, %r13
               	je	0x42a08b <mi_process_init+0xbbb>
               	leaq	107147(%rip), %rbx      # 0x44423f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	jmp	0x429fcd <mi_process_init+0xafd>
               	nopl	(%rax)
               	addq	$-1073741824, %r13      # imm = 0xC0000000
               	je	0x42a08b <mi_process_init+0xbbb>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	callq	0x413890 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 229070(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	229046(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42a010 <mi_process_init+0xb40>
               	lock
               	cmpxchgq	%rdx, 229026(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42a000 <mi_process_init+0xb30>
               	lock
               	addq	$1073741824, 229004(%rip) # imm = 0x40000000
                                                # 0x461ea8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 228972(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	228950(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42a050 <mi_process_init+0xb80>
               	lock
               	cmpxchgq	%rdx, 228930(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42a040 <mi_process_init+0xb70>
               	lock
               	addq	$1073741824, 228908(%rip) # imm = 0x40000000
                                                # 0x461e88 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429fc0 <mi_process_init+0xaf0>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	jmp	0x429fc0 <mi_process_init+0xaf0>
               	movl	$8, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a29c <mi_process_init+0xdcc>
               	movl	$8, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	jle	0x42a29c <mi_process_init+0xdcc>
               	movq	%rax, %rbx
               	shlq	$10, %rbx
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42a0ca <mi_process_init+0xbfa>
               	movq	223128(%rip), %rcx      # 0x460860 <os_page_size>
               	jmp	0x42a0fb <mi_process_init+0xc2b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42a0fb <mi_process_init+0xc2b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42a0fb <mi_process_init+0xc2b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rax, %rbx
               	jae	0x42a13d <mi_process_init+0xc6d>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42a11e <mi_process_init+0xc4e>
               	negq	%rcx
               	andq	%rcx, %rbx
               	jmp	0x42a13d <mi_process_init+0xc6d>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42a134 <mi_process_init+0xc64>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42a13a <mi_process_init+0xc6a>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	movb	$1, 8(%rsp)
               	leaq	8(%rsp), %rdx
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42b000 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x42a29c <mi_process_init+0xdcc>
               	movq	%rax, %r13
               	movb	8(%rsp), %al
               	movb	%al, 32(%rsp)
               	leaq	16777215(%rbx), %r12
               	movq	%r12, %r15
               	shrq	$24, %r15
               	leaq	63(%r15), %r14
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	movq	%rbp, %rdi
               	shlq	$4, %rdi
               	addq	$64, %rdi
               	callq	0x42b850 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x42a230 <mi_process_init+0xd60>
               	movq	%r15, 8(%rax)
               	movq	%rbp, 16(%rax)
               	xchgq	%r13, (%rax)
               	movl	$4294967295, 24(%rax)   # imm = 0xFFFFFFFF
               	movb	32(%rsp), %cl
               	movb	%cl, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	(%rax,%rbp,8), %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	andq	$-64, %r14
               	subq	%r15, %r14
               	jle	0x42a211 <mi_process_init+0xd41>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	shrq	$30, %r12
               	movq	$-1, %rsi
               	movq	$-1, %rdi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%r15d, %ecx
               	shlq	%cl, %rdi
               	cmpq	$63, %r14
               	cmovaq	%rsi, %rdi
               	lock
               	orq	%rdi, (%rdx,%r12,8)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 229025(%rip)      # 0x4620c0 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x42a25e <mi_process_init+0xd8e>
               	lock
               	subq	$1, 229010(%rip)        # 0x4620c0 <mi_arena_count>
               	jmp	0x42a269 <mi_process_init+0xd99>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42ba20 <_mi_os_free_ex>
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	leaq	106398(%rip), %rdi      # 0x4441f0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1087>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	jmp	0x42a29c <mi_process_init+0xdcc>
               	leaq	229019(%rip), %rdx      # 0x462100 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	cmpb	$0, 8(%rsp)
               	leaq	108539(%rip), %rax      # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	leaq	106377(%rip), %rdx      # 0x444210 <typeinfo name for kotlin::gc::GCSchedulerData+0x10a7>
               	cmoveq	%rax, %rdx
               	leaq	106387(%rip), %rdi      # 0x444225 <typeinfo name for kotlin::gc::GCSchedulerData+0x10bc>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42bf90 <_mi_os_numa_node_count_get>
               	jmp	0x42972b <mi_process_init+0x25b>
               	nopw	%cs:(%rax,%rax)

<mi_pthread_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	testq	%rdi, %rdi
               	je	0x42a398 <mi_pthread_done+0xd8>
               	movq	%rdi, %rbx
               	movq	$-1, %rcx
               	lock
               	xaddq	%rcx, 228462(%rip)      # 0x461f58 <_mi_stats_main+0x118>
               	addq	$-1, %rcx
               	movq	228443(%rip), %rax      # 0x461f50 <_mi_stats_main+0x110>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42a310 <mi_pthread_done+0x50>
               	lock
               	cmpxchgq	%rcx, 228418(%rip)      # 0x461f50 <_mi_stats_main+0x110>
               	jne	0x42a300 <mi_pthread_done+0x40>
               	lock
               	addq	$1, 228399(%rip)        # 0x461f48 <_mi_stats_main+0x108>
               	movq	2848(%rbx), %rax
               	movq	%fs:0, %rcx
               	leaq	210512(%rip), %r13      # 0x45d980 <_mi_heap_empty>
               	cmpq	%r13, %rbx
               	je	0x42a398 <mi_pthread_done+0xd8>
               	cmpq	%rcx, %rax
               	jne	0x42a398 <mi_pthread_done+0xd8>
               	leaq	218679(%rip), %rdx      # 0x45f978 <_mi_heap_main>
               	movq	221520(%rip), %rcx      # 0x460498 <_mi_heap_main+0xb20>
               	cmpq	%rax, %rcx
               	movq	%r13, %rsi
               	cmoveq	%rdx, %rsi
               	testq	%rcx, %rcx
               	cmoveq	%rdx, %rsi
               	movq	$-80, %r12
               	movq	%rsi, %fs:(%r12)
               	movl	222445(%rip), %edi      # 0x460858 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a375 <mi_pthread_done+0xb5>
               	callq	0x413840 <pthread_setspecific@plt>
               	movq	(%rbx), %rax
               	movq	16(%rax), %r15
               	cmpq	%r13, %r15
               	je	0x42a398 <mi_pthread_done+0xd8>
               	movq	(%r15), %rax
               	movq	24(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x42a85d <mi_pthread_done+0x59d>
               	movq	%r15, 8(%rsp)
               	jmp	0x42a3b9 <mi_pthread_done+0xf9>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r14, %rdi
               	callq	0x430410 <mi_free>
               	nop
               	testq	%rbx, %rbx
               	je	0x42a85d <mi_pthread_done+0x59d>
               	movq	%rbx, %r14
               	movq	3040(%rbx), %rbx
               	cmpq	%r15, %r14
               	je	0x42a3b0 <mi_pthread_done+0xf0>
               	testq	%r14, %r14
               	je	0x42a3b0 <mi_pthread_done+0xf0>
               	cmpq	%r13, %r14
               	je	0x42a3b0 <mi_pthread_done+0xf0>
               	movq	%rbx, 32(%rsp)
               	movq	(%r14), %rax
               	movq	16(%rax), %rbp
               	cmpq	%r14, %rbp
               	je	0x42a7ce <mi_pthread_done+0x50e>
               	cmpq	$0, 3016(%r14)
               	je	0x42a7db <mi_pthread_done+0x51b>
               	movq	2840(%r14), %rax
               	testq	%rax, %rax
               	je	0x42a430 <mi_pthread_done+0x170>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a400 <mi_pthread_done+0x140>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f4c0 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a420 <mi_pthread_done+0x160>
               	leaq	1040(%rbp), %r10
               	leaq	1016(%rbp), %r12
               	leaq	120(%rbp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	24(%rbp), %rax
               	movq	%rax, 24(%rsp)
               	xorl	%edi, %edi
               	jmp	0x42a482 <mi_pthread_done+0x1c2>
               	nopw	(%rax,%rax)
               	xorl	%edx, %edx
               	addq	%rdx, 3016(%rbp)
               	subq	%rdx, 3016(%r14)
               	addq	$1, %rdi
               	addq	$24, %r12
               	cmpq	$75, %rdi
               	je	0x42a743 <mi_pthread_done+0x483>
               	leaq	(,%rdi,8), %rax
               	leaq	(%rax,%rax,2), %rcx
               	movq	1040(%r14,%rcx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a460 <mi_pthread_done+0x1a0>
               	leaq	(%rcx,%rbp), %r8
               	addq	$1040, %r8              # imm = 0x410
               	leaq	(%r14,%rcx), %r9
               	addq	$1040, %r9              # imm = 0x410
               	xorl	%edx, %edx
               	jmp	0x42a4cd <mi_pthread_done+0x20d>
               	nopl	(%rax)
               	addq	$1, %rdx
               	movq	48(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a500 <mi_pthread_done+0x240>
               	movq	%rbp, 40(%rbx)
               	movq	32(%rbx), %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	je	0x42a4c0 <mi_pthread_done+0x200>
               	cmpl	$3, %esi
               	je	0x42a4c0 <mi_pthread_done+0x200>
               	cmpl	$1, %esi
               	je	0x42a4f7 <mi_pthread_done+0x237>
               	movq	%rax, %rsi
               	andq	$-4, %rsi
               	lock
               	cmpxchgq	%rsi, 32(%rbx)
               	jne	0x42a4d1 <mi_pthread_done+0x211>
               	jmp	0x42a4c0 <mi_pthread_done+0x200>
               	pause
               	jmp	0x42a4d1 <mi_pthread_done+0x211>
               	nop
               	leaq	(%rdi,%rdi,2), %rbx
               	leaq	1048(,%rbx,8), %rax
               	addq	%rbp, %rax
               	movq	1048(%rbp,%rbx,8), %rsi
               	movq	(%r9), %r15
               	testq	%rsi, %rsi
               	je	0x42a540 <mi_pthread_done+0x280>
               	movq	%r15, 48(%rsi)
               	movq	%rsi, 56(%r15)
               	movq	1048(%r14,%rbx,8), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x42a462 <mi_pthread_done+0x1a2>
               	nopl	(%rax,%rax)
               	movq	%r15, (%r8)
               	movq	1048(%r14,%rcx), %rsi
               	movq	%rsi, (%rax)
               	movq	1056(%rbp,%rcx), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42a462 <mi_pthread_done+0x1a2>
               	testq	%r15, %r15
               	leaq	110228(%rip), %rcx      # 0x445400 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r15, 8(%rbp,%r11,8)
               	je	0x42a462 <mi_pthread_done+0x1a2>
               	cmpq	$9, %rax
               	jae	0x42a590 <mi_pthread_done+0x2d0>
               	xorl	%ecx, %ecx
               	jmp	0x42a642 <mi_pthread_done+0x382>
               	cmpq	$64, %rax
               	ja	0x42a5a0 <mi_pthread_done+0x2e0>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42a5bb <mi_pthread_done+0x2fb>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	movq	%r12, %rsi
               	nop
               	movq	16(%rsi), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42a620 <mi_pthread_done+0x360>
               	cmpq	$71, %rax
               	ja	0x42a5f0 <mi_pthread_done+0x330>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42a620 <mi_pthread_done+0x360>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42a620 <mi_pthread_done+0x360>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r9
               	movl	%r9d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r9,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%r10, %rsi
               	jbe	0x42a62e <mi_pthread_done+0x36e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r8b
               	je	0x42a5c0 <mi_pthread_done+0x300>
               	leaq	1(%rbx), %rcx
               	cmpq	%r11, %rbx
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42a462 <mi_pthread_done+0x1a2>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42a730 <mi_pthread_done+0x470>
               	movq	%r8, %r9
               	andq	$-4, %r9
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r9), %rbx
               	movq	%rbx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	cmpq	$12, %rbx
               	jae	0x42a685 <mi_pthread_done+0x3c5>
               	xorl	%ebx, %ebx
               	jmp	0x42a6e2 <mi_pthread_done+0x422>
               	movq	16(%rsp), %rbx
               	leaq	(%rbx,%rcx,8), %r13
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbx,8)
               	movdqu	%xmm0, -96(%r13,%rbx,8)
               	movdqu	%xmm0, -80(%r13,%rbx,8)
               	movdqu	%xmm0, -64(%r13,%rbx,8)
               	movdqu	%xmm0, -48(%r13,%rbx,8)
               	movdqu	%xmm0, -32(%r13,%rbx,8)
               	movdqu	%xmm0, -16(%r13,%rbx,8)
               	movdqu	%xmm0, (%r13,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42a6a0 <mi_pthread_done+0x3e0>
               	testq	%rsi, %rsi
               	je	0x42a712 <mi_pthread_done+0x452>
               	addq	%rcx, %rbx
               	movq	24(%rsp), %rax
               	leaq	(%rax,%rbx,8), %rax
               	negq	%rsi
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x42a700 <mi_pthread_done+0x440>
               	cmpq	%r9, %r8
               	leaq	209508(%rip), %r13      # 0x45d980 <_mi_heap_empty>
               	je	0x42a462 <mi_pthread_done+0x1a2>
               	addq	%r9, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, 8(%rbp,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42a730 <mi_pthread_done+0x470>
               	jmp	0x42a462 <mi_pthread_done+0x1a2>
               	movq	2840(%r14), %rax
               	movq	8(%rsp), %r15
               	movq	$-80, %r12
               	nopw	%cs:(%rax,%rax)
               	testq	%rax, %rax
               	je	0x42a790 <mi_pthread_done+0x4d0>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a760 <mi_pthread_done+0x4a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f4c0 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a780 <mi_pthread_done+0x4c0>
               	leaq	8(%r14), %rdi
               	movl	$1032, %edx             # imm = 0x408
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	leaq	1040(%r14), %rdi
               	movl	$1800, %edx             # imm = 0x708
               	leaq	210397(%rip), %rsi      # 0x45dd90 <_mi_heap_empty+0x410>
               	callq	0x413720 <memcpy@plt>
               	xorl	%eax, %eax
               	xchgq	%rax, 2840(%r14)
               	movq	$0, 3016(%r14)
               	jmp	0x42a7db <mi_pthread_done+0x51b>
               	movq	%r14, %rdi
               	movl	$2, %esi
               	callq	0x42c690 <mi_heap_collect_ex>
               	movq	(%r14), %rax
               	movq	16(%rax), %rsi
               	cmpq	%r14, %rsi
               	movq	32(%rsp), %rbx
               	je	0x42a3b0 <mi_pthread_done+0xf0>
               	cmpq	%r14, %fs:(%r12)
               	jne	0x42a80f <mi_pthread_done+0x54f>
               	movq	%rsi, %fs:(%r12)
               	movl	221270(%rip), %edi      # 0x460858 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a80c <mi_pthread_done+0x54c>
               	callq	0x413840 <pthread_setspecific@plt>
               	movq	(%r14), %rax
               	addq	$24, %rax
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	nopl	(%rax,%rax)
               	movq	%rdx, %rcx
               	movq	(%rsi), %rdx
               	cmpq	%r14, %rdx
               	je	0x42a837 <mi_pthread_done+0x577>
               	leaq	3040(%rdx), %rsi
               	testq	%rdx, %rdx
               	jne	0x42a820 <mi_pthread_done+0x560>
               	cmpq	%r14, %rdx
               	jne	0x42a3a7 <mi_pthread_done+0xe7>
               	leaq	3040(%rcx), %rdx
               	testq	%rcx, %rcx
               	movq	3040(%r14), %rcx
               	cmoveq	%rax, %rdx
               	movq	%rcx, (%rdx)
               	jmp	0x42a3a7 <mi_pthread_done+0xe7>
               	leaq	217364(%rip), %rax      # 0x45f978 <_mi_heap_main>
               	cmpq	%rax, %r15
               	je	0x42a8a3 <mi_pthread_done+0x5e3>
               	movq	%r15, %rdi
               	movl	$2, %esi
               	callq	0x42c690 <mi_heap_collect_ex>
               	movl	$176, %edi
               	addq	(%r15), %rdi
               	callq	0x42c1a0 <mi_stats_merge_from>
               	movl	$3808, %esi             # imm = 0xEE0
               	movq	%r15, %rdi
               	movl	$1, %edx
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ba20 <_mi_os_free_ex>
               	movl	$176, %edi
               	addq	(%r15), %rdi
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42c1a0 <mi_stats_merge_from>
               	nop

<_mi_verbose_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42a90c <_mi_verbose_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	movl	$2, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a9ca <_mi_verbose_message+0x10a>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42a9ca <_mi_verbose_message+0x10a>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42a9ca <_mi_verbose_message+0x10a>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x4138a0 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	227692(%rip), %r12      # 0x462308 <mi_out_arg>
               	movq	227693(%rip), %rax      # 0x462310 <mi_out_default>
               	testq	%rax, %rax
               	leaq	5075(%rip), %rbx        # 0x42bd80 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	105589(%rip), %rdi      # 0x44462d <typeinfo name for kotlin::gc::GCSchedulerData+0x14c4>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<mi_thread_init>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	callq	0x4294d0 <mi_process_init>
               	movq	$-80, %r14
               	leaq	208776(%rip), %rax      # 0x45d980 <_mi_heap_empty>
               	cmpq	%rax, %fs:(%r14)
               	je	0x42aa04 <mi_thread_init+0x24>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	219789(%rip), %rax      # 0x460498 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42aa22 <mi_thread_init+0x42>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42aaa6 <mi_thread_init+0xc6>
               	cmpq	$0, 219766(%rip)        # 0x4604a0 <_mi_heap_main+0xb28>
               	jne	0x42aa80 <mi_thread_init+0xa0>
               	movq	%fs:0, %rax
               	movq	%rax, 219740(%rip)      # 0x460498 <_mi_heap_main+0xb20>
               	leaq	216885(%rip), %rbx      # 0x45f978 <_mi_heap_main>
               	leaq	-9386(%rip), %rdi       # 0x4285a0 <mi_heap_main_init>
               	callq	0x428610 <_os_random_weak>
               	movq	%rax, 219722(%rip)      # 0x4604a0 <_mi_heap_main+0xb28>
               	leaq	219739(%rip), %rdi      # 0x4604b8 <_mi_heap_main+0xb40>
               	callq	0x428720 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 219703(%rip)      # 0x4604a8 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 219696(%rip)      # 0x4604b0 <_mi_heap_main+0xb38>
               	leaq	216817(%rip), %rax      # 0x45f978 <_mi_heap_main>
               	movq	%rax, %fs:(%r14)
               	movl	220615(%rip), %edi      # 0x460858 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42ab81 <mi_thread_init+0x1a1>
               	leaq	216791(%rip), %rsi      # 0x45f978 <_mi_heap_main>
               	jmp	0x42ab7c <mi_thread_init+0x19c>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b850 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42aace <mi_thread_init+0xee>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b850 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x42abbf <mi_thread_init+0x1df>
               	leaq	3056(%rbx), %r15
               	leaq	208548(%rip), %rsi      # 0x45d980 <_mi_heap_empty>
               	movl	$3056, %edx             # imm = 0xBF0
               	movq	%rbx, %rdi
               	callq	0x413720 <memcpy@plt>
               	movq	%fs:0, %rax
               	movq	%rax, 2848(%rbx)
               	leaq	2880(%rbx), %rdi
               	callq	0x428720 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	orq	$1, %rax
               	movq	%rax, 2856(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 2864(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	movq	%rax, 2872(%rbx)
               	movq	%r15, (%rbx)
               	movq	%rbx, 3072(%rbx)
               	movq	%rbx, 3080(%rbx)
               	leaq	3232(%rbx), %rax
               	movq	%rax, 3200(%rbx)
               	leaq	3216(%rbx), %rcx
               	movq	%rcx, 3208(%rbx)
               	movq	%rax, 3224(%rbx)
               	movq	%rbx, %fs:(%r14)
               	movl	220388(%rip), %edi      # 0x460858 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42ab81 <mi_thread_init+0x1a1>
               	movq	%rbx, %rsi
               	callq	0x413840 <pthread_setspecific@plt>
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 226249(%rip)      # 0x461f58 <_mi_stats_main+0x118>
               	leaq	1(%rcx), %rdx
               	movq	226230(%rip), %rax      # 0x461f50 <_mi_stats_main+0x110>
               	nopw	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jg	0x42abb0 <mi_thread_init+0x1d0>
               	lock
               	cmpxchgq	%rdx, 226210(%rip)      # 0x461f50 <_mi_stats_main+0x110>
               	jne	0x42aba0 <mi_thread_init+0x1c0>
               	lock
               	addq	$1, 226183(%rip)        # 0x461f40 <_mi_stats_main+0x100>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	104986(%rip), %rsi      # 0x4445e0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1477>
               	movl	$3808, %edx             # imm = 0xEE0
               	movl	$12, %edi
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	jmp	0x42ab81 <mi_thread_init+0x1a1>
               	nopl	(%rax)

<mi_option_get>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%edi, %eax
               	leaq	(%rax,%rax,2), %rbx
               	leaq	220274(%rip), %r13      # 0x460870 <options>
               	leaq	(,%rbx,8), %r12
               	addq	%r13, %r12
               	cmpl	$0, 8(%r13,%rbx,8)
               	je	0x42ac27 <mi_option_get+0x47>
               	movq	(%r12), %rax
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	8(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 80(%rsp)
               	leaq	104478(%rip), %rsi      # 0x444461 <typeinfo name for kotlin::gc::GCSchedulerData+0x12f8>
               	leaq	80(%rsp), %r14
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x4138b0 <strncpy@plt>
               	movb	$0, 144(%rsp)
               	movq	16(%r13,%rbx,8), %rsi
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x4138c0 <strncat@plt>
               	movb	$0, 144(%rsp)
               	movq	%r14, %rdi
               	callq	0x413710 <strlen@plt>
               	movq	%rax, %rcx
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x42ae40 <mi_option_get+0x260>
               	movq	213817(%rip), %rax      # 0x45efd0 <write+0x45efd0>
               	movq	(%rax), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	je	0x42ae40 <mi_option_get+0x260>
               	movb	80(%rsp), %al
               	movb	%al, 15(%rsp)
               	testb	%al, %al
               	je	0x42ad80 <mi_option_get+0x1a0>
               	xorl	%ecx, %ecx
               	jmp	0x42ace1 <mi_option_get+0x101>
               	movq	32(%rsp), %rax
               	cmpb	$61, (%rdx,%rax)
               	je	0x42add5 <mi_option_get+0x1f5>
               	movq	56(%rsp), %rcx
               	addq	$1, %rcx
               	cmpq	$256, %rcx              # imm = 0x100
               	je	0x42ae40 <mi_option_get+0x260>
               	movq	40(%rsp), %rax
               	movq	(%rax,%rcx,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ae40 <mi_option_get+0x260>
               	movq	%rcx, 56(%rsp)
               	xorl	%r14d, %r14d
               	movb	15(%rsp), %al
               	movl	%eax, %esi
               	movq	32(%rsp), %r15
               	movq	%rdx, 64(%rsp)
               	testq	%r15, %r15
               	je	0x42ad63 <mi_option_get+0x183>
               	movzbl	(%rdx,%r14), %ebp
               	testb	%bpl, %bpl
               	je	0x42ad63 <mi_option_get+0x183>
               	movsbq	%bpl, %rax
               	movq	%rax, 72(%rsp)
               	movl	%esi, 52(%rsp)
               	callq	0x4138d0 <__ctype_toupper_loc@plt>
               	movl	52(%rsp), %esi
               	movq	64(%rsp), %rdx
               	movq	(%rax), %rax
               	movsbq	%sil, %rcx
               	movl	(%rax,%rcx,4), %ecx
               	movq	72(%rsp), %rdi
               	cmpl	(%rax,%rdi,4), %ecx
               	jne	0x42ad72 <mi_option_get+0x192>
               	addq	$-1, %r15
               	movzbl	81(%rsp,%r14), %esi
               	addq	$1, %r14
               	testb	%sil, %sil
               	jne	0x42ad0b <mi_option_get+0x12b>
               	addq	%rdx, %r14
               	xorl	%esi, %esi
               	jmp	0x42ad66 <mi_option_get+0x186>
               	addq	%rdx, %r14
               	testq	%r15, %r15
               	je	0x42acbc <mi_option_get+0xdc>
               	movb	(%r14), %bpl
               	cmpb	%bpl, %sil
               	je	0x42acbc <mi_option_get+0xdc>
               	jmp	0x42accb <mi_option_get+0xeb>
               	xorl	%eax, %eax
               	jmp	0x42ad94 <mi_option_get+0x1b4>
               	addq	$2, %rax
               	cmpq	$256, %rax              # imm = 0x100
               	je	0x42ae40 <mi_option_get+0x260>
               	movq	40(%rsp), %rcx
               	movq	(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ae40 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42adb6 <mi_option_get+0x1d6>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	je	0x42add5 <mi_option_get+0x1f5>
               	movq	40(%rsp), %rcx
               	movq	8(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ae40 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42ad84 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	jne	0x42ad84 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rax
               	leaq	(%rdx,%rax), %rsi
               	addq	$1, %rsi
               	movb	$0, 160(%rsp)
               	leaq	160(%rsp), %r14
               	movl	$64, %r15d
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x4138b0 <strncpy@plt>
               	movb	$0, 224(%rsp)
               	movq	%r14, %rdi
               	callq	0x413710 <strlen@plt>
               	cmpq	$64, %rax
               	cmovbq	%rax, %r15
               	testq	%r15, %r15
               	je	0x42aef0 <mi_option_get+0x310>
               	callq	0x4138d0 <__ctype_toupper_loc@plt>
               	leaq	-1(%r15), %rdx
               	movl	%r15d, %r8d
               	andl	$3, %r8d
               	cmpq	$3, %rdx
               	jae	0x42ae5d <mi_option_get+0x27d>
               	xorl	%edx, %edx
               	jmp	0x42aebe <mi_option_get+0x2de>
               	cmpb	$1, 225849(%rip)        # 0x462080 <os_preloading>
               	jne	0x42ac11 <mi_option_get+0x31>
               	movq	24(%rsp), %rax
               	movl	$1, (%rax)
               	jmp	0x42ac11 <mi_option_get+0x31>
               	movl	%r15d, %esi
               	andl	$124, %esi
               	xorl	%edx, %edx
               	movq	(%rax), %rcx
               	movsbq	160(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 80(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	161(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 81(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	162(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 82(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	163(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 83(%rsp,%rdx)
               	addq	$4, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x42ae65 <mi_option_get+0x285>
               	testq	%r8, %r8
               	je	0x42aef0 <mi_option_get+0x310>
               	leaq	(%rsp,%rdx), %rsi
               	addq	$80, %rsi
               	addq	%rsp, %rdx
               	addq	$160, %rdx
               	xorl	%edi, %edi
               	movq	(%rax), %rbp
               	movsbq	(%rdx,%rdi), %rcx
               	movzbl	(%rbp,%rcx,4), %ecx
               	movb	%cl, (%rsi,%rdi)
               	addq	$1, %rdi
               	cmpq	%rdi, %r8
               	jne	0x42aed7 <mi_option_get+0x2f7>
               	movb	$0, 80(%rsp,%r15)
               	cmpb	$0, 80(%rsp)
               	je	0x42af13 <mi_option_get+0x333>
               	leaq	103783(%rip), %rdi      # 0x44446b <typeinfo name for kotlin::gc::GCSchedulerData+0x1302>
               	leaq	80(%rsp), %rsi
               	callq	0x4138e0 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42af2b <mi_option_get+0x34b>
               	movq	$1, (%r12)
               	movq	24(%rsp), %rax
               	movl	$2, (%rax)
               	jmp	0x42ac11 <mi_option_get+0x31>
               	leaq	103751(%rip), %rdi      # 0x444479 <typeinfo name for kotlin::gc::GCSchedulerData+0x1310>
               	leaq	80(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x4138e0 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42af4e <mi_option_get+0x36e>
               	movq	$0, (%r12)
               	jmp	0x42af1b <mi_option_get+0x33b>
               	movq	%r14, 16(%rsp)
               	leaq	16(%rsp), %rsi
               	movq	%r14, %rdi
               	movl	$10, %edx
               	callq	0x4138f0 <strtol@plt>
               	cmpl	$8, 12(%r13,%rbx,8)
               	movq	16(%rsp), %rcx
               	jne	0x42afb2 <mi_option_get+0x3d2>
               	movb	(%rcx), %dl
               	cmpb	$71, %dl
               	je	0x42af8f <mi_option_get+0x3af>
               	cmpb	$77, %dl
               	je	0x42af95 <mi_option_get+0x3b5>
               	cmpb	$75, %dl
               	je	0x42af99 <mi_option_get+0x3b9>
               	addq	$1023, %rax             # imm = 0x3FF
               	shrq	$10, %rax
               	jmp	0x42afa4 <mi_option_get+0x3c4>
               	shlq	$20, %rax
               	jmp	0x42af99 <mi_option_get+0x3b9>
               	shlq	$10, %rax
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	movb	(%rcx), %dl
               	cmpb	$66, %dl
               	jne	0x42afb2 <mi_option_get+0x3d2>
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	cmpb	$0, (%rcx)
               	je	0x42afdf <mi_option_get+0x3ff>
               	leaq	16(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	(%rax), %rsi
               	leaq	103612(%rip), %rdi      # 0x444488 <typeinfo name for kotlin::gc::GCSchedulerData+0x131f>
               	leaq	80(%rsp), %rdx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movl	$1, %eax
               	jmp	0x42afe8 <mi_option_get+0x408>
               	movq	%rax, (%r12)
               	movl	$2, %eax
               	movq	24(%rsp), %rcx
               	movl	%eax, (%rcx)
               	jmp	0x42ac11 <mi_option_get+0x31>
               	nopw	%cs:(%rax,%rax)

<_mi_os_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42b526 <_mi_os_alloc_aligned+0x526>
               	movq	%rdx, %r15
               	movl	%esi, %r14d
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42b02c <_mi_os_alloc_aligned+0x2c>
               	movq	219190(%rip), %rcx      # 0x460860 <os_page_size>
               	jmp	0x42b05d <_mi_os_alloc_aligned+0x5d>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rdi          # imm = 0x200000
               	jb	0x42b05d <_mi_os_alloc_aligned+0x5d>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x42b05d <_mi_os_alloc_aligned+0x5d>
               	cmpq	$33554432, %rdi         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rdi, %rax
               	jbe	0x42b09f <_mi_os_alloc_aligned+0x9f>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rdi
               	addq	$-1, %rdi
               	testq	%rax, %rcx
               	jne	0x42b080 <_mi_os_alloc_aligned+0x80>
               	negq	%rcx
               	andq	%rcx, %rdi
               	jmp	0x42b09f <_mi_os_alloc_aligned+0x9f>
               	movq	%rdi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b096 <_mi_os_alloc_aligned+0x96>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b09c <_mi_os_alloc_aligned+0x9c>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rdi
               	movq	219066(%rip), %rcx      # 0x460860 <os_page_size>
               	movq	%rcx, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %r8 # imm = 0x5555555555555555
               	andq	%r8, %rax
               	movq	%rcx, %rdx
               	subq	%rax, %rdx
               	movabsq	$3689348814741910323, %rbp # imm = 0x3333333333333333
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rsi
               	shrq	$4, %rsi
               	addq	%rdx, %rsi
               	movabsq	$1085102592571150095, %r9 # imm = 0xF0F0F0F0F0F0F0F
               	andq	%r9, %rsi
               	movabsq	$72340172838076673, %r10 # imm = 0x101010101010101
               	imulq	%r10, %rsi
               	shrq	$56, %rsi
               	leaq	4194303(%rcx), %r13
               	cmpq	$1, %rsi
               	ja	0x42b12f <_mi_os_alloc_aligned+0x12f>
               	movq	%rcx, %rax
               	negq	%rax
               	andq	%rax, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	je	0x42b166 <_mi_os_alloc_aligned+0x166>
               	movb	(%r15), %al
               	movb	%al, 3(%rsp)
               	movb	$0, (%r15)
               	jmp	0x42b16d <_mi_os_alloc_aligned+0x16d>
               	movq	%r13, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b152 <_mi_os_alloc_aligned+0x152>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42b122 <_mi_os_alloc_aligned+0x122>
               	jmp	0x42b166 <_mi_os_alloc_aligned+0x166>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42b122 <_mi_os_alloc_aligned+0x122>
               	leaq	3(%rsp), %r15
               	xorl	%eax, %eax
               	testb	%al, %al
               	setne	%r12b
               	xorl	%ebx, %ebx
               	cmpq	%r13, %rcx
               	ja	0x42b528 <_mi_os_alloc_aligned+0x528>
               	movq	%r13, %rax
               	shrq	%rax
               	andq	%r8, %rax
               	movq	%r13, %rdx
               	subq	%rax, %rdx
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rax
               	shrq	$4, %rax
               	addq	%rdx, %rax
               	andq	%r9, %rax
               	imulq	%r10, %rax
               	shrq	$56, %rax
               	cmpl	$1, %eax
               	ja	0x42b528 <_mi_os_alloc_aligned+0x528>
               	leaq	-1(%rcx), %rbp
               	addq	%rdi, %rbp
               	cmpl	$1, %esi
               	ja	0x42b1d7 <_mi_os_alloc_aligned+0x1d7>
               	negq	%rcx
               	andq	%rcx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42b20a <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b526 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b1f8 <_mi_os_alloc_aligned+0x1f8>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42b20a <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b526 <_mi_os_alloc_aligned+0x526>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	je	0x42b526 <_mi_os_alloc_aligned+0x526>
               	andb	%r14b, %r12b
               	movzbl	%r14b, %eax
               	leal	(%rax,%rax,2), %ebx
               	cmpb	$1, 258317(%rip)        # 0x46a328 <large_os_page_size>
               	movl	%ebx, 4(%rsp)
               	jne	0x42b260 <_mi_os_alloc_aligned+0x260>
               	movl	$6, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b260 <_mi_os_alloc_aligned+0x260>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b260 <_mi_os_alloc_aligned+0x260>
               	movl	%r12d, %eax
               	xorb	$1, %al
               	jne	0x42b260 <_mi_os_alloc_aligned+0x260>
               	movq	258302(%rip), %rax      # 0x46a348 <mi_unix_mmap.large_page_try_ok>
               	testq	%rax, %rax
               	je	0x42b550 <_mi_os_alloc_aligned+0x550>
               	leaq	-1(%rax), %rcx
               	lock
               	cmpxchgq	%rcx, 258280(%rip)      # 0x46a348 <mi_unix_mmap.large_page_try_ok>
               	movb	$0, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42be70 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testb	%r12b, %r12b
               	je	0x42b2ba <_mi_os_alloc_aligned+0x2ba>
               	cmpb	$1, 258211(%rip)        # 0x46a328 <large_os_page_size>
               	jne	0x42b2ba <_mi_os_alloc_aligned+0x2ba>
               	movl	$6, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b2ba <_mi_os_alloc_aligned+0x2ba>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b2ba <_mi_os_alloc_aligned+0x2ba>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	$14, %edx
               	callq	0x413900 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42b2ba <_mi_os_alloc_aligned+0x2ba>
               	movb	$1, (%r15)
               	testq	%rbx, %rbx
               	je	0x42b328 <_mi_os_alloc_aligned+0x328>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 224205(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	%rbp, %rcx
               	movq	224187(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b2f0 <_mi_os_alloc_aligned+0x2f0>
               	lock
               	cmpxchgq	%rcx, 224162(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42b2e0 <_mi_os_alloc_aligned+0x2e0>
               	testq	%rbp, %rbp
               	jle	0x42b350 <_mi_os_alloc_aligned+0x350>
               	lock
               	addq	%rbp, 224131(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	testb	%r14b, %r14b
               	jne	0x42b363 <_mi_os_alloc_aligned+0x363>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	je	0x42b3ad <_mi_os_alloc_aligned+0x3ad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r13
               	testq	%rdx, %rdx
               	jne	0x42b3bd <_mi_os_alloc_aligned+0x3bd>
               	jmp	0x42b528 <_mi_os_alloc_aligned+0x528>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edx
               	movzbl	%r12b, %r9d
               	leaq	102211(%rip), %rdi      # 0x44427d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%rbp, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	jmp	0x42b528 <_mi_os_alloc_aligned+0x528>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 224042(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b302 <_mi_os_alloc_aligned+0x302>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 224073(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	addq	%rbp, %rcx
               	movq	224055(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b390 <_mi_os_alloc_aligned+0x390>
               	lock
               	cmpxchgq	%rcx, 224034(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42b380 <_mi_os_alloc_aligned+0x380>
               	testq	%rbp, %rbp
               	jle	0x42b40f <_mi_os_alloc_aligned+0x40f>
               	lock
               	addq	%rbp, 224003(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b312 <_mi_os_alloc_aligned+0x312>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r13d
               	testq	%rdx, %rdx
               	je	0x42b528 <_mi_os_alloc_aligned+0x528>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x413890 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbp, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b43a <_mi_os_alloc_aligned+0x43a>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 223955(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	subq	%rbp, %rsi
               	movq	223937(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42b400 <_mi_os_alloc_aligned+0x400>
               	lock
               	cmpxchgq	%rsi, 223922(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42b3f0 <_mi_os_alloc_aligned+0x3f0>
               	testq	%rbp, %rbp
               	js	0x42b432 <_mi_os_alloc_aligned+0x432>
               	lock
               	addq	%rbp, 223899(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	jmp	0x42b43a <_mi_os_alloc_aligned+0x43a>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 223883(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b312 <_mi_os_alloc_aligned+0x312>
               	jmp	0x42b3ad <_mi_os_alloc_aligned+0x3ad>
               	lock
               	addq	%rdx, 223846(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 223826(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	subq	%rbp, %rsi
               	movq	223808(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b460 <_mi_os_alloc_aligned+0x460>
               	lock
               	cmpxchgq	%rsi, 223794(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42b450 <_mi_os_alloc_aligned+0x450>
               	testq	%rbp, %rbp
               	js	0x42b53a <_mi_os_alloc_aligned+0x53a>
               	lock
               	addq	%rbp, 223767(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42b499 <_mi_os_alloc_aligned+0x499>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	leaq	101814(%rip), %rdi      # 0x44423f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	movq	%rbp, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movq	%r13, %rax
               	notq	%rax
               	cmpq	%rax, %rbp
               	jae	0x42b526 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %r12
               	addq	%r13, %r12
               	je	0x42b526 <_mi_os_alloc_aligned+0x526>
               	cmpb	$1, 257649(%rip)        # 0x46a328 <large_os_page_size>
               	jne	0x42b4c3 <_mi_os_alloc_aligned+0x4c3>
               	movl	$6, %edi
               	callq	0x42abe0 <mi_option_get>
               	movb	$0, (%r15)
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42be70 <mi_unix_mmapx>
               	testq	%rax, %rax
               	je	0x42b5d8 <_mi_os_alloc_aligned+0x5d8>
               	movq	%rax, %r15
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 223653(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	%r12, %rcx
               	movq	223635(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b510 <_mi_os_alloc_aligned+0x510>
               	lock
               	cmpxchgq	%rcx, 223618(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42b500 <_mi_os_alloc_aligned+0x500>
               	testq	%r12, %r12
               	jle	0x42b5f8 <_mi_os_alloc_aligned+0x5f8>
               	lock
               	addq	%r12, 223583(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	jmp	0x42b606 <_mi_os_alloc_aligned+0x606>
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 223550(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b499 <_mi_os_alloc_aligned+0x499>
               	jmp	0x42b476 <_mi_os_alloc_aligned+0x476>
               	testl	$1073741823, %ebp       # imm = 0x3FFFFFFF
               	jne	0x42b566 <_mi_os_alloc_aligned+0x566>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	cmpb	$1, 257516(%rip)        # 0x46a350 <mi_unix_mmap.mi_huge_pages_available>
               	jne	0x42b56b <_mi_os_alloc_aligned+0x56b>
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movb	$1, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	callq	0x42be70 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b2bf <_mi_os_alloc_aligned+0x2bf>
               	movb	$1, 257473(%rip)        # 0x46a350 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	101704(%rip), %rdi      # 0x4442e5 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	callq	0x42be70 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b2bf <_mi_os_alloc_aligned+0x2bf>
               	movq	$10, 257401(%rip)       # 0x46a348 <mi_unix_mmap.large_page_try_ok>
               	movl	4(%rsp), %ebx
               	jmp	0x42b260 <_mi_os_alloc_aligned+0x260>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	101527(%rip), %rdi      # 0x44427d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%r12, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	jmp	0x42b344 <_mi_os_alloc_aligned+0x344>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 223362(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b64e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 223393(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	addq	%r12, %rcx
               	movq	223375(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x42b631 <_mi_os_alloc_aligned+0x631>
               	lock
               	cmpxchgq	%rcx, 223361(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42b621 <_mi_os_alloc_aligned+0x621>
               	testq	%r12, %r12
               	jle	0x42b640 <_mi_os_alloc_aligned+0x640>
               	lock
               	addq	%r12, 223330(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	jmp	0x42b64e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 223322(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	leaq	(%r15,%r13), %rax
               	addq	$-1, %rax
               	negq	%r13
               	andq	%rax, %r13
               	movq	%r13, %rbx
               	subq	%r15, %rbx
               	movq	217591(%rip), %rcx      # 0x460860 <os_page_size>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x42b681 <_mi_os_alloc_aligned+0x681>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x42b6a0 <_mi_os_alloc_aligned+0x6a0>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b697 <_mi_os_alloc_aligned+0x697>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b69d <_mi_os_alloc_aligned+0x69d>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	subq	%rbx, %r12
               	subq	%rbp, %r12
               	testq	%rbx, %rbx
               	je	0x42b769 <_mi_os_alloc_aligned+0x769>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x413890 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b704 <_mi_os_alloc_aligned+0x704>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 223205(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	223187(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b6ed <_mi_os_alloc_aligned+0x6ed>
               	lock
               	cmpxchgq	%rsi, 223173(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42b6dd <_mi_os_alloc_aligned+0x6dd>
               	testq	%rbx, %rbx
               	js	0x42b6fc <_mi_os_alloc_aligned+0x6fc>
               	lock
               	addq	%rbx, 223150(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	jmp	0x42b704 <_mi_os_alloc_aligned+0x704>
               	lock
               	addq	%rdx, 223132(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 223112(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	223094(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b72a <_mi_os_alloc_aligned+0x72a>
               	lock
               	cmpxchgq	%rsi, 223080(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42b71a <_mi_os_alloc_aligned+0x71a>
               	testq	%rbx, %rbx
               	js	0x42b739 <_mi_os_alloc_aligned+0x739>
               	lock
               	addq	%rbx, 223057(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	jmp	0x42b741 <_mi_os_alloc_aligned+0x741>
               	lock
               	addq	%rdx, 223039(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b769 <_mi_os_alloc_aligned+0x769>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	leaq	101094(%rip), %rdi      # 0x44423f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	testq	%r12, %r12
               	je	0x42b83f <_mi_os_alloc_aligned+0x83f>
               	testq	%r13, %r13
               	je	0x42b83f <_mi_os_alloc_aligned+0x83f>
               	addq	%r13, %rbp
               	movq	%rbp, %rdi
               	movq	%r12, %rsi
               	callq	0x413890 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%r12, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b7d3 <_mi_os_alloc_aligned+0x7d3>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 222998(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	subq	%r12, %rsi
               	movq	222980(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b7bc <_mi_os_alloc_aligned+0x7bc>
               	lock
               	cmpxchgq	%rsi, 222966(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42b7ac <_mi_os_alloc_aligned+0x7ac>
               	testq	%r12, %r12
               	js	0x42b7cb <_mi_os_alloc_aligned+0x7cb>
               	lock
               	addq	%r12, 222943(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	jmp	0x42b7d3 <_mi_os_alloc_aligned+0x7d3>
               	lock
               	addq	%rdx, 222925(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 222905(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	subq	%r12, %rsi
               	movq	222887(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b7f9 <_mi_os_alloc_aligned+0x7f9>
               	lock
               	cmpxchgq	%rsi, 222873(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42b7e9 <_mi_os_alloc_aligned+0x7e9>
               	testq	%r12, %r12
               	js	0x42b808 <_mi_os_alloc_aligned+0x808>
               	lock
               	addq	%r12, 222850(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	jmp	0x42b810 <_mi_os_alloc_aligned+0x810>
               	lock
               	addq	%rdx, 222832(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	movq	%r13, %rbx
               	cmpl	$-1, %ecx
               	jne	0x42b528 <_mi_os_alloc_aligned+0x528>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	leaq	100880(%rip), %rdi      # 0x44423f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movq	%r13, %rbx
               	jmp	0x42b528 <_mi_os_alloc_aligned+0x528>
               	nopw	(%rax,%rax)

<_mi_os_alloc>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42b86a <_mi_os_alloc+0x1a>
               	movq	217080(%rip), %rcx      # 0x460860 <os_page_size>
               	jmp	0x42b89b <_mi_os_alloc+0x4b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b89b <_mi_os_alloc+0x4b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b89b <_mi_os_alloc+0x4b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42b8c9 <_mi_os_alloc+0x79>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b94f <_mi_os_alloc+0xff>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	je	0x42b9a8 <_mi_os_alloc+0x158>
               	cmpb	$1, 256600(%rip)        # 0x46a328 <large_os_page_size>
               	jne	0x42b8dc <_mi_os_alloc+0x8c>
               	movl	$6, %edi
               	callq	0x42abe0 <mi_option_get>
               	xorl	%r15d, %r15d
               	movl	$0, %edi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	movq	%rax, %r14
               	cmpq	$-1, %rax
               	cmoveq	%r15, %r14
               	testq	%r14, %r14
               	je	0x42b971 <_mi_os_alloc+0x121>
               	testq	%rbx, %rbx
               	je	0x42ba0a <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 222580(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	addq	%rbx, %rcx
               	movq	222562(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b940 <_mi_os_alloc+0xf0>
               	lock
               	cmpxchgq	%rcx, 222546(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42b930 <_mi_os_alloc+0xe0>
               	testq	%rbx, %rbx
               	jle	0x42b9ad <_mi_os_alloc+0x15d>
               	lock
               	addq	%rbx, 222515(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	jmp	0x42b9bb <_mi_os_alloc+0x16b>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b996 <_mi_os_alloc+0x146>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b8c9 <_mi_os_alloc+0x79>
               	jmp	0x42b9a8 <_mi_os_alloc+0x158>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	100606(%rip), %rdi      # 0x44427d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%r14d, %r14d
               	movq	%rbx, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	jmp	0x42ba0a <_mi_os_alloc+0x1ba>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b8c9 <_mi_os_alloc+0x79>
               	xorl	%r14d, %r14d
               	jmp	0x42ba0a <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rax
               	negq	%rax
               	lock
               	addq	%rax, 222413(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 222449(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	addq	%rbx, %rcx
               	movq	222431(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b9f0 <_mi_os_alloc+0x1a0>
               	lock
               	cmpxchgq	%rcx, 222402(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42b9e0 <_mi_os_alloc+0x190>
               	testq	%rbx, %rbx
               	jle	0x42b9ff <_mi_os_alloc+0x1af>
               	lock
               	addq	%rbx, 222371(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	jmp	0x42ba0a <_mi_os_alloc+0x1ba>
               	negq	%rbx
               	lock
               	addq	%rbx, 222366(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	movq	%r14, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_os_free_ex>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42bb82 <_mi_os_free_ex+0x162>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x42bb82 <_mi_os_free_ex+0x162>
               	movl	%edx, %ebp
               	movq	%rdi, %r14
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42ba50 <_mi_os_free_ex+0x30>
               	movq	216594(%rip), %rcx      # 0x460860 <os_page_size>
               	jmp	0x42ba81 <_mi_os_free_ex+0x61>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42ba81 <_mi_os_free_ex+0x61>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42ba81 <_mi_os_free_ex+0x61>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42badf <_mi_os_free_ex+0xbf>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42baac <_mi_os_free_ex+0x8c>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42badf <_mi_os_free_ex+0xbf>
               	jmp	0x42bb82 <_mi_os_free_ex+0x162>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42bacd <_mi_os_free_ex+0xad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42badf <_mi_os_free_ex+0xbf>
               	jmp	0x42bb82 <_mi_os_free_ex+0x162>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	je	0x42bb82 <_mi_os_free_ex+0x162>
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413890 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%bpl, %bpl
               	je	0x42bb3c <_mi_os_free_ex+0x11c>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 222133(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	222115(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42bb20 <_mi_os_free_ex+0x100>
               	lock
               	cmpxchgq	%rsi, 222098(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42bb10 <_mi_os_free_ex+0xf0>
               	testq	%rbx, %rbx
               	js	0x42bb34 <_mi_os_free_ex+0x114>
               	lock
               	addq	%rbx, 222075(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	testq	%rbx, %rbx
               	jne	0x42bb3c <_mi_os_free_ex+0x11c>
               	jmp	0x42bb7d <_mi_os_free_ex+0x15d>
               	lock
               	addq	%rdx, 222052(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 222032(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	222014(%rip), %rax      # 0x461e90 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42bb70 <_mi_os_free_ex+0x150>
               	lock
               	cmpxchgq	%rsi, 221986(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	jne	0x42bb60 <_mi_os_free_ex+0x140>
               	testq	%rbx, %rbx
               	js	0x42bb87 <_mi_os_free_ex+0x167>
               	lock
               	addq	%rbx, 221963(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	je	0x42bb94 <_mi_os_free_ex+0x174>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 221937(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42bb82 <_mi_os_free_ex+0x162>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413880 <strerror@plt>
               	leaq	99992(%rip), %rdi       # 0x44423f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmp	0x42bc40 <_mi_warning_message>
               	nopl	(%rax,%rax)

<_mi_stat_decrease>:
               	testq	%rsi, %rsi
               	je	0x42bc36 <_mi_stat_decrease+0x76>
               	leaq	221808(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42bc18 <_mi_stat_decrease+0x58>
               	leaq	222368(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42bc18 <_mi_stat_decrease+0x58>
               	movq	%rsi, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 24(%rdi)
               	subq	%rsi, %rdx
               	movq	16(%rdi), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42bc0d <_mi_stat_decrease+0x4d>
               	lock
               	cmpxchgq	%rdx, 16(%rdi)
               	jne	0x42bc00 <_mi_stat_decrease+0x40>
               	testq	%rsi, %rsi
               	js	0x42bc37 <_mi_stat_decrease+0x77>
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	24(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42bc2d <_mi_stat_decrease+0x6d>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	js	0x42bc3c <_mi_stat_decrease+0x7c>
               	addq	%rsi, 8(%rdi)
               	retq
               	lock
               	addq	%rcx, (%rdi)
               	retq
               	subq	%rsi, (%rdi)
               	retq

<_mi_warning_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42bc8c <_mi_warning_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42bcc4 <_mi_warning_message+0x84>
               	movl	$2, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42bd71 <_mi_warning_message+0x131>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 222766(%rip)      # 0x462300 <warning_count>
               	cmpq	215951(%rip), %rax      # 0x460868 <mi_max_warning_count>
               	ja	0x42bd71 <_mi_warning_message+0x131>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42bd71 <_mi_warning_message+0x131>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42bd71 <_mi_warning_message+0x131>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x4138a0 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	222661(%rip), %r12      # 0x462308 <mi_out_arg>
               	movq	222662(%rip), %rax      # 0x462310 <mi_out_default>
               	testq	%rax, %rax
               	leaq	44(%rip), %rbx          # 0x42bd80 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	99594(%rip), %rdi       # 0x444269 <typeinfo name for kotlin::gc::GCSchedulerData+0x1100>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq

<mi_out_buf>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42bdb7 <mi_out_buf+0x37>
               	movq	222603(%rip), %rax      # 0x462318 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x42bdb7 <mi_out_buf+0x37>
               	movq	%rdi, %rbx
               	callq	0x413710 <strlen@plt>
               	testq	%rax, %rax
               	je	0x42bdb7 <mi_out_buf+0x37>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 222570(%rip)      # 0x462318 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x42bdb9 <mi_out_buf+0x39>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	222537(%rip), %rdi      # 0x462320 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x413720 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<_mi_stat_increase>:
               	testq	%rsi, %rsi
               	je	0x42be62 <_mi_stat_increase+0x72>
               	leaq	221252(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42be37 <_mi_stat_increase+0x47>
               	leaq	221816(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42be37 <_mi_stat_increase+0x47>
               	movq	%rsi, %rcx
               	lock
               	xaddq	%rcx, 24(%rdi)
               	addq	%rsi, %rcx
               	movq	16(%rdi), %rax
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42be2d <_mi_stat_increase+0x3d>
               	lock
               	cmpxchgq	%rcx, 16(%rdi)
               	jne	0x42be20 <_mi_stat_increase+0x30>
               	testq	%rsi, %rsi
               	jle	0x42be55 <_mi_stat_increase+0x65>
               	lock
               	addq	%rsi, (%rdi)
               	retq
               	movq	24(%rdi), %rax
               	addq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42be4c <_mi_stat_increase+0x5c>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	jle	0x42be5e <_mi_stat_increase+0x6e>
               	addq	%rsi, (%rdi)
               	retq
               	negq	%rsi
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	subq	%rsi, 8(%rdi)
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_unix_mmapx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%ecx, %r14d
               	movl	%edx, %r15d
               	movq	%rdi, %rbp
               	cmpq	$1073741824, %rdi       # imm = 0x40000000
               	ja	0x42bf63 <mi_unix_mmapx+0xf3>
               	movl	%ebp, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	testq	%rax, %rax
               	jne	0x42bf63 <mi_unix_mmapx+0xf3>
               	movq	%rsi, %r12
               	leaq	-1(%rsi), %rax
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42bf63 <mi_unix_mmapx+0xf3>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 255107(%rip)      # 0x46a340 <aligned_base>
               	leaq	-1(%rbx), %rax
               	shrq	$41, %rax
               	cmpl	$15, %eax
               	jb	0x42bf13 <mi_unix_mmapx+0xa3>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	callq	0x428ce0 <_mi_heap_random_next>
               	shlq	$5, %rax
               	movabsq	$4398042316800, %rcx    # imm = 0x3FFFFC00000
               	andq	%rax, %rcx
               	movabsq	$2199023255552, %rdx    # imm = 0x20000000000
               	addq	%rcx, %rdx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rdx, 255033(%rip)      # 0x46a340 <aligned_base>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 255021(%rip)      # 0x46a340 <aligned_base>
               	movq	%rbx, %rax
               	orq	%r12, %rax
               	shrq	$32, %rax
               	je	0x42bf2e <mi_unix_mmapx+0xbe>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r12
               	testq	%rbx, %rbx
               	jne	0x42bf3a <mi_unix_mmapx+0xca>
               	jmp	0x42bf63 <mi_unix_mmapx+0xf3>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r12d
               	testq	%rbx, %rbx
               	je	0x42bf63 <mi_unix_mmapx+0xf3>
               	testq	%rdx, %rdx
               	jne	0x42bf63 <mi_unix_mmapx+0xf3>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	leaq	1(%rax), %rcx
               	cmpq	$1, %rcx
               	ja	0x42bf86 <mi_unix_mmapx+0x116>
               	xorl	%ebx, %ebx
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	cmpq	$-1, %rax
               	cmoveq	%rbx, %rax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<_mi_os_numa_node_count_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$128, %rsp
               	movq	254901(%rip), %rbx      # 0x46a358 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x42c023 <_mi_os_numa_node_count_get+0x93>
               	movl	$15, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x42c00b <_mi_os_numa_node_count_get+0x7b>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	99423(%rip), %r14       # 0x444429 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	movq	%rsp, %r15
               	nopl	(%rax)
               	cmpl	$255, %ebx
               	je	0x42c003 <_mi_os_numa_node_count_get+0x73>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x413910 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x42bfd0 <_mi_os_numa_node_count_get+0x40>
               	jmp	0x42c008 <_mi_os_numa_node_count_get+0x78>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 254790(%rip)      # 0x46a358 <_mi_numa_node_count>
               	leaq	99376(%rip), %rdi       # 0x444449 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	movq	%rbx, %rax
               	addq	$128, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_error_message>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$720, %rsp              # imm = 0x2D0
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	testb	%al, %al
               	je	0x42c08f <_mi_error_message+0x4f>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430224, %rax     # imm = 0x3000000010
               	movq	%rax, (%rsp)
               	xorl	%edi, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42c0e7 <_mi_error_message+0xa7>
               	movl	$2, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42c16b <_mi_error_message+0x12b>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 254627(%rip)      # 0x46a398 <error_count>
               	cmpq	215380(%rip), %rax      # 0x460a50 <mi_max_error_count>
               	ja	0x42c16b <_mi_error_message+0x12b>
               	testq	%rbx, %rbx
               	je	0x42c16b <_mi_error_message+0x12b>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42c16b <_mi_error_message+0x12b>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x4138a0 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	221643(%rip), %r12      # 0x462308 <mi_out_arg>
               	movq	221644(%rip), %rax      # 0x462310 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-974(%rip), %rbx        # 0x42bd80 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	99522(%rip), %rdi       # 0x44461b <typeinfo name for kotlin::gc::GCSchedulerData+0x14b2>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	cmpq	$0, 254509(%rip)        # 0x46a3a0 <mi_error_handler>
               	je	0x42c187 <_mi_error_message+0x147>
               	movq	254500(%rip), %rax      # 0x46a3a0 <mi_error_handler>
               	movq	254501(%rip), %rsi      # 0x46a3a8 <mi_error_arg>
               	movl	%ebp, %edi
               	callq	*%rax
               	addq	$720, %rsp              # imm = 0x2D0
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<mi_stats_merge_from>:
               	leaq	220313(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x42c689 <mi_stats_merge_from+0x4e9>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c1bf <mi_stats_merge_from+0x1f>
               	cmpq	$0, 8(%rdi)
               	je	0x42c1eb <mi_stats_merge_from+0x4b>
               	lock
               	addq	%rax, 220281(%rip)      # 0x461e40 <_mi_stats_main>
               	movq	24(%rdi), %rax
               	lock
               	addq	%rax, 220293(%rip)      # 0x461e58 <_mi_stats_main+0x18>
               	movq	8(%rdi), %rax
               	lock
               	addq	%rax, 220265(%rip)      # 0x461e48 <_mi_stats_main+0x8>
               	movq	16(%rdi), %rax
               	lock
               	addq	%rax, 220261(%rip)      # 0x461e50 <_mi_stats_main+0x10>
               	movq	32(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c1fb <mi_stats_merge_from+0x5b>
               	cmpq	$0, 40(%rdi)
               	je	0x42c227 <mi_stats_merge_from+0x87>
               	lock
               	addq	%rax, 220253(%rip)      # 0x461e60 <_mi_stats_main+0x20>
               	movq	56(%rdi), %rax
               	lock
               	addq	%rax, 220265(%rip)      # 0x461e78 <_mi_stats_main+0x38>
               	movq	40(%rdi), %rax
               	lock
               	addq	%rax, 220237(%rip)      # 0x461e68 <_mi_stats_main+0x28>
               	movq	48(%rdi), %rax
               	lock
               	addq	%rax, 220233(%rip)      # 0x461e70 <_mi_stats_main+0x30>
               	movq	64(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c237 <mi_stats_merge_from+0x97>
               	cmpq	$0, 72(%rdi)
               	je	0x42c263 <mi_stats_merge_from+0xc3>
               	lock
               	addq	%rax, 220225(%rip)      # 0x461e80 <_mi_stats_main+0x40>
               	movq	88(%rdi), %rax
               	lock
               	addq	%rax, 220237(%rip)      # 0x461e98 <_mi_stats_main+0x58>
               	movq	72(%rdi), %rax
               	lock
               	addq	%rax, 220209(%rip)      # 0x461e88 <_mi_stats_main+0x48>
               	movq	80(%rdi), %rax
               	lock
               	addq	%rax, 220205(%rip)      # 0x461e90 <_mi_stats_main+0x50>
               	movq	96(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c273 <mi_stats_merge_from+0xd3>
               	cmpq	$0, 104(%rdi)
               	je	0x42c29f <mi_stats_merge_from+0xff>
               	lock
               	addq	%rax, 220197(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	120(%rdi), %rax
               	lock
               	addq	%rax, 220209(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	movq	104(%rdi), %rax
               	lock
               	addq	%rax, 220181(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	movq	112(%rdi), %rax
               	lock
               	addq	%rax, 220177(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	movq	128(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c2b5 <mi_stats_merge_from+0x115>
               	cmpq	$0, 136(%rdi)
               	je	0x42c2ea <mi_stats_merge_from+0x14a>
               	lock
               	addq	%rax, 220163(%rip)      # 0x461ec0 <_mi_stats_main+0x80>
               	movq	152(%rdi), %rax
               	lock
               	addq	%rax, 220172(%rip)      # 0x461ed8 <_mi_stats_main+0x98>
               	movq	136(%rdi), %rax
               	lock
               	addq	%rax, 220141(%rip)      # 0x461ec8 <_mi_stats_main+0x88>
               	movq	144(%rdi), %rax
               	lock
               	addq	%rax, 220134(%rip)      # 0x461ed0 <_mi_stats_main+0x90>
               	movq	160(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c300 <mi_stats_merge_from+0x160>
               	cmpq	$0, 168(%rdi)
               	je	0x42c335 <mi_stats_merge_from+0x195>
               	lock
               	addq	%rax, 220120(%rip)      # 0x461ee0 <_mi_stats_main+0xa0>
               	movq	184(%rdi), %rax
               	lock
               	addq	%rax, 220129(%rip)      # 0x461ef8 <_mi_stats_main+0xb8>
               	movq	168(%rdi), %rax
               	lock
               	addq	%rax, 220098(%rip)      # 0x461ee8 <_mi_stats_main+0xa8>
               	movq	176(%rdi), %rax
               	lock
               	addq	%rax, 220091(%rip)      # 0x461ef0 <_mi_stats_main+0xb0>
               	movq	224(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c34b <mi_stats_merge_from+0x1ab>
               	cmpq	$0, 232(%rdi)
               	je	0x42c380 <mi_stats_merge_from+0x1e0>
               	lock
               	addq	%rax, 220109(%rip)      # 0x461f20 <_mi_stats_main+0xe0>
               	movq	248(%rdi), %rax
               	lock
               	addq	%rax, 220118(%rip)      # 0x461f38 <_mi_stats_main+0xf8>
               	movq	232(%rdi), %rax
               	lock
               	addq	%rax, 220087(%rip)      # 0x461f28 <_mi_stats_main+0xe8>
               	movq	240(%rdi), %rax
               	lock
               	addq	%rax, 220080(%rip)      # 0x461f30 <_mi_stats_main+0xf0>
               	movq	192(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c396 <mi_stats_merge_from+0x1f6>
               	cmpq	$0, 200(%rdi)
               	je	0x42c3cb <mi_stats_merge_from+0x22b>
               	lock
               	addq	%rax, 220002(%rip)      # 0x461f00 <_mi_stats_main+0xc0>
               	movq	216(%rdi), %rax
               	lock
               	addq	%rax, 220011(%rip)      # 0x461f18 <_mi_stats_main+0xd8>
               	movq	200(%rdi), %rax
               	lock
               	addq	%rax, 219980(%rip)      # 0x461f08 <_mi_stats_main+0xc8>
               	movq	208(%rdi), %rax
               	lock
               	addq	%rax, 219973(%rip)      # 0x461f10 <_mi_stats_main+0xd0>
               	movq	256(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c3e1 <mi_stats_merge_from+0x241>
               	cmpq	$0, 264(%rdi)
               	je	0x42c416 <mi_stats_merge_from+0x276>
               	lock
               	addq	%rax, 219991(%rip)      # 0x461f40 <_mi_stats_main+0x100>
               	movq	280(%rdi), %rax
               	lock
               	addq	%rax, 220000(%rip)      # 0x461f58 <_mi_stats_main+0x118>
               	movq	264(%rdi), %rax
               	lock
               	addq	%rax, 219969(%rip)      # 0x461f48 <_mi_stats_main+0x108>
               	movq	272(%rdi), %rax
               	lock
               	addq	%rax, 219962(%rip)      # 0x461f50 <_mi_stats_main+0x110>
               	movq	384(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c42c <mi_stats_merge_from+0x28c>
               	cmpq	$0, 392(%rdi)
               	je	0x42c461 <mi_stats_merge_from+0x2c1>
               	lock
               	addq	%rax, 220044(%rip)      # 0x461fc0 <_mi_stats_main+0x180>
               	movq	408(%rdi), %rax
               	lock
               	addq	%rax, 220053(%rip)      # 0x461fd8 <_mi_stats_main+0x198>
               	movq	392(%rdi), %rax
               	lock
               	addq	%rax, 220022(%rip)      # 0x461fc8 <_mi_stats_main+0x188>
               	movq	400(%rdi), %rax
               	lock
               	addq	%rax, 220015(%rip)      # 0x461fd0 <_mi_stats_main+0x190>
               	movq	416(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c477 <mi_stats_merge_from+0x2d7>
               	cmpq	$0, 424(%rdi)
               	je	0x42c4ac <mi_stats_merge_from+0x30c>
               	lock
               	addq	%rax, 220001(%rip)      # 0x461fe0 <_mi_stats_main+0x1a0>
               	movq	440(%rdi), %rax
               	lock
               	addq	%rax, 220010(%rip)      # 0x461ff8 <_mi_stats_main+0x1b8>
               	movq	424(%rdi), %rax
               	lock
               	addq	%rax, 219979(%rip)      # 0x461fe8 <_mi_stats_main+0x1a8>
               	movq	432(%rdi), %rax
               	lock
               	addq	%rax, 219972(%rip)      # 0x461ff0 <_mi_stats_main+0x1b0>
               	movq	288(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c4c2 <mi_stats_merge_from+0x322>
               	cmpq	$0, 296(%rdi)
               	je	0x42c4f7 <mi_stats_merge_from+0x357>
               	lock
               	addq	%rax, 219798(%rip)      # 0x461f60 <_mi_stats_main+0x120>
               	movq	312(%rdi), %rax
               	lock
               	addq	%rax, 219807(%rip)      # 0x461f78 <_mi_stats_main+0x138>
               	movq	296(%rdi), %rax
               	lock
               	addq	%rax, 219776(%rip)      # 0x461f68 <_mi_stats_main+0x128>
               	movq	304(%rdi), %rax
               	lock
               	addq	%rax, 219769(%rip)      # 0x461f70 <_mi_stats_main+0x130>
               	movq	320(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c50d <mi_stats_merge_from+0x36d>
               	cmpq	$0, 328(%rdi)
               	je	0x42c542 <mi_stats_merge_from+0x3a2>
               	lock
               	addq	%rax, 219755(%rip)      # 0x461f80 <_mi_stats_main+0x140>
               	movq	344(%rdi), %rax
               	lock
               	addq	%rax, 219764(%rip)      # 0x461f98 <_mi_stats_main+0x158>
               	movq	328(%rdi), %rax
               	lock
               	addq	%rax, 219733(%rip)      # 0x461f88 <_mi_stats_main+0x148>
               	movq	336(%rdi), %rax
               	lock
               	addq	%rax, 219726(%rip)      # 0x461f90 <_mi_stats_main+0x150>
               	movq	352(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c558 <mi_stats_merge_from+0x3b8>
               	cmpq	$0, 360(%rdi)
               	je	0x42c58d <mi_stats_merge_from+0x3ed>
               	lock
               	addq	%rax, 219712(%rip)      # 0x461fa0 <_mi_stats_main+0x160>
               	movq	376(%rdi), %rax
               	lock
               	addq	%rax, 219721(%rip)      # 0x461fb8 <_mi_stats_main+0x178>
               	movq	360(%rdi), %rax
               	lock
               	addq	%rax, 219690(%rip)      # 0x461fa8 <_mi_stats_main+0x168>
               	movq	368(%rdi), %rax
               	lock
               	addq	%rax, 219683(%rip)      # 0x461fb0 <_mi_stats_main+0x170>
               	movq	448(%rdi), %rax
               	lock
               	addq	%rax, 219748(%rip)      # 0x462000 <_mi_stats_main+0x1c0>
               	movq	456(%rdi), %rax
               	lock
               	addq	%rax, 219741(%rip)      # 0x462008 <_mi_stats_main+0x1c8>
               	movq	464(%rdi), %rax
               	lock
               	addq	%rax, 219734(%rip)      # 0x462010 <_mi_stats_main+0x1d0>
               	movq	472(%rdi), %rax
               	lock
               	addq	%rax, 219727(%rip)      # 0x462018 <_mi_stats_main+0x1d8>
               	movq	480(%rdi), %rax
               	lock
               	addq	%rax, 219720(%rip)      # 0x462020 <_mi_stats_main+0x1e0>
               	movq	488(%rdi), %rax
               	lock
               	addq	%rax, 219713(%rip)      # 0x462028 <_mi_stats_main+0x1e8>
               	movq	496(%rdi), %rax
               	lock
               	addq	%rax, 219706(%rip)      # 0x462030 <_mi_stats_main+0x1f0>
               	movq	504(%rdi), %rax
               	lock
               	addq	%rax, 219699(%rip)      # 0x462038 <_mi_stats_main+0x1f8>
               	movq	512(%rdi), %rax
               	lock
               	addq	%rax, 219692(%rip)      # 0x462040 <_mi_stats_main+0x200>
               	movq	520(%rdi), %rax
               	lock
               	addq	%rax, 219685(%rip)      # 0x462048 <_mi_stats_main+0x208>
               	movq	528(%rdi), %rax
               	lock
               	addq	%rax, 219678(%rip)      # 0x462050 <_mi_stats_main+0x210>
               	movq	536(%rdi), %rax
               	lock
               	addq	%rax, 219671(%rip)      # 0x462058 <_mi_stats_main+0x218>
               	movq	544(%rdi), %rax
               	lock
               	addq	%rax, 219664(%rip)      # 0x462060 <_mi_stats_main+0x220>
               	movq	552(%rdi), %rax
               	lock
               	addq	%rax, 219657(%rip)      # 0x462068 <_mi_stats_main+0x228>
               	movq	560(%rdi), %rax
               	lock
               	addq	%rax, 219650(%rip)      # 0x462070 <_mi_stats_main+0x230>
               	movq	568(%rdi), %rax
               	lock
               	addq	%rax, 219643(%rip)      # 0x462078 <_mi_stats_main+0x238>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	jmp	0x413750 <memset@plt>
               	retq
               	nopw	(%rax,%rax)

<mi_heap_collect_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	testq	%rdi, %rdi
               	je	0x42d14c <mi_heap_collect_ex+0xabc>
               	movq	%rdi, %r15
               	leaq	201423(%rip), %rax      # 0x45d980 <_mi_heap_empty>
               	cmpq	%rax, %rdi
               	je	0x42d14c <mi_heap_collect_ex+0xabc>
               	movl	%esi, %ebp
               	movq	(%r15), %rbx
               	movq	(%rbx), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rbx)
               	cmpq	$0, 318967(%rip)        # 0x47a4c8 <deferred_free>
               	je	0x42c6dd <mi_heap_collect_ex+0x4d>
               	cmpb	$0, 8(%rbx)
               	je	0x42c879 <mi_heap_collect_ex+0x1e9>
               	cmpl	$2, %ebp
               	je	0x42c8a2 <mi_heap_collect_ex+0x212>
               	cmpl	$1, %ebp
               	jne	0x42c91d <mi_heap_collect_ex+0x28d>
               	movq	212386(%rip), %rax      # 0x460498 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42c70d <mi_heap_collect_ex+0x7d>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42c91d <mi_heap_collect_ex+0x28d>
               	cmpq	%r15, 16(%rbx)
               	jne	0x42c91d <mi_heap_collect_ex+0x28d>
               	cmpb	$0, 3048(%r15)
               	jne	0x42c91d <mi_heap_collect_ex+0x28d>
               	addq	$32, %rbx
               	movq	318672(%rip), %rax      # 0x47a400 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c7fc <mi_heap_collect_ex+0x16c>
               	movq	318781(%rip), %rax      # 0x47a480 <abandoned_visited>
               	xorl	%r14d, %r14d
               	testq	%rax, %rax
               	je	0x42c920 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 318760(%rip)      # 0x47a480 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x42c920 <mi_heap_collect_ex+0x290>
               	movq	318616(%rip), %rax      # 0x47a400 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c78e <mi_heap_collect_ex+0xfe>
               	movq	318793(%rip), %rdx      # 0x47a4c0 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 318580(%rip)      # 0x47a400 <abandoned>
               	je	0x42c7ec <mi_heap_collect_ex+0x15c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x42c7a0 <mi_heap_collect_ex+0x110>
               	movq	318537(%rip), %rax      # 0x47a400 <abandoned>
               	nopw	(%rax,%rax)
               	movq	318713(%rip), %rdx      # 0x47a4c0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 318486(%rip)      # 0x47a400 <abandoned>
               	jne	0x42c7c0 <mi_heap_collect_ex+0x130>
               	lock
               	addq	%rdx, 318540(%rip)      # 0x47a440 <abandoned_count>
               	lock
               	subq	%rdx, 318660(%rip)      # 0x47a4c0 <abandoned_visited_count>
               	lock
               	addq	$1, 318395(%rip)        # 0x47a3c0 <abandoned_readers>
               	movq	318452(%rip), %rax      # 0x47a400 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x42c914 <mi_heap_collect_ex+0x284>
               	movq	16(%rdi), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 318407(%rip)      # 0x47a400 <abandoned>
               	jne	0x42c810 <mi_heap_collect_ex+0x180>
               	lock
               	subq	$1, 318332(%rip)        # 0x47a3c0 <abandoned_readers>
               	movq	$0, 16(%rdi)
               	lock
               	subq	$1, 318443(%rip)        # 0x47a440 <abandoned_count>
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fb90 <mi_segment_reclaim>
               	movq	318357(%rip), %rax      # 0x47a400 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	jbe	0x42c73c <mi_heap_collect_ex+0xac>
               	jmp	0x42c7fc <mi_heap_collect_ex+0x16c>
               	movb	$1, 8(%rbx)
               	movq	318532(%rip), %rax      # 0x47a4c8 <deferred_free>
               	movq	318533(%rip), %rdx      # 0x47a4d0 <deferred_arg>
               	movl	$1, %edi
               	callq	*%rax
               	movq	(%r15), %rbx
               	movb	$0, 8(%rbx)
               	cmpl	$2, %ebp
               	jne	0x42c6e6 <mi_heap_collect_ex+0x56>
               	movb	$1, %r14b
               	cmpq	$0, 3016(%r15)
               	je	0x42c920 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	jmp	0x42c8ca <mi_heap_collect_ex+0x23a>
               	nopw	(%rax,%rax)
               	addq	$1, %rcx
               	cmpq	$75, %rcx
               	je	0x42c920 <mi_heap_collect_ex+0x290>
               	leaq	(%rcx,%rcx,2), %rax
               	movq	1040(%r15,%rax,8), %rdx
               	nopw	%cs:(%rax,%rax)
               	testq	%rdx, %rdx
               	je	0x42c8c0 <mi_heap_collect_ex+0x230>
               	movq	%rdx, %rsi
               	movq	48(%rdx), %rdx
               	movq	32(%rsi), %rax
               	movl	%eax, %edi
               	andl	$3, %edi
               	cmpl	$3, %edi
               	je	0x42c8e0 <mi_heap_collect_ex+0x250>
               	cmpl	$1, %edi
               	je	0x42c910 <mi_heap_collect_ex+0x280>
               	movq	%rax, %rdi
               	orq	$3, %rdi
               	lock
               	cmpxchgq	%rdi, 32(%rsi)
               	jne	0x42c8ec <mi_heap_collect_ex+0x25c>
               	jmp	0x42c8e0 <mi_heap_collect_ex+0x250>
               	pause
               	jmp	0x42c8ec <mi_heap_collect_ex+0x25c>
               	lock
               	subq	$1, 318115(%rip)        # 0x47a3c0 <abandoned_readers>
               	xorl	%r14d, %r14d
               	movq	2840(%r15), %rax
               	xorl	%ecx, %ecx
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x42c960 <mi_heap_collect_ex+0x2d0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%rcx, 2840(%r15)
               	jne	0x42c930 <mi_heap_collect_ex+0x2a0>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f4c0 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42c950 <mi_heap_collect_ex+0x2c0>
               	movq	3024(%r15), %rbp
               	cmpq	3032(%r15), %rbp
               	jbe	0x42cd71 <mi_heap_collect_ex+0x6e1>
               	movq	$74, 3024(%r15)
               	movq	$0, 3032(%r15)
               	cmpq	$0, 3016(%r15)
               	movq	%r15, (%rsp)
               	je	0x42ce41 <mi_heap_collect_ex+0x7b1>
               	testb	%r14b, %r14b
               	je	0x42cdd4 <mi_heap_collect_ex+0x744>
               	leaq	1016(%r15), %rax
               	movq	%rax, 8(%rsp)
               	xorl	%eax, %eax
               	leaq	218246(%rip), %r13      # 0x461e40 <_mi_stats_main>
               	jmp	0x42c9dd <mi_heap_collect_ex+0x34d>
               	nop
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	addq	$24, 8(%rsp)
               	cmpq	$75, %rax
               	movq	(%rsp), %r15
               	je	0x42ce41 <mi_heap_collect_ex+0x7b1>
               	movq	%rax, 16(%rsp)
               	leaq	(%rax,%rax,2), %rax
               	movq	1040(%r15,%rax,8), %r14
               	testq	%r14, %r14
               	je	0x42c9c0 <mi_heap_collect_ex+0x330>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42ca25 <mi_heap_collect_ex+0x395>
               	nopl	(%rax,%rax)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d300 <_mi_page_free>
               	testq	%r14, %r14
               	je	0x42c9c0 <mi_heap_collect_ex+0x330>
               	movq	%r14, %rbx
               	movq	48(%r14), %r14
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42d230 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbx)
               	je	0x42ca10 <mi_heap_collect_ex+0x380>
               	leaq	48(%rbx), %r10
               	movq	40(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	40(%rbx), %r12
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42ca5e <mi_heap_collect_ex+0x3ce>
               	movq	(%r10), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%r10), %r9
               	testq	%r9, %r9
               	je	0x42ca6a <mi_heap_collect_ex+0x3da>
               	movq	%rax, 56(%r9)
               	cmpq	%rbx, 8(%r15)
               	je	0x42ca80 <mi_heap_collect_ex+0x3f0>
               	cmpq	%rbx, (%r15)
               	jne	0x42cc90 <mi_heap_collect_ex+0x600>
               	jmp	0x42ca91 <mi_heap_collect_ex+0x401>
               	nop
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r15)
               	cmpq	%rbx, (%r15)
               	jne	0x42cc90 <mi_heap_collect_ex+0x600>
               	movq	%r9, (%r15)
               	movq	16(%r15), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42cc90 <mi_heap_collect_ex+0x600>
               	testq	%r9, %r9
               	leaq	100690(%rip), %rcx      # 0x445400 <_mi_page_empty>
               	cmoveq	%rcx, %r9
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r9, 8(%r12,%r11,8)
               	je	0x42cc90 <mi_heap_collect_ex+0x600>
               	cmpq	$9, %rax
               	jae	0x42cad2 <mi_heap_collect_ex+0x442>
               	xorl	%ecx, %ecx
               	jmp	0x42cb92 <mi_heap_collect_ex+0x502>
               	cmpq	$64, %rax
               	ja	0x42cae2 <mi_heap_collect_ex+0x452>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42cafd <mi_heap_collect_ex+0x46d>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r12), %rbp
               	movq	8(%rsp), %rdx
               	nopw	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42cb70 <mi_heap_collect_ex+0x4e0>
               	cmpq	$71, %rax
               	ja	0x42cb40 <mi_heap_collect_ex+0x4b0>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x42cb70 <mi_heap_collect_ex+0x4e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42cb70 <mi_heap_collect_ex+0x4e0>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r13
               	movl	%r13d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r13,4), %ecx
               	leaq	217811(%rip), %r13      # 0x461e40 <_mi_stats_main>
               	addb	$-3, %cl
               	cmpq	%rbp, %rdx
               	jbe	0x42cb7e <mi_heap_collect_ex+0x4ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r8b
               	je	0x42cb10 <mi_heap_collect_ex+0x480>
               	leaq	1(%rdi), %rcx
               	cmpq	%r11, %rdi
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42cc90 <mi_heap_collect_ex+0x600>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42cc80 <mi_heap_collect_ex+0x5f0>
               	movq	%r8, %rdi
               	andq	$-4, %rdi
               	movq	%r9, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%rdi), %rbp
               	movq	%rbp, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rbp
               	jae	0x42cbd5 <mi_heap_collect_ex+0x545>
               	xorl	%ebp, %ebp
               	jmp	0x42cc32 <mi_heap_collect_ex+0x5a2>
               	leaq	(%r12,%rcx,8), %r13
               	addq	$120, %r13
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbp,8)
               	movdqu	%xmm0, -96(%r13,%rbp,8)
               	movdqu	%xmm0, -80(%r13,%rbp,8)
               	movdqu	%xmm0, -64(%r13,%rbp,8)
               	movdqu	%xmm0, -48(%r13,%rbp,8)
               	movdqu	%xmm0, -32(%r13,%rbp,8)
               	movdqu	%xmm0, -16(%r13,%rbp,8)
               	movdqu	%xmm0, (%r13,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdx
               	jne	0x42cbf0 <mi_heap_collect_ex+0x560>
               	testq	%rax, %rax
               	je	0x42cc62 <mi_heap_collect_ex+0x5d2>
               	addq	%rcx, %rbp
               	leaq	(%r12,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	nopl	(%rax)
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42cc50 <mi_heap_collect_ex+0x5c0>
               	cmpq	%rdi, %r8
               	leaq	217556(%rip), %r13      # 0x461e40 <_mi_stats_main>
               	je	0x42cc90 <mi_heap_collect_ex+0x600>
               	addq	%rdi, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r9, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42cc80 <mi_heap_collect_ex+0x5f0>
               	nop
               	addq	$-1, 3016(%r12)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r10)
               	andb	$-2, 6(%rbx)
               	movq	$0, 40(%rbx)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	144(%rsi), %rdx
               	leaq	224(%rdx), %rcx
               	cmpq	%r13, %rcx
               	jb	0x42cd30 <mi_heap_collect_ex+0x6a0>
               	leaq	218021(%rip), %rdi      # 0x462080 <os_preloading>
               	cmpq	%rdi, %rcx
               	jae	0x42cd30 <mi_heap_collect_ex+0x6a0>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 248(%rdx)
               	leaq	1(%rdi), %rbp
               	movq	240(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x42cd10 <mi_heap_collect_ex+0x680>
               	lock
               	cmpxchgq	%rbp, 240(%rdx)
               	jne	0x42cd00 <mi_heap_collect_ex+0x670>
               	lock
               	addq	$1, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42ca20 <mi_heap_collect_ex+0x390>
               	jmp	0x42cd60 <mi_heap_collect_ex+0x6d0>
               	nopl	(%rax,%rax)
               	movq	248(%rdx), %rbp
               	leaq	1(%rbp), %rdi
               	movq	%rdi, 248(%rdx)
               	cmpq	240(%rdx), %rbp
               	jl	0x42cd52 <mi_heap_collect_ex+0x6c2>
               	movq	%rdi, 240(%rdx)
               	addq	$1, (%rcx)
               	cmpq	%rax, 56(%rbx)
               	jne	0x42ca20 <mi_heap_collect_ex+0x390>
               	addq	$32, %rsi
               	movq	%rbx, %rdi
               	callq	0x42ef50 <mi_segment_abandon>
               	jmp	0x42ca20 <mi_heap_collect_ex+0x390>
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	leaq	(%r15,%rax,8), %rbx
               	addq	$1040, %rbx             # imm = 0x410
               	jmp	0x42cda5 <mi_heap_collect_ex+0x715>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r15), %rbp
               	ja	0x42c974 <mi_heap_collect_ex+0x2e4>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42cd90 <mi_heap_collect_ex+0x700>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x42cd90 <mi_heap_collect_ex+0x700>
               	cmpl	$0, 16(%rax)
               	jne	0x42cd89 <mi_heap_collect_ex+0x6f9>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42d300 <_mi_page_free>
               	jmp	0x42cd90 <mi_heap_collect_ex+0x700>
               	xorl	%r14d, %r14d
               	jmp	0x42cdee <mi_heap_collect_ex+0x75e>
               	nopl	(%rax)
               	addq	$1, %r14
               	cmpq	$75, %r14
               	movq	(%rsp), %r15
               	je	0x42ce41 <mi_heap_collect_ex+0x7b1>
               	leaq	(%r14,%r14,2), %rax
               	movq	1040(%r15,%rax,8), %rbp
               	testq	%rbp, %rbp
               	je	0x42cde0 <mi_heap_collect_ex+0x750>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42ce18 <mi_heap_collect_ex+0x788>
               	movq	%rbx, %rbp
               	testq	%rbx, %rbx
               	je	0x42cde0 <mi_heap_collect_ex+0x750>
               	movq	48(%rbp), %rbx
               	movq	%rbp, %rdi
               	movl	$1, %esi
               	callq	0x42d230 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbp)
               	jne	0x42ce10 <mi_heap_collect_ex+0x780>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d300 <_mi_page_free>
               	jmp	0x42ce10 <mi_heap_collect_ex+0x780>
               	movq	(%r15), %r15
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42d125 <mi_heap_collect_ex+0xa95>
               	leaq	217061(%rip), %rbx      # 0x461e40 <_mi_stats_main>
               	movl	$1, %r13d
               	jmp	0x42ce9c <mi_heap_collect_ex+0x80c>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	movq	(%r14), %rdx
               	andb	$1, %r12b
               	movzbl	%al, %r8d
               	movzbl	%r12b, %ecx
               	movq	%r14, %rdi
               	callq	0x42dd20 <_mi_mem_free>
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42d125 <mi_heap_collect_ex+0xa95>
               	addq	$-1, 120(%r15)
               	movq	24(%r14), %rax
               	movq	%rax, 136(%r15)
               	movq	$0, 24(%r14)
               	movq	144(%r15), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rbx, %rax
               	jb	0x42cf10 <mi_heap_collect_ex+0x880>
               	leaq	217522(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42cf10 <mi_heap_collect_ex+0x880>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42cf00 <mi_heap_collect_ex+0x870>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42cef0 <mi_heap_collect_ex+0x860>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42cf3a <mi_heap_collect_ex+0x8aa>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42cf32 <mi_heap_collect_ex+0x8a2>
               	movq	%rax, 432(%rcx)
               	addq	$1, 424(%rcx)
               	movq	72(%r14), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r14)
               	movq	144(%r15), %rcx
               	cmpq	%rbx, %rcx
               	setae	%dl
               	leaq	217384(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42cfa0 <mi_heap_collect_ex+0x910>
               	testb	%al, %al
               	je	0x42cfe0 <mi_heap_collect_ex+0x950>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42cf8d <mi_heap_collect_ex+0x8fd>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42cf80 <mi_heap_collect_ex+0x8f0>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42cffb <mi_heap_collect_ex+0x96b>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42d0ef <mi_heap_collect_ex+0xa5f>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42cfcd <mi_heap_collect_ex+0x93d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42cfc0 <mi_heap_collect_ex+0x930>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42d109 <mi_heap_collect_ex+0xa79>
               	nopw	(%rax,%rax)
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42cff6 <mi_heap_collect_ex+0x966>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	jbe	0x42d014 <mi_heap_collect_ex+0x984>
               	movq	%rax, 96(%r15)
               	movq	104(%r15), %rax
               	subq	%rsi, %rax
               	movq	%rax, 104(%r15)
               	cmpq	112(%r15), %rax
               	jbe	0x42d029 <mi_heap_collect_ex+0x999>
               	movq	%rax, 112(%r15)
               	movq	64(%r14), %r10
               	testq	%r10, %r10
               	je	0x42ce70 <mi_heap_collect_ex+0x7e0>
               	cmpq	$1, %r10
               	jne	0x42d050 <mi_heap_collect_ex+0x9c0>
               	movb	$1, %r12b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42d0a4 <mi_heap_collect_ex+0xa14>
               	nopl	(%rax)
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r14), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r12b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42d070 <mi_heap_collect_ex+0x9e0>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42d0c0 <mi_heap_collect_ex+0xa30>
               	shlq	$6, %r8
               	movb	121(%r14,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r12b
               	testb	$1, %al
               	je	0x42ce73 <mi_heap_collect_ex+0x7e3>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42abe0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r12b, %r12d
               	movl	$0, %eax
               	cmovnel	%eax, %r12d
               	movb	$1, %al
               	jmp	0x42ce75 <mi_heap_collect_ex+0x7e5>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42d105 <mi_heap_collect_ex+0xa75>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	ja	0x42d010 <mi_heap_collect_ex+0x980>
               	jmp	0x42d014 <mi_heap_collect_ex+0x984>
               	movq	209772(%rip), %rax      # 0x460498 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	movq	(%rsp), %rdx
               	je	0x42d143 <mi_heap_collect_ex+0xab3>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42d14c <mi_heap_collect_ex+0xabc>
               	movq	(%rdx), %rax
               	cmpq	%rdx, 16(%rax)
               	je	0x42d15b <mi_heap_collect_ex+0xacb>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	250446(%rip), %r14      # 0x46a3b0 <regions_count>
               	testq	%r14, %r14
               	je	0x42d14c <mi_heap_collect_ex+0xabc>
               	xorl	%ebp, %ebp
               	leaq	250448(%rip), %r15      # 0x46a3c0 <regions>
               	movq	$-1, %rbx
               	jmp	0x42d199 <mi_heap_collect_ex+0xb09>
               	xorl	%ecx, %ecx
               	cmpq	$-1, %rax
               	sete	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	callq	0x42d580 <_mi_arena_free>
               	nopl	(%rax)
               	addq	$1, %rbp
               	cmpq	%r14, %rbp
               	je	0x42d14c <mi_heap_collect_ex+0xabc>
               	movq	%rbp, %rcx
               	shlq	$6, %rcx
               	movq	(%rcx,%r15), %rax
               	testq	%rax, %rax
               	je	0x42d190 <mi_heap_collect_ex+0xb00>
               	leaq	(%r15,%rcx), %rsi
               	leaq	(%rcx,%r15), %rdx
               	addq	$16, %rdx
               	movq	16(%rcx,%r15), %rax
               	nop
               	testq	%rax, %rax
               	jne	0x42d190 <mi_heap_collect_ex+0xb00>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, (%rdx)
               	jne	0x42d1c0 <mi_heap_collect_ex+0xb30>
               	movq	8(%rcx,%r15), %rdi
               	movq	48(%rcx,%r15), %rdx
               	movq	32(%rcx,%r15), %rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 48(%rsi)
               	movdqa	%xmm0, 32(%rsi)
               	movdqa	%xmm0, 16(%rsi)
               	movdqa	%xmm0, (%rsi)
               	movq	$0, (%rsi)
               	testq	%rdi, %rdi
               	je	0x42d190 <mi_heap_collect_ex+0xb00>
               	movq	315833(%rip), %rcx      # 0x47a3c0 <abandoned_readers>
               	testq	%rcx, %rcx
               	je	0x42d179 <mi_heap_collect_ex+0xae9>
               	pause
               	movq	315815(%rip), %rcx      # 0x47a3c0 <abandoned_readers>
               	testq	%rcx, %rcx
               	jne	0x42d210 <mi_heap_collect_ex+0xb80>
               	jmp	0x42d179 <mi_heap_collect_ex+0xae9>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free_collect>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	testl	%esi, %esi
               	jne	0x42d246 <_mi_page_free_collect+0x16>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x42d299 <_mi_page_free_collect+0x69>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x42d250 <_mi_page_free_collect+0x20>
               	andq	$-4, %rcx
               	je	0x42d299 <_mi_page_free_collect+0x69>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x42d282 <_mi_page_free_collect+0x52>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x42d270 <_mi_page_free_collect+0x40>
               	cmpl	%edx, %eax
               	jbe	0x42d2c2 <_mi_page_free_collect+0x92>
               	leaq	95457(%rip), %rsi       # 0x44476e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42d2bb <_mi_page_free_collect+0x8b>
               	movq	8(%rbx), %rcx
               	testq	%rcx, %rcx
               	jne	0x42d2db <_mi_page_free_collect+0xab>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x42d2a2 <_mi_page_free_collect+0x72>
               	jmp	0x42d2bb <_mi_page_free_collect+0x8b>
               	testb	%bpl, %bpl
               	je	0x42d2bb <_mi_page_free_collect+0x8b>
               	movq	%rax, %rsi
               	movq	%rsi, %rdx
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	jne	0x42d2e3 <_mi_page_free_collect+0xb3>
               	movq	%rcx, (%rdx)
               	jmp	0x42d2ab <_mi_page_free_collect+0x7b>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	andb	$-3, 6(%rdi)
               	movq	40(%rdi), %rax
               	movq	(%rax), %r8
               	movq	40(%rdi), %r14
               	movq	56(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x42d328 <_mi_page_free+0x28>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rcx)
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42d335 <_mi_page_free+0x35>
               	movq	%rcx, 56(%rax)
               	cmpq	%rdi, 8(%rsi)
               	je	0x42d34a <_mi_page_free+0x4a>
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d53e <_mi_page_free+0x23e>
               	jmp	0x42d35f <_mi_page_free+0x5f>
               	movq	56(%rdi), %rcx
               	movq	%rcx, 8(%rsi)
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d53e <_mi_page_free+0x23e>
               	movq	%rax, (%rsi)
               	movq	16(%rsi), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42d53e <_mi_page_free+0x23e>
               	testq	%rax, %rax
               	leaq	98435(%rip), %r10       # 0x445400 <_mi_page_empty>
               	cmovneq	%rax, %r10
               	leaq	7(%rcx), %r11
               	shrq	$3, %r11
               	cmpq	%r10, 8(%r14,%r11,8)
               	je	0x42d53e <_mi_page_free+0x23e>
               	cmpq	$9, %rcx
               	jae	0x42d3a1 <_mi_page_free+0xa1>
               	xorl	%ecx, %ecx
               	jmp	0x42d462 <_mi_page_free+0x162>
               	cmpq	$64, %rcx
               	ja	0x42d3b1 <_mi_page_free+0xb1>
               	leal	1(%r11), %r15d
               	andb	$-2, %r15b
               	jmp	0x42d3cc <_mi_page_free+0xcc>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rbx,4), %r15d
               	addb	$-3, %r15b
               	leaq	1040(%r14), %rax
               	addq	$-24, %rsi
               	nopw	(%rax,%rax)
               	movq	16(%rsi), %rbx
               	addq	$7, %rbx
               	movq	%rbx, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rbx
               	jb	0x42d440 <_mi_page_free+0x140>
               	cmpq	$71, %rbx
               	ja	0x42d410 <_mi_page_free+0x110>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x42d440 <_mi_page_free+0x140>
               	movb	$73, %cl
               	cmpq	$2097159, %rbx          # imm = 0x200007
               	ja	0x42d440 <_mi_page_free+0x140>
               	leaq	-1(%rbp), %rbx
               	bsrq	%rbx, %r12
               	movl	%r12d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rbx
               	andl	$3, %ebx
               	leal	(%rbx,%r12,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rsi
               	jbe	0x42d44e <_mi_page_free+0x14e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r15b
               	je	0x42d3e0 <_mi_page_free+0xe0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r11, %rbp
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42d53e <_mi_page_free+0x23e>
               	addq	$1, %r11
               	movq	%r11, %r12
               	subq	%rcx, %r12
               	cmpq	$4, %r12
               	jb	0x42d530 <_mi_page_free+0x230>
               	movq	%r12, %r15
               	andq	$-4, %r15
               	movq	%r10, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r15), %rsi
               	movq	%rsi, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x42d4a5 <_mi_page_free+0x1a5>
               	xorl	%ebx, %ebx
               	jmp	0x42d4f9 <_mi_page_free+0x1f9>
               	leaq	(%r14,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42d4c0 <_mi_page_free+0x1c0>
               	testq	%rbp, %rbp
               	je	0x42d522 <_mi_page_free+0x222>
               	addq	%rcx, %rbx
               	leaq	(%r14,%rbx,8), %rax
               	addq	$24, %rax
               	negq	%rbp
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbp
               	jne	0x42d510 <_mi_page_free+0x210>
               	cmpq	%r15, %r12
               	je	0x42d53e <_mi_page_free+0x23e>
               	addq	%r15, %rcx
               	nop
               	movq	%r10, 8(%r14,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42d530 <_mi_page_free+0x230>
               	addq	$-1, 3016(%r14)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r9)
               	andb	$-2, 6(%rdi)
               	addq	$32, %r8
               	movq	$0, 40(%rdi)
               	movzbl	%dl, %esi
               	movq	%r8, %rdx
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e160 <_mi_segment_page_free>
               	nopw	%cs:(%rax,%rax)

<_mi_arena_free>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x42d636 <_mi_arena_free+0xb6>
               	movq	%rsi, %r14
               	testq	%rsi, %rsi
               	je	0x42d636 <_mi_arena_free+0xb6>
               	movq	%rdx, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	je	0x42d644 <_mi_arena_free+0xc4>
               	movzbl	%bl, %eax
               	leaq	215877(%rip), %rcx      # 0x462100 <mi_arenas>
               	movq	-8(%rcx,%rax,8), %r12
               	testq	%r12, %r12
               	je	0x42d65f <_mi_arena_free+0xdf>
               	movq	%rbx, %rax
               	shrq	$14, %rax
               	cmpq	%rax, 16(%r12)
               	jbe	0x42d668 <_mi_arena_free+0xe8>
               	shrq	$8, %rbx
               	leaq	16777215(%r14), %rsi
               	movq	%rsi, %r13
               	shrq	$24, %r13
               	cmpb	$0, 29(%r12)
               	jne	0x42d620 <_mi_arena_free+0xa0>
               	andq	$-16777216, %rsi        # imm = 0xFF000000
               	leaq	15(%rsp), %r8
               	movq	%r15, %rdi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42da30 <mi_os_commitx>
               	movq	48(%r12), %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d6c0 <_mi_bitmap_unclaim_across>
               	addq	$56, %r12
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d6c0 <_mi_bitmap_unclaim_across>
               	testb	%al, %al
               	je	0x42d691 <_mi_arena_free+0x111>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movzbl	%cl, %edx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42ba20 <_mi_os_free_ex>
               	leaq	94162(%rip), %rsi       # 0x444638 <typeinfo name for kotlin::gc::GCSchedulerData+0x14cf>
               	jmp	0x42d66f <_mi_arena_free+0xef>
               	leaq	94221(%rip), %rsi       # 0x44467c <typeinfo name for kotlin::gc::GCSchedulerData+0x1513>
               	movl	$22, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	movq	%rbx, %r8
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42c040 <_mi_error_message>
               	leaq	94254(%rip), %rsi       # 0x4446c6 <typeinfo name for kotlin::gc::GCSchedulerData+0x155d>
               	movl	$11, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42c040 <_mi_error_message>
               	nopw	(%rax,%rax)

<_mi_bitmap_unclaim_across>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x42d9c3 <_mi_bitmap_unclaim_across+0x303>
               	cmpq	$63, %rsi
               	jbe	0x42d6eb <_mi_bitmap_unclaim_across+0x2b>
               	movq	$-1, %rbp
               	jmp	0x42d708 <_mi_bitmap_unclaim_across+0x48>
               	testq	%rsi, %rsi
               	je	0x42d9b9 <_mi_bitmap_unclaim_across+0x2f9>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r9d, %r9d
               	xorl	%r8d, %r8d
               	xorl	%ebx, %ebx
               	leaq	(%rdi,%rax,8), %r11
               	movq	%rbp, %rcx
               	notq	%rcx
               	movq	(%rdi,%rax,8), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d720 <_mi_bitmap_unclaim_across+0x60>
               	andq	%rbp, %rax
               	cmpq	%rbp, %rax
               	sete	%r10b
               	addq	$8, %r11
               	testq	%rbx, %rbx
               	je	0x42d97f <_mi_bitmap_unclaim_across+0x2bf>
               	movq	%r9, %rcx
               	notq	%rcx
               	leaq	-1(%rbx), %rdx
               	movq	%rbx, %rsi
               	andq	$3, %rsi
               	je	0x42d799 <_mi_bitmap_unclaim_across+0xd9>
               	xorl	%edi, %edi
               	nopl	(%rax)
               	movq	(%r11), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rbp
               	andq	%rcx, %rbp
               	lock
               	cmpxchgq	%rbp, (%r11)
               	jne	0x42d770 <_mi_bitmap_unclaim_across+0xb0>
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edi, %r10d
               	addq	$8, %r11
               	addq	$-1, %rsi
               	jne	0x42d760 <_mi_bitmap_unclaim_across+0xa0>
               	andq	$-4, %rbx
               	cmpq	$3, %rdx
               	jb	0x42d97f <_mi_bitmap_unclaim_across+0x2bf>
               	leaq	-4(%rbx), %rdi
               	testb	$4, %dil
               	jne	0x42d848 <_mi_bitmap_unclaim_across+0x188>
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d7c0 <_mi_bitmap_unclaim_across+0x100>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rbx
               	andq	%rcx, %rbx
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rbx, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d7e0 <_mi_bitmap_unclaim_across+0x120>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rbx
               	andq	%rcx, %rbx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rbx, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d800 <_mi_bitmap_unclaim_across+0x140>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 24(%r11)
               	jne	0x42d820 <_mi_bitmap_unclaim_across+0x160>
               	andq	%rsi, %rax
               	andq	%r9, %rax
               	xorl	%edx, %edx
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edx, %r10d
               	addq	$32, %r11
               	movq	%rdi, %rbx
               	cmpq	$4, %rdi
               	jb	0x42d97f <_mi_bitmap_unclaim_across+0x2bf>
               	xorl	%r14d, %r14d
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d870 <_mi_bitmap_unclaim_across+0x1b0>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d890 <_mi_bitmap_unclaim_across+0x1d0>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d8b0 <_mi_bitmap_unclaim_across+0x1f0>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rdx
               	nop
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 24(%r11)
               	movq	%rax, %rdx
               	jne	0x42d8d0 <_mi_bitmap_unclaim_across+0x210>
               	andq	%rsi, %rdx
               	movq	32(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 32(%r11)
               	movq	%rax, %rsi
               	jne	0x42d8f0 <_mi_bitmap_unclaim_across+0x230>
               	movq	40(%r11), %rbp
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	andq	%rcx, %rdi
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdi, 40(%r11)
               	movq	%rax, %rbp
               	jne	0x42d910 <_mi_bitmap_unclaim_across+0x250>
               	andq	%rsi, %rbp
               	movq	48(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 48(%r11)
               	movq	%rax, %rsi
               	jne	0x42d930 <_mi_bitmap_unclaim_across+0x270>
               	andq	%rbp, %rsi
               	addq	$-8, %rbx
               	movq	56(%r11), %rax
               	nop
               	movq	%rax, %rdi
               	andq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 56(%r11)
               	jne	0x42d950 <_mi_bitmap_unclaim_across+0x290>
               	andq	%rsi, %rax
               	andq	%rdx, %rax
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%r14d, %r10d
               	addq	$64, %r11
               	testq	%rbx, %rbx
               	jne	0x42d860 <_mi_bitmap_unclaim_across+0x1a0>
               	testq	%r8, %r8
               	je	0x42d9ad <_mi_bitmap_unclaim_across+0x2ed>
               	movq	%r8, %rcx
               	notq	%rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d990 <_mi_bitmap_unclaim_across+0x2d0>
               	andq	%r8, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%ecx, %r10d
               	andb	$1, %r10b
               	movl	%r10d, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	xorl	%r9d, %r9d
               	xorl	%ebp, %ebp
               	jmp	0x42d70b <_mi_bitmap_unclaim_across+0x4b>
               	movl	$64, %r10d
               	subq	%rdx, %r10
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r9
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r8d, %r8d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r10, %rsi
               	movq	%rsi, %rbx
               	shrq	$6, %rbx
               	andq	$63, %rsi
               	je	0x42d710 <_mi_bitmap_unclaim_across+0x50>
               	movq	$-1, %r9
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x42d710 <_mi_bitmap_unclaim_across+0x50>
               	nopl	(%rax)

<mi_os_commitx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%edx, %r14d
               	testq	%r8, %r8
               	je	0x42da44 <mi_os_commitx+0x14>
               	movb	$0, (%r8)
               	movb	$1, %r15b
               	testq	%rdi, %rdi
               	je	0x42dd14 <mi_os_commitx+0x2e4>
               	testq	%rsi, %rsi
               	je	0x42dd14 <mi_os_commitx+0x2e4>
               	movq	208384(%rip), %rbp      # 0x460860 <os_page_size>
               	movq	%rbp, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %rdx # imm = 0x5555555555555555
               	andq	%rax, %rdx
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	movabsq	$3689348814741910323, %rdx # imm = 0x3333333333333333
               	movq	%rax, %rbx
               	andq	%rdx, %rbx
               	shrq	$2, %rax
               	andq	%rdx, %rax
               	addq	%rbx, %rax
               	movq	%rax, %rdx
               	shrq	$4, %rdx
               	addq	%rax, %rdx
               	movabsq	$1085102592571150095, %rbx # imm = 0xF0F0F0F0F0F0F0F
               	andq	%rdx, %rbx
               	movabsq	$72340172838076673, %rax # imm = 0x101010101010101
               	imulq	%rbx, %rax
               	shrq	$56, %rax
               	testb	%cl, %cl
               	je	0x42daed <mi_os_commitx+0xbd>
               	leaq	(%rdi,%rbp), %r12
               	addq	$-1, %r12
               	cmpl	$2, %eax
               	jae	0x42db1d <mi_os_commitx+0xed>
               	negq	%rbp
               	andq	%rbp, %r12
               	addq	%rsi, %rdi
               	andq	%rbp, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42dbcd <mi_os_commitx+0x19d>
               	jmp	0x42dd14 <mi_os_commitx+0x2e4>
               	cmpl	$2, %eax
               	jae	0x42db33 <mi_os_commitx+0x103>
               	movq	%rbp, %rax
               	negq	%rax
               	movq	%rax, %r12
               	andq	%rdi, %r12
               	addq	%rsi, %rdi
               	leaq	(%rdi,%rbp), %rbx
               	addq	$-1, %rbx
               	andq	%rax, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42dbcd <mi_os_commitx+0x19d>
               	jmp	0x42dd14 <mi_os_commitx+0x2e4>
               	movq	%r12, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42db4c <mi_os_commitx+0x11c>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42db53 <mi_os_commitx+0x123>
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42db6f <mi_os_commitx+0x13f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rcx
               	jmp	0x42db77 <mi_os_commitx+0x147>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %r12
               	addq	%rsi, %rdi
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42db99 <mi_os_commitx+0x169>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42db9f <mi_os_commitx+0x16f>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ecx
               	leaq	(%rdi,%rsi), %rax
               	leaq	(%rax,%rbp), %rbx
               	addq	$-1, %rbx
               	movq	%rbx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42dbb2 <mi_os_commitx+0x182>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42dbb8 <mi_os_commitx+0x188>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42dbcd <mi_os_commitx+0x19d>
               	jmp	0x42dd14 <mi_os_commitx+0x2e4>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rcx, %rdi
               	subq	%rdx, %rbx
               	movq	%rdi, %r12
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jle	0x42dd14 <mi_os_commitx+0x2e4>
               	movq	%rsi, %rcx
               	testb	%r14b, %r14b
               	je	0x42dc34 <mi_os_commitx+0x204>
               	lock
               	xaddq	%rcx, 213718(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	addq	%rsi, %rcx
               	movq	213700(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42dc00 <mi_os_commitx+0x1d0>
               	lock
               	cmpxchgq	%rcx, 213682(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42dbf0 <mi_os_commitx+0x1c0>
               	testq	%rsi, %rsi
               	jle	0x42dc6f <mi_os_commitx+0x23f>
               	lock
               	addq	%rsi, 213651(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	leaq	213548(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	leaq	214021(%rip), %rcx      # 0x462020 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jb	0x42dc8d <mi_os_commitx+0x25d>
               	lock
               	addq	$1, 214015(%rip)        # 0x462028 <_mi_stats_main+0x1e8>
               	lock
               	addq	$1, 213998(%rip)        # 0x462020 <_mi_stats_main+0x1e0>
               	jmp	0x42dc9d <mi_os_commitx+0x26d>
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 213621(%rip)      # 0x461eb8 <_mi_stats_main+0x78>
               	subq	%rsi, %rdx
               	movq	213603(%rip), %rax      # 0x461eb0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42dc60 <mi_os_commitx+0x230>
               	lock
               	cmpxchgq	%rdx, 213586(%rip)      # 0x461eb0 <_mi_stats_main+0x70>
               	jne	0x42dc50 <mi_os_commitx+0x220>
               	testq	%rsi, %rsi
               	js	0x42dcb3 <mi_os_commitx+0x283>
               	lock
               	addq	%rsi, 213563(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	jmp	0x42dcbb <mi_os_commitx+0x28b>
               	negq	%rsi
               	lock
               	addq	%rsi, 213550(%rip)      # 0x461ea8 <_mi_stats_main+0x68>
               	leaq	213439(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	leaq	213912(%rip), %rcx      # 0x462020 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jae	0x42dc20 <mi_os_commitx+0x1f0>
               	addq	$1, 213907(%rip)        # 0x462028 <_mi_stats_main+0x1e8>
               	addq	$1, 213891(%rip)        # 0x462020 <_mi_stats_main+0x1e0>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	0x413920 <mprotect@plt>
               	testl	%eax, %eax
               	jne	0x42dcdb <mi_os_commitx+0x2ab>
               	jmp	0x42dd14 <mi_os_commitx+0x2e4>
               	lock
               	addq	%rcx, 213477(%rip)      # 0x461ea0 <_mi_stats_main+0x60>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	$16434, %ecx            # imm = 0x4032
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	cmpq	%r12, %rax
               	je	0x42dd14 <mi_os_commitx+0x2e4>
               	callq	0x413870 <__errno_location@plt>
               	movl	(%rax), %r8d
               	testl	%r8d, %r8d
               	je	0x42dd14 <mi_os_commitx+0x2e4>
               	leaq	92684(%rip), %rax       # 0x4446fb <typeinfo name for kotlin::gc::GCSchedulerData+0x1592>
               	leaq	92684(%rip), %rsi       # 0x444702 <typeinfo name for kotlin::gc::GCSchedulerData+0x1599>
               	testb	%r14b, %r14b
               	cmovneq	%rax, %rsi
               	leaq	92679(%rip), %rdi       # 0x44470b <typeinfo name for kotlin::gc::GCSchedulerData+0x15a2>
               	xorl	%r15d, %r15d
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movl	%r15d, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<_mi_mem_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42de97 <_mi_mem_free+0x177>
               	testq	%rsi, %rsi
               	je	0x42de97 <_mi_mem_free+0x177>
               	movq	%rdx, %rbx
               	movq	%rdi, %r14
               	movq	207638(%rip), %rdi      # 0x460860 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%rsi,%rdi), %r15
               	addq	$-1, %r15
               	testq	%rax, %rdi
               	jne	0x42dd8b <_mi_mem_free+0x6b>
               	negq	%rdi
               	andq	%rdi, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	je	0x42ddb6 <_mi_mem_free+0x96>
               	movzbl	%cl, %ecx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42d580 <_mi_arena_free>
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x42dda1 <_mi_mem_free+0x81>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x42dda8 <_mi_mem_free+0x88>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rdx, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	jne	0x42dd6c <_mi_mem_free+0x4c>
               	cmpq	$67108864, %r15         # imm = 0x4000000
               	ja	0x42de97 <_mi_mem_free+0x177>
               	shrq	$7, %rbx
               	andl	$63, %r12d
               	leaq	4194303(%r15), %rbp
               	movq	%rbp, %r13
               	shrq	$22, %r13
               	shlq	$6, %rbx
               	leaq	247260(%rip), %rdi      # 0x46a3c0 <regions>
               	movq	(%rbx,%rdi), %rax
               	movq	8(%rbx,%rdi), %rdx
               	leaq	(%r12,%r13), %rsi
               	cmpq	$64, %rsi
               	ja	0x42de97 <_mi_mem_free+0x177>
               	movq	%r12, %rsi
               	shlq	$22, %rsi
               	addq	%rsi, %rdx
               	cmpq	%r14, %rdx
               	jne	0x42de97 <_mi_mem_free+0x177>
               	testl	$4194303, %r15d         # imm = 0x3FFFFF
               	jne	0x42de3e <_mi_mem_free+0x11e>
               	testb	%cl, %cl
               	je	0x42de3e <_mi_mem_free+0x11e>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 32(%rbx,%rdi)
               	testb	%r8b, %r8b
               	je	0x42de66 <_mi_mem_free+0x146>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 40(%rbx,%rdi)
               	testl	$768, %eax              # imm = 0x300
               	je	0x42dea6 <_mi_mem_free+0x186>
               	leaq	(%rbx,%rdi), %rax
               	addq	$16, %rax
               	movq	$-1, %rdx
               	testq	%r13, %r13
               	je	0x42de93 <_mi_mem_free+0x173>
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	lock
               	andq	%rdx, (%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$12, %edi
               	callq	0x42abe0 <mi_option_get>
               	leaq	247049(%rip), %rdi      # 0x46a3c0 <regions>
               	testq	%rax, %rax
               	je	0x42de6d <_mi_mem_free+0x14d>
               	movl	$3, %edi
               	callq	0x42abe0 <mi_option_get>
               	leaq	247027(%rip), %rdi      # 0x46a3c0 <regions>
               	testq	%rax, %rax
               	jne	0x42dee8 <_mi_mem_free+0x1c8>
               	movl	$5, %edi
               	callq	0x42abe0 <mi_option_get>
               	leaq	247005(%rip), %rdi      # 0x46a3c0 <regions>
               	testq	%rax, %rax
               	je	0x42de6d <_mi_mem_free+0x14d>
               	leaq	(%rbx,%rdi), %rsi
               	addq	$40, %rsi
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	movq	40(%rbx,%rdi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdx, %rcx
               	lock
               	cmpxchgq	%rcx, (%rsi)
               	jne	0x42df20 <_mi_mem_free+0x200>
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	je	0x42de6d <_mi_mem_free+0x14d>
               	movq	312448(%rip), %rax      # 0x47a3c0 <abandoned_readers>
               	testq	%rax, %rax
               	je	0x42df53 <_mi_mem_free+0x233>
               	pause
               	movq	312434(%rip), %rax      # 0x47a3c0 <abandoned_readers>
               	testq	%rax, %rax
               	jne	0x42df45 <_mi_mem_free+0x225>
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%r14, %rdi
               	movq	%rbp, %rsi
               	callq	0x42df90 <_mi_os_reset>
               	leaq	246868(%rip), %rax      # 0x46a3c0 <regions>
               	addq	%rbx, %rax
               	addq	$16, %rax
               	cmpq	$264241152, %r15        # imm = 0xFC00000
               	jbe	0x42de75 <_mi_mem_free+0x155>
               	xorl	%edx, %edx
               	jmp	0x42de93 <_mi_mem_free+0x173>
               	nopw	(%rax,%rax)

<_mi_os_reset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	movl	$5, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42dfd0 <_mi_os_reset+0x40>
               	leaq	7(%rsp), %r8
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42da30 <mi_os_commitx>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%r12, %r12
               	je	0x42dfc4 <_mi_os_reset+0x34>
               	testq	%r15, %r15
               	je	0x42dfc4 <_mi_os_reset+0x34>
               	movq	206975(%rip), %rsi      # 0x460860 <os_page_size>
               	leaq	-1(%rsi), %rax
               	leaq	(%r12,%rsi), %r14
               	addq	$-1, %r14
               	testq	%rax, %rsi
               	jne	0x42e008 <_mi_os_reset+0x78>
               	negq	%rsi
               	andq	%rsi, %r14
               	addq	%r15, %r12
               	andq	%rsi, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jg	0x42e05c <_mi_os_reset+0xcc>
               	jmp	0x42dfc4 <_mi_os_reset+0x34>
               	movq	%r14, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42e021 <_mi_os_reset+0x91>
               	movq	%r14, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rcx
               	jmp	0x42e02a <_mi_os_reset+0x9a>
               	movl	%r14d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ecx
               	addq	%r15, %r12
               	movq	%r12, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42e043 <_mi_os_reset+0xb3>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42e04a <_mi_os_reset+0xba>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	subq	%rcx, %r14
               	subq	%rdx, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jle	0x42dfc4 <_mi_os_reset+0x34>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 212592(%rip)      # 0x461ed8 <_mi_stats_main+0x98>
               	addq	%r12, %rcx
               	movq	212574(%rip), %rax      # 0x461ed0 <_mi_stats_main+0x90>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42e090 <_mi_os_reset+0x100>
               	lock
               	cmpxchgq	%rcx, 212546(%rip)      # 0x461ed0 <_mi_stats_main+0x90>
               	jne	0x42e080 <_mi_os_reset+0xf0>
               	testq	%r12, %r12
               	jle	0x42e09f <_mi_os_reset+0x10f>
               	lock
               	addq	%r12, 212515(%rip)      # 0x461ec0 <_mi_stats_main+0x80>
               	jmp	0x42e0ad <_mi_os_reset+0x11d>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 212507(%rip)      # 0x461ec8 <_mi_stats_main+0x88>
               	movq	207268(%rip), %r15      # 0x460a58 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x413900 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42dfc4 <_mi_os_reset+0x34>
               	callq	0x413870 <__errno_location@plt>
               	movq	%rax, %rbx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movl	(%rbx), %ecx
               	cmpl	$11, %ecx
               	jne	0x42e104 <_mi_os_reset+0x174>
               	movl	$0, (%rbx)
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x413900 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42e0e0 <_mi_os_reset+0x150>
               	jmp	0x42dfc4 <_mi_os_reset+0x34>
               	cmpl	$8, %r15d
               	jne	0x42e134 <_mi_os_reset+0x1a4>
               	cmpl	$22, %ecx
               	jne	0x42e134 <_mi_os_reset+0x1a4>
               	movq	$4, 207166(%rip)        # 0x460a58 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	$4, %edx
               	callq	0x413900 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42dfc4 <_mi_os_reset+0x34>
               	movl	(%rbx), %ecx
               	leaq	91643(%rip), %rdi       # 0x444736 <typeinfo name for kotlin::gc::GCSchedulerData+0x15cd>
               	movq	%r14, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42bc40 <_mi_warning_message>
               	nopw	%cs:(%rax,%rax)

<_mi_segment_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebx
               	movq	%rdi, %r12
               	movq	%rdi, %r13
               	andq	$-4194304, %r13         # imm = 0xFFC00000
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e29c <_mi_segment_page_free+0x13c>
               	movl	%ebx, 4(%rsp)
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	movq	40(%r14), %r15
               	testq	%r15, %r15
               	je	0x42e282 <_mi_segment_page_free+0x122>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x42e1f7 <_mi_segment_page_free+0x97>
               	nop
               	movl	$0, 16(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbp)
               	testq	%r15, %r15
               	je	0x42e282 <_mi_segment_page_free+0x122>
               	movq	%r15, %rbp
               	cmpl	%ebx, 16(%r15)
               	jg	0x42e28c <_mi_segment_page_free+0x12c>
               	movq	56(%rbp), %r15
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e1e0 <_mi_segment_page_free+0x80>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42e1e0 <_mi_segment_page_free+0x80>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e1e0 <_mi_segment_page_free+0x80>
               	cmpl	$3, 112(%rdx)
               	jne	0x42e241 <_mi_segment_page_free+0xe1>
               	movq	72(%rdx), %rsi
               	jmp	0x42e24d <_mi_segment_page_free+0xed>
               	movzbl	96(%rdx), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%rdx, %rdi
               	testq	%rcx, %rcx
               	jne	0x42e26a <_mi_segment_page_free+0x10a>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x42e1e0 <_mi_segment_page_free+0x80>
               	callq	0x42df90 <_mi_os_reset>
               	jmp	0x42e1e0 <_mi_segment_page_free+0x80>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	jmp	0x42e298 <_mi_segment_page_free+0x138>
               	movq	%rbp, 40(%r14)
               	movq	$0, 48(%rbp)
               	movl	4(%rsp), %ebx
               	movq	%r13, %rdi
               	movq	%r12, %rsi
               	movq	%r14, %rdx
               	callq	0x42e340 <mi_segment_page_clear>
               	movq	56(%r13), %rax
               	testq	%rax, %rax
               	je	0x42e2d2 <_mi_segment_page_free+0x172>
               	cmpq	40(%r13), %rax
               	jne	0x42e2ee <_mi_segment_page_free+0x18e>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ef50 <mi_segment_abandon>
               	movzbl	%bl, %esi
               	movq	%r13, %rdi
               	movq	%r14, %rdx
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e590 <mi_segment_free>
               	addq	$1, %rax
               	cmpq	64(%r13), %rax
               	jne	0x42e330 <_mi_segment_page_free+0x1d0>
               	movl	112(%r13), %eax
               	cmpl	$1, %eax
               	je	0x42e30a <_mi_segment_page_free+0x1aa>
               	testl	%eax, %eax
               	je	0x42e30e <_mi_segment_page_free+0x1ae>
               	xorl	%r14d, %r14d
               	jmp	0x42e30e <_mi_segment_page_free+0x1ae>
               	addq	$16, %r14
               	movq	$0, 24(%r13)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r13)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r13, (%rcx)
               	movq	%r13, 8(%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_segment_page_clear>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movzwl	2(%rsi), %edi
               	movl	20(%rsi), %esi
               	cmpq	$67108864, %rsi         # imm = 0x4000000
               	jae	0x42e51c <mi_segment_page_clear+0x1dc>
               	imulq	%rdi, %rsi
               	movl	$160, %edi
               	addq	112(%r15), %rdi
               	callq	0x42bbc0 <_mi_stat_decrease>
               	movq	112(%r15), %rcx
               	leaq	32(%rcx), %rax
               	leaq	211641(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42e3c5 <mi_segment_page_clear+0x85>
               	leaq	212205(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e3c5 <mi_segment_page_clear+0x85>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 56(%rcx)
               	addq	$-1, %rdx
               	movq	48(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42e3bd <mi_segment_page_clear+0x7d>
               	lock
               	cmpxchgq	%rdx, 48(%rcx)
               	jne	0x42e3b0 <mi_segment_page_clear+0x70>
               	lock
               	addq	$1, 40(%rcx)
               	jmp	0x42e3e0 <mi_segment_page_clear+0xa0>
               	movq	56(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%rcx)
               	cmpq	48(%rcx), %rax
               	jle	0x42e3db <mi_segment_page_clear+0x9b>
               	movq	%rax, 48(%rcx)
               	addq	$1, 40(%rcx)
               	andb	$-10, 1(%rbx)
               	movl	20(%rbx), %eax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 6(%rbx)
               	movups	%xmm0, 22(%rbx)
               	movups	%xmm0, 38(%rbx)
               	movups	%xmm0, 48(%rbx)
               	movl	%eax, 20(%rbx)
               	addq	$-1, 56(%r14)
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e4a2 <mi_segment_page_clear+0x162>
               	cmpb	$0, 8(%r14)
               	jne	0x42e4a2 <mi_segment_page_clear+0x162>
               	movb	1(%rbx), %al
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e4a2 <mi_segment_page_clear+0x162>
               	movl	$14, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e4b3 <mi_segment_page_clear+0x173>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	imull	$1000, (%rsp), %ecx     # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	8(%rsp)
               	movq	%rdx, %r14
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %r14
               	addl	%eax, %r14d
               	addl	%ecx, %r14d
               	movl	$14, %edi
               	callq	0x42abe0 <mi_option_get>
               	addl	%r14d, %eax
               	movl	%eax, 16(%rbx)
               	movq	32(%r15), %rax
               	movq	%rax, 48(%rbx)
               	movq	$0, 56(%rbx)
               	leaq	56(%rax), %rcx
               	leaq	40(%r15), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%rbx, (%rcx)
               	movq	%rbx, 32(%r15)
               	movl	$0, 2(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e4a2 <mi_segment_page_clear+0x162>
               	cmpb	$0, 8(%r14)
               	jne	0x42e4a2 <mi_segment_page_clear+0x162>
               	movb	1(%rbx), %al
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e4a2 <mi_segment_page_clear+0x162>
               	cmpl	$3, 112(%r14)
               	jne	0x42e4e3 <mi_segment_page_clear+0x1a3>
               	movq	72(%r14), %rsi
               	jmp	0x42e4ef <mi_segment_page_clear+0x1af>
               	movb	96(%r14), %cl
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%r14, %rdi
               	testq	%rcx, %rcx
               	jne	0x42e50b <mi_segment_page_clear+0x1cb>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e4a2 <mi_segment_page_clear+0x162>
               	callq	0x42df90 <_mi_os_reset>
               	jmp	0x42e4a2 <mi_segment_page_clear+0x162>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x42e533 <mi_segment_page_clear+0x1f3>
               	movq	72(%rax), %r8
               	jmp	0x42e53f <mi_segment_page_clear+0x1ff>
               	movb	96(%rax), %cl
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	cmpb	$0, (%rbx)
               	jne	0x42e579 <mi_segment_page_clear+0x239>
               	movq	80(%rax), %rcx
               	subq	%rcx, %r8
               	cmpl	$1, %edx
               	ja	0x42e579 <mi_segment_page_clear+0x239>
               	addq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x42e563 <mi_segment_page_clear+0x223>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42e567 <mi_segment_page_clear+0x227>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rsi
               	jmp	0x42e366 <mi_segment_page_clear+0x26>
               	nopw	%cs:(%rax,%rax)

<mi_segment_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%sil, %sil
               	movq	%rdi, (%rsp)
               	je	0x42e5da <mi_segment_free+0x4a>
               	movl	$11, %edi
               	callq	0x42abe0 <mi_option_get>
               	cmpb	$0, 8(%r14)
               	je	0x42e604 <mi_segment_free+0x74>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e7b8 <mi_segment_free+0x228>
               	cmpl	$1, %eax
               	jne	0x42e82e <mi_segment_free+0x29e>
               	leaq	16(%r12), %rax
               	jmp	0x42e7c0 <mi_segment_free+0x230>
               	cmpb	$0, 8(%r14)
               	je	0x42e71e <mi_segment_free+0x18e>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e7d8 <mi_segment_free+0x248>
               	cmpl	$1, %eax
               	jne	0x42e878 <mi_segment_free+0x2e8>
               	leaq	16(%r12), %rax
               	jmp	0x42e7e4 <mi_segment_free+0x254>
               	movq	64(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x42e5bb <mi_segment_free+0x2b>
               	testq	%rax, %rax
               	je	0x42ee6a <mi_segment_free+0x8da>
               	leaq	120(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x42e631 <mi_segment_free+0xa1>
               	nop
               	movq	64(%r14), %rcx
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	%rcx, %rbp
               	jae	0x42e5bb <mi_segment_free+0x2b>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e624 <mi_segment_free+0x94>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42e64f <mi_segment_free+0xbf>
               	testq	%rcx, %rcx
               	jne	0x42e654 <mi_segment_free+0xc4>
               	jmp	0x42e661 <mi_segment_free+0xd1>
               	testq	%rcx, %rcx
               	je	0x42e6cd <mi_segment_free+0x13d>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42e665 <mi_segment_free+0xd5>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r12), %rbx
               	je	0x42e6b6 <mi_segment_free+0x126>
               	cmpq	32(%r12), %rbx
               	je	0x42e6c6 <mi_segment_free+0x136>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e620 <mi_segment_free+0x90>
               	cmpb	$0, 8(%r14)
               	jne	0x42e620 <mi_segment_free+0x90>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e620 <mi_segment_free+0x90>
               	cmpl	$3, 112(%r14)
               	jne	0x42e6dd <mi_segment_free+0x14d>
               	movq	72(%r14), %rsi
               	jmp	0x42e6ea <mi_segment_free+0x15a>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r12)
               	cmpq	32(%r12), %rbx
               	jne	0x42e673 <mi_segment_free+0xe3>
               	movq	%rax, 32(%r12)
               	jmp	0x42e673 <mi_segment_free+0xe3>
               	cmpq	32(%r12), %rbx
               	je	0x42e665 <mi_segment_free+0xd5>
               	cmpq	40(%r12), %rbx
               	jne	0x42e681 <mi_segment_free+0xf1>
               	jmp	0x42e665 <mi_segment_free+0xd5>
               	movzbl	96(%r14), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%r14, %rdi
               	testq	%rcx, %rcx
               	jne	0x42e706 <mi_segment_free+0x176>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e620 <mi_segment_free+0x90>
               	callq	0x42df90 <_mi_os_reset>
               	jmp	0x42e620 <mi_segment_free+0x90>
               	movq	64(%r14), %rax
               	testq	%rax, %rax
               	je	0x42e5e5 <mi_segment_free+0x55>
               	leaq	120(%r14), %rcx
               	xorps	%xmm0, %xmm0
               	jmp	0x42e75d <mi_segment_free+0x1cd>
               	movq	56(%rcx), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rcx
               	je	0x42e7a1 <mi_segment_free+0x211>
               	movl	$0, 16(%rcx)
               	movups	%xmm0, 48(%rcx)
               	addq	$64, %rcx
               	addq	$-1, %rax
               	je	0x42e5e5 <mi_segment_free+0x55>
               	movzbl	1(%rcx), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42e74f <mi_segment_free+0x1bf>
               	movq	48(%rcx), %rdx
               	movq	56(%rcx), %rsi
               	testq	%rdx, %rdx
               	je	0x42e77d <mi_segment_free+0x1ed>
               	testq	%rsi, %rsi
               	jne	0x42e782 <mi_segment_free+0x1f2>
               	jmp	0x42e78f <mi_segment_free+0x1ff>
               	testq	%rsi, %rsi
               	je	0x42e7a8 <mi_segment_free+0x218>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e793 <mi_segment_free+0x203>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rcx
               	je	0x42e734 <mi_segment_free+0x1a4>
               	cmpq	32(%r12), %rcx
               	jne	0x42e744 <mi_segment_free+0x1b4>
               	movq	%rdx, 32(%r12)
               	jmp	0x42e744 <mi_segment_free+0x1b4>
               	cmpq	32(%r12), %rcx
               	je	0x42e793 <mi_segment_free+0x203>
               	cmpq	40(%r12), %rcx
               	jne	0x42e74f <mi_segment_free+0x1bf>
               	jmp	0x42e793 <mi_segment_free+0x203>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e82e <mi_segment_free+0x29e>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e7fc <mi_segment_free+0x26c>
               	testq	%rsi, %rsi
               	jne	0x42e805 <mi_segment_free+0x275>
               	jmp	0x42e811 <mi_segment_free+0x281>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e878 <mi_segment_free+0x2e8>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e846 <mi_segment_free+0x2b6>
               	testq	%rsi, %rsi
               	jne	0x42e84f <mi_segment_free+0x2bf>
               	jmp	0x42e85b <mi_segment_free+0x2cb>
               	testq	%rsi, %rsi
               	je	0x42eef7 <mi_segment_free+0x967>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e815 <mi_segment_free+0x285>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42edb1 <mi_segment_free+0x821>
               	cmpq	%r14, 8(%rax)
               	je	0x42edbe <mi_segment_free+0x82e>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movl	$160, %edi
               	addq	112(%r12), %rdi
               	movq	80(%r14), %rsi
               	callq	0x42bbc0 <_mi_stat_decrease>
               	jmp	0x42eba8 <mi_segment_free+0x618>
               	testq	%rsi, %rsi
               	je	0x42ef05 <mi_segment_free+0x975>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e85f <mi_segment_free+0x2cf>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42edcb <mi_segment_free+0x83b>
               	cmpq	%r14, 8(%rax)
               	je	0x42edd8 <mi_segment_free+0x848>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movl	$160, %edi
               	addq	112(%r12), %rdi
               	movq	80(%r14), %rsi
               	callq	0x42bbc0 <_mi_stat_decrease>
               	cmpq	$4194304, 72(%r14)      # imm = 0x400000
               	jne	0x42eba8 <mi_segment_free+0x618>
               	movl	$9, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	%rax, %rbx
               	movq	88(%r12), %rax
               	cmpq	%rbx, %rax
               	jae	0x42e8c2 <mi_segment_free+0x332>
               	movq	64(%r12), %rcx
               	shrq	$3, %rcx
               	cmpq	%rcx, %rax
               	jbe	0x42ede5 <mi_segment_free+0x855>
               	cmpq	%rbx, %rax
               	jbe	0x42eba8 <mi_segment_free+0x618>
               	leaq	210286(%rip), %rdi      # 0x461e40 <_mi_stats_main>
               	movl	$1, %r14d
               	jmp	0x42e912 <mi_segment_free+0x382>
               	nopl	(%rax)
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	movq	(%r13), %rdx
               	andb	$1, %r15b
               	movzbl	%al, %r8d
               	movzbl	%r15b, %ecx
               	movq	%r13, %rdi
               	callq	0x42dd20 <_mi_mem_free>
               	movq	88(%r12), %rax
               	leaq	210231(%rip), %rdi      # 0x461e40 <_mi_stats_main>
               	cmpq	%rbx, %rax
               	jbe	0x42eba8 <mi_segment_free+0x618>
               	movq	104(%r12), %r13
               	testq	%r13, %r13
               	je	0x42e909 <mi_segment_free+0x379>
               	addq	$-1, %rax
               	movq	%rax, 88(%r12)
               	movq	24(%r13), %rax
               	movq	%rax, 104(%r12)
               	movq	$0, 24(%r13)
               	movq	112(%r12), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rdi, %rax
               	jb	0x42e990 <mi_segment_free+0x400>
               	leaq	210738(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e990 <mi_segment_free+0x400>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e980 <mi_segment_free+0x3f0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42e970 <mi_segment_free+0x3e0>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42e9ba <mi_segment_free+0x42a>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42e9b2 <mi_segment_free+0x422>
               	movq	%rax, 432(%rcx)
               	addq	$1, 424(%rcx)
               	movq	72(%r13), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	cmpq	%rdi, %rcx
               	setae	%dl
               	leaq	210602(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42ea20 <mi_segment_free+0x490>
               	testb	%al, %al
               	je	0x42ea57 <mi_segment_free+0x4c7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jge	0x42ea0d <mi_segment_free+0x47d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42ea00 <mi_segment_free+0x470>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42ea72 <mi_segment_free+0x4e2>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42eb6f <mi_segment_free+0x5df>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42ea4d <mi_segment_free+0x4bd>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42ea40 <mi_segment_free+0x4b0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42eb89 <mi_segment_free+0x5f9>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42ea6d <mi_segment_free+0x4dd>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42ea8f <mi_segment_free+0x4ff>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%rsi, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42eaa8 <mi_segment_free+0x518>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r10
               	testq	%r10, %r10
               	je	0x42e8e0 <mi_segment_free+0x350>
               	cmpq	$1, %r10
               	jne	0x42eac5 <mi_segment_free+0x535>
               	movb	$1, %r15b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42eb24 <mi_segment_free+0x594>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r15b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42eaf0 <mi_segment_free+0x560>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42eb40 <mi_segment_free+0x5b0>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r15b
               	testb	$1, %al
               	je	0x42e8e3 <mi_segment_free+0x353>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42abe0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r15b, %r15d
               	movl	$0, %eax
               	cmovnel	%eax, %r15d
               	movb	$1, %al
               	jmp	0x42e8e5 <mi_segment_free+0x355>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42eb85 <mi_segment_free+0x5f5>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42ea8a <mi_segment_free+0x4fa>
               	jmp	0x42ea8f <mi_segment_free+0x4ff>
               	movq	(%rsp), %r13
               	movq	72(%r13), %r15
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	leaq	209534(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	210097(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%r15, %r15
               	jle	0x42ec15 <mi_segment_free+0x685>
               	testb	%al, %al
               	je	0x42ec47 <mi_segment_free+0x6b7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42ec0d <mi_segment_free+0x67d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42ec00 <mi_segment_free+0x670>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42ec62 <mi_segment_free+0x6d2>
               	testb	%al, %al
               	je	0x42ed78 <mi_segment_free+0x7e8>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jg	0x42ec3d <mi_segment_free+0x6ad>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42ec30 <mi_segment_free+0x6a0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ed92 <mi_segment_free+0x802>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42ec5d <mi_segment_free+0x6cd>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42ec7f <mi_segment_free+0x6ef>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%r15, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42ec98 <mi_segment_free+0x708>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r9
               	testq	%r9, %r9
               	je	0x42ecb1 <mi_segment_free+0x721>
               	cmpq	$1, %r9
               	jne	0x42ecbb <mi_segment_free+0x72b>
               	movb	$1, %r14b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42ed0f <mi_segment_free+0x77f>
               	movb	$1, %r14b
               	xorl	%ebp, %ebp
               	jmp	0x42ed4f <mi_segment_free+0x7bf>
               	movq	%r9, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rsi
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r14b
               	xorl	%eax, %eax
               	movl	$1, %ebp
               	nopl	(%rax)
               	movzbl	-64(%rsi), %ecx
               	movzbl	(%rsi), %ebx
               	movl	%ebx, %edx
               	andb	%cl, %dl
               	shlb	$5, %dl
               	sarb	$7, %dl
               	andb	%dl, %r14b
               	orb	%cl, %bl
               	testb	$2, %bl
               	movzbl	%al, %eax
               	cmovnel	%ebp, %eax
               	subq	$-128, %rsi
               	addq	$2, %rdi
               	jne	0x42ece0 <mi_segment_free+0x750>
               	testb	$1, %r9b
               	je	0x42ed2f <mi_segment_free+0x79f>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %edx
               	movl	$1, %eax
               	cmovel	%edx, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r14b
               	xorl	%ebp, %ebp
               	testb	$1, %al
               	je	0x42ed4f <mi_segment_free+0x7bf>
               	movl	$5, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	movzbl	%r14b, %eax
               	cmovel	%eax, %ebp
               	movl	%ebp, %r14d
               	movb	$1, %bpl
               	movq	(%r13), %rdx
               	andb	$1, %r14b
               	movzbl	%bpl, %r8d
               	movzbl	%r14b, %ecx
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42dd20 <_mi_mem_free>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42ed8e <mi_segment_free+0x7fe>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42ec7a <mi_segment_free+0x6ea>
               	jmp	0x42ec7f <mi_segment_free+0x6ef>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e828 <mi_segment_free+0x298>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e828 <mi_segment_free+0x298>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e872 <mi_segment_free+0x2e2>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e872 <mi_segment_free+0x2e2>
               	movq	104(%r12), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 24(%rdx)
               	movq	%rdx, 104(%r12)
               	addq	$1, %rax
               	movq	%rax, 88(%r12)
               	movq	112(%r12), %rdx
               	leaq	416(%rdx), %rcx
               	leaq	208941(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x42ef13 <mi_segment_free+0x983>
               	leaq	209501(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42ef13 <mi_segment_free+0x983>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 440(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	432(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rsi, %rax
               	jg	0x42ee60 <mi_segment_free+0x8d0>
               	lock
               	cmpxchgq	%rdi, 432(%rdx)
               	jne	0x42ee50 <mi_segment_free+0x8c0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ef39 <mi_segment_free+0x9a9>
               	leaq	120(%r14), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42ee9c <mi_segment_free+0x90c>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rax
               	je	0x42eee0 <mi_segment_free+0x950>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42e5bb <mi_segment_free+0x2b>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42ee8e <mi_segment_free+0x8fe>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42eebc <mi_segment_free+0x92c>
               	testq	%rsi, %rsi
               	jne	0x42eec1 <mi_segment_free+0x931>
               	jmp	0x42eece <mi_segment_free+0x93e>
               	testq	%rsi, %rsi
               	je	0x42eee7 <mi_segment_free+0x957>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42eed2 <mi_segment_free+0x942>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rax
               	je	0x42ee73 <mi_segment_free+0x8e3>
               	cmpq	32(%r12), %rax
               	jne	0x42ee83 <mi_segment_free+0x8f3>
               	movq	%rdx, 32(%r12)
               	jmp	0x42ee83 <mi_segment_free+0x8f3>
               	cmpq	32(%r12), %rax
               	je	0x42eed2 <mi_segment_free+0x942>
               	cmpq	40(%r12), %rax
               	jne	0x42ee8e <mi_segment_free+0x8fe>
               	jmp	0x42eed2 <mi_segment_free+0x942>
               	cmpq	%r14, (%rax)
               	jne	0x42e82e <mi_segment_free+0x29e>
               	jmp	0x42e815 <mi_segment_free+0x285>
               	cmpq	%r14, (%rax)
               	jne	0x42e878 <mi_segment_free+0x2e8>
               	jmp	0x42e85f <mi_segment_free+0x2cf>
               	movq	440(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 440(%rdx)
               	cmpq	432(%rdx), %rsi
               	jl	0x42ef35 <mi_segment_free+0x9a5>
               	movq	%rax, 432(%rdx)
               	addq	$1, (%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<mi_segment_abandon>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f069 <mi_segment_abandon+0x119>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	movq	40(%r14), %rbp
               	testq	%rbp, %rbp
               	je	0x42f061 <mi_segment_abandon+0x111>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %r12d      # imm = 0x3E8
               	addl	%edx, %r12d
               	jmp	0x42efd7 <mi_segment_abandon+0x87>
               	nop
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	testq	%rbp, %rbp
               	je	0x42f061 <mi_segment_abandon+0x111>
               	movq	%rbp, %rbx
               	cmpl	%r12d, 16(%rbp)
               	jg	0x42f29b <mi_segment_abandon+0x34b>
               	movq	56(%rbx), %rbp
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42efc0 <mi_segment_abandon+0x70>
               	movq	%rbx, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42efc0 <mi_segment_abandon+0x70>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42efc0 <mi_segment_abandon+0x70>
               	cmpl	$3, 112(%rdx)
               	jne	0x42f021 <mi_segment_abandon+0xd1>
               	movq	72(%rdx), %rsi
               	jmp	0x42f02d <mi_segment_abandon+0xdd>
               	movzbl	96(%rdx), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%rdx, %rdi
               	testq	%rcx, %rcx
               	jne	0x42f049 <mi_segment_abandon+0xf9>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42efc0 <mi_segment_abandon+0x70>
               	callq	0x42df90 <_mi_os_reset>
               	jmp	0x42efc0 <mi_segment_abandon+0x70>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	movl	$11, %edi
               	callq	0x42abe0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	je	0x42f2bc <mi_segment_abandon+0x36c>
               	movl	112(%r15), %eax
               	testl	%eax, %eax
               	je	0x42f091 <mi_segment_abandon+0x141>
               	cmpl	$1, %eax
               	jne	0x42f0e7 <mi_segment_abandon+0x197>
               	leaq	16(%r14), %rax
               	jmp	0x42f099 <mi_segment_abandon+0x149>
               	movq	%r14, %rax
               	testq	%r14, %r14
               	je	0x42f0e7 <mi_segment_abandon+0x197>
               	leaq	24(%r15), %rcx
               	movq	24(%r15), %rdx
               	movq	32(%r15), %rsi
               	testq	%rdx, %rdx
               	je	0x42f0b1 <mi_segment_abandon+0x161>
               	testq	%rsi, %rsi
               	jne	0x42f0ba <mi_segment_abandon+0x16a>
               	jmp	0x42f0c6 <mi_segment_abandon+0x176>
               	testq	%rsi, %rsi
               	je	0x42f4a9 <mi_segment_abandon+0x559>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42f0ca <mi_segment_abandon+0x17a>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r15, (%rax)
               	je	0x42f3db <mi_segment_abandon+0x48b>
               	cmpq	%r15, 8(%rax)
               	jne	0x42f0e1 <mi_segment_abandon+0x191>
               	movq	32(%r15), %rdx
               	movq	%rdx, 8(%rax)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r14), %rcx
               	leaq	192(%rcx), %rdx
               	leaq	208199(%rip), %rsi      # 0x461e40 <_mi_stats_main>
               	cmpq	%rsi, %rdx
               	jb	0x42f14b <mi_segment_abandon+0x1fb>
               	leaq	208759(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rdx
               	jae	0x42f14b <mi_segment_abandon+0x1fb>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 216(%rcx)
               	leaq	1(%rdi), %rbp
               	movq	208(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdi, %rax
               	jg	0x42f140 <mi_segment_abandon+0x1f0>
               	lock
               	cmpxchgq	%rbp, 208(%rcx)
               	jne	0x42f130 <mi_segment_abandon+0x1e0>
               	lock
               	addq	$1, (%rdx)
               	movq	112(%r14), %rcx
               	jmp	0x42f171 <mi_segment_abandon+0x221>
               	movq	216(%rcx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 216(%rcx)
               	cmpq	208(%rcx), %rdi
               	jl	0x42f16d <mi_segment_abandon+0x21d>
               	movq	%rax, 208(%rcx)
               	addq	$1, (%rdx)
               	movq	72(%r15), %rdx
               	cmpq	%rsi, %rcx
               	setae	%bl
               	leaq	208638(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%bl, %al
               	testq	%rdx, %rdx
               	jle	0x42f1c5 <mi_segment_abandon+0x275>
               	testb	%al, %al
               	je	0x42f1f7 <mi_segment_abandon+0x2a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	addq	$-1, %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jge	0x42f1bd <mi_segment_abandon+0x26d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42f1b0 <mi_segment_abandon+0x260>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42f212 <mi_segment_abandon+0x2c2>
               	testb	%al, %al
               	je	0x42f3ed <mi_segment_abandon+0x49d>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jg	0x42f1ed <mi_segment_abandon+0x29d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42f1e0 <mi_segment_abandon+0x290>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42f407 <mi_segment_abandon+0x4b7>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42f20d <mi_segment_abandon+0x2bd>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42f22b <mi_segment_abandon+0x2db>
               	movq	%rax, 64(%r14)
               	movq	72(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 72(%r14)
               	cmpq	80(%r14), %rax
               	jbe	0x42f240 <mi_segment_abandon+0x2f0>
               	movq	%rax, 80(%r14)
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	$0, 16(%r15)
               	movq	307619(%rip), %rax      # 0x47a400 <abandoned>
               	nopl	(%rax)
               	leal	1(%rax), %ecx
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	movq	%rdx, 16(%r15)
               	andl	$4194303, %ecx          # imm = 0x3FFFFF
               	orq	%r15, %rcx
               	lock
               	cmpxchgq	%rcx, 307581(%rip)      # 0x47a400 <abandoned>
               	jne	0x42f260 <mi_segment_abandon+0x310>
               	lock
               	addq	$1, 307634(%rip)        # 0x47a440 <abandoned_count>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, 40(%r14)
               	movq	$0, 48(%rbx)
               	movl	$11, %edi
               	callq	0x42abe0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	jne	0x42f07e <mi_segment_abandon+0x12e>
               	movq	64(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42f07e <mi_segment_abandon+0x12e>
               	testq	%rax, %rax
               	je	0x42f423 <mi_segment_abandon+0x4d3>
               	leaq	120(%r15), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x42f2f5 <mi_segment_abandon+0x3a5>
               	nop
               	movq	64(%r15), %rcx
               	addq	$1, %r12
               	addq	$64, %rbx
               	cmpq	%rcx, %r12
               	jae	0x42f07e <mi_segment_abandon+0x12e>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42f2e4 <mi_segment_abandon+0x394>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42f313 <mi_segment_abandon+0x3c3>
               	testq	%rcx, %rcx
               	jne	0x42f318 <mi_segment_abandon+0x3c8>
               	jmp	0x42f325 <mi_segment_abandon+0x3d5>
               	testq	%rcx, %rcx
               	je	0x42f38c <mi_segment_abandon+0x43c>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42f329 <mi_segment_abandon+0x3d9>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x42f378 <mi_segment_abandon+0x428>
               	cmpq	32(%r14), %rbx
               	je	0x42f386 <mi_segment_abandon+0x436>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f2e0 <mi_segment_abandon+0x390>
               	cmpb	$0, 8(%r15)
               	jne	0x42f2e0 <mi_segment_abandon+0x390>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f2e0 <mi_segment_abandon+0x390>
               	cmpl	$3, 112(%r15)
               	jne	0x42f39a <mi_segment_abandon+0x44a>
               	movq	72(%r15), %rsi
               	jmp	0x42f3a7 <mi_segment_abandon+0x457>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x42f335 <mi_segment_abandon+0x3e5>
               	movq	%rax, 32(%r14)
               	jmp	0x42f335 <mi_segment_abandon+0x3e5>
               	cmpq	32(%r14), %rbx
               	je	0x42f329 <mi_segment_abandon+0x3d9>
               	cmpq	40(%r14), %rbx
               	jne	0x42f343 <mi_segment_abandon+0x3f3>
               	jmp	0x42f329 <mi_segment_abandon+0x3d9>
               	movzbl	96(%r15), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%r15, %rdi
               	testq	%rcx, %rcx
               	jne	0x42f3c3 <mi_segment_abandon+0x473>
               	movq	80(%r15), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f2e0 <mi_segment_abandon+0x390>
               	callq	0x42df90 <_mi_os_reset>
               	jmp	0x42f2e0 <mi_segment_abandon+0x390>
               	movq	%rdx, (%rax)
               	cmpq	%r15, 8(%rax)
               	jne	0x42f0e1 <mi_segment_abandon+0x191>
               	jmp	0x42f0d9 <mi_segment_abandon+0x189>
               	movq	24(%rcx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rsi
               	jl	0x42f403 <mi_segment_abandon+0x4b3>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	ja	0x42f227 <mi_segment_abandon+0x2d7>
               	jmp	0x42f22b <mi_segment_abandon+0x2db>
               	leaq	120(%r15), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42f453 <mi_segment_abandon+0x503>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r14)
               	cmpq	32(%r14), %rax
               	je	0x42f495 <mi_segment_abandon+0x545>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42f07e <mi_segment_abandon+0x12e>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42f445 <mi_segment_abandon+0x4f5>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42f473 <mi_segment_abandon+0x523>
               	testq	%rsi, %rsi
               	jne	0x42f478 <mi_segment_abandon+0x528>
               	jmp	0x42f485 <mi_segment_abandon+0x535>
               	testq	%rsi, %rsi
               	je	0x42f49b <mi_segment_abandon+0x54b>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42f489 <mi_segment_abandon+0x539>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r14), %rax
               	je	0x42f42c <mi_segment_abandon+0x4dc>
               	cmpq	32(%r14), %rax
               	jne	0x42f43a <mi_segment_abandon+0x4ea>
               	movq	%rdx, 32(%r14)
               	jmp	0x42f43a <mi_segment_abandon+0x4ea>
               	cmpq	32(%r14), %rax
               	je	0x42f489 <mi_segment_abandon+0x539>
               	cmpq	40(%r14), %rax
               	jne	0x42f445 <mi_segment_abandon+0x4f5>
               	jmp	0x42f489 <mi_segment_abandon+0x539>
               	cmpq	%r15, (%rax)
               	jne	0x42f0e7 <mi_segment_abandon+0x197>
               	jmp	0x42f0ca <mi_segment_abandon+0x17a>
               	nopw	(%rax,%rax)

<_mi_free_delayed_block>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r15
               	movq	%rdi, %r12
               	andq	$-4194304, %r12         # imm = 0xFFC00000
               	movl	%r15d, %ebx
               	andl	$4194303, %ebx          # imm = 0x3FFFFF
               	movb	96(%r12), %cl
               	shrq	%cl, %rbx
               	shlq	$6, %rbx
               	leaq	(%r12,%rbx), %r14
               	addq	$120, %r14
               	movq	32(%r14), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42f51c <_mi_free_delayed_block+0x5c>
               	cmpl	$3, %ecx
               	je	0x42f51c <_mi_free_delayed_block+0x5c>
               	cmpl	$1, %ecx
               	je	0x42f518 <_mi_free_delayed_block+0x58>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x42f4f2 <_mi_free_delayed_block+0x32>
               	jmp	0x42f51c <_mi_free_delayed_block+0x5c>
               	pause
               	jmp	0x42f4f2 <_mi_free_delayed_block+0x32>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d230 <_mi_page_free_collect>
               	movq	144(%r12,%rbx), %rax
               	movq	%rax, (%r15)
               	movq	%r15, 144(%r12,%rbx)
               	addl	$-1, 136(%r12,%rbx)
               	je	0x42f558 <_mi_free_delayed_block+0x98>
               	testb	$1, 126(%r12,%rbx)
               	jne	0x42f56b <_mi_free_delayed_block+0xab>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f580 <_mi_page_retire>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f690 <_mi_page_unfull>
               	nop

<_mi_page_retire>:
               	movb	6(%rdi), %dl
               	movl	%edx, %eax
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movl	20(%rdi), %r8d
               	movl	$74, %eax
               	testb	$1, %dl
               	jne	0x42f5ec <_mi_page_retire+0x6c>
               	movl	$1, %ecx
               	cmpl	$9, %r8d
               	jb	0x42f5e9 <_mi_page_retire+0x69>
               	leaq	7(%r8), %rsi
               	shrq	$3, %rsi
               	cmpl	$64, %r8d
               	ja	0x42f5bf <_mi_page_retire+0x3f>
               	addl	$1, %esi
               	andl	$254, %esi
               	movq	%rsi, %rcx
               	jmp	0x42f5e9 <_mi_page_retire+0x69>
               	movl	$73, %ecx
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f5e9 <_mi_page_retire+0x69>
               	addq	$-1, %rsi
               	bsrq	%rsi, %rax
               	movl	%eax, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%rax,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	movq	40(%rdi), %rcx
               	leaq	(%rax,%rax,2), %rax
               	leaq	(%rcx,%rax,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	testb	$1, %dl
               	jne	0x42f61c <_mi_page_retire+0x9c>
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f61c <_mi_page_retire+0x9c>
               	cmpq	%rdi, 1048(%rcx,%rax,8)
               	jne	0x42f61c <_mi_page_retire+0x9c>
               	cmpq	%rdi, (%rsi)
               	je	0x42f623 <_mi_page_retire+0xa3>
               	xorl	%edx, %edx
               	jmp	0x42d300 <_mi_page_free>
               	cmpl	$16385, %r8d            # imm = 0x4001
               	movl	$16, %eax
               	movl	$4, %ecx
               	cmovbl	%eax, %ecx
               	movb	7(%rdi), %al
               	andb	$1, %al
               	orb	%cl, %al
               	movb	%al, 7(%rdi)
               	movq	40(%rdi), %rax
               	subq	%rax, %rsi
               	addq	$-1040, %rsi            # imm = 0xFBF0
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rsi, %rcx
               	cmpq	3024(%rax), %rcx
               	jb	0x42f674 <_mi_page_retire+0xf4>
               	cmpq	3032(%rax), %rcx
               	ja	0x42f684 <_mi_page_retire+0x104>
               	retq
               	movq	%rcx, 3024(%rax)
               	cmpq	3032(%rax), %rcx
               	jbe	0x42f673 <_mi_page_retire+0xf3>
               	movq	%rcx, 3032(%rax)
               	retq
               	nopl	(%rax)

<_mi_page_unfull>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	testb	$1, %al
               	je	0x42fb83 <_mi_page_unfull+0x4f3>
               	movq	40(%rdi), %r12
               	movl	%eax, %ecx
               	andb	$-2, %cl
               	movb	%cl, 6(%rdi)
               	movl	20(%rdi), %esi
               	movl	$1, %ecx
               	cmpq	$9, %rsi
               	jb	0x42f703 <_mi_page_unfull+0x73>
               	movq	%rsi, %rdx
               	addq	$7, %rdx
               	shrq	$3, %rdx
               	cmpl	$64, %esi
               	ja	0x42f6da <_mi_page_unfull+0x4a>
               	addl	$1, %edx
               	andl	$254, %edx
               	movq	%rdx, %rcx
               	jmp	0x42f703 <_mi_page_unfull+0x73>
               	movl	$73, %ecx
               	cmpl	$2097152, %esi          # imm = 0x200000
               	ja	0x42f703 <_mi_page_unfull+0x73>
               	addq	$-1, %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %ecx
               	addl	$253, %ecx
               	orb	$1, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %r9
               	movq	56(%rdi), %rdx
               	testq	%rdx, %rdx
               	je	0x42f71d <_mi_page_unfull+0x8d>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rdx)
               	movzbl	%cl, %ecx
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42f72d <_mi_page_unfull+0x9d>
               	movq	%rdx, 56(%rax)
               	cmpq	%rdi, 2824(%r12)
               	je	0x42f74b <_mi_page_unfull+0xbb>
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f94e <_mi_page_unfull+0x2be>
               	jmp	0x42f769 <_mi_page_unfull+0xd9>
               	movq	56(%rdi), %rdx
               	movq	%rdx, 2824(%r12)
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f94e <_mi_page_unfull+0x2be>
               	movq	%rax, 2816(%r12)
               	movq	2832(%r12), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42f94e <_mi_page_unfull+0x2be>
               	testq	%rax, %rax
               	leaq	89200(%rip), %r8        # 0x445400 <_mi_page_empty>
               	cmovneq	%rax, %r8
               	leaq	7(%rcx), %r14
               	shrq	$3, %r14
               	cmpq	%r8, 8(%r9,%r14,8)
               	je	0x42f94e <_mi_page_unfull+0x2be>
               	cmpq	$9, %rcx
               	jae	0x42f7b4 <_mi_page_unfull+0x124>
               	xorl	%ecx, %ecx
               	jmp	0x42f872 <_mi_page_unfull+0x1e2>
               	cmpq	$64, %rcx
               	ja	0x42f7c4 <_mi_page_unfull+0x134>
               	leal	1(%r14), %r10d
               	andb	$-2, %r10b
               	jmp	0x42f7df <_mi_page_unfull+0x14f>
               	leaq	-1(%r14), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r10d
               	addb	$-3, %r10b
               	leaq	1040(%r9), %rbx
               	leaq	2792(%r12), %rsi
               	nop
               	movq	16(%rsi), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rax
               	shrq	$3, %rax
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x42f850 <_mi_page_unfull+0x1c0>
               	cmpq	$71, %rdx
               	ja	0x42f820 <_mi_page_unfull+0x190>
               	leal	1(%rax), %ecx
               	andb	$-2, %cl
               	jmp	0x42f850 <_mi_page_unfull+0x1c0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x42f850 <_mi_page_unfull+0x1c0>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rbx, %rsi
               	jbe	0x42f85e <_mi_page_unfull+0x1ce>
               	addq	$-24, %rsi
               	cmpb	%cl, %r10b
               	je	0x42f7f0 <_mi_page_unfull+0x160>
               	leaq	1(%rax), %rcx
               	cmpq	%r14, %rax
               	cmovaeq	%r14, %rcx
               	cmpq	%r14, %rcx
               	ja	0x42f94e <_mi_page_unfull+0x2be>
               	addq	$1, %r14
               	movq	%r14, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x42f940 <_mi_page_unfull+0x2b0>
               	movq	%r10, %r11
               	andq	$-4, %r11
               	movq	%r8, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x42f8b5 <_mi_page_unfull+0x225>
               	xorl	%esi, %esi
               	jmp	0x42f909 <_mi_page_unfull+0x279>
               	leaq	(%r9,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rsi,8)
               	movdqu	%xmm0, -96(%rbx,%rsi,8)
               	movdqu	%xmm0, -80(%rbx,%rsi,8)
               	movdqu	%xmm0, -64(%rbx,%rsi,8)
               	movdqu	%xmm0, -48(%rbx,%rsi,8)
               	movdqu	%xmm0, -32(%rbx,%rsi,8)
               	movdqu	%xmm0, -16(%rbx,%rsi,8)
               	movdqu	%xmm0, (%rbx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x42f8d0 <_mi_page_unfull+0x240>
               	testq	%rax, %rax
               	je	0x42f932 <_mi_page_unfull+0x2a2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42f920 <_mi_page_unfull+0x290>
               	cmpq	%r11, %r10
               	je	0x42f94e <_mi_page_unfull+0x2be>
               	addq	%r11, %rcx
               	nop
               	movq	%r8, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r14
               	jne	0x42f940 <_mi_page_unfull+0x2b0>
               	leaq	(%r12,%r15,8), %rax
               	addq	$1048, %rax             # imm = 0x418
               	movq	1048(%r12,%r15,8), %rcx
               	movq	%rcx, 56(%rdi)
               	movq	$0, 48(%rdi)
               	testq	%rcx, %rcx
               	je	0x42f985 <_mi_page_unfull+0x2f5>
               	movq	%rdi, 48(%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	jmp	0x42fb6e <_mi_page_unfull+0x4de>
               	leaq	(%r12,%r15,8), %rcx
               	addq	$1040, %rcx             # imm = 0x410
               	movq	%rdi, (%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x42fb6e <_mi_page_unfull+0x4de>
               	leaq	7(%r8), %r10
               	shrq	$3, %r10
               	cmpq	%rdi, 8(%r9,%r10,8)
               	je	0x42fb6e <_mi_page_unfull+0x4de>
               	cmpq	$9, %r8
               	jae	0x42f9cb <_mi_page_unfull+0x33b>
               	xorl	%ecx, %ecx
               	jmp	0x42fa92 <_mi_page_unfull+0x402>
               	cmpq	$64, %r8
               	ja	0x42f9db <_mi_page_unfull+0x34b>
               	leal	1(%r10), %r11d
               	andb	$-2, %r11b
               	jmp	0x42f9f6 <_mi_page_unfull+0x366>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r11d
               	addb	$-3, %r11b
               	leaq	1040(%r9), %rsi
               	leaq	(%r12,%r15,8), %rdx
               	addq	$1016, %rdx             # imm = 0x3F8
               	nopl	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42fa70 <_mi_page_unfull+0x3e0>
               	cmpq	$71, %rax
               	ja	0x42fa40 <_mi_page_unfull+0x3b0>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42fa70 <_mi_page_unfull+0x3e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42fa70 <_mi_page_unfull+0x3e0>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r14
               	movl	%r14d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r14,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x42fa7e <_mi_page_unfull+0x3ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r11b
               	je	0x42fa10 <_mi_page_unfull+0x380>
               	leaq	1(%rbx), %rcx
               	cmpq	%r10, %rbx
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x42fb6e <_mi_page_unfull+0x4de>
               	addq	$1, %r10
               	movq	%r10, %r14
               	subq	%rcx, %r14
               	cmpq	$4, %r14
               	jb	0x42fb60 <_mi_page_unfull+0x4d0>
               	movq	%r14, %r11
               	andq	$-4, %r11
               	movq	%rdi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x42fad5 <_mi_page_unfull+0x445>
               	xorl	%esi, %esi
               	jmp	0x42fb29 <_mi_page_unfull+0x499>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rsi,8)
               	movdqu	%xmm0, -96(%rdx,%rsi,8)
               	movdqu	%xmm0, -80(%rdx,%rsi,8)
               	movdqu	%xmm0, -64(%rdx,%rsi,8)
               	movdqu	%xmm0, -48(%rdx,%rsi,8)
               	movdqu	%xmm0, -32(%rdx,%rsi,8)
               	movdqu	%xmm0, -16(%rdx,%rsi,8)
               	movdqu	%xmm0, (%rdx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rax
               	jne	0x42faf0 <_mi_page_unfull+0x460>
               	testq	%rbx, %rbx
               	je	0x42fb52 <_mi_page_unfull+0x4c2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rax
               	addq	$24, %rax
               	negq	%rbx
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbx
               	jne	0x42fb40 <_mi_page_unfull+0x4b0>
               	cmpq	%r11, %r14
               	je	0x42fb6e <_mi_page_unfull+0x4de>
               	addq	%r11, %rcx
               	nop
               	movq	%rdi, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x42fb60 <_mi_page_unfull+0x4d0>
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rdi), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<mi_segment_reclaim>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r8, %r14
               	movq	%rdx, 8(%rsp)
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	testq	%rcx, %rcx
               	je	0x42fbb4 <mi_segment_reclaim+0x24>
               	movb	$0, (%rcx)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	72(%r15), %rbp
               	movq	112(%r14), %rdx
               	leaq	205416(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	205979(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rbp, %rbp
               	js	0x42fc24 <mi_segment_reclaim+0x94>
               	testb	%al, %al
               	je	0x42fc68 <mi_segment_reclaim+0xd8>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jg	0x42fc1d <mi_segment_reclaim+0x8d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x42fc10 <mi_segment_reclaim+0x80>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x42fc82 <mi_segment_reclaim+0xf2>
               	testb	%al, %al
               	je	0x430078 <mi_segment_reclaim+0x4e8>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jge	0x42fc5d <mi_segment_reclaim+0xcd>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x42fc50 <mi_segment_reclaim+0xc0>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x430093 <mi_segment_reclaim+0x503>
               	movq	24(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rsi
               	jl	0x42fc7e <mi_segment_reclaim+0xee>
               	movq	%rax, 16(%rdx)
               	addq	$1, (%rdx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fc99 <mi_segment_reclaim+0x109>
               	movq	%rax, 64(%r14)
               	addq	72(%r14), %rbp
               	movq	%rbp, 72(%r14)
               	cmpq	80(%r14), %rbp
               	jbe	0x42fcab <mi_segment_reclaim+0x11b>
               	movq	%rbp, 80(%r14)
               	movq	112(%r14), %rsi
               	leaq	192(%rsi), %rax
               	leaq	205187(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fea6 <mi_segment_reclaim+0x316>
               	leaq	205747(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fea6 <mi_segment_reclaim+0x316>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 216(%rsi)
               	addq	$-1, %rdx
               	movq	208(%rsi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42fd10 <mi_segment_reclaim+0x180>
               	lock
               	cmpxchgq	%rdx, 208(%rsi)
               	jne	0x42fd00 <mi_segment_reclaim+0x170>
               	lock
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	je	0x42fedb <mi_segment_reclaim+0x34b>
               	testq	%rcx, %rcx
               	je	0x42ff2a <mi_segment_reclaim+0x39a>
               	movq	%rcx, 16(%rsp)
               	xorl	%r13d, %r13d
               	jmp	0x42fd61 <mi_segment_reclaim+0x1d1>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	movq	%r14, %rdx
               	callq	0x42e340 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %r13
               	movq	64(%r15), %rax
               	cmpq	%rax, %r13
               	jae	0x42fedd <mi_segment_reclaim+0x34d>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	testb	$1, 121(%r15,%rbx)
               	je	0x42fd50 <mi_segment_reclaim+0x1c0>
               	addq	$-1, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	204981(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fde0 <mi_segment_reclaim+0x250>
               	leaq	205541(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fde0 <mi_segment_reclaim+0x250>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42fdd0 <mi_segment_reclaim+0x240>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42fdc0 <mi_segment_reclaim+0x230>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42fe0a <mi_segment_reclaim+0x27a>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42fe02 <mi_segment_reclaim+0x272>
               	movq	%rax, 240(%rcx)
               	addq	$1, 232(%rcx)
               	leaq	(%r15,%rbx), %rbp
               	addq	$120, %rbp
               	movq	%r12, 160(%r15,%rbx)
               	movq	32(%rbp), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42fe40 <mi_segment_reclaim+0x2b0>
               	cmpl	$1, %ecx
               	je	0x42fe3b <mi_segment_reclaim+0x2ab>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%rbp)
               	jne	0x42fe1a <mi_segment_reclaim+0x28a>
               	jmp	0x42fe40 <mi_segment_reclaim+0x2b0>
               	pause
               	jmp	0x42fe1a <mi_segment_reclaim+0x28a>
               	nop
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x42d230 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbx)
               	je	0x42fd37 <mi_segment_reclaim+0x1a7>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x4300f0 <_mi_page_reclaim>
               	movl	140(%r15,%rbx), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42fd50 <mi_segment_reclaim+0x1c0>
               	leaq	(%r15,%rbx), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbx), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42fe99 <mi_segment_reclaim+0x309>
               	movq	32(%rbp), %rax
               	cmpq	$4, %rax
               	jb	0x42fd50 <mi_segment_reclaim+0x1c0>
               	movq	16(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x42fd50 <mi_segment_reclaim+0x1c0>
               	movq	216(%rsi), %rax
               	addq	$-1, %rax
               	movq	%rax, 216(%rsi)
               	cmpq	208(%rsi), %rax
               	jle	0x42fec8 <mi_segment_reclaim+0x338>
               	movq	%rax, 208(%rsi)
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	jne	0x42fd24 <mi_segment_reclaim+0x194>
               	xorl	%eax, %eax
               	movq	56(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42ff15 <mi_segment_reclaim+0x385>
               	cmpq	%rax, %rcx
               	jae	0x4300d7 <mi_segment_reclaim+0x547>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4300d7 <mi_segment_reclaim+0x547>
               	cmpl	$1, %eax
               	je	0x4300b1 <mi_segment_reclaim+0x521>
               	testl	%eax, %eax
               	je	0x4300b5 <mi_segment_reclaim+0x525>
               	xorl	%r14d, %r14d
               	jmp	0x4300b5 <mi_segment_reclaim+0x525>
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x42e590 <mi_segment_free>
               	xorl	%r15d, %r15d
               	jmp	0x4300d7 <mi_segment_reclaim+0x547>
               	xorl	%ebx, %ebx
               	jmp	0x42ff4d <mi_segment_reclaim+0x3bd>
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	callq	0x42e340 <mi_segment_page_clear>
               	nopl	(%rax)
               	addq	$1, %rbx
               	movq	64(%r15), %rax
               	cmpq	%rax, %rbx
               	jae	0x42fedd <mi_segment_reclaim+0x34d>
               	movq	%rbx, %rbp
               	shlq	$6, %rbp
               	testb	$1, 121(%r15,%rbp)
               	je	0x42ff40 <mi_segment_reclaim+0x3b0>
               	addq	$-1, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	204493(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42ffc0 <mi_segment_reclaim+0x430>
               	leaq	205057(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42ffc0 <mi_segment_reclaim+0x430>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ffb0 <mi_segment_reclaim+0x420>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42ffa0 <mi_segment_reclaim+0x410>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42ffea <mi_segment_reclaim+0x45a>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42ffe2 <mi_segment_reclaim+0x452>
               	movq	%rax, 240(%rcx)
               	addq	$1, 232(%rcx)
               	leaq	(%r15,%rbp), %r13
               	addq	$120, %r13
               	movq	%r12, 160(%r15,%rbp)
               	movq	32(%r13), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x430020 <mi_segment_reclaim+0x490>
               	cmpl	$1, %ecx
               	je	0x43001b <mi_segment_reclaim+0x48b>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r13)
               	jne	0x42fffa <mi_segment_reclaim+0x46a>
               	jmp	0x430020 <mi_segment_reclaim+0x490>
               	pause
               	jmp	0x42fffa <mi_segment_reclaim+0x46a>
               	nop
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x42d230 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbp)
               	je	0x42ff2e <mi_segment_reclaim+0x39e>
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	callq	0x4300f0 <_mi_page_reclaim>
               	movl	140(%r15,%rbp), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42ff40 <mi_segment_reclaim+0x3b0>
               	leaq	(%r15,%rbp), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbp), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42ff40 <mi_segment_reclaim+0x3b0>
               	movq	32(%r13), %rax
               	jmp	0x42ff40 <mi_segment_reclaim+0x3b0>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43008e <mi_segment_reclaim+0x4fe>
               	movq	%rax, 16(%rdx)
               	addq	$1, 8(%rdx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fc99 <mi_segment_reclaim+0x109>
               	jmp	0x42fc95 <mi_segment_reclaim+0x105>
               	addq	$16, %r14
               	movq	$0, 24(%r15)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r15)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, 8(%r14)
               	movq	%r15, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<_mi_page_reclaim>:
               	pushq	%rbx
               	movl	20(%rsi), %r8d
               	cmpq	$67108864, %r8          # imm = 0x4000000
               	jae	0x430388 <_mi_page_reclaim+0x298>
               	addq	$7, %r8
               	movl	$1, %ecx
               	cmpq	$16, %r8
               	jb	0x430155 <_mi_page_reclaim+0x65>
               	movq	%r8, %rax
               	shrq	$3, %rax
               	cmpq	$71, %r8
               	ja	0x43012b <_mi_page_reclaim+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	movq	%rax, %rcx
               	jmp	0x430155 <_mi_page_reclaim+0x65>
               	movl	$73, %ecx
               	cmpq	$2097159, %r8           # imm = 0x200007
               	ja	0x430155 <_mi_page_reclaim+0x65>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	leaq	(%rax,%rax,2), %rax
               	cmpq	$2097168, 1056(%rdi,%rax,8) # imm = 0x200010
               	sete	%cl
               	movb	6(%rsi), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 6(%rsi)
               	movq	1040(%rdi,%rax,8), %rcx
               	movq	%rcx, 48(%rsi)
               	movq	$0, 56(%rsi)
               	leaq	56(%rcx), %rdx
               	testq	%rcx, %rcx
               	leaq	1048(%rdi,%rax,8), %rcx
               	cmovneq	%rdx, %rcx
               	movq	%rsi, (%rcx)
               	movq	%rsi, 1040(%rdi,%rax,8)
               	movq	1056(%rdi,%rax,8), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43037e <_mi_page_reclaim+0x28e>
               	leaq	7(%rcx), %r9
               	shrq	$3, %r9
               	cmpq	%rsi, 8(%rdi,%r9,8)
               	je	0x43037e <_mi_page_reclaim+0x28e>
               	cmpq	$9, %rcx
               	jae	0x4301dd <_mi_page_reclaim+0xed>
               	xorl	%ecx, %ecx
               	jmp	0x4302a2 <_mi_page_reclaim+0x1b2>
               	cmpq	$64, %rcx
               	ja	0x4301ed <_mi_page_reclaim+0xfd>
               	leal	1(%r9), %r8d
               	andb	$-2, %r8b
               	jmp	0x430208 <_mi_page_reclaim+0x118>
               	leaq	-1(%r9), %rdx
               	bsrq	%rdx, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rbx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%rdi), %r10
               	leaq	(%rdi,%rax,8), %rax
               	addq	$1016, %rax             # imm = 0x3F8
               	nopl	(%rax)
               	movq	16(%rax), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x430280 <_mi_page_reclaim+0x190>
               	cmpq	$71, %rdx
               	ja	0x430250 <_mi_page_reclaim+0x160>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x430280 <_mi_page_reclaim+0x190>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x430280 <_mi_page_reclaim+0x190>
               	leaq	-1(%rbx), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%r10, %rax
               	jbe	0x43028e <_mi_page_reclaim+0x19e>
               	addq	$-24, %rax
               	cmpb	%cl, %r8b
               	je	0x430220 <_mi_page_reclaim+0x130>
               	leaq	1(%rbx), %rcx
               	cmpq	%r9, %rbx
               	cmovaeq	%r9, %rcx
               	cmpq	%r9, %rcx
               	ja	0x43037e <_mi_page_reclaim+0x28e>
               	addq	$1, %r9
               	movq	%r9, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x430370 <_mi_page_reclaim+0x280>
               	movq	%r10, %r8
               	andq	$-4, %r8
               	movq	%rsi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %r11d
               	andl	$3, %r11d
               	cmpq	$12, %rdx
               	jae	0x4302e7 <_mi_page_reclaim+0x1f7>
               	xorl	%edx, %edx
               	jmp	0x430339 <_mi_page_reclaim+0x249>
               	leaq	(%rdi,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%edx, %edx
               	nopl	(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rdx,8)
               	movdqu	%xmm0, -96(%rbx,%rdx,8)
               	movdqu	%xmm0, -80(%rbx,%rdx,8)
               	movdqu	%xmm0, -64(%rbx,%rdx,8)
               	movdqu	%xmm0, -48(%rbx,%rdx,8)
               	movdqu	%xmm0, -32(%rbx,%rdx,8)
               	movdqu	%xmm0, -16(%rbx,%rdx,8)
               	movdqu	%xmm0, (%rbx,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rax
               	jne	0x430300 <_mi_page_reclaim+0x210>
               	testq	%r11, %r11
               	je	0x430362 <_mi_page_reclaim+0x272>
               	addq	%rcx, %rdx
               	leaq	(%rdi,%rdx,8), %rax
               	addq	$24, %rax
               	negq	%r11
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%r11
               	jne	0x430350 <_mi_page_reclaim+0x260>
               	cmpq	%r8, %r10
               	je	0x43037e <_mi_page_reclaim+0x28e>
               	addq	%r8, %rcx
               	nop
               	movq	%rsi, 8(%rdi,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r9
               	jne	0x430370 <_mi_page_reclaim+0x280>
               	addq	$1, 3016(%rdi)
               	popq	%rbx
               	retq
               	movq	%rsi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebx
               	cmpl	$3, %ebx
               	jne	0x43039f <_mi_page_reclaim+0x2af>
               	movq	72(%rax), %rdx
               	jmp	0x4303aa <_mi_page_reclaim+0x2ba>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movzbl	(%rsi), %ecx
               	testq	%rcx, %rcx
               	je	0x4303ba <_mi_page_reclaim+0x2ca>
               	movq	%rdx, %r8
               	jmp	0x430102 <_mi_page_reclaim+0x12>
               	movq	80(%rax), %r10
               	movq	%rdx, %r9
               	subq	%r10, %r9
               	cmpl	$1, %ebx
               	ja	0x4303ff <_mi_page_reclaim+0x30f>
               	testl	%r8d, %r8d
               	je	0x4303ff <_mi_page_reclaim+0x30f>
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r10, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4303e8 <_mi_page_reclaim+0x2f8>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x4303ed <_mi_page_reclaim+0x2fd>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %r8
               	jmp	0x430102 <_mi_page_reclaim+0x12>
               	nopw	(%rax,%rax)

<mi_free>:
               	movq	%rdi, %rdx
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x430463 <mi_free+0x53>
               	movq	%fs:0, %r8
               	movl	%edx, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movb	96(%rdi), %cl
               	shrq	%cl, %rax
               	movq	104(%rdi), %rcx
               	cmpq	%r8, %rcx
               	jne	0x430464 <mi_free+0x54>
               	shlq	$6, %rax
               	cmpb	$0, 126(%rdi,%rax)
               	jne	0x430464 <mi_free+0x54>
               	movq	144(%rdi,%rax), %rcx
               	movq	%rcx, (%rdx)
               	movq	%rdx, 144(%rdi,%rax)
               	addl	$-1, 136(%rdi,%rax)
               	je	0x430476 <mi_free+0x66>
               	retq
               	movq	104(%rdi), %rax
               	xorl	%esi, %esi
               	cmpq	%r8, %rax
               	sete	%sil
               	jmp	0x430490 <mi_free_generic>
               	addq	%rax, %rdi
               	addq	$120, %rdi
               	jmp	0x42f580 <_mi_page_retire>
               	nopw	%cs:(%rax,%rax)

<mi_free_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r8
               	movq	%rdx, %r11
               	subq	%rdi, %r11
               	movq	96(%rdi), %rcx
               	shrq	%cl, %r11
               	shlq	$6, %r11
               	leaq	(%rdi,%r11), %r9
               	addq	$120, %r9
               	testb	$2, 126(%rdi,%r11)
               	je	0x430555 <mi_free_generic+0xc5>
               	movl	140(%rdi,%r11), %r14d
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x4304d4 <mi_free_generic+0x44>
               	movq	72(%rdi), %r10
               	jmp	0x4304dd <mi_free_generic+0x4d>
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	movzbl	(%r9), %ebx
               	imulq	%rbx, %r10
               	addq	%rdi, %r10
               	testq	%rbx, %rbx
               	jne	0x430527 <mi_free_generic+0x97>
               	addq	80(%rdi), %r10
               	cmpl	$1, %eax
               	ja	0x430527 <mi_free_generic+0x97>
               	testl	%r14d, %r14d
               	je	0x430527 <mi_free_generic+0x97>
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43050e <mi_free_generic+0x7e>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430516 <mi_free_generic+0x86>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	leaq	(%r10,%rax), %rcx
               	cmpq	%r14, %rax
               	cmovbq	%rcx, %r10
               	cmpl	$67108864, %r14d        # imm = 0x4000000
               	jae	0x4305b9 <mi_free_generic+0x129>
               	movq	%r8, %rax
               	subq	%r10, %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x43054d <mi_free_generic+0xbd>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430552 <mi_free_generic+0xc2>
               	xorl	%edx, %edx
               	divl	%r14d
               	subq	%rdx, %r8
               	testb	%sil, %sil
               	je	0x43058c <mi_free_generic+0xfc>
               	movq	144(%rdi,%r11), %rax
               	movq	%rax, (%r8)
               	movq	%r8, 144(%rdi,%r11)
               	addl	$-1, 136(%rdi,%r11)
               	je	0x43059d <mi_free_generic+0x10d>
               	leaq	(%rdi,%r11), %rax
               	addq	$126, %rax
               	testb	$1, (%rax)
               	jne	0x4305ab <mi_free_generic+0x11b>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x430640 <_mi_free_block_mt>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f580 <_mi_page_retire>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f690 <_mi_page_unfull>
               	movq	%r9, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebp
               	cmpl	$3, %ebp
               	jne	0x4305d0 <mi_free_generic+0x140>
               	movq	72(%rax), %rdx
               	jmp	0x4305db <mi_free_generic+0x14b>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	testb	%bl, %bl
               	je	0x4305e7 <mi_free_generic+0x157>
               	movq	%rdx, %r14
               	jmp	0x430534 <mi_free_generic+0xa4>
               	movq	80(%rax), %r15
               	movq	%rdx, %rcx
               	subq	%r15, %rcx
               	cmpl	$1, %ebp
               	ja	0x43062c <mi_free_generic+0x19c>
               	testl	%r14d, %r14d
               	je	0x43062c <mi_free_generic+0x19c>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430615 <mi_free_generic+0x185>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x43061a <mi_free_generic+0x18a>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%r14, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r14
               	jmp	0x430534 <mi_free_generic+0xa4>
               	nopw	%cs:(%rax,%rax)

<_mi_free_block_mt>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	%rdi, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	cmpl	$3, 112(%r15)
               	jne	0x430707 <_mi_free_block_mt+0xc7>
               	callq	0x42a9e0 <mi_thread_init>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rcx
               	movq	2848(%rcx), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, 104(%r15)
               	jne	0x430771 <_mi_free_block_mt+0x131>
               	movq	8(%r14), %rax
               	movq	%rax, (%rbx)
               	movq	%rbx, 8(%r14)
               	addl	$-1, 16(%r14)
               	andb	$-2, 7(%r14)
               	movq	(%rcx), %rcx
               	movq	72(%r15), %rsi
               	movq	144(%rcx), %rdx
               	leaq	202641(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	203204(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rsi, %rsi
               	js	0x430777 <_mi_free_block_mt+0x137>
               	testb	%al, %al
               	je	0x4307b5 <_mi_free_block_mt+0x175>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	leaq	1(%rdi), %rbx
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdi, %rax
               	jg	0x4306fd <_mi_free_block_mt+0xbd>
               	lock
               	cmpxchgq	%rbx, 16(%rdx)
               	jne	0x4306f0 <_mi_free_block_mt+0xb0>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x4307cf <_mi_free_block_mt+0x18f>
               	movq	32(%r14), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	movq	%rax, %rdx
               	andq	$3, %rdx
               	je	0x430730 <_mi_free_block_mt+0xf0>
               	movq	%rcx, (%rbx)
               	orq	%rbx, %rdx
               	lock
               	cmpxchgq	%rdx, 32(%r14)
               	jne	0x430710 <_mi_free_block_mt+0xd0>
               	jmp	0x430771 <_mi_free_block_mt+0x131>
               	orq	$1, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x430710 <_mi_free_block_mt+0xd0>
               	movq	40(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x43075a <_mi_free_block_mt+0x11a>
               	movq	2840(%rcx), %rax
               	movq	%rax, (%rbx)
               	lock
               	cmpxchgq	%rbx, 2840(%rcx)
               	jne	0x43074c <_mi_free_block_mt+0x10c>
               	movq	32(%r14), %rax
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	orq	$2, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x43075e <_mi_free_block_mt+0x11e>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	testb	%al, %al
               	je	0x43080e <_mi_free_block_mt+0x1ce>
               	movq	$-1, %rdi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	addq	$-1, %rdi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rdi, %rax
               	jge	0x4307ad <_mi_free_block_mt+0x16d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x4307a0 <_mi_free_block_mt+0x160>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x430829 <_mi_free_block_mt+0x1e9>
               	movq	24(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rdi
               	jl	0x4307cb <_mi_free_block_mt+0x18b>
               	movq	%rax, 16(%rdx)
               	addq	$1, (%rdx)
               	movl	$1, %eax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x4307e6 <_mi_free_block_mt+0x1a6>
               	movq	%rax, 96(%rcx)
               	addq	104(%rcx), %rsi
               	leaq	32(%rcx), %rdx
               	movq	%rsi, 104(%rcx)
               	cmpq	112(%rcx), %rsi
               	jbe	0x4307fc <_mi_free_block_mt+0x1bc>
               	movq	%rsi, 112(%rcx)
               	movq	%r14, %rdi
               	movl	$1, %esi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42e160 <_mi_segment_page_free>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x430824 <_mi_free_block_mt+0x1e4>
               	movq	%rax, 16(%rdx)
               	addq	$1, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x4307e6 <_mi_free_block_mt+0x1a6>
               	jmp	0x4307e2 <_mi_free_block_mt+0x1a2>

<mi_out_buf_stderr>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	190333(%rip), %rax      # 0x45efc8 <write+0x45efc8>
               	movq	(%rax), %rsi
               	callq	0x4137e0 <fputs@plt>
               	testq	%rbx, %rbx
               	je	0x430889 <mi_out_buf_stderr+0x49>
               	movq	203449(%rip), %rax      # 0x462318 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x430889 <mi_out_buf_stderr+0x49>
               	movq	%rbx, %rdi
               	callq	0x413710 <strlen@plt>
               	testq	%rax, %rax
               	je	0x430889 <mi_out_buf_stderr+0x49>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 203416(%rip)      # 0x462318 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x43088b <mi_out_buf_stderr+0x4b>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	203383(%rip), %rdi      # 0x462320 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x413720 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<mi_buffered_out>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x430a13 <mi_buffered_out+0x153>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x430a13 <mi_buffered_out+0x153>
               	movq	%rdi, %r14
               	movb	(%rdi), %r12b
               	testb	%r12b, %r12b
               	je	0x430a13 <mi_buffered_out+0x153>
               	addq	$1, %r14
               	movq	$-56, %r15
               	movq	190167(%rip), %r13      # 0x45efd8 <write+0x45efd8>
               	movq	190144(%rip), %rbp      # 0x45efc8 <write+0x45efc8>
               	jmp	0x430929 <mi_buffered_out+0x69>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	movq	$0, 24(%rbx)
               	movzbl	(%r14), %r12d
               	addq	$1, %r14
               	testb	%r12b, %r12b
               	je	0x430a13 <mi_buffered_out+0x153>
               	movq	24(%rbx), %rax
               	cmpq	32(%rbx), %rax
               	jb	0x430999 <mi_buffered_out+0xd9>
               	movq	16(%rbx), %rcx
               	movb	$0, (%rcx,%rax)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x430960 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%r13)
               	je	0x430960 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%rbp)
               	je	0x430960 <mi_buffered_out+0xa0>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	jmp	0x43098f <mi_buffered_out+0xcf>
               	nop
               	cmpb	$0, %fs:(%r15)
               	jne	0x43098f <mi_buffered_out+0xcf>
               	movb	$1, %fs:(%r15)
               	movq	203157(%rip), %rsi      # 0x462308 <mi_out_arg>
               	movq	203158(%rip), %rax      # 0x462310 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19460(%rip), %rcx      # 0x42bd80 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	movq	$0, 24(%rbx)
               	xorl	%eax, %eax
               	movq	16(%rbx), %rcx
               	leaq	1(%rax), %rdx
               	movq	%rdx, 24(%rbx)
               	movb	%r12b, (%rcx,%rax)
               	cmpb	$10, %r12b
               	jne	0x430918 <mi_buffered_out+0x58>
               	movq	16(%rbx), %rax
               	movq	24(%rbx), %rcx
               	movb	$0, (%rax,%rcx)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x4309db <mi_buffered_out+0x11b>
               	cmpq	%rax, (%r13)
               	je	0x4309db <mi_buffered_out+0x11b>
               	cmpq	%rax, (%rbp)
               	jne	0x43090a <mi_buffered_out+0x4a>
               	cmpb	$0, %fs:(%r15)
               	jne	0x430910 <mi_buffered_out+0x50>
               	movb	$1, %fs:(%r15)
               	movq	203030(%rip), %rsi      # 0x462308 <mi_out_arg>
               	movq	203031(%rip), %rax      # 0x462310 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19587(%rip), %rcx      # 0x42bd80 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	jmp	0x430910 <mi_buffered_out+0x50>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_fprintf>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rsi, %r14
               	testb	%al, %al
               	je	0x430a78 <_mi_fprintf+0x48>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	752(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rdx, %rdx
               	je	0x430b0a <_mi_fprintf+0xda>
               	movq	$-56, %rbx
               	cmpb	$0, %fs:(%rbx)
               	jne	0x430b0a <_mi_fprintf+0xda>
               	movb	$1, %fs:(%rbx)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	callq	0x4138a0 <vsnprintf@plt>
               	movb	$0, %fs:(%rbx)
               	movq	189686(%rip), %rcx      # 0x45efd8 <write+0x45efd8>
               	leaq	-553(%rip), %rax        # 0x4308c0 <mi_buffered_out>
               	cmpq	%rax, (%rcx)
               	je	0x430b15 <_mi_fprintf+0xe5>
               	movq	189651(%rip), %rcx      # 0x45efc8 <write+0x45efc8>
               	cmpq	%rax, (%rcx)
               	je	0x430b15 <_mi_fprintf+0xe5>
               	leaq	208(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x4308c0 <mi_buffered_out>
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	movb	$1, %fs:(%rbx)
               	movq	202728(%rip), %rsi      # 0x462308 <mi_out_arg>
               	movq	202729(%rip), %rax      # 0x462310 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19889(%rip), %rcx      # 0x42bd80 <mi_out_buf>
               	cmovneq	%rax, %rcx
               	leaq	208(%rsp), %rdi
               	callq	*%rcx
               	movb	$0, %fs:(%rbx)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<mi_stat_print>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rcx, %r15
               	movq	%rdx, %rbx
               	movq	%rsi, %rcx
               	movq	%rdi, %r14
               	leaq	81359(%rip), %rdx       # 0x44493d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	testq	%rbx, %rbx
               	jle	0x430bba <mi_stat_print+0x6a>
               	movq	16(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430c01 <mi_stat_print+0xb1>
               	leaq	81275(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81275(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x430d60 <mi_stat_print+0x210>
               	movq	16(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	testq	%rbx, %rbx
               	js	0x430c68 <mi_stat_print+0x118>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x430c98 <mi_stat_print+0x148>
               	leaq	81202(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81202(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x4311df <mi_stat_print+0x68f>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81168(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81163(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81130(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430d01 <mi_stat_print+0x1b1>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430d07 <mi_stat_print+0x1b7>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431115 <mi_stat_print+0x5c5>
               	leaq	81051(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81089(%rip), %r8        # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x4314ad <mi_stat_print+0x95d>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	81018(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81013(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	80980(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43117e <mi_stat_print+0x62e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431186 <mi_stat_print+0x636>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80857(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80854(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	80862(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430db2 <mi_stat_print+0x262>
               	leaq	80771(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80771(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x430e71 <mi_stat_print+0x321>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80735(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80730(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80697(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430e12 <mi_stat_print+0x2c2>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430e18 <mi_stat_print+0x2c8>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80584(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80581(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	80589(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	8(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430ec4 <mi_stat_print+0x374>
               	leaq	80497(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80497(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x430f83 <mi_stat_print+0x433>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80461(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80456(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80423(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430f24 <mi_stat_print+0x3d4>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430f2a <mi_stat_print+0x3da>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80310(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80307(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	80315(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430fd6 <mi_stat_print+0x486>
               	leaq	80223(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80223(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x431095 <mi_stat_print+0x545>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80187(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80182(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80149(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431036 <mi_stat_print+0x4e6>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x43103c <mi_stat_print+0x4ec>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80036(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80033(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	80041(%rip), %r12       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rbx
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	79966(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79966(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movl	$32, %esi
               	movq	%rbx, %rdi
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	79961(%rip), %rcx       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	(%r14), %rax
               	cmpq	8(%r14), %rax
               	leaq	79941(%rip), %rax       # 0x44494a <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
               	leaq	79952(%rip), %rdx       # 0x44495c <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>
               	cmovgq	%rax, %rdx
               	jmp	0x431436 <mi_stat_print+0x8e6>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79869(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79864(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79831(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43144c <mi_stat_print+0x8fc>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431454 <mi_stat_print+0x904>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79706(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79703(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	79711(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431231 <mi_stat_print+0x6e1>
               	leaq	79620(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79620(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x4312f0 <mi_stat_print+0x7a0>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	79584(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79579(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	79546(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431291 <mi_stat_print+0x741>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431297 <mi_stat_print+0x747>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79433(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79430(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	79438(%rip), %rbx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	79411(%rip), %rcx       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43135a <mi_stat_print+0x80a>
               	leaq	79323(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79323(%rip), %r8        # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x431419 <mi_stat_print+0x8c9>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	79287(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79282(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	79249(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4313ba <mi_stat_print+0x86a>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4313c0 <mi_stat_print+0x870>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79136(%rip), %rax       # 0x44491d <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79133(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	79141(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	79591(%rip), %rdx       # 0x444b1d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79026(%rip), %rax       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78985(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	78993(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x4314fc <mi_stat_print+0x9ac>
               	leaq	78903(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78941(%rip), %r8        # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x4315bf <mi_stat_print+0xa6f>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	78870(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	78865(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	78832(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43155e <mi_stat_print+0xa0e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431566 <mi_stat_print+0xa16>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78752(%rip), %rax       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78711(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	78719(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	8(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43160f <mi_stat_print+0xabf>
               	leaq	78628(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78666(%rip), %r8        # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x4316d2 <mi_stat_print+0xb82>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	78595(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	78590(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	78557(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x431671 <mi_stat_print+0xb21>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431679 <mi_stat_print+0xb29>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78477(%rip), %rax       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78436(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	78444(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	24(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431722 <mi_stat_print+0xbd2>
               	leaq	78353(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78391(%rip), %r8        # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x4317e5 <mi_stat_print+0xc95>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	78320(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	78315(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	78282(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x431784 <mi_stat_print+0xc34>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x43178c <mi_stat_print+0xc3c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78202(%rip), %rax       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78161(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	78169(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	78176(%rip), %rdx       # 0x444962 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f9>
               	leaq	78450(%rip), %rcx       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%r15, %rsi
               	jmp	0x4310f0 <mi_stat_print+0x5a0>
               	nopw	%cs:(%rax,%rax)

<mi_stat_counter_print>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %rcx
               	movq	%rdi, %rbx
               	leaq	78086(%rip), %rdx       # 0x44493d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	movq	(%rbx), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43187d <mi_stat_counter_print+0x5d>
               	leaq	78008(%rip), %rdx       # 0x444916 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78046(%rip), %r8        # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	jmp	0x43193c <mi_stat_counter_print+0x11c>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	77972(%rip), %rdx       # 0x44491f <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	77967(%rip), %rsi       # 0x444921 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	77934(%rip), %r9        # 0x444923 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4318dd <mi_stat_counter_print+0xbd>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4318e3 <mi_stat_counter_print+0xc3>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	77859(%rip), %rax       # 0x444943 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	77818(%rip), %rdx       # 0x444925 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	leaq	77826(%rip), %rdx       # 0x444945 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	leaq	78276(%rip), %rdx       # 0x444b1d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430a30 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<chacha_block>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movl	(%rdi), %r13d
               	movl	4(%rdi), %eax
               	movl	%eax, -24(%rsp)
               	movl	8(%rdi), %r12d
               	movl	12(%rdi), %r8d
               	movl	16(%rdi), %r9d
               	movl	20(%rdi), %eax
               	movl	24(%rdi), %ebx
               	movl	28(%rdi), %ebp
               	movl	32(%rdi), %ecx
               	movl	%ecx, -32(%rsp)
               	movl	36(%rdi), %ecx
               	movl	%ecx, -28(%rsp)
               	movl	40(%rdi), %ecx
               	movl	%ecx, -20(%rsp)
               	movl	44(%rdi), %r14d
               	movl	48(%rdi), %esi
               	movl	52(%rdi), %edx
               	movl	56(%rdi), %r15d
               	movq	%rdi, -8(%rsp)
               	movl	60(%rdi), %r11d
               	movq	$-2, -16(%rsp)
               	nop
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$16, %esi
               	movl	-32(%rsp), %ecx
               	addl	%esi, %ecx
               	xorl	%ecx, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$8, %esi
               	addl	%esi, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %r9d
               	roll	$7, %r9d
               	movl	-24(%rsp), %edi
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$16, %edx
               	movl	-28(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %eax
               	roll	$12, %eax
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -28(%rsp)
               	xorl	%ecx, %eax
               	roll	$7, %eax
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$16, %r15d
               	movl	-20(%rsp), %r10d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$7, %ebp
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r10d
               	xorl	%r10d, %eax
               	roll	$12, %eax
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r10d
               	movl	%r10d, -20(%rsp)
               	xorl	%r10d, %eax
               	roll	$7, %eax
               	addl	%ebx, %edi
               	xorl	%edi, %esi
               	roll	$16, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %edi
               	movl	%edi, -24(%rsp)
               	xorl	%edi, %esi
               	roll	$8, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$16, %edx
               	movl	-32(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %ebp
               	roll	$7, %ebp
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$16, %r15d
               	movl	-28(%rsp), %edi
               	addl	%r15d, %edi
               	xorl	%edi, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %edi
               	movl	%edi, -28(%rsp)
               	xorl	%edi, %r9d
               	roll	$7, %r9d
               	movq	-16(%rsp), %r10
               	addq	$2, %r10
               	movq	%r10, -16(%rsp)
               	cmpq	$18, %r10
               	jb	0x4319d0 <chacha_block+0x60>
               	movq	-8(%rsp), %rdi
               	addl	(%rdi), %r13d
               	movl	%r13d, 64(%rdi)
               	movd	%r9d, %xmm0
               	movd	%r8d, %xmm1
               	movd	%r12d, %xmm2
               	movd	-24(%rsp), %xmm3        # xmm3 = mem[0],zero,zero,zero
               	movd	-32(%rsp), %xmm4        # xmm4 = mem[0],zero,zero,zero
               	movd	%ebp, %xmm5
               	movd	%ebx, %xmm6
               	movd	%eax, %xmm7
               	punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
               	punpckldq	%xmm2, %xmm3    # xmm3 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
               	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
               	movdqu	4(%rdi), %xmm0
               	paddd	%xmm3, %xmm0
               	movdqu	20(%rdi), %xmm1
               	movdqu	%xmm0, 68(%rdi)
               	punpckldq	%xmm4, %xmm5    # xmm5 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
               	punpckldq	%xmm6, %xmm7    # xmm7 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
               	punpcklqdq	%xmm5, %xmm7    # xmm7 = xmm7[0],xmm5[0]
               	paddd	%xmm1, %xmm7
               	movdqu	%xmm7, 84(%rdi)
               	movl	-28(%rsp), %r10d
               	addl	36(%rdi), %r10d
               	movl	%r10d, 100(%rdi)
               	movl	-20(%rsp), %eax
               	addl	40(%rdi), %eax
               	movl	%eax, 104(%rdi)
               	addl	44(%rdi), %r14d
               	movl	%r14d, 108(%rdi)
               	movl	48(%rdi), %ebp
               	addl	%ebp, %esi
               	movl	%esi, 112(%rdi)
               	movl	52(%rdi), %esi
               	addl	%esi, %edx
               	movl	%edx, 116(%rdi)
               	movl	56(%rdi), %eax
               	addl	%eax, %r15d
               	movl	%r15d, 120(%rdi)
               	addl	60(%rdi), %r11d
               	movl	%r11d, 124(%rdi)
               	movl	$16, 128(%rdi)
               	incl	%ebp
               	movl	%ebp, 48(%rdi)
               	jne	0x431bfa <chacha_block+0x28a>
               	incl	%esi
               	movl	%esi, 52(%rdi)
               	jne	0x431bfa <chacha_block+0x28a>
               	addl	$1, %eax
               	movl	%eax, 56(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_malloc_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	179544(%rip), %r12      # 0x45d980 <_mi_heap_empty>
               	movq	$-80, %r13
               	xorl	%r15d, %r15d
               	cmpq	%r12, %rbx
               	je	0x431cce <_mi_malloc_generic+0xbe>
               	movq	(%rbx), %rax
               	movq	(%rax), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rax)
               	cmpq	$0, 297080(%rip)        # 0x47a4c8 <deferred_free>
               	je	0x431c75 <_mi_malloc_generic+0x65>
               	cmpb	$0, 8(%rax)
               	jne	0x431c75 <_mi_malloc_generic+0x65>
               	movb	$1, 8(%rax)
               	movq	297061(%rip), %rax      # 0x47a4c8 <deferred_free>
               	movq	297062(%rip), %rdx      # 0x47a4d0 <deferred_arg>
               	xorl	%edi, %edi
               	callq	*%rax
               	movq	(%rbx), %rax
               	movb	$0, 8(%rax)
               	movq	2840(%rbx), %rax
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x431cb0 <_mi_malloc_generic+0xa0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%r15, 2840(%rbx)
               	jne	0x431c80 <_mi_malloc_generic+0x70>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x42f4c0 <_mi_free_delayed_block>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x431ca0 <_mi_malloc_generic+0x90>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431d40 <mi_find_page>
               	testq	%rax, %rax
               	je	0x431ce3 <_mi_malloc_generic+0xd3>
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	jne	0x431d1b <_mi_malloc_generic+0x10b>
               	jmp	0x431c32 <_mi_malloc_generic+0x22>
               	callq	0x42a9e0 <mi_thread_init>
               	movq	%fs:(%r13), %rbx
               	cmpq	%r12, %rbx
               	jne	0x431c3b <_mi_malloc_generic+0x2b>
               	jmp	0x431d29 <_mi_malloc_generic+0x119>
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42c690 <mi_heap_collect_ex>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431d40 <mi_find_page>
               	testq	%rax, %rax
               	jne	0x431cc0 <_mi_malloc_generic+0xb0>
               	leaq	76929(%rip), %rsi       # 0x444988 <typeinfo name for kotlin::gc::GCSchedulerData+0x181f>
               	xorl	%r15d, %r15d
               	movl	$12, %edi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	jmp	0x431d29 <_mi_malloc_generic+0x119>
               	addl	$1, 16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, %r15
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<mi_find_page>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %r15
               	cmpq	$2097153, %rsi          # imm = 0x200001
               	jae	0x431e77 <mi_find_page+0x137>
               	movl	$1, %eax
               	cmpq	$9, %rdx
               	jb	0x431d96 <mi_find_page+0x56>
               	leaq	7(%rdx), %rax
               	shrq	$3, %rax
               	cmpq	$64, %rdx
               	ja	0x431d7b <mi_find_page+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	jmp	0x431d96 <mi_find_page+0x56>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %eax
               	addl	$253, %eax
               	movzbl	%al, %eax
               	leaq	(%rax,%rax,2), %r14
               	movq	1040(%r15,%r14,8), %rbx
               	testq	%rbx, %rbx
               	je	0x431e5a <mi_find_page+0x11a>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x431e09 <mi_find_page+0xc9>
               	movq	32(%rbx), %rax
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x431dc0 <mi_find_page+0x80>
               	andq	$-4, %rcx
               	je	0x431e09 <mi_find_page+0xc9>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x431df2 <mi_find_page+0xb2>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x431de0 <mi_find_page+0xa0>
               	cmpl	%edx, %eax
               	jbe	0x431e2d <mi_find_page+0xed>
               	leaq	76145(%rip), %rsi       # 0x44476e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	movq	8(%rbx), %rcx
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x431e48 <mi_find_page+0x108>
               	testq	%rcx, %rcx
               	jne	0x431e4d <mi_find_page+0x10d>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	jmp	0x431e4d <mi_find_page+0x10d>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	movq	8(%rbx), %rcx
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x431e16 <mi_find_page+0xd6>
               	testq	%rcx, %rcx
               	je	0x431e5a <mi_find_page+0x11a>
               	andb	$1, 7(%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	(%r15,%r14,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	movq	%r15, %rdi
               	movl	$1, %edx
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x432820 <mi_page_queue_find_free_ex>
               	testq	%rdx, %rdx
               	js	0x431fb1 <mi_find_page+0x271>
               	cmpq	$33554432, %rdx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	cmpq	$8388608, %rdx          # imm = 0x800000
               	movl	$262144, %eax           # imm = 0x40000
               	cmovaeq	%rcx, %rax
               	movq	%rax, %rcx
               	notq	%rcx
               	cmpq	%rdx, %rcx
               	seta	%cl
               	testb	$1, %cl
               	je	0x431ec7 <mi_find_page+0x187>
               	leaq	(%rdx,%rax), %rcx
               	addq	$-1, %rcx
               	negq	%rax
               	andq	%rcx, %rax
               	movq	%rax, %rdx
               	xorl	%ebx, %ebx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x432050 <mi_page_fresh_alloc>
               	testq	%rax, %rax
               	je	0x431e51 <mi_find_page+0x111>
               	movq	%rax, %r14
               	movl	20(%rax), %esi
               	cmpq	$67108864, %rsi         # imm = 0x4000000
               	jae	0x431fcb <mi_find_page+0x28b>
               	movq	$0, 40(%r14)
               	movq	(%r15), %rdi
               	cmpq	$67108865, %rsi         # imm = 0x4000001
               	jb	0x431f45 <mi_find_page+0x205>
               	addq	$528, %rdi              # imm = 0x210
               	callq	0x42bdf0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	736(%rax), %rcx
               	leaq	196384(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x431f87 <mi_find_page+0x247>
               	leaq	196948(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x431f87 <mi_find_page+0x247>
               	lock
               	addq	$1, 744(%rax)
               	lock
               	addq	$1, 736(%rax)
               	jmp	0x431fa9 <mi_find_page+0x269>
               	addq	$496, %rdi              # imm = 0x1F0
               	callq	0x42bdf0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	720(%rax), %rcx
               	leaq	196318(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x431f99 <mi_find_page+0x259>
               	leaq	196882(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x431f99 <mi_find_page+0x259>
               	lock
               	addq	$1, 728(%rax)
               	lock
               	addq	$1, 720(%rax)
               	jmp	0x431fa9 <mi_find_page+0x269>
               	addq	$1, 744(%rax)
               	addq	$1, 736(%rax)
               	jmp	0x431fa9 <mi_find_page+0x269>
               	addq	$1, 728(%rax)
               	addq	$1, 720(%rax)
               	movq	%r14, %rbx
               	jmp	0x431e51 <mi_find_page+0x111>
               	leaq	76279(%rip), %rsi       # 0x4449af <typeinfo name for kotlin::gc::GCSchedulerData+0x1846>
               	xorl	%ebx, %ebx
               	movl	$75, %edi
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	jmp	0x431e51 <mi_find_page+0x111>
               	movq	%r14, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x431fe2 <mi_find_page+0x2a2>
               	movq	72(%rax), %rdx
               	jmp	0x431fed <mi_find_page+0x2ad>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movzbl	(%r14), %ebx
               	testq	%rbx, %rbx
               	je	0x431ffe <mi_find_page+0x2be>
               	movq	%rdx, %rsi
               	jmp	0x431eef <mi_find_page+0x1af>
               	movq	80(%rax), %r8
               	movq	%rdx, %rcx
               	subq	%r8, %rcx
               	cmpl	$1, %edi
               	ja	0x432041 <mi_find_page+0x301>
               	testl	%esi, %esi
               	je	0x432041 <mi_find_page+0x301>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x43202b <mi_find_page+0x2eb>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43202f <mi_find_page+0x2ef>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	jmp	0x431eef <mi_find_page+0x1af>
               	nopl	(%rax)

<mi_page_fresh_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r13
               	movq	%rdi, %r12
               	movq	(%rdi), %r14
               	leaq	32(%r14), %rbx
               	leaq	160(%r14), %r9
               	cmpq	$16384, %rdx            # imm = 0x4000
               	movq	%rdx, 16(%rsp)
               	ja	0x4320b5 <mi_page_fresh_alloc+0x65>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	jne	0x432240 <mi_page_fresh_alloc+0x1f0>
               	xorl	%r15d, %r15d
               	movl	$16, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %r8
               	callq	0x4330e0 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x43224b <mi_page_fresh_alloc+0x1fb>
               	movq	(%rbx), %rdi
               	jmp	0x432240 <mi_page_fresh_alloc+0x1f0>
               	cmpq	$131072, %rdx           # imm = 0x20000
               	ja	0x4320f5 <mi_page_fresh_alloc+0xa5>
               	movq	48(%r14), %rdi
               	testq	%rdi, %rdi
               	jne	0x432240 <mi_page_fresh_alloc+0x1f0>
               	movl	$19, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$1, %edx
               	movq	%rbx, %r8
               	callq	0x4330e0 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x4321b5 <mi_page_fresh_alloc+0x165>
               	movq	48(%r14), %rdi
               	jmp	0x432240 <mi_page_fresh_alloc+0x1f0>
               	cmpq	$2097152, %rdx          # imm = 0x200000
               	ja	0x432127 <mi_page_fresh_alloc+0xd7>
               	movl	$22, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$2, %edx
               	movq	%rbx, %r8
               	callq	0x4330e0 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x4321b5 <mi_page_fresh_alloc+0x165>
               	movq	%rax, %rdi
               	jmp	0x432240 <mi_page_fresh_alloc+0x1f0>
               	xorl	%r15d, %r15d
               	movl	$22, %ecx
               	xorl	%edi, %edi
               	movq	%rdx, %rsi
               	movl	$3, %edx
               	movq	%rbx, %r8
               	callq	0x433710 <mi_segment_init>
               	testq	%rax, %rax
               	je	0x43224b <mi_page_fresh_alloc+0x1fb>
               	movq	%rax, %rdi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%rdi)
               	movq	72(%rdi), %r8
               	movq	144(%r14), %rdx
               	leaq	195803(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%cl
               	leaq	196366(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%cl, %al
               	testq	%r8, %r8
               	jle	0x4321bd <mi_page_fresh_alloc+0x16d>
               	testb	%al, %al
               	je	0x4321f7 <mi_page_fresh_alloc+0x1a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	cmpq	%rsi, %rax
               	jge	0x4321ad <mi_page_fresh_alloc+0x15d>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x4321a0 <mi_page_fresh_alloc+0x150>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x432212 <mi_page_fresh_alloc+0x1c2>
               	xorl	%r15d, %r15d
               	jmp	0x43224b <mi_page_fresh_alloc+0x1fb>
               	testb	%al, %al
               	je	0x4324d0 <mi_page_fresh_alloc+0x480>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rbp
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x4321ed <mi_page_fresh_alloc+0x19d>
               	lock
               	cmpxchgq	%rbp, 16(%rdx)
               	jne	0x4321e0 <mi_page_fresh_alloc+0x190>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x4324ea <mi_page_fresh_alloc+0x49a>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43220d <mi_page_fresh_alloc+0x1bd>
               	movq	%rax, 16(%rdx)
               	addq	$1, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	jbe	0x43222b <mi_page_fresh_alloc+0x1db>
               	movq	%rax, 96(%r14)
               	movq	104(%r14), %rax
               	subq	%r8, %rax
               	movq	%rax, 104(%r14)
               	cmpq	112(%r14), %rax
               	jbe	0x432240 <mi_page_fresh_alloc+0x1f0>
               	movq	%rax, 112(%r14)
               	movq	%rbx, %rsi
               	callq	0x4334a0 <mi_segment_find_free>
               	movq	%rax, %r15
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x432372 <mi_page_fresh_alloc+0x322>
               	movq	%r12, 8(%rsp)
               	leaq	24(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137f0 <clock_gettime@plt>
               	movq	72(%r14), %r12
               	testq	%r12, %r12
               	je	0x432355 <mi_page_fresh_alloc+0x305>
               	movq	24(%rsp), %rcx
               	movq	32(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x4322c9 <mi_page_fresh_alloc+0x279>
               	nopl	(%rax)
               	movl	$0, 16(%rbp)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 48(%rbp)
               	testq	%r12, %r12
               	je	0x432355 <mi_page_fresh_alloc+0x305>
               	movq	%r12, %rbp
               	cmpl	%ebx, 16(%r12)
               	jg	0x432361 <mi_page_fresh_alloc+0x311>
               	movq	56(%rbp), %r12
               	movl	$10, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4322b0 <mi_page_fresh_alloc+0x260>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x4322b0 <mi_page_fresh_alloc+0x260>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x4322b0 <mi_page_fresh_alloc+0x260>
               	cmpl	$3, 112(%rdx)
               	jne	0x432314 <mi_page_fresh_alloc+0x2c4>
               	movq	72(%rdx), %rsi
               	jmp	0x432320 <mi_page_fresh_alloc+0x2d0>
               	movzbl	96(%rdx), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%rdx, %rdi
               	testq	%rcx, %rcx
               	jne	0x43233d <mi_page_fresh_alloc+0x2ed>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x4322b0 <mi_page_fresh_alloc+0x260>
               	callq	0x42df90 <_mi_os_reset>
               	jmp	0x4322b0 <mi_page_fresh_alloc+0x260>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 64(%r14)
               	jmp	0x43236d <mi_page_fresh_alloc+0x31d>
               	movq	%rbp, 72(%r14)
               	movq	$0, 48(%rbp)
               	movq	8(%rsp), %r12
               	testq	%r15, %r15
               	je	0x432807 <mi_page_fresh_alloc+0x7b7>
               	movq	%r15, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	movq	%r12, 40(%r15)
               	movl	112(%rdi), %edx
               	cmpl	$3, %edx
               	jne	0x4323a5 <mi_page_fresh_alloc+0x355>
               	movq	72(%rdi), %rax
               	movq	16(%rsp), %rbx
               	movzbl	(%r15), %r9d
               	testq	%r9, %r9
               	jne	0x432408 <mi_page_fresh_alloc+0x3b8>
               	jmp	0x4323be <mi_page_fresh_alloc+0x36e>
               	movb	96(%rdi), %cl
               	movl	$1, %eax
               	shlq	%cl, %rax
               	movq	16(%rsp), %rbx
               	movzbl	(%r15), %r9d
               	testq	%r9, %r9
               	jne	0x432408 <mi_page_fresh_alloc+0x3b8>
               	movq	80(%rdi), %rsi
               	movq	%rax, %rcx
               	subq	%rsi, %rcx
               	cmpl	$1, %edx
               	ja	0x432405 <mi_page_fresh_alloc+0x3b5>
               	testq	%rbx, %rbx
               	je	0x432405 <mi_page_fresh_alloc+0x3b5>
               	imulq	%r9, %rax
               	addq	%rdi, %rax
               	addq	%rsi, %rax
               	movq	%rax, %rdx
               	orq	%rbx, %rdx
               	shrq	$32, %rdx
               	je	0x4323ef <mi_page_fresh_alloc+0x39f>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x4323f3 <mi_page_fresh_alloc+0x3a3>
               	xorl	%edx, %edx
               	divl	%ebx
               	movq	%rbx, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbx, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	cmpq	$67108864, %rbx         # imm = 0x4000000
               	movl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbx, %rbp
               	movl	%ebp, 20(%r15)
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x432432 <mi_page_fresh_alloc+0x3e2>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rax, %r8
               	jmp	0x432439 <mi_page_fresh_alloc+0x3e9>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%eax, %r8d
               	movw	%r8w, 4(%r15)
               	movb	1(%r15), %al
               	movb	7(%r15), %cl
               	shrb	$3, %al
               	andb	$1, %al
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 7(%r15)
               	cmpq	$0, 8(%r15)
               	jne	0x432572 <mi_page_fresh_alloc+0x522>
               	movzwl	2(%r15), %r10d
               	cmpw	%r8w, %r10w
               	jae	0x432572 <mi_page_fresh_alloc+0x522>
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x432487 <mi_page_fresh_alloc+0x437>
               	movq	72(%rdi), %rsi
               	testb	%r9b, %r9b
               	je	0x432497 <mi_page_fresh_alloc+0x447>
               	movq	%r12, %rbx
               	jmp	0x432521 <mi_page_fresh_alloc+0x4d1>
               	movb	96(%rdi), %cl
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	testb	%r9b, %r9b
               	jne	0x43247f <mi_page_fresh_alloc+0x42f>
               	movq	80(%rdi), %rdx
               	movq	%rsi, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x4324cb <mi_page_fresh_alloc+0x47b>
               	testq	%rbp, %rbp
               	je	0x4324cb <mi_page_fresh_alloc+0x47b>
               	imulq	%r9, %rsi
               	addq	%rsi, %rdi
               	addq	%rdx, %rdi
               	movq	%rdi, %rax
               	movq	%r12, %rbx
               	shrq	$32, %rax
               	je	0x432506 <mi_page_fresh_alloc+0x4b6>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x43250c <mi_page_fresh_alloc+0x4bc>
               	movq	%r12, %rbx
               	jmp	0x43251e <mi_page_fresh_alloc+0x4ce>
               	movq	24(%rdx), %rcx
               	leaq	1(%rcx), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rcx
               	jl	0x4324e6 <mi_page_fresh_alloc+0x496>
               	movq	%rax, 16(%rdx)
               	addq	$1, (%rdx)
               	movl	$1, %eax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	ja	0x432227 <mi_page_fresh_alloc+0x1d7>
               	jmp	0x43222b <mi_page_fresh_alloc+0x1db>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	cmpl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbp, %rsi
               	movzwl	%r8w, %r12d
               	subq	%r10, %r12
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x43254c <mi_page_fresh_alloc+0x4fc>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %r12
               	cmovaq	%rax, %r12
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	callq	0x433010 <mi_page_free_list_extend>
               	addw	%r12w, 2(%r15)
               	testb	$8, 1(%r15)
               	movq	%rbx, %r12
               	jne	0x432572 <mi_page_fresh_alloc+0x522>
               	andb	$-2, 7(%r15)
               	movq	(%r12), %rdx
               	leaq	208(%rdx), %rcx
               	leaq	194748(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x4325cf <mi_page_fresh_alloc+0x57f>
               	leaq	195312(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x4325cf <mi_page_fresh_alloc+0x57f>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 232(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	224(%rdx), %rax
               	nop
               	cmpq	%rsi, %rax
               	jg	0x4325c0 <mi_page_fresh_alloc+0x570>
               	lock
               	cmpxchgq	%rdi, 224(%rdx)
               	jne	0x4325b0 <mi_page_fresh_alloc+0x560>
               	lock
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	jne	0x4325fe <mi_page_fresh_alloc+0x5ae>
               	jmp	0x432807 <mi_page_fresh_alloc+0x7b7>
               	movq	232(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 232(%rdx)
               	cmpq	224(%rdx), %rsi
               	jl	0x4325f1 <mi_page_fresh_alloc+0x5a1>
               	movq	%rax, 224(%rdx)
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	je	0x432807 <mi_page_fresh_alloc+0x7b7>
               	cmpq	$2097168, 16(%r13)      # imm = 0x200010
               	sete	%al
               	movb	6(%r15), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%r15)
               	movq	(%r13), %rax
               	movq	%rax, 48(%r15)
               	movq	$0, 56(%r15)
               	leaq	56(%rax), %rcx
               	leaq	8(%r13), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, (%r13)
               	movq	16(%r13), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x4327fe <mi_page_fresh_alloc+0x7ae>
               	leaq	7(%rcx), %rax
               	shrq	$3, %rax
               	cmpq	%r15, 8(%r12,%rax,8)
               	je	0x4327fe <mi_page_fresh_alloc+0x7ae>
               	cmpq	$9, %rcx
               	jae	0x43266d <mi_page_fresh_alloc+0x61d>
               	xorl	%ecx, %ecx
               	jmp	0x432721 <mi_page_fresh_alloc+0x6d1>
               	cmpq	$64, %rcx
               	ja	0x43267b <mi_page_fresh_alloc+0x62b>
               	leal	1(%rax), %edx
               	andb	$-2, %dl
               	jmp	0x432694 <mi_page_fresh_alloc+0x644>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %edx
               	addb	$-3, %dl
               	leaq	1040(%r12), %rsi
               	addq	$-24, %r13
               	movq	16(%r13), %rdi
               	addq	$7, %rdi
               	movq	%rdi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rdi
               	jb	0x432700 <mi_page_fresh_alloc+0x6b0>
               	cmpq	$71, %rdi
               	ja	0x4326d0 <mi_page_fresh_alloc+0x680>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432700 <mi_page_fresh_alloc+0x6b0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdi          # imm = 0x200007
               	ja	0x432700 <mi_page_fresh_alloc+0x6b0>
               	leaq	-1(%rbp), %rdi
               	bsrq	%rdi, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdi
               	andl	$3, %edi
               	leal	(%rdi,%rbx,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %r13
               	jbe	0x43270d <mi_page_fresh_alloc+0x6bd>
               	addq	$-24, %r13
               	cmpb	%cl, %dl
               	je	0x4326a0 <mi_page_fresh_alloc+0x650>
               	leaq	1(%rbp), %rcx
               	cmpq	%rax, %rbp
               	cmovaeq	%rax, %rcx
               	cmpq	%rax, %rcx
               	ja	0x4327fe <mi_page_fresh_alloc+0x7ae>
               	addq	$1, %rax
               	movq	%rax, %rdx
               	subq	%rcx, %rdx
               	cmpq	$4, %rdx
               	jb	0x4327f0 <mi_page_fresh_alloc+0x7a0>
               	movq	%rdx, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x432764 <mi_page_fresh_alloc+0x714>
               	xorl	%ebx, %ebx
               	jmp	0x4327b9 <mi_page_fresh_alloc+0x769>
               	leaq	(%r12,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rdi
               	jne	0x432780 <mi_page_fresh_alloc+0x730>
               	testq	%rbp, %rbp
               	je	0x4327e2 <mi_page_fresh_alloc+0x792>
               	addq	%rcx, %rbx
               	leaq	(%r12,%rbx,8), %rsi
               	addq	$24, %rsi
               	negq	%rbp
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rbp
               	jne	0x4327d0 <mi_page_fresh_alloc+0x780>
               	cmpq	%r8, %rdx
               	je	0x4327fe <mi_page_fresh_alloc+0x7ae>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %rax
               	jne	0x4327f0 <mi_page_fresh_alloc+0x7a0>
               	addq	$1, 3016(%r12)
               	movq	%r15, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<mi_page_queue_find_free_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r13
               	xorb	$1, %dl
               	leaq	-24(%rsi), %rax
               	movq	%rax, 8(%rsp)
               	leaq	1040(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movl	%edx, 4(%rsp)
               	movq	(%r14), %r12
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x432e40 <mi_page_queue_find_free_ex+0x620>
               	movq	%r12, %rbx
               	movq	48(%r12), %r12
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x4328d0 <mi_page_queue_find_free_ex+0xb0>
               	movq	32(%rbx), %rax
               	nop
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432880 <mi_page_queue_find_free_ex+0x60>
               	andq	$-4, %rcx
               	je	0x4328d0 <mi_page_queue_find_free_ex+0xb0>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x4328b2 <mi_page_queue_find_free_ex+0x92>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x4328a0 <mi_page_queue_find_free_ex+0x80>
               	cmpl	%edx, %eax
               	jbe	0x43299f <mi_page_queue_find_free_ex+0x17f>
               	movl	$14, %edi
               	leaq	73384(%rip), %rsi       # 0x44476e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4328f0 <mi_page_queue_find_free_ex+0xd0>
               	cmpq	$0, 8(%rbx)
               	jne	0x4328f0 <mi_page_queue_find_free_ex+0xd0>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	cmpq	$0, 8(%rbx)
               	jne	0x432fec <mi_page_queue_find_free_ex+0x7cc>
               	movzwl	2(%rbx), %edi
               	movzwl	4(%rbx), %ebp
               	cmpw	%bp, %di
               	jb	0x432f26 <mi_page_queue_find_free_ex+0x706>
               	testb	$1, 6(%rbx)
               	jne	0x432860 <mi_page_queue_find_free_ex+0x40>
               	movq	40(%rbx), %rdx
               	movq	40(%rbx), %r9
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43292f <mi_page_queue_find_free_ex+0x10f>
               	movq	48(%rbx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	48(%rbx), %r15
               	testq	%r15, %r15
               	je	0x43293c <mi_page_queue_find_free_ex+0x11c>
               	movq	%rax, 56(%r15)
               	cmpq	%rbx, 8(%r14)
               	je	0x43294d <mi_page_queue_find_free_ex+0x12d>
               	cmpq	%rbx, (%r14)
               	jne	0x432b60 <mi_page_queue_find_free_ex+0x340>
               	jmp	0x43295e <mi_page_queue_find_free_ex+0x13e>
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r14)
               	cmpq	%rbx, (%r14)
               	jne	0x432b60 <mi_page_queue_find_free_ex+0x340>
               	movq	%r15, (%r14)
               	movq	16(%r14), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x432b60 <mi_page_queue_find_free_ex+0x340>
               	testq	%r15, %r15
               	leaq	76421(%rip), %rcx       # 0x445400 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r10
               	shrq	$3, %r10
               	cmpq	%r15, 8(%r9,%r10,8)
               	je	0x432b60 <mi_page_queue_find_free_ex+0x340>
               	cmpq	$9, %rax
               	jae	0x4329bf <mi_page_queue_find_free_ex+0x19f>
               	xorl	%ecx, %ecx
               	jmp	0x432a82 <mi_page_queue_find_free_ex+0x262>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x4328d9 <mi_page_queue_find_free_ex+0xb9>
               	jmp	0x4328f0 <mi_page_queue_find_free_ex+0xd0>
               	cmpq	$64, %rax
               	ja	0x4329cf <mi_page_queue_find_free_ex+0x1af>
               	leal	1(%r10), %r8d
               	andb	$-2, %r8b
               	jmp	0x4329ea <mi_page_queue_find_free_ex+0x1ca>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r9), %rax
               	movq	8(%rsp), %rdi
               	nopw	%cs:(%rax,%rax)
               	movq	16(%rdi), %rsi
               	addq	$7, %rsi
               	movq	%rsi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rsi
               	jb	0x432a60 <mi_page_queue_find_free_ex+0x240>
               	cmpq	$71, %rsi
               	ja	0x432a30 <mi_page_queue_find_free_ex+0x210>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432a60 <mi_page_queue_find_free_ex+0x240>
               	movb	$73, %cl
               	cmpq	$2097159, %rsi          # imm = 0x200007
               	ja	0x432a60 <mi_page_queue_find_free_ex+0x240>
               	leaq	-1(%rbp), %rsi
               	bsrq	%rsi, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rdi
               	jbe	0x432a6e <mi_page_queue_find_free_ex+0x24e>
               	addq	$-24, %rdi
               	cmpb	%cl, %r8b
               	je	0x432a00 <mi_page_queue_find_free_ex+0x1e0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r10, %rbp
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x432b60 <mi_page_queue_find_free_ex+0x340>
               	addq	$1, %r10
               	movq	%r10, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432b50 <mi_page_queue_find_free_ex+0x330>
               	movq	%r11, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x432ac5 <mi_page_queue_find_free_ex+0x2a5>
               	xorl	%ebp, %ebp
               	jmp	0x432b19 <mi_page_queue_find_free_ex+0x2f9>
               	leaq	(%r9,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbp,8)
               	movdqu	%xmm0, -96(%rsi,%rbp,8)
               	movdqu	%xmm0, -80(%rsi,%rbp,8)
               	movdqu	%xmm0, -64(%rsi,%rbp,8)
               	movdqu	%xmm0, -48(%rsi,%rbp,8)
               	movdqu	%xmm0, -32(%rsi,%rbp,8)
               	movdqu	%xmm0, -16(%rsi,%rbp,8)
               	movdqu	%xmm0, (%rsi,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdi
               	jne	0x432ae0 <mi_page_queue_find_free_ex+0x2c0>
               	testq	%rax, %rax
               	je	0x432b42 <mi_page_queue_find_free_ex+0x322>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rsi
               	addq	$24, %rsi
               	negq	%rax
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rax
               	jne	0x432b30 <mi_page_queue_find_free_ex+0x310>
               	cmpq	%r8, %r11
               	je	0x432b60 <mi_page_queue_find_free_ex+0x340>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x432b50 <mi_page_queue_find_free_ex+0x330>
               	nop
               	movq	2824(%rdx), %rax
               	movq	%rax, 56(%rbx)
               	movq	$0, 48(%rbx)
               	testq	%rax, %rax
               	je	0x432b8f <mi_page_queue_find_free_ex+0x36f>
               	movq	%rbx, 48(%rax)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	jmp	0x432d70 <mi_page_queue_find_free_ex+0x550>
               	movq	%rbx, 2816(%rdx)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x432d70 <mi_page_queue_find_free_ex+0x550>
               	leaq	7(%r8), %r15
               	shrq	$3, %r15
               	cmpq	%rbx, 8(%r9,%r15,8)
               	je	0x432d70 <mi_page_queue_find_free_ex+0x550>
               	cmpq	$9, %r8
               	jae	0x432bd1 <mi_page_queue_find_free_ex+0x3b1>
               	xorl	%ecx, %ecx
               	jmp	0x432c92 <mi_page_queue_find_free_ex+0x472>
               	cmpq	$64, %r8
               	ja	0x432be1 <mi_page_queue_find_free_ex+0x3c1>
               	leal	1(%r15), %ebp
               	andb	$-2, %bpl
               	jmp	0x432bfb <mi_page_queue_find_free_ex+0x3db>
               	leaq	-1(%r15), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %ebp
               	addb	$-3, %bpl
               	leaq	1040(%r9), %rsi
               	addq	$2792, %rdx             # imm = 0xAE8
               	nopl	(%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x432c70 <mi_page_queue_find_free_ex+0x450>
               	cmpq	$71, %rax
               	ja	0x432c40 <mi_page_queue_find_free_ex+0x420>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x432c70 <mi_page_queue_find_free_ex+0x450>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x432c70 <mi_page_queue_find_free_ex+0x450>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r10
               	movl	%r10d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r10,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x432c7e <mi_page_queue_find_free_ex+0x45e>
               	addq	$-24, %rdx
               	cmpb	%cl, %bpl
               	je	0x432c10 <mi_page_queue_find_free_ex+0x3f0>
               	leaq	1(%rdi), %rcx
               	cmpq	%r15, %rdi
               	cmovaeq	%r15, %rcx
               	cmpq	%r15, %rcx
               	ja	0x432d70 <mi_page_queue_find_free_ex+0x550>
               	addq	$1, %r15
               	movq	%r15, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432d60 <mi_page_queue_find_free_ex+0x540>
               	movq	%r11, %r10
               	andq	$-4, %r10
               	movq	%rbx, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r10), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rdx
               	jae	0x432cd5 <mi_page_queue_find_free_ex+0x4b5>
               	xorl	%ebp, %ebp
               	jmp	0x432d29 <mi_page_queue_find_free_ex+0x509>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rbp,8)
               	movdqu	%xmm0, -96(%rdx,%rbp,8)
               	movdqu	%xmm0, -80(%rdx,%rbp,8)
               	movdqu	%xmm0, -64(%rdx,%rbp,8)
               	movdqu	%xmm0, -48(%rdx,%rbp,8)
               	movdqu	%xmm0, -32(%rdx,%rbp,8)
               	movdqu	%xmm0, -16(%rdx,%rbp,8)
               	movdqu	%xmm0, (%rdx,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rsi
               	jne	0x432cf0 <mi_page_queue_find_free_ex+0x4d0>
               	testq	%rax, %rax
               	je	0x432d52 <mi_page_queue_find_free_ex+0x532>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x432d40 <mi_page_queue_find_free_ex+0x520>
               	cmpq	%r10, %r11
               	je	0x432d70 <mi_page_queue_find_free_ex+0x550>
               	addq	%r10, %rcx
               	nop
               	movq	%rbx, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r15
               	jne	0x432d60 <mi_page_queue_find_free_ex+0x540>
               	nop
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rbx), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rbx)
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432df0 <mi_page_queue_find_free_ex+0x5d0>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432da0 <mi_page_queue_find_free_ex+0x580>
               	andq	$-4, %rcx
               	je	0x432df0 <mi_page_queue_find_free_ex+0x5d0>
               	movzwl	2(%rbx), %esi
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rdx
               	addl	$1, %eax
               	cmpl	%esi, %eax
               	ja	0x432dd2 <mi_page_queue_find_free_ex+0x5b2>
               	movq	(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x432dc0 <mi_page_queue_find_free_ex+0x5a0>
               	cmpl	%esi, %eax
               	jbe	0x432e1d <mi_page_queue_find_free_ex+0x5fd>
               	movl	$14, %edi
               	leaq	72072(%rip), %rsi       # 0x44476e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42c040 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rcx
               	testq	%rcx, %rcx
               	je	0x432860 <mi_page_queue_find_free_ex+0x40>
               	cmpq	$0, 8(%rbx)
               	jne	0x432860 <mi_page_queue_find_free_ex+0x40>
               	movq	%rcx, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	jmp	0x432860 <mi_page_queue_find_free_ex+0x40>
               	movq	24(%rbx), %rsi
               	movq	%rsi, (%rdx)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	testq	%rcx, %rcx
               	jne	0x432dfd <mi_page_queue_find_free_ex+0x5dd>
               	jmp	0x432860 <mi_page_queue_find_free_ex+0x40>
               	nopl	(%rax)
               	movq	3024(%r13), %rbp
               	cmpq	3032(%r13), %rbp
               	jbe	0x432ea0 <mi_page_queue_find_free_ex+0x680>
               	movl	$74, %r12d
               	xorl	%r15d, %r15d
               	movq	%r12, 3024(%r13)
               	movq	%r15, 3032(%r13)
               	movq	16(%r14), %rdx
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x432050 <mi_page_fresh_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	setne	%al
               	orb	4(%rsp), %al
               	movb	$1, %dl
               	testb	$1, %al
               	je	0x43284c <mi_page_queue_find_free_ex+0x2c>
               	jmp	0x432ff0 <mi_page_queue_find_free_ex+0x7d0>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	movq	16(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %rbx
               	movl	$74, %r12d
               	xorl	%r15d, %r15d
               	jmp	0x432ee5 <mi_page_queue_find_free_ex+0x6c5>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r13), %rbp
               	ja	0x432e59 <mi_page_queue_find_free_ex+0x639>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432ed0 <mi_page_queue_find_free_ex+0x6b0>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x432ed0 <mi_page_queue_find_free_ex+0x6b0>
               	cmpl	$0, 16(%rax)
               	jne	0x432ebf <mi_page_queue_find_free_ex+0x69f>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	cmpb	$1, %cl
               	ja	0x432f16 <mi_page_queue_find_free_ex+0x6f6>
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	callq	0x42d300 <_mi_page_free>
               	jmp	0x432ed0 <mi_page_queue_find_free_ex+0x6b0>
               	cmpq	%r12, %rbp
               	cmovbq	%rbp, %r12
               	cmpq	%r15, %rbp
               	cmovaq	%rbp, %r15
               	jmp	0x432ed0 <mi_page_queue_find_free_ex+0x6b0>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rbx), %r8d
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x432f49 <mi_page_queue_find_free_ex+0x729>
               	movq	72(%rax), %rsi
               	movzbl	(%rbx), %ecx
               	testq	%rcx, %rcx
               	jne	0x432fa4 <mi_page_queue_find_free_ex+0x784>
               	jmp	0x432f5c <mi_page_queue_find_free_ex+0x73c>
               	movb	96(%rax), %cl
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	testq	%rcx, %rcx
               	jne	0x432fa4 <mi_page_queue_find_free_ex+0x784>
               	movq	80(%rax), %r10
               	movq	%rsi, %r9
               	subq	%r10, %r9
               	cmpl	$1, %edx
               	ja	0x432fa1 <mi_page_queue_find_free_ex+0x781>
               	testl	%r8d, %r8d
               	je	0x432fa1 <mi_page_queue_find_free_ex+0x781>
               	imulq	%rcx, %rsi
               	addq	%rsi, %rax
               	addq	%r10, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x432f8a <mi_page_queue_find_free_ex+0x76a>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x432f8f <mi_page_queue_find_free_ex+0x76f>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %rsi
               	cmpl	$67108864, %r8d         # imm = 0x4000000
               	cmovbq	%r8, %rsi
               	subq	%rdi, %rbp
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x432fcc <mi_page_queue_find_free_ex+0x7ac>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %rbp
               	cmovaq	%rax, %rbp
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x433010 <mi_page_free_list_extend>
               	addw	%bp, 2(%rbx)
               	testb	$8, 1(%rbx)
               	jne	0x432fec <mi_page_queue_find_free_ex+0x7cc>
               	andb	$-2, 7(%rbx)
               	andb	$1, 7(%rbx)
               	movq	%rbx, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_free_list_extend>:
               	movq	%rdx, %r9
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rdi), %r10d
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x43302e <mi_page_free_list_extend+0x1e>
               	movq	72(%rax), %r8
               	jmp	0x43303a <mi_page_free_list_extend+0x2a>
               	movb	96(%rax), %cl
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	movzbl	(%rdi), %ecx
               	imulq	%rcx, %r8
               	addq	%rax, %r8
               	testq	%rcx, %rcx
               	jne	0x433083 <mi_page_free_list_extend+0x73>
               	addq	80(%rax), %r8
               	cmpl	$1, %edx
               	ja	0x433083 <mi_page_free_list_extend+0x73>
               	testl	%r10d, %r10d
               	je	0x433083 <mi_page_free_list_extend+0x73>
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x43306a <mi_page_free_list_extend+0x5a>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	jmp	0x433072 <mi_page_free_list_extend+0x62>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movq	%r10, %rax
               	subq	%rdx, %rax
               	leaq	(%r8,%rax), %rcx
               	cmpq	%r10, %rax
               	cmovbq	%rcx, %r8
               	movzwl	2(%rdi), %r11d
               	movq	%r11, %rdx
               	imulq	%rsi, %rdx
               	leaq	(%r8,%rdx), %r10
               	leaq	(%r9,%r11), %rax
               	addq	$-1, %rax
               	imulq	%rsi, %rax
               	leaq	(%r8,%rax), %rcx
               	cmpq	%rax, %rdx
               	jg	0x4330ce <mi_page_free_list_extend+0xbe>
               	addq	$1, %r11
               	imulq	%rsi, %r11
               	addq	%r11, %r8
               	movq	%r10, %rdx
               	nopw	(%rax,%rax)
               	movq	%r8, (%rdx)
               	addq	%rsi, %rdx
               	addq	%rsi, %r8
               	cmpq	%rcx, %rdx
               	jbe	0x4330c0 <mi_page_free_list_extend+0xb0>
               	movq	8(%rdi), %rax
               	movq	%rax, (%rcx)
               	movq	%r10, 8(%rdi)
               	retq
               	nopw	(%rax,%rax)

<mi_segment_reclaim_or_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%r8, %r14
               	movq	%rcx, %r12
               	movl	%edx, %r13d
               	movq	104(%r8), %rbp
               	testq	%rbp, %rbp
               	je	0x43317e <mi_segment_reclaim_or_alloc+0x9e>
               	addq	$-1, 88(%r14)
               	movq	24(%rbp), %rax
               	movq	%rax, 104(%r14)
               	movq	$0, 24(%rbp)
               	movq	112(%r14), %rcx
               	leaq	416(%rcx), %rax
               	leaq	191765(%rip), %rdx      # 0x461e40 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x433405 <mi_segment_reclaim_or_alloc+0x325>
               	leaq	192325(%rip), %rdx      # 0x462080 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x433405 <mi_segment_reclaim_or_alloc+0x325>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x433170 <mi_segment_reclaim_or_alloc+0x90>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x433160 <mi_segment_reclaim_or_alloc+0x80>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x43342f <mi_segment_reclaim_or_alloc+0x34f>
               	movq	%rdi, %r15
               	movb	$0, 3(%rsp)
               	movl	$7, %eax
               	xorl	%ebp, %ebp
               	movl	%r13d, 4(%rsp)
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, 8(%rsp)
               	movl	%eax, 20(%rsp)
               	movq	291417(%rip), %rax      # 0x47a400 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x43326c <mi_segment_reclaim_or_alloc+0x18c>
               	movq	291526(%rip), %rax      # 0x47a480 <abandoned_visited>
               	testq	%rax, %rax
               	je	0x4333fa <mi_segment_reclaim_or_alloc+0x31a>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 291508(%rip)      # 0x47a480 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x4333fa <mi_segment_reclaim_or_alloc+0x31a>
               	movq	291364(%rip), %rax      # 0x47a400 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x433202 <mi_segment_reclaim_or_alloc+0x122>
               	movq	291541(%rip), %rdx      # 0x47a4c0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 291328(%rip)      # 0x47a400 <abandoned>
               	je	0x43325c <mi_segment_reclaim_or_alloc+0x17c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rbx
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x433210 <mi_segment_reclaim_or_alloc+0x130>
               	movq	291289(%rip), %rax      # 0x47a400 <abandoned>
               	nopw	(%rax,%rax)
               	movq	291465(%rip), %rdx      # 0x47a4c0 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rbx)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 291238(%rip)      # 0x47a400 <abandoned>
               	jne	0x433230 <mi_segment_reclaim_or_alloc+0x150>
               	lock
               	addq	%rdx, 291292(%rip)      # 0x47a440 <abandoned_count>
               	lock
               	subq	%rdx, 291412(%rip)      # 0x47a4c0 <abandoned_visited_count>
               	lock
               	addq	$1, 291147(%rip)        # 0x47a3c0 <abandoned_readers>
               	movq	291204(%rip), %rax      # 0x47a400 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	je	0x4333ea <mi_segment_reclaim_or_alloc+0x30a>
               	movq	16(%r15), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 291159(%rip)      # 0x47a400 <abandoned>
               	jne	0x433280 <mi_segment_reclaim_or_alloc+0x1a0>
               	lock
               	subq	$1, 291084(%rip)        # 0x47a3c0 <abandoned_readers>
               	movq	$0, 16(%r15)
               	lock
               	subq	$1, 291195(%rip)        # 0x47a440 <abandoned_count>
               	addq	$1, 48(%r15)
               	cmpq	$0, 64(%r15)
               	je	0x43335a <mi_segment_reclaim_or_alloc+0x27a>
               	movq	%r12, 32(%rsp)
               	movq	%r14, 40(%rsp)
               	movq	%r9, 48(%rsp)
               	leaq	120(%r15), %r14
               	xorl	%ebp, %ebp
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	xorl	%ebx, %ebx
               	jmp	0x433309 <mi_segment_reclaim_or_alloc+0x229>
               	addq	$1, %r12
               	movb	$1, %bpl
               	addq	$1, %r13
               	addq	$64, %r14
               	cmpq	64(%r15), %r13
               	jae	0x433346 <mi_segment_reclaim_or_alloc+0x266>
               	testb	$1, 1(%r14)
               	je	0x4332f8 <mi_segment_reclaim_or_alloc+0x218>
               	addq	$1, %rbx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d230 <_mi_page_free_collect>
               	movl	16(%r14), %eax
               	testl	%eax, %eax
               	je	0x4332f4 <mi_segment_reclaim_or_alloc+0x214>
               	movl	20(%r14), %ecx
               	cmpq	24(%rsp), %rcx
               	jne	0x4332fb <mi_segment_reclaim_or_alloc+0x21b>
               	movzwl	4(%r14), %ecx
               	cmpl	%ecx, %eax
               	jb	0x4332f8 <mi_segment_reclaim_or_alloc+0x218>
               	movq	32(%r14), %rax
               	cmpq	$4, %rax
               	jae	0x4332f8 <mi_segment_reclaim_or_alloc+0x218>
               	jmp	0x4332fb <mi_segment_reclaim_or_alloc+0x21b>
               	cmpq	%r12, %rbx
               	movq	48(%rsp), %r9
               	movq	40(%rsp), %r14
               	movq	32(%rsp), %r12
               	jne	0x43338d <mi_segment_reclaim_or_alloc+0x2ad>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%r14, %r8
               	movq	%r9, %rbx
               	callq	0x42fb90 <mi_segment_reclaim>
               	movq	%rbx, %r9
               	movl	4(%rsp), %r13d
               	movl	20(%rsp), %eax
               	subl	$1, %eax
               	movl	$0, %ebp
               	jae	0x43319c <mi_segment_reclaim_or_alloc+0xbc>
               	jmp	0x4333fa <mi_segment_reclaim_or_alloc+0x31a>
               	testb	$1, %bpl
               	movl	4(%rsp), %r13d
               	je	0x4333a2 <mi_segment_reclaim_or_alloc+0x2c2>
               	cmpl	%r13d, 112(%r15)
               	je	0x433454 <mi_segment_reclaim_or_alloc+0x374>
               	cmpq	$3, 48(%r15)
               	jb	0x4333c5 <mi_segment_reclaim_or_alloc+0x2e5>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%r14, %r8
               	movq	%r9, %rbx
               	callq	0x42fb90 <mi_segment_reclaim>
               	movq	%rbx, %r9
               	jmp	0x433379 <mi_segment_reclaim_or_alloc+0x299>
               	movq	290996(%rip), %rax      # 0x47a480 <abandoned_visited>
               	nopl	(%rax)
               	movq	%rax, 16(%r15)
               	lock
               	cmpxchgq	%r15, 290979(%rip)      # 0x47a480 <abandoned_visited>
               	jne	0x4333d0 <mi_segment_reclaim_or_alloc+0x2f0>
               	lock
               	addq	$1, 291032(%rip)        # 0x47a4c0 <abandoned_visited_count>
               	jmp	0x433379 <mi_segment_reclaim_or_alloc+0x299>
               	lock
               	subq	$1, 290765(%rip)        # 0x47a3c0 <abandoned_readers>
               	xorl	%ebp, %ebp
               	movl	4(%rsp), %r13d
               	cmpb	$0, 3(%rsp)
               	je	0x43347e <mi_segment_reclaim_or_alloc+0x39e>
               	xorl	%ebp, %ebp
               	jmp	0x433442 <mi_segment_reclaim_or_alloc+0x362>
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x433427 <mi_segment_reclaim_or_alloc+0x347>
               	movq	%rax, 432(%rcx)
               	addq	$1, 424(%rcx)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%r14, %r8
               	callq	0x433710 <mi_segment_init>
               	movq	%rbp, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	3(%rsp), %rcx
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	movq	24(%rsp), %rdx
               	movq	%r14, %r8
               	movq	%r9, %rbx
               	callq	0x42fb90 <mi_segment_reclaim>
               	movq	%rbx, %r9
               	movq	%rax, %rbp
               	cmpb	$0, 3(%rsp)
               	jne	0x433401 <mi_segment_reclaim_or_alloc+0x321>
               	testq	%rbp, %rbp
               	jne	0x433442 <mi_segment_reclaim_or_alloc+0x362>
               	xorl	%edi, %edi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%r14, %r8
               	callq	0x433710 <mi_segment_init>
               	movq	%rax, %rbp
               	jmp	0x433442 <mi_segment_reclaim_or_alloc+0x362>
               	nopw	(%rax,%rax)

<mi_segment_find_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 64(%rdi)
               	je	0x433684 <mi_segment_find_free+0x1e4>
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	120(%rdi), %rbx
               	leaq	6(%rsp), %r12
               	leaq	7(%rsp), %r13
               	xorl	%ebp, %ebp
               	jmp	0x4334ff <mi_segment_find_free+0x5f>
               	nop
               	movzbl	1(%rbx), %ecx
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	testb	%al, %al
               	jne	0x433688 <mi_segment_find_free+0x1e8>
               	andb	$-2, %cl
               	movb	%cl, 1(%rbx)
               	addq	$-1, 56(%r15)
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	64(%r15), %rbp
               	jae	0x433684 <mi_segment_find_free+0x1e4>
               	movzbl	1(%rbx), %ecx
               	testb	$1, %cl
               	jne	0x4334ed <mi_segment_find_free+0x4d>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rdx
               	testq	%rax, %rax
               	je	0x43351c <mi_segment_find_free+0x7c>
               	testq	%rdx, %rdx
               	jne	0x433525 <mi_segment_find_free+0x85>
               	jmp	0x433532 <mi_segment_find_free+0x92>
               	testq	%rdx, %rdx
               	je	0x43366b <mi_segment_find_free+0x1cb>
               	movq	%rax, 48(%rdx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x433536 <mi_segment_find_free+0x96>
               	movq	%rdx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x433566 <mi_segment_find_free+0xc6>
               	cmpq	32(%r14), %rbx
               	je	0x433574 <mi_segment_find_free+0xd4>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movzbl	1(%rbx), %ecx
               	testb	$4, %cl
               	jne	0x4335d6 <mi_segment_find_free+0x136>
               	cmpl	$3, 112(%r15)
               	jne	0x43357a <mi_segment_find_free+0xda>
               	movq	72(%r15), %rsi
               	jmp	0x433587 <mi_segment_find_free+0xe7>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x433542 <mi_segment_find_free+0xa2>
               	movq	%rax, 32(%r14)
               	jmp	0x433542 <mi_segment_find_free+0xa2>
               	movzbl	96(%r15), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movq	%rsi, %rdi
               	imulq	%rax, %rdi
               	addq	%r15, %rdi
               	testq	%rax, %rax
               	jne	0x4335a3 <mi_segment_find_free+0x103>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 6(%rsp)
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r12, %r8
               	callq	0x42da30 <mi_os_commitx>
               	testb	%al, %al
               	je	0x4334ed <mi_segment_find_free+0x4d>
               	cmpb	$0, 6(%rsp)
               	movzbl	1(%rbx), %ecx
               	je	0x4335d0 <mi_segment_find_free+0x130>
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	orb	$4, %cl
               	movb	%cl, 1(%rbx)
               	orb	$1, %cl
               	movb	%cl, 1(%rbx)
               	addq	$1, 56(%r15)
               	movzbl	1(%rbx), %eax
               	testb	$2, %al
               	je	0x433688 <mi_segment_find_free+0x1e8>
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433688 <mi_segment_find_free+0x1e8>
               	cmpb	$0, 8(%r15)
               	jne	0x433688 <mi_segment_find_free+0x1e8>
               	andb	$-3, %al
               	movb	%al, 1(%rbx)
               	cmpl	$3, 112(%r15)
               	jne	0x433618 <mi_segment_find_free+0x178>
               	movq	72(%r15), %rsi
               	jmp	0x433625 <mi_segment_find_free+0x185>
               	movzbl	96(%r15), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movq	%rsi, %rdi
               	imulq	%rax, %rdi
               	addq	%r15, %rdi
               	testq	%rax, %rax
               	jne	0x433641 <mi_segment_find_free+0x1a1>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 7(%rsp)
               	testq	%rsi, %rsi
               	je	0x433688 <mi_segment_find_free+0x1e8>
               	movq	%r13, %rdx
               	callq	0x4347a0 <_mi_os_unreset>
               	cmpb	$0, 7(%rsp)
               	jne	0x4334d0 <mi_segment_find_free+0x30>
               	testb	%al, %al
               	jne	0x433688 <mi_segment_find_free+0x1e8>
               	movzbl	1(%rbx), %ecx
               	jmp	0x4334e2 <mi_segment_find_free+0x42>
               	cmpq	32(%r14), %rbx
               	je	0x433536 <mi_segment_find_free+0x96>
               	cmpq	40(%r14), %rbx
               	jne	0x433554 <mi_segment_find_free+0xb4>
               	jmp	0x433536 <mi_segment_find_free+0x96>
               	xorl	%ebx, %ebx
               	jmp	0x4336f1 <mi_segment_find_free+0x251>
               	movq	56(%r15), %rax
               	cmpq	64(%r15), %rax
               	jne	0x4336f1 <mi_segment_find_free+0x251>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4336f1 <mi_segment_find_free+0x251>
               	testl	%eax, %eax
               	je	0x4336a8 <mi_segment_find_free+0x208>
               	cmpl	$1, %eax
               	jne	0x4336f1 <mi_segment_find_free+0x251>
               	addq	$16, %r14
               	leaq	24(%r15), %rax
               	movq	24(%r15), %rcx
               	movq	32(%r15), %rdx
               	testq	%rcx, %rcx
               	je	0x4336c0 <mi_segment_find_free+0x220>
               	testq	%rdx, %rdx
               	jne	0x4336c5 <mi_segment_find_free+0x225>
               	jmp	0x4336d1 <mi_segment_find_free+0x231>
               	testq	%rdx, %rdx
               	je	0x433703 <mi_segment_find_free+0x263>
               	movq	%rcx, 24(%rdx)
               	movq	(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4336d5 <mi_segment_find_free+0x235>
               	movq	%rdx, 32(%rcx)
               	cmpq	%r15, (%r14)
               	jne	0x4336dd <mi_segment_find_free+0x23d>
               	movq	%rcx, (%r14)
               	cmpq	%r15, 8(%r14)
               	jne	0x4336eb <mi_segment_find_free+0x24b>
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%r14)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpq	%r15, (%r14)
               	jne	0x4336f1 <mi_segment_find_free+0x251>
               	jmp	0x4336d5 <mi_segment_find_free+0x235>
               	nopw	(%rax,%rax)

<mi_segment_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%r9, 32(%rsp)
               	movq	%r8, %rbp
               	movl	%edx, %r12d
               	movq	%rdi, %r14
               	movl	$4194304, %eax          # imm = 0x400000
               	movl	$4194304, %edx          # imm = 0x400000
               	movq	%rcx, 112(%rsp)
               	shrq	%cl, %rdx
               	cmpl	$3, %r12d
               	movl	$1, %r15d
               	cmovneq	%rdx, %r15
               	movl	%r15d, %ecx
               	shll	$6, %ecx
               	addl	$391, %ecx              # imm = 0x187
               	andl	$1073741568, %ecx       # imm = 0x3FFFFF00
               	movq	%rcx, 64(%rsp)
               	leaq	(%rsi,%rcx), %rbx
               	addq	$262143, %rbx           # imm = 0x3FFFF
               	andq	$-262144, %rbx          # imm = 0xFFFC0000
               	testq	%rsi, %rsi
               	cmoveq	%rax, %rbx
               	cmpl	$1, %r12d
               	movq	%rbx, 72(%rsp)
               	ja	0x4337ad <mi_segment_init+0x9d>
               	movq	56(%rbp), %rbx
               	movl	$13, %edi
               	callq	0x42abe0 <mi_option_get>
               	xorl	%r11d, %r11d
               	movl	$0, %ecx
               	movl	$0, %r13d
               	cmpq	%rax, %rbx
               	movq	72(%rsp), %rbx
               	jb	0x4337c3 <mi_segment_init+0xb3>
               	movl	$3, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%r13b
               	movb	$1, %r11b
               	movb	$1, %cl
               	movb	%r13b, 9(%rsp)
               	movb	$0, 8(%rsp)
               	testq	%r14, %r14
               	je	0x4338f5 <mi_segment_init+0x1e5>
               	cmpl	$1, %r12d
               	ja	0x43381f <mi_segment_init+0x10f>
               	cmpl	%r12d, 112(%r14)
               	jne	0x43381f <mi_segment_init+0x10f>
               	cmpq	%rbx, 72(%r14)
               	jne	0x43381f <mi_segment_init+0x10f>
               	movq	$0, 16(%r14)
               	leaq	24(%r14), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%r14)
               	movups	%xmm0, 88(%r14)
               	movups	%xmm0, 72(%r14)
               	movups	%xmm0, 56(%r14)
               	movups	%xmm0, 40(%r14)
               	movups	%xmm0, 24(%r14)
               	movq	64(%rsp), %r13
               	jmp	0x433a06 <mi_segment_init+0x2f6>
               	movl	%r12d, 52(%rsp)
               	movq	%rbp, %r12
               	cmpq	$0, 64(%r14)
               	je	0x433938 <mi_segment_init+0x228>
               	leaq	121(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x433875 <mi_segment_init+0x165>
               	nopl	(%rax)
               	movl	$5, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x43387f <mi_segment_init+0x16f>
               	andb	$-3, (%rbx)
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbp
               	movq	64(%r14), %rax
               	addq	$64, %rbx
               	cmpq	%rax, %rbp
               	jae	0x43393a <mi_segment_init+0x22a>
               	testb	$2, (%rbx)
               	je	0x433860 <mi_segment_init+0x150>
               	testb	%r13b, %r13b
               	je	0x433840 <mi_segment_init+0x130>
               	cmpb	$0, 8(%r14)
               	jne	0x433860 <mi_segment_init+0x150>
               	movzbl	(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433860 <mi_segment_init+0x150>
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	cmpl	$3, 112(%r14)
               	jne	0x4338a4 <mi_segment_init+0x194>
               	movq	72(%r14), %rsi
               	jmp	0x4338b1 <mi_segment_init+0x1a1>
               	movzbl	96(%r14), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	-1(%rbx), %eax
               	movq	%rsi, %rdi
               	imulq	%rax, %rdi
               	addq	%r14, %rdi
               	testq	%rax, %rax
               	jne	0x4338ce <mi_segment_init+0x1be>
               	movq	80(%r14), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 16(%rsp)
               	testq	%rsi, %rsi
               	je	0x433860 <mi_segment_init+0x150>
               	leaq	16(%rsp), %rdx
               	callq	0x4347a0 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x433860 <mi_segment_init+0x150>
               	orb	$8, (%rbx)
               	jmp	0x433860 <mi_segment_init+0x150>
               	movb	%cl, 10(%rsp)
               	movb	$0, 8(%rsp)
               	movb	$0, 11(%rsp)
               	testq	%rbx, %rbx
               	je	0x43435b <mi_segment_init+0xc4b>
               	movq	%rbp, 104(%rsp)
               	movq	184136(%rip), %rcx      # 0x460860 <os_page_size>
               	leaq	-1(%rcx), %rax
               	leaq	(%rbx,%rcx), %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x433a5a <mi_segment_init+0x34a>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x433aa3 <mi_segment_init+0x393>
               	xorl	%eax, %eax
               	cmpq	%r15, %rax
               	jae	0x433978 <mi_segment_init+0x268>
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%r14, %rdi
               	movq	64(%rsp), %r13
               	movq	%r13, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da30 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	movq	%r12, %rbp
               	je	0x43396f <mi_segment_init+0x25f>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	jne	0x433980 <mi_segment_init+0x270>
               	jmp	0x43435b <mi_segment_init+0xc4b>
               	movq	%r12, %rbp
               	movq	64(%rsp), %r13
               	movq	%rbp, %r12
               	movq	$0, 16(%r14)
               	leaq	24(%r14), %rbx
               	leaq	-24(%r13), %rdx
               	xorl	%ebp, %ebp
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movb	$1, %al
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leal	-1(%rax), %ecx
               	shlq	$6, %rbp
               	movb	%cl, 120(%r14,%rbp)
               	movzbl	121(%r14,%rbp), %ecx
               	movl	%ecx, %edx
               	andb	$-3, %dl
               	movb	%dl, 121(%r14,%rbp)
               	movzbl	9(%rsp), %edx
               	shlb	$2, %dl
               	andb	$-7, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%r14,%rbp)
               	movzbl	8(%rsp), %edx
               	shlb	$3, %dl
               	andb	$-11, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%r14,%rbp)
               	movzbl	%al, %ebp
               	movl	%ebp, %eax
               	addb	$1, %al
               	cmpq	%rbp, %r15
               	ja	0x4339b0 <mi_segment_init+0x2a0>
               	movl	52(%rsp), %eax
               	movq	%r12, %rbp
               	movl	%eax, %r12d
               	movl	%r12d, 112(%r14)
               	movq	%r15, 64(%r14)
               	movq	112(%rsp), %rax
               	movq	%rax, 96(%r14)
               	movq	72(%rsp), %rax
               	movq	%rax, 72(%r14)
               	movq	%r13, 80(%r14)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r14)
               	movq	182888(%rip), %rax      # 0x4604a0 <_mi_heap_main+0xb28>
               	xorq	%r14, %rax
               	movq	%rax, 88(%r14)
               	cmpl	$1, %r12d
               	ja	0x43435e <mi_segment_init+0xc4e>
               	movl	112(%r14), %eax
               	cmpl	$1, %eax
               	je	0x433a70 <mi_segment_init+0x360>
               	testl	%eax, %eax
               	je	0x433a74 <mi_segment_init+0x364>
               	xorl	%ebp, %ebp
               	jmp	0x433a74 <mi_segment_init+0x364>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433a9a <mi_segment_init+0x38a>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x433aa0 <mi_segment_init+0x390>
               	addq	$16, %rbp
               	movq	$0, (%rbx)
               	movq	8(%rbp), %rax
               	movq	%rax, 32(%r14)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%rbp, %rcx
               	movq	%r14, (%rcx)
               	movq	%r14, 8(%rbp)
               	jmp	0x43435e <mi_segment_init+0xc4e>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	leaq	4194303(%rbp), %rax
               	movq	%rax, 80(%rsp)
               	cmpq	$71303167, %rax         # imm = 0x43FFFFF
               	movl	%r12d, 52(%rsp)
               	ja	0x4341e9 <mi_segment_init+0xad9>
               	movq	223377(%rip), %rax      # 0x46a358 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x433cd7 <mi_segment_init+0x5c7>
               	movq	80(%rsp), %rsi
               	shrq	$22, %rsi
               	cmpq	$2, %rax
               	movq	%rsi, 24(%rsp)
               	movq	%rbp, 96(%rsp)
               	jae	0x433b06 <mi_segment_init+0x3f6>
               	movq	223424(%rip), %r9       # 0x46a3b0 <regions_count>
               	testq	%r9, %r9
               	je	0x433d0a <mi_segment_init+0x5fa>
               	movq	32(%rsp), %rax
               	movq	(%rax), %rbp
               	jmp	0x433bde <mi_segment_init+0x4ce>
               	movq	223307(%rip), %rax      # 0x46a358 <_mi_numa_node_count>
               	xorl	%r10d, %r10d
               	cmpq	$1, %rax
               	jne	0x433ce7 <mi_segment_init+0x5d7>
               	movq	223375(%rip), %r9       # 0x46a3b0 <regions_count>
               	testq	%r9, %r9
               	je	0x433d0a <mi_segment_init+0x5fa>
               	movq	32(%rsp), %rax
               	movq	(%rax), %rbp
               	testl	%r10d, %r10d
               	js	0x433bde <mi_segment_init+0x4ce>
               	xorl	%edi, %edi
               	leaq	223356(%rip), %r8       # 0x46a3c0 <regions>
               	notb	%r11b
               	movq	%r9, %r14
               	movl	%r11d, 92(%rsp)
               	movq	%r9, 56(%rsp)
               	movl	%r10d, 88(%rsp)
               	jmp	0x433b6e <mi_segment_init+0x45e>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %r14
               	je	0x433d0a <mi_segment_init+0x5fa>
               	cmpq	%r9, %rbp
               	cmovaeq	%rdi, %rbp
               	movq	%rbp, %rbx
               	shlq	$6, %rbx
               	movq	(%rbx,%r8), %rax
               	testq	%rax, %rax
               	je	0x433b60 <mi_segment_init+0x450>
               	movl	%eax, %edx
               	shrl	$8, %edx
               	andl	$1, %edx
               	testl	%eax, %eax
               	sets	%cl
               	sarl	$16, %eax
               	cmpl	%r10d, %eax
               	sete	%al
               	testb	%dl, %r11b
               	jne	0x433b60 <mi_segment_init+0x450>
               	orb	%al, %cl
               	je	0x433b60 <mi_segment_init+0x450>
               	leaq	(%rbx,%r8), %rdi
               	addq	$16, %rdi
               	leaq	40(%rsp), %rdx
               	movq	%r8, %r12
               	callq	0x434500 <_mi_bitmap_try_find_claim_field>
               	xorl	%edi, %edi
               	movl	88(%rsp), %r10d
               	movq	56(%rsp), %r9
               	movl	92(%rsp), %r11d
               	movq	%r12, %r8
               	movq	24(%rsp), %rsi
               	testb	%al, %al
               	je	0x433b60 <mi_segment_init+0x450>
               	addq	%rbx, %r8
               	jmp	0x433cca <mi_segment_init+0x5ba>
               	testb	%r11b, %r11b
               	movq	%r9, 56(%rsp)
               	je	0x433c55 <mi_segment_init+0x545>
               	leaq	223181(%rip), %r8       # 0x46a3c0 <regions>
               	movq	%r9, %r12
               	jmp	0x433c0e <mi_segment_init+0x4fe>
               	nopl	(%rax,%rax)
               	addq	$1, %rbp
               	addq	$-1, %r12
               	je	0x433d0a <mi_segment_init+0x5fa>
               	cmpq	%r9, %rbp
               	movl	$0, %eax
               	cmovaeq	%rax, %rbp
               	movq	%rbp, %r14
               	shlq	$6, %r14
               	movq	(%r14,%r8), %rax
               	testq	%rax, %rax
               	je	0x433c00 <mi_segment_init+0x4f0>
               	leaq	(%r14,%r8), %rdi
               	addq	$16, %rdi
               	leaq	40(%rsp), %rdx
               	movq	%r8, %rbx
               	callq	0x434500 <_mi_bitmap_try_find_claim_field>
               	movq	56(%rsp), %r9
               	movq	%rbx, %r8
               	movq	24(%rsp), %rsi
               	testb	%al, %al
               	je	0x433c00 <mi_segment_init+0x4f0>
               	addq	%r14, %r8
               	jmp	0x433cca <mi_segment_init+0x5ba>
               	xorl	%ecx, %ecx
               	leaq	223074(%rip), %r8       # 0x46a3c0 <regions>
               	movq	%r9, %rbx
               	jmp	0x433c7e <mi_segment_init+0x56e>
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbp
               	addq	$-1, %rbx
               	je	0x433d0a <mi_segment_init+0x5fa>
               	cmpq	%r9, %rbp
               	cmovaeq	%rcx, %rbp
               	movq	%rbp, %r12
               	shlq	$6, %r12
               	movq	(%r12,%r8), %rax
               	testq	%rax, %rax
               	je	0x433c70 <mi_segment_init+0x560>
               	andl	$256, %eax              # imm = 0x100
               	testq	%rax, %rax
               	jne	0x433c70 <mi_segment_init+0x560>
               	leaq	(%r12,%r8), %rdi
               	addq	$16, %rdi
               	leaq	40(%rsp), %rdx
               	movq	%r8, %r14
               	callq	0x434500 <_mi_bitmap_try_find_claim_field>
               	xorl	%ecx, %ecx
               	movq	56(%rsp), %r9
               	movq	%r14, %r8
               	movq	24(%rsp), %rsi
               	testb	%al, %al
               	je	0x433c70 <mi_segment_init+0x560>
               	addq	%r12, %r8
               	movq	32(%rsp), %rax
               	movq	%rbp, (%rax)
               	jmp	0x433eb4 <mi_segment_init+0x7a4>
               	movl	%r11d, %ebx
               	callq	0x42bf90 <_mi_os_numa_node_count_get>
               	movl	%ebx, %r11d
               	jmp	0x433ad0 <mi_segment_init+0x3c0>
               	movl	%r11d, %ebx
               	callq	0x4343e0 <_mi_os_numa_node_get>
               	movl	%ebx, %r11d
               	movq	24(%rsp), %rsi
               	movl	%eax, %r10d
               	movq	222895(%rip), %r9       # 0x46a3b0 <regions_count>
               	testq	%r9, %r9
               	jne	0x433b2a <mi_segment_init+0x41a>
               	movb	10(%rsp), %bl
               	movq	222875(%rip), %rax      # 0x46a3b0 <regions_count>
               	cmpq	$1022, %rax             # imm = 0x3FE
               	ja	0x4341ce <mi_segment_init+0xabe>
               	testb	%r13b, %r13b
               	je	0x433d38 <mi_segment_init+0x628>
               	movl	$4, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%al
               	jmp	0x433d3a <mi_segment_init+0x62a>
               	xorl	%eax, %eax
               	testb	%bl, %bl
               	setne	%cl
               	movb	%al, 12(%rsp)
               	andb	%cl, %r13b
               	movb	%r13b, 15(%rsp)
               	movb	$0, 14(%rsp)
               	movb	$0, 13(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	12(%rsp), %rsi
               	leaq	15(%rsp), %rdx
               	leaq	13(%rsp), %rcx
               	leaq	14(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movl	$268435456, %edi        # imm = 0x10000000
               	callq	0x4345c0 <_mi_arena_alloc_aligned>
               	testq	%rax, %rax
               	je	0x433ddc <mi_segment_init+0x6cc>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 222748(%rip)      # 0x46a3b0 <regions_count>
               	cmpq	$1024, %rdx             # imm = 0x400
               	jb	0x433de8 <mi_segment_init+0x6d8>
               	lock
               	subq	$1, 222730(%rip)        # 0x46a3b0 <regions_count>
               	movq	16(%rsp), %rdx
               	movzbl	12(%rsp), %ecx
               	movl	$268435456, %esi        # imm = 0x10000000
               	movq	%rax, %rdi
               	callq	0x42d580 <_mi_arena_free>
               	leaq	68632(%rip), %rdi       # 0x4449dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1873>
               	xorl	%ebx, %ebx
               	movl	$256, %esi              # imm = 0x100
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movq	24(%rsp), %rsi
               	jmp	0x433eac <mi_segment_init+0x79c>
               	xorl	%ebx, %ebx
               	movq	24(%rsp), %rsi
               	jmp	0x433eac <mi_segment_init+0x79c>
               	shlq	$6, %rdx
               	leaq	222669(%rip), %rbx      # 0x46a3c0 <regions>
               	movq	16(%rsp), %rcx
               	xchgq	%rcx, 48(%rdx,%rbx)
               	leaq	(%rdx,%rbx), %rdi
               	addq	$16, %rdi
               	movq	$0, 16(%rdx,%rbx)
               	movzbl	14(%rsp), %ecx
               	addq	$-1, %rcx
               	movq	%rcx, 24(%rdx,%rbx)
               	xorl	%ecx, %ecx
               	subb	12(%rsp), %cl
               	movsbq	%cl, %rcx
               	movq	%rcx, 32(%rdx,%rbx)
               	movq	$0, 40(%rdx,%rbx)
               	movq	$0, 40(%rsp)
               	movq	$-1, %rbp
               	cmpq	$268435455, 80(%rsp)    # imm = 0xFFFFFFF
               	movq	24(%rsp), %rsi
               	ja	0x433e6c <mi_segment_init+0x75c>
               	testq	%rsi, %rsi
               	je	0x433e6a <mi_segment_init+0x75a>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	jmp	0x433e6c <mi_segment_init+0x75c>
               	xorl	%ebp, %ebp
               	lock
               	orq	%rbp, (%rdi)
               	leaq	(%rbx,%rdx), %r8
               	movq	%rax, 8(%rdx,%rbx)
               	movzbl	15(%rsp), %eax
               	movzbl	13(%rsp), %ebx
               	addq	%rbx, %rbx
               	orq	%rax, %rbx
               	movq	222408(%rip), %rax      # 0x46a358 <_mi_numa_node_count>
               	cmpq	$1, %rax
               	jne	0x4343c2 <mi_segment_init+0xcb2>
               	xorl	%eax, %eax
               	shlq	$8, %rbx
               	orq	%rax, %rbx
               	orq	$1, %rbx
               	movq	%rbx, (%r8)
               	movb	$1, %bl
               	testb	%bl, %bl
               	je	0x4341ce <mi_segment_init+0xabe>
               	movq	(%r8), %rdx
               	movq	8(%r8), %r9
               	movq	40(%rsp), %rax
               	movq	%rax, %rbp
               	shrq	$6, %rbp
               	movq	$-1, %rdi
               	movq	80(%rsp), %r10
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	ja	0x433efc <mi_segment_init+0x7ec>
               	testq	%rsi, %rsi
               	je	0x433efa <mi_segment_init+0x7ea>
               	andl	$63, %eax
               	movq	$-1, %rdi
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x433efc <mi_segment_init+0x7ec>
               	xorl	%edi, %edi
               	movq	24(%r8,%rbp,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 24(%r8,%rbp,8)
               	jne	0x433f10 <mi_segment_init+0x800>
               	testq	%rdi, %rax
               	sete	8(%rsp)
               	movq	%rdx, %rax
               	shrq	$8, %rax
               	andb	$1, %al
               	movb	%al, 10(%rsp)
               	shrq	$9, %rdx
               	andb	$1, %dl
               	movb	%dl, 11(%rsp)
               	movq	40(%rsp), %rbx
               	movl	%ebx, %r14d
               	andl	$63, %r14d
               	shlq	$22, %r14
               	addq	%r9, %r14
               	cmpb	$0, 9(%rsp)
               	je	0x433f90 <mi_segment_init+0x880>
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	movq	$-1, %rdi
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	ja	0x433fcd <mi_segment_init+0x8bd>
               	testq	%rsi, %rsi
               	je	0x433fcb <mi_segment_init+0x8bb>
               	movl	%ebx, %eax
               	andl	$63, %eax
               	movq	$-1, %rdi
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x433fcd <mi_segment_init+0x8bd>
               	movq	$-1, %rdx
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	ja	0x434095 <mi_segment_init+0x985>
               	testq	%rsi, %rsi
               	je	0x434093 <mi_segment_init+0x983>
               	movl	%ebx, %eax
               	andl	$63, %eax
               	movq	$-1, %rdx
               	movl	%esi, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%eax, %ecx
               	shlq	%cl, %rdx
               	jmp	0x434095 <mi_segment_init+0x985>
               	xorl	%edi, %edi
               	movq	32(%r8,%rdx,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r8,%rdx,8)
               	jne	0x433fe0 <mi_segment_init+0x8d0>
               	andq	%rdi, %rax
               	cmpq	%rdi, %rax
               	je	0x4340ac <mi_segment_init+0x99c>
               	movq	%r9, 32(%rsp)
               	movq	%r8, %r13
               	movb	$0, 16(%rsp)
               	movq	%r10, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	leaq	16(%rsp), %r8
               	movq	%r14, %rdi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r10, %rbp
               	callq	0x42da30 <mi_os_commitx>
               	testb	%al, %al
               	je	0x43404b <mi_segment_init+0x93b>
               	movq	%rbp, %r10
               	cmpb	$0, 16(%rsp)
               	je	0x43403c <mi_segment_init+0x92c>
               	movb	$1, 8(%rsp)
               	movq	24(%rsp), %rsi
               	movq	%r13, %r8
               	movq	32(%rsp), %r9
               	jmp	0x4340ac <mi_segment_init+0x99c>
               	movq	40(%rsp), %rdx
               	cmpq	$268435455, %rbp        # imm = 0xFFFFFFF
               	jbe	0x434063 <mi_segment_init+0x953>
               	xorl	%esi, %esi
               	movq	%r13, %rbp
               	jmp	0x4341c4 <mi_segment_init+0xab4>
               	movq	24(%rsp), %rcx
               	testq	%rcx, %rcx
               	movq	%r13, %rbp
               	je	0x4341bd <mi_segment_init+0xaad>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	jmp	0x4341c4 <mi_segment_init+0xab4>
               	xorl	%edx, %edx
               	movq	%rbx, %rax
               	shrq	$6, %rax
               	movq	32(%r8,%rax,8), %rax
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	sete	9(%rsp)
               	leaq	40(%r8), %rdx
               	movq	40(%rsp), %rbp
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	jbe	0x4340d7 <mi_segment_init+0x9c7>
               	shrq	$6, %rbp
               	movq	(%rdx,%rbp,8), %rax
               	testq	%rax, %rax
               	je	0x4341a1 <mi_segment_init+0xa91>
               	leaq	(%rdx,%rbp,8), %rdx
               	xorl	%edi, %edi
               	jmp	0x434135 <mi_segment_init+0xa25>
               	movl	%ebp, %eax
               	andl	$63, %eax
               	movq	$-1, %rdi
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	testq	%rsi, %rsi
               	cmoveq	%rsi, %rdi
               	shrq	$6, %rbp
               	movq	(%rdx,%rbp,8), %rcx
               	testq	%rdi, %rcx
               	je	0x4341a1 <mi_segment_init+0xa91>
               	leaq	(%rdx,%rbp,8), %rdx
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	jbe	0x434119 <mi_segment_init+0xa09>
               	xorl	%edi, %edi
               	jmp	0x434135 <mi_segment_init+0xa25>
               	movq	$-1, %rdi
               	testq	%rsi, %rsi
               	je	0x434135 <mi_segment_init+0xa25>
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	lock
               	andq	%rdi, (%rdx)
               	cmpb	$0, 9(%rsp)
               	je	0x434176 <mi_segment_init+0xa66>
               	movq	%r9, %r13
               	movq	%r8, %rbp
               	movb	$0, 16(%rsp)
               	andq	$-4194304, %r10         # imm = 0xFFC00000
               	leaq	16(%rsp), %rdx
               	movq	%r14, %rdi
               	movq	%r10, %rsi
               	callq	0x4347a0 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x43416e <mi_segment_init+0xa5e>
               	movb	$1, 8(%rsp)
               	movq	%rbp, %r8
               	movq	%r13, %r9
               	jmp	0x4341a1 <mi_segment_init+0xa91>
               	movl	$5, %edi
               	movq	%rbx, 32(%rsp)
               	movq	%r8, %r13
               	movq	%r9, %rbp
               	movq	%r10, %rbx
               	callq	0x42abe0 <mi_option_get>
               	movq	%rbx, %r10
               	movq	%rbp, %r9
               	movq	%r13, %r8
               	movq	32(%rsp), %rbx
               	testq	%rax, %rax
               	je	0x434140 <mi_segment_init+0xa30>
               	testq	%r9, %r9
               	je	0x4341ce <mi_segment_init+0xabe>
               	leaq	221715(%rip), %rax      # 0x46a3c0 <regions>
               	subq	%rax, %r8
               	addq	%rbx, %r8
               	addq	%r8, %r8
               	movq	72(%rsp), %rbx
               	jmp	0x43421a <mi_segment_init+0xb0a>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 16(%rbp,%rdx,8)
               	leaq	67691(%rip), %rdi       # 0x444a40 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
               	movq	96(%rsp), %rbp
               	movq	%rbp, %rsi
               	xorl	%eax, %eax
               	callq	0x42bc40 <_mi_warning_message>
               	movq	72(%rsp), %rbx
               	leaq	9(%rsp), %rsi
               	leaq	10(%rsp), %rdx
               	leaq	11(%rsp), %rcx
               	leaq	8(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movq	%rbp, %rdi
               	callq	0x4345c0 <_mi_arena_alloc_aligned>
               	movq	%rax, %r14
               	movq	16(%rsp), %rax
               	leaq	(%rax,%rax), %r8
               	addq	$1, %r8
               	testq	%r14, %r14
               	movq	104(%rsp), %rbp
               	je	0x43435b <mi_segment_init+0xc4b>
               	movb	$1, %al
               	cmpb	$0, 9(%rsp)
               	movq	64(%rsp), %r13
               	jne	0x434272 <mi_segment_init+0xb62>
               	movq	%r8, 32(%rsp)
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%r14, %rdi
               	movq	%r13, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da30 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	je	0x434263 <mi_segment_init+0xb53>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	movq	32(%rsp), %r8
               	je	0x434346 <mi_segment_init+0xc36>
               	xorl	%eax, %eax
               	movq	%r8, (%r14)
               	movb	11(%rsp), %cl
               	andb	$1, %cl
               	orb	10(%rsp), %cl
               	movb	%cl, 8(%r14)
               	movb	%al, 9(%r14)
               	movq	112(%rbp), %rcx
               	leaq	187309(%rip), %rax      # 0x461e40 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	187872(%rip), %rax      # 0x462080 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rbx, %rbx
               	js	0x4342ec <mi_segment_init+0xbdc>
               	testb	%al, %al
               	je	0x434325 <mi_segment_init+0xc15>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jg	0x4342dd <mi_segment_init+0xbcd>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x4342d0 <mi_segment_init+0xbc0>
               	lock
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x434392 <mi_segment_init+0xc82>
               	testb	%al, %al
               	je	0x434370 <mi_segment_init+0xc60>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x43431d <mi_segment_init+0xc0d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x434310 <mi_segment_init+0xc00>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x43438b <mi_segment_init+0xc7b>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x43433b <mi_segment_init+0xc2b>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x434392 <mi_segment_init+0xc82>
               	movl	$4194304, %esi          # imm = 0x400000
               	movq	%r14, %rdi
               	movq	%r8, %rdx
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	callq	0x42dd20 <_mi_mem_free>
               	xorl	%r14d, %r14d
               	movq	%r14, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x434386 <mi_segment_init+0xc76>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%rbp), %rax
               	movq	%rax, 56(%rbp)
               	cmpq	64(%rbp), %rax
               	jbe	0x4343a4 <mi_segment_init+0xc94>
               	movq	%rax, 64(%rbp)
               	movq	72(%rbp), %rax
               	addq	%rbx, %rax
               	movq	%rax, 72(%rbp)
               	cmpq	80(%rbp), %rax
               	jbe	0x433980 <mi_segment_init+0x270>
               	movq	%rax, 80(%rbp)
               	jmp	0x433980 <mi_segment_init+0x270>
               	movq	%r8, %rbp
               	callq	0x4343e0 <_mi_os_numa_node_get>
               	movq	%rbp, %r8
               	movq	24(%rsp), %rsi
               	shll	$16, %eax
               	jmp	0x433e9c <mi_segment_init+0x78c>
               	nopw	(%rax,%rax)

<_mi_os_numa_node_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	221029(%rip), %r14      # 0x46a358 <_mi_numa_node_count>
               	testq	%r14, %r14
               	je	0x43446c <_mi_os_numa_node_get+0x8c>
               	xorl	%ebx, %ebx
               	cmpq	$2, %r14
               	jb	0x43445d <_mi_os_numa_node_get+0x7d>
               	movq	$0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	xorl	%ebx, %ebx
               	leaq	8(%rsp), %rsi
               	leaq	16(%rsp), %rdx
               	movl	$309, %edi              # imm = 0x135
               	xorl	%ecx, %ecx
               	xorl	%eax, %eax
               	callq	0x413800 <syscall@plt>
               	testq	%rax, %rax
               	jne	0x434436 <_mi_os_numa_node_get+0x56>
               	movq	16(%rsp), %rbx
               	cmpq	%r14, %rbx
               	jb	0x43445d <_mi_os_numa_node_get+0x7d>
               	movq	%rbx, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x434454 <_mi_os_numa_node_get+0x74>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	jmp	0x43445d <_mi_os_numa_node_get+0x7d>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movl	%ebx, %eax
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	220901(%rip), %r14      # 0x46a358 <_mi_numa_node_count>
               	testq	%r14, %r14
               	jne	0x4343f8 <_mi_os_numa_node_get+0x18>
               	movl	$15, %edi
               	callq	0x42abe0 <mi_option_get>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	jg	0x4344dc <_mi_os_numa_node_get+0xfc>
               	movl	$4294967295, %r14d      # imm = 0xFFFFFFFF
               	leaq	65426(%rip), %r15       # 0x444429 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	leaq	16(%rsp), %rbx
               	cmpl	$255, %r14d
               	je	0x4344d2 <_mi_os_numa_node_get+0xf2>
               	leal	2(%r14), %ecx
               	movl	$127, %esi
               	movq	%rbx, %rdi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x413820 <snprintf@plt>
               	movq	%rbx, %rdi
               	movl	$4, %esi
               	callq	0x413910 <access@plt>
               	addl	$1, %r14d
               	testl	%eax, %eax
               	je	0x43449c <_mi_os_numa_node_get+0xbc>
               	jmp	0x4344d8 <_mi_os_numa_node_get+0xf8>
               	movl	$256, %r14d             # imm = 0x100
               	addl	$1, %r14d
               	movq	%r14, 220789(%rip)      # 0x46a358 <_mi_numa_node_count>
               	leaq	65375(%rip), %rdi       # 0x444449 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x42a8c0 <_mi_verbose_message>
               	jmp	0x4343f8 <_mi_os_numa_node_get+0x18>
               	nopl	(%rax)

<_mi_bitmap_try_find_claim_field>:
               	movq	(%rdi), %rax
               	cmpq	$-1, %rax
               	je	0x434555 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	$-1, %r8
               	cmpq	$63, %rsi
               	ja	0x43452f <_mi_bitmap_try_find_claim_field+0x2f>
               	testq	%rsi, %rsi
               	je	0x43452c <_mi_bitmap_try_find_claim_field+0x2c>
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x43452f <_mi_bitmap_try_find_claim_field+0x2f>
               	xorl	%r8d, %r8d
               	movl	$64, %ecx
               	movl	$64, %r9d
               	subq	%rsi, %r9
               	cmpq	$-1, %rax
               	je	0x43454d <_mi_bitmap_try_find_claim_field+0x4d>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %rcx
               	shlq	%cl, %r8
               	cmpq	%r9, %rcx
               	jbe	0x434558 <_mi_bitmap_try_find_claim_field+0x58>
               	xorl	%eax, %eax
               	retq
               	cmpq	$1, %rsi
               	jne	0x43459e <_mi_bitmap_try_find_claim_field+0x9e>
               	jmp	0x43456c <_mi_bitmap_try_find_claim_field+0x6c>
               	addq	$1, %rcx
               	addq	%r8, %r8
               	cmpq	%r9, %rcx
               	ja	0x434555 <_mi_bitmap_try_find_claim_field+0x55>
               	testq	%r8, %rax
               	jne	0x434560 <_mi_bitmap_try_find_claim_field+0x60>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434567 <_mi_bitmap_try_find_claim_field+0x67>
               	jmp	0x4345b3 <_mi_bitmap_try_find_claim_field+0xb3>
               	bsrq	%rsi, %r10
               	movl	%r10d, %esi
               	subl	%ecx, %esi
               	addq	$1, %r10
               	addb	$1, %sil
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	movq	%r10, %rcx
               	cmpq	%r9, %rcx
               	ja	0x434555 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	%rax, %rsi
               	andq	%r8, %rsi
               	jne	0x434580 <_mi_bitmap_try_find_claim_field+0x80>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434599 <_mi_bitmap_try_find_claim_field+0x99>
               	movq	%rcx, (%rdx)
               	movb	$1, %al
               	retq
               	nopl	(%rax)

<_mi_arena_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, %r13
               	movq	%rcx, %r12
               	movq	%rdx, %r15
               	movq	%rsi, (%rsp)
               	movq	%r9, 8(%rsp)
               	movq	$0, (%r9)
               	movb	$0, (%r8)
               	movb	$0, (%rcx)
               	movq	%rdi, 16(%rsp)
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x434726 <_mi_arena_alloc_aligned+0x166>
               	movq	187065(%rip), %rax      # 0x4620c0 <mi_arena_count>
               	testq	%rax, %rax
               	je	0x434726 <_mi_arena_alloc_aligned+0x166>
               	movq	%r12, 24(%rsp)
               	movq	16(%rsp), %rax
               	leaq	16777215(%rax), %rbx
               	movq	220464(%rip), %rax      # 0x46a358 <_mi_numa_node_count>
               	xorl	%r14d, %r14d
               	cmpq	$1, %rax
               	jne	0x434784 <_mi_arena_alloc_aligned+0x1c4>
               	shrq	$24, %rbx
               	leaq	187072(%rip), %rbp      # 0x462100 <mi_arenas>
               	xorl	%r12d, %r12d
               	jmp	0x43468e <_mi_arena_alloc_aligned+0xce>
               	nopl	(%rax,%rax)
               	cmpb	$0, (%r15)
               	je	0x4346a5 <_mi_arena_alloc_aligned+0xe5>
               	movq	%r12, %rsi
               	movq	%rbx, %rdx
               	movq	(%rsp), %rcx
               	movq	%r15, %r8
               	movq	24(%rsp), %r9
               	pushq	8(%rsp)
               	pushq	%r13
               	callq	0x4348c0 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x434775 <_mi_arena_alloc_aligned+0x1b5>
               	addq	$1, %r12
               	addq	$8, %rbp
               	cmpq	$64, %r12
               	je	0x4346ad <_mi_arena_alloc_aligned+0xed>
               	movq	(%rbp), %rdi
               	testq	%rdi, %rdi
               	je	0x4346ad <_mi_arena_alloc_aligned+0xed>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x434650 <_mi_arena_alloc_aligned+0x90>
               	cmpl	%r14d, %eax
               	jne	0x434680 <_mi_arena_alloc_aligned+0xc0>
               	jmp	0x434650 <_mi_arena_alloc_aligned+0x90>
               	cmpb	$0, 30(%rdi)
               	jne	0x434680 <_mi_arena_alloc_aligned+0xc0>
               	jmp	0x434656 <_mi_arena_alloc_aligned+0x96>
               	movq	%rbx, 32(%rsp)
               	leaq	186951(%rip), %rbx      # 0x462100 <mi_arenas>
               	xorl	%ebp, %ebp
               	movq	24(%rsp), %r12
               	jmp	0x434704 <_mi_arena_alloc_aligned+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbp, %rsi
               	movq	32(%rsp), %rdx
               	movq	(%rsp), %rcx
               	movq	%r15, %r8
               	movq	%r12, %r9
               	pushq	8(%rsp)
               	pushq	%r13
               	callq	0x4348c0 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x434775 <_mi_arena_alloc_aligned+0x1b5>
               	addq	$1, %rbp
               	addq	$8, %rbx
               	cmpq	$64, %rbp
               	je	0x434726 <_mi_arena_alloc_aligned+0x166>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x434726 <_mi_arena_alloc_aligned+0x166>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x4346f6 <_mi_arena_alloc_aligned+0x136>
               	cmpl	%r14d, %eax
               	je	0x4346f6 <_mi_arena_alloc_aligned+0x136>
               	cmpb	$0, (%r15)
               	jne	0x4346d0 <_mi_arena_alloc_aligned+0x110>
               	cmpb	$0, 30(%rdi)
               	jne	0x4346f6 <_mi_arena_alloc_aligned+0x136>
               	jmp	0x4346d0 <_mi_arena_alloc_aligned+0x110>
               	movl	$16, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x434744 <_mi_arena_alloc_aligned+0x184>
               	callq	0x413870 <__errno_location@plt>
               	movl	$12, (%rax)
               	xorl	%eax, %eax
               	jmp	0x434775 <_mi_arena_alloc_aligned+0x1b5>
               	movb	$1, (%r13)
               	movq	8(%rsp), %rax
               	movq	$0, (%rax)
               	movq	(%rsp), %rax
               	movzbl	(%rax), %esi
               	movq	16(%rsp), %rdi
               	movq	%r15, %rdx
               	callq	0x42b000 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x434740 <_mi_arena_alloc_aligned+0x180>
               	movb	(%r15), %cl
               	movb	%cl, (%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x4343e0 <_mi_os_numa_node_get>
               	movl	%eax, %r14d
               	jmp	0x434635 <_mi_arena_alloc_aligned+0x75>
               	nopw	%cs:(%rax,%rax)

<_mi_os_unreset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$5, %edi
               	callq	0x42abe0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4347da <_mi_os_unreset+0x3a>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movl	$1, %edx
               	movl	$1, %ecx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42da30 <mi_os_commitx>
               	movb	$0, (%rbx)
               	testq	%r15, %r15
               	je	0x4348b7 <_mi_os_unreset+0x117>
               	testq	%r14, %r14
               	je	0x4348b7 <_mi_os_unreset+0x117>
               	movq	180330(%rip), %rdi      # 0x460860 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%r15,%rdi), %rcx
               	addq	$-1, %rcx
               	testq	%rax, %rdi
               	jne	0x434820 <_mi_os_unreset+0x80>
               	negq	%rdi
               	andq	%rdi, %rcx
               	addq	%r14, %r15
               	andq	%rdi, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jg	0x43486f <_mi_os_unreset+0xcf>
               	jmp	0x4348b7 <_mi_os_unreset+0x117>
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x434839 <_mi_os_unreset+0x99>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rsi
               	jmp	0x434841 <_mi_os_unreset+0xa1>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %esi
               	addq	%r14, %r15
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43485a <_mi_os_unreset+0xba>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x434861 <_mi_os_unreset+0xc1>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rsi, %rcx
               	subq	%rdx, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jle	0x4348b7 <_mi_os_unreset+0x117>
               	movq	%r15, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 185943(%rip)      # 0x461ed8 <_mi_stats_main+0x98>
               	subq	%r15, %rdx
               	movq	185925(%rip), %rax      # 0x461ed0 <_mi_stats_main+0x90>
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x4348a0 <_mi_os_unreset+0x100>
               	lock
               	cmpxchgq	%rdx, 185906(%rip)      # 0x461ed0 <_mi_stats_main+0x90>
               	jne	0x434890 <_mi_os_unreset+0xf0>
               	testq	%r15, %r15
               	js	0x4348af <_mi_os_unreset+0x10f>
               	lock
               	addq	%r15, 185883(%rip)      # 0x461ec8 <_mi_stats_main+0x88>
               	jmp	0x4348b7 <_mi_os_unreset+0x117>
               	lock
               	addq	%rcx, 185865(%rip)      # 0x461ec0 <_mi_stats_main+0x80>
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<mi_arena_alloc_from>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %rbp
               	movq	%rdx, %rbx
               	movq	%rdi, %r12
               	movq	32(%rdi), %rax
               	movq	16(%rdi), %r10
               	cmpq	$1, %rdx
               	jne	0x4349a7 <mi_arena_alloc_from+0xe7>
               	testq	%r10, %r10
               	je	0x434e39 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r9, 64(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%esi, %esi
               	movq	%rax, 48(%rsp)
               	movq	%rax, %rdx
               	jmp	0x434921 <mi_arena_alloc_from+0x61>
               	nop
               	addq	$1, %rsi
               	addq	$1, %rdx
               	cmpq	%r10, %rsi
               	je	0x434e3c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %rdx
               	cmovaeq	%r15, %rdx
               	movq	56(%r12,%rdx,8), %rax
               	cmpq	$-1, %rax
               	je	0x434910 <mi_arena_alloc_from+0x50>
               	je	0x434950 <mi_arena_alloc_from+0x90>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpl	$63, %r14d
               	ja	0x434910 <mi_arena_alloc_from+0x50>
               	jmp	0x43495c <mi_arena_alloc_from+0x9c>
               	nop
               	movl	$64, %r14d
               	cmpl	$63, %r14d
               	ja	0x434910 <mi_arena_alloc_from+0x50>
               	movl	$1, %edi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	jmp	0x43497d <mi_arena_alloc_from+0xbd>
               	nopl	(%rax)
               	addq	$1, %r14
               	addq	%rdi, %rdi
               	cmpq	$64, %r14
               	jae	0x434910 <mi_arena_alloc_from+0x50>
               	testq	%rax, %rdi
               	jne	0x434970 <mi_arena_alloc_from+0xb0>
               	movq	%rdi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%rdx,8)
               	jne	0x434977 <mi_arena_alloc_from+0xb7>
               	movq	%rbp, 40(%rsp)
               	movq	%r8, 32(%rsp)
               	shlq	$6, %rdx
               	addq	%rdx, %r14
               	jmp	0x434dad <mi_arena_alloc_from+0x4ed>
               	testq	%r10, %r10
               	je	0x434e39 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r8, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movq	%rbp, 40(%rsp)
               	movq	$-1, %rdx
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	movl	$64, %r13d
               	movl	$64, %ecx
               	subq	%rbx, %rcx
               	leaq	63(%rbx), %rdi
               	movq	%rdi, 120(%rsp)
               	testq	%rbx, %rbx
               	notq	%rsi
               	cmoveq	%rbx, %rsi
               	cmpq	$63, %rbx
               	cmovaq	%rdx, %rsi
               	movq	%rcx, %rbp
               	movq	%rsi, 24(%rsp)
               	leaq	48(%r12), %rcx
               	movq	%rcx, 88(%rsp)
               	leaq	64(%r12), %rcx
               	movq	%rcx, 80(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%edx, %edx
               	movq	%rax, 48(%rsp)
               	movq	%rax, %r8
               	movq	%r10, 72(%rsp)
               	movq	%rbp, 16(%rsp)
               	jmp	0x434a69 <mi_arena_alloc_from+0x1a9>
               	nopl	(%rax,%rax)
               	movq	128(%rsp), %rdx
               	addq	$1, %rdx
               	addq	$1, %r8
               	movq	72(%rsp), %r10
               	cmpq	%r10, %rdx
               	movl	$0, %r15d
               	movq	16(%rsp), %rbp
               	je	0x434e3c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %r8
               	cmovaeq	%r15, %r8
               	cmpq	$64, %rbx
               	ja	0x434ab0 <mi_arena_alloc_from+0x1f0>
               	movq	56(%r12,%r8,8), %rax
               	cmpq	$-1, %rax
               	je	0x434ab0 <mi_arena_alloc_from+0x1f0>
               	je	0x434a97 <mi_arena_alloc_from+0x1d7>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	%rbp, %r14
               	ja	0x434ab0 <mi_arena_alloc_from+0x1f0>
               	jmp	0x434cdc <mi_arena_alloc_from+0x41c>
               	movl	$64, %r14d
               	cmpq	%rbp, %r14
               	jbe	0x434cdc <mi_arena_alloc_from+0x41c>
               	nopw	%cs:(%rax,%rax)
               	movq	%rdx, 128(%rsp)
               	movq	56(%r12,%r8,8), %r10
               	testq	%r10, %r10
               	je	0x434ae0 <mi_arena_alloc_from+0x220>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	testq	%rbp, %rbp
               	jne	0x434aee <mi_arena_alloc_from+0x22e>
               	jmp	0x434a40 <mi_arena_alloc_from+0x180>
               	nopl	(%rax)
               	movl	$64, %ebp
               	testq	%rbp, %rbp
               	je	0x434a40 <mi_arena_alloc_from+0x180>
               	leaq	(%r12,%r8,8), %r11
               	addq	$56, %r11
               	movq	72(%rsp), %r15
               	subq	%r8, %r15
               	movq	88(%rsp), %rax
               	leaq	(%rax,%r8,8), %r14
               	movq	80(%rsp), %rax
               	leaq	(%rax,%r8,8), %rax
               	movq	%rax, 96(%rsp)
               	xorl	%edx, %edx
               	cmpq	%rbx, %rbp
               	jae	0x434d28 <mi_arena_alloc_from+0x468>
               	movq	120(%rsp), %rax
               	subq	%rbp, %rax
               	shrq	$6, %rax
               	cmpq	%r15, %rax
               	jae	0x434a40 <mi_arena_alloc_from+0x180>
               	movq	%r14, %r9
               	movq	%rbp, %rax
               	nopl	(%rax,%rax)
               	leaq	64(%rax), %rsi
               	movq	%rbx, %rcx
               	subq	%rax, %rcx
               	cmpq	%rbx, %rsi
               	cmovbeq	%r13, %rcx
               	movq	16(%r9), %rdi
               	movq	$-1, %rsi
               	cmpq	$63, %rcx
               	ja	0x434b74 <mi_arena_alloc_from+0x2b4>
               	testq	%rcx, %rcx
               	je	0x434b8b <mi_arena_alloc_from+0x2cb>
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	testq	%rdi, %rsi
               	jne	0x434a40 <mi_arena_alloc_from+0x180>
               	addq	%rcx, %rax
               	addq	$8, %r9
               	cmpq	%rbx, %rax
               	jb	0x434b40 <mi_arena_alloc_from+0x280>
               	jmp	0x434ba0 <mi_arena_alloc_from+0x2e0>
               	xorl	%esi, %esi
               	testq	%rdi, %rsi
               	je	0x434b7d <mi_arena_alloc_from+0x2bd>
               	jmp	0x434a40 <mi_arena_alloc_from+0x180>
               	nopl	(%rax,%rax)
               	movq	%rdx, 104(%rsp)
               	movq	%r14, 112(%rsp)
               	movl	$64, %r14d
               	subq	%rbp, %r14
               	movq	$-1, %rax
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	notq	%rax
               	negq	%rbp
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	cmpq	$1, %r10
               	movl	$0, %ecx
               	sbbq	%rcx, %rcx
               	orq	%rax, %rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	testq	%rcx, %rax
               	jne	0x434c20 <mi_arena_alloc_from+0x360>
               	movq	%rax, %rdi
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, (%r11)
               	jne	0x434be0 <mi_arena_alloc_from+0x320>
               	movq	96(%rsp), %rdi
               	movq	$-1, %rdx
               	nop
               	movq	%rdi, %rbp
               	leaq	-8(%rdi), %rax
               	cmpq	%r9, %rax
               	jae	0x434cb0 <mi_arena_alloc_from+0x3f0>
               	leaq	8(%rbp), %rdi
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, (%rbp)
               	je	0x434c00 <mi_arena_alloc_from+0x340>
               	jmp	0x434c23 <mi_arena_alloc_from+0x363>
               	movq	%r11, %rbp
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %rdx
               	jbe	0x434c51 <mi_arena_alloc_from+0x391>
               	nopw	(%rax,%rax)
               	movq	$0, (%rbp)
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	ja	0x434c40 <mi_arena_alloc_from+0x380>
               	cmpq	%r11, %rbp
               	jne	0x434c6d <mi_arena_alloc_from+0x3ad>
               	movq	(%r11), %rax
               	notq	%rcx
               	movq	%rax, %rsi
               	andq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, (%r11)
               	jne	0x434c60 <mi_arena_alloc_from+0x3a0>
               	cmpq	$4, %rdx
               	je	0x434a40 <mi_arena_alloc_from+0x180>
               	movq	(%r11), %r10
               	testq	%r10, %r10
               	je	0x434c99 <mi_arena_alloc_from+0x3d9>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434b17 <mi_arena_alloc_from+0x257>
               	jmp	0x434a40 <mi_arena_alloc_from+0x180>
               	movl	$64, %ebp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434b17 <mi_arena_alloc_from+0x257>
               	jmp	0x434a40 <mi_arena_alloc_from+0x180>
               	movq	(%rbp), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rsi, %rax
               	jne	0x434c23 <mi_arena_alloc_from+0x363>
               	movq	%rax, %rdi
               	orq	%rsi, %rdi
               	lock
               	cmpxchgq	%rdi, (%rbp)
               	jne	0x434cc0 <mi_arena_alloc_from+0x400>
               	jmp	0x434da6 <mi_arena_alloc_from+0x4e6>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434d0f <mi_arena_alloc_from+0x44f>
               	nopl	(%rax)
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	%rbp, %r14
               	ja	0x434ab0 <mi_arena_alloc_from+0x1f0>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434cf0 <mi_arena_alloc_from+0x430>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%r8,8)
               	jne	0x434d06 <mi_arena_alloc_from+0x446>
               	jmp	0x434da6 <mi_arena_alloc_from+0x4e6>
               	movq	(%r11), %rax
               	cmpq	$-1, %rax
               	je	0x434a40 <mi_arena_alloc_from+0x180>
               	je	0x434d4e <mi_arena_alloc_from+0x48e>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434a40 <mi_arena_alloc_from+0x180>
               	jmp	0x434d5f <mi_arena_alloc_from+0x49f>
               	movl	$64, %r14d
               	cmpq	16(%rsp), %r14
               	ja	0x434a40 <mi_arena_alloc_from+0x180>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434d91 <mi_arena_alloc_from+0x4d1>
               	nop
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434a40 <mi_arena_alloc_from+0x180>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434d70 <mi_arena_alloc_from+0x4b0>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, (%r11)
               	jne	0x434d86 <mi_arena_alloc_from+0x4c6>
               	shlq	$6, %r8
               	addq	%r8, %r14
               	movq	200(%rsp), %rax
               	movq	192(%rsp), %r13
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%r12)
               	movq	(%r12), %r15
               	movq	%r14, %rbp
               	shlq	$24, %rbp
               	movq	%r14, %rcx
               	shlq	$8, %rcx
               	movq	56(%rsp), %rdx
               	addl	$1, %edx
               	movzbl	%dl, %edx
               	orq	%rcx, %rdx
               	movq	%rdx, (%rax)
               	movq	40(%r12), %rdi
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	xorl	%ecx, %ecx
               	callq	0x435090 <_mi_bitmap_claim_across>
               	movb	%al, (%r13)
               	movb	30(%r12), %al
               	movq	32(%rsp), %rcx
               	movb	%al, (%rcx)
               	movb	$1, %al
               	cmpb	$0, 30(%r12)
               	jne	0x434e1b <mi_arena_alloc_from+0x55b>
               	movb	29(%r12), %al
               	addq	%rbp, %r15
               	movq	64(%rsp), %rcx
               	movb	%al, (%rcx)
               	cmpb	$0, 29(%r12)
               	movq	40(%rsp), %r13
               	je	0x434e51 <mi_arena_alloc_from+0x591>
               	movb	$1, (%r13)
               	jmp	0x434e3c <mi_arena_alloc_from+0x57c>
               	xorl	%r15d, %r15d
               	movq	%r15, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpb	$0, (%r13)
               	je	0x434ea3 <mi_arena_alloc_from+0x5e3>
               	movq	48(%r12), %rdi
               	leaq	15(%rsp), %rcx
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	callq	0x435090 <_mi_bitmap_claim_across>
               	cmpb	$0, 15(%rsp)
               	je	0x434e3c <mi_arena_alloc_from+0x57c>
               	shlq	$24, %rbx
               	leaq	14(%rsp), %r8
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42da30 <mi_os_commitx>
               	cmpb	$0, 14(%rsp)
               	je	0x434e3c <mi_arena_alloc_from+0x57c>
               	movq	192(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x434e3c <mi_arena_alloc_from+0x57c>
               	movq	%r15, %r11
               	movq	48(%r12), %rdi
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	andl	$63, %r14d
               	leaq	(%r14,%rbx), %rax
               	cmpq	$64, %rax
               	ja	0x43501a <mi_arena_alloc_from+0x75a>
               	cmpq	$63, %rbx
               	jbe	0x434ed3 <mi_arena_alloc_from+0x613>
               	movq	$-1, %rsi
               	jmp	0x434ef1 <mi_arena_alloc_from+0x631>
               	testq	%rbx, %rbx
               	je	0x435010 <mi_arena_alloc_from+0x750>
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	xorl	%r10d, %r10d
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	(%rdi,%rbp,8), %rcx
               	andq	%rsi, %rcx
               	cmpq	%rsi, %rcx
               	sete	%cl
               	leaq	(%rdi,%rbp,8), %rdi
               	addq	$8, %rdi
               	testq	%rdx, %rdx
               	je	0x434feb <mi_arena_alloc_from+0x72b>
               	leaq	-1(%rdx), %r9
               	movq	%rdx, %rsi
               	andq	$3, %rsi
               	je	0x434f4d <mi_arena_alloc_from+0x68d>
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	andq	%r10, %rbp
               	cmpq	%r10, %rbp
               	movzbl	%cl, %ecx
               	cmovnel	%ebx, %ecx
               	addq	$8, %rdi
               	addq	$-1, %rsi
               	jne	0x434f30 <mi_arena_alloc_from+0x670>
               	andq	$-4, %rdx
               	cmpq	$3, %r9
               	movq	%r11, %r15
               	jb	0x434fee <mi_arena_alloc_from+0x72e>
               	leaq	-4(%rdx), %rsi
               	testb	$4, %sil
               	jne	0x434f94 <mi_arena_alloc_from+0x6d4>
               	movq	(%rdi), %rdx
               	movq	8(%rdi), %rbp
               	andq	%rdx, %rbp
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rbx
               	andq	%rdx, %rbx
               	andq	%rbp, %rbx
               	movq	%r11, %r15
               	andq	%r10, %rbx
               	xorl	%edx, %edx
               	cmpq	%r10, %rbx
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	addq	$32, %rdi
               	movq	%rsi, %rdx
               	cmpq	$4, %rsi
               	jb	0x434fee <mi_arena_alloc_from+0x72e>
               	xorl	%r9d, %r9d
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	movq	8(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	16(%rdi), %rbp
               	movq	24(%rdi), %rsi
               	andq	%rbp, %rsi
               	andq	%rbx, %rsi
               	movq	32(%rdi), %rbp
               	movq	40(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	48(%rdi), %rbp
               	movq	56(%rdi), %rax
               	andq	%rbp, %rax
               	andq	%rbx, %rax
               	andq	%rsi, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%r9d, %ecx
               	addq	$64, %rdi
               	addq	$-8, %rdx
               	jne	0x434fa0 <mi_arena_alloc_from+0x6e0>
               	movq	%r11, %r15
               	testq	%r8, %r8
               	je	0x435004 <mi_arena_alloc_from+0x744>
               	movq	(%rdi), %rax
               	andq	%r8, %rax
               	xorl	%edx, %edx
               	cmpq	%r8, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	andb	$1, %cl
               	movb	%cl, (%r13)
               	jmp	0x434e3c <mi_arena_alloc_from+0x57c>
               	xorl	%r10d, %r10d
               	xorl	%esi, %esi
               	jmp	0x434ef4 <mi_arena_alloc_from+0x634>
               	movl	$64, %r9d
               	subq	%r14, %r9
               	movq	%r14, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r14d, %ecx
               	shlq	%cl, %rdx
               	xorl	%r8d, %r8d
               	cmpq	$1, %r14
               	movl	$0, %esi
               	sbbq	%rsi, %rsi
               	orq	%rdx, %rsi
               	subq	%r9, %rbx
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rbx
               	je	0x434ef9 <mi_arena_alloc_from+0x639>
               	movq	$-1, %r10
               	movq	$-1, %r8
               	movl	%ebx, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x434ef9 <mi_arena_alloc_from+0x639>
               	nopw	%cs:(%rax,%rax)

<_mi_bitmap_claim_across>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rcx, %r8
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x435347 <_mi_bitmap_claim_across+0x2b7>
               	cmpq	$63, %rsi
               	jbe	0x4350c4 <_mi_bitmap_claim_across+0x34>
               	movq	$-1, %rbp
               	jmp	0x4350e1 <_mi_bitmap_claim_across+0x51>
               	testq	%rsi, %rsi
               	je	0x43520c <_mi_bitmap_claim_across+0x17c>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	xorl	%edx, %edx
               	leaq	(%rdi,%rax,8), %rcx
               	movq	(%rdi,%rax,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%rbp, %rsi
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	jne	0x435100 <_mi_bitmap_claim_across+0x70>
               	xorl	%edi, %edi
               	andq	%rbp, %rax
               	sete	%r15b
               	xorl	%esi, %esi
               	cmpq	%rbp, %rax
               	setne	%r11b
               	addq	$8, %rcx
               	testq	%rdx, %rdx
               	je	0x43513b <_mi_bitmap_claim_across+0xab>
               	testb	$1, %dl
               	jne	0x435143 <_mi_bitmap_claim_across+0xb3>
               	movq	%rdx, %r13
               	cmpq	$1, %rdx
               	jne	0x435189 <_mi_bitmap_claim_across+0xf9>
               	jmp	0x4352f3 <_mi_bitmap_claim_across+0x263>
               	movl	%r15d, %edi
               	jmp	0x4352f3 <_mi_bitmap_claim_across+0x263>
               	leaq	-1(%rdx), %r13
               	movq	(%rcx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rbp
               	orq	%r10, %rbp
               	lock
               	cmpxchgq	%rbp, (%rcx)
               	jne	0x435150 <_mi_bitmap_claim_across+0xc0>
               	xorl	%ebp, %ebp
               	andq	%r10, %rax
               	movb	%r15b, %dil
               	cmovnel	%ebp, %edi
               	cmpq	%r10, %rax
               	movb	%r11b, %sil
               	movl	$1, %r11d
               	cmovel	%esi, %r11d
               	addq	$8, %rcx
               	movl	%edi, %r15d
               	cmpq	$1, %rdx
               	je	0x4352f3 <_mi_bitmap_claim_across+0x263>
               	leaq	-2(%r13), %rbp
               	testb	$2, %bpl
               	jne	0x435216 <_mi_bitmap_claim_across+0x186>
               	movq	(%rcx), %rdx
               	nopw	(%rax,%rax)
               	movq	%rdx, %rsi
               	orq	%r10, %rsi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	movq	%rax, %rdx
               	jne	0x4351a0 <_mi_bitmap_claim_across+0x110>
               	movq	8(%rcx), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 8(%rcx)
               	jne	0x4351c0 <_mi_bitmap_claim_across+0x130>
               	movq	%rax, %rsi
               	orq	%rdx, %rsi
               	xorl	%ebx, %ebx
               	testq	%rsi, %r10
               	movzbl	%r15b, %edi
               	cmovnel	%ebx, %edi
               	andq	%rdx, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	addq	$16, %rcx
               	movq	%rbp, %r13
               	movl	%edi, %r15d
               	cmpq	$2, %rbp
               	jae	0x435220 <_mi_bitmap_claim_across+0x190>
               	jmp	0x4352f3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r10d, %r10d
               	xorl	%ebp, %ebp
               	jmp	0x4350e4 <_mi_bitmap_claim_across+0x54>
               	cmpq	$2, %rbp
               	jb	0x4352f3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r14d, %r14d
               	movl	$1, %r12d
               	movl	%r15d, %edi
               	nopl	(%rax)
               	movq	(%rcx), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	orq	%r10, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	movq	%rax, %rsi
               	jne	0x435240 <_mi_bitmap_claim_across+0x1b0>
               	movq	8(%rcx), %rbp
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdx
               	orq	%r10, %rdx
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdx, 8(%rcx)
               	movq	%rax, %rbp
               	jne	0x435260 <_mi_bitmap_claim_across+0x1d0>
               	movq	%rbp, %rdx
               	orq	%rsi, %rdx
               	andq	%rsi, %rbp
               	movq	16(%rcx), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbx, %rsi
               	orq	%r10, %rsi
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	movq	%rax, %rbx
               	jne	0x435290 <_mi_bitmap_claim_across+0x200>
               	addq	$-4, %r13
               	movq	24(%rcx), %rax
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 24(%rcx)
               	jne	0x4352b0 <_mi_bitmap_claim_across+0x220>
               	movq	%rax, %rsi
               	orq	%rbx, %rsi
               	orq	%rdx, %rsi
               	testq	%rsi, %r10
               	movzbl	%dil, %edi
               	cmovnel	%r14d, %edi
               	andq	%rbx, %rax
               	andq	%rbp, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %r11d
               	cmovnel	%r12d, %r11d
               	addq	$32, %rcx
               	testq	%r13, %r13
               	jne	0x435230 <_mi_bitmap_claim_across+0x1a0>
               	testq	%r9, %r9
               	je	0x43532a <_mi_bitmap_claim_across+0x29a>
               	movq	(%rcx), %rax
               	nop
               	movq	%rax, %rdx
               	orq	%r9, %rdx
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	jne	0x435300 <_mi_bitmap_claim_across+0x270>
               	xorl	%ecx, %ecx
               	andq	%r9, %rax
               	movzbl	%dil, %edi
               	cmovnel	%ecx, %edi
               	cmpq	%r9, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	testq	%r8, %r8
               	je	0x435336 <_mi_bitmap_claim_across+0x2a6>
               	andb	$1, %r11b
               	movb	%r11b, (%r8)
               	andb	$1, %dil
               	movl	%edi, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$64, %r11d
               	subq	%rdx, %r11
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r9d, %r9d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r11, %rsi
               	movq	%rsi, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rsi
               	je	0x4350e9 <_mi_bitmap_claim_across+0x59>
               	movq	$-1, %r10
               	movq	$-1, %r9
               	movl	%esi, %ecx
               	shlq	%cl, %r9
               	notq	%r9
               	jmp	0x4350e9 <_mi_bitmap_claim_across+0x59>

<_mi_usable_size>:
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	je	0x4353f0 <_mi_usable_size+0x40>
               	movl	%edi, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	shlq	$6, %rdx
               	leaq	(%rax,%rdx), %r8
               	addq	$120, %r8
               	testb	$2, 126(%rax,%rdx)
               	movl	140(%rax,%rdx), %esi
               	jne	0x4353f6 <_mi_usable_size+0x46>
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x435404 <_mi_usable_size+0x54>
               	movq	%rsi, %rax
               	retq
               	xorl	%esi, %esi
               	movq	%rsi, %rax
               	retq
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x43541b <_mi_usable_size+0x6b>
               	movq	72(%rax), %r9
               	jmp	0x435424 <_mi_usable_size+0x74>
               	movq	%r8, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x435458 <_mi_usable_size+0xa8>
               	movq	72(%rax), %rdx
               	jmp	0x435463 <_mi_usable_size+0xb3>
               	movl	$1, %r9d
               	shlq	%cl, %r9
               	movzbl	(%r8), %r11d
               	imulq	%r11, %r9
               	addq	%rax, %r9
               	testq	%r11, %r11
               	jne	0x4354b9 <_mi_usable_size+0x109>
               	addq	80(%rax), %r9
               	cmpl	$1, %edx
               	ja	0x4354b9 <_mi_usable_size+0x109>
               	testl	%esi, %esi
               	je	0x4354b9 <_mi_usable_size+0x109>
               	movq	%r9, %rax
               	shrq	$32, %rax
               	je	0x4354a1 <_mi_usable_size+0xf1>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4354a8 <_mi_usable_size+0xf8>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movzbl	(%r8), %ecx
               	testq	%rcx, %rcx
               	je	0x435470 <_mi_usable_size+0xc0>
               	movq	%rdx, %rax
               	retq
               	movq	80(%rax), %r9
               	movq	%rdx, %r8
               	subq	%r9, %r8
               	cmpl	$1, %edi
               	ja	0x43549d <_mi_usable_size+0xed>
               	testl	%esi, %esi
               	je	0x43549d <_mi_usable_size+0xed>
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4354ee <_mi_usable_size+0x13e>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4354f2 <_mi_usable_size+0x142>
               	movq	%r8, %rax
               	retq
               	movl	%r9d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	leaq	(%r9,%rax), %rcx
               	cmpq	%rsi, %rax
               	cmovbq	%rcx, %r9
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x435508 <_mi_usable_size+0x158>
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x4354df <_mi_usable_size+0x12f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rdi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %edi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rax
               	retq
               	andq	$-4194304, %r8          # imm = 0xFFC00000
               	movl	112(%r8), %eax
               	cmpl	$3, %eax
               	jne	0x43551e <_mi_usable_size+0x16e>
               	movq	72(%r8), %r10
               	jmp	0x43552b <_mi_usable_size+0x17b>
               	movb	96(%r8), %cl
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	testb	%r11b, %r11b
               	jne	0x43557c <_mi_usable_size+0x1cc>
               	movq	80(%r8), %rdx
               	movq	%r10, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x435579 <_mi_usable_size+0x1c9>
               	testl	%esi, %esi
               	je	0x435579 <_mi_usable_size+0x1c9>
               	imulq	%r11, %r10
               	addq	%r8, %r10
               	addq	%rdx, %r10
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x435560 <_mi_usable_size+0x1b0>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x435567 <_mi_usable_size+0x1b7>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r10
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	orq	%r10, %rax
               	shrq	$32, %rax
               	je	0x435598 <_mi_usable_size+0x1e8>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	movq	%rdx, %rdi
               	jmp	0x4355a1 <_mi_usable_size+0x1f1>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movl	%edx, %edi
               	movl	112(%r8), %edx
               	cmpl	$3, %edx
               	jne	0x4355b0 <_mi_usable_size+0x200>
               	movq	72(%r8), %rax
               	jmp	0x4355bc <_mi_usable_size+0x20c>
               	movb	96(%r8), %cl
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%r11b, %r11b
               	je	0x4355cb <_mi_usable_size+0x21b>
               	movq	%rax, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movq	80(%r8), %r9
               	movq	%rax, %rcx
               	subq	%r9, %rcx
               	cmpl	$1, %edx
               	ja	0x435614 <_mi_usable_size+0x264>
               	testl	%esi, %esi
               	je	0x435614 <_mi_usable_size+0x264>
               	imulq	%r11, %rax
               	addq	%rax, %r8
               	addq	%r9, %r8
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x4355fb <_mi_usable_size+0x24b>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x435602 <_mi_usable_size+0x252>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	nop

<_mi_heap_malloc_zero>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x4356a8 <_mi_heap_malloc_zero+0x88>
               	leaq	7(%r14), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x4356a8 <_mi_heap_malloc_zero+0x88>
               	addl	$1, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	testq	%rbx, %rbx
               	je	0x43569d <_mi_heap_malloc_zero+0x7d>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	%ebx, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movb	96(%rax), %cl
               	shrq	%cl, %rdx
               	cmpq	$9, %r14
               	jb	0x435688 <_mi_heap_malloc_zero+0x68>
               	shlq	$6, %rdx
               	movb	127(%rax,%rdx), %al
               	andb	$1, %al
               	je	0x435688 <_mi_heap_malloc_zero+0x68>
               	movq	$0, (%rbx)
               	jmp	0x43569d <_mi_heap_malloc_zero+0x7d>
               	movq	%rbx, %rdi
               	callq	0x4353b0 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413750 <memset@plt>
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%r14, %rsi
               	callq	0x431c10 <_mi_malloc_generic>
               	movq	%rax, %rbx
               	testq	%rbx, %rbx
               	jne	0x435656 <_mi_heap_malloc_zero+0x36>
               	jmp	0x43569d <_mi_heap_malloc_zero+0x7d>
               	nopw	(%rax,%rax)

<__cxa_demangle>:
               	movl	$4294967294, (%rcx)     # imm = 0xFFFFFFFE
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<konan::consoleErrorf(char const*, ...)>:
               	subq	$1240, %rsp             # imm = 0x4D8
               	movq	%rdi, %r10
               	testb	%al, %al
               	je	0x435715 <konan::consoleErrorf(char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	1248(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$1024, %esi             # imm = 0x400
               	movq	%r10, %rdx
               	callq	0x4138a0 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43578e <konan::consoleErrorf(char const*, ...)+0xbe>
               	cmpl	$1023, %eax             # imm = 0x3FF
               	movl	$1023, %edx             # imm = 0x3FF
               	cmovbl	%eax, %edx
               	leaq	208(%rsp), %rsi
               	movl	$2, %edi
               	callq	0x413930 <write@plt>
               	addq	$1240, %rsp             # imm = 0x4D8
               	retq
               	nopw	%cs:(%rax,%rax)

<konan::gettid()>:
               	movl	$186, %edi
               	xorl	%eax, %eax
               	jmp	0x413800 <syscall@plt>
               	nopl	(%rax)

<kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$216, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x4357fb <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x4b>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x435845 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x95>
               	cmpq	$1, %rbx
               	jne	0x435849 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x99>
               	movb	$0, (%r14)
               	movl	$1, %ebx
               	jmp	0x43586e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	xorl	%ebx, %ebx
               	jmp	0x43586e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movq	%rsp, %rcx
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x4138a0 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43586e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	addq	%rax, %r14
               	subq	%rax, %rbx
               	movq	%r14, %rax
               	movq	%rbx, %rdx
               	addq	$216, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>:
               	subq	$216, %rsp
               	movq	%rdx, %rdi
               	testb	%al, %al
               	je	0x4358c5 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rsi
               	callq	0x435910 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>
               	callq	0x4359b0 <konan::abort()>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$1024, %rsp             # imm = 0x400
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	61761(%rip), %rdx       # 0x444a6a <typeinfo name for kotlin::gc::GCSchedulerData+0x1901>
               	movq	%rsp, %rdi
               	movl	$1024, %esi             # imm = 0x400
               	xorl	%eax, %eax
               	callq	0x4357b0 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	testq	%rdx, %rdx
               	je	0x435950 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x40>
               	movq	%rdx, %rbx
               	cmpq	$1, %rdx
               	jne	0x435954 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x44>
               	movb	$0, (%rax)
               	movl	$1, %ebx
               	jmp	0x435979 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	xorl	%ebx, %ebx
               	jmp	0x435979 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	callq	0x4138a0 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x435979 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	subq	%rax, %rbx
               	movl	$1024, %edx             # imm = 0x400
               	subl	%ebx, %edx
               	movq	%rsp, %rsi
               	movl	$2, %edi
               	callq	0x413930 <write@plt>
               	leaq	61833(%rip), %rdi       # 0x444b1d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	xorl	%eax, %eax
               	callq	0x4356d0 <konan::consoleErrorf(char const*, ...)>
               	addq	$1024, %rsp             # imm = 0x400
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>

<konan::abort()>:
               	pushq	%rax
               	callq	0x413940 <abort@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r14
               	leaq	8(%rsp), %rdi
               	callq	0x436280 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
               	movq	8(%rsp), %rbx
               	movq	16(%rsp), %r12
               	movq	%r12, %r13
               	subq	%rbx, %r13
               	movq	%r13, %r15
               	sarq	$3, %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	$0, 16(%r14)
               	testq	%r13, %r13
               	je	0x435a14 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x54>
               	movl	$8, %esi
               	movq	%r15, %rdi
               	callq	0x413700 <calloc@plt>
               	jmp	0x435a16 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x56>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	%rax, 8(%r14)
               	leaq	(%rax,%r15,8), %rcx
               	movq	%rcx, 16(%r14)
               	cmpq	%r12, %rbx
               	je	0x435b48 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	addq	$-8, %r13
               	cmpq	$24, %r13
               	jb	0x435b30 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	shrq	$3, %r13
               	addq	$1, %r13
               	leaq	(%rbx,%r13,8), %rcx
               	cmpq	%rcx, %rax
               	jae	0x435a5a <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x9a>
               	leaq	(%rax,%r13,8), %rcx
               	cmpq	%rcx, %rbx
               	jb	0x435b30 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	%r13, %rcx
               	andq	$-4, %rcx
               	leaq	-4(%rcx), %rdi
               	movq	%rdi, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$3, %edx
               	cmpq	$12, %rdi
               	jae	0x435a7f <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xbf>
               	xorl	%edi, %edi
               	jmp	0x435ae8 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x128>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edi, %edi
               	nopl	(%rax,%rax)
               	movups	(%rbx,%rdi,8), %xmm0
               	movups	16(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, (%rax,%rdi,8)
               	movups	%xmm1, 16(%rax,%rdi,8)
               	movups	32(%rbx,%rdi,8), %xmm0
               	movups	48(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 32(%rax,%rdi,8)
               	movups	%xmm1, 48(%rax,%rdi,8)
               	movups	64(%rbx,%rdi,8), %xmm0
               	movups	80(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 64(%rax,%rdi,8)
               	movups	%xmm1, 80(%rax,%rdi,8)
               	movups	96(%rbx,%rdi,8), %xmm0
               	movups	112(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 96(%rax,%rdi,8)
               	movups	%xmm1, 112(%rax,%rdi,8)
               	addq	$16, %rdi
               	addq	$4, %rsi
               	jne	0x435a90 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xd0>
               	testq	%rdx, %rdx
               	je	0x435b1b <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x15b>
               	leaq	16(,%rdi,8), %rsi
               	negq	%rdx
               	nopl	(%rax)
               	movups	-16(%rbx,%rsi), %xmm0
               	movups	(%rbx,%rsi), %xmm1
               	movups	%xmm0, -16(%rax,%rsi)
               	movups	%xmm1, (%rax,%rsi)
               	addq	$32, %rsi
               	incq	%rdx
               	jne	0x435b00 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x140>
               	leaq	(%rax,%rcx,8), %rax
               	cmpq	%rcx, %r13
               	je	0x435b48 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	leaq	(%rbx,%rcx,8), %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, (%rax)
               	addq	$8, %rbx
               	addq	$8, %rax
               	cmpq	%rbx, %r12
               	jne	0x435b30 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r14)
               	testq	%rbx, %rbx
               	je	0x435b59 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x199>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1016, %rsp             # imm = 0x3F8
               	movq	%r9, %r13
               	movl	%r8d, %r15d
               	movq	%rcx, %rbx
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x435bd4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x64>
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm1, 240(%rsp)
               	movaps	%xmm2, 256(%rsp)
               	movaps	%xmm3, 272(%rsp)
               	movaps	%xmm4, 288(%rsp)
               	movaps	%xmm5, 304(%rsp)
               	movaps	%xmm6, 320(%rsp)
               	movaps	%xmm7, 336(%rsp)
               	movl	$3176496, 496(%rsp)     # imm = 0x307830
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	leaq	112(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413950 <dladdr@plt>
               	movq	112(%rsp), %rbp
               	testq	%rbp, %rbp
               	je	0x435cee <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x17e>
               	movq	%rbp, %rdi
               	movl	$47, %esi
               	callq	0x413960 <strrchr@plt>
               	leaq	1(%rax), %r8
               	testq	%rax, %rax
               	cmoveq	%rbp, %r8
               	testq	%rbx, %rbx
               	je	0x435cfe <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x18e>
               	movq	%r8, 64(%rsp)
               	leaq	144(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413950 <dladdr@plt>
               	testl	%eax, %eax
               	je	0x435c5e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	160(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x435c5e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	%rbx, %rbp
               	subq	168(%rsp), %rbp
               	jmp	0x435cd2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x162>
               	cmpq	$0, 280706(%rip)        # 0x47a4e8 <(anonymous namespace)::symbols>
               	je	0x435dbf <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x24f>
               	movq	280693(%rip), %rcx      # 0x47a4e8 <(anonymous namespace)::symbols>
               	movq	(%rcx), %rax
               	movq	8(%rcx), %rcx
               	jmp	0x435c84 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x114>
               	nop
               	addq	$24, %rax
               	cmpq	%rcx, %rax
               	je	0x435d03 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x193>
               	movq	(%rax), %rdx
               	movq	8(%rax), %rsi
               	jmp	0x435ca4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x134>
               	nopl	(%rax)
               	addq	$24, %rdx
               	cmpq	%rsi, %rdx
               	jae	0x435c80 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x110>
               	movq	8(%rdx), %rdi
               	cmpq	%rbx, %rdi
               	ja	0x435ca0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rdx), %rbp
               	addq	%rdi, %rbp
               	cmpq	%rbx, %rbp
               	jbe	0x435ca0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rax), %rsi
               	movq	%rbx, %rbp
               	subq	%rdi, %rbp
               	testq	%rsi, %rsi
               	je	0x435d06 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	movl	(%rdx), %eax
               	addq	%rax, %rsi
               	leaq	496(%rsp), %rdi
               	movl	$512, %edx              # imm = 0x200
               	callq	0x4138b0 <strncpy@plt>
               	movb	$0, 1007(%rsp)
               	jmp	0x435d06 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	leaq	60810(%rip), %r8        # 0x444a7f <typeinfo name for kotlin::gc::GCSchedulerData+0x1916>
               	testq	%rbx, %rbx
               	jne	0x435c2b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xbb>
               	movq	%rbx, %rbp
               	jmp	0x435d0b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x19b>
               	movq	%rbx, %rbp
               	movq	64(%rsp), %r8
               	leaq	496(%rsp), %r10
               	leaq	60777(%rip), %rdx       # 0x444a83 <typeinfo name for kotlin::gc::GCSchedulerData+0x191a>
               	movl	$1023, %esi             # imm = 0x3FF
               	movq	%r14, %rdi
               	movq	%r12, %rcx
               	movq	%rbx, %r9
               	movl	$0, %eax
               	pushq	%rbp
               	pushq	%r10
               	callq	0x4357b0 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	addq	$16, %rsp
               	testb	%r15b, %r15b
               	je	0x435d55 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x1e5>
               	leaq	60761(%rip), %rcx       # 0x444a9e <typeinfo name for kotlin::gc::GCSchedulerData+0x1935>
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	xorl	%eax, %eax
               	callq	0x4357b0 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	leaq	176(%rsp), %rcx
               	movq	%rcx, 368(%rsp)
               	leaq	1072(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movabsq	$206158430256, %rcx     # imm = 0x3000000030
               	movq	%rcx, 352(%rsp)
               	testq	%rdx, %rdx
               	je	0x435dad <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	cmpq	$1, %rdx
               	jne	0x435d97 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x227>
               	movb	$0, (%rax)
               	jmp	0x435dad <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	leaq	352(%rsp), %rcx
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%r13, %rdx
               	callq	0x4138a0 <vsnprintf@plt>
               	addq	$1016, %rsp             # imm = 0x3F8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x435de3 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x273>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	jmp	0x435de5 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x275>
               	xorl	%eax, %eax
               	movq	%rax, 280316(%rip)      # 0x47a4e8 <(anonymous namespace)::symbols>
               	leaq	60598(%rip), %rdi       # 0x444aa9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1940>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x413970 <open@plt>
               	testl	%eax, %eax
               	js	0x435c6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movl	%eax, %ebp
               	leaq	352(%rsp), %rdx
               	movl	$1, %edi
               	movl	%eax, %esi
               	callq	0x413980 <__fxstat@plt>
               	testl	%eax, %eax
               	js	0x435c6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	400(%rsp), %rsi
               	xorl	%edi, %edi
               	movl	$1, %edx
               	movl	$2, %ecx
               	movl	%ebp, %r8d
               	xorl	%r9d, %r9d
               	callq	0x413860 <mmap@plt>
               	cmpq	$-1, %rax
               	je	0x435c6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	testq	%rax, %rax
               	je	0x435c6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	cmpw	$0, 60(%rax)
               	je	0x435c6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	40(%rax), %rsi
               	addq	%rax, %rsi
               	xorl	%edx, %edx
               	movq	%r13, 48(%rsp)
               	movl	%r15d, 12(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	%rsi, 72(%rsp)
               	movq	%r14, 104(%rsp)
               	jmp	0x435ec7 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x357>
               	addq	$8, %r15
               	movq	%rbp, (%r12)
               	movq	%r9, 8(%r12)
               	movq	%r14, 16(%r12)
               	movq	(%r15), %rcx
               	addq	$24, %rcx
               	movq	%r15, %rdi
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	%rcx, (%rdi)
               	addq	$1, %rdx
               	movzwl	60(%rax), %ecx
               	cmpq	%rcx, %rdx
               	movq	104(%rsp), %r14
               	jae	0x435c6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	%rdx, %r14
               	shlq	$6, %r14
               	movl	4(%rsi,%r14), %ecx
               	cmpl	$2, %ecx
               	jne	0x436077 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x507>
               	leaq	(%rsi,%r14), %r8
               	addq	$4, %r8
               	movq	24(%rsi,%r14), %r15
               	addq	%rax, %r15
               	movq	32(%rsi,%r14), %r10
               	addq	%r15, %r10
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %rbp
               	addq	%rax, %rbp
               	movq	280028(%rip), %r12      # 0x47a4e8 <(anonymous namespace)::symbols>
               	movq	8(%r12), %r13
               	cmpq	16(%r12), %r13
               	je	0x435f47 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x3d7>
               	addq	$8, %r12
               	movq	%r15, (%r13)
               	movq	%r10, 8(%r13)
               	movq	%rbp, 16(%r13)
               	movq	(%r12), %rcx
               	addq	$24, %rcx
               	movq	%r12, %rdi
               	movq	48(%rsp), %r13
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	jmp	0x436071 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x501>
               	movq	(%r12), %r9
               	movq	%r13, %rax
               	subq	%r9, %rax
               	movq	%rax, %rsi
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %rsi
               	testq	%rax, %rax
               	movq	%rsi, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rsi), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%rsi, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%r8, 40(%rsp)
               	movq	%rdi, 32(%rsp)
               	je	0x435fd2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x462>
               	movq	%rsi, 88(%rsp)
               	movl	$24, %esi
               	movq	%r9, 24(%rsp)
               	movq	%r10, 96(%rsp)
               	callq	0x413700 <calloc@plt>
               	movq	88(%rsp), %rsi
               	movq	96(%rsp), %r10
               	movq	24(%rsp), %r9
               	movq	%rax, %rdx
               	jmp	0x435fd4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x464>
               	xorl	%edx, %edx
               	leaq	(%rsi,%rsi,2), %rax
               	movq	%r15, (%rdx,%rax,8)
               	movq	%r10, 8(%rdx,%rax,8)
               	movq	%rbp, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r9, %r13
               	je	0x43601c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4ac>
               	movq	%rdx, %rbp
               	movq	%r9, %rax
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r13
               	jne	0x436000 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x490>
               	addq	$24, %rbp
               	testq	%r9, %r9
               	movl	12(%rsp), %r15d
               	je	0x436038 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4c8>
               	movq	%r9, %rdi
               	movq	%rdx, %r13
               	callq	0x413730 <free@plt>
               	movq	%r13, %rdx
               	leaq	16(%r12), %rdi
               	movq	%rdx, (%r12)
               	movq	%rbp, 8(%r12)
               	movq	32(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movq	48(%rsp), %r13
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	movq	40(%rsp), %r8
               	movq	%rcx, (%rdi)
               	movl	(%r8), %ecx
               	cmpl	$11, %ecx
               	jne	0x435eb1 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x341>
               	movq	24(%rsi,%r14), %rbp
               	addq	%rax, %rbp
               	movq	32(%rsi,%r14), %r9
               	addq	%rbp, %r9
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %r14
               	addq	%rax, %r14
               	movq	279616(%rip), %r15      # 0x47a4e8 <(anonymous namespace)::symbols>
               	movq	8(%r15), %r12
               	cmpq	16(%r15), %r12
               	jne	0x435e88 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x318>
               	movq	(%r15), %r8
               	movq	%r12, %rax
               	subq	%r8, %rax
               	movq	%rax, %r13
               	sarq	$3, %r13
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %r13
               	testq	%rax, %rax
               	movq	%r13, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r13), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%r13, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%rdi, 40(%rsp)
               	je	0x436131 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c1>
               	movl	$24, %esi
               	movq	%r8, 32(%rsp)
               	movq	%r9, 24(%rsp)
               	callq	0x413700 <calloc@plt>
               	movq	24(%rsp), %r9
               	movq	32(%rsp), %r8
               	movq	%rax, %rdx
               	jmp	0x436133 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c3>
               	xorl	%edx, %edx
               	leaq	(,%r13,2), %rax
               	addq	%r13, %rax
               	movq	%rbp, (%rdx,%rax,8)
               	movq	%r9, 8(%rdx,%rax,8)
               	movq	%r14, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r8, %r12
               	je	0x43617c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x60c>
               	movq	%rdx, %rbp
               	movq	%r8, %rax
               	nop
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r12
               	jne	0x436160 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5f0>
               	addq	$24, %rbp
               	testq	%r8, %r8
               	movq	48(%rsp), %r13
               	je	0x436198 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x628>
               	movq	%r8, %rdi
               	movq	%rdx, %r14
               	callq	0x413730 <free@plt>
               	movq	%r14, %rdx
               	leaq	16(%r15), %rdi
               	movq	%rdx, (%r15)
               	movq	%rbp, 8(%r15)
               	movq	40(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	jmp	0x435eae <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x33e>
               	nop

<std::__throw_length_error(char const*)>:
               	pushq	%rax
               	movq	%rdi, %rcx
               	leaq	59553(%rip), %rdx       # 0x444a7c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435880 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	8(%rdi), %r15
               	cmpq	%r15, %rbx
               	je	0x43622f <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3f>
               	movq	%rdi, %r14
               	jmp	0x436219 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x29>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%r15, %rbx
               	je	0x43622c <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x436210 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	callq	0x413730 <free@plt>
               	jmp	0x436210 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x436241 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x51>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413730 <free@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>:
               	testq	%rdi, %rdi
               	je	0x436270 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
               	movl	%esi, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%esi, %esi
               	jne	0x436270 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
               	cmpl	$1, %eax
               	jne	0x436270 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
               	movb	178980(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x436271 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x21>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)

<kotlin::internal::GetCurrentStackTrace(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movl	$1, %r14d
               	testq	%r12, %r12
               	je	0x4362b9 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x39>
               	xchgl	%r14d, 328(%r12)
               	jmp	0x4362bc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c>
               	xorl	%r12d, %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	$0, 16(%rsp)
               	leaq	317(%rip), %rdi         # 0x436410 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
               	leaq	16(%rsp), %rsi
               	callq	0x413990 <_Unwind_Backtrace@plt>
               	movq	16(%rsp), %rbx
               	cmpq	$4, %rbx
               	jbe	0x43637c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0xfc>
               	addq	$-4, %rbx
               	movq	%rbx, %rax
               	shrq	$61, %rax
               	jne	0x4363db <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x15b>
               	movl	$8, %esi
               	movq	%rbx, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	leaq	(,%rbx,8), %rbp
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	movq	%rbp, %rdx
               	callq	0x413750 <memset@plt>
               	movq	%r13, (%rsp)
               	leaq	(,%rbx,8), %rbx
               	addq	%r13, %rbx
               	movq	%rbx, 8(%rsp)
               	sarq	$3, %rbp
               	movq	$0, 24(%rsp)
               	movq	$4, 32(%rsp)
               	movq	%r13, 40(%rsp)
               	movq	%rbp, 48(%rsp)
               	leaq	195(%rip), %rdi         # 0x436420 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
               	leaq	24(%rsp), %rsi
               	callq	0x413990 <_Unwind_Backtrace@plt>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	%rbx, 16(%r15)
               	jmp	0x436399 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x119>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	$0, 16(%r15)
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x436399 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x119>
               	callq	0x413730 <free@plt>
               	testq	%r12, %r12
               	je	0x4363cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	movl	%r14d, %eax
               	xchgl	%eax, 328(%r12)
               	testl	%r14d, %r14d
               	jne	0x4363cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	cmpl	$1, %eax
               	jne	0x4363cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	movb	178647(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4363cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	addq	$328, %r12              # imm = 0x148
               	movq	%r12, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	59094(%rip), %rdi       # 0x444ab8 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4361d0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	jmp	0x4363f2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x172>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	movq	%r13, %rdi
               	callq	0x436460 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
               	movq	%r12, %rdi
               	movl	%r14d, %esi
               	callq	0x436250 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>:
               	addq	$1, (%rsi)
               	xorl	%eax, %eax
               	retq
               	nopw	(%rax,%rax)

<(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	8(%rsi), %rax
               	testq	%rax, %rax
               	je	0x436439 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x19>
               	addq	$-1, %rax
               	movq	%rax, 8(%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	movq	(%rbx), %rax
               	cmpq	24(%rbx), %rax
               	jae	0x436435 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
               	callq	0x4139a0 <_Unwind_GetIP@plt>
               	movq	(%rbx), %rcx
               	movq	16(%rbx), %rdx
               	leaq	1(%rcx), %rsi
               	movq	%rsi, (%rbx)
               	movq	%rax, (%rdx,%rcx,8)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>:
               	testq	%rdi, %rdi
               	je	0x43646a <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()+0xa>
               	jmp	0x413730 <free@plt>
               	retq
               	nopl	(%rax,%rax)

<CreateStringFromCString>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	testq	%rdi, %rdi
               	je	0x436572 <CreateStringFromCString+0x102>
               	movq	%rdi, %r12
               	callq	0x413710 <strlen@plt>
               	movq	%rax, %r13
               	leaq	(%r12,%rax), %rbx
               	movq	%r12, (%rsp)
               	testq	%rax, %rax
               	movq	%r15, 24(%rsp)
               	jle	0x436579 <CreateStringFromCString+0x109>
               	movq	%r13, 32(%rsp)
               	movq	%r12, 16(%rsp)
               	xorl	%r14d, %r14d
               	movq	%rsp, %r13
               	leaq	12(%rsp), %rbp
               	movl	$52, %r12d
               	movl	$10, %r15d
               	jmp	0x4364e9 <CreateStringFromCString+0x79>
               	nop
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	movl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jae	0x436559 <CreateStringFromCString+0xe9>
               	movl	$0, 12(%rsp)
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	callq	0x4366e0 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r12d
               	jb	0x4364d0 <CreateStringFromCString+0x60>
               	btl	%eax, %r15d
               	jae	0x43653d <CreateStringFromCString+0xcd>
               	movq	(%rsp), %rcx
               	addq	$1, %rcx
               	nopl	(%rax,%rax)
               	movq	%rcx, %rax
               	movq	%rcx, (%rsp)
               	cmpq	%rbx, %rcx
               	jae	0x4364dc <CreateStringFromCString+0x6c>
               	movzbl	(%rax), %edx
               	andb	$-64, %dl
               	leaq	1(%rax), %rcx
               	cmpb	$-128, %dl
               	je	0x436520 <CreateStringFromCString+0xb0>
               	jmp	0x4364dc <CreateStringFromCString+0x6c>
               	xorl	%ecx, %ecx
               	cmpl	$65535, 12(%rsp)        # imm = 0xFFFF
               	movq	(%rsp), %rax
               	seta	%cl
               	addl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jb	0x4364e9 <CreateStringFromCString+0x79>
               	testl	%r14d, %r14d
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %r12
               	movq	32(%rsp), %r13
               	jns	0x43657c <CreateStringFromCString+0x10c>
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	xorl	%eax, %eax
               	jmp	0x4366bf <CreateStringFromCString+0x24f>
               	xorl	%r14d, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%r14d, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	135957(%rip), %rax      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbp)
               	movl	%r14d, 24(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	%rcx, (%r15)
               	movq	%r12, (%rsp)
               	testq	%r13, %r13
               	je	0x4366b5 <CreateStringFromCString+0x245>
               	addq	$32, %rbp
               	movq	%rsp, %r15
               	leaq	12(%rsp), %r12
               	movl	$52, %r14d
               	movl	$10, %r13d
               	jmp	0x436630 <CreateStringFromCString+0x1c0>
               	movl	%eax, %ecx
               	shrl	$10, %ecx
               	addl	$4294956992, %ecx       # imm = 0xFFFFD7C0
               	movw	%cx, (%rbp)
               	andl	$1023, %eax             # imm = 0x3FF
               	orl	$56320, %eax            # imm = 0xDC00
               	movw	%ax, 2(%rbp)
               	addq	$4, %rbp
               	cmpq	%rbx, (%rsp)
               	je	0x4366b5 <CreateStringFromCString+0x245>
               	nopl	(%rax)
               	movl	$0, 12(%rsp)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x4366e0 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r14d
               	jae	0x436660 <CreateStringFromCString+0x1f0>
               	addq	$1, (%rsp)
               	jmp	0x436690 <CreateStringFromCString+0x220>
               	nopw	(%rax,%rax)
               	btl	%eax, %r13d
               	jae	0x4366a5 <CreateStringFromCString+0x235>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	nop
               	movq	%rax, (%rsp)
               	cmpq	%rbx, %rax
               	jae	0x436690 <CreateStringFromCString+0x220>
               	movzbl	(%rax), %ecx
               	andb	$-64, %cl
               	addq	$1, %rax
               	cmpb	$-128, %cl
               	je	0x436670 <CreateStringFromCString+0x200>
               	movl	$65533, %eax            # imm = 0xFFFD
               	movw	%ax, (%rbp)
               	addq	$2, %rbp
               	cmpq	%rbx, (%rsp)
               	jne	0x436630 <CreateStringFromCString+0x1c0>
               	jmp	0x4366b5 <CreateStringFromCString+0x245>
               	movl	12(%rsp), %eax
               	cmpl	$65536, %eax            # imm = 0x10000
               	jb	0x436695 <CreateStringFromCString+0x225>
               	jmp	0x436602 <CreateStringFromCString+0x192>
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %rax
               	movq	%rax, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>:
               	movq	(%rdi), %r8
               	movzbl	(%r8), %ecx
               	testb	%cl, %cl
               	js	0x436703 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x23>
               	movq	%r8, %r9
               	cmpq	%rsi, %r8
               	je	0x4368e8 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	movl	%ecx, (%rdx)
               	addq	$1, %r9
               	movq	%r9, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movl	%ecx, %eax
               	andl	$-32, %eax
               	cmpl	$192, %eax
               	jne	0x436764 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x84>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %esi
               	movl	%esi, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	andl	$31, %ecx
               	shll	$6, %ecx
               	andl	$63, %esi
               	orl	%esi, %ecx
               	movl	$4, %eax
               	cmpl	$128, %ecx
               	jae	0x4366f7 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
               	jmp	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movl	%ecx, %eax
               	andl	$-16, %eax
               	cmpl	$224, %eax
               	jne	0x43681f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x13f>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %r10d
               	movl	%r10d, %r9d
               	andb	$-64, %r9b
               	movl	$3, %eax
               	cmpb	$-128, %r9b
               	jne	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	shll	$12, %ecx
               	movzwl	%cx, %eax
               	andl	$63, %r10d
               	shll	$6, %r10d
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	andl	$63488, %ecx            # imm = 0xF800
               	movl	$5, %eax
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movl	$4, %eax
               	cmpl	$2048, %r10d            # imm = 0x800
               	jb	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	leaq	2(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %esi
               	movl	%esi, %ecx
               	andb	$-64, %cl
               	movl	$3, %eax
               	cmpb	$-128, %cl
               	jne	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	andl	$63, %esi
               	orl	%esi, %r10d
               	movl	%r10d, %ecx
               	jmp	0x4366f7 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
               	movl	%ecx, %r9d
               	andl	$-8, %r9d
               	movl	$2, %eax
               	cmpl	$240, %r9d
               	jne	0x436702 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x22>
               	cmpq	%rsi, %r8
               	je	0x4368e8 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	leaq	1(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x4368e8 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	movzbl	(%rax), %r10d
               	movl	%r10d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x4368f1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x211>
               	andl	$7, %ecx
               	shll	$18, %ecx
               	andl	$63, %r10d
               	shll	$12, %r10d
               	orl	%ecx, %r10d
               	movl	$5, %eax
               	cmpl	$1114111, %r10d         # imm = 0x10FFFF
               	ja	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movl	$4, %eax
               	cmpl	$65536, %r10d           # imm = 0x10000
               	jae	0x436893 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1b3>
               	movq	%r8, (%rdi)
               	retq
               	leaq	2(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x4368e8 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	movzbl	(%rax), %r11d
               	movl	%r11d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x4368f1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x211>
               	leaq	3(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %ecx
               	movl	%ecx, %esi
               	andb	$-64, %sil
               	movl	$3, %eax
               	cmpb	$-128, %sil
               	jne	0x43688f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	andl	$63, %r11d
               	shll	$6, %r11d
               	orl	%r10d, %r11d
               	andl	$63, %ecx
               	orl	%r11d, %ecx
               	jmp	0x4366f7 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
               	movl	$1, %eax
               	movq	%r8, (%rdi)
               	retq
               	movl	$3, %eax
               	movq	%r8, (%rdi)
               	retq
               	nopw	(%rax,%rax)

<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %r14d
               	cmpl	$127, %edi
               	ja	0x436937 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	leaq	16(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x436a33 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x133>
               	movq	16(%rbx), %rcx
               	jmp	0x436a43 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	%r14d, %ebp
               	cmpl	$2047, %r14d            # imm = 0x7FF
               	ja	0x4369ab <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xab>
               	shrl	$6, %ebp
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436aef <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ef>
               	movq	16(%rbx), %rcx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436979 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436b70 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	andb	$63, %r14b
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	cmpq	%r12, %rax
               	je	0x436a3a <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13a>
               	movq	16(%rbx), %rcx
               	jmp	0x436a3f <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13f>
               	cmpl	$65535, %r14d           # imm = 0xFFFF
               	ja	0x436a78 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x178>
               	shrl	$12, %ebp
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436b1d <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x21d>
               	movq	16(%rbx), %rcx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x4369ee <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436b70 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$6, %ebp
               	andb	$63, %bpl
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	cmpq	%r12, %rax
               	je	0x436b06 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x206>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x43696b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436979 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	jmp	0x436a43 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	$15, %ecx
               	orb	$-128, %r14b
               	cmpq	%rcx, %r15
               	jbe	0x436a56 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x156>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x436b70 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r14b, (%rax,%rbp)
               	movq	%r15, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, (%rax,%r15)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	shrl	$18, %ebp
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436b34 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x234>
               	movq	16(%rbx), %rcx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436aae <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436b70 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$12, %ebp
               	andb	$63, %bpl
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	cmpq	%r12, %rax
               	je	0x436b4b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x24b>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x4369e0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x4369ee <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	ja	0x43696b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436979 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x43696b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436979 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	ja	0x4369e0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x4369ee <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436aa0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1a0>
               	jmp	0x436aae <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x4369e0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x4369ee <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	nopw	%cs:(%rax,%rax)

<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movq	(%rdi), %r14
               	movq	8(%rdi), %r12
               	leaq	1(%r12), %rbp
               	leaq	16(%rdi), %rcx
               	cmpq	%rcx, %r14
               	je	0x436bee <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x7e>
               	movq	16(%r15), %rax
               	testq	%rbp, %rbp
               	js	0x436bf8 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x88>
               	cmpq	%rax, %rbp
               	movq	%rcx, (%rsp)
               	jbe	0x436bc1 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x436bc1 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	subq	%rbx, %r12
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	testq	%rbx, %rbx
               	je	0x436be7 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x77>
               	cmpq	$1, %rbx
               	jne	0x436c04 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x94>
               	movb	(%r14), %al
               	movb	%al, (%r13)
               	testq	%r12, %r12
               	jne	0x436c17 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xa7>
               	jmp	0x436c2c <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	movl	$15, %eax
               	testq	%rbp, %rbp
               	jns	0x436b9f <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x2f>
               	leaq	57089(%rip), %rdi       # 0x444b00 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4361d0 <std::__throw_length_error(char const*)>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x413720 <memcpy@plt>
               	testq	%r12, %r12
               	je	0x436c2c <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	leaq	(%rbx,%r13), %rdi
               	addq	$1, %rdi
               	addq	%r14, %rbx
               	cmpq	$1, %r12
               	jne	0x436c50 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xe0>
               	movb	(%rbx), %al
               	movb	%al, (%rdi)
               	cmpq	(%rsp), %r14
               	je	0x436c3a <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r13, (%r15)
               	movq	%rbp, 16(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x413720 <memcpy@plt>
               	cmpq	(%rsp), %r14
               	jne	0x436c32 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xc2>
               	jmp	0x436c3a <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_plusImpl>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movl	8(%rsi), %ebp
               	addl	8(%rdi), %ebp
               	js	0x436d30 <Kotlin_String_plusImpl+0xc0>
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	134146(%rip), %rax      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r12, (%r14)
               	leaq	32(%rbx), %rdi
               	leaq	16(%r15), %rsi
               	movl	8(%r15), %edx
               	addq	%rdx, %rdx
               	callq	0x413720 <memcpy@plt>
               	movslq	8(%r15), %rax
               	leaq	(%rbx,%rax,2), %rdi
               	addq	$32, %rdi
               	movl	8(%r13), %edx
               	addq	$16, %r13
               	addq	%rdx, %rdx
               	movq	%r13, %rsi
               	callq	0x413720 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_subSequence>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	testl	%esi, %esi
               	js	0x436e71 <Kotlin_String_subSequence+0x131>
               	movl	%edx, %ebp
               	movl	%esi, %ebx
               	cmpl	%esi, %edx
               	jl	0x436e71 <Kotlin_String_subSequence+0x131>
               	movq	%rdi, %r15
               	cmpl	%ebp, 8(%rdi)
               	jb	0x436e71 <Kotlin_String_subSequence+0x131>
               	movq	%rcx, %r14
               	subl	%ebx, %ebp
               	jne	0x436dea <Kotlin_String_subSequence+0xaa>
               	movq	$0, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbx
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 16(%rsp)
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 24(%rsp)
               	movb	176081(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x436dc8 <Kotlin_String_subSequence+0x88>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	153465(%rip), %r12      # 0x45c548 <__unnamed_6>
               	movq	%r12, (%r14)
               	movq	%rbx, %rax
               	movq	-64(%rbx), %rax
               	movq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	jmp	0x436e61 <Kotlin_String_subSequence+0x121>
               	js	0x436e76 <Kotlin_String_subSequence+0x136>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	133797(%rip), %rcx      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%r12, (%r14)
               	leaq	32(%rax), %rdi
               	movl	%ebx, %eax
               	leaq	(%r15,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	callq	0x413720 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	nopl	(%rax,%rax)

<Kotlin_String_get>:
               	pushq	%rax
               	cmpl	%esi, 8(%rdi)
               	jbe	0x436e90 <Kotlin_String_get+0x10>
               	movslq	%esi, %rax
               	movzwl	16(%rdi,%rax,2), %eax
               	popq	%rcx
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<konan::snprintf(char*, unsigned long, char const*, ...)>:
               	subq	$216, %rsp
               	testb	%al, %al
               	je	0x436ee2 <konan::snprintf(char*, unsigned long, char const*, ...)+0x42>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rcx
               	callq	0x4138a0 <vsnprintf@plt>
               	addq	$216, %rsp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_equals>:
               	pushq	%rax
               	testq	%rsi, %rsi
               	je	0x436f4c <Kotlin_String_equals+0x1c>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	133529(%rip), %rcx      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, %rax
               	je	0x436f50 <Kotlin_String_equals+0x20>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	cmpq	%rdi, %rsi
               	je	0x436f74 <Kotlin_String_equals+0x44>
               	movl	8(%rdi), %edx
               	cmpl	8(%rsi), %edx
               	jne	0x436f4c <Kotlin_String_equals+0x1c>
               	addq	$16, %rdi
               	addq	$16, %rsi
               	addq	%rdx, %rdx
               	callq	0x4139b0 <bcmp@plt>
               	testl	%eax, %eax
               	sete	%al
               	popq	%rcx
               	retq
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopl	(%rax,%rax)

<Kotlin_String_hashCode>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	8(%rdi), %r14d
               	cmpb	$0, 275806(%rip)        # 0x47a4f0 <(anonymous namespace)::initialized>
               	jne	0x436fb7 <Kotlin_String_hashCode+0x37>
               	movb	$1, 275797(%rip)        # 0x47a4f0 <(anonymous namespace)::initialized>
               	movl	276011(%rip), %eax      # 0x47a5cc <__cpu_model+0xc>
               	movl	%eax, %ecx
               	shrb	$7, %cl
               	movb	%cl, 275781(%rip)       # 0x47a4f1 <(anonymous namespace)::sseSupported>
               	shrl	$10, %eax
               	andb	$1, %al
               	movb	%al, 275771(%rip)       # 0x47a4f2 <(anonymous namespace)::avx2Supported>
               	cmpl	$16, %r14d
               	jge	0x436fc9 <Kotlin_String_hashCode+0x49>
               	testl	%r14d, %r14d
               	jg	0x436ff7 <Kotlin_String_hashCode+0x77>
               	xorl	%eax, %eax
               	jmp	0x437161 <Kotlin_String_hashCode+0x1e1>
               	movb	275747(%rip), %al       # 0x47a4f2 <(anonymous namespace)::avx2Supported>
               	movb	275740(%rip), %cl       # 0x47a4f1 <(anonymous namespace)::sseSupported>
               	orb	%al, %cl
               	je	0x436ff7 <Kotlin_String_hashCode+0x77>
               	leaq	16(%rbx), %rsi
               	movl	%r14d, %edi
               	shrl	$2, %edi
               	cmpl	$31, %r14d
               	jg	0x43709b <Kotlin_String_hashCode+0x11b>
               	callq	0x437170 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
               	jmp	0x4370c8 <Kotlin_String_hashCode+0x148>
               	movq	%r14, %rax
               	addq	$-1, %rax
               	movl	%r14d, %ecx
               	andl	$3, %ecx
               	cmpq	$3, %rax
               	jae	0x437011 <Kotlin_String_hashCode+0x91>
               	xorl	%r14d, %r14d
               	xorl	%eax, %eax
               	jmp	0x437061 <Kotlin_String_hashCode+0xe1>
               	andl	$-4, %r14d
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	16(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	18(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	20(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	22(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$4, %rdx
               	cmpq	%rdx, %r14
               	jne	0x437020 <Kotlin_String_hashCode+0xa0>
               	testq	%rcx, %rcx
               	je	0x437161 <Kotlin_String_hashCode+0x1e1>
               	leaq	(%rbx,%r14,2), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%eax, %edi
               	shll	$5, %edi
               	subl	%eax, %edi
               	movzwl	(%rdx,%rsi,2), %eax
               	addl	%edi, %eax
               	addq	$1, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x437080 <Kotlin_String_hashCode+0x100>
               	jmp	0x437161 <Kotlin_String_hashCode+0x1e1>
               	testb	%al, %al
               	je	0x4370ac <Kotlin_String_hashCode+0x12c>
               	cmpl	$127, %r14d
               	jg	0x4370b3 <Kotlin_String_hashCode+0x133>
               	callq	0x4373a0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x4370c8 <Kotlin_String_hashCode+0x148>
               	callq	0x437220 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x4370c8 <Kotlin_String_hashCode+0x148>
               	cmpl	$575, %r14d             # imm = 0x23F
               	jg	0x4370c3 <Kotlin_String_hashCode+0x143>
               	callq	0x4374a0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>
               	jmp	0x4370c8 <Kotlin_String_hashCode+0x148>
               	callq	0x437690 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>
               	movl	%r14d, %ecx
               	andl	$-4, %ecx
               	cmpl	%r14d, %ecx
               	jge	0x437161 <Kotlin_String_hashCode+0x1e1>
               	movq	%rcx, %r8
               	notq	%r8
               	addq	%r14, %r8
               	movq	%r14, %r9
               	andq	$3, %r9
               	je	0x437119 <Kotlin_String_hashCode+0x199>
               	movl	%r14d, %edx
               	andl	$-4, %edx
               	leaq	(%rbx,%rdx,2), %rdi
               	addq	$16, %rdi
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	(%rdi,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$1, %rdx
               	cmpq	%rdx, %r9
               	jne	0x437100 <Kotlin_String_hashCode+0x180>
               	orq	%r9, %rcx
               	cmpq	$3, %r8
               	jb	0x437161 <Kotlin_String_hashCode+0x1e1>
               	nop
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	16(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	18(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	20(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	22(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	addq	$4, %rcx
               	cmpq	%rcx, %r14
               	jne	0x437120 <Kotlin_String_hashCode+0x1a0>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>:
               	addl	$2, %edi
               	pxor	%xmm1, %xmm1
               	movdqa	47361(%rip), %xmm2      # 0x442a80 <_IO_stdin_used+0xc0>
               	movdqa	47369(%rip), %xmm3      # 0x442a90 <_IO_stdin_used+0xd0>
               	movdqa	47377(%rip), %xmm4      # 0x442aa0 <_IO_stdin_used+0xe0>
               	pxor	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rax
               	pmovzxwd	(%rsi), %xmm5           # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm5
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm4, %xmm6
               	pmulld	%xmm2, %xmm0
               	paddd	%xmm5, %xmm0
               	pmulld	%xmm2, %xmm1
               	paddd	%xmm6, %xmm1
               	addl	$-2, %edi
               	addq	$16, %rsi
               	cmpl	$3, %edi
               	jg	0x4371a0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0x30>
               	phaddd	%xmm1, %xmm0
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	cmpl	$3, %edi
               	jne	0x437210 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0xa0>
               	pmovzxwd	16(%rax), %xmm1         # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47287(%rip), %xmm0      # 0x442ab0 <_IO_stdin_used+0xf0>
               	pmulld	47262(%rip), %xmm1      # 0x442aa0 <_IO_stdin_used+0xe0>
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm0
               	movd	%xmm0, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	pxor	%xmm5, %xmm5
               	movdqa	47251(%rip), %xmm12     # 0x442ac0 <_IO_stdin_used+0x100>
               	movdqa	47258(%rip), %xmm10     # 0x442ad0 <_IO_stdin_used+0x110>
               	movdqa	47265(%rip), %xmm11     # 0x442ae0 <_IO_stdin_used+0x120>
               	movdqa	47176(%rip), %xmm8      # 0x442a90 <_IO_stdin_used+0xd0>
               	movdqa	47183(%rip), %xmm9      # 0x442aa0 <_IO_stdin_used+0xe0>
               	pxor	%xmm7, %xmm7
               	pxor	%xmm1, %xmm1
               	pxor	%xmm3, %xmm3
               	nopl	(%rax)
               	movl	%edi, %eax
               	pmovzxwd	(%rsi), %xmm2           # xmm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm10, %xmm2
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm7, %xmm0
               	pmovzxwd	16(%rsi), %xmm7         # xmm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm11, %xmm6
               	movdqa	%xmm5, %xmm4
               	pmovzxwd	24(%rsi), %xmm5         # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm12, %xmm3
               	paddd	%xmm2, %xmm3
               	pmulld	%xmm12, %xmm1
               	paddd	%xmm6, %xmm1
               	pmulld	%xmm12, %xmm0
               	pmulld	%xmm12, %xmm4
               	pmulld	%xmm8, %xmm7
               	paddd	%xmm0, %xmm7
               	pmulld	%xmm9, %xmm5
               	paddd	%xmm4, %xmm5
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437260 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x40>
               	phaddd	%xmm1, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm5, %xmm7
               	phaddd	%xmm7, %xmm7
               	phaddd	%xmm7, %xmm7
               	paddd	%xmm3, %xmm7
               	leal	4(%rdi), %eax
               	cmpl	$6, %eax
               	jl	0x43736f <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x14f>
               	pxor	%xmm4, %xmm4
               	movdqa	46965(%rip), %xmm3      # 0x442a80 <_IO_stdin_used+0xc0>
               	pxor	%xmm1, %xmm1
               	nop
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm1, %xmm2
               	movl	%edi, %eax
               	movdqa	%xmm4, %xmm5
               	pmovzxwd	8(%rsi), %xmm4          # xmm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm2
               	pmulld	%xmm3, %xmm5
               	pmulld	%xmm8, %xmm0
               	movdqa	%xmm0, %xmm1
               	paddd	%xmm2, %xmm1
               	pmulld	%xmm9, %xmm4
               	paddd	%xmm5, %xmm4
               	addq	$16, %rsi
               	leal	-2(%rax), %edi
               	cmpl	$3, %eax
               	jg	0x437310 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf0>
               	pmulld	46884(%rip), %xmm7      # 0x442a80 <_IO_stdin_used+0xc0>
               	phaddd	%xmm4, %xmm1
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm7
               	testl	%edi, %edi
               	jle	0x437398 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x178>
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	46895(%rip), %xmm7      # 0x442ab0 <_IO_stdin_used+0xf0>
               	pmulld	46870(%rip), %xmm0      # 0x442aa0 <_IO_stdin_used+0xe0>
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	paddd	%xmm0, %xmm7
               	movd	%xmm7, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	addl	$-2, %edi
               	vpbroadcastd	46636(%rip), %ymm1 # 0x4429d8 <_IO_stdin_used+0x18>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vmovdqa	46952(%rip), %ymm2      # 0x442b20 <_IO_stdin_used+0x160>
               	vmovdqa	46976(%rip), %ymm3      # 0x442b40 <_IO_stdin_used+0x180>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm5   # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm2, %ymm5, %ymm5
               	vpmovzxwd	16(%rsi), %ymm6 # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm1, %ymm4, %ymm4
               	vpaddd	%ymm4, %ymm5, %ymm4
               	vpmulld	%ymm1, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm6, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	addl	$2, %eax
               	cmpl	$7, %eax
               	jg	0x4373d0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x30>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	leal	6(%rdi), %eax
               	cmpl	$6, %eax
               	jge	0x437432 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x92>
               	addl	$2, %edi
               	testl	%edi, %edi
               	jg	0x43746e <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xce>
               	jmp	0x437498 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46492(%rip), %xmm2 # 0x4429dc <_IO_stdin_used+0x1c>
               	vpmulld	46839(%rip), %ymm1, %ymm1 # 0x442b40 <_IO_stdin_used+0x180>
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	addq	$16, %rsi
               	testl	%edi, %edi
               	jle	0x437498 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %xmm1   # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46436(%rip), %xmm2 # 0x4429e0 <_IO_stdin_used+0x20>
               	vpmulld	46619(%rip), %xmm1, %xmm1 # 0x442aa0 <_IO_stdin_used+0xe0>
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vmovd	%xmm0, %eax
               	vzeroupper
               	retq

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>:
               	vpbroadcastd	46395(%rip), %ymm3 # 0x4429e4 <_IO_stdin_used+0x24>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46763(%rip), %ymm4      # 0x442b60 <_IO_stdin_used+0x1a0>
               	vmovdqa	46787(%rip), %ymm5      # 0x442b80 <_IO_stdin_used+0x1c0>
               	vmovdqa	46683(%rip), %ymm0      # 0x442b20 <_IO_stdin_used+0x160>
               	vmovdqa	46707(%rip), %ymm1      # 0x442b40 <_IO_stdin_used+0x180>
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	nopw	(%rax,%rax)
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm9   # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm9, %ymm9
               	vpmovzxwd	16(%rsi), %ymm10 # ymm10 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm11 # ymm11 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm5, %ymm10, %ymm10
               	vpmovzxwd	48(%rsi), %ymm12 # ymm12 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm8, %ymm8
               	vpaddd	%ymm8, %ymm9, %ymm8
               	vpmulld	%ymm3, %ymm7, %ymm7
               	vpaddd	%ymm7, %ymm10, %ymm7
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm3, %ymm2, %ymm2
               	vpmulld	%ymm0, %ymm11, %ymm9
               	vpaddd	%ymm6, %ymm9, %ymm6
               	vpmulld	%ymm1, %ymm12, %ymm9
               	vpaddd	%ymm2, %ymm9, %ymm2
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x4374e0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x40>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm6, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm3, %xmm4
               	vextracti128	$1, %ymm2, %xmm5
               	vpaddd	%xmm2, %xmm3, %xmm2
               	vpaddd	%xmm2, %xmm4, %xmm2
               	vpaddd	%xmm5, %xmm2, %xmm2
               	leal	8(%rdi), %eax
               	cmpl	$12, %eax
               	jge	0x4375bb <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x11b>
               	cmpl	$2, %edi
               	jge	0x437639 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x199>
               	testl	%edi, %edi
               	jle	0x4375b3 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46153(%rip), %xmm1 # 0x4429e0 <_IO_stdin_used+0x20>
               	vpmulld	46336(%rip), %xmm0, %xmm0 # 0x442aa0 <_IO_stdin_used+0xe0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpxor	%xmm3, %xmm3, %xmm3
               	vpbroadcastd	46096(%rip), %ymm4 # 0x4429d8 <_IO_stdin_used+0x18>
               	vpxor	%xmm5, %xmm5, %xmm5
               	nopl	(%rax)
               	vpmovzxwd	(%rsi), %ymm6   # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm7 # ymm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm5, %ymm5
               	vpmulld	%ymm4, %ymm3, %ymm3
               	vpmulld	%ymm0, %ymm6, %ymm6
               	vpaddd	%ymm5, %ymm6, %ymm5
               	vpmulld	%ymm1, %ymm7, %ymm6
               	vpaddd	%ymm3, %ymm6, %ymm3
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x4375d0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x130>
               	vpbroadcastd	46026(%rip), %xmm0 # 0x4429d8 <_IO_stdin_used+0x18>
               	vphaddd	%ymm3, %ymm5, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm0, %xmm2, %xmm0
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437585 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe5>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45973(%rip), %xmm1 # 0x4429dc <_IO_stdin_used+0x1c>
               	vpmulld	46320(%rip), %ymm0, %ymm0 # 0x442b40 <_IO_stdin_used+0x180>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437589 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe9>
               	jmp	0x4375b3 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>:
               	vpbroadcastd	45903(%rip), %ymm6 # 0x4429e8 <_IO_stdin_used+0x28>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46331(%rip), %ymm10     # 0x442ba0 <_IO_stdin_used+0x1e0>
               	vmovdqa	46419(%rip), %ymm11     # 0x442c00 <_IO_stdin_used+0x240>
               	vmovdqa	46187(%rip), %ymm7      # 0x442b20 <_IO_stdin_used+0x160>
               	vmovdqa	46211(%rip), %ymm8      # 0x442b40 <_IO_stdin_used+0x180>
               	vpxor	%xmm5, %xmm5, %xmm5
               	vpxor	%xmm9, %xmm9, %xmm9
               	vpxor	%xmm12, %xmm12, %xmm12
               	vpxor	%xmm13, %xmm13, %xmm13
               	vpxor	%xmm14, %xmm14, %xmm14
               	vpxor	%xmm15, %xmm15, %xmm15
               	vpxor	%xmm0, %xmm0, %xmm0
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	46273(%rip), %ymm3, %ymm3 # 0x442bc0 <_IO_stdin_used+0x200>
               	vpmulld	46296(%rip), %ymm4, %ymm4 # 0x442be0 <_IO_stdin_used+0x220>
               	vpmulld	%ymm6, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm1, %ymm0
               	vpmovzxwd	48(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm11, %ymm1, %ymm1
               	vpmulld	%ymm6, %ymm15, %ymm15
               	vpaddd	%ymm3, %ymm15, %ymm15
               	vpmovzxwd	64(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm14, %ymm14
               	vpaddd	%ymm4, %ymm14, %ymm14
               	vpmovzxwd	80(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm13, %ymm13
               	vpaddd	%ymm1, %ymm13, %ymm13
               	vpmulld	%ymm6, %ymm12, %ymm1
               	vpmulld	46095(%rip), %ymm3, %ymm3 # 0x442b60 <_IO_stdin_used+0x1a0>
               	vpaddd	%ymm1, %ymm3, %ymm12
               	vpmovzxwd	96(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm9, %ymm3
               	vpmulld	46103(%rip), %ymm4, %ymm4 # 0x442b80 <_IO_stdin_used+0x1c0>
               	vpaddd	%ymm3, %ymm4, %ymm9
               	vpmulld	%ymm6, %ymm5, %ymm3
               	vpmulld	%ymm7, %ymm1, %ymm1
               	vpaddd	%ymm3, %ymm1, %ymm5
               	vpmovzxwd	112(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm2, %ymm2
               	vpmulld	%ymm8, %ymm1, %ymm1
               	vpaddd	%ymm2, %ymm1, %ymm2
               	movl	%edi, %eax
               	subq	$-128, %rsi
               	leal	-16(%rax), %edi
               	cmpl	$31, %eax
               	jg	0x4376e0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x50>
               	vmovdqa	%ymm8, %ymm11
               	vmovdqa	%ymm7, %ymm10
               	vphaddd	%ymm15, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm13, %ymm14, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm9, %ymm12, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm5, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm0, %xmm4
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm1, %xmm5
               	vextracti128	$1, %ymm3, %xmm6
               	vextracti128	$1, %ymm2, %xmm7
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm4, %xmm0
               	vpaddd	%xmm3, %xmm5, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm6, %xmm1
               	vpaddd	%xmm7, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm2
               	leal	16(%rdi), %eax
               	cmpl	$24, %eax
               	jge	0x43786a <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1da>
               	cmpl	$4, %edi
               	jge	0x43794e <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2be>
               	cmpl	$2, %edi
               	jge	0x4379c9 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x339>
               	testl	%edi, %edi
               	jle	0x437862 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	45466(%rip), %xmm1 # 0x4429e0 <_IO_stdin_used+0x20>
               	vpmulld	45649(%rip), %xmm0, %xmm0 # 0x442aa0 <_IO_stdin_used+0xe0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpbroadcastd	45425(%rip), %ymm5 # 0x4429e4 <_IO_stdin_used+0x24>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	vmovdqa	45780(%rip), %ymm12     # 0x442b60 <_IO_stdin_used+0x1a0>
               	vmovdqa	45804(%rip), %ymm13     # 0x442b80 <_IO_stdin_used+0x1c0>
               	nopw	%cs:(%rax,%rax)
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	48(%rsi), %ymm9 # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmulld	%ymm5, %ymm8, %ymm8
               	vpmulld	%ymm5, %ymm7, %ymm7
               	vpmulld	%ymm5, %ymm6, %ymm6
               	vpmulld	%ymm5, %ymm0, %ymm0
               	vpmulld	%ymm12, %ymm1, %ymm1
               	vpaddd	%ymm1, %ymm8, %ymm8
               	vpmulld	%ymm13, %ymm3, %ymm1
               	vpaddd	%ymm7, %ymm1, %ymm7
               	vpmulld	%ymm10, %ymm4, %ymm1
               	vpaddd	%ymm6, %ymm1, %ymm6
               	vpmulld	%ymm11, %ymm9, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x4378a0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x210>
               	vpbroadcastd	45278(%rip), %xmm1 # 0x4429e4 <_IO_stdin_used+0x24>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm6, %ymm0
               	vextracti128	$1, %ymm3, %xmm2
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm4
               	vpaddd	%xmm3, %xmm1, %xmm1
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm4, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	cmpl	$4, %edi
               	jl	0x43782b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x19b>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpbroadcastd	45181(%rip), %ymm3 # 0x4429d8 <_IO_stdin_used+0x18>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm5 # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm4, %ymm4
               	vpmulld	%ymm3, %ymm0, %ymm0
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpaddd	%ymm4, %ymm1, %ymm4
               	vpmulld	%ymm11, %ymm5, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437960 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2d0>
               	vpbroadcastd	45114(%rip), %xmm1 # 0x4429d8 <_IO_stdin_used+0x18>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437834 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a4>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45061(%rip), %xmm1 # 0x4429dc <_IO_stdin_used+0x1c>
               	vpmulld	45408(%rip), %ymm0, %ymm0 # 0x442b40 <_IO_stdin_used+0x180>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437838 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a8>
               	jmp	0x437862 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	leaq	132891(%rip), %rax      # 0x458150 <ktypeglobal:kotlin.native.internal.CleanerImpl#internal>
               	cmpq	%rax, %rsi
               	je	0x437a96 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x76>
               	leaq	132735(%rip), %rax      # 0x4580c0 <ktypeglobal:kotlin.native.concurrent.WorkerBoundReference#internal>
               	cmpq	%rax, %rsi
               	jne	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movq	8(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	cmpq	$0, (%rbx)
               	je	0x437a80 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x60>
               	movq	8(%rbx), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$8, %rdi
               	movq	%rbp, %rsi
               	callq	0x4248a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	%rbx, %rdi
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x413730 <free@plt>
               	movl	272983(%rip), %r13d     # 0x47a4f4 <(anonymous namespace)::globalCleanerWorker>
               	cmpl	$-2, %r13d
               	je	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movslq	%r13d, %r15
               	movq	8(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	callq	0x437f30 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	movq	%r12, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437b10 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x437b10 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	cmpl	$1, %eax
               	jne	0x437b10 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movb	172684(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437b10 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movq	%rbp, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	152(%r12), %rdi
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x437b45 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x125>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x437b63 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x143>
               	jmp	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movq	(%rax), %rbp
               	cmpl	%r13d, 8(%rbp)
               	jne	0x437b94 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x174>
               	testq	%rbp, %rbp
               	jne	0x437bcf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1af>
               	jmp	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	cmpl	%r13d, %esi
               	je	0x437bc6 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1a6>
               	movq	%rbp, %rbx
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movslq	8(%rbp), %rsi
               	movq	%rsi, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x437b80 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x437b8f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x16f>
               	jmp	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	testq	%rbx, %rbx
               	je	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movq	16(%rbp), %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movups	80(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	%r14, 16(%rsp)
               	movq	%r14, %rax
               	movq	-64(%r14), %rdx
               	movl	$1, %r13d
               	movl	$1, %ecx
               	movq	%rdx, %r14
               	xchgl	%ecx, 328(%rdx)
               	movl	%ecx, 12(%rsp)
               	leaq	144(%rbx), %rdi
               	movq	-64(%rax), %rbp
               	xchgl	%r13d, 328(%rbp)
               	movq	%rdi, %r15
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437c59 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%r13d, %eax
               	xchgl	%eax, (%rbp)
               	testl	%r13d, %r13d
               	jne	0x437c59 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	cmpl	$1, %eax
               	jne	0x437c59 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	movb	172355(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437c59 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	movq	%rbp, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	56(%rbx), %rax
               	movq	72(%rbx), %rcx
               	addq	$-40, %rcx
               	cmpq	%rcx, %rax
               	je	0x437ca0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x280>
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	addq	$40, 56(%rbx)
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	jmp	0x437e4b <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x42b>
               	movq	8(%rbx), %rcx
               	movq	16(%rbx), %rax
               	movq	80(%rbx), %rdx
               	movq	%rdx, %rsi
               	subq	%rcx, %rsi
               	sarq	$3, %rsi
               	movq	%rax, %rdi
               	subq	%rsi, %rdi
               	cmpq	$1, %rdi
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	ja	0x437dec <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x3cc>
               	movq	%r13, 72(%rsp)
               	movq	48(%rbx), %rsi
               	subq	%rsi, %rdx
               	movq	%rdx, %rbp
               	sarq	$3, %rbp
               	leaq	2(%rbp), %r8
               	leaq	4(,%rbp), %rdi
               	addq	%rbp, %rdi
               	cmpq	%rdi, %rax
               	jbe	0x437d21 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x301>
               	subq	%r8, %rax
               	andq	$-2, %rax
               	leaq	(%rcx,%rax,4), %r13
               	addq	$8, %rdx
               	cmpq	%rsi, %r13
               	jae	0x437d93 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x373>
               	testq	%rdx, %rdx
               	je	0x437daf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38f>
               	movq	%r13, %rdi
               	jmp	0x437daa <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38a>
               	movq	%rbp, 64(%rsp)
               	testq	%rax, %rax
               	movl	$1, %ecx
               	cmovneq	%rax, %rcx
               	leaq	(%rax,%rcx), %r13
               	addq	$2, %r13
               	movl	$8, %esi
               	movq	%r13, %rdi
               	movq	%r8, %rbp
               	callq	0x413700 <calloc@plt>
               	movq	%r13, 56(%rsp)
               	subq	%rbp, %r13
               	andq	$-2, %r13
               	movq	%rax, %rbp
               	leaq	(%rax,%r13,4), %r13
               	movq	48(%rbx), %rsi
               	movq	80(%rbx), %rdx
               	subq	%rsi, %rdx
               	addq	$8, %rdx
               	je	0x437d76 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x356>
               	movq	%r13, %rdi
               	callq	0x4136f0 <memmove@plt>
               	movq	8(%rbx), %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbp, 8(%rbx)
               	movq	56(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	64(%rsp), %rbp
               	jmp	0x437daf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38f>
               	testq	%rdx, %rdx
               	je	0x437daf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38f>
               	leaq	1(%rbp), %rax
               	leaq	(,%rax,8), %rdi
               	addq	%r13, %rdi
               	subq	%rdx, %rdi
               	callq	0x4136f0 <memmove@plt>
               	movq	%r13, 48(%rbx)
               	movq	(%r13), %rax
               	movq	%rax, 32(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 40(%rbx)
               	leaq	(,%rbp,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbx)
               	movq	(%r13,%rbp,8), %rax
               	movq	%rax, 64(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 72(%rbx)
               	movq	72(%rsp), %r13
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	80(%rbx), %rcx
               	movq	%rax, 8(%rcx)
               	movq	56(%rbx), %rax
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	80(%rbx), %rax
               	leaq	8(%rax), %rcx
               	movq	%rcx, 80(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rbx)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 72(%rbx)
               	movq	%rax, 56(%rbx)
               	addq	$184, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139c0 <pthread_cond_signal@plt>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r13, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x437e9f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x437e9f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	cmpl	$1, %eax
               	jne	0x437e9f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	movb	171773(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437e9f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	addq	$328, %r15              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ecx, %ecx
               	jne	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	cmpl	$1, %eax
               	jne	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movb	171725(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437ecf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movq	%r15, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	cmpl	$1, %eax
               	jne	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movb	171656(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437f14 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::theState()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	271802(%rip), %r14      # 0x47a4f8 <(anonymous namespace)::theState()::state>
               	testq	%r14, %r14
               	jne	0x438217 <(anonymous namespace)::theState()+0x2e7>
               	movl	$1, %edi
               	movl	$272, %esi              # imm = 0x110
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438082 <(anonymous namespace)::theState()+0x152>
               	movq	%rax, %rbx
               	addq	$136, %rax
               	movq	%rax, 88(%rbx)
               	movq	$1, 96(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movl	$1065353216, 120(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 128(%rbx)
               	leaq	192(%rbx), %rax
               	movq	%rax, 144(%rbx)
               	movq	$1, 152(%rbx)
               	movups	%xmm0, 160(%rbx)
               	movl	$1065353216, 176(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 184(%rbx)
               	leaq	248(%rbx), %rax
               	movq	%rax, 200(%rbx)
               	movq	$1, 208(%rbx)
               	movups	%xmm0, 216(%rbx)
               	movl	$1065353216, 232(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 240(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r14)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x4139d0 <pthread_mutex_init@plt>
               	movq	%rbx, %rdi
               	addq	$40, %rdi
               	xorl	%esi, %esi
               	callq	0x4139e0 <pthread_cond_init@plt>
               	movabsq	$4294967297, %rax       # imm = 0x100000001
               	movq	%rax, 256(%rbx)
               	movl	$0, 264(%rbx)
               	testq	%r14, %r14
               	je	0x438069 <(anonymous namespace)::theState()+0x139>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x438069 <(anonymous namespace)::theState()+0x139>
               	cmpl	$1, %eax
               	jne	0x438069 <(anonymous namespace)::theState()+0x139>
               	movb	171315(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438069 <(anonymous namespace)::theState()+0x139>
               	movq	%r14, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 271492(%rip)      # 0x47a4f8 <(anonymous namespace)::theState()::state>
               	jne	0x438091 <(anonymous namespace)::theState()+0x161>
               	movq	271483(%rip), %r14      # 0x47a4f8 <(anonymous namespace)::theState()::state>
               	jmp	0x438217 <(anonymous namespace)::theState()+0x2e7>
               	xorl	%ebx, %ebx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 271465(%rip)      # 0x47a4f8 <(anonymous namespace)::theState()::state>
               	je	0x438076 <(anonymous namespace)::theState()+0x146>
               	movq	%rax, %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_mutex_destroy@plt>
               	leaq	40(%rbx), %rdi
               	callq	0x413a00 <pthread_cond_destroy@plt>
               	testq	%r15, %r15
               	je	0x4380f0 <(anonymous namespace)::theState()+0x1c0>
               	addq	$328, %r15              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x4380f0 <(anonymous namespace)::theState()+0x1c0>
               	cmpl	$1, %eax
               	jne	0x4380f0 <(anonymous namespace)::theState()+0x1c0>
               	movb	171180(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4380f0 <(anonymous namespace)::theState()+0x1c0>
               	movq	%r15, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	leaq	216(%rbx), %r15
               	movq	216(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438120 <(anonymous namespace)::theState()+0x1f0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438110 <(anonymous namespace)::theState()+0x1e0>
               	movq	200(%rbx), %rdi
               	movq	208(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	200(%rbx), %rdi
               	leaq	248(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x438158 <(anonymous namespace)::theState()+0x228>
               	callq	0x413730 <free@plt>
               	leaq	160(%rbx), %r15
               	movq	160(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438180 <(anonymous namespace)::theState()+0x250>
               	nop
               	movq	(%rdi), %rbp
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438170 <(anonymous namespace)::theState()+0x240>
               	movq	144(%rbx), %rdi
               	movq	152(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	144(%rbx), %rdi
               	leaq	192(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x4381b8 <(anonymous namespace)::theState()+0x288>
               	callq	0x413730 <free@plt>
               	leaq	104(%rbx), %r15
               	movq	104(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4381e0 <(anonymous namespace)::theState()+0x2b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x4381d0 <(anonymous namespace)::theState()+0x2a0>
               	movq	88(%rbx), %rdi
               	movq	96(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	88(%rbx), %rdi
               	leaq	136(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x43820f <(anonymous namespace)::theState()+0x2df>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_initRuntimeIfNeeded>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%fs:0, %rax
               	cmpq	$0, -48(%rax)
               	jne	0x438d9e <Kotlin_initRuntimeIfNeeded+0xb6e>
               	movq	%rax, %r14
               	movb	271031(%rip), %al       # 0x47a518 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x438ea3 <Kotlin_initRuntimeIfNeeded+0xc73>
               	leaq	24(%rsp), %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	leaq	-8(%rax), %rax
               	leaq	80(%rsp), %rcx
               	movq	%rcx, (%rax)
               	leaq	-65954(%rip), %rbx      # 0x4280f0 <void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	%rbx, (%rax)
               	cmpq	$0, 158987(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x438edb <Kotlin_initRuntimeIfNeeded+0xcab>
               	leaq	170830(%rip), %rdi      # 0x461e08 <(anonymous namespace)::initOptions>
               	leaq	19169(%rip), %rsi       # 0x43cda2 <__once_proxy>
               	callq	0x413a10 <pthread_once@plt>
               	testl	%eax, %eax
               	jne	0x438ee0 <Kotlin_initRuntimeIfNeeded+0xcb0>
               	callq	0x42a9e0 <mi_thread_init>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438d47 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movq	%rax, %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	movq	%r14, %rax
               	cmpq	$0, -48(%r14)
               	jne	0x438ee7 <Kotlin_initRuntimeIfNeeded+0xcb7>
               	movq	%r12, -48(%r14)
               	lock
               	addl	$1, 270824(%rip)        # 0x47a504 <(anonymous namespace)::aliveRuntimesCount>
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, 270805(%rip)      # 0x47a500 <(anonymous namespace)::globalRuntimeStatus>
               	sete	%r13b
               	callq	0x4357a0 <konan::gettid()>
               	movl	%eax, %ebx
               	movl	$1, %edi
               	movl	$368, %esi              # imm = 0x170
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r15
               	leaq	8(%rax), %rbp
               	movl	%ebx, 8(%rax)
               	leaq	166458(%rip), %rax      # 0x460d90 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 16(%r15)
               	leaq	24(%r15), %rax
               	movq	%rax, 32(%r15)
               	movq	%rax, 24(%r15)
               	leaq	48(%r15), %rax
               	movq	%rax, 56(%r15)
               	movq	%rax, 48(%r15)
               	leaq	144(%r15), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 64(%r15)
               	movups	%xmm0, 80(%r15)
               	movq	%rax, 96(%r15)
               	movq	$1, 104(%r15)
               	movups	%xmm0, 112(%r15)
               	movl	$1065353216, 128(%r15)  # imm = 0x3F800000
               	movups	%xmm0, 136(%r15)
               	movups	%xmm0, 152(%r15)
               	xorps	%xmm0, %xmm0
               	movq	$0, 168(%r15)
               	leaq	166401(%rip), %rax      # 0x460dc8 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 176(%r15)
               	leaq	184(%r15), %rax
               	movq	%rax, 192(%r15)
               	movq	%rax, 184(%r15)
               	leaq	208(%r15), %rax
               	movq	%rax, 216(%r15)
               	movq	%rax, 208(%r15)
               	leaq	166401(%rip), %rax      # 0x460e00 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 232(%r15)
               	leaq	240(%r15), %rax
               	movq	%rax, 248(%r15)
               	movq	%rax, 240(%r15)
               	leaq	264(%r15), %rax
               	movq	%rax, 272(%r15)
               	movq	%rax, 264(%r15)
               	leaq	296(%r15), %rdi
               	movups	%xmm0, 280(%r15)
               	leaq	166386(%rip), %rsi      # 0x460e38 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	%rbp, %rdx
               	callq	0x427ce0 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 304(%r15)
               	movq	$0, 320(%r15)
               	movl	$1, 328(%r15)
               	movq	%rbp, 336(%r15)
               	movb	$0, 344(%r15)
               	movups	%xmm0, 352(%r15)
               	cmpq	$0, 158506(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4384a4 <Kotlin_initRuntimeIfNeeded+0x274>
               	leaq	166081(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x438ef7 <Kotlin_initRuntimeIfNeeded+0xcc7>
               	leaq	352(%r15), %rax
               	movq	166038(%rip), %rcx      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x4384c0 <Kotlin_initRuntimeIfNeeded+0x290>
               	movq	%r15, 360(%rcx)
               	jmp	0x4384c9 <Kotlin_initRuntimeIfNeeded+0x299>
               	movq	%r15, 166025(%rip)      # 0x460d50 <kotlin::mm::GlobalData::instance_+0x20>
               	xorl	%ecx, %ecx
               	movq	$0, 166004(%rip)        # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	(%rax), %rbx
               	movq	%rcx, (%rax)
               	testq	%rbx, %rbx
               	je	0x438791 <Kotlin_initRuntimeIfNeeded+0x561>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x4384ff <Kotlin_initRuntimeIfNeeded+0x2cf>
               	movq	%rbp, %rdi
               	callq	0x424300 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424350 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	165926(%rip), %rbx      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	%r15, 165919(%rip)      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rbx, %rbx
               	je	0x438566 <Kotlin_initRuntimeIfNeeded+0x336>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x43854a <Kotlin_initRuntimeIfNeeded+0x31a>
               	movq	%rbp, %rdi
               	callq	0x424300 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424350 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	cmpq	$0, 158282(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x43857c <Kotlin_initRuntimeIfNeeded+0x34c>
               	leaq	165857(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movb	%r13b, 15(%rsp)
               	leaq	328(%r15), %rbx
               	movq	%r14, %rax
               	movq	%r15, -64(%r14)
               	movq	%r15, (%r12)
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%r15)
               	movl	%eax, 28(%rsp)
               	cmpl	$1, %eax
               	jne	0x4385ba <Kotlin_initRuntimeIfNeeded+0x38a>
               	movb	169954(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4385ba <Kotlin_initRuntimeIfNeeded+0x38a>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rbx
               	movq	%r14, %rax
               	movq	-40(%r14), %r13
               	movq	%rbx, %rbp
               	testq	%r13, %r13
               	movq	%r14, 48(%rsp)
               	movq	%r12, 56(%rsp)
               	jne	0x438acd <Kotlin_initRuntimeIfNeeded+0x89d>
               	movq	%rbx, 72(%rsp)
               	callq	0x437f30 <(anonymous namespace)::theState()>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rax, 16(%rsp)
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testq	%rbx, %rbx
               	je	0x438637 <Kotlin_initRuntimeIfNeeded+0x407>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438637 <Kotlin_initRuntimeIfNeeded+0x407>
               	cmpl	$1, %eax
               	jne	0x438637 <Kotlin_initRuntimeIfNeeded+0x407>
               	movb	169829(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438637 <Kotlin_initRuntimeIfNeeded+0x407>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$1, %edi
               	movl	$256, %esi              # imm = 0x100
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x4387ab <Kotlin_initRuntimeIfNeeded+0x57b>
               	movq	%rax, %r13
               	movq	16(%rsp), %rdx
               	movl	256(%rdx), %eax
               	leal	1(%rax), %ecx
               	movl	%ecx, 256(%rdx)
               	movl	%eax, (%r13)
               	movl	$1, 4(%r13)
               	movq	$8, 16(%r13)
               	movl	$8, %edi
               	movl	$8, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 8(%r13)
               	leaq	24(%rax), %rbp
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 24(%rbx)
               	movq	%rbp, 48(%r13)
               	movq	%rax, 32(%r13)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 40(%r13)
               	movq	%rbp, 80(%r13)
               	movq	%rax, 64(%r13)
               	movq	%rcx, 72(%r13)
               	movq	%rax, 24(%r13)
               	movq	%rax, 56(%r13)
               	leaq	96(%r13), %rax
               	movq	%rax, 112(%r13)
               	movq	%rax, 120(%r13)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 240(%r13)
               	movups	%xmm0, 128(%r13)
               	movq	-64(%r14), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r13), %rdi
               	xorl	%esi, %esi
               	callq	0x4139d0 <pthread_mutex_init@plt>
               	movq	%r13, %rdi
               	addq	$184, %rdi
               	xorl	%esi, %esi
               	callq	0x4139e0 <pthread_cond_init@plt>
               	testq	%rbp, %rbp
               	je	0x43874a <Kotlin_initRuntimeIfNeeded+0x51a>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x43874a <Kotlin_initRuntimeIfNeeded+0x51a>
               	cmpl	$1, %eax
               	jne	0x43874a <Kotlin_initRuntimeIfNeeded+0x51a>
               	movb	169554(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43874a <Kotlin_initRuntimeIfNeeded+0x51a>
               	movq	%rbp, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	(%r13), %ebp
               	movslq	%ebp, %r9
               	movq	16(%rsp), %r8
               	movq	152(%r8), %rsi
               	movq	%r9, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x438805 <Kotlin_initRuntimeIfNeeded+0x5d5>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rbx
               	movq	144(%r8), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x43881d <Kotlin_initRuntimeIfNeeded+0x5ed>
               	jmp	0x438876 <Kotlin_initRuntimeIfNeeded+0x646>
               	movq	%r15, 165296(%rip)      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	$0, 157720(%rip)        # 0x45efb8 <write+0x45efb8>
               	jne	0x438570 <Kotlin_initRuntimeIfNeeded+0x340>
               	jmp	0x43857c <Kotlin_initRuntimeIfNeeded+0x34c>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	16(%rsp), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x4387fd <Kotlin_initRuntimeIfNeeded+0x5cd>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	xorl	%r13d, %r13d
               	testl	%ebp, %ebp
               	jne	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	cmpl	$1, %eax
               	jne	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	movb	169375(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4387fd <Kotlin_initRuntimeIfNeeded+0x5cd>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%r13d, %r13d
               	jmp	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ebx
               	movq	144(%r8), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x438876 <Kotlin_initRuntimeIfNeeded+0x646>
               	movq	(%rax), %r12
               	cmpl	8(%r12), %ebp
               	jne	0x438841 <Kotlin_initRuntimeIfNeeded+0x611>
               	testq	%r12, %r12
               	jne	0x438a64 <Kotlin_initRuntimeIfNeeded+0x834>
               	jmp	0x438876 <Kotlin_initRuntimeIfNeeded+0x646>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	cmpq	%rbx, %rdx
               	jne	0x438876 <Kotlin_initRuntimeIfNeeded+0x646>
               	cmpl	%ecx, %ebp
               	je	0x43886d <Kotlin_initRuntimeIfNeeded+0x63d>
               	movq	%r12, %rdi
               	movq	(%r12), %r12
               	testq	%r12, %r12
               	je	0x438876 <Kotlin_initRuntimeIfNeeded+0x646>
               	movslq	8(%r12), %rcx
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x438832 <Kotlin_initRuntimeIfNeeded+0x602>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	cmpq	%rbx, %rdx
               	je	0x43883d <Kotlin_initRuntimeIfNeeded+0x60d>
               	jmp	0x438876 <Kotlin_initRuntimeIfNeeded+0x646>
               	testq	%rdi, %rdi
               	jne	0x438a64 <Kotlin_initRuntimeIfNeeded+0x834>
               	movq	%rbx, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movl	$1, %edi
               	movl	$24, %esi
               	movq	%r8, %rbx
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r12
               	movl	%ebp, 8(%rax)
               	leaq	176(%rbx), %rdi
               	movq	152(%rbx), %rsi
               	movq	168(%rbx), %rdx
               	movl	$1, %ecx
               	callq	0x43ccaa <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x4388d1 <Kotlin_initRuntimeIfNeeded+0x6a1>
               	movq	16(%rsp), %r8
               	movq	144(%r8), %rbp
               	movq	32(%rsp), %rdi
               	jmp	0x4389e4 <Kotlin_initRuntimeIfNeeded+0x7b4>
               	movq	%rdx, %r14
               	movl	%ebp, 32(%rsp)
               	cmpq	$1, %rdx
               	je	0x438e87 <Kotlin_initRuntimeIfNeeded+0xc57>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movq	16(%rsp), %r8
               	movq	160(%r8), %rbx
               	movq	$0, 160(%r8)
               	testq	%rbx, %rbx
               	je	0x438993 <Kotlin_initRuntimeIfNeeded+0x763>
               	leaq	160(%r8), %rsi
               	xorl	%edi, %edi
               	jmp	0x438953 <Kotlin_initRuntimeIfNeeded+0x723>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	je	0x438978 <Kotlin_initRuntimeIfNeeded+0x748>
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x438993 <Kotlin_initRuntimeIfNeeded+0x763>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movslq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x43892b <Kotlin_initRuntimeIfNeeded+0x6fb>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x43893a <Kotlin_initRuntimeIfNeeded+0x70a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x43894b <Kotlin_initRuntimeIfNeeded+0x71b>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x43894b <Kotlin_initRuntimeIfNeeded+0x71b>
               	movq	144(%r8), %rdi
               	leaq	192(%r8), %rax
               	cmpq	%rdi, %rax
               	je	0x4389b0 <Kotlin_initRuntimeIfNeeded+0x780>
               	callq	0x413730 <free@plt>
               	movq	16(%rsp), %r8
               	movq	%r14, 152(%r8)
               	movq	%rbp, 144(%r8)
               	movq	64(%rsp), %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x4389d9 <Kotlin_initRuntimeIfNeeded+0x7a9>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rdi
               	jmp	0x4389e4 <Kotlin_initRuntimeIfNeeded+0x7b4>
               	movl	32(%rsp), %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %edi
               	movq	(%rbp,%rdi,8), %rax
               	testq	%rax, %rax
               	movq	48(%rsp), %r14
               	je	0x438a04 <Kotlin_initRuntimeIfNeeded+0x7d4>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rdi,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x438a5c <Kotlin_initRuntimeIfNeeded+0x82c>
               	movq	%r8, %rcx
               	addq	$160, %rcx
               	movq	160(%r8), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 160(%r8)
               	movq	(%r12), %rax
               	testq	%rax, %rax
               	je	0x438a57 <Kotlin_initRuntimeIfNeeded+0x827>
               	movq	152(%r8), %rsi
               	movslq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x438a47 <Kotlin_initRuntimeIfNeeded+0x817>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x438a4b <Kotlin_initRuntimeIfNeeded+0x81b>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	144(%r8), %rbp
               	movq	%rcx, (%rbp,%rdi,8)
               	addq	$1, 168(%r8)
               	movq	%r13, 16(%r12)
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r8, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438ab5 <Kotlin_initRuntimeIfNeeded+0x885>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	movq	56(%rsp), %r12
               	jne	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	cmpl	$1, %eax
               	jne	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	movb	168681(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x438aba <Kotlin_initRuntimeIfNeeded+0x88a>
               	movq	56(%rsp), %r12
               	movq	%r14, %rax
               	movq	%r13, -40(%r14)
               	movq	(%r12), %rbp
               	movq	72(%rsp), %rbx
               	callq	0x4137b0 <pthread_self@plt>
               	movq	%rax, 240(%r13)
               	movq	%rbx, 248(%r13)
               	movq	%r13, 8(%r12)
               	movq	268828(%rip), %rbx      # 0x47a508 <(anonymous namespace)::initHeadNode>
               	testq	%rbx, %rbx
               	je	0x438b14 <Kotlin_initRuntimeIfNeeded+0x8e4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	callq	*(%rbx)
               	movq	8(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x438b00 <Kotlin_initRuntimeIfNeeded+0x8d0>
               	movq	(%r12), %rbp
               	movslq	156(%rbp), %rdx
               	leaq	80(%rbp), %r12
               	movq	72(%rbp), %rax
               	movq	80(%rbp), %r13
               	movq	%r13, %rbx
               	subq	%rax, %rbx
               	sarq	$3, %rbx
               	cmpq	%rdx, %rbx
               	jae	0x438ba3 <Kotlin_initRuntimeIfNeeded+0x973>
               	movq	%rdx, %r14
               	subq	%rbx, %r14
               	je	0x438c99 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	88(%rbp), %rax
               	subq	%r13, %rax
               	sarq	$3, %rax
               	cmpq	%r14, %rax
               	jae	0x438bb7 <Kotlin_initRuntimeIfNeeded+0x987>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%rbx, %rcx
               	xorq	%rax, %rcx
               	cmpq	%r14, %rcx
               	jb	0x438efe <Kotlin_initRuntimeIfNeeded+0xcce>
               	movq	%rdx, 16(%rsp)
               	cmpq	%r14, %rbx
               	movq	%rbx, %rcx
               	cmovbq	%r14, %rcx
               	leaq	(%rcx,%rbx), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%rbx, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	je	0x438bdd <Kotlin_initRuntimeIfNeeded+0x9ad>
               	movl	$8, %esi
               	movq	%rdi, %r12
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x438be3 <Kotlin_initRuntimeIfNeeded+0x9b3>
               	jbe	0x438c99 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(%rax,%rdx,8), %rax
               	cmpq	%r13, %rax
               	jne	0x438bd4 <Kotlin_initRuntimeIfNeeded+0x9a4>
               	jmp	0x438c99 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(,%r14,8), %rdx
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	leaq	(,%r14,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%r12)
               	jmp	0x438c99 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	%rdi, %r12
               	xorl	%r13d, %r13d
               	leaq	(,%rbx,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %r14
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x413750 <memset@plt>
               	movq	72(%rbp), %rdi
               	movq	80(%rbp), %rax
               	cmpq	%rax, %rdi
               	je	0x438c65 <Kotlin_initRuntimeIfNeeded+0xa35>
               	movq	%rax, %rcx
               	subq	%rdi, %rcx
               	addq	$-8, %rcx
               	cmpq	$24, %rcx
               	jb	0x438c42 <Kotlin_initRuntimeIfNeeded+0xa12>
               	shrq	$3, %rcx
               	addq	$1, %rcx
               	leaq	(%rdi,%rcx,8), %rdx
               	cmpq	%rdx, %r13
               	jae	0x438dad <Kotlin_initRuntimeIfNeeded+0xb7d>
               	leaq	(,%rcx,8), %rdx
               	addq	%r13, %rdx
               	cmpq	%rdx, %rdi
               	jae	0x438dad <Kotlin_initRuntimeIfNeeded+0xb7d>
               	movq	%r13, %rcx
               	subq	%rdi, %rax
               	xorl	%edx, %edx
               	nopw	(%rax,%rax)
               	movq	(%rdi,%rdx), %rsi
               	movq	%rsi, (%rcx,%rdx)
               	addq	$8, %rdx
               	cmpq	%rdx, %rax
               	jne	0x438c50 <Kotlin_initRuntimeIfNeeded+0xa20>
               	movq	72(%rbp), %rdi
               	leaq	88(%rbp), %rbx
               	testq	%rdi, %rdi
               	je	0x438c73 <Kotlin_initRuntimeIfNeeded+0xa43>
               	callq	0x413730 <free@plt>
               	movq	%r13, 72(%rbp)
               	movq	16(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%rbx)
               	movl	$1, 152(%rbp)
               	cmpb	$0, 15(%rsp)
               	movq	48(%rsp), %r14
               	movq	56(%rsp), %r12
               	movq	40(%rsp), %r13
               	je	0x438ce4 <Kotlin_initRuntimeIfNeeded+0xab4>
               	movq	268360(%rip), %rbp      # 0x47a508 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x438d14 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r12), %rbx
               	nopl	(%rax)
               	movl	$1, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x438cd0 <Kotlin_initRuntimeIfNeeded+0xaa0>
               	movq	268317(%rip), %rbp      # 0x47a508 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x438d14 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r12), %rbx
               	nopl	(%rax,%rax)
               	movl	$2, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x438d00 <Kotlin_initRuntimeIfNeeded+0xad0>
               	movl	$1, 16(%r12)
               	testq	%r15, %r15
               	je	0x438d47 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movl	28(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ecx, %ecx
               	jne	0x438d47 <Kotlin_initRuntimeIfNeeded+0xb17>
               	cmpl	$1, %eax
               	jne	0x438d47 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movb	168021(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438d47 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movq	%r13, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-48(%r14), %rbp
               	leaq	268171(%rip), %rdi      # 0x47a4e0 <konan::terminationKeyOnceControl>
               	leaq	2820(%rip), %rsi        # 0x439860 <konan::onThreadExitInit()>
               	callq	0x413a10 <pthread_once@plt>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	leaq	598(%rip), %rax         # 0x438fd0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>
               	movq	%rax, 8(%rbx)
               	movq	%rbp, 16(%rbx)
               	movl	268116(%rip), %edi      # 0x47a4dc <konan::terminationKey>
               	callq	0x413a20 <pthread_getspecific@plt>
               	movq	%rax, (%rbx)
               	movl	268102(%rip), %edi      # 0x47a4dc <konan::terminationKey>
               	movq	%rbx, %rsi
               	callq	0x413840 <pthread_setspecific@plt>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rcx, %r8
               	andq	$-4, %r8
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x438dd2 <Kotlin_initRuntimeIfNeeded+0xba2>
               	xorl	%edx, %edx
               	jmp	0x438e3c <Kotlin_initRuntimeIfNeeded+0xc0c>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edx, %edx
               	movups	(%rdi,%rdx,8), %xmm0
               	movups	16(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, (%r13,%rdx,8)
               	movups	%xmm1, 16(%r13,%rdx,8)
               	movups	32(%rdi,%rdx,8), %xmm0
               	movups	48(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 32(%r13,%rdx,8)
               	movups	%xmm1, 48(%r13,%rdx,8)
               	movups	64(%rdi,%rdx,8), %xmm0
               	movups	80(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 64(%r13,%rdx,8)
               	movups	%xmm1, 80(%r13,%rdx,8)
               	movups	96(%rdi,%rdx,8), %xmm0
               	movups	112(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 96(%r13,%rdx,8)
               	movups	%xmm1, 112(%r13,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rsi
               	jne	0x438ddb <Kotlin_initRuntimeIfNeeded+0xbab>
               	testq	%rbx, %rbx
               	je	0x438e6a <Kotlin_initRuntimeIfNeeded+0xc3a>
               	leaq	16(,%rdx,8), %rdx
               	negq	%rbx
               	movups	-16(%rdi,%rdx), %xmm0
               	movups	(%rdi,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rbx
               	jne	0x438e4c <Kotlin_initRuntimeIfNeeded+0xc1c>
               	cmpq	%r8, %rcx
               	je	0x438c61 <Kotlin_initRuntimeIfNeeded+0xa31>
               	leaq	(,%r8,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rdi,%r8,8), %rdi
               	jmp	0x438c45 <Kotlin_initRuntimeIfNeeded+0xa15>
               	movq	16(%rsp), %rax
               	leaq	192(%rax), %rbp
               	movq	$0, 192(%rax)
               	jmp	0x438904 <Kotlin_initRuntimeIfNeeded+0x6d4>
               	leaq	267886(%rip), %rdi      # 0x47a518 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43bd71 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x438269 <Kotlin_initRuntimeIfNeeded+0x39>
               	leaq	3266(%rip), %rdi        # 0x439b80 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43beaa <std::set_terminate(void (*)())>
               	movq	%rax, 267862(%rip)      # 0x47a520 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	267847(%rip), %rdi      # 0x47a518 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43be60 <__cxa_guard_release>
               	jmp	0x438269 <Kotlin_initRuntimeIfNeeded+0x39>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	leaq	48100(%rip), %rdx       # 0x444ad2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1969>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435880 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	leaq	48051(%rip), %rdi       # 0x444ab8 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4361d0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	testq	%r15, %r15
               	je	0x438f22 <Kotlin_initRuntimeIfNeeded+0xcf2>
               	movq	%r15, %rdi
               	callq	0x424300 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	48(%rsp), %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r14)
               	movq	16(%rsp), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%r14, %r14
               	je	0x438f91 <Kotlin_initRuntimeIfNeeded+0xd61>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x438f91 <Kotlin_initRuntimeIfNeeded+0xd61>
               	cmpl	$1, %eax
               	jne	0x438f91 <Kotlin_initRuntimeIfNeeded+0xd61>
               	movb	167457(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438f91 <Kotlin_initRuntimeIfNeeded+0xd61>
               	movq	%r14, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x438f91 <Kotlin_initRuntimeIfNeeded+0xd61>
               	movq	%rax, %rbp
               	jmp	0x438f96 <Kotlin_initRuntimeIfNeeded+0xd66>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	jmp	0x438f8e <Kotlin_initRuntimeIfNeeded+0xd5e>
               	jmp	0x438f8e <Kotlin_initRuntimeIfNeeded+0xd5e>
               	movq	%rax, %rbp
               	testq	%r15, %r15
               	jne	0x438f9e <Kotlin_initRuntimeIfNeeded+0xd6e>
               	movq	%rbp, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	movl	28(%rsp), %edx
               	movl	%edx, %eax
               	movq	40(%rsp), %rcx
               	xchgl	%eax, (%rcx)
               	testl	%edx, %edx
               	jne	0x438f96 <Kotlin_initRuntimeIfNeeded+0xd66>
               	cmpl	$1, %eax
               	jne	0x438f96 <Kotlin_initRuntimeIfNeeded+0xd66>
               	movb	167382(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438f96 <Kotlin_initRuntimeIfNeeded+0xd66>
               	movq	40(%rsp), %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	callq	0x423450 <__clang_call_terminate>

<(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x439007 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	movb	167321(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439007 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$2, 16(%rbx)
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	%rbx, -48(%rax)
               	lock
               	addl	$-1, 267480(%rip)       # 0x47a504 <(anonymous namespace)::aliveRuntimesCount>
               	movq	(%rbx), %rax
               	movq	72(%rax), %rcx
               	cmpq	%rcx, 80(%rax)
               	je	0x43903d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6d>
               	movq	%rcx, 80(%rax)
               	movl	$2, 152(%rax)
               	movq	%rbx, 8(%rsp)
               	movq	8(%rbx), %rbx
               	movslq	(%rbx), %rax
               	movq	%rax, 16(%rsp)
               	movq	$0, -40(%r12)
               	callq	0x437f30 <(anonymous namespace)::theState()>
               	movq	%rax, %r15
               	movq	%rbx, (%rsp)
               	movq	248(%rbx), %r13
               	leaq	328(%r13), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rax, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testq	%r13, %r13
               	je	0x4390b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x4390b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	cmpl	$1, %eax
               	jne	0x4390b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	movb	167141(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4390b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	movq	%r14, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movslq	(%rax), %rsi
               	movq	152(%r15), %rcx
               	movq	%rsi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4390f1 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x121>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	movq	%rdx, %r9
               	movq	144(%r15), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	jne	0x43910e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x13e>
               	jmp	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %r9d
               	movq	144(%r15), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	je	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movq	(%r10), %rdi
               	cmpl	8(%rdi), %esi
               	jne	0x439120 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rdi, %rdi
               	jne	0x43917c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1ac>
               	jmp	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movslq	8(%rdi), %rbp
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x439160 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x190>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	je	0x43916f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19f>
               	jmp	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	nopl	(%rax)
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	jne	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	cmpl	%ebp, %esi
               	jne	0x439120 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rbx, %rbx
               	je	0x43922f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movq	%r10, %rax
               	nop
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rdi, %rax
               	jne	0x439180 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1b0>
               	cmpq	%rsi, %r10
               	je	0x4391b8 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1e8>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43921c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movslq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x4391dc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20c>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x4391e5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
               	jmp	0x43921c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movq	(%rdi), %rbp
               	testq	%rbp, %rbp
               	je	0x439203 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x233>
               	movslq	8(%rbp), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x4391eb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x21b>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x4391f4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x224>
               	jmp	0x43921c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x43921c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x43921c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x43921c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movq	%r10, (%r8,%rdx,8)
               	movq	144(%r15), %r8
               	movq	(%r8,%r9,8), %r10
               	movq	%r15, %rax
               	addq	$160, %rax
               	cmpq	%r10, %rax
               	jne	0x439214 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x244>
               	movq	%rbp, (%r10)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	callq	0x413730 <free@plt>
               	addq	$-1, 168(%r15)
               	testq	%r13, %r13
               	movq	%r12, 24(%rsp)
               	je	0x43924b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x27b>
               	movl	$1, %ebx
               	xchgl	%ebx, (%r14)
               	movq	%r15, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	jmp	0x43926c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x29c>
               	movq	-64(%r12), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%r15, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%r13, %r13
               	je	0x439297 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	movl	%ebx, %eax
               	xchgl	%eax, 328(%r13)
               	testl	%ebx, %ebx
               	jne	0x439297 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	cmpl	$1, %eax
               	jne	0x439297 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	movb	166668(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439297 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	addq	$328, %r13              # imm = 0x148
               	movq	%r13, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movq	24(%rax), %rbx
               	movq	56(%rax), %r13
               	cmpq	%rbx, %r13
               	je	0x439395 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movq	(%rsp), %rax
               	movq	40(%rax), %r14
               	movq	48(%rax), %r12
               	leaq	39265(%rip), %rbp       # 0x442c20 <_IO_stdin_used+0x260>
               	jmp	0x4392f5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rsi
               	movq	%rax, %rdi
               	callq	0x4398e0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	addq	$40, %rbx
               	cmpq	%r14, %rbx
               	je	0x439350 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
               	cmpq	%rbx, %r13
               	je	0x439395 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movl	(%rbx), %ecx
               	cmpq	$3, %rcx
               	ja	0x4392e3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	8(%rbx), %rax
               	movslq	(%rbp,%rcx,4), %rcx
               	addq	%rbp, %rcx
               	jmpq	*%rcx
               	movq	%r12, 32(%rsp)
               	movq	%rbp, %r15
               	movq	16(%rbx), %rsi
               	movq	24(%rbx), %rbp
               	testq	%rsi, %rsi
               	movq	(%rsp), %r12
               	je	0x439335 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x365>
               	movq	248(%r12), %rdi
               	addq	$8, %rdi
               	callq	0x4248a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r12), %rsi
               	movq	%rbp, %rdi
               	callq	0x4398e0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	movq	%r15, %rbp
               	movq	32(%rsp), %r12
               	jmp	0x4392e3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	nop
               	movq	8(%r12), %rbx
               	addq	$8, %r12
               	leaq	480(%rbx), %r14
               	cmpq	%rbx, %r13
               	jne	0x4392f5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	jmp	0x439395 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	nop
               	testq	%rax, %rax
               	je	0x4392e3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rdi
               	addq	$8, %rdi
               	movq	%rax, %rsi
               	callq	0x4248a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x4392e3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %r14
               	movq	112(%r14), %rbp
               	leaq	96(%r14), %rbx
               	cmpq	%rbx, %rbp
               	movq	8(%rsp), %r13
               	jne	0x4395a4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d4>
               	movq	136(%r14), %rsi
               	testq	%rsi, %rsi
               	je	0x4393cb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3fb>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4248a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r14), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r14), %rdi
               	callq	0x4139f0 <pthread_mutex_destroy@plt>
               	leaq	184(%r14), %rdi
               	callq	0x413a00 <pthread_cond_destroy@plt>
               	testq	%rbp, %rbp
               	movq	24(%rsp), %r12
               	je	0x439426 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x439426 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	cmpl	$1, %eax
               	jne	0x439426 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	movb	166262(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439426 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	movq	%rbp, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	104(%r14), %rdi
               	callq	0x439b40 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	8(%r14), %rdi
               	testq	%rdi, %rdi
               	je	0x43946b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x49b>
               	movq	48(%r14), %rbx
               	movq	80(%r14), %rbp
               	leaq	8(%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x439466 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x496>
               	addq	$-8, %rbx
               	nopl	(%rax)
               	movq	8(%rbx), %rdi
               	addq	$8, %rbx
               	callq	0x413730 <free@plt>
               	cmpq	%rbp, %rbx
               	jb	0x439450 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x480>
               	movq	8(%r14), %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	(%r13), %rax
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	(%r13), %rbx
               	movl	266320(%rip), %edi      # 0x47a4dc <konan::terminationKey>
               	testl	%edi, %edi
               	je	0x43949a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4ca>
               	callq	0x413a20 <pthread_getspecific@plt>
               	testq	%rax, %rax
               	je	0x4394a9 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4d9>
               	movq	%r12, %rax
               	movq	$0, -64(%r12)
               	cmpq	$0, 154375(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x4394c7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4f7>
               	leaq	161950(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439845 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x875>
               	movq	161914(%rip), %rax      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	%rbx, 161915(%rip)      # 0x460d50 <kotlin::mm::GlobalData::instance_+0x20>
               	je	0x4395bf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5ef>
               	cmpq	%rbx, %rax
               	je	0x4395d6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x606>
               	movq	360(%rbx), %rbp
               	movq	352(%rbp), %r14
               	movq	$0, 352(%rbp)
               	movq	352(%rbx), %rax
               	movq	$0, 352(%rbx)
               	movq	352(%rbp), %rbx
               	movq	%rax, 352(%rbp)
               	testq	%rbx, %rbx
               	je	0x439561 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x591>
               	movq	352(%rbx), %r15
               	testq	%r15, %r15
               	je	0x43953e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x56e>
               	movq	%r15, %rdi
               	callq	0x424300 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424350 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	352(%rbp), %rax
               	testq	%rax, %rax
               	je	0x43956d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x59d>
               	movq	%rbp, 360(%rax)
               	testq	%r14, %r14
               	je	0x439627 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
               	movq	%r14, %rdi
               	callq	0x424300 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	jmp	0x439627 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdi
               	callq	0x43c291 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
               	movq	%rax, %rbp
               	cmpq	%rbx, %rax
               	je	0x4393af <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3df>
               	movq	40(%rbp), %rsi
               	testq	%rsi, %rsi
               	je	0x439590 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5c0>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4248a0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439590 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5c0>
               	movq	360(%rbx), %rcx
               	movq	%rcx, 161667(%rip)      # 0x460d50 <kotlin::mm::GlobalData::instance_+0x20>
               	cmpq	%rbx, %rax
               	jne	0x4394e4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x514>
               	movq	352(%rbx), %rcx
               	movq	$0, 352(%rbx)
               	movq	%rcx, 161625(%rip)      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rax, %rax
               	je	0x439617 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x647>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424350 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	161585(%rip), %rcx      # 0x460d48 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x439627 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
               	movq	$0, 360(%rcx)
               	cmpq	$0, 153993(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x43963d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x66d>
               	leaq	161568(%rip), %rdi      # 0x460d58 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%r13, %rdi
               	callq	0x413730 <free@plt>
               	callq	0x437f30 <(anonymous namespace)::theState()>
               	movq	%rax, %r14
               	movq	%rax, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	movq	208(%r14), %rdi
               	movq	16(%rsp), %rcx
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43968d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6bd>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r8
               	movq	200(%r14), %rax
               	movq	(%rax,%r8,8), %rax
               	testq	%rax, %rax
               	jne	0x4396aa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6da>
               	jmp	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r8d
               	movq	200(%r14), %rax
               	movq	(%rax,%r8,8), %rax
               	testq	%rax, %rax
               	je	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movq	(%rax), %rbx
               	cmpl	%ecx, 8(%rbx)
               	jne	0x4396c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6f0>
               	testq	%rbx, %rbx
               	jne	0x43971c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x74c>
               	jmp	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movq	%rbx, %rbp
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movslq	8(%rbx), %rsi
               	movq	%rsi, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x439700 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x730>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r8, %rdx
               	je	0x43970f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x73f>
               	jmp	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	nopl	(%rax)
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r8, %rdx
               	jne	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	cmpl	%ecx, %esi
               	jne	0x4396c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6f0>
               	testq	%rbp, %rbp
               	je	0x439812 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movq	16(%rbx), %rdi
               	callq	0x413a30 <pthread_detach@plt>
               	movq	208(%r14), %rdi
               	movslq	8(%rbx), %rax
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x439746 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x776>
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r9
               	jmp	0x43974d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x77d>
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r9d
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%rcx, %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rbx, %rax
               	jne	0x439760 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x790>
               	cmpq	%rsi, %rcx
               	je	0x439798 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7c8>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4397fc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movslq	8(%rax), %rax
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x4397bc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7ec>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x4397c5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7f5>
               	jmp	0x4397fc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movq	(%rbx), %r10
               	testq	%r10, %r10
               	je	0x4397e3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x813>
               	movslq	8(%r10), %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x4397cb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7fb>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x4397d4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x804>
               	jmp	0x4397fc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x4397fc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x4397fc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x4397fc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movq	%rcx, (%r8,%rdx,8)
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%r14, %rax
               	addq	$216, %rax
               	cmpq	%rcx, %rax
               	jne	0x4397f4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x824>
               	movq	%r10, (%rcx)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rbx), %rax
               	movq	%rax, (%rsi)
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	addq	$-1, 224(%r14)
               	movq	%r14, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	$0, -48(%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	45745(%rip), %rdx       # 0x444aed <typeinfo name for kotlin::gc::GCSchedulerData+0x1984>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435880 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitInit()>:
               	pushq	%rax
               	leaq	265384(%rip), %rdi      # 0x47a510 <konan::dummyKey>
               	xorl	%esi, %esi
               	callq	0x413830 <pthread_key_create@plt>
               	leaq	265318(%rip), %rdi      # 0x47a4dc <konan::terminationKey>
               	leaq	19(%rip), %rsi          # 0x439890 <konan::onThreadExitCallback(void*)>
               	popq	%rax
               	jmp	0x413830 <pthread_key_create@plt>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitCallback(void*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	265279(%rip), %edi      # 0x47a4dc <konan::terminationKey>
               	xorl	%esi, %esi
               	callq	0x413840 <pthread_setspecific@plt>
               	testq	%rbx, %rbx
               	je	0x4398ca <konan::onThreadExitCallback(void*)+0x3a>
               	nopl	(%rax)
               	movq	16(%rbx), %rdi
               	callq	*8(%rbx)
               	movq	(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x4398b0 <konan::onThreadExitCallback(void*)+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	leaq	328(%rsi), %r14
               	movl	$1, %ebp
               	movl	$1, %eax
               	xchgl	%eax, 328(%rsi)
               	movl	%eax, 4(%rsp)
               	leaq	16(%rdi), %r12
               	movl	$1, %r13d
               	xchgl	%r13d, 328(%rsi)
               	movq	%r12, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439983 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xa3>
               	movl	%r13d, %eax
               	xchgl	%eax, (%r14)
               	testl	%r13d, %r13d
               	jne	0x43994c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	cmpl	$1, %eax
               	jne	0x43994c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movb	164944(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43994c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movq	%r14, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x4399d6 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xf6>
               	jmp	0x4399ed <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x439a54 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x174>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x4399ed <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	cmpl	$1, %eax
               	jne	0x4399ed <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movb	164783(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4399ed <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x437f30 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439a70 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x190>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x439a2e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	cmpl	$1, %eax
               	jne	0x439a2e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movb	164718(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439a2e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movq	%r14, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addl	$1, 264(%r12)
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x439ab3 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1d3>
               	jmp	0x439aca <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	callq	0x437f30 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movl	$1, %eax
               	xchgl	%eax, 328
               	movq	%r12, %rdi
               	callq	0x413780 <pthread_mutex_lock@plt>
               	addl	$1, 264(%r12)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x439b06 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x226>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x439aca <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	cmpl	$1, %eax
               	jne	0x439aca <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	movb	164562(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439aca <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$40, %r12
               	movq	%r12, %rdi
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	testq	%r15, %r15
               	je	0x439af7 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x217>
               	movl	4(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ecx, %ecx
               	jne	0x439af7 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x217>
               	cmpl	$1, %eax
               	jne	0x439af7 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x217>
               	movb	164509(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x439b20 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x240>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$40, %r12
               	movq	%r12, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x413a40 <pthread_cond_broadcast@plt>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x439b6d <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x2d>
               	movq	%rdi, %rbx
               	movq	24(%rbx), %rdi
               	callq	0x439b40 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	16(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x439b50 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x10>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::kotlinHandler()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rdi
               	callq	0x43b8cd <std::current_exception()>
               	cmpq	$0, 8(%rsp)
               	jne	0x439bc7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x47>
               	leaq	8(%rsp), %rdi
               	callq	0x43b84a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x439be1 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x61>
               	xorl	%ebx, %ebx
               	jmp	0x439be7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x67>
               	leaq	16(%rsp), %rbx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43b80c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbx, %rdi
               	callq	0x43b922 <std::rethrow_exception(std::__exception_ptr::exception_ptr)>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x439e80 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x439c1e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x439c1e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	cmpl	$1, %eax
               	jne	0x439c1e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movb	164229(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439c1e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	movq	%rdx, %r15
               	movq	%rax, %rbx
               	leaq	16(%rsp), %rdi
               	callq	0x43b84a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%rbx, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	cmpl	$2, %r15d
               	jne	0x439c9e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x11e>
               	movq	%rax, %r14
               	callq	0x438230 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	xorl	%ebx, %ebx
               	xchgl	%ebx, 328(%r15)
               	addq	$328, %r15              # imm = 0x148
               	cmpl	$1, %ebx
               	jne	0x439c86 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movb	164118(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439c86 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movq	%r15, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x439d40 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x439e70 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x439cbf <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x13f>
               	xorl	%ebx, %ebx
               	jmp	0x439cc5 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x145>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x439e80 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	164007(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	jmp	0x439d17 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x197>
               	movq	%rax, %r14
               	movl	%ebx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebx, %ebx
               	jne	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	163968(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439d1c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movq	%r15, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x43bbd5 <__cxa_end_catch>
               	leaq	8(%rsp), %rdi
               	callq	0x43b84a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::processUnhandledException(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	163828(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439da5 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x65>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	159093(%rip), %eax      # 0x460b20 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	cmpl	$2, %eax
               	je	0x439dc3 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x83>
               	leaq	159081(%rip), %rdi      # 0x460b20 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	leaq	-130030(%rip), %rsi     # 0x41a1d0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>
               	callq	0x43a030 <CallInitGlobalPossiblyLock>
               	movq	159022(%rip), %rax      # 0x460af8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	%rdi, 32(%rsp)
               	testq	%rdi, %rdi
               	je	0x439e23 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0xe3>
               	leaq	40(%rsp), %rdx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$44, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rbx, %rdi
               	callq	0x43a250 <ThrowException>
               	movq	%rax, %rbx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$2, %edx
               	jne	0x439e65 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x125>
               	movq	%rbx, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rdi
               	callq	0x439e70 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%rax, %rbx
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x423450 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>:
               	pushq	%rax
               	callq	0x439f80 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()>:
               	pushq	%rax
               	callq	0x439e90 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>
               	nopw	%cs:(%rax,%rax)

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 158657(%rip)      # 0x460a64 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x439eaa <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1a>
               	callq	0x439f30 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x439ec6 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x36>
               	xorl	%ebx, %ebx
               	jmp	0x439ed1 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x41>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movl	158601(%rip), %edi      # 0x460a60 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a50 <sleep@plt>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	callq	0x436250 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a60 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x439f22 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x439f22 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	cmpl	$1, %eax
               	jne	0x439f22 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	movb	163457(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439f22 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>:
               	pushq	%rax
               	callq	0x439f40 <(anonymous namespace)::TerminateHandler::instance()>
               	callq	*263652(%rip)           # 0x47a520 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	nopl	(%rax)

<(anonymous namespace)::TerminateHandler::instance()>:
               	pushq	%rax
               	movb	263633(%rip), %al       # 0x47a518 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x439f4d <(anonymous namespace)::TerminateHandler::instance()+0xd>
               	popq	%rax
               	retq
               	leaq	263620(%rip), %rdi      # 0x47a518 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43bd71 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x439f4b <(anonymous namespace)::TerminateHandler::instance()+0xb>
               	leaq	-996(%rip), %rdi        # 0x439b80 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43beaa <std::set_terminate(void (*)())>
               	movq	%rax, 263600(%rip)      # 0x47a520 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	263585(%rip), %rdi      # 0x47a518 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43be60 <__cxa_guard_release>
               	popq	%rax
               	retq
               	nop

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 158417(%rip)      # 0x460a64 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x439f9a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x1a>
               	callq	0x43a020 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x439fb6 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x36>
               	xorl	%ebx, %ebx
               	jmp	0x439fc1 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x41>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movl	158361(%rip), %edi      # 0x460a60 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a50 <sleep@plt>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	callq	0x436250 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a60 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a012 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a012 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	cmpl	$1, %eax
               	jne	0x43a012 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	movb	163217(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a012 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>:
               	pushq	%rax
               	callq	0x41a120 <ReportUnhandledException>
               	callq	0x4359b0 <konan::abort()>
               	nopl	(%rax,%rax)

<CallInitGlobalPossiblyLock>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	(%rdi), %ebp
               	cmpl	$2, %ebp
               	je	0x43a112 <CallInitGlobalPossiblyLock+0xe2>
               	cmpl	$3, %ebp
               	je	0x43a117 <CallInitGlobalPossiblyLock+0xe7>
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	callq	0x4357a0 <konan::gettid()>
               	movl	%ebp, %ecx
               	andl	$3, %ecx
               	cmpl	$1, %ecx
               	jne	0x43a09e <CallInitGlobalPossiblyLock+0x6e>
               	andl	$-4, %ebp
               	shll	$2, %eax
               	cmpl	%eax, %ebp
               	je	0x43a112 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a090 <CallInitGlobalPossiblyLock+0x60>
               	jmp	0x43a0ec <CallInitGlobalPossiblyLock+0xbc>
               	leal	1(,%rax,4), %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	jne	0x43a0b8 <CallInitGlobalPossiblyLock+0x88>
               	callq	*%r14
               	movl	$2, (%rbx)
               	jmp	0x43a112 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	nopl	(%rax)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a0e0 <CallInitGlobalPossiblyLock+0xb0>
               	testq	%rcx, %rcx
               	je	0x43a10d <CallInitGlobalPossiblyLock+0xdd>
               	movl	%eax, %ecx
               	xchgl	%ecx, (%rdi)
               	testl	%eax, %eax
               	jne	0x43a10d <CallInitGlobalPossiblyLock+0xdd>
               	cmpl	$1, %ecx
               	jne	0x43a10d <CallInitGlobalPossiblyLock+0xdd>
               	movb	162956(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a10d <CallInitGlobalPossiblyLock+0xdd>
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	cmpl	$3, %ebp
               	je	0x43a117 <CallInitGlobalPossiblyLock+0xe7>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a050 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43bd14 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<CallInitThreadLocal>:
               	pushq	%rbx
               	cmpl	$3, (%rdi)
               	je	0x43a153 <CallInitThreadLocal+0x13>
               	movq	%rdi, %rbx
               	movl	$2, (%rdi)
               	callq	*%rsi
               	popq	%rbx
               	retq
               	callq	0x41a050 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43bd14 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<Kotlin_Long_toStringRadix>:
               	subq	$72, %rsp
               	testq	%rdi, %rdi
               	je	0x43a223 <Kotlin_Long_toStringRadix+0xa3>
               	negq	%rdi
               	xorl	%r10d, %r10d
               	movl	$48, %r8d
               	movabsq	$4294967296, %r9        # imm = 0x100000000
               	xorl	%r11d, %r11d
               	nopw	%cs:(%rax,%rax)
               	leaq	15(%rdi), %rdx
               	testq	%rdi, %rdi
               	cmovnsq	%rdi, %rdx
               	sarq	$4, %rdx
               	movl	%edx, %eax
               	shll	$4, %eax
               	subl	%edi, %eax
               	cmpl	$10, %eax
               	movl	$87, %ecx
               	cmovbl	%r8d, %ecx
               	addb	%al, %cl
               	movb	%cl, (%rsp,%r11)
               	addq	$1, %r11
               	addq	%r9, %r10
               	cmpq	$-15, %rdi
               	movq	%rdx, %rdi
               	jl	0x43a1b0 <Kotlin_Long_toStringRadix+0x30>
               	cmpl	$1, %r11d
               	jle	0x43a233 <Kotlin_Long_toStringRadix+0xb3>
               	movl	%r11d, %r10d
               	leaq	-2(%r10), %rcx
               	xorl	%edx, %edx
               	nop
               	movzbl	(%rsp,%rdx), %edi
               	movzbl	1(%rsp,%rcx), %eax
               	movb	%al, (%rsp,%rdx)
               	movb	%dil, 1(%rsp,%rcx)
               	addq	$1, %rdx
               	leaq	-1(%rcx), %rax
               	cmpq	%rcx, %rdx
               	movq	%rax, %rcx
               	jl	0x43a200 <Kotlin_Long_toStringRadix+0x80>
               	jmp	0x43a237 <Kotlin_Long_toStringRadix+0xb7>
               	leaq	43249(%rip), %rdi       # 0x444b1b <typeinfo name for kotlin::gc::GCSchedulerData+0x19b2>
               	addq	$72, %rsp
               	jmp	0x436470 <CreateStringFromCString>
               	sarq	$32, %r10
               	movb	$0, (%rsp,%r10)
               	movq	%rsp, %rdi
               	callq	0x436470 <CreateStringFromCString>
               	addq	$72, %rsp
               	retq
               	nopl	(%rax)

<ThrowException>:
               	pushq	%rax
               	callq	0x424930 <ExceptionObjHolder::Throw(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_terminateWithUnhandledException>:
               	pushq	%rax
               	callq	0x439e70 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_Any_equals>:
               	cmpq	%rsi, %rdi
               	sete	%al
               	retq
               	nopw	(%rax,%rax)

<Kotlin_getCurrentStackTrace>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbp
               	movq	-64(%rax), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rsp, %r12
               	movq	%r12, %rdi
               	callq	0x4359c0 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>
               	movq	(%rsp), %r14
               	movq	8(%rsp), %r15
               	testq	%r13, %r13
               	je	0x43a2f6 <Kotlin_getCurrentStackTrace+0x76>
               	addq	$328, %r13              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ebx, %ebx
               	jne	0x43a2f6 <Kotlin_getCurrentStackTrace+0x76>
               	cmpl	$1, %eax
               	jne	0x43a2f6 <Kotlin_getCurrentStackTrace+0x76>
               	movb	162470(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a2f6 <Kotlin_getCurrentStackTrace+0x76>
               	movq	%r13, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 24(%rsp)
               	movq	%rbp, %r13
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	subq	%r14, %r15
               	movq	%r15, %rbp
               	sarq	$3, %rbp
               	testl	%ebp, %ebp
               	js	0x43a417 <Kotlin_getCurrentStackTrace+0x197>
               	movq	296(%rax), %rdi
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%r15, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	122830(%rip), %rax      # 0x458350 <ktypeglobal:kotlin.native.internal.NativePtrArray#internal>
               	movq	%rax, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%r12, 24(%rsp)
               	testq	%r15, %r15
               	je	0x43a3d5 <Kotlin_getCurrentStackTrace+0x155>
               	cmpq	$1, %rbp
               	movl	$1, %esi
               	cmovaq	%rbp, %rsi
               	movl	%ebp, %edi
               	xorl	%ebp, %ebp
               	movabsq	$4294967296, %r8        # imm = 0x100000000
               	xorl	%ebx, %ebx
               	cmpq	%rbx, %rdi
               	je	0x43a412 <Kotlin_getCurrentStackTrace+0x192>
               	movq	(%r14,%rbx,8), %rax
               	movq	16(%rcx), %rdx
               	movq	%rbp, %rdx
               	sarq	$29, %rdx
               	movq	%rax, 32(%rcx,%rdx)
               	addq	$1, %rbx
               	addq	%r8, %rbp
               	cmpq	%rbx, %rsi
               	jne	0x43a3b0 <Kotlin_getCurrentStackTrace+0x130>
               	movq	32(%rsp), %rax
               	movq	%r12, (%rax)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a400 <Kotlin_getCurrentStackTrace+0x180>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ba0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	jmp	0x43a41e <Kotlin_getCurrentStackTrace+0x19e>
               	movq	%rax, %r15
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a444 <Kotlin_getCurrentStackTrace+0x1c4>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax)

<Kotlin_io_Console_print>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	leaq	119921(%rip), %rcx      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, (%rax)
               	jne	0x43a5d0 <Kotlin_io_Console_print+0x180>
               	leaq	24(%rsp), %r15
               	movq	%r15, 8(%rsp)
               	movq	$0, 16(%rsp)
               	movb	$0, 24(%rsp)
               	movl	8(%rbx), %ebp
               	cmpq	$16, %rbp
               	jb	0x43a4be <Kotlin_io_Console_print+0x6e>
               	cmpl	$30, %ebp
               	movl	$30, %r14d
               	cmoval	%ebp, %r14d
               	leaq	1(%r14), %rdi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 8(%rsp)
               	movq	%r14, 24(%rsp)
               	movq	%rbp, %rax
               	addq	%rbp, %rax
               	je	0x43a554 <Kotlin_io_Console_print+0x104>
               	addq	$16, %rbx
               	leaq	(%rbx,%rbp,2), %r12
               	movl	$65533, %r13d           # imm = 0xFFFD
               	leaq	8(%rsp), %r14
               	jmp	0x43a51d <Kotlin_io_Console_print+0xcd>
               	nop
               	cmpq	%r12, %rbp
               	je	0x43a545 <Kotlin_io_Console_print+0xf5>
               	movzwl	2(%rbx), %ecx
               	shll	$10, %eax
               	leal	(%rax,%rcx), %edi
               	addl	$4238353408, %edi       # imm = 0xFCA02400
               	movl	%ecx, %eax
               	andl	$64512, %eax            # imm = 0xFC00
               	addq	$4, %rbx
               	cmpl	$56320, %eax            # imm = 0xDC00
               	cmovnel	%r13d, %edi
               	cmoveq	%rbx, %rbp
               	movq	%r14, %rsi
               	callq	0x436900 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%rbp, %rbx
               	cmpq	%r12, %rbp
               	je	0x43a554 <Kotlin_io_Console_print+0x104>
               	leaq	2(%rbx), %rbp
               	movzwl	(%rbx), %eax
               	movl	%eax, %ecx
               	andl	$64512, %ecx            # imm = 0xFC00
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x43a4e0 <Kotlin_io_Console_print+0x90>
               	movl	$65533, %edi            # imm = 0xFFFD
               	cmpl	$56320, %ecx            # imm = 0xDC00
               	je	0x43a50d <Kotlin_io_Console_print+0xbd>
               	movl	%eax, %edi
               	jmp	0x43a50d <Kotlin_io_Console_print+0xbd>
               	leaq	8(%rsp), %rsi
               	movl	$65533, %edi            # imm = 0xFFFD
               	callq	0x436900 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	328(%rbx), %r12
               	movq	8(%rsp), %rsi
               	movl	16(%rsp), %edx
               	movl	$1, %edi
               	callq	0x413930 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43a5b2 <Kotlin_io_Console_print+0x162>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x43a5b2 <Kotlin_io_Console_print+0x162>
               	cmpl	$1, %eax
               	jne	0x43a5b2 <Kotlin_io_Console_print+0x162>
               	movb	161770(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a5b2 <Kotlin_io_Console_print+0x162>
               	movq	%r12, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%rsp), %rdi
               	cmpq	%r15, %rdi
               	je	0x43a5c1 <Kotlin_io_Console_print+0x171>
               	callq	0x413730 <free@plt>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	119561(%rip), %rsi      # 0x4578e0 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419c70 <ThrowClassCastException>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	jne	0x43a5fe <Kotlin_io_Console_print+0x1ae>
               	movq	8(%rsp), %rdi
               	cmpq	%r15, %rdi
               	je	0x43a5f6 <Kotlin_io_Console_print+0x1a6>
               	callq	0x413730 <free@plt>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x43a5e7 <Kotlin_io_Console_print+0x197>
               	cmpl	$1, %eax
               	jne	0x43a5e7 <Kotlin_io_Console_print+0x197>
               	movb	161661(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a5e7 <Kotlin_io_Console_print+0x197>
               	movq	%r12, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43a5e7 <Kotlin_io_Console_print+0x197>
               	nopw	%cs:(%rax,%rax)

<Kotlin_io_Console_println>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43a450 <Kotlin_io_Console_print>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	328(%rbx), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	42165(%rip), %rsi       # 0x444b1d <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movl	$1, %edx
               	movl	$1, %edi
               	callq	0x413930 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43a694 <Kotlin_io_Console_println+0x64>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43a694 <Kotlin_io_Console_println+0x64>
               	cmpl	$1, %eax
               	jne	0x43a694 <Kotlin_io_Console_println+0x64>
               	movb	161536(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43a69f <Kotlin_io_Console_println+0x6f>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a6d9 <Kotlin_io_Console_println+0xa9>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43a6d9 <Kotlin_io_Console_println+0xa9>
               	cmpl	$1, %eax
               	jne	0x43a6d9 <Kotlin_io_Console_println+0xa9>
               	movb	161475(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a6d9 <Kotlin_io_Console_println+0xa9>
               	movq	%r15, %rdi
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<Init_and_run_start>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movl	%edx, %ebx
               	movq	%rsi, %r15
               	movl	%edi, %r14d
               	callq	0x438230 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x43a744 <Init_and_run_start+0x54>
               	movb	161372(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a744 <Init_and_run_start+0x54>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424740 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 80(%rsp)
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 72(%rsp)
               	testl	%r14d, %r14d
               	jle	0x43a915 <Init_and_run_start+0x225>
               	movl	%ebx, 12(%rsp)
               	leal	-1(%r14), %ebp
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427e80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 24(%rbx)
               	leaq	115973(%rip), %rcx      # 0x456cd0 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%rax, 80(%rsp)
               	cmpl	$1, %r14d
               	jne	0x43a7f7 <Init_and_run_start+0x107>
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	jmp	0x43a87c <Init_and_run_start+0x18c>
               	movl	%r14d, %ebp
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	addq	$-1, %rbp
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %r12
               	nopl	(%rax,%rax)
               	movq	$0, 40(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	8(%r15,%r14,8), %rdi
               	leaq	40(%rsp), %rsi
               	callq	0x436470 <CreateStringFromCString>
               	movq	40(%rsp), %rax
               	movq	%rax, 32(%rbx,%r14,8)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$1, %r14
               	cmpq	%r14, %rbp
               	jne	0x43a820 <Init_and_run_start+0x130>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rbx
               	movq	%rbx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	160993(%rip), %al       # 0x461d90 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a8b8 <Init_and_run_start+0x1c8>
               	callq	0x424910 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x420c50 <kfun:#main(){}>
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$0, 12(%rsp)
               	je	0x43a904 <Init_and_run_start+0x214>
               	movq	%r13, %rax
               	movq	-48(%r13), %rcx
               	movl	$1, %edx
               	movl	$2, %esi
               	movl	$1, %eax
               	lock
               	cmpxchgl	%esi, 261125(%rip)      # 0x47a500 <(anonymous namespace)::globalRuntimeStatus>
               	movq	(%rcx), %rax
               	xchgl	%edx, 328(%rax)
               	xorl	%eax, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419f80 <ThrowIllegalArgumentException>
               	movq	%rax, %rdi
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43a98c <Init_and_run_start+0x29c>
               	movq	%rax, %rdi
               	movq	%r13, %rbp
               	movq	-64(%r13), %rax
               	movq	%rbx, 288(%rax)
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x439d40 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	%rbx, %rdi
               	callq	0x43a260 <Kotlin_terminateWithUnhandledException>
               	movq	%rax, %rdi
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	jmp	0x43a980 <Init_and_run_start+0x290>
               	movq	%rax, %rdi
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax)

<main>:
               	pushq	%rax
               	movl	$1, %edx
               	callq	0x43a6f0 <Init_and_run_start>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq

<read_uleb128(unsigned char const*, unsigned long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %r8b
               	movq	%r8, %rdi
               	andl	$127, %edi
               	shlq	%cl, %rdi
               	addl	$7, %ecx
               	orq	%rdi, %rdx
               	testb	%r8b, %r8b
               	js	0x43a9b6 <read_uleb128(unsigned char const*, unsigned long*)+0x7>
               	movq	%rdx, (%rsi)
               	retq

<read_sleb128(unsigned char const*, long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %dil
               	movq	%rdi, %r8
               	andl	$127, %r8d
               	shlq	%cl, %r8
               	addl	$7, %ecx
               	orq	%r8, %rdx
               	testb	%dil, %dil
               	js	0x43a9dc <read_sleb128(unsigned char const*, long*)+0x7>
               	cmpl	$63, %ecx
               	ja	0x43aa0d <read_sleb128(unsigned char const*, long*)+0x38>
               	andb	$64, %dil
               	je	0x43aa0d <read_sleb128(unsigned char const*, long*)+0x38>
               	orq	$-1, %rdi
               	shlq	%cl, %rdi
               	orq	%rdi, %rdx
               	movq	%rdx, (%rsi)
               	retq

<get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$40, %rsp
               	movq	(%rdx), %rax
               	movq	%rsi, 8(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	(%rsi), %rax
               	callq	*16(%rax)
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	je	0x43aa49 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x38>
               	movq	24(%rsp), %rax
               	movq	(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movq	(%rbp), %rax
               	leaq	24(%rsp), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	testb	%al, %al
               	je	0x43aa69 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x58>
               	movq	24(%rsp), %rdx
               	movq	%rdx, (%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>:
               	movq	%rdx, %r9
               	movq	%rcx, %r11
               	cmpb	$80, %dil
               	jne	0x43aa8f <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x1f>
               	leaq	7(%rdx), %rax
               	andq	$-8, %rax
               	movq	(%rax), %rdx
               	leaq	8(%rax), %rax
               	movq	%rdx, (%rcx)
               	retq
               	pushq	%rbx
               	movl	%edi, %eax
               	movl	%edi, %r10d
               	andl	$15, %eax
               	subq	$16, %rsp
               	cmpb	$12, %al
               	ja	0x43ab00 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x90>
               	leaq	43417(%rip), %rdx       # 0x445440 <_mi_page_empty+0x40>
               	movzbl	%al, %eax
               	movq	%rsi, %rbx
               	movslq	(%rdx,%rax,4), %rax
               	addq	%rdx, %rax
               	jmpq	*%rax
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43a9af <read_uleb128(unsigned char const*, unsigned long*)>
               	jmp	0x43aad2 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x62>
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43a9d5 <read_sleb128(unsigned char const*, long*)>
               	movq	8(%rsp), %rdx
               	jmp	0x43ab05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movzwl	(%r9), %edx
               	jmp	0x43aae8 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x78>
               	movl	(%r9), %edx
               	jmp	0x43aaf1 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x81>
               	movswq	(%r9), %rdx
               	leaq	2(%r9), %rax
               	jmp	0x43ab05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movslq	(%r9), %rdx
               	leaq	4(%r9), %rax
               	jmp	0x43ab05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movq	(%r9), %rdx
               	leaq	8(%r9), %rax
               	jmp	0x43ab05 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	callq	0x413940 <abort@plt>
               	testq	%rdx, %rdx
               	je	0x43ab22 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movl	%r10d, %ecx
               	andl	$112, %ecx
               	cmpb	$16, %cl
               	cmoveq	%r9, %rbx
               	addq	%rbx, %rdx
               	testb	%r10b, %r10b
               	jns	0x43ab22 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movq	(%rdx), %rdx
               	movq	%rdx, (%r11)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<get_ttype_entry(lsda_header_info*, unsigned long)>:
               	subq	$24, %rsp
               	movq	%rdi, %r8
               	movzbl	40(%rdi), %edi
               	cmpb	$-1, %dil
               	je	0x43ab6a <get_ttype_entry(lsda_header_info*, unsigned long)+0x3f>
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpb	$2, %dl
               	je	0x43ab6e <get_ttype_entry(lsda_header_info*, unsigned long)+0x43>
               	ja	0x43ab51 <get_ttype_entry(lsda_header_info*, unsigned long)+0x26>
               	movl	$8, %eax
               	testb	%dl, %dl
               	jmp	0x43ab63 <get_ttype_entry(lsda_header_info*, unsigned long)+0x38>
               	movl	$4, %eax
               	cmpb	$3, %dl
               	je	0x43ab73 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$8, %eax
               	cmpb	$4, %dl
               	je	0x43ab73 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	callq	0x413940 <abort@plt>
               	xorl	%eax, %eax
               	jmp	0x43ab73 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$2, %eax
               	imulq	%rsi, %rax
               	movq	24(%r8), %rdx
               	movq	16(%r8), %rsi
               	leaq	8(%rsp), %rcx
               	subq	%rax, %rdx
               	callq	0x43aa70 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>:
               	pushq	%r13
               	notq	%rcx
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	24(%rdi), %rbx
               	movq	%rdx, 8(%rsp)
               	leaq	24(%rsp), %r13
               	addq	%rcx, %rbx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43a9af <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rbx
               	testq	%rsi, %rsi
               	je	0x43abf0 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5a>
               	movq	%rbp, %rdi
               	callq	0x43ab2b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	leaq	8(%rsp), %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43aa11 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	testb	%al, %al
               	je	0x43abba <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x24>
               	jmp	0x43abf2 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5c>
               	xorl	%eax, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<base_of_encoded_value(unsigned char, _Unwind_Context*)>:
               	movl	%edi, %eax
               	cmpb	$-1, %dil
               	je	0x43ac3c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	andl	$112, %eax
               	movq	%rsi, %rdi
               	cmpb	$32, %al
               	je	0x43ac2c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2f>
               	ja	0x43ac1b <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1e>
               	testb	%al, %al
               	je	0x43ac3c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$16, %al
               	je	0x43ac3c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	jmp	0x43ac36 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	cmpb	$64, %al
               	je	0x43ac31 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
               	cmpb	$80, %al
               	je	0x43ac3c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$48, %al
               	jne	0x43ac36 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	jmp	0x413a70 <_Unwind_GetDataRelBase@plt>
               	jmp	0x413a80 <_Unwind_GetTextRelBase@plt>
               	jmp	0x413a90 <_Unwind_GetRegionStart@plt>
               	pushq	%rax
               	callq	0x413940 <abort@plt>
               	xorl	%eax, %eax
               	retq

<read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>:
               	pushq	%rbx
               	movzbl	%sil, %ebx
               	movq	%rdi, %rsi
               	movl	%ebx, %edi
               	subq	$16, %rsp
               	movq	%rdx, 8(%rsp)
               	movq	%rcx, (%rsp)
               	callq	0x43abfd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rdx
               	movl	%ebx, %edi
               	addq	$16, %rsp
               	movq	%rax, %rsi
               	popq	%rbx
               	jmp	0x43aa70 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>

<parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x43ac90 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x1d>
               	callq	0x413a90 <_Unwind_GetRegionStart@plt>
               	movq	%rax, (%rbx)
               	movzbl	(%r12), %esi
               	leaq	1(%r12), %rdx
               	cmpb	$-1, %sil
               	je	0x43acb4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x41>
               	leaq	8(%rbx), %rcx
               	movq	%rbp, %rdi
               	callq	0x43ac3f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movq	%rax, %rdx
               	jmp	0x43acb8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x45>
               	movq	%rax, 8(%rbx)
               	leaq	1(%rdx), %rax
               	movb	(%rdx), %dl
               	leaq	8(%rsp), %r9
               	movb	%dl, 40(%rbx)
               	incb	%dl
               	je	0x43ace3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x70>
               	movq	%r9, %rsi
               	movq	%rax, %rdi
               	callq	0x43a9af <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 24(%rbx)
               	jmp	0x43aceb <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x78>
               	movq	$0, 24(%rbx)
               	leaq	1(%rax), %rdi
               	movb	(%rax), %al
               	movq	%r9, %rsi
               	movb	%al, 41(%rbx)
               	callq	0x43a9af <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 32(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<__gxx_personality_v0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$152, %rsp
               	decl	%edi
               	movq	$0, 56(%rsp)
               	movl	$0, 52(%rsp)
               	jne	0x43b0be <__gxx_personality_v0+0x3ad>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	movq	%r8, %rbp
               	movq	%rcx, %rbx
               	movl	%esi, 12(%rsp)
               	addq	%rdx, %rax
               	cmpq	$1, %rax
               	movq	%rax, (%rsp)
               	setbe	35(%rsp)
               	cmpl	$6, %esi
               	sete	%al
               	andb	35(%rsp), %al
               	movb	%al, 34(%rsp)
               	je	0x43ad8c <__gxx_personality_v0+0x7b>
               	movq	-16(%rcx), %r12
               	movl	-36(%rcx), %r14d
               	movq	-24(%rcx), %r15
               	cmpq	$1, %r12
               	sbbl	%eax, %eax
               	andl	$-2, %eax
               	addl	$3, %eax
               	jmp	0x43b025 <__gxx_personality_v0+0x314>
               	movq	%r8, %rdi
               	callq	0x413aa0 <_Unwind_GetLanguageSpecificData@plt>
               	movq	%rax, %r15
               	testq	%rax, %rax
               	je	0x43afdc <__gxx_personality_v0+0x2cb>
               	leaq	96(%rsp), %rax
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	movq	%rax, %rdx
               	movq	%rax, 24(%rsp)
               	callq	0x43ac73 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, %r14
               	callq	0x43abfd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	leaq	52(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	%rax, 112(%rsp)
               	callq	0x413ab0 <_Unwind_GetIPInfo@plt>
               	cmpl	$0, 52(%rsp)
               	movq	%rax, %r13
               	jne	0x43adea <__gxx_personality_v0+0xd9>
               	decq	%r13
               	leaq	64(%rsp), %r12
               	cmpq	%r14, 128(%rsp)
               	jbe	0x43afc2 <__gxx_personality_v0+0x2b1>
               	movzbl	137(%rsp), %esi
               	movq	%r14, %rdx
               	movq	%r12, %rcx
               	xorl	%edi, %edi
               	callq	0x43ac3f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	72(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43ac3f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	80(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43ac3f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	leaq	88(%rsp), %rsi
               	movq	%rax, %rdi
               	callq	0x43a9af <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	%rax, %r14
               	movq	64(%rsp), %rax
               	addq	96(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43ae69 <__gxx_personality_v0+0x158>
               	movq	128(%rsp), %r14
               	jmp	0x43adef <__gxx_personality_v0+0xde>
               	addq	72(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43adef <__gxx_personality_v0+0xde>
               	movq	80(%rsp), %r12
               	testq	%r12, %r12
               	je	0x43ae86 <__gxx_personality_v0+0x175>
               	addq	104(%rsp), %r12
               	movq	88(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b0e1 <__gxx_personality_v0+0x3d0>
               	movq	128(%rsp), %rdx
               	testq	%r12, %r12
               	je	0x43afdc <__gxx_personality_v0+0x2cb>
               	leaq	-1(%rdx,%rax), %r13
               	testq	%r13, %r13
               	je	0x43afed <__gxx_personality_v0+0x2dc>
               	movl	12(%rsp), %eax
               	andl	$8, %eax
               	movl	%eax, 36(%rsp)
               	jne	0x43aedf <__gxx_personality_v0+0x1ce>
               	cmpq	$1, (%rsp)
               	ja	0x43aee8 <__gxx_personality_v0+0x1d7>
               	leaq	32(%rbx), %rax
               	testb	$1, (%rbx)
               	je	0x43aed4 <__gxx_personality_v0+0x1c3>
               	movq	-80(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movq	-112(%rax), %r14
               	jmp	0x43aeef <__gxx_personality_v0+0x1de>
               	leaq	145314(%rip), %r14      # 0x45e688 <typeinfo for __cxxabiv1::__forced_unwind>
               	jmp	0x43aeef <__gxx_personality_v0+0x1de>
               	leaq	145321(%rip), %r14      # 0x45e698 <typeinfo for __cxxabiv1::__foreign_exception>
               	leaq	72(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	40(%rsp), %rsi
               	movq	%r13, %rdi
               	callq	0x43a9d5 <read_sleb128(unsigned char const*, long*)>
               	leaq	80(%rsp), %rsi
               	movq	%rax, %rdi
               	movq	%rax, 16(%rsp)
               	callq	0x43a9d5 <read_sleb128(unsigned char const*, long*)>
               	movq	72(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43afa6 <__gxx_personality_v0+0x295>
               	jle	0x43af55 <__gxx_personality_v0+0x244>
               	movq	24(%rsp), %rdi
               	movq	%rcx, %rsi
               	callq	0x43ab2b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	testq	%rax, %rax
               	je	0x43b0d2 <__gxx_personality_v0+0x3c1>
               	testq	%r14, %r14
               	je	0x43afab <__gxx_personality_v0+0x29a>
               	leaq	56(%rsp), %rdx
               	movq	%r14, %rsi
               	movq	%rax, %rdi
               	callq	0x43aa11 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	jmp	0x43af9d <__gxx_personality_v0+0x28c>
               	cmpl	$0, 36(%rsp)
               	sete	%al
               	testb	%al, 35(%rsp)
               	je	0x43af7f <__gxx_personality_v0+0x26e>
               	testq	%r14, %r14
               	je	0x43af7f <__gxx_personality_v0+0x26e>
               	movq	56(%rsp), %rdx
               	leaq	96(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x43ab96 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	xorl	$1, %eax
               	jmp	0x43af9d <__gxx_personality_v0+0x28c>
               	notq	%rcx
               	addq	120(%rsp), %rcx
               	leaq	88(%rsp), %rsi
               	movq	%rcx, %rdi
               	callq	0x43a9af <read_uleb128(unsigned char const*, unsigned long*)>
               	cmpq	$0, 88(%rsp)
               	sete	%al
               	testb	%al, %al
               	je	0x43afab <__gxx_personality_v0+0x29a>
               	jmp	0x43b0d2 <__gxx_personality_v0+0x3c1>
               	movb	$1, 34(%rsp)
               	movq	80(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43afe6 <__gxx_personality_v0+0x2d5>
               	movq	16(%rsp), %r13
               	addq	%rax, %r13
               	jmp	0x43aef9 <__gxx_personality_v0+0x1e8>
               	xorl	%r14d, %r14d
               	xorl	%r12d, %r12d
               	xorl	%r13d, %r13d
               	movl	$1, %eax
               	testb	$1, 12(%rsp)
               	je	0x43b025 <__gxx_personality_v0+0x314>
               	cmpl	$2, %eax
               	jne	0x43aff7 <__gxx_personality_v0+0x2e6>
               	movl	$8, %eax
               	jmp	0x43b0f5 <__gxx_personality_v0+0x3e4>
               	cmpb	$0, 34(%rsp)
               	je	0x43afdc <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	movl	$2, %eax
               	jmp	0x43afd0 <__gxx_personality_v0+0x2bf>
               	cmpq	$1, (%rsp)
               	movl	$6, %eax
               	ja	0x43b0f5 <__gxx_personality_v0+0x3e4>
               	movq	56(%rsp), %rdx
               	movl	%r14d, -36(%rbx)
               	movq	%r13, -32(%rbx)
               	movq	%r15, -24(%rbx)
               	movq	%rdx, -8(%rbx)
               	movq	%r12, -16(%rbx)
               	jmp	0x43b0f5 <__gxx_personality_v0+0x3e4>
               	testb	$8, 12(%rsp)
               	jne	0x43b033 <__gxx_personality_v0+0x322>
               	cmpq	$1, (%rsp)
               	jbe	0x43b045 <__gxx_personality_v0+0x334>
               	decl	%eax
               	je	0x43b0cd <__gxx_personality_v0+0x3bc>
               	testl	%r14d, %r14d
               	jns	0x43b08f <__gxx_personality_v0+0x37e>
               	callq	0x43bef2 <std::unexpected()>
               	decl	%eax
               	jne	0x43b051 <__gxx_personality_v0+0x340>
               	movq	%rbx, %rdi
               	callq	0x43c07c <__cxa_call_terminate>
               	testl	%r14d, %r14d
               	jns	0x43b08f <__gxx_personality_v0+0x37e>
               	leaq	96(%rsp), %rdx
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	callq	0x43ac73 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	callq	0x43abfd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, 112(%rsp)
               	callq	0x43abfd <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	%rax, -16(%rbx)
               	movq	%rbx, %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x413ac0 <_Unwind_SetGR@plt>
               	movslq	%r14d, %rdx
               	movl	$1, %esi
               	movq	%rbp, %rdi
               	callq	0x413ac0 <_Unwind_SetGR@plt>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x413ad0 <_Unwind_SetIP@plt>
               	movl	$7, %eax
               	jmp	0x43b0f5 <__gxx_personality_v0+0x3e4>
               	movl	$3, %eax
               	jmp	0x43b0f5 <__gxx_personality_v0+0x3e4>
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bec3 <std::terminate()>
               	movl	72(%rsp), %r14d
               	movl	$3, %eax
               	jmp	0x43afd0 <__gxx_personality_v0+0x2bf>
               	testq	%r12, %r12
               	je	0x43afdc <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	xorl	%r13d, %r13d
               	jmp	0x43aff0 <__gxx_personality_v0+0x2df>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<__cxa_call_unexpected>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	-16(%rbx), %rax
               	movq	-64(%rbx), %rdi
               	movq	-24(%rbx), %r15
               	movslq	-36(%rbx), %rbp
               	movq	-56(%rbx), %r14
               	movq	%rax, 16(%rsp)
               	callq	0x43bed1 <__cxxabiv1::__unexpected(void (*)())>
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bf33 <__cxa_get_globals_fast>
               	movq	(%rax), %rax
               	leaq	112(%rax), %r13
               	testb	$1, 80(%rax)
               	je	0x43b158 <__cxa_call_unexpected+0x51>
               	movq	(%rax), %r13
               	movq	%rsp, %r12
               	movq	%r15, %rsi
               	xorl	%edi, %edi
               	movq	%r12, %rdx
               	callq	0x43ac73 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movq	-112(%r13), %rsi
               	movq	%rbp, %rcx
               	movq	%r13, %rdx
               	movq	%r12, %rdi
               	callq	0x43ab96 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b183 <__cxa_call_unexpected+0x7c>
               	callq	0x43bd14 <__cxa_rethrow>
               	leaq	144614(%rip), %rbx      # 0x45e670 <typeinfo for std::bad_exception>
               	movq	%rbp, %rcx
               	xorl	%edx, %edx
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x43ab96 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b1c8 <__cxa_call_unexpected+0xc1>
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	144673(%rip), %rdx      # 0x45e6d0 <vtable for std::bad_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	1359(%rip), %rdx        # 0x43b712 <std::bad_exception::~bad_exception()>
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%r14, %rdi
               	callq	0x43be98 <__cxxabiv1::__terminate(void (*)())>
               	movq	%rax, %rbx
               	callq	0x43bbd5 <__cxa_end_catch>
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<operator delete(void*)>:
               	jmp	0x413730 <free@plt>

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	leaq	144279(%rip), %rax      # 0x45e588 <vtable for __cxxabiv1::__si_class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b9ea <__cxxabiv1::__class_type_info::~__class_type_info()>
               	nop

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b1ea <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
               	movq	%rbx, %rdi
               	movl	$24, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43b231 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43b231 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413ae0 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	cmpq	%rdx, %r8
               	jne	0x43b272 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x40>
               	movq	8(%rcx), %rsi
               	movq	8(%rdi), %rdi
               	movq	%r8, 24(%rsp)
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	callq	0x43b216 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rdx
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	jne	0x43b288 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x56>
               	movq	16(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	(%rdi), %rax
               	movq	64(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	addq	$40, %rsp
               	movl	$6, %eax
               	popq	%rbx
               	popq	%rbp
               	retq

<__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rdx
               	movq	8(%rcx), %rsi
               	movq	96(%rsp), %r12
               	movq	104(%rsp), %r15
               	movq	%r8, 24(%rsp)
               	movq	%rdx, %rdi
               	movq	%r9, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43b216 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %r9
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x43b31a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x86>
               	movq	%r8, (%r15)
               	movl	%ebp, 8(%r15)
               	testq	%rbx, %rbx
               	js	0x43b30a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x76>
               	addq	%rbx, %r8
               	xorl	%eax, %eax
               	cmpq	%r8, %r12
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	movl	%eax, 16(%r15)
               	jmp	0x43b376 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	$-2, %rbx
               	jne	0x43b376 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movl	$1, 16(%r15)
               	jmp	0x43b376 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	%r12, %r8
               	jne	0x43b349 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movq	8(%r9), %rsi
               	movq	%rdx, %rdi
               	movq	%r8, 16(%rsp)
               	movq	%r9, 8(%rsp)
               	callq	0x43b216 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %r9
               	movq	16(%rsp), %r8
               	testb	%al, %al
               	je	0x43b349 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movl	%ebp, 12(%r15)
               	jmp	0x43b376 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movq	16(%r14), %rdi
               	movq	%r13, %rcx
               	movl	%ebp, %edx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	%r15, 104(%rsp)
               	movq	%r12, 96(%rsp)
               	movq	56(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax
               	addq	$40, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	callq	0x43ba90 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
               	testb	%al, %al
               	jne	0x43b3c3 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x3b>
               	movq	16(%r13), %rdi
               	movq	%r12, %rcx
               	movq	%rbp, %rdx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	48(%rax), %rax
               	popq	%r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmpq	*%rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<__gnu_cxx::__concurrence_lock_error::what() const>:
               	leaq	38732(%rip), %rax       # 0x444b1f <typeinfo name for kotlin::gc::GCSchedulerData+0x19b6>
               	retq

<__gnu_cxx::__concurrence_unlock_error::what() const>:
               	leaq	38760(%rip), %rax       # 0x444b43 <typeinfo name for kotlin::gc::GCSchedulerData+0x19da>
               	retq

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	leaq	143917(%rip), %rax      # 0x45e610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	leaq	143937(%rip), %rax      # 0x45e638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b3dc <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b3f0 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__mutex::lock()>:
               	cmpq	$0, 146300(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x43b478 <__gnu_cxx::__mutex::lock()+0x44>
               	pushq	%rdx
               	callq	0x413780 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x43b476 <__gnu_cxx::__mutex::lock()+0x42>
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	143799(%rip), %rdx      # 0x45e610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	leaq	143744(%rip), %rsi      # 0x45e5e0 <typeinfo for __gnu_cxx::__concurrence_lock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-149(%rip), %rdx        # 0x43b3dc <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	callq	0x43bcc5 <__cxa_throw>
               	popq	%rax
               	retq
               	retq
               	nop

<__gnu_cxx::__scoped_lock::~__scoped_lock()>:
               	cmpq	$0, 146230(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x43b4d3 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x59>
               	pushq	%rdx
               	movq	(%rdi), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	testl	%eax, %eax
               	je	0x43b4d1 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x57>
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	143766(%rip), %rdx      # 0x45e638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	leaq	143695(%rip), %rsi      # 0x45e5f8 <typeinfo for __gnu_cxx::__concurrence_unlock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-202(%rip), %rdx        # 0x43b3f0 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rdi
               	incq	%rdx
               	je	0x43b4cc <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x52>
               	callq	0x413740 <_Unwind_Resume@plt>
               	callq	0x43b107 <__cxa_call_unexpected>
               	popq	%rax
               	retq
               	retq

<(anonymous namespace)::pool::free(void*) (.constprop.2)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	258145(%rip), %rdi      # 0x47a540 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b434 <__gnu_cxx::__mutex::lock()>
               	movq	258164(%rip), %rdx      # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	leaq	-16(%rbx), %rcx
               	testq	%rdx, %rdx
               	je	0x43b50a <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x36>
               	movq	-16(%rbx), %rax
               	leaq	(%rcx,%rax), %rsi
               	cmpq	%rsi, %rdx
               	jbe	0x43b510 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x3c>
               	movq	%rdx, -8(%rbx)
               	jmp	0x43b52f <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x5b>
               	leaq	258129(%rip), %r8       # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	jne	0x43b544 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x70>
               	addq	(%rdx), %rax
               	movq	%rax, -16(%rbx)
               	movq	258113(%rip), %rax      # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	movq	8(%rax), %rax
               	movq	%rax, -8(%rbx)
               	movq	%rcx, 258098(%rip)      # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x43b587 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	cmpq	%rdi, %rsi
               	jae	0x43b54d <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x79>
               	leaq	8(%rdx), %r8
               	movq	%rdi, %rdx
               	movq	8(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x43b538 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x64>
               	cmpq	%rdi, %rsi
               	jne	0x43b55d <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x89>
               	addq	(%rsi), %rax
               	movq	8(%rsi), %rsi
               	movq	%rsi, 8(%rdx)
               	movq	(%r8), %rdx
               	movq	(%rdx), %rsi
               	leaq	(%rdx,%rsi), %rdi
               	cmpq	%rdi, %rcx
               	jne	0x43b574 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xa0>
               	addq	%rsi, %rax
               	movq	%rax, (%rdx)
               	jmp	0x43b587 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	movq	%rax, -16(%rbx)
               	movq	8(%rdx), %rax
               	movq	%rax, -8(%rbx)
               	movq	(%r8), %rax
               	movq	%rcx, 8(%rax)
               	leaq	8(%rsp), %rdi
               	callq	0x43b47a <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	popq	%rbx
               	retq
               	nop

<(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	257949(%rip), %rdi      # 0x47a540 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b434 <__gnu_cxx::__mutex::lock()>
               	leaq	16(%rbx), %rdi
               	movl	$16, %eax
               	movq	257959(%rip), %rbx      # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	cmpq	$16, %rdi
               	leaq	257948(%rip), %rdx      # 0x47a568 <(anonymous namespace)::emergency_pool+0x28>
               	cmovbq	%rax, %rdi
               	addq	$15, %rdi
               	andq	$-16, %rdi
               	testq	%rbx, %rbx
               	je	0x43b618 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x80>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rcx
               	cmpq	%rax, %rdi
               	jbe	0x43b5f2 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x5a>
               	leaq	8(%rbx), %rdx
               	movq	%rcx, %rbx
               	jmp	0x43b5d8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x40>
               	subq	%rdi, %rax
               	cmpq	$15, %rax
               	jbe	0x43b611 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x79>
               	leaq	(%rbx,%rdi), %rsi
               	movq	%rcx, 8(%rsi)
               	movq	(%rdx), %rbx
               	movq	%rax, (%rsi)
               	movq	%rdi, (%rbx)
               	movq	%rsi, (%rdx)
               	jmp	0x43b614 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x7c>
               	movq	%rcx, (%rdx)
               	addq	$16, %rbx
               	leaq	8(%rsp), %rdi
               	callq	0x43b47a <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__freeres()>:
               	movq	257854(%rip), %rdi      # 0x47a570 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rdi, %rdi
               	je	0x43b64a <__gnu_cxx::__freeres()+0x1f>
               	pushq	%rax
               	callq	0x413730 <free@plt>
               	movq	$0, 257832(%rip)        # 0x47a570 <(anonymous namespace)::emergency_pool+0x30>
               	popq	%rdx
               	retq
               	retq

<__cxa_allocate_exception>:
               	pushq	%rbx
               	leaq	128(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413af0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43b678 <__cxa_allocate_exception+0x2d>
               	movq	%rbx, %rdi
               	callq	0x43b598 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43b678 <__cxa_allocate_exception+0x2d>
               	callq	0x43bec3 <std::terminate()>
               	xorl	%eax, %eax
               	movl	$32, %ecx
               	movq	%rdx, %rdi
               	rep		stosl	%eax, %es:(%rdi)
               	leaq	128(%rdx), %rax
               	popq	%rbx
               	retq

<__cxa_free_exception>:
               	movq	257756(%rip), %rax      # 0x47a570 <(anonymous namespace)::emergency_pool+0x30>
               	addq	$-128, %rdi
               	cmpq	%rax, %rdi
               	jbe	0x43b6ae <__cxa_free_exception+0x21>
               	addq	257748(%rip), %rax      # 0x47a578 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43b6ae <__cxa_free_exception+0x21>
               	jmp	0x43b4d4 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x413730 <free@plt>

<__cxa_allocate_dependent_exception>:
               	pushq	%rcx
               	movl	$112, %edi
               	callq	0x413af0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43b6dd <__cxa_allocate_dependent_exception+0x2a>
               	movl	$112, %edi
               	callq	0x43b598 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43b6dd <__cxa_allocate_dependent_exception+0x2a>
               	callq	0x43bec3 <std::terminate()>
               	xorl	%eax, %eax
               	movq	%rdx, %rdi
               	movl	$28, %ecx
               	rep		stosl	%eax, %es:(%rdi)
               	movq	%rdx, %rax
               	popq	%rdx
               	retq

<__cxa_free_dependent_exception>:
               	movq	257659(%rip), %rax      # 0x47a570 <(anonymous namespace)::emergency_pool+0x30>
               	cmpq	%rax, %rdi
               	jbe	0x43b70b <__cxa_free_dependent_exception+0x1d>
               	addq	257655(%rip), %rax      # 0x47a578 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43b70b <__cxa_free_dependent_exception+0x1d>
               	jmp	0x43b4d4 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x413730 <free@plt>

<std::exception::~exception()>:
               	retq
               	nop

<std::bad_exception::~bad_exception()>:
               	leaq	143287(%rip), %rax      # 0x45e6d0 <vtable for std::bad_exception>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::exception::what() const>:
               	leaq	37948(%rip), %rax       # 0x444b69 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a00>
               	retq

<std::bad_exception::what() const>:
               	leaq	37955(%rip), %rax       # 0x444b78 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a0f>
               	retq

<std::exception::~exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<std::bad_exception::~bad_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b712 <std::bad_exception::~bad_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	retq
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b766 <__cxxabiv1::__forced_unwind::~__forced_unwind()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	retq
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b780 <__cxxabiv1::__foreign_exception::~__foreign_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>

<_ZGTtNKSt9exceptionD1Ev>:
               	retq

<_ZGTtNKSt9exception4whatEv>:
               	jmp	0x43b726 <std::exception::what() const>

<_ZGTtNKSt13bad_exceptionD1Ev>:
               	retq

<_ZGTtNKSt13bad_exception4whatEv>:
               	jmp	0x43b72e <std::bad_exception::what() const>
               	nop

<std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>:
               	retq

<__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	movq	-80(%rsi), %rbx
               	cmpl	$1, %edi
               	jbe	0x43b7ba <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x13>
               	movq	-88(%rbx), %rdi
               	callq	0x43be98 <__cxxabiv1::__terminate(void (*)())>
               	leaq	-80(%rsi), %rax
               	movq	%rax, %rdi
               	callq	0x43b6ee <__cxa_free_dependent_exception>
               	lock
               	decl	-128(%rbx)
               	jne	0x43b7e3 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x3c>
               	movq	-104(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43b7da <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x33>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b68d <__cxa_free_exception>
               	popq	%rbx
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr()>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::_M_addref()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43b802 <std::__exception_ptr::exception_ptr::_M_addref()+0xc>
               	lock
               	incl	-128(%rax)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr(void*)>:
               	movq	%rsi, (%rdi)
               	jmp	0x43b7f6 <std::__exception_ptr::exception_ptr::_M_addref()>

<std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b7f6 <std::__exception_ptr::exception_ptr::_M_addref()>
               	nop

<std::__exception_ptr::exception_ptr::_M_release()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43b849 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	lock
               	decl	-128(%rax)
               	jne	0x43b849 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	pushq	%rbx
               	movq	-104(%rax), %rax
               	movq	%rdi, %rbx
               	testq	%rax, %rax
               	je	0x43b838 <std::__exception_ptr::exception_ptr::_M_release()+0x20>
               	movq	(%rdi), %rdi
               	callq	*%rax
               	movq	(%rbx), %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	retq

<std::__exception_ptr::exception_ptr::~exception_ptr()>:
               	jmp	0x43b818 <std::__exception_ptr::exception_ptr::_M_release()>
               	nop

<std::__exception_ptr::exception_ptr::_M_get() const>:
               	movq	(%rdi), %rax
               	retq

<std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	movq	%rdx, (%rdi)
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x43b80c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43b854 <std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>
               	movq	%rbx, %rdi
               	callq	0x43b84a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator!() const>:
               	cmpq	$0, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const>:
               	xorl	%eax, %eax
               	cmpq	$0, (%rdi)
               	je	0x43b8ad <std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const+0xf>
               	leaq	-263(%rip), %rax        # 0x43b7a6 <std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>
               	xorl	%edx, %edx
               	retq

<std::__exception_ptr::exception_ptr::__cxa_exception_type() const>:
               	movq	(%rdi), %rax
               	movq	-112(%rax), %rax
               	retq

<std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rax
               	callq	0x43b8b8 <std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>
               	popq	%rdx
               	xorl	$1, %eax
               	retq

<std::current_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bf48 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	jne	0x43b8e8 <std::current_exception()+0x1b>
               	movq	%rbx, %rdi
               	callq	0x43b7e6 <std::__exception_ptr::exception_ptr::exception_ptr()>
               	jmp	0x43b91d <std::current_exception()+0x50>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	movq	80(%rax), %rcx
               	addq	%rcx, %rdx
               	cmpq	$1, %rdx
               	ja	0x43b8de <std::current_exception()+0x11>
               	movabsq	$5138137972254386944, %rdx # imm = 0x474E5543432B2B00
               	leaq	112(%rax), %rsi
               	cmpq	%rdx, %rcx
               	je	0x43b915 <std::current_exception()+0x48>
               	movq	(%rax), %rsi
               	movq	%rbx, %rdi
               	callq	0x43b804 <std::__exception_ptr::exception_ptr::exception_ptr(void*)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::rethrow_exception(std::__exception_ptr::exception_ptr)>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b850 <std::__exception_ptr::exception_ptr::_M_get() const>
               	movq	%rax, %rbp
               	callq	0x43b6b3 <__cxa_allocate_dependent_exception>
               	movq	%rax, %rbx
               	movq	%rbp, (%rax)
               	lock
               	incl	-128(%rbp)
               	callq	0x43bee7 <std::get_unexpected()>
               	addq	$80, %rbx
               	movq	%rax, -64(%rbx)
               	callq	0x43beb8 <std::get_terminate()>
               	movq	%rax, -56(%rbx)
               	movabsq	$5138137972254386945, %rax # imm = 0x474E5543432B2B01
               	movq	%rax, (%rbx)
               	leaq	-447(%rip), %rax        # 0x43b7a7 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43bf48 <__cxa_get_globals>
               	movq	%rbx, %rdi
               	incl	8(%rax)
               	callq	0x413b00 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bec3 <std::terminate()>
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	pushq	%rbx
               	movl	$1, %eax
               	movq	%rdx, %rbx
               	shlq	$36, %rax
               	subq	$32, %rsp
               	movq	(%rdx), %rdx
               	movq	%rax, 16(%rsp)
               	movq	(%rdi), %rax
               	leaq	8(%rsp), %rcx
               	movq	$0, 8(%rsp)
               	movq	$0, 24(%rsp)
               	callq	*48(%rax)
               	movl	16(%rsp), %edx
               	xorl	%eax, %eax
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x43b9d6 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x4e>
               	movq	8(%rsp), %rax
               	movq	%rax, (%rbx)
               	movb	$1, %al
               	addq	$32, %rsp
               	popq	%rbx
               	retq

<__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	xorl	%eax, %eax
               	cmpq	%r8, %rdx
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	retq
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	leaq	142703(%rip), %rax      # 0x45e760 <vtable for __cxxabiv1::__class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43efbc <std::type_info::~type_info()>
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b9ea <__cxxabiv1::__class_type_info::~__class_type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43ba31 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43ba31 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413ae0 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	56(%rsp), %rbx
               	movq	8(%rdi), %r13
               	cmpq	48(%rsp), %r8
               	jne	0x43ba67 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movq	8(%r9), %rsi
               	movq	%r13, %rdi
               	callq	0x43ba16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43ba67 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movl	%ebp, 12(%rbx)
               	jmp	0x43ba84 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	8(%r14), %rsi
               	movq	%r13, %rdi
               	callq	0x43ba16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43ba84 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	%r12, (%rbx)
               	movl	%ebp, 8(%rbx)
               	movl	$1, 16(%rbx)
               	popq	%rbx
               	xorl	%eax, %eax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	pushq	%r8
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	callq	0x43ba16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43babd <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x2d>
               	movq	%rbp, (%rbx)
               	movq	$16, 16(%rbx)
               	movl	$6, 8(%rbx)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	movq	%rdx, 8(%rsp)
               	callq	0x43ba16 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	jne	0x43bb0b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	cmpl	$3, %r12d
               	ja	0x43bb0b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	40(%rax), %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmpq	*%rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<operator delete(void*, unsigned long)>:
               	jmp	0x43b1e5 <operator delete(void*)>

<operator new(unsigned long)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	jne	0x43bb27 <operator new(unsigned long)+0xe>
               	movl	$1, %ebx
               	movq	%rbx, %rdi
               	callq	0x413af0 <malloc@plt>
               	testq	%rax, %rax
               	jne	0x43bb70 <operator new(unsigned long)+0x57>
               	callq	0x43bd69 <std::get_new_handler()>
               	testq	%rax, %rax
               	jne	0x43bb6c <operator new(unsigned long)+0x53>
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	142465(%rip), %rdx      # 0x45e7d0 <vtable for std::bad_alloc>
               	leaq	142434(%rip), %rsi      # 0x45e7b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	929(%rip), %rdx         # 0x43bf08 <std::bad_alloc::~bad_alloc()>
               	callq	0x43bcc5 <__cxa_throw>
               	callq	*%rax
               	jmp	0x43bb27 <operator new(unsigned long)+0xe>
               	popq	%rbx
               	retq

<__cxa_get_exception_ptr>:
               	movq	-8(%rdi), %rax
               	retq

<__cxa_begin_catch>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bf48 <__cxa_get_globals>
               	leaq	-80(%rbx), %rsi
               	movabsq	$-5138137972254386944, %rcx # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rcx
               	movq	(%rax), %rdx
               	cmpq	$1, %rcx
               	jbe	0x43bba9 <__cxa_begin_catch+0x32>
               	testq	%rdx, %rdx
               	je	0x43bba4 <__cxa_begin_catch+0x2d>
               	callq	0x43bec3 <std::terminate()>
               	movq	%rsi, (%rax)
               	jmp	0x43bbd0 <__cxa_begin_catch+0x59>
               	movl	-40(%rbx), %edi
               	leal	1(%rdi), %ecx
               	testl	%edi, %edi
               	jns	0x43bbba <__cxa_begin_catch+0x43>
               	movl	$1, %ecx
               	subl	%edi, %ecx
               	movl	%ecx, -40(%rbx)
               	decl	8(%rax)
               	cmpq	%rsi, %rdx
               	je	0x43bbcc <__cxa_begin_catch+0x55>
               	movq	%rdx, -48(%rbx)
               	movq	%rsi, (%rax)
               	movq	-8(%rbx), %rdx
               	movq	%rdx, %rax
               	popq	%rbx
               	retq

<__cxa_end_catch>:
               	pushq	%rcx
               	callq	0x43bf33 <__cxa_get_globals_fast>
               	movq	(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x43bc33 <__cxa_end_catch+0x5e>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43bc00 <__cxa_end_catch+0x2b>
               	movq	$0, (%rax)
               	jmp	0x43bc1f <__cxa_end_catch+0x4a>
               	movl	40(%rdi), %edx
               	testl	%edx, %edx
               	jns	0x43bc14 <__cxa_end_catch+0x3f>
               	incl	%edx
               	jne	0x43bc30 <__cxa_end_catch+0x5b>
               	movq	32(%rdi), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x43bc30 <__cxa_end_catch+0x5b>
               	decl	%edx
               	jne	0x43bc29 <__cxa_end_catch+0x54>
               	movq	32(%rdi), %rdx
               	movq	%rdx, (%rax)
               	addq	$80, %rdi
               	popq	%rdx
               	jmp	0x413b10 <_Unwind_DeleteException@plt>
               	jns	0x43bc30 <__cxa_end_catch+0x5b>
               	callq	0x43bec3 <std::terminate()>
               	movl	%edx, 40(%rdi)
               	popq	%rax
               	retq

<std::uncaught_exception()>:
               	pushq	%rax
               	callq	0x43bf48 <__cxa_get_globals>
               	cmpl	$0, 8(%rax)
               	popq	%rdx
               	setne	%al
               	retq

<std::uncaught_exceptions()>:
               	pushq	%rax
               	callq	0x43bf48 <__cxa_get_globals>
               	movl	8(%rax), %eax
               	popq	%rdx
               	retq

<__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	cmpl	$1, %edi
               	jbe	0x43bc5e <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0xf>
               	movq	-56(%rsi), %rdi
               	callq	0x43be98 <__cxxabiv1::__terminate(void (*)())>
               	lock
               	decl	-96(%rsi)
               	jne	0x43bc7f <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x30>
               	movq	-72(%rsi), %rax
               	leaq	32(%rsi), %rbx
               	testq	%rax, %rax
               	je	0x43bc76 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x27>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b68d <__cxa_free_exception>
               	popq	%rbx
               	retq

<__cxa_init_primary_exception>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	$0, -128(%rdi)
               	movq	%rsi, -112(%rdi)
               	movq	%rdx, -104(%rdi)
               	callq	0x43bee7 <std::get_unexpected()>
               	movq	%rax, -96(%rbx)
               	callq	0x43beb8 <std::get_terminate()>
               	movq	%rax, -88(%rbx)
               	movabsq	$5138137972254386944, %rax # imm = 0x474E5543432B2B00
               	movq	%rax, -32(%rbx)
               	leaq	-108(%rip), %rax        # 0x43bc4f <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, -24(%rbx)
               	leaq	-128(%rbx), %rax
               	popq	%rbx
               	retq

<__cxa_throw>:
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43bf48 <__cxa_get_globals>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %rsi
               	incl	8(%rax)
               	movq	24(%rsp), %rdi
               	callq	0x43bc81 <__cxa_init_primary_exception>
               	movl	$1, (%rax)
               	leaq	96(%rax), %rbx
               	movq	%rbx, %rdi
               	callq	0x413b00 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bec3 <std::terminate()>

<__cxa_rethrow>:
               	pushq	%rbx
               	callq	0x43bf48 <__cxa_get_globals>
               	movq	(%rax), %rdi
               	incl	8(%rax)
               	testq	%rdi, %rdi
               	je	0x43bd59 <__cxa_rethrow+0x45>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43bd42 <__cxa_rethrow+0x2e>
               	movq	$0, (%rax)
               	jmp	0x43bd45 <__cxa_rethrow+0x31>
               	negl	40(%rdi)
               	leaq	80(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413b20 <_Unwind_Resume_or_Rethrow@plt>
               	movq	%rbx, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bec3 <std::terminate()>

<std::set_new_handler(void (*)())>:
               	movq	%rdi, %rax
               	xchgq	%rax, 256024(%rip)      # 0x47a580 <(anonymous namespace)::__new_handler>
               	retq

<std::get_new_handler()>:
               	movq	256016(%rip), %rax      # 0x47a580 <(anonymous namespace)::__new_handler>
               	retq

<__cxa_guard_acquire>:
               	movb	(%rdi), %al
               	testb	%al, %al
               	jne	0x43be2b <__cxa_guard_acquire+0xba>
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	cmpq	$0, 143915(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x43bde1 <__cxa_guard_acquire+0x70>
               	movl	$1, %r12d
               	movl	$256, %ebp              # imm = 0x100
               	xorl	%r13d, %r13d
               	movl	%r13d, %eax
               	lock
               	cmpxchgl	%ebp, (%rbx)
               	je	0x43be1e <__cxa_guard_acquire+0xad>
               	movl	%eax, %ecx
               	cmpl	%eax, %r12d
               	jne	0x43bdb1 <__cxa_guard_acquire+0x40>
               	xorl	%eax, %eax
               	jmp	0x43be23 <__cxa_guard_acquire+0xb2>
               	cmpl	%eax, %ebp
               	jne	0x43bdcb <__cxa_guard_acquire+0x5a>
               	movl	$65792, %ecx            # imm = 0x10100
               	movl	%ebp, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	je	0x43bdcb <__cxa_guard_acquire+0x5a>
               	cmpl	%eax, %r12d
               	je	0x43bdad <__cxa_guard_acquire+0x3c>
               	testl	%eax, %eax
               	je	0x43bd9d <__cxa_guard_acquire+0x2c>
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	%rbx, %rsi
               	movl	$202, %edi
               	xorl	%eax, %eax
               	callq	0x413800 <syscall@plt>
               	jmp	0x43bd9d <__cxa_guard_acquire+0x2c>
               	cmpb	$0, (%rdi)
               	jne	0x43bdad <__cxa_guard_acquire+0x3c>
               	cmpb	$0, 1(%rdi)
               	je	0x43be1a <__cxa_guard_acquire+0xa9>
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	142411(%rip), %rdx      # 0x45ea48 <vtable for __gnu_cxx::recursive_init_error>
               	leaq	142380(%rip), %rsi      # 0x45ea30 <typeinfo for __gnu_cxx::recursive_init_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	12869(%rip), %rdx       # 0x43f05a <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	callq	0x43bcc5 <__cxa_throw>
               	movb	$1, 1(%rdi)
               	movl	$1, %eax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	xorl	%eax, %eax
               	retq

<__cxa_guard_abort>:
               	cmpq	$0, 143746(%rip)        # 0x45efb8 <write+0x45efb8>
               	movq	%rdi, %rsi
               	je	0x43be5b <__cxa_guard_abort+0x2d>
               	xorl	%eax, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43be5f <__cxa_guard_abort+0x31>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x413800 <syscall@plt>
               	movb	$0, 1(%rdi)
               	retq

<__cxa_guard_release>:
               	cmpq	$0, 143696(%rip)        # 0x45efb8 <write+0x45efb8>
               	movq	%rdi, %rsi
               	je	0x43be90 <__cxa_guard_release+0x30>
               	movl	$1, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43be97 <__cxa_guard_release+0x37>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x413800 <syscall@plt>
               	movb	$0, 1(%rdi)
               	movb	$1, (%rdi)
               	retq

<__cxxabiv1::__terminate(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	jmp	0x43bea5 <__cxxabiv1::__terminate(void (*)())+0xd>
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x413940 <abort@plt>

<std::set_terminate(void (*)())>:
               	leaq	150471(%rip), %rdx      # 0x460a78 <__cxxabiv1::__terminate_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_terminate()>:
               	leaq	150457(%rip), %rax      # 0x460a78 <__cxxabiv1::__terminate_handler>
               	movq	(%rax), %rax
               	retq

<std::terminate()>:
               	pushq	%rax
               	callq	0x43beb8 <std::get_terminate()>
               	movq	%rax, %rdi
               	callq	0x43be98 <__cxxabiv1::__terminate(void (*)())>

<__cxxabiv1::__unexpected(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	callq	0x43bec3 <std::terminate()>

<std::set_unexpected(void (*)())>:
               	leaq	150440(%rip), %rdx      # 0x460a88 <__cxxabiv1::__unexpected_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_unexpected()>:
               	leaq	150426(%rip), %rax      # 0x460a88 <__cxxabiv1::__unexpected_handler>
               	movq	(%rax), %rax
               	retq

<std::unexpected()>:
               	pushq	%rax
               	callq	0x43bee7 <std::get_unexpected()>
               	movq	%rax, %rdi
               	callq	0x43bed1 <__cxxabiv1::__unexpected(void (*)())>

<std::bad_alloc::what() const>:
               	leaq	35972(%rip), %rax       # 0x444b8b <typeinfo name for kotlin::gc::GCSchedulerData+0x1a22>
               	retq

<std::bad_alloc::~bad_alloc()>:
               	leaq	141505(%rip), %rax      # 0x45e7d0 <vtable for std::bad_alloc>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::bad_alloc::~bad_alloc()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bf08 <std::bad_alloc::~bad_alloc()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>

<__cxa_get_globals_fast>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__cxa_get_globals>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__gnu_cxx::__verbose_terminate_handler()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpb	$0, 255516(%rip)        # 0x47a588 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	movq	143445(%rip), %rbx      # 0x45efc8 <write+0x45efc8>
               	je	0x43bf84 <__gnu_cxx::__verbose_terminate_handler()+0x27>
               	movq	(%rbx), %rsi
               	leaq	35867(%rip), %rdi       # 0x444b9a <typeinfo name for kotlin::gc::GCSchedulerData+0x1a31>
               	jmp	0x43c00f <__gnu_cxx::__verbose_terminate_handler()+0xb2>
               	movb	$1, 255485(%rip)        # 0x47a588 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	callq	0x43f002 <__cxa_current_exception_type>
               	testq	%rax, %rax
               	je	0x43c005 <__gnu_cxx::__verbose_terminate_handler()+0xa8>
               	movq	8(%rax), %rbp
               	cmpb	$42, (%rbp)
               	jne	0x43bfa2 <__gnu_cxx::__verbose_terminate_handler()+0x45>
               	incq	%rbp
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	leaq	12(%rsp), %rcx
               	movq	%rbp, %rdi
               	movl	$4294967295, 12(%rsp)   # imm = 0xFFFFFFFF
               	callq	0x4356c0 <__cxa_demangle>
               	movq	(%rbx), %rsi
               	leaq	35827(%rip), %rdi       # 0x444bb8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a4f>
               	movq	%rax, %r12
               	callq	0x4137e0 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	je	0x43bfdd <__gnu_cxx::__verbose_terminate_handler()+0x80>
               	movq	%rbp, %rdi
               	callq	0x4137e0 <fputs@plt>
               	movq	(%rbx), %rsi
               	leaq	35837(%rip), %rdi       # 0x444be9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a80>
               	callq	0x4137e0 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	jne	0x43c000 <__gnu_cxx::__verbose_terminate_handler()+0xa3>
               	movq	%r12, %rdi
               	callq	0x413730 <free@plt>
               	callq	0x43bd14 <__cxa_rethrow>
               	movq	(%rbx), %rsi
               	leaq	35805(%rip), %rdi       # 0x444bec <typeinfo name for kotlin::gc::GCSchedulerData+0x1a83>
               	callq	0x4137e0 <fputs@plt>
               	callq	0x413940 <abort@plt>
               	movq	%rax, %rdi
               	decq	%rdx
               	jne	0x43c060 <__gnu_cxx::__verbose_terminate_handler()+0x103>
               	callq	0x43bb77 <__cxa_begin_catch>
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	callq	*16(%rdx)
               	movq	(%rbx), %rsi
               	leaq	35809(%rip), %rdi       # 0x444c1a <typeinfo name for kotlin::gc::GCSchedulerData+0x1ab1>
               	movq	%rax, %rbp
               	callq	0x4137e0 <fputs@plt>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x4137e0 <fputs@plt>
               	movq	(%rbx), %rsi
               	movl	$10, %edi
               	callq	0x413b30 <fputc@plt>
               	callq	0x43bbd5 <__cxa_end_catch>
               	jmp	0x43c014 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bbd5 <__cxa_end_catch>
               	jmp	0x43c014 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	movq	%rax, %rbx
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<__cxa_call_terminate>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x43c0a6 <__cxa_call_terminate+0x2a>
               	movq	%rdi, %rbx
               	callq	0x43bb77 <__cxa_begin_catch>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rax
               	cmpq	$1, %rax
               	ja	0x43c0a6 <__cxa_call_terminate+0x2a>
               	movq	-56(%rbx), %rdi
               	callq	0x43be98 <__cxxabiv1::__terminate(void (*)())>
               	callq	0x43bec3 <std::terminate()>
               	nop

<std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	cmpq	%rdi, %rax
               	je	0x43c10c <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x60>
               	cmpq	%rdx, %rsi
               	je	0x43c0ef <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x43>
               	movq	%rdx, (%rdi)
               	movq	8(%rsi), %rdx
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdx, 8(%rdi)
               	movq	%rax, 8(%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdi, (%rax)
               	movq	(%rdi), %rax
               	movq	%rdi, 8(%rax)
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	retq
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rax, 8(%rsi)
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	movq	%rdi, 8(%rdi)
               	movq	%rdi, (%rdi)
               	retq
               	cmpq	%rdx, %rsi
               	je	0x43c12d <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x81>
               	movq	%rdx, (%rax)
               	movq	8(%rsi), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rax, (%rdx)
               	movq	(%rax), %rdx
               	movq	%rax, 8(%rdx)
               	movq	%rsi, 8(%rsi)
               	movq	%rsi, (%rsi)
               	retq

<std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>:
               	cmpq	%rdx, %rdi
               	je	0x43c158 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)+0x2a>
               	movq	8(%rdx), %rcx
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rcx)
               	movq	%rdx, (%rax)
               	movq	8(%rdi), %rax
               	movq	%rsi, (%rax)
               	movq	%rcx, 8(%rdi)
               	movq	8(%rsi), %rcx
               	movq	%rcx, 8(%rdx)
               	movq	%rax, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_reverse()>:
               	movq	%rdi, %rax
               	movq	(%rax), %rdx
               	movq	8(%rax), %rcx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, (%rax)
               	movq	%rdx, %rax
               	cmpq	%rdx, %rdi
               	jne	0x43c15d <std::__detail::_List_node_base::_M_reverse()+0x3>
               	retq

<std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rdi)
               	movq	%rax, 8(%rdi)
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rax)
               	movq	%rdi, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_unhook()>:
               	movq	(%rdi), %rax
               	movq	8(%rdi), %rdx
               	movq	%rax, (%rdx)
               	movq	%rdx, 8(%rax)
               	retq

<std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	24(%rdi), %rax
               	movq	16(%rax), %rdx
               	movq	%rdx, 24(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c1b0 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c1c2 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c1d2 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 16(%rdx)
               	jne	0x43c1ce <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 16(%rdx)
               	jmp	0x43c1d2 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 24(%rdx)
               	movq	%rdi, 16(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	16(%rdi), %rax
               	movq	24(%rax), %rdx
               	movq	%rdx, 16(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c1f0 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c202 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c212 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 24(%rdx)
               	jne	0x43c20e <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 24(%rdx)
               	jmp	0x43c212 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 16(%rdx)
               	movq	%rdi, 24(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	cmpl	$0, (%rdi)
               	jne	0x43c22f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 8(%rax)
               	jne	0x43c22f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	24(%rdi), %rax
               	retq
               	movq	16(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c246 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2b>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c259 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rdx, %rax
               	jmp	0x43c238 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x1d>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 16(%rax)
               	jne	0x43c259 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rax, %rdi
               	movq	8(%rax), %rax
               	jmp	0x43c24a <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2f>
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c271 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c290 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c263 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c287 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c278 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c290 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c2a8 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c2c7 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c29a <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c2be <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c2af <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c2c7 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	jmp	0x43c21b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)>:
               	jmp	0x43c21b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c19b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c1db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	%rsi, %r8
               	leaq	8(%rcx), %r11
               	movq	%rdx, 8(%rsi)
               	movq	$0, 16(%rsi)
               	movq	$0, 24(%rsi)
               	movl	$0, (%rsi)
               	testb	%dil, %dil
               	je	0x43c31d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x41>
               	movq	%rsi, 16(%rdx)
               	cmpq	%rdx, %rcx
               	jne	0x43c311 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x35>
               	movq	%rsi, 8(%rcx)
               	jmp	0x43c327 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x4b>
               	cmpq	%rdx, 16(%rcx)
               	jne	0x43c36d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 16(%rcx)
               	jmp	0x43c36d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 24(%rdx)
               	cmpq	%rdx, 24(%rcx)
               	jne	0x43c36d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%r8, 24(%rcx)
               	jmp	0x43c36d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	8(%r8), %r10
               	cmpl	$0, (%r10)
               	jne	0x43c3ec <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x110>
               	movq	8(%r10), %r9
               	movq	16(%r9), %rax
               	cmpq	%rax, %r10
               	jne	0x43c3aa <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xce>
               	movq	24(%r9), %rax
               	testq	%rax, %rax
               	je	0x43c378 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	cmpl	$0, (%rax)
               	jne	0x43c378 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	movl	$1, (%r10)
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	movq	%r9, %r8
               	movq	8(%rcx), %rax
               	cmpq	%r8, %rax
               	jne	0x43c32d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x51>
               	jmp	0x43c3e9 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x10d>
               	cmpq	%r8, 24(%r10)
               	jne	0x43c38c <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xb0>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c19b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c1db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43c3e4 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x108>
               	testq	%rax, %rax
               	je	0x43c3b4 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd8>
               	cmpl	$0, (%rax)
               	je	0x43c356 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x7a>
               	cmpq	%r8, 16(%r10)
               	jne	0x43c3c8 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xec>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c1db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c19b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r8, %r9
               	jmp	0x43c36a <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8e>
               	movq	%r8, %rax
               	movl	$1, (%rax)
               	retq

<std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	16(%rdi), %r9
               	movq	%rsi, %r10
               	movq	%rdi, %r8
               	movq	24(%rdi), %rsi
               	testq	%r9, %r9
               	je	0x43c498 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xa5>
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43c4a0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c424 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x31>
               	movq	%rdx, %rax
               	jmp	0x43c416 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x23>
               	movq	24(%rax), %rdx
               	cmpq	%r8, %rax
               	je	0x43c49d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xaa>
               	movq	%rax, 8(%r9)
               	movq	%rax, %rcx
               	movq	%r9, 16(%rax)
               	cmpq	%rax, %rsi
               	je	0x43c45e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x6b>
               	movq	8(%rax), %rcx
               	testq	%rdx, %rdx
               	je	0x43c44a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x57>
               	movq	%rcx, 8(%rdx)
               	movq	8(%rax), %rdi
               	movq	%rdx, 16(%rdi)
               	movq	%rsi, 24(%rax)
               	movq	24(%r8), %rsi
               	movq	%rax, 8(%rsi)
               	cmpq	%r8, 8(%r10)
               	jne	0x43c46a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x77>
               	movq	%rax, 8(%r10)
               	jmp	0x43c47e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	8(%r8), %rsi
               	cmpq	%r8, 16(%rsi)
               	jne	0x43c47a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x87>
               	movq	%rax, 16(%rsi)
               	jmp	0x43c47e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	%rax, 24(%rsi)
               	movq	8(%r8), %rsi
               	movl	(%r8), %edi
               	movq	%rdx, %r9
               	movq	%rsi, 8(%rax)
               	movl	(%rax), %esi
               	movl	%edi, (%rax)
               	movl	%esi, (%r8)
               	jmp	0x43c51d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	movq	%rsi, %r9
               	jmp	0x43c4a0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	%rdx, %r9
               	movq	8(%r8), %rcx
               	testq	%r9, %r9
               	je	0x43c4ad <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xba>
               	movq	%rcx, 8(%r9)
               	cmpq	%r8, 8(%r10)
               	jne	0x43c4b9 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xc6>
               	movq	%r9, 8(%r10)
               	jmp	0x43c4cd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	8(%r8), %rax
               	cmpq	%r8, 16(%rax)
               	jne	0x43c4c9 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd6>
               	movq	%r9, 16(%rax)
               	jmp	0x43c4cd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	%r9, 24(%rax)
               	cmpq	%r8, 16(%r10)
               	jne	0x43c4f5 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x102>
               	cmpq	$0, 24(%r8)
               	movq	%r9, %rax
               	jne	0x43c4e3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	8(%r8), %rax
               	jmp	0x43c4f1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c4f1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	%rdx, %rax
               	jmp	0x43c4e3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	%rax, 16(%r10)
               	cmpq	%r8, 24(%r10)
               	jne	0x43c51d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	cmpq	$0, 16(%r8)
               	movq	%r9, %rax
               	jne	0x43c50b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	8(%r8), %rax
               	jmp	0x43c519 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c519 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	%rdx, %rax
               	jmp	0x43c50b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	%rax, 24(%r10)
               	cmpl	$0, (%r8)
               	leaq	8(%r10), %r11
               	je	0x43c68c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	cmpq	%r9, 8(%r10)
               	je	0x43c683 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	testq	%r9, %r9
               	je	0x43c54c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	cmpl	$1, (%r9)
               	je	0x43c54c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	movl	$1, (%r9)
               	jmp	0x43c68c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	movq	16(%rcx), %rdi
               	cmpq	%r9, %rdi
               	jne	0x43c5ec <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1f9>
               	movq	24(%rcx), %rdi
               	cmpl	$0, (%rdi)
               	jne	0x43c57d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x18a>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c19b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43c58f <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x19c>
               	cmpl	$1, (%rdx)
               	jne	0x43c5a1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1ae>
               	testq	%rax, %rax
               	je	0x43c628 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	je	0x43c628 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	testq	%rax, %rax
               	je	0x43c5ab <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1b8>
               	cmpl	$1, (%rax)
               	jne	0x43c5c3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1d0>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c1db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	24(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43c5dc <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1e9>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c19b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43c683 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	cmpl	$0, (%rdi)
               	jne	0x43c60c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x219>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c1db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movq	24(%rdi), %rdx
               	movq	16(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43c61e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x22b>
               	cmpl	$1, (%rdx)
               	jne	0x43c63d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	testq	%rax, %rax
               	je	0x43c628 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	jne	0x43c63d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	movq	8(%rcx), %rax
               	movq	%rcx, %r9
               	movl	$0, (%rdi)
               	movq	%rax, %rcx
               	jmp	0x43c52b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x138>
               	testq	%rax, %rax
               	je	0x43c647 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x254>
               	cmpl	$1, (%rax)
               	jne	0x43c65f <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x26c>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c19b <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	16(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43c678 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x285>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c1db <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	testq	%r9, %r9
               	jne	0x43c540 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x14d>
               	movq	%r8, %rax
               	retq

<std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)>:
               	xorl	%eax, %eax
               	testq	%rdi, %rdi
               	je	0x43c6a9 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	cmpl	$1, (%rdi)
               	jne	0x43c69e <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0xe>
               	incl	%eax
               	cmpq	%rsi, %rdi
               	je	0x43c6a9 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	movq	8(%rdi), %rdi
               	jmp	0x43c697 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x7>
               	retq

<std::(anonymous namespace)::run(void*)>:
               	movq	%rdi, %rax
               	testq	%rdi, %rdi
               	jne	0x43c6b3 <std::(anonymous namespace)::run(void*)+0x9>
               	retq
               	pushq	%rbx
               	movq	(%rax), %rbx
               	movq	%rax, %rdi
               	callq	*8(%rax)
               	movq	%rbx, %rax
               	testq	%rbx, %rbx
               	jne	0x43c6b4 <std::(anonymous namespace)::run(void*)+0xa>
               	popq	%rbx
               	retq
               	nop

<std::(anonymous namespace)::key_init()::key_s::~key_s()>:
               	movl	253646(%rip), %edi      # 0x47a59c <std::(anonymous namespace)::key>
               	jmp	0x413b40 <pthread_key_delete@plt>

<std::(anonymous namespace)::key_init()>:
               	movb	253623(%rip), %al       # 0x47a590 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	leaq	91(%rip), %rdi          # 0x43c73b <std::(anonymous namespace)::run()>
               	testb	%al, %al
               	jne	0x43c736 <std::(anonymous namespace)::key_init()+0x63>
               	pushq	%rdx
               	leaq	253604(%rip), %rdi      # 0x47a590 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43bd71 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43c72e <std::(anonymous namespace)::key_init()+0x5b>
               	leaq	-82(%rip), %rsi         # 0x43c6aa <std::(anonymous namespace)::run(void*)>
               	leaq	253593(%rip), %rdi      # 0x47a59c <std::(anonymous namespace)::key>
               	callq	0x413830 <pthread_key_create@plt>
               	leaq	253569(%rip), %rdi      # 0x47a590 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43be60 <__cxa_guard_release>
               	leaq	142317(%rip), %rdx      # 0x45f308 <__dso_handle>
               	leaq	253558(%rip), %rsi      # 0x47a598 <std::(anonymous namespace)::key_init()::ks>
               	leaq	-97(%rip), %rdi         # 0x43c6c8 <std::(anonymous namespace)::key_init()::key_s::~key_s()>
               	callq	0x413b50 <__cxa_atexit@plt>
               	leaq	6(%rip), %rdi           # 0x43c73b <std::(anonymous namespace)::run()>
               	popq	%rax
               	jmp	0x442940 <atexit>

<std::(anonymous namespace)::run()>:
               	pushq	%rbx
               	movl	253530(%rip), %edi      # 0x47a59c <std::(anonymous namespace)::key>
               	callq	0x413a20 <pthread_getspecific@plt>
               	movl	253519(%rip), %edi      # 0x47a59c <std::(anonymous namespace)::key>
               	xorl	%esi, %esi
               	movq	%rax, %rbx
               	callq	0x413840 <pthread_setspecific@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c6aa <std::(anonymous namespace)::run(void*)>

<std::condition_variable::condition_variable()>:
               	movl	$12, %ecx
               	xorl	%eax, %eax
               	rep		stosl	%eax, %es:(%rdi)
               	retq

<std::condition_variable::~condition_variable()>:
               	jmp	0x413a00 <pthread_cond_destroy@plt>
               	nop

<std::condition_variable::wait(std::unique_lock<std::mutex>&)>:
               	pushq	%rdx
               	movq	(%rsi), %rsi
               	callq	0x413b60 <pthread_cond_wait@plt>
               	testl	%eax, %eax
               	je	0x43c782 <std::condition_variable::wait(std::unique_lock<std::mutex>&)+0x12>
               	callq	0x43bec3 <std::terminate()>
               	popq	%rax
               	retq

<std::condition_variable::notify_one()>:
               	pushq	%rdx
               	callq	0x4139c0 <pthread_cond_signal@plt>
               	testl	%eax, %eax
               	je	0x43c795 <std::condition_variable::notify_one()+0x11>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	popq	%rax
               	retq
               	nop

<std::condition_variable::notify_all()>:
               	pushq	%rdx
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	testl	%eax, %eax
               	je	0x43c7a9 <std::condition_variable::notify_all()+0x11>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	popq	%rax
               	retq

<std::(anonymous namespace)::notifier::run(void*)>:
               	testq	%rdi, %rdi
               	je	0x43c7d9 <std::(anonymous namespace)::notifier::run(void*)+0x2e>
               	cmpq	$0, 141312(%rip)        # 0x45efb8 <write+0x45efb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43c7c7 <std::(anonymous namespace)::notifier::run(void*)+0x1c>
               	movq	24(%rdi), %rdi
               	callq	0x4137a0 <pthread_mutex_unlock@plt>
               	movq	16(%rbx), %rdi
               	callq	0x43c798 <std::condition_variable::notify_all()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>
               	retq

<std::__at_thread_exit(std::__at_thread_exit_elt*)>:
               	cmpq	$0, 141270(%rip)        # 0x45efb8 <write+0x45efb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43c7fb <std::__at_thread_exit(std::__at_thread_exit_elt*)+0x21>
               	leaq	-284(%rip), %rsi        # 0x43c6d3 <std::(anonymous namespace)::key_init()>
               	leaq	253334(%rip), %rdi      # 0x47a58c <std::__at_thread_exit(std::__at_thread_exit_elt*)::once>
               	callq	0x413a10 <pthread_once@plt>
               	movl	253339(%rip), %edi      # 0x47a59c <std::(anonymous namespace)::key>
               	callq	0x413a20 <pthread_getspecific@plt>
               	movl	253328(%rip), %edi      # 0x47a59c <std::(anonymous namespace)::key>
               	movq	%rbx, %rsi
               	movq	%rax, (%rbx)
               	popq	%rbx
               	jmp	0x413840 <pthread_setspecific@plt>

<std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movl	$32, %edi
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43bb19 <operator new(unsigned long)>
               	movb	$0, 8(%rbp)
               	movq	%rax, %rbx
               	movq	%r12, 16(%rax)
               	movq	(%rbp), %rax
               	movq	$0, (%rbp)
               	movq	%rbx, %rdi
               	movq	%rax, 24(%rbx)
               	leaq	-166(%rip), %rax        # 0x43c7ab <std::(anonymous namespace)::notifier::run(void*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43c7da <std::__at_thread_exit(std::__at_thread_exit_elt*)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<(anonymous namespace)::generic_error_category::name() const>:
               	leaq	33709(%rip), %rax       # 0x444c26 <typeinfo name for kotlin::gc::GCSchedulerData+0x1abd>
               	retq

<(anonymous namespace)::system_error_category::name() const>:
               	leaq	33709(%rip), %rax       # 0x444c2e <typeinfo name for kotlin::gc::GCSchedulerData+0x1ac5>
               	retq

<std::_V2::error_category::default_error_condition(int) const>:
               	movq	%rdi, %rdx
               	movl	%esi, %eax
               	retq

<std::_V2::error_category::equivalent(int, std::error_condition const&) const>:
               	movq	(%rdi), %rax
               	pushq	%rbx
               	movq	%rdx, %rbx
               	callq	*40(%rax)
               	xorl	%ecx, %ecx
               	cmpq	%rdx, 8(%rbx)
               	jne	0x43c89f <std::_V2::error_category::equivalent(int, std::error_condition const&) const+0x17>
               	cmpl	%eax, (%rbx)
               	sete	%cl
               	movl	%ecx, %eax
               	popq	%rbx
               	retq
               	nop

<std::_V2::error_category::equivalent(std::error_code const&, int) const>:
               	xorl	%eax, %eax
               	cmpq	8(%rsi), %rdi
               	jne	0x43c8b1 <std::_V2::error_category::equivalent(std::error_code const&, int) const+0xd>
               	cmpl	%edx, (%rsi)
               	sete	%al
               	retq

<std::system_error::~system_error()>:
               	leaq	139399(%rip), %rax      # 0x45e940 <vtable for std::system_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f108 <std::runtime_error::~runtime_error()>
               	nop

<std::system_error::~system_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c8b2 <std::system_error::~system_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::_V2::error_category::_M_message[abi:cxx11](int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rsi), %rax
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	8(%rsp), %rdx
               	movq	(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x43f4fc <std::__cow_string::__cow_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	addq	$40, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	%edx, %edi
               	callq	0x413880 <strerror@plt>
               	orq	$-1, %rdx
               	movq	%rax, %rsi
               	leaq	16(%rbx), %rax
               	movq	%rax, (%rbx)
               	testq	%rsi, %rsi
               	je	0x43c957 <(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const+0x33>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%rbx, %rdi
               	callq	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::~error_category()>:
               	retq
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	leaq	139075(%rip), %rax      # 0x45e8b0 <vtable for (anonymous namespace)::system_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43c964 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c966 <(anonymous namespace)::system_error_category::~system_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	leaq	138961(%rip), %rax      # 0x45e860 <vtable for (anonymous namespace)::generic_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43c964 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c988 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::_V2::error_category::~error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c964 <std::_V2::error_category::~error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::_V2::system_category()>:
               	leaq	147661(%rip), %rax      # 0x460a90 <(anonymous namespace)::system_category_instance>
               	retq

<std::_V2::generic_category()>:
               	leaq	147661(%rip), %rax      # 0x460a98 <(anonymous namespace)::generic_category_instance>
               	retq

<(anonymous namespace)::system_error_category::default_error_condition(int) const>:
               	cmpl	$84, %esi
               	pushq	%rbx
               	movl	%esi, %ebx
               	je	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ca0c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x40>
               	cmpl	$43, %esi
               	jg	0x43c9f1 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x25>
               	cmpl	$42, %esi
               	jge	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	testl	%esi, %esi
               	jle	0x43ca4e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	cmpl	$14, %esi
               	jle	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	subl	$16, %esi
               	cmpl	$24, %esi
               	jmp	0x43ca45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$67, %esi
               	je	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ca00 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x34>
               	subl	$60, %esi
               	cmpl	$3, %esi
               	jmp	0x43ca45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$71, %esi
               	je	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jl	0x43ca4e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	subl	$74, %esi
               	jmp	0x43ca42 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x76>
               	cmpl	$111, %esi
               	jg	0x43ca2d <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x61>
               	cmpl	$110, %esi
               	jge	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	cmpl	$95, %esi
               	je	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ca25 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x59>
               	subl	$88, %esi
               	cmpl	$5, %esi
               	jmp	0x43ca45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$97, %esi
               	cmpl	$10, %esi
               	jmp	0x43ca45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$125, %esi
               	je	0x43ca47 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43ca3c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x70>
               	subl	$113, %esi
               	cmpl	$2, %esi
               	jmp	0x43ca45 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$130, %esi
               	cmpl	$1, %esi
               	ja	0x43ca4e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	callq	0x43c9c4 <std::_V2::generic_category()>
               	jmp	0x43ca53 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x87>
               	callq	0x43c9bc <std::_V2::system_category()>
               	movq	%rax, %rdx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq

<std::__throw_system_error(int)>:
               	pushq	%r13
               	movl	%edi, %r13d
               	movl	$32, %edi
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rsp, %r12
               	movq	%rax, %rbx
               	callq	0x43c9c4 <std::_V2::generic_category()>
               	movl	%r13d, %edx
               	movq	%r12, %rdi
               	movq	%rax, %rbp
               	movq	(%rax), %rax
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43ce64 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r12, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	138904(%rip), %rax      # 0x45e940 <vtable for std::system_error>
               	movq	%rbx, %rdi
               	movl	%r13d, 16(%rbx)
               	leaq	-516(%rip), %rdx        # 0x43c8b2 <std::system_error::~system_error()>
               	leaq	138571(%rip), %rsi      # 0x45e808 <typeinfo for std::system_error>
               	movq	%rbp, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%r12, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43cadd <std::__throw_system_error(int)+0x83>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::error_code::default_error_condition() const>:
               	movq	8(%rdi), %rax
               	movl	(%rdi), %esi
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	movq	40(%rdx), %rdx
               	jmpq	*%rdx

<std::chrono::_V2::system_clock::now()>:
               	subq	$24, %rsp
               	xorl	%edi, %edi
               	movq	%rsp, %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<std::chrono::_V2::steady_clock::now()>:
               	subq	$24, %rsp
               	movl	$1, %edi
               	movq	%rsp, %rsi
               	callq	0x4137f0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq
               	nop

<std::bad_function_call::what() const>:
               	leaq	33002(%rip), %rax       # 0x444c35 <typeinfo name for kotlin::gc::GCSchedulerData+0x1acc>
               	retq

<std::bad_function_call::~bad_function_call()>:
               	leaq	138797(%rip), %rax      # 0x45e980 <vtable for std::bad_function_call>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::bad_function_call::~bad_function_call()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cb4c <std::bad_function_call::~bad_function_call()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::__throw_bad_function_call()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	138748(%rip), %rdx      # 0x45e980 <vtable for std::bad_function_call>
               	leaq	138717(%rip), %rsi      # 0x45e968 <typeinfo for std::bad_function_call>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-80(%rip), %rdx         # 0x43cb4c <std::bad_function_call::~bad_function_call()>
               	callq	0x43bcc5 <__cxa_throw>
               	nop

<std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	cmpq	$12, %rsi
               	ja	0x43cc0c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x6a>
               	leaq	35600(%rip), %rax       # 0x4456c8 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const::__fast_bkt>
               	flds	(%rdi)
               	movzbl	(%rax,%rsi), %eax
               	movl	%eax, 4(%rsp)
               	fimull	4(%rsp)
               	movl	%eax, %ebp
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b70 <ceil@plt>
               	movsd	24361(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x442b08 <_IO_stdin_used+0x148>
               	comisd	%xmm1, %xmm0
               	jae	0x43cbf0 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x4e>
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	jmp	0x43cc03 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x61>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	movzbl	%bpl, %eax
               	jmp	0x43cca2 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x100>
               	leaq	35533(%rip), %rcx       # 0x4456e0 <std::__detail::__prime_list>
               	incq	%rsi
               	movl	$297, %edx              # imm = 0x129
               	leaq	48(%rcx), %rbp
               	movq	%rdx, %rax
               	sarq	%rax
               	leaq	(%rbp,%rax,8), %rdi
               	cmpq	(%rdi), %rsi
               	ja	0x43cc39 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x97>
               	testq	%rax, %rax
               	jle	0x43cc46 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xa4>
               	movq	%rax, %rdx
               	jmp	0x43cc1f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x7d>
               	subq	%rax, %rdx
               	leaq	8(%rdi), %rbp
               	leaq	-1(%rdx), %rax
               	jmp	0x43cc2f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x8d>
               	leaq	2424(%rcx), %rdx
               	orq	$-1, %rax
               	cmpq	%rdx, %rbp
               	je	0x43cc9a <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	fildll	(%rbp)
               	cmpq	$0, (%rbp)
               	jns	0x43cc66 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xc4>
               	fadds	23942(%rip)             # 0x4429ec <_IO_stdin_used+0x2c>
               	fmuls	(%rbx)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b70 <ceil@plt>
               	movsd	24201(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x442b08 <_IO_stdin_used+0x148>
               	comisd	%xmm1, %xmm0
               	jae	0x43cc8c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xea>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43cc9a <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>:
               	addq	%rcx, %rdx
               	cmpq	8(%rdi), %rdx
               	jb	0x43cd96 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xec>
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	flds	(%rdi)
               	movq	%rdx, (%rsp)
               	fildll	(%rsp)
               	testq	%rdx, %rdx
               	jns	0x43ccd1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x27>
               	fadds	23835(%rip)             # 0x4429ec <_IO_stdin_used+0x2c>
               	fdiv	%st(1), %st
               	movq	%rsi, (%rsp)
               	fildll	(%rsp)
               	testq	%rsi, %rsi
               	jns	0x43cce9 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x3f>
               	fadds	23815(%rip)             # 0x4429ec <_IO_stdin_used+0x2c>
               	fxch	%st(1)
               	jmp	0x43cceb <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x41>
               	fxch	%st(1)
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	fcomi	%st(1), %st
               	jb	0x43cd51 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xa7>
               	fstp	%st(1)
               	fstp	%st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b80 <floor@plt>
               	addsd	24064(%rip), %xmm0      # 0x442b10 <_IO_stdin_used+0x150>
               	comisd	24048(%rip), %xmm0      # 0x442b08 <_IO_stdin_used+0x148>
               	jae	0x43cd21 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x77>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43cd33 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x89>
               	subsd	24031(%rip), %xmm0      # 0x442b08 <_IO_stdin_used+0x148>
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	leaq	(%rbp,%rbp), %rsi
               	movq	%rbx, %rdi
               	cmpq	%rsi, %rax
               	cmovaeq	%rax, %rsi
               	callq	0x43cba2 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>
               	movq	%rax, %rdx
               	movl	$1, %eax
               	jmp	0x43cd9b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	fstp	%st(0)
               	fmulp	%st, %st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b80 <floor@plt>
               	comisd	23964(%rip), %xmm0      # 0x442b08 <_IO_stdin_used+0x148>
               	jae	0x43cd79 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xcf>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	jmp	0x43cd90 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xe6>
               	subsd	23943(%rip), %xmm0      # 0x442b08 <_IO_stdin_used+0x148>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	xorl	%eax, %eax
               	xorl	%edx, %edx
               	jmp	0x43cd9b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	retq
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<__once_proxy>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	jmpq	*%rax
               	nop

<std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43f4fc <std::__cow_string::__cow_string(char const*, unsigned long)>

<std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	138609(%rip), %rax      # 0x45eb48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43cdba <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cdc6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138596(%rip), %rax      # 0x45eb70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cdc6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138610(%rip), %rax      # 0x45eb98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cdc6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138624(%rip), %rax      # 0x45ebc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cdc6 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138638(%rip), %rax      # 0x45ebe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	138651(%rip), %rax      # 0x45ec10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43cdba <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ce64 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138638(%rip), %rax      # 0x45ec38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ce64 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138652(%rip), %rax      # 0x45ec60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ce64 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	138666(%rip), %rax      # 0x45ec88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
               	testq	%rdx, %rdx
               	je	0x43cef1 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xa>
               	jmp	0x4137d0 <memcmp@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::find(char const*, unsigned long, char const&)>:
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43cf07 <std::char_traits<char>::find(char const*, unsigned long, char const&)+0x13>
               	movsbl	(%rdx), %esi
               	movq	%rax, %rdx
               	jmp	0x413b90 <memchr@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::copy(char*, char const*, unsigned long)>:
               	movq	%rdi, %rax
               	movq	%rdx, %rcx
               	testq	%rdx, %rdx
               	je	0x43cf17 <std::char_traits<char>::copy(char*, char const*, unsigned long)+0xd>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>:
               	movq	%rsi, 8(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>:
               	movq	%rsi, 16(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>:
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>:
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>:
               	movq	(%rsi), %rax
               	testq	%rax, %rax
               	jns	0x43cf65 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x15>
               	pushq	%rax
               	leaq	31648(%rip), %rdi       # 0x444b00 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4400f8 <std::__throw_length_error(char const*)>
               	cmpq	%rdx, %rax
               	jbe	0x43cf89 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	addq	%rdx, %rdx
               	cmpq	%rdx, %rax
               	jae	0x43cf89 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	testq	%rdx, %rdx
               	js	0x43cf7c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x2c>
               	movq	%rdx, (%rsi)
               	jmp	0x43cf89 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	movq	%rax, (%rsi)
               	movq	(%rsi), %rdi
               	incq	%rdi
               	jmp	0x43bb19 <operator new(unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	addq	$16, %rax
               	cmpq	%rax, %rdi
               	je	0x43cfa8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x14>
               	jmp	0x43b1e5 <operator delete(void*)>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>:
               	movq	(%rdi), %rdi
               	jmp	0x43b1e5 <operator delete(void*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>:
               	movq	8(%rdi), %rcx
               	movq	%rsi, %rax
               	cmpq	%rcx, %rsi
               	jbe	0x43cfdb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const+0x21>
               	pushq	%rsi
               	leaq	31865(%rip), %rdi       # 0x444c47 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x440186 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rax, %rsi
               	subq	8(%rdi), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x43cffb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const+0x1f>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x4400f8 <std::__throw_length_error(char const*)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const>:
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x43d020 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const+0x14>
               	addq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d02c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	jmp	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d03c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x43d046 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136f0 <memmove@plt>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x43d053 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x43d05c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>:
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movq	%rsi, 8(%rsp)
               	cmpq	$15, %rsi
               	jbe	0x43d08c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x2e>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	8(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x43d0a2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x44>
               	movq	(%rbx), %rdi
               	movsbl	%bpl, %edx
               	callq	0x43d047 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)>:
               	movsbl	%dl, %edx
               	jmp	0x43d05e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d0c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d0cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x43d0fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	cmpq	%rsi, %rdi
               	je	0x43d17c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>
               	pushq	%r13
               	leaq	16(%rdi), %rax
               	movl	$15, %edx
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rsi), %rbp
               	cmpq	%rax, (%rdi)
               	je	0x43d121 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x25>
               	movq	16(%rdi), %rdx
               	movq	%rsi, %r12
               	movq	%rdi, %rbx
               	cmpq	%rbp, %rdx
               	jae	0x43d152 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
               	leaq	8(%rsp), %rsi
               	movq	%rbp, 8(%rsp)
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rbx, %rdi
               	movq	%rax, %r13
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%r13, (%rbx)
               	movq	%rax, 16(%rbx)
               	testq	%rbp, %rbp
               	je	0x43d166 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6a>
               	movq	(%r12), %rsi
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	leaq	(%rbp,%rdx), %r14
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	movq	%rsi, %rax
               	subq	%r14, %rax
               	movq	%rax, 8(%rsp)
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	movl	$15, %edx
               	addq	%rsi, %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	je	0x43d1cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x4e>
               	movq	16(%rdi), %rdx
               	leaq	24(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, %r12
               	testq	%rbp, %rbp
               	je	0x43d1ef <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x71>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdx
               	movq	%rax, %rdi
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	testq	%r13, %r13
               	je	0x43d208 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	testq	%r15, %r15
               	je	0x43d208 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	leaq	(%r12,%rbp), %rdi
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	cmpq	$0, 8(%rsp)
               	je	0x43d228 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xaa>
               	movq	(%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	8(%rsp), %rdx
               	addq	%r12, %rdi
               	addq	%r14, %rsi
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	24(%rsp), %rax
               	movq	%r12, (%rbx)
               	movq	%rax, 16(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	(%rsi,%rdx), %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rdx
               	subq	%rax, %rdx
               	je	0x43d278 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	testq	%rbp, %rbp
               	je	0x43d278 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rdi), %rdi
               	addq	%rdi, %rax
               	addq	%rsi, %rdi
               	movq	%rax, %rsi
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbx), %rdx
               	subq	%rbp, %rax
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movsbl	%dl, %edx
               	movq	%rax, (%rdi)
               	jmp	0x43d05e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, (%rbp)
               	movq	(%rsi), %rax
               	cmpq	%rax, %r12
               	jne	0x43d2f3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2d>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43d2ff <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	%rax, (%rbp)
               	movq	16(%rsi), %rax
               	movq	%rax, 16(%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	%r12, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rdx
               	movq	%rdi, (%rbp)
               	movq	-16(%rsi), %rcx
               	cmpq	%rcx, %rsi
               	jne	0x43d35c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x40>
               	movl	$16, %edx
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	jmp	0x43d37f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x63>
               	movq	%rcx, (%rbp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 8(%rbp)
               	movq	16(%rbx), %rcx
               	movq	%rcx, 16(%rbp)
               	movq	%rsi, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	jmp	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d0fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rcx
               	movq	-16(%rsi), %rax
               	movq	(%rdi), %rdi
               	cmpq	%rax, %rsi
               	jne	0x43d3d1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	8(%rbx), %rdx
               	testq	%rdx, %rdx
               	je	0x43d3bf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x27>
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbp), %rdx
               	movq	%rax, 8(%rbp)
               	movb	$0, (%rdx,%rax)
               	jmp	0x43d407 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	leaq	16(%rbp), %rcx
               	cmpq	%rcx, %rdi
               	je	0x43d3e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x48>
               	movq	16(%rbp), %rdx
               	jmp	0x43d3e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4a>
               	xorl	%edi, %edi
               	movq	%rax, (%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rax
               	movq	%rax, 16(%rbp)
               	testq	%rdi, %rdi
               	je	0x43d404 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
               	movq	%rdi, (%rbx)
               	movq	%rdx, 16(%rbx)
               	jmp	0x43d407 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	movq	%rsi, (%rbx)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43d4b2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x12>
               	movq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rsi, 8(%rsp)
               	cmpq	%rax, %rsi
               	jae	0x43d4cd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x19>
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rsi
               	leaq	16(%rdi), %rbp
               	movl	$15, %edx
               	cmpq	%rsi, %rbp
               	je	0x43d4e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x2e>
               	movq	16(%rdi), %rdx
               	movq	8(%rsp), %rcx
               	cmpq	%rdx, %rcx
               	je	0x43d54f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	movq	%rdi, %rbx
               	cmpq	$15, %rcx
               	ja	0x43d4fa <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x46>
               	cmpq	%rdx, %rcx
               	jbe	0x43d533 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x7f>
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%rax, %rbp
               	movq	8(%rbx), %rax
               	movq	%rbp, %rdi
               	leaq	1(%rax), %rdx
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%rbp, (%rbx)
               	movq	%rax, 16(%rbx)
               	jmp	0x43d54f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	cmpq	%rsi, %rbp
               	je	0x43d54f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	leaq	1(%rax), %rdx
               	movq	%rbp, %rdi
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rdi
               	callq	0x43b1e5 <operator delete(void*)>
               	movq	%rbp, (%rbx)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43d568 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x12>
               	movq	16(%rdi), %rax
               	cmpq	%rax, 8(%rdi)
               	jae	0x43d586 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x30>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x43d4b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43bbd5 <__cxa_end_catch>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()>:
               	movq	(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movb	$0, (%rax)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const>:
               	cmpq	$0, 8(%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43d5ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const+0x18>
               	pushq	%rax
               	leaq	30395(%rip), %rdi       # 0x444c7e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440186 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43d5ea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)+0x18>
               	pushq	%rax
               	leaq	30363(%rip), %rdi       # 0x444c7e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440186 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
               	pushq	%r13
               	movl	%esi, %r13d
               	movl	$15, %eax
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	8(%rdi), %rbp
               	leaq	16(%rdi), %rdx
               	leaq	1(%rbp), %r12
               	cmpq	%rdx, (%rdi)
               	je	0x43d63d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x27>
               	movq	16(%rdi), %rax
               	cmpq	%rax, %r12
               	jbe	0x43d657 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x41>
               	movl	$1, %r8d
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d17e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r13b, (%rax,%rbp)
               	movq	(%rbx), %rax
               	movq	%r12, 8(%rbx)
               	movb	$0, 1(%rax,%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x43d616 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d0fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	jmp	0x43d398 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	30238(%rip), %rdx       # 0x444cc2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	cmpq	$-1, %r12
               	jne	0x43d6c4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	jmp	0x43d6e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	testq	%r12, %r12
               	je	0x43d6e2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	movq	8(%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	subq	%rbp, %rdx
               	cmpq	%r12, %rdx
               	cmovaq	%r12, %rdx
               	callq	0x43d24c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43d24c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	subq	%rax, %rbx
               	addq	8(%rdi), %rax
               	cmpq	%rax, %rdx
               	jne	0x43d72f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x21>
               	movq	%rbx, 8(%rdi)
               	movb	$0, (%rsi)
               	jmp	0x43d73a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x2c>
               	subq	%rsi, %rdx
               	movq	%rbx, %rsi
               	callq	0x43d24c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()>:
               	movq	8(%rdi), %rax
               	movl	$1, %edx
               	leaq	-1(%rax), %rsi
               	jmp	0x43d24c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r15
               	movl	%r8d, %r15d
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	30054(%rip), %rcx       # 0x444cd6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	movq	%r12, %rdx
               	movq	%r12, %r14
               	pushq	%rbx
               	movq	%rbp, %rsi
               	movq	%rdi, %rbx
               	subq	%rbp, %r14
               	pushq	%r9
               	callq	0x43cfdc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%rbx), %rdx
               	movq	(%rbx), %rdi
               	leaq	16(%rbx), %rcx
               	movl	$15, %eax
               	addq	%rdx, %r14
               	cmpq	%rcx, %rdi
               	je	0x43d7a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x4f>
               	movq	16(%rbx), %rax
               	cmpq	%r14, %rax
               	jb	0x43d7cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x74>
               	leaq	(%rbp,%r13), %rax
               	subq	%rax, %rdx
               	je	0x43d7df <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	cmpq	%r12, %rbp
               	je	0x43d7df <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	addq	%r13, %rdi
               	leaq	(%rdi,%rbp), %rsi
               	addq	%r12, %rdi
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43d7df <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	movq	%r12, %r8
               	xorl	%ecx, %ecx
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d17e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	testq	%r12, %r12
               	je	0x43d7f6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x9e>
               	movq	(%rbx), %rdi
               	movsbl	%r15b, %edx
               	movq	%r12, %rsi
               	addq	%r13, %rdi
               	callq	0x43d047 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r14, 8(%rbx)
               	movb	$0, (%rax,%r14)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>:
               	movq	%rsi, %rcx
               	movq	8(%rdi), %rsi
               	movsbl	%dl, %r8d
               	xorl	%edx, %edx
               	jmp	0x43d758 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>:
               	movq	8(%rdi), %rax
               	cmpq	%rsi, %rax
               	jae	0x43d838 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x14>
               	movsbl	%dl, %edx
               	subq	%rax, %rsi
               	jmp	0x43d812 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	jbe	0x43d845 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x21>
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x43d824 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>:
               	movsbl	%dl, %r8d
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43d758 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x43d84e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	29803(%rip), %rdx       # 0x444cf3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43d758 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43d758 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movl	%r8d, 4(%rsp)
               	cmpq	%rdx, %rax
               	leaq	29709(%rip), %rdx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x43d758 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x43d758 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	callq	0x43d926 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	leaq	29612(%rip), %rcx       # 0x444d1e <typeinfo name for kotlin::gc::GCSchedulerData+0x1bb5>
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%r8, %rdx
               	movq	%rbx, %rsi
               	subq	$40, %rsp
               	callq	0x43cfdc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%r12), %rax
               	movq	%r15, %rcx
               	movq	(%r12), %rbp
               	subq	%rbx, %rcx
               	movl	$15, %edx
               	movq	%rcx, 16(%rsp)
               	addq	%rax, %rcx
               	movq	%rcx, 8(%rsp)
               	leaq	16(%r12), %rcx
               	cmpq	%rcx, %rbp
               	je	0x43d9bb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	16(%r12), %rdx
               	cmpq	8(%rsp), %rdx
               	jb	0x43daba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x15e>
               	addq	%r14, %rbp
               	addq	%rbx, %r14
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	subq	%r14, %rax
               	movq	%rax, %r14
               	callq	0x43d00c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>
               	cmpq	%r15, %rbx
               	setne	%cl
               	testq	%r14, %r14
               	setne	%dl
               	andl	%edx, %ecx
               	testb	%al, %al
               	je	0x43da16 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xba>
               	testb	%cl, %cl
               	je	0x43da05 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xa9>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	testq	%r15, %r15
               	je	0x43dace <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	jmp	0x43da8a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x12e>
               	testq	%r15, %r15
               	je	0x43da40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	cmpq	%r15, %rbx
               	jb	0x43da40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movb	%cl, 31(%rsp)
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movb	31(%rsp), %cl
               	testb	%cl, %cl
               	je	0x43dace <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	jmp	0x43da44 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe8>
               	testb	%cl, %cl
               	je	0x43da56 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xfa>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	cmpq	%r15, %rbx
               	jae	0x43dace <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	leaq	(%rbp,%rbx), %rdi
               	leaq	(%r13,%r15), %rax
               	cmpq	%rax, %rdi
               	jb	0x43da7a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x11e>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43dace <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	cmpq	%r13, %rdi
               	ja	0x43da8f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x133>
               	movq	16(%rsp), %rsi
               	movq	%r15, %rdx
               	addq	%r13, %rsi
               	movq	%rbp, %rdi
               	jmp	0x43dab3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x157>
               	movq	%rdi, %rbx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	subq	%r13, %rbx
               	movq	%rbx, %rdx
               	callq	0x43d031 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	%r15, %rdx
               	leaq	(%rbp,%r15), %rsi
               	leaq	(%rbp,%rbx), %rdi
               	subq	%rbx, %rdx
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43dace <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %r8
               	movq	%r13, %rcx
               	movq	%rbx, %rdx
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x43d17e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	8(%rsp), %rax
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r12)
               	movq	(%r12), %rax
               	movb	$0, (%rax,%rbx)
               	addq	$40, %rsp
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %r8
               	movq	(%rdi), %rbx
               	subq	%rdx, %r8
               	leaq	29215(%rip), %rdx       # 0x444d37 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %r8
               	cmovaq	%rcx, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rbp), %rdx
               	movq	8(%rsp), %r8
               	xorl	%esi, %esi
               	addq	$24, %rsp
               	leaq	(%rbx,%rax), %rcx
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d95c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>:
               	movq	%rdx, %r8
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43d95c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43db46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)>:
               	jmp	0x43db46 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	movq	8(%r9), %rdx
               	leaq	-1(%rcx), %r8
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43d95c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)>:
               	jmp	0x43db6c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movq	%r8, (%rsp)
               	cmpq	%rdx, %rax
               	leaq	28996(%rip), %rdx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	(%rsp), %r8
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d95c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rdx), %r8
               	movq	(%rdx), %rcx
               	xorl	%edx, %edx
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rdx, %rdi
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	8(%rdx), %rax
               	movq	(%rdx), %rbx
               	leaq	28889(%rip), %rdx       # 0x444cf3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	$16, %rsp
               	xorl	%edx, %edx
               	leaq	(%rbx,%rax), %rcx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>:
               	movq	%rcx, %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x43dc4c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28780(%rip), %rdx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%r8, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rcx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rcx), %rax
               	movq	%r9, %rbx
               	movq	(%rcx), %rbp
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r14, %rdx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rcx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43dd0a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43dd0a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	jmp	0x43dd0a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43db9e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rax
               	leaq	16(%rbx), %r8
               	movl	$15, %ecx
               	movq	(%rdi), %rdi
               	leaq	(%rax,%rdx), %rbp
               	cmpq	%r8, %rdi
               	je	0x43dda7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x23>
               	movq	16(%rbx), %rcx
               	cmpq	%rcx, %rbp
               	ja	0x43ddbb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x37>
               	testq	%rdx, %rdx
               	je	0x43ddce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	addq	%rax, %rdi
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43ddce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	movq	%rdx, %r8
               	movq	%rsi, %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d17e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43dd84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43dde0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rdi), %rax
               	movq	%rcx, %rbx
               	movq	(%rdi), %rbp
               	subq	%rdx, %rax
               	leaq	28473(%rip), %rdx       # 0x444d4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rsi
               	movq	%rbx, %rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43dd84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>:
               	pushq	%r12
               	leaq	28431(%rip), %rcx       # 0x444d4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %r12
               	xorl	%esi, %esi
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cfdc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43dd84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)>:
               	jmp	0x43de34 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)>:
               	jmp	0x43de34 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	xorl	%esi, %esi
               	pushq	%rbx
               	repne		scasb	%es:(%rdi), %al
               	movq	%rbp, %rdi
               	movq	%rcx, %rdx
               	leaq	28346(%rip), %rcx       # 0x444d4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	movq	%rbx, %rdx
               	callq	0x43cfdc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rdx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43dd84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>:
               	jmp	0x43de6e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28315(%rip), %rdx       # 0x444d61 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	testq	%rbx, %rbx
               	je	0x43df03 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const+0x49>
               	movq	(%r12), %rsi
               	movq	%rbx, %rdx
               	movq	%r13, %rdi
               	addq	%rbp, %rsi
               	callq	0x43d021 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
               	cmpq	%rsi, %rdi
               	je	0x43e063 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x153>
               	pushq	%r14
               	pushq	%r13
               	leaq	16(%rdi), %r13
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdx
               	movq	(%rsi), %rax
               	cmpq	%rdx, %r13
               	jne	0x43e00e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xfe>
               	cmpq	%rax, %r12
               	jne	0x43dfea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xda>
               	cmpq	$0, 8(%rdi)
               	movq	8(%rsi), %rax
               	je	0x43df93 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x83>
               	testq	%rax, %rax
               	je	0x43dfc1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xb1>
               	movq	%rsp, %r14
               	movq	%r12, %rsi
               	movl	$16, %edx
               	movq	%r14, %rdi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	movl	$16, %edx
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movl	$16, %edx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43e046 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	testq	%rax, %rax
               	je	0x43e046 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	jmp	0x43dfe5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xd5>
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbp), %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	movq	$0, 8(%rbp)
               	movb	$0, (%rax)
               	jmp	0x43e056 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x146>
               	movq	16(%rsi), %r14
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rax, (%rbp)
               	movq	%r12, (%rbx)
               	movq	%r14, 16(%rbp)
               	jmp	0x43e046 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movq	16(%rdi), %r14
               	cmpq	%rax, %r12
               	jne	0x43e034 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x124>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43cf0a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%rax, (%rbx)
               	movq	%r13, (%rbp)
               	jmp	0x43e042 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x132>
               	movq	%rax, (%rdi)
               	movq	16(%rsi), %rax
               	movq	%rdx, (%rsi)
               	movq	%rax, 16(%rdi)
               	movq	%r14, 16(%rbx)
               	movq	8(%rbp), %rax
               	movq	8(%rbx), %rdx
               	movq	%rdx, 8(%rbp)
               	movq	%rax, 8(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	testq	%rcx, %rcx
               	jne	0x43e094 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x24>
               	cmpq	%rdx, %rsi
               	jae	0x43e10b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x43e107 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x43e107 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	(%rdi), %rbp
               	movb	(%r13), %dl
               	movq	%rcx, %rbx
               	movl	$1, %r12d
               	leaq	31(%rsp), %r15
               	subq	%rbx, %r12
               	leaq	(%rbp,%rsi), %rcx
               	movb	%dl, 31(%rsp)
               	leaq	(%rbp,%rax), %rdi
               	subq	%rax, %rsi
               	movq	%rcx, 8(%rsp)
               	cmpq	%rbx, %rsi
               	jb	0x43e107 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r12, %rsi
               	movq	%r15, %rdx
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	je	0x43e107 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rax, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e0f9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%r14, %rax
               	subq	%rbp, %rax
               	jmp	0x43e10b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%r14), %rdi
               	subq	%rdi, %rsi
               	jmp	0x43e0c7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	subq	$24, %rsp
               	movb	%sil, 12(%rsp)
               	movq	8(%rdi), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x43e17d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	movq	(%rdi), %rbp
               	movq	%rdx, %rax
               	leaq	12(%rsp), %rdx
               	subq	%rax, %rsi
               	leaq	(%rbp,%rax), %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e17d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	subq	%rbp, %rax
               	movq	%rax, %rbx
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rcx
               	ja	0x43e1d9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x43e1d9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x43e1d5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x43e1b3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e188 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e188 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e23b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x43e23b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	(%rdi), %rdx
               	leaq	-1(%rax), %rcx
               	cmpb	%sil, (%rdx,%rax)
               	je	0x43e23b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	%rcx, %rax
               	jmp	0x43e223 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x17>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%r12, %r12
               	je	0x43e277 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	cmpq	8(%rbp), %rbx
               	jae	0x43e277 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%rbp), %rdx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e27b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x43e250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e23c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e23c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e142 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e304 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x43e304 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	cmpq	%rdx, %rax
               	movq	%rsi, %r12
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e308 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e2e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x43e308 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e2b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e2b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e20c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	8(%rdi), %r12
               	movq	%rdx, %rbx
               	cmpq	%r12, %rbx
               	jae	0x43e37f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x39>
               	movq	(%rbp), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e383 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3d>
               	incq	%rbx
               	jmp	0x43e35e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e346 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e346 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	movq	%rdx, %rax
               	cmpq	%rcx, %rax
               	jae	0x43e3d2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1a>
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e3d6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x43e3bf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x7>
               	orq	$-1, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %r12
               	cmpq	%rdx, %rax
               	movq	%rsi, %rbp
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e403 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e3d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e47d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e47d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x43e46e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rbx
               	movq	8(%rsi), %rbp
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	cmpq	%rbp, %rbx
               	movq	%rbp, %rdx
               	cmovbeq	%rbx, %rdx
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e4b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	26792(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	(%r13), %rdi
               	movq	(%r14), %rsi
               	subq	%rbp, %rbx
               	cmpq	%r12, %rbx
               	cmovaq	%r12, %rbx
               	movq	8(%r14), %r12
               	movq	%rbx, %rdx
               	cmpq	%rbx, %r12
               	cmovbeq	%r12, %rdx
               	addq	%rbp, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e518 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rcx, %r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	26675(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	leaq	26653(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	movq	%r15, %rdi
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbx
               	movq	8(%rsp), %r9
               	movq	(%r15), %rsi
               	movq	(%r14), %rdi
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	8(%r15), %rbp
               	subq	%r13, %rbp
               	movq	%rbx, %rdx
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e5bb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const+0x99>
               	addq	$24, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	%rdi, %r8
               	movq	8(%rdi), %rbp
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r8), %rdi
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbx, %rbp
               	movq	%rbx, %rdx
               	cmovbeq	%rbp, %rdx
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e60d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	26439(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbp
               	movq	%r12, %rdi
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r14), %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rsi
               	notq	%rsi
               	leaq	-1(%rsi), %rbx
               	movq	%r12, %rsi
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r13, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e684 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const+0x72>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	26330(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	pushq	%r9
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	%r12, %rdx
               	movq	(%r13), %rdi
               	movq	%r14, %rsi
               	subq	%rbp, %rbx
               	cmpq	%r15, %rbx
               	cmovaq	%r15, %rbx
               	cmpq	%r12, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%rbp, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e6f6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x68>
               	popq	%rcx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbx), %rax
               	movb	$0, 16(%rbx)
               	movq	%rbx, %rdi
               	movq	%rax, (%rbx)
               	movq	$0, 8(%rbx)
               	movq	8(%r12), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbp
               	addq	%rbp, %rsi
               	callq	0x43d4b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43de34 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43dde0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	$0, 8(%rdi)
               	movb	$0, 16(%rdi)
               	movq	8(%rdx), %rax
               	leaq	1(%rax), %rsi
               	callq	0x43d4b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x43d812 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43dde0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43e826 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d0c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43e7ec <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43e894 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d0cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43e85a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>
               	nop

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43e8fd <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43e8fd <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	leaq	25746(%rip), %rdi       # 0x444d8a <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x440023 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43e929 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d0c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43e8d6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x43e950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43dde0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43e8d6 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43e9cf <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43e9cf <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	leaq	25536(%rip), %rdi       # 0x444d8a <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x440023 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43e9fb <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43cf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d0cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25474(%rip), %rdx       # 0x444db4 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c4b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rdi, %r8
               	orq	$-1, %rdx
               	movq	%rax, (%rdi)
               	testq	%rsi, %rsi
               	je	0x43eacc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x28>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%r8, %rdi
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	25315(%rip), %rdx       # 0x444dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r13, %rsi
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	movq	%rsi, %rdx
               	subq	%r13, %rdx
               	addq	8(%r12), %rdx
               	popq	%rcx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25237(%rip), %rdx       # 0x444dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	25180(%rip), %rdx       # 0x444dde <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x43cfba <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43eb1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<bool __gnu_cxx::operator==<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>:
               	testq	%rdi, %rdi
               	je	0x43ebd3 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)+0xb>
               	movq	(%rdi), %rax
               	jmpq	*8(%rax)
               	retq

<execute_native_thread_routine>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	movq	%rbx, %rdi
               	callq	0x43ebc8 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	popq	%rdx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43ebc8 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::system_error::system_error(std::error_code, char const*)>:
               	pushq	%r15
               	movq	%rsi, %r15
               	pushq	%r14
               	movq	%rdx, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$104, %rsp
               	movq	(%rdx), %rax
               	movl	%esi, %edx
               	movq	%r14, %rsi
               	leaq	64(%rsp), %rbp
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	leaq	25021(%rip), %rdx       # 0x444df3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8a>
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x43dc62 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	leaq	32(%rsp), %r12
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	callq	0x43d2c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rdx
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	callq	0x43dc62 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	movq	%rsp, %r13
               	movq	%rax, %rsi
               	movq	%r13, %rdi
               	callq	0x43d2c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43ce64 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r13, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%r12, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	130219(%rip), %rax      # 0x45e940 <vtable for std::system_error>
               	movq	%r15, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rbx
               	movq	%r13, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43ecc3 <std::system_error::system_error(std::error_code, char const*)+0xc1>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43ecd0 <std::system_error::system_error(std::error_code, char const*)+0xce>
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::thread::_State::~_State()>:
               	retq
               	nop

<std::thread::_State::~_State()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ece0 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::thread::join()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43ed0d <std::thread::join()+0x19>
               	xorl	%esi, %esi
               	callq	0x413ba0 <pthread_join@plt>
               	testl	%eax, %eax
               	je	0x43ed19 <std::thread::join()+0x25>
               	jmp	0x43ed12 <std::thread::join()+0x1e>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::detach()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43ed39 <std::thread::detach()+0x17>
               	callq	0x413a30 <pthread_detach@plt>
               	testl	%eax, %eax
               	je	0x43ed45 <std::thread::detach()+0x23>
               	jmp	0x43ed3e <std::thread::detach()+0x1c>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>:
               	pushq	%rbx
               	movq	(%rsi), %rcx
               	movq	%rsi, %rbx
               	leaq	-392(%rip), %rdx        # 0x43ebd4 <execute_native_thread_routine>
               	xorl	%esi, %esi
               	callq	0x413bb0 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43ed6e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())+0x20>
               	movl	%eax, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::thread::hardware_concurrency()>:
               	pushq	%rax
               	callq	0x413bc0 <get_nprocs@plt>
               	movl	$0, %edx
               	testl	%eax, %eax
               	cmovsl	%edx, %eax
               	popq	%rdx
               	retq

<std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdi, (%rsp)
               	movq	%rsp, %rbx
               	movq	%rsi, 8(%rsp)
               	movq	%rbx, %rsi
               	movq	%rbx, %rdi
               	callq	0x413bd0 <nanosleep@plt>
               	incl	%eax
               	jne	0x43edb4 <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x2a>
               	callq	0x413870 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x43ed9b <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x11>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43ee1c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	131564(%rip), %rbp      # 0x45efb8 <write+0x45efb8>
               	testq	%rbp, %rbp
               	je	0x43eddb <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x21>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 8(%rbx)
               	jmp	0x43ede4 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x2a>
               	movl	8(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 8(%rbx)
               	decl	%eax
               	jne	0x43ee1c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	testq	%rbp, %rbp
               	je	0x43ee00 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x46>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 12(%rbx)
               	jmp	0x43ee09 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x4f>
               	movl	12(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 12(%rbx)
               	decl	%eax
               	jne	0x43ee1c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	movq	24(%rax), %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<execute_native_thread_routine_compat>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rsp, %rbx
               	movq	%rax, (%rsp)
               	movq	16(%rdi), %rax
               	movq	$0, 16(%rdi)
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	leaq	8(%rbx), %rdi
               	callq	0x43edba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43edba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rbx
               	movq	8(%rsi), %rdx
               	movq	$0, (%rsi)
               	movq	$0, 8(%rsi)
               	leaq	8(%rsp), %r12
               	movq	8(%rbx), %rax
               	movq	%rbx, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	%rdx, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43edba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	xorl	%esi, %esi
               	movq	%rbx, %rcx
               	movq	%rbp, %rdi
               	leaq	-172(%rip), %rdx        # 0x43ee20 <execute_native_thread_routine_compat>
               	callq	0x413bb0 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43ef07 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())+0x91>
               	movl	%eax, %ebp
               	movq	8(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	$0, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43edba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movl	%ebp, %edi
               	callq	0x43ca5a <std::__throw_system_error(int)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	cmpq	$0, 131226(%rip)        # 0x45efb8 <write+0x45efb8>
               	jne	0x43ef5f <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0x4f>
               	movl	$32, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	callq	0x43c9c4 <std::_V2::generic_category()>
               	leaq	24253(%rip), %rcx       # 0x444df6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8d>
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43ec02 <std::system_error::system_error(std::error_code, char const*)>
               	leaq	-9886(%rip), %rdx       # 0x43c8b2 <std::system_error::~system_error()>
               	leaq	129201(%rip), %rsi      # 0x45e808 <typeinfo for std::system_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	(%rsi), %rax
               	movq	$0, (%rsi)
               	movq	%rsp, %rbx
               	xorl	%edx, %edx
               	movq	%rax, (%rsp)
               	movq	8(%rsi), %rax
               	movq	$0, 8(%rsi)
               	movq	%rbx, %rsi
               	movq	%rax, 8(%rsp)
               	callq	0x43ee76 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>
               	leaq	8(%rbx), %rdi
               	callq	0x43edba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	jmp	0x43efb4 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0xa4>
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43edba <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::type_info::~type_info()>:
               	retq
               	nop

<std::type_info::__is_function_p() const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::~type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43efbc <std::type_info::~type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	movq	8(%rdi), %rdi
               	movq	8(%rsi), %rsi
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43f001 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43f001 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	pushq	%rax
               	callq	0x413ae0 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxa_current_exception_type>:
               	pushq	%rcx
               	callq	0x43bf48 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	je	0x43f020 <__cxa_current_exception_type+0x1e>
               	movq	(%rax), %rdx
               	testb	$1, 80(%rax)
               	je	0x43f01d <__cxa_current_exception_type+0x1b>
               	leaq	-112(%rdx), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	retq

<__cxa_pure_virtual>:
               	pushq	%rax
               	movl	$27, %edx
               	movl	$2, %edi
               	leaq	24043(%rip), %rsi       # 0x444e1f <typeinfo name for kotlin::gc::GCSchedulerData+0x1cb6>
               	callq	0x413930 <write@plt>
               	callq	0x43bec3 <std::terminate()>

<__cxa_deleted_virtual>:
               	pushq	%rax
               	movl	$30, %edx
               	movl	$2, %edi
               	leaq	24043(%rip), %rsi       # 0x444e3b <typeinfo name for kotlin::gc::GCSchedulerData+0x1cd2>
               	callq	0x413930 <write@plt>
               	callq	0x43bec3 <std::terminate()>

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	leaq	129511(%rip), %rax      # 0x45ea48 <vtable for __gnu_cxx::recursive_init_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f05a <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<std::logic_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::runtime_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::logic_error::~logic_error()>:
               	leaq	129711(%rip), %rax      # 0x45eb48 <vtable for std::logic_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::domain_error::~domain_error()>:
               	leaq	129713(%rip), %rax      # 0x45eb70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f092 <std::logic_error::~logic_error()>
               	nop

<std::invalid_argument::~invalid_argument()>:
               	leaq	129733(%rip), %rax      # 0x45eb98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f092 <std::logic_error::~logic_error()>
               	nop

<std::length_error::~length_error()>:
               	leaq	129753(%rip), %rax      # 0x45ebc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f092 <std::logic_error::~logic_error()>
               	nop

<std::out_of_range::~out_of_range()>:
               	leaq	129773(%rip), %rax      # 0x45ebe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f092 <std::logic_error::~logic_error()>
               	nop

<std::runtime_error::~runtime_error()>:
               	leaq	129793(%rip), %rax      # 0x45ec10 <vtable for std::runtime_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::range_error::~range_error()>:
               	leaq	129795(%rip), %rax      # 0x45ec38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f108 <std::runtime_error::~runtime_error()>
               	nop

<std::overflow_error::~overflow_error()>:
               	leaq	129815(%rip), %rax      # 0x45ec60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f108 <std::runtime_error::~runtime_error()>
               	nop

<std::underflow_error::~underflow_error()>:
               	leaq	129835(%rip), %rax      # 0x45ec88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f108 <std::runtime_error::~runtime_error()>
               	nop

<std::logic_error::~logic_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f092 <std::logic_error::~logic_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::domain_error::~domain_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f0b8 <std::domain_error::~domain_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::invalid_argument::~invalid_argument()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f0cc <std::invalid_argument::~invalid_argument()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::length_error::~length_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f0e0 <std::length_error::~length_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::out_of_range::~out_of_range()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f0f4 <std::out_of_range::~out_of_range()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::runtime_error::~runtime_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f108 <std::runtime_error::~runtime_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::range_error::~range_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f12e <std::range_error::~range_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::overflow_error::~overflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f142 <std::overflow_error::~overflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::underflow_error::~underflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f156 <std::underflow_error::~underflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b1e5 <operator delete(void*)>

<std::logic_error::logic_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	129323(%rip), %rax      # 0x45eb48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f20c <std::logic_error::logic_error(std::string const&)>
               	leaq	129310(%rip), %rax      # 0x45eb70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f20c <std::logic_error::logic_error(std::string const&)>
               	leaq	129324(%rip), %rax      # 0x45eb98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f20c <std::logic_error::logic_error(std::string const&)>
               	leaq	129338(%rip), %rax      # 0x45ebc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f20c <std::logic_error::logic_error(std::string const&)>
               	leaq	129352(%rip), %rax      # 0x45ebe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	129365(%rip), %rax      # 0x45ec10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f2aa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	129352(%rip), %rax      # 0x45ec38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f2aa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	129366(%rip), %rax      # 0x45ec60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f2aa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	129380(%rip), %rax      # 0x45ec88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<_txnal_cow_string_D1_commit(void*)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rsi
               	callq	0x441080 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::logic_error::logic_error(std::logic_error const&)>:
               	leaq	129025(%rip), %rax      # 0x45eb48 <vtable for std::logic_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::logic_error::operator=(std::logic_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x441cee <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::runtime_error::runtime_error(std::runtime_error const&)>:
               	leaq	129175(%rip), %rax      # 0x45ec10 <vtable for std::runtime_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::runtime_error::operator=(std::runtime_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x441cee <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::logic_error::logic_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	128912(%rip), %rax      # 0x45eb48 <vtable for std::logic_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4420a4 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::domain_error::domain_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	leaq	128892(%rip), %rax      # 0x45eb70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	leaq	128906(%rip), %rax      # 0x45eb98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	leaq	128920(%rip), %rax      # 0x45ebc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	leaq	128934(%rip), %rax      # 0x45ebe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	128944(%rip), %rax      # 0x45ec10 <vtable for std::runtime_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4420a4 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b710 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::range_error::range_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f44c <std::runtime_error::runtime_error(char const*)>
               	leaq	128924(%rip), %rax      # 0x45ec38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f44c <std::runtime_error::runtime_error(char const*)>
               	leaq	128938(%rip), %rax      # 0x45ec60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f44c <std::runtime_error::runtime_error(char const*)>
               	leaq	128952(%rip), %rax      # 0x45ec88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::__sso_string::__sso_string(std::string const&)>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rdx
               	jmp	0x4403ca <std::__sso_string::__sso_string(char const*, unsigned long)>

<std::__cow_string::__cow_string()>:
               	leaq	241843(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::__cow_string::__cow_string(std::string const&)>:
               	jmp	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::__cow_string(char const*, unsigned long)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rcx
               	callq	0x4420ee <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq
               	nop

<std::__cow_string::__cow_string(std::__cow_string const&)>:
               	jmp	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::operator=(std::__cow_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441cee <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cow_string::~__cow_string()>:
               	jmp	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	nop

<std::__cow_string::__cow_string(std::__cow_string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	241769(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__cow_string::operator=(std::__cow_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440ed4 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::_M_message(int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rsi), %rax
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	*24(%rax)
               	movq	8(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	-24(%rsi), %rdx
               	callq	0x4403ca <std::__sso_string::__sso_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movl	$1, %ebp
               	pushq	%rbx
               	leaq	-1(%rsi), %rbx
               	pushq	%rdx
               	leaq	(%rbx,%rbp), %rdi
               	callq	0x413be0 <_ITM_RU1@plt>
               	testb	%al, %al
               	je	0x43f5c3 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x28>
               	incq	%rbp
               	jmp	0x43f5b1 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x16>
               	leaq	24(%rbp), %rdi
               	callq	0x413bf0 <_ZGTtnam@plt>
               	leaq	-1(%rbp), %rdx
               	movl	$0, 16(%rax)
               	leaq	24(%rax), %rbx
               	movq	%r12, %rsi
               	movq	%rdx, 8(%rax)
               	movq	%rbx, %rdi
               	movq	%rdx, (%rax)
               	movq	%rbp, %rdx
               	callq	0x413c00 <_ITM_memcpyRtWn@plt>
               	movq	%rbx, (%r13)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	callq	0x43bd14 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43bbd5 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_txnal_cow_string_c_str(void const*)>:
               	jmp	0x413c10 <_ITM_RU8@plt>

<_txnal_sso_string_c_str(void const*)>:
               	jmp	0x413c10 <_ITM_RU8@plt>

<_txnal_cow_string_D1(void*)>:
               	pushq	%rax
               	callq	0x43f619 <_txnal_cow_string_c_str(void const*)>
               	leaq	-771(%rip), %rdi        # 0x43f32d <_txnal_cow_string_D1_commit(void*)>
               	movl	$1, %esi
               	popq	%rcx
               	leaq	-24(%rax), %rdx
               	jmp	0x413c20 <_ITM_addUserCommitAction@plt>

<_txnal_logic_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_txnal_runtime_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_ZGTtNSt11logic_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21542(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f092 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f092 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21436(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f092 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f092 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11logic_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f728 <_ZGTtNSt11logic_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNKSt11logic_error4whatEv>:
               	pushq	%rax
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f619 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt12domain_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21271(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f3e4 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0b8 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0b8 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21165(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f3e4 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0b8 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0b8 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12domain_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f837 <_ZGTtNSt12domain_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt16invalid_argumentC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21015(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f3fe <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0cc <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0cc <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20909(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f3fe <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0cc <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0cc <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentD2Ev>:
               	pushq	%rax
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt16invalid_argumentD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f937 <_ZGTtNSt16invalid_argumentD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt12length_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20759(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f418 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20653(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f418 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0e0 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12length_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fa37 <_ZGTtNSt12length_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt12out_of_rangeC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20503(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f432 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20397(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f432 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f0f4 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeD2Ev>:
               	pushq	%rax
               	callq	0x43f63f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12out_of_rangeD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fb37 <_ZGTtNSt12out_of_rangeD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt13runtime_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20247(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f44c <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f108 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f108 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20141(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f44c <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f108 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f108 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt13runtime_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fc37 <_ZGTtNSt13runtime_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNKSt13runtime_error4whatEv>:
               	pushq	%rax
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f619 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt11range_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19976(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f48c <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f12e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f12e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19870(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f48c <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f12e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f12e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11range_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fd46 <_ZGTtNSt11range_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt14overflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19720(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f4a6 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f142 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f142 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19614(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f4a6 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f142 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f142 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt14overflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fe46 <_ZGTtNSt14overflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt15underflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19464(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f4c0 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f156 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f156 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19358(%rip), %rsi       # 0x444a7b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f4c0 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43f61e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43f59b <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f156 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f156 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43f644 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43f623 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt15underflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ff46 <_ZGTtNSt15underflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<std::__throw_bad_exception()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	124759(%rip), %rdx      # 0x45e6d0 <vtable for std::bad_exception>
               	leaq	124656(%rip), %rsi      # 0x45e670 <typeinfo for std::bad_exception>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-18559(%rip), %rdx      # 0x43b712 <std::bad_exception::~bad_exception()>
               	callq	0x43bcc5 <__cxa_throw>

<std::__throw_bad_alloc()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	124968(%rip), %rdx      # 0x45e7d0 <vtable for std::bad_alloc>
               	leaq	124937(%rip), %rsi      # 0x45e7b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-16568(%rip), %rdx      # 0x43bf08 <std::bad_alloc::~bad_alloc()>
               	callq	0x43bcc5 <__cxa_throw>

<std::__throw_bad_cast()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	126193(%rip), %rdx      # 0x45ecc8 <vtable for std::bad_cast>
               	leaq	126162(%rip), %rsi      # 0x45ecb0 <typeinfo for std::bad_cast>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9363(%rip), %rdx        # 0x442482 <std::bad_cast::~bad_cast()>
               	callq	0x43bcc5 <__cxa_throw>

<std::__throw_bad_typeid()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	leaq	126210(%rip), %rdx      # 0x45ed08 <vtable for std::bad_typeid>
               	leaq	126179(%rip), %rsi      # 0x45ecf0 <typeinfo for std::bad_typeid>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9368(%rip), %rdx        # 0x4424b6 <std::bad_typeid::~bad_typeid()>
               	callq	0x43bcc5 <__cxa_throw>

<std::__throw_logic_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f3a4 <std::logic_error::logic_error(char const*)>
               	leaq	-4022(%rip), %rdx       # 0x43f092 <std::logic_error::~logic_error()>
               	leaq	125473(%rip), %rsi      # 0x45ea70 <typeinfo for std::logic_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_domain_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f3e4 <std::domain_error::domain_error(char const*)>
               	leaq	-4055(%rip), %rdx       # 0x43f0b8 <std::domain_error::~domain_error()>
               	leaq	125426(%rip), %rsi      # 0x45ea88 <typeinfo for std::domain_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_invalid_argument(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f3fe <std::invalid_argument::invalid_argument(char const*)>
               	leaq	-4106(%rip), %rdx       # 0x43f0cc <std::invalid_argument::~invalid_argument()>
               	leaq	125379(%rip), %rsi      # 0x45eaa0 <typeinfo for std::invalid_argument>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_length_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f418 <std::length_error::length_error(char const*)>
               	leaq	-4157(%rip), %rdx       # 0x43f0e0 <std::length_error::~length_error()>
               	leaq	125332(%rip), %rsi      # 0x45eab8 <typeinfo for std::length_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_out_of_range(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f432 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4208(%rip), %rdx       # 0x43f0f4 <std::out_of_range::~out_of_range()>
               	leaq	125285(%rip), %rsi      # 0x45ead0 <typeinfo for std::out_of_range>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_out_of_range_fmt(char const*, ...)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rsp, %rbp
               	pushq	%r12
               	pushq	%rbx
               	subq	$208, %rsp
               	movq	%rsi, -184(%rbp)
               	movq	%rdx, -176(%rbp)
               	movq	%rcx, -168(%rbp)
               	movq	%r8, -160(%rbp)
               	movq	%r9, -152(%rbp)
               	testb	%al, %al
               	je	0x4401e1 <std::__throw_out_of_range_fmt(char const*, ...)+0x5b>
               	movaps	%xmm0, -144(%rbp)
               	movaps	%xmm1, -128(%rbp)
               	movaps	%xmm2, -112(%rbp)
               	movaps	%xmm3, -96(%rbp)
               	movaps	%xmm4, -80(%rbp)
               	movaps	%xmm5, -64(%rbp)
               	movaps	%xmm6, -48(%rbp)
               	movaps	%xmm7, -32(%rbp)
               	movq	%r10, %rdi
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbp), %rax
               	movl	$8, -216(%rbp)
               	movq	%rax, -208(%rbp)
               	leaq	-192(%rbp), %rax
               	movl	$48, -212(%rbp)
               	movq	%rax, -200(%rbp)
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	leaq	511(%rdx), %rsi
               	movq	%r10, %rdx
               	addq	$534, %rcx              # imm = 0x216
               	andq	$-16, %rcx
               	subq	%rcx, %rsp
               	leaq	-216(%rbp), %rcx
               	leaq	15(%rsp), %rbx
               	andq	$-16, %rbx
               	movq	%rbx, %rdi
               	callq	0x4404d6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>
               	movl	$16, %edi
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %r12
               	callq	0x43f432 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4477(%rip), %rdx       # 0x43f0f4 <std::out_of_range::~out_of_range()>
               	leaq	125016(%rip), %rsi      # 0x45ead0 <typeinfo for std::out_of_range>
               	movq	%r12, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_runtime_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f44c <std::runtime_error::runtime_error(char const*)>
               	leaq	-4528(%rip), %rdx       # 0x43f108 <std::runtime_error::~runtime_error()>
               	leaq	124969(%rip), %rsi      # 0x45eae8 <typeinfo for std::runtime_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_range_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f48c <std::range_error::range_error(char const*)>
               	leaq	-4561(%rip), %rdx       # 0x43f12e <std::range_error::~range_error()>
               	leaq	124922(%rip), %rsi      # 0x45eb00 <typeinfo for std::range_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_overflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f4a6 <std::overflow_error::overflow_error(char const*)>
               	leaq	-4612(%rip), %rdx       # 0x43f142 <std::overflow_error::~overflow_error()>
               	leaq	124875(%rip), %rsi      # 0x45eb18 <typeinfo for std::overflow_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_underflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b64b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f4c0 <std::underflow_error::underflow_error(char const*)>
               	leaq	-4663(%rip), %rdx       # 0x43f156 <std::underflow_error::~underflow_error()>
               	leaq	124828(%rip), %rsi      # 0x45eb30 <typeinfo for std::underflow_error>
               	movq	%rbx, %rdi
               	callq	0x43bcc5 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b68d <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::__sso_string::__sso_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__sso_string::__sso_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43e950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::__sso_string(char const*, unsigned long)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43e9a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__sso_string::__sso_string(std::__sso_string const&)>:
               	jmp	0x43e950 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::operator=(std::__sso_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d0fc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__sso_string::~__sso_string()>:
               	jmp	0x43cf94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__sso_string::__sso_string(std::__sso_string&&)>:
               	jmp	0x43d2c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__sso_string::operator=(std::__sso_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d398 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__throw_insufficient_space(char const*, char const*)>:
               	pushq	%rbp
               	movq	%rdi, %r8
               	movq	%rsi, %rdx
               	movl	$105, %ecx
               	subq	%r8, %rdx
               	leaq	19004(%rip), %rsi       # 0x444e5a <typeinfo name for kotlin::gc::GCSchedulerData+0x1cf1>
               	leaq	128(%rdx), %rax
               	movq	%rsp, %rbp
               	andq	$-16, %rax
               	subq	$112, %rsp
               	subq	%rax, %rsp
               	leaq	-105(%rbp), %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	leaq	15(%rsp), %rax
               	leaq	-105(%rbp), %rsi
               	movl	$26, %ecx
               	andq	$-16, %rax
               	leaq	104(%rax), %r9
               	movq	%rax, %rdi
               	rep		movsl	(%rsi), %es:(%rdi)
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	movq	%rdx, %rcx
               	rep		movsb	(%rsi), %es:(%rdi)
               	movb	$0, 104(%rax,%rdx)
               	movq	%rax, %rdi
               	callq	0x440023 <std::__throw_logic_error(char const*)>

<__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rdx, %r9
               	movl	$10, %r11d
               	movq	%rsp, %rbp
               	pushq	%rbx
               	leaq	19007(%rip), %rbx       # 0x444ec3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d5a>
               	subq	$40, %rsp
               	leaq	15(%rsp), %rdi
               	andq	$-16, %rdi
               	leaq	24(%rdi), %rcx
               	movq	%rcx, %r8
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	decq	%r8
               	divq	%r11
               	movb	(%rbx,%rdx), %dl
               	movb	%dl, (%r8)
               	cmpq	$9, %r9
               	jbe	0x4404b4 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x48>
               	movq	%rax, %r9
               	jmp	0x440498 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x2c>
               	subq	%r8, %rcx
               	orl	$-1, %eax
               	movq	%rcx, %rdx
               	cmpq	%rsi, %rcx
               	ja	0x4404d0 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x64>
               	subq	%rcx, %rdi
               	movl	%edx, %eax
               	leaq	24(%rdi), %rsi
               	movq	%r10, %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	movq	-8(%rbp), %rbx
               	leave
               	retq

<__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>:
               	pushq	%r14
               	leaq	-1(%rdi,%rsi), %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	(%rbp), %al
               	testb	%al, %al
               	je	0x4405db <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x105>
               	cmpq	%r14, %rbx
               	jae	0x4405c7 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cmpb	$37, %al
               	jne	0x4405b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movb	1(%rbp), %al
               	cmpb	$115, %al
               	je	0x440526 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x50>
               	cmpb	$122, %al
               	je	0x440566 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x90>
               	cmpb	$37, %al
               	jne	0x4405b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	incq	%rbp
               	jmp	0x4405b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x44053f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x69>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x44054d <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x77>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	(%rax), %rax
               	movb	(%rax), %dl
               	testb	%dl, %dl
               	je	0x4405d2 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xfc>
               	cmpq	%r14, %rbx
               	je	0x4405c7 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	incq	%rbx
               	incq	%rax
               	movb	%dl, -1(%rbx)
               	jmp	0x440550 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x7a>
               	cmpb	$117, 2(%rbp)
               	jne	0x4405b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x440585 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xaf>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x440593 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xbd>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	%r14, %rsi
               	movq	(%rax), %rdx
               	movq	%rbx, %rdi
               	subq	%rbx, %rsi
               	callq	0x44046c <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>
               	testl	%eax, %eax
               	jle	0x4405c7 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cltq
               	addq	$3, %rbp
               	addq	%rax, %rbx
               	jmp	0x4404ef <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movb	(%rbp), %al
               	incq	%rbx
               	incq	%rbp
               	movb	%al, -1(%rbx)
               	jmp	0x4404ef <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x440408 <__gnu_cxx::__throw_insufficient_space(char const*, char const*)>
               	addq	$2, %rbp
               	jmp	0x4404ef <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rax
               	movb	$0, (%rbx)
               	popq	%rbx
               	subq	%r13, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_data(char*)>:
               	movq	%rsi, %rax
               	movq	%rsi, (%rdi)
               	retq
               	nop

<std::string::_M_rep() const>:
               	movq	(%rdi), %rax
               	subq	$24, %rax
               	retq

<std::string::_M_ibegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_iend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::_M_check(unsigned long, char const*) const>:
               	movq	(%rdi), %rcx
               	movq	%rsi, %rax
               	movq	-24(%rcx), %rcx
               	cmpq	%rsi, %rcx
               	jae	0x440632 <std::string::_M_check(unsigned long, char const*) const+0x24>
               	pushq	%rsi
               	leaq	17954(%rip), %rdi       # 0x444c47 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x440186 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq
               	nop

<std::string::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	addq	%rax, %rsi
               	movq	(%rdi), %rax
               	subq	-24(%rax), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x440656 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const+0x22>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x4400f8 <std::__throw_length_error(char const*)>
               	retq
               	nop

<std::string::_M_limit(unsigned long, unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq

<std::string::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x44067e <std::string::_M_disjunct(char const*) const+0x14>
               	addq	-24(%rdx), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::string::_M_copy(char*, char const*, unsigned long)>:
               	movq	%rdx, %rcx
               	cmpq	$1, %rdx
               	jne	0x44068d <std::string::_M_copy(char*, char const*, unsigned long)+0xe>
               	movb	(%rsi), %dl
               	movb	%dl, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440694 <std::string::_M_copy(char*, char const*, unsigned long)+0x15>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::string::_M_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x4406a0 <std::string::_M_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x4406aa <std::string::_M_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136f0 <memmove@plt>
               	retq

<std::string::_M_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x4406b7 <std::string::_M_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x4406c0 <std::string::_M_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq

<std::string::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	jmp	0x4406c1 <std::string::_S_copy_chars(char*, char*, char*)>

<std::string::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	jmp	0x4406ce <std::string::_S_copy_chars(char*, char const*, char const*)>

<std::string::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x4406f9 <std::string::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq

<std::string::_S_empty_rep()>:
               	leaq	237215(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	237207(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	237185(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::string::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::end() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44072c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::cend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::crbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44072c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::size() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::length() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::max_size() const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	retq
               	nop

<std::string::capacity() const>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rax
               	retq

<std::string::empty() const>:
               	movq	(%rdi), %rax
               	cmpq	$0, -24(%rax)
               	sete	%al
               	retq

<std::string::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::at(unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x4407cf <std::string::at(unsigned long) const+0x1b>
               	pushq	%rax
               	leaq	17590(%rip), %rdi       # 0x444c7e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440186 <std::__throw_out_of_range_fmt(char const*, ...)>
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::back() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	leaq	-1(%rax,%rdx), %rax
               	retq
               	nop

<std::string::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	17775(%rip), %rdx       # 0x444d61 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rsi
               	movq	-24(%rsi), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x44082d <std::string::copy(char*, unsigned long, unsigned long) const+0x47>
               	addq	%rbp, %rsi
               	movq	%rbx, %rdx
               	movq	%r12, %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::string::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rsi
               	testq	%rcx, %rcx
               	jne	0x44086b <std::string::find(char const*, unsigned long, unsigned long) const+0x27>
               	cmpq	%rdx, %rsi
               	jae	0x4408df <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x4408db <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x4408db <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movb	(%r12), %dl
               	movq	%rcx, %rbp
               	leaq	(%r13,%rsi), %rcx
               	movl	$1, %r14d
               	movq	%rcx, 8(%rsp)
               	leaq	(%r13,%rax), %rdi
               	subq	%rax, %rsi
               	subq	%rbp, %r14
               	movb	%dl, 31(%rsp)
               	leaq	31(%rsp), %r15
               	cmpq	%rbp, %rsi
               	jb	0x4408db <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x4408db <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4408cd <std::string::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%rbx, %rax
               	subq	%r13, %rax
               	jmp	0x4408df <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%rbx), %rdi
               	subq	%rdi, %rsi
               	jmp	0x44089b <std::string::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::find(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440844 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440844 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char, unsigned long) const>:
               	pushq	%rbp
               	orq	$-1, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rbx
               	movb	%sil, 12(%rsp)
               	movq	-24(%rbx), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x44094f <std::string::find(char, unsigned long) const+0x39>
               	movq	%rdx, %rdi
               	leaq	12(%rsp), %rdx
               	subq	%rdi, %rsi
               	addq	%rbx, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x44094f <std::string::find(char, unsigned long) const+0x39>
               	subq	%rbx, %rax
               	movq	%rax, %rbp
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	cmpq	%rax, %rcx
               	ja	0x4409ab <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x4409ab <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x4409a7 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x440985 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::rfind(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x44095a <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x44095a <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x440a0e <std::string::rfind(char, unsigned long) const+0x30>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x440a0e <std::string::rfind(char, unsigned long) const+0x30>
               	leaq	-1(%rax), %rdx
               	cmpb	%sil, 1(%rdi,%rdx)
               	je	0x440a0e <std::string::rfind(char, unsigned long) const+0x30>
               	movq	%rdx, %rax
               	jmp	0x4409f8 <std::string::rfind(char, unsigned long) const+0x1a>
               	retq
               	nop

<std::string::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%rbp, %rbp
               	je	0x440a4b <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%r13), %rdx
               	cmpq	-24(%rdx), %rbx
               	jae	0x440a4b <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	addq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x440a4f <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x440a24 <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_first_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440a10 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440a10 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440916 <std::string::find(char, unsigned long) const>
               	nop

<std::string::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x440ad8 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x440ad8 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x440adc <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x440ab8 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x440adc <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::find_last_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440a8c <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440a8c <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x4409de <std::string::rfind(char, unsigned long) const>
               	nop

<std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbp
               	movq	%rdx, %rbx
               	movq	-24(%rbp), %r12
               	cmpq	%r12, %rbx
               	jae	0x440b51 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x37>
               	leaq	(%rbp,%rbx), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440b55 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3b>
               	incq	%rbx
               	jmp	0x440b32 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::find_first_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440b1a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440b1a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rcx
               	movq	%rdx, %rax
               	movq	-24(%rcx), %rdi
               	cmpq	%rdi, %rax
               	jae	0x440ba4 <std::string::find_first_not_of(char, unsigned long) const+0x1a>
               	cmpb	%sil, (%rcx,%rax)
               	jne	0x440ba8 <std::string::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x440b94 <std::string::find_first_not_of(char, unsigned long) const+0xa>
               	orq	$-1, %rax
               	retq
               	nop

<std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x440bf3 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43cef4 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440bf3 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x440bd5 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_last_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440baa <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440baa <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x440c4f <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpb	%sil, (%rdi,%rax)
               	jne	0x440c4f <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x440c40 <std::string::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::string::compare(std::string const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440c83 <std::string::compare(std::string const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4406db <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&) const>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	16599(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r12, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440ce9 <std::string::compare(unsigned long, unsigned long, std::string const&) const+0x61>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x4406db <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16502(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	16460(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%rbp), %rsi
               	movq	8(%rsp), %r9
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	subq	%r13, %rbp
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440d88 <std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const+0x96>
               	addq	$16, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x4406db <std::string::_S_compare(unsigned long, unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r8
               	movq	%rsi, %rdi
               	movq	-24(%r8), %rbp
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440dd9 <std::string::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4406db <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	16253(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r8
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rsi
               	movq	%r12, %rdi
               	movq	-24(%rsi), %rbp
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	leaq	(%rsi,%r13), %rdi
               	movq	%r12, %rsi
               	movq	%rbp, %rdx
               	notq	%rcx
               	leaq	-1(%rcx), %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440e4e <std::string::compare(unsigned long, unsigned long, char const*) const+0x70>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x4406db <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16146(%rip), %rdx       # 0x444d74 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%r8, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r12, %rdi
               	callq	0x43cee7 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440eb6 <std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x60>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x4406db <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::string::_Rep::_S_empty_rep()>:
               	leaq	235221(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::string::_Rep::_M_is_leaked() const>:
               	movl	16(%rdi), %eax
               	shrl	$31, %eax
               	retq
               	nop

<std::string::swap(std::string&)>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x440ecc <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	je	0x440ef7 <std::string::swap(std::string&)+0x23>
               	movq	(%rbx), %rax
               	movl	$0, -8(%rax)
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x440ecc <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	movq	(%rbp), %rax
               	je	0x440f13 <std::string::swap(std::string&)+0x3f>
               	movl	$0, -8(%rax)
               	movq	(%rbx), %rdx
               	movq	%rax, (%rbx)
               	movq	%rdx, (%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::operator=(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440ed4 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440ed4 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_is_shared() const>:
               	movl	16(%rdi), %eax
               	testl	%eax, %eax
               	setg	%al
               	retq
               	nop

<std::string::_Rep::_M_set_leaked()>:
               	movl	$4294967295, 16(%rdi)   # imm = 0xFFFFFFFF
               	retq

<std::string::_Rep::_M_set_sharable()>:
               	movl	$0, 16(%rdi)
               	retq

<std::string::_Rep::_M_set_length_and_sharable(unsigned long)>:
               	cmpq	123009(%rip), %rdi      # 0x45efe0 <write+0x45efe0>
               	je	0x440f70 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)+0x18>
               	movl	$0, 16(%rdi)
               	movq	%rsi, (%rdi)
               	movb	$0, 24(%rdi,%rsi)
               	retq
               	nop

<std::string::_Rep::_M_refdata()>:
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	pushq	%rbx
               	cmpq	%rax, %rdi
               	jbe	0x440f94 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x1c>
               	leaq	16191(%rip), %rdi       # 0x444ece <typeinfo name for kotlin::gc::GCSchedulerData+0x1d65>
               	callq	0x4400f8 <std::__throw_length_error(char const*)>
               	movq	%rdi, %rbx
               	cmpq	%rsi, %rdi
               	jbe	0x440fa7 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x2f>
               	leaq	(%rsi,%rsi), %rax
               	cmpq	%rax, %rdi
               	cmovbq	%rax, %rbx
               	leaq	57(%rbx), %rax
               	cmpq	$4096, %rax             # imm = 0x1000
               	jbe	0x440fd8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	cmpq	%rsi, %rbx
               	jbe	0x440fd8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	andl	$4095, %eax             # imm = 0xFFF
               	addq	$4096, %rbx             # imm = 0x1000
               	subq	%rax, %rbx
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	cmpq	%rax, %rbx
               	cmovaq	%rax, %rbx
               	leaq	25(%rbx), %rdi
               	callq	0x43bb19 <operator new(unsigned long)>
               	movq	%rbx, 8(%rax)
               	movl	$0, 16(%rax)
               	popq	%rbx
               	retq

<std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	testq	%rdi, %rdi
               	je	0x441029 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x3b>
               	movl	%esi, %ebp
               	xorl	%esi, %esi
               	movq	%rdi, %rbx
               	callq	0x440f78 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movsbl	%bpl, %edx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x4406ab <std::string::_M_assign(char*, unsigned long, char)>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x441034 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x46>
               	leaq	234864(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rdx
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	xorl	%edi, %edi
               	callq	0x440fee <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movl	%edx, %esi
               	movsbl	%sil, %esi
               	movq	%rcx, %rdx
               	callq	0x440fee <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)>:
               	movsbl	%sil, %esi
               	jmp	0x440fee <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	nop

<std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
               	jmp	0x43b1e5 <operator delete(void*)>
               	nop

<std::string::_Rep::_M_dispose(std::allocator<char> const&)>:
               	cmpq	122713(%rip), %rdi      # 0x45efe0 <write+0x45efe0>
               	je	0x4410af <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	cmpq	$0, 122663(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x44109d <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x1d>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 16(%rdi)
               	jmp	0x4410a6 <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x26>
               	movl	16(%rdi), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 16(%rdi)
               	testl	%eax, %eax
               	jg	0x4410af <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	jmp	0x44107a <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	subq	$24, %rsp
               	movq	(%rdi), %rdi
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441080 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::string::clear()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	movq	(%rbx), %rdi
               	testb	%al, %al
               	je	0x441103 <std::string::clear()+0x39>
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441080 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	leaq	234662(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rbx)
               	jmp	0x44110e <std::string::clear()+0x44>
               	subq	$24, %rdi
               	xorl	%esi, %esi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	subq	%rdx, %r13
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rbp
               	leaq	(%r13,%rbp), %rax
               	leaq	(%rdx,%rsi), %r13
               	movq	%rax, 8(%rsp)
               	subq	%r13, %rbp
               	cmpq	-16(%rdi), %rax
               	jbe	0x441192 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x7e>
               	leaq	47(%rsp), %rax
               	movq	8(%rsp), %rdi
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rdx
               	movq	-16(%rax), %rsi
               	callq	0x440f78 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	testq	%r14, %r14
               	leaq	24(%rax), %r15
               	je	0x4411c3 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	movq	(%rbx), %rsi
               	movq	%r14, %rdx
               	movq	%r15, %rdi
               	movq	%rax, 24(%rsp)
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	24(%rsp), %rax
               	jmp	0x4411c3 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	subq	$24, %rdi
               	movq	%rdx, %r15
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x44114f <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x3b>
               	testq	%rbp, %rbp
               	je	0x4411f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	cmpq	%r15, %r12
               	je	0x4411f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	movq	(%rbx), %rdi
               	addq	%r14, %r12
               	movq	%rbp, %rdx
               	leaq	(%rdi,%r13), %rsi
               	addq	%r12, %rdi
               	callq	0x440695 <std::string::_M_move(char*, char const*, unsigned long)>
               	jmp	0x4411f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	testq	%rbp, %rbp
               	je	0x4411de <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xca>
               	movq	(%rbx), %rsi
               	leaq	24(%r14,%r12), %rdi
               	movq	%rbp, %rdx
               	addq	%rax, %rdi
               	addq	%r13, %rsi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441080 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r15, (%rbx)
               	movq	(%rbx), %rdi
               	movq	8(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::_M_leak_hard()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	cmpq	122300(%rip), %rdi      # 0x45efe0 <write+0x45efe0>
               	je	0x441247 <std::string::_M_leak_hard()+0x35>
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	je	0x44123d <std::string::_M_leak_hard()+0x2b>
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbx), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nop

<std::string::_M_leak()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	callq	0x440ecc <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	jne	0x441267 <std::string::_M_leak()+0x1d>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x441212 <std::string::_M_leak_hard()>
               	popq	%rbx
               	retq
               	nop

<std::string::begin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44124a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::rend()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44126a <std::string::begin()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::end()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44124a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44128c <std::string::end()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::operator[](unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	callq	0x44124a <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::front()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44124a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::back()>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rbx
               	callq	0x44124a <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	decq	%rbx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::string::at(unsigned long)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x441319 <std::string::at(unsigned long)+0x1f>
               	leaq	14700(%rip), %rdi       # 0x444c7e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x440186 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	%rdi, %rbx
               	movq	%rsi, 8(%rsp)
               	callq	0x44124a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14701(%rip), %rdx       # 0x444cc2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	cmovbeq	%rax, %rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	xorl	%ecx, %ecx
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::pop_back()>:
               	movq	(%rdi), %rax
               	movl	$1, %edx
               	movq	-24(%rax), %rsi
               	decq	%rsi
               	jmp	0x441338 <std::string::erase(unsigned long, unsigned long)>

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	movq	%rsi, %rax
               	subq	%rsi, %rdx
               	je	0x4413e8 <std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)+0x30>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rcx
               	subq	(%rdi), %rax
               	xorl	%ecx, %ecx
               	movq	%rax, %rsi
               	movq	%rax, %rbx
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rsi
               	popq	%rbx
               	popq	%rbp
               	retq
               	retq
               	nop

<std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	14555(%rip), %rcx       # 0x444cd6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%r12, %rdx
               	movq	%rsi, %rbp
               	movq	%r13, %rsi
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movl	%r8d, 12(%rsp)
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rcx
               	movq	%r13, %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	testq	%r12, %r12
               	movl	12(%rsp), %r8d
               	je	0x441444 <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x5a>
               	movq	(%rbx), %rdi
               	movsbl	%r8b, %edx
               	movq	%r12, %rsi
               	addq	%rbp, %rdi
               	callq	0x4406ab <std::string::_M_assign(char*, unsigned long, char)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::assign(unsigned long, char)>:
               	movq	(%rdi), %rax
               	movq	%rsi, %rcx
               	movsbl	%dl, %r8d
               	xorl	%esi, %esi
               	movq	-24(%rax), %rax
               	movq	%rax, %rdx
               	jmp	0x4413ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::string::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x441452 <std::string::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::string::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	14433(%rip), %rdx       # 0x444cf3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x4413ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x4413ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	movq	-24(%rax), %rax
               	movl	%r8d, 4(%rsp)
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14328(%rip), %rdx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x4413ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x4413ea <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	movq	%rsi, %rdx
               	jmp	0x44153c <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>
               	nop

<std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rcx, %r12
               	movq	%r8, %rcx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	%r8, 8(%rsp)
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	8(%rsp), %r8
               	testq	%r8, %r8
               	je	0x441596 <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)+0x3a>
               	addq	(%rbp), %rbx
               	movq	%r8, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	addq	$16, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::assign(char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	14217(%rip), %rcx       # 0x444d37 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	movq	-24(%rax), %rsi
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x44066a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x4415ec <std::string::assign(char const*, unsigned long)+0x4a>
               	movq	(%rbx), %rax
               	movq	%rbp, %r8
               	movq	%r12, %rcx
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	popq	%rbx
               	popq	%rbp
               	movq	-24(%rax), %rdx
               	popq	%r12
               	jmp	0x44155c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4415d1 <std::string::assign(char const*, unsigned long)+0x2f>
               	movq	(%rbx), %rdi
               	movq	%r12, %rax
               	subq	%rdi, %rax
               	cmpq	%rax, %rbp
               	ja	0x441617 <std::string::assign(char const*, unsigned long)+0x75>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x441627 <std::string::assign(char const*, unsigned long)+0x85>
               	testq	%rax, %rax
               	je	0x441627 <std::string::assign(char const*, unsigned long)+0x85>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440695 <std::string::_M_move(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4415a2 <std::string::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %rax
               	subq	%rdx, %rax
               	leaq	14029(%rip), %rdx       # 0x444d37 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rcx
               	movq	%rcx, %rbp
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x4415a2 <std::string::assign(char const*, unsigned long)>

<std::string::assign(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x4415a2 <std::string::assign(char const*, unsigned long)>

<std::string::operator=(char const*)>:
               	jmp	0x44168c <std::string::assign(char const*)>
               	nop

<std::string::assign(std::initializer_list<char>)>:
               	jmp	0x4415a2 <std::string::assign(char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, char const*, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	13871(%rip), %rdx       # 0x444cf3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	leaq	13836(%rip), %rcx       # 0x444cf3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x44066a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441716 <std::string::insert(unsigned long, char const*, unsigned long)+0x5e>
               	popq	%rbx
               	movq	%rbp, %r8
               	movq	%r14, %rcx
               	popq	%rbp
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	xorl	%edx, %edx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x44155c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%r12), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4416fb <std::string::insert(unsigned long, char const*, unsigned long)+0x43>
               	xorl	%edx, %edx
               	movq	%r13, %rsi
               	movq	%rbp, %rcx
               	movq	%r12, %rdi
               	subq	(%r12), %r14
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%r12), %rbx
               	movq	%rbp, %rdx
               	leaq	(%rbx,%r14), %rsi
               	addq	%r13, %rbx
               	leaq	(%rsi,%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x44175a <std::string::insert(unsigned long, char const*, unsigned long)+0xa2>
               	cmpq	%rbx, %rsi
               	jb	0x44175f <std::string::insert(unsigned long, char const*, unsigned long)+0xa7>
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	jmp	0x44177b <std::string::insert(unsigned long, char const*, unsigned long)+0xc3>
               	subq	%r14, %r13
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	%rbp, %rdx
               	leaq	(%rbx,%rbp), %rsi
               	leaq	(%rbx,%r13), %rdi
               	subq	%r13, %rdx
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x4416b8 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rdx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdx), %rbx
               	leaq	13634(%rip), %rdx       # 0x444cf3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	movq	-24(%rbx), %rax
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, %rbp
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	popq	%r8
               	movq	%rbp, %rcx
               	movq	%r13, %rsi
               	leaq	(%rbx,%rax), %rdx
               	movq	%r12, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x4416b8 <std::string::insert(unsigned long, char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, std::string const&)>:
               	movq	(%rdx), %rax
               	xorl	%ecx, %ecx
               	movq	-24(%rax), %r8
               	jmp	0x441794 <std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>

<std::string::insert(unsigned long, char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x4416b8 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::_Rep::_M_refcopy()>:
               	cmpq	120781(%rip), %rdi      # 0x45efe0 <write+0x45efe0>
               	je	0x441828 <std::string::_Rep::_M_refcopy()+0x1c>
               	cmpq	$0, 120731(%rip)        # 0x45efb8 <write+0x45efb8>
               	je	0x441825 <std::string::_Rep::_M_refcopy()+0x19>
               	lock
               	incl	16(%rdi)
               	jmp	0x441828 <std::string::_Rep::_M_refcopy()+0x1c>
               	incl	16(%rdi)
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	addq	%rdx, %rdi
               	movq	%rsi, %rdx
               	movq	8(%rbx), %rsi
               	callq	0x440f78 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	(%rbx), %rdx
               	movq	%rax, %r12
               	leaq	24(%rax), %rbp
               	testq	%rdx, %rdx
               	je	0x441862 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)+0x34>
               	leaq	24(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::string::reserve(unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdi
               	cmpq	-16(%rdi), %rsi
               	je	0x4418cc <std::string::reserve(unsigned long)+0x56>
               	movq	(%rbp), %rdi
               	movq	%rbx, %rdx
               	movq	-24(%rdi), %rax
               	cmpq	%rax, %rbx
               	leaq	15(%rsp), %rbx
               	cmovbq	%rax, %rdx
               	movq	%rbx, %rsi
               	subq	$24, %rdi
               	subq	%rax, %rdx
               	callq	0x44182e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	movq	%rbx, %rsi
               	movq	%rax, %r12
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441080 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbp)
               	jmp	0x4418d9 <std::string::reserve(unsigned long)+0x63>
               	subq	$24, %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x44188d <std::string::reserve(unsigned long)+0x17>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::shrink_to_fit()>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rdx
               	cmpq	%rdx, -24(%rax)
               	jae	0x441907 <std::string::shrink_to_fit()+0x25>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43bb77 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43bbd5 <__cxa_end_catch>
               	retq

<std::string::append(std::string const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rsi), %rax
               	movq	-24(%rax), %r12
               	testq	%r12, %r12
               	je	0x44196d <std::string::append(std::string const&)+0x65>
               	movq	(%rdi), %rdi
               	movq	%rsi, %r13
               	movq	-24(%rdi), %rbp
               	addq	%r12, %rbp
               	cmpq	-16(%rdi), %rbp
               	jbe	0x44193e <std::string::append(std::string const&)+0x36>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	jmp	0x44194b <std::string::append(std::string const&)+0x43>
               	subq	$24, %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441931 <std::string::append(std::string const&)+0x29>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	%r12, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::operator+=(std::string const&)>:
               	jmp	0x441908 <std::string::append(std::string const&)>
               	nop

<std::string::append(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	13240(%rip), %rdx       # 0x444d4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	pushq	%rbp
               	movq	%r12, %rsi
               	movq	%rdi, %rbp
               	movq	%r14, %rdi
               	pushq	%rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%r14), %rax
               	movq	-24(%rax), %rbx
               	subq	%r12, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x441a0b <std::string::append(std::string const&, unsigned long, unsigned long)+0x8d>
               	movq	(%rbp), %rdi
               	movq	-24(%rdi), %r13
               	addq	%rbx, %r13
               	cmpq	-16(%rdi), %r13
               	jbe	0x4419d8 <std::string::append(std::string const&, unsigned long, unsigned long)+0x5a>
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	jmp	0x4419e5 <std::string::append(std::string const&, unsigned long, unsigned long)+0x67>
               	subq	$24, %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4419cb <std::string::append(std::string const&, unsigned long, unsigned long)+0x4d>
               	movq	(%rbp), %rdi
               	movq	(%r14), %rsi
               	movq	%rbx, %rdx
               	addq	%r12, %rsi
               	addq	-24(%rdi), %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%r13, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rbx
               	movq	%rbp, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::append(char const*, unsigned long)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rdx, %rdx
               	je	0x441aac <std::string::append(char const*, unsigned long)+0x94>
               	movq	%rsi, %rbp
               	leaq	13079(%rip), %rcx       # 0x444d4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	xorl	%esi, %esi
               	movq	%rdx, %r13
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%r13, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x441a6b <std::string::append(char const*, unsigned long)+0x53>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x44066a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441a7a <std::string::append(char const*, unsigned long)+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	jmp	0x441a8b <std::string::append(char const*, unsigned long)+0x73>
               	subq	$24, %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441a4f <std::string::append(char const*, unsigned long)+0x37>
               	jmp	0x441a8b <std::string::append(char const*, unsigned long)+0x73>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	subq	(%rbx), %rbp
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	addq	(%rbx), %rbp
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	%r13, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::operator+=(std::initializer_list<char>)>:
               	jmp	0x441a18 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x441a18 <std::string::append(char const*, unsigned long)>

<std::string::operator+=(char const*)>:
               	jmp	0x441abe <std::string::append(char const*)>
               	nop

<std::string::append(std::initializer_list<char>)>:
               	jmp	0x441a18 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(unsigned long, char)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rsi, %rsi
               	je	0x441b5c <std::string::append(unsigned long, char)+0x72>
               	movq	%rsi, %rbp
               	movsbl	%dl, %r13d
               	leaq	12869(%rip), %rcx       # 0x444d4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %rdx
               	xorl	%esi, %esi
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%rbp, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x441b2e <std::string::append(unsigned long, char)+0x44>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	jmp	0x441b3b <std::string::append(unsigned long, char)+0x51>
               	subq	$24, %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441b21 <std::string::append(unsigned long, char)+0x37>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movl	%r13d, %edx
               	addq	-24(%rdi), %rdi
               	callq	0x4406ab <std::string::_M_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long, char)>:
               	pushq	%r13
               	leaq	13173(%rip), %rcx       # 0x444ee6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d7d>
               	pushq	%r12
               	movl	%edx, %r12d
               	movq	%rsi, %rdx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	movq	(%rdi), %rax
               	movq	-24(%rax), %r13
               	movq	%r13, %rsi
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	cmpq	%r13, %rbx
               	jbe	0x441bb1 <std::string::resize(unsigned long, char)+0x49>
               	subq	%r13, %rbx
               	popq	%r8
               	movsbl	%r12b, %edx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441aea <std::string::append(unsigned long, char)>
               	jae	0x441bc9 <std::string::resize(unsigned long, char)+0x61>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	orq	$-1, %rdx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441338 <std::string::erase(unsigned long, unsigned long)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x441b68 <std::string::resize(unsigned long, char)>
               	nop

<std::string::push_back(char)>:
               	pushq	%r12
               	movl	%esi, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rax
               	leaq	1(%rax), %rbx
               	cmpq	-16(%rdi), %rbx
               	jbe	0x441c02 <std::string::push_back(char)+0x28>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	jmp	0x441c0f <std::string::push_back(char)+0x35>
               	subq	$24, %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441bf5 <std::string::push_back(char)+0x1b>
               	movq	(%rbp), %rax
               	movq	%rbx, %rsi
               	movq	-24(%rax), %rdx
               	movb	%r12b, (%rax,%rdx)
               	movq	(%rbp), %rdi
               	popq	%rbx
               	popq	%rbp
               	subq	$24, %rdi
               	popq	%r12
               	jmp	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	nop

<std::string::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x441bda <std::string::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rsi, 8(%rsp)
               	callq	0x440ecc <std::string::_Rep::_M_is_leaked() const>
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	jne	0x441c6a <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)+0x28>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x44180c <std::string::_Rep::_M_refcopy()>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	jmp	0x44182e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	leaq	14(%rsp), %rax
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rax, %rsi
               	callq	0x441c42 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::assign(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	cmpq	%rdi, (%rbx)
               	je	0x441ce2 <std::string::assign(std::string const&)+0x3e>
               	leaq	14(%rsp), %rbp
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rbp, %rsi
               	callq	0x441c42 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rbp, %rsi
               	movq	%rax, %r12
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441080 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbx)
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::string const&)>:
               	jmp	0x441ca4 <std::string::assign(std::string const&)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	231563(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	movq	%rbp, %rdi
               	addq	$24, %rax
               	movq	%rax, (%rbp)
               	movq	(%r12), %rax
               	movq	-24(%rax), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	addq	%rbx, %rsi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441a18 <std::string::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x441908 <std::string::append(std::string const&)>
               	popq	%rdx
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	231464(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	addq	$24, %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	(%rdx), %rax
               	movq	-24(%rax), %rsi
               	incq	%rsi
               	callq	0x441876 <std::string::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x441aea <std::string::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441908 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x441c7a <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441908 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rdi, %rsi
               	je	0x441e49 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x45>
               	movq	%rsi, %r14
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x440f78 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x4406c1 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x441e54 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x50>
               	leaq	231248(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x441e04 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x441ece <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x441ec2 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x440f78 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x4406c1 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x441ed9 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	12338(%rip), %rdi       # 0x444efb <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x440023 <std::__throw_logic_error(char const*)>
               	leaq	231115(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	%r8, 8(%rsp)
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11951(%rip), %rdx       # 0x444dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	%rbp, %rbx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	movq	%r8, %rdx
               	callq	0x441e78 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x441e78 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	leaq	11854(%rip), %rdx       # 0x444dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %r12
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	addq	%rbx, %r12
               	leaq	(%rbx,%rax), %rdi
               	movq	%r12, %rsi
               	callq	0x441e78 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbp)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11770(%rip), %rdx       # 0x444dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	addq	%rbp, %rbx
               	leaq	15(%rsp), %rdx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	callq	0x441e78 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	11738(%rip), %rdx       # 0x444dde <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x441fa0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x44208c <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x442080 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x440f78 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x4406ce <std::string::_S_copy_chars(char*, char const*, char const*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x440f58 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442097 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	11892(%rip), %rdi       # 0x444efb <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x440023 <std::__throw_logic_error(char const*)>
               	leaq	230669(%rip), %rax      # 0x47a5a0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	movq	%rsi, %r8
               	pushq	%rbx
               	orq	$-1, %rsi
               	movq	%rdi, %rbx
               	testq	%r8, %r8
               	je	0x4420c9 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x25>
               	xorl	%eax, %eax
               	movq	%rsi, %rcx
               	movq	%r8, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%r8,%rax), %rsi
               	movq	%r8, %rdi
               	callq	0x442036 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442036 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x442036 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	11252(%rip), %rdx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r14
               	movq	%r8, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	subq	$24, %rsp
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	movq	%r14, %rdx
               	leaq	11206(%rip), %rcx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	movq	-24(%rax), %r12
               	subq	%r13, %r12
               	cmpq	%r15, %r12
               	cmovaq	%r15, %r12
               	movq	%r12, %rsi
               	callq	0x440634 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x44066a <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x442183 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x7b>
               	movq	%rbp, %rdi
               	movq	%r14, %r8
               	movq	%rbx, %rcx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	callq	0x44155c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%rax, %rbp
               	jmp	0x442234 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x440f3e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442167 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	(%rbp), %rax
               	leaq	(%rbx,%r14), %rsi
               	leaq	(%rax,%r13), %rcx
               	cmpq	%rcx, %rsi
               	jbe	0x4421ed <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	(%r13,%r12), %rdx
               	addq	%rax, %rdx
               	cmpq	%rdx, %rbx
               	jae	0x4421ed <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	8(%rsp), %r15
               	leaq	7(%rsp), %rcx
               	movq	%r14, %rdx
               	movq	%rbx, %rsi
               	movq	%r15, %rdi
               	callq	0x4420ee <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	movq	8(%rsp), %rcx
               	movq	%r14, %r8
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x44155c <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%r15, %rdi
               	movq	%rax, %rbp
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	jmp	0x442234 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	subq	%rax, %rbx
               	cmpq	%rcx, %rsi
               	jbe	0x4421fb <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xf3>
               	addq	%r14, %rbx
               	subq	%r12, %rbx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movq	%r14, %rcx
               	callq	0x441114 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rdi
               	movq	%r14, %rdx
               	leaq	(%rdi,%rbx), %rsi
               	addq	%r13, %rdi
               	callq	0x44067f <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x442234 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	%rax, %rbx
               	movq	%r15, %rdi
               	callq	0x4410b0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::replace(unsigned long, unsigned long, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%r9, %r14
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	10917(%rip), %rdx       # 0x444d08 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%r8, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rcx, %rdi
               	pushq	%rbx
               	movq	(%rcx), %rbx
               	movq	-24(%rbx), %rax
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %r14
               	callq	0x44060e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rcx
               	movq	%r14, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x4422ca <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x4422ca <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	addq	%rcx, %r8
               	jmp	0x442314 <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442108 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x442036 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<bool __gnu_cxx::operator==<char*, std::string>(__gnu_cxx::__normal_iterator<char*, std::string> const&, __gnu_cxx::__normal_iterator<char*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::random_device::_M_init(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	11178(%rip), %rsi       # 0x444f32 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x440d96 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x4423c0 <std::random_device::_M_init(std::string const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x4423f2 <std::random_device::_M_init(std::string const&)+0x7e>
               	testl	%eax, %eax
               	je	0x4423f2 <std::random_device::_M_init(std::string const&)+0x7e>
               	movl	$1, %eax
               	leaq	11127(%rip), %r12       # 0x444f25 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x4423f9 <std::random_device::_M_init(std::string const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x442411 <std::random_device::_M_init(std::string const&)+0x9d>
               	leaq	11102(%rip), %rsi       # 0x444f25 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x440d96 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4423f9 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	11104(%rip), %rsi       # 0x444f3a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x440d96 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4423f9 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	11097(%rip), %rdi       # 0x444f46 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440293 <std::__throw_runtime_error(char const*)>
               	leaq	11052(%rip), %r12       # 0x444f25 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	11127(%rip), %rsi       # 0x444f77 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c50 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x4423e6 <std::random_device::_M_init(std::string const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_init_pretr1(std::string const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	11093(%rip), %rsi       # 0x444f7a <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x440d96 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442462 <std::random_device::_M_init_pretr1(std::string const&)+0x4c>
               	movq	(%rbx), %rbx
               	xorl	%edx, %edx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413c60 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	je	0x442456 <std::random_device::_M_init_pretr1(std::string const&)+0x40>
               	movq	8(%rsp), %rdx
               	cmpb	$0, (%rdx)
               	je	0x442467 <std::random_device::_M_init_pretr1(std::string const&)+0x51>
               	leaq	10985(%rip), %rdi       # 0x444f46 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440293 <std::__throw_runtime_error(char const*)>
               	movl	$5489, %eax             # imm = 0x1571
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	0x44268c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::bad_cast::what() const>:
               	leaq	11009(%rip), %rax       # 0x444f82 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e19>
               	retq

<std::bad_cast::~bad_cast()>:
               	leaq	116799(%rip), %rax      # 0x45ecc8 <vtable for std::bad_cast>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::bad_cast::~bad_cast()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x442482 <std::bad_cast::~bad_cast()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>
               	nop

<std::bad_typeid::what() const>:
               	leaq	10971(%rip), %rax       # 0x444f90 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e27>
               	retq

<std::bad_typeid::~bad_typeid()>:
               	leaq	116811(%rip), %rax      # 0x45ed08 <vtable for std::bad_typeid>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43b710 <std::exception::~exception()>
               	nop

<std::bad_typeid::~bad_typeid()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4424b6 <std::bad_typeid::~bad_typeid()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43bb14 <operator delete(void*, unsigned long)>

<std::(anonymous namespace)::__x86_rdrand()>:
               	subq	$24, %rsp
               	movl	$100, %edx
               	movl	$1, %ecx
               	rdrandl	%eax
               	movl	%eax, 12(%rsp)
               	cmovbl	%ecx, %eax
               	testl	%eax, %eax
               	jne	0x44250d <std::(anonymous namespace)::__x86_rdrand()+0x2c>
               	decl	%edx
               	jne	0x4424ef <std::(anonymous namespace)::__x86_rdrand()+0xe>
               	leaq	10904(%rip), %rdi       # 0x444fa0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e37>
               	callq	0x440293 <std::__throw_runtime_error(char const*)>
               	movl	12(%rsp), %eax
               	addq	$24, %rsp
               	retq

<std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	10760(%rip), %rsi       # 0x444f32 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x43e5ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x442562 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x442594 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	testl	%eax, %eax
               	je	0x442594 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	movl	$1, %eax
               	leaq	10709(%rip), %r12       # 0x444f25 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x44259b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x4425b3 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
               	leaq	10684(%rip), %rsi       # 0x444f25 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x43e5ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x44259b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10686(%rip), %rsi       # 0x444f3a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x43e5ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x44259b <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10679(%rip), %rdi       # 0x444f46 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x440293 <std::__throw_runtime_error(char const*)>
               	leaq	10634(%rip), %r12       # 0x444f25 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10709(%rip), %rsi       # 0x444f77 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c50 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x442588 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_fini()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4425c5 <std::random_device::_M_fini()+0xd>
               	jmp	0x413c70 <fclose@plt>
               	retq

<std::random_device::_M_getval()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpq	$0, (%rdi)
               	jne	0x4425db <std::random_device::_M_getval()+0x15>
               	callq	0x4424e1 <std::(anonymous namespace)::__x86_rdrand()>
               	jmp	0x44262c <std::random_device::_M_getval()+0x66>
               	movq	%rdi, %r12
               	movl	$4, %ebx
               	leaq	12(%rsp), %rbp
               	movq	(%r12), %rdi
               	callq	0x413c80 <fileno@plt>
               	movq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movl	%eax, %edi
               	callq	0x413c90 <read@plt>
               	testl	%eax, %eax
               	jle	0x442612 <std::random_device::_M_getval()+0x4c>
               	cltq
               	addq	%rax, %rbp
               	subq	%rax, %rbx
               	jne	0x4425e8 <std::random_device::_M_getval()+0x22>
               	movl	12(%rsp), %eax
               	jmp	0x44262c <std::random_device::_M_getval()+0x66>
               	incl	%eax
               	jne	0x442620 <std::random_device::_M_getval()+0x5a>
               	callq	0x413870 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x4425e8 <std::random_device::_M_getval()+0x22>
               	leaq	10651(%rip), %rdi       # 0x444fc2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e59>
               	callq	0x440293 <std::__throw_runtime_error(char const*)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::random_device::_M_getentropy() const>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x442687 <std::random_device::_M_getentropy() const+0x51>
               	subq	$24, %rsp
               	callq	0x413c80 <fileno@plt>
               	testl	%eax, %eax
               	jns	0x442650 <std::random_device::_M_getentropy() const+0x1a>
               	xorps	%xmm0, %xmm0
               	jmp	0x442682 <std::random_device::_M_getentropy() const+0x4c>
               	movl	%eax, %edi
               	leaq	12(%rsp), %rdx
               	xorl	%eax, %eax
               	movl	$2147766784, %esi       # imm = 0x80045200
               	callq	0x413ca0 <ioctl@plt>
               	testl	%eax, %eax
               	js	0x44264b <std::random_device::_M_getentropy() const+0x15>
               	movl	12(%rsp), %eax
               	testl	%eax, %eax
               	js	0x44264b <std::random_device::_M_getentropy() const+0x15>
               	cmpl	$32, %eax
               	jle	0x44267c <std::random_device::_M_getentropy() const+0x46>
               	movl	$32, 12(%rsp)
               	cvtsi2sdl	12(%rsp), %xmm0
               	addq	$24, %rsp
               	retq
               	xorps	%xmm0, %xmm0
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>:
               	andl	$-1, %esi
               	movl	$1, %edx
               	movq	%rsi, (%rdi)
               	movq	-8(%rdi,%rdx,8), %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	$1812433253, %rax, %rax # imm = 0x6C078965
               	addl	%edx, %eax
               	movq	%rax, (%rdi,%rdx,8)
               	incq	%rdx
               	cmpq	$624, %rdx              # imm = 0x270
               	jne	0x442697 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0xb>
               	movq	$624, 4992(%rdi)        # imm = 0x270
               	retq
               	nop

<std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10399(%rip), %rsi       # 0x444f7a <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x43e5ca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	movl	$5489, %esi             # imm = 0x1571
               	testl	%eax, %eax
               	je	0x442720 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	movq	(%rbx), %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x413c60 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	movq	%rax, %rsi
               	je	0x442714 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
               	movq	8(%rsp), %rax
               	cmpb	$0, (%rax)
               	je	0x442720 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	leaq	10439(%rip), %rdi       # 0x444fe2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e79>
               	callq	0x440293 <std::__throw_runtime_error(char const*)>
               	movq	%rbp, %rdi
               	callq	0x44268c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>:
               	jmp	0x44268c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::min()>:
               	xorl	%eax, %eax
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::max()>:
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>:
               	xorl	%eax, %eax
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	3168(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442776 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x38>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$227, %rax
               	jne	0x442745 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7>
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	-1824(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x4427bc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7e>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$623, %rax              # imm = 0x26F
               	jne	0x44278b <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x4d>
               	movq	4984(%rdi), %rax
               	movq	(%rdi), %rdx
               	andq	$-2147483648, %rax      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	%rdx
               	xorq	3168(%rdi), %rdx
               	andl	$1, %eax
               	je	0x4427fc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0xbe>
               	movl	$2567483615, %eax       # imm = 0x9908B0DF
               	movq	$0, 4992(%rdi)
               	xorq	%rdx, %rax
               	movq	%rax, 4984(%rdi)
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)>:
               	pushq	%r12
               	movl	$624, %r12d             # imm = 0x270
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	4992(%rbp), %rax
               	movq	%r12, %rdx
               	subq	%rax, %rdx
               	cmpq	%rbx, %rdx
               	jae	0x442846 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x34>
               	movq	%rbp, %rdi
               	leaq	-624(%rax,%rbx), %rbx
               	callq	0x44273e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	jmp	0x442822 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x10>
               	addq	%rbx, %rax
               	popq	%rbx
               	movq	%rax, 4992(%rbp)
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>:
               	cmpq	$623, 4992(%rdi)        # imm = 0x26F
               	pushq	%rbx
               	movq	%rdi, %rbx
               	jbe	0x44286c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()+0x16>
               	callq	0x44273e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	movq	4992(%rbx), %rax
               	leaq	1(%rax), %rdx
               	movq	(%rbx,%rax,8), %rax
               	movq	%rdx, 4992(%rbx)
               	popq	%rbx
               	movq	%rax, %rcx
               	shrq	$11, %rcx
               	movl	%ecx, %edx
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$7, %rax
               	andl	$2636928640, %eax       # imm = 0x9D2C5680
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$15, %rax
               	andl	$4022730752, %eax       # imm = 0xEFC60000
               	xorq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	$18, %rdx
               	xorq	%rdx, %rax
               	retq

<std::random_device::_M_getval_pretr1()>:
               	pushq	%rax
               	callq	0x442856 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
               	popq	%rdx
               	retq
               	nop
		...
               	addb	%al, (%rax)

<__libc_csu_init>:
               	pushq	%r15
               	movq	%rdx, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movl	%edi, %r13d
               	pushq	%r12
               	leaq	115784(%rip), %r12      # 0x45ed30 <__init_array_start>
               	pushq	%rbp
               	leaq	115848(%rip), %rbp      # 0x45ed78 <_DYNAMIC>
               	pushq	%rbx
               	subq	%r12, %rbp
               	subq	$8, %rsp
               	callq	0x413680 <_init>
               	sarq	$3, %rbp
               	je	0x44291e <__libc_csu_init+0x4e>
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	movq	%r15, %rdx
               	movq	%r14, %rsi
               	movl	%r13d, %edi
               	callq	*(%r12,%rbx,8)
               	addq	$1, %rbx
               	cmpq	%rbx, %rbp
               	jne	0x442908 <__libc_csu_init+0x38>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<__libc_csu_fini>:
               	retq
               	nopw	%cs:(%rax,%rax)

<atexit>:
               	leaq	117185(%rip), %rax      # 0x45f308 <__dso_handle>
               	xorl	%edx, %edx
               	testq	%rax, %rax
               	je	0x442951 <atexit+0x11>
               	movq	(%rax), %rdx
               	xorl	%esi, %esi
               	jmp	0x413b50 <__cxa_atexit@plt>

<__do_global_ctors_aux>:
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%rbx
               	movl	$4549640, %ebx          # imm = 0x456C08
               	pushq	%rdx
               	movq	(%rbx), %rax
               	cmpq	$-1, %rax
               	je	0x442974 <__do_global_ctors_aux+0x1c>
               	callq	*%rax
               	subq	$8, %rbx
               	jmp	0x442963 <__do_global_ctors_aux+0xb>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

Disassembly of section .fini:

<_fini>:
               	subq	$8, %rsp
               	callq	0x4151fa <__do_global_dtors_aux>
               	addq	$8, %rsp
               	retq
