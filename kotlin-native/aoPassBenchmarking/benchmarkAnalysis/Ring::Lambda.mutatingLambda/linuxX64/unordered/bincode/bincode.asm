
../../benchmarkAnalysis/Ring::Lambda.mutatingLambda/linuxX64/unordered/main.kexe:	file format elf64-x86-64

Disassembly of section .init:

<_init>:
               	subq	$8, %rsp
               	movq	305509(%rip), %rax      # 0x45dfb0 <write+0x45dfb0>
               	testq	%rax, %rax
               	je	0x413655 <_init+0x15>
               	callq	0x413690 <__gmon_start__@plt>
               	callq	0x4152d1 <frame_dummy>
               	callq	0x442eb8 <__do_global_ctors_aux>
               	addq	$8, %rsp
               	retq

Disassembly of section .plt:

<.plt>:
               	pushq	305530(%rip)            # 0x45dff0 <_GLOBAL_OFFSET_TABLE_+0x8>
               	jmpq	*305532(%rip)           # 0x45dff8 <_GLOBAL_OFFSET_TABLE_+0x10>
               	nop
               	nop
               	nop
               	nop

<__libc_start_main@plt>:
               	jmpq	*305530(%rip)           # 0x45e000 <_GLOBAL_OFFSET_TABLE_+0x18>
               	pushq	$0
               	jmp	0x413670 <.plt>

<__gmon_start__@plt>:
               	jmpq	*305522(%rip)           # 0x45e008 <_GLOBAL_OFFSET_TABLE_+0x20>
               	pushq	$1
               	jmp	0x413670 <.plt>

<__tls_get_addr@plt>:
               	jmpq	*305514(%rip)           # 0x45e010 <_GLOBAL_OFFSET_TABLE_+0x28>
               	pushq	$2
               	jmp	0x413670 <.plt>

<memmove@plt>:
               	jmpq	*305506(%rip)           # 0x45e018 <_GLOBAL_OFFSET_TABLE_+0x30>
               	pushq	$3
               	jmp	0x413670 <.plt>

<calloc@plt>:
               	jmpq	*305498(%rip)           # 0x45e020 <_GLOBAL_OFFSET_TABLE_+0x38>
               	pushq	$4
               	jmp	0x413670 <.plt>

<free@plt>:
               	jmpq	*305490(%rip)           # 0x45e028 <_GLOBAL_OFFSET_TABLE_+0x40>
               	pushq	$5
               	jmp	0x413670 <.plt>

<strlen@plt>:
               	jmpq	*305482(%rip)           # 0x45e030 <_GLOBAL_OFFSET_TABLE_+0x48>
               	pushq	$6
               	jmp	0x413670 <.plt>

<memcpy@plt>:
               	jmpq	*305474(%rip)           # 0x45e038 <_GLOBAL_OFFSET_TABLE_+0x50>
               	pushq	$7
               	jmp	0x413670 <.plt>

<_Unwind_Resume@plt>:
               	jmpq	*305466(%rip)           # 0x45e040 <_GLOBAL_OFFSET_TABLE_+0x58>
               	pushq	$8
               	jmp	0x413670 <.plt>

<memset@plt>:
               	jmpq	*305458(%rip)           # 0x45e048 <_GLOBAL_OFFSET_TABLE_+0x60>
               	pushq	$9
               	jmp	0x413670 <.plt>

<sched_yield@plt>:
               	jmpq	*305450(%rip)           # 0x45e050 <_GLOBAL_OFFSET_TABLE_+0x68>
               	pushq	$10
               	jmp	0x413670 <.plt>

<pthread_mutex_lock@plt>:
               	jmpq	*305442(%rip)           # 0x45e058 <_GLOBAL_OFFSET_TABLE_+0x70>
               	pushq	$11
               	jmp	0x413670 <.plt>

<pthread_cond_timedwait@plt>:
               	jmpq	*305434(%rip)           # 0x45e060 <_GLOBAL_OFFSET_TABLE_+0x78>
               	pushq	$12
               	jmp	0x413670 <.plt>

<pthread_mutex_unlock@plt>:
               	jmpq	*305426(%rip)           # 0x45e068 <_GLOBAL_OFFSET_TABLE_+0x80>
               	pushq	$13
               	jmp	0x413670 <.plt>

<pthread_self@plt>:
               	jmpq	*305418(%rip)           # 0x45e070 <_GLOBAL_OFFSET_TABLE_+0x88>
               	pushq	$14
               	jmp	0x413670 <.plt>

<pthread_setname_np@plt>:
               	jmpq	*305410(%rip)           # 0x45e078 <_GLOBAL_OFFSET_TABLE_+0x90>
               	pushq	$15
               	jmp	0x413670 <.plt>

<memcmp@plt>:
               	jmpq	*305402(%rip)           # 0x45e080 <_GLOBAL_OFFSET_TABLE_+0x98>
               	pushq	$16
               	jmp	0x413670 <.plt>

<fputs@plt>:
               	jmpq	*305394(%rip)           # 0x45e088 <_GLOBAL_OFFSET_TABLE_+0xa0>
               	pushq	$17
               	jmp	0x413670 <.plt>

<clock_gettime@plt>:
               	jmpq	*305386(%rip)           # 0x45e090 <_GLOBAL_OFFSET_TABLE_+0xa8>
               	pushq	$18
               	jmp	0x413670 <.plt>

<syscall@plt>:
               	jmpq	*305378(%rip)           # 0x45e098 <_GLOBAL_OFFSET_TABLE_+0xb0>
               	pushq	$19
               	jmp	0x413670 <.plt>

<getrusage@plt>:
               	jmpq	*305370(%rip)           # 0x45e0a0 <_GLOBAL_OFFSET_TABLE_+0xb8>
               	pushq	$20
               	jmp	0x413670 <.plt>

<snprintf@plt>:
               	jmpq	*305362(%rip)           # 0x45e0a8 <_GLOBAL_OFFSET_TABLE_+0xc0>
               	pushq	$21
               	jmp	0x413670 <.plt>

<pthread_key_create@plt>:
               	jmpq	*305354(%rip)           # 0x45e0b0 <_GLOBAL_OFFSET_TABLE_+0xc8>
               	pushq	$22
               	jmp	0x413670 <.plt>

<pthread_setspecific@plt>:
               	jmpq	*305346(%rip)           # 0x45e0b8 <_GLOBAL_OFFSET_TABLE_+0xd0>
               	pushq	$23
               	jmp	0x413670 <.plt>

<sysconf@plt>:
               	jmpq	*305338(%rip)           # 0x45e0c0 <_GLOBAL_OFFSET_TABLE_+0xd8>
               	pushq	$24
               	jmp	0x413670 <.plt>

<mmap@plt>:
               	jmpq	*305330(%rip)           # 0x45e0c8 <_GLOBAL_OFFSET_TABLE_+0xe0>
               	pushq	$25
               	jmp	0x413670 <.plt>

<__errno_location@plt>:
               	jmpq	*305322(%rip)           # 0x45e0d0 <_GLOBAL_OFFSET_TABLE_+0xe8>
               	pushq	$26
               	jmp	0x413670 <.plt>

<strerror@plt>:
               	jmpq	*305314(%rip)           # 0x45e0d8 <_GLOBAL_OFFSET_TABLE_+0xf0>
               	pushq	$27
               	jmp	0x413670 <.plt>

<munmap@plt>:
               	jmpq	*305306(%rip)           # 0x45e0e0 <_GLOBAL_OFFSET_TABLE_+0xf8>
               	pushq	$28
               	jmp	0x413670 <.plt>

<vsnprintf@plt>:
               	jmpq	*305298(%rip)           # 0x45e0e8 <_GLOBAL_OFFSET_TABLE_+0x100>
               	pushq	$29
               	jmp	0x413670 <.plt>

<strncpy@plt>:
               	jmpq	*305290(%rip)           # 0x45e0f0 <_GLOBAL_OFFSET_TABLE_+0x108>
               	pushq	$30
               	jmp	0x413670 <.plt>

<strncat@plt>:
               	jmpq	*305282(%rip)           # 0x45e0f8 <_GLOBAL_OFFSET_TABLE_+0x110>
               	pushq	$31
               	jmp	0x413670 <.plt>

<__ctype_toupper_loc@plt>:
               	jmpq	*305274(%rip)           # 0x45e100 <_GLOBAL_OFFSET_TABLE_+0x118>
               	pushq	$32
               	jmp	0x413670 <.plt>

<strstr@plt>:
               	jmpq	*305266(%rip)           # 0x45e108 <_GLOBAL_OFFSET_TABLE_+0x120>
               	pushq	$33
               	jmp	0x413670 <.plt>

<strtol@plt>:
               	jmpq	*305258(%rip)           # 0x45e110 <_GLOBAL_OFFSET_TABLE_+0x128>
               	pushq	$34
               	jmp	0x413670 <.plt>

<madvise@plt>:
               	jmpq	*305250(%rip)           # 0x45e118 <_GLOBAL_OFFSET_TABLE_+0x130>
               	pushq	$35
               	jmp	0x413670 <.plt>

<access@plt>:
               	jmpq	*305242(%rip)           # 0x45e120 <_GLOBAL_OFFSET_TABLE_+0x138>
               	pushq	$36
               	jmp	0x413670 <.plt>

<mprotect@plt>:
               	jmpq	*305234(%rip)           # 0x45e128 <_GLOBAL_OFFSET_TABLE_+0x140>
               	pushq	$37
               	jmp	0x413670 <.plt>

<write@plt>:
               	jmpq	*305226(%rip)           # 0x45e130 <_GLOBAL_OFFSET_TABLE_+0x148>
               	pushq	$38
               	jmp	0x413670 <.plt>

<abort@plt>:
               	jmpq	*305218(%rip)           # 0x45e138 <_GLOBAL_OFFSET_TABLE_+0x150>
               	pushq	$39
               	jmp	0x413670 <.plt>

<dladdr@plt>:
               	jmpq	*305210(%rip)           # 0x45e140 <_GLOBAL_OFFSET_TABLE_+0x158>
               	pushq	$40
               	jmp	0x413670 <.plt>

<strrchr@plt>:
               	jmpq	*305202(%rip)           # 0x45e148 <_GLOBAL_OFFSET_TABLE_+0x160>
               	pushq	$41
               	jmp	0x413670 <.plt>

<open@plt>:
               	jmpq	*305194(%rip)           # 0x45e150 <_GLOBAL_OFFSET_TABLE_+0x168>
               	pushq	$42
               	jmp	0x413670 <.plt>

<__fxstat@plt>:
               	jmpq	*305186(%rip)           # 0x45e158 <_GLOBAL_OFFSET_TABLE_+0x170>
               	pushq	$43
               	jmp	0x413670 <.plt>

<_Unwind_Backtrace@plt>:
               	jmpq	*305178(%rip)           # 0x45e160 <_GLOBAL_OFFSET_TABLE_+0x178>
               	pushq	$44
               	jmp	0x413670 <.plt>

<_Unwind_GetIP@plt>:
               	jmpq	*305170(%rip)           # 0x45e168 <_GLOBAL_OFFSET_TABLE_+0x180>
               	pushq	$45
               	jmp	0x413670 <.plt>

<bcmp@plt>:
               	jmpq	*305162(%rip)           # 0x45e170 <_GLOBAL_OFFSET_TABLE_+0x188>
               	pushq	$46
               	jmp	0x413670 <.plt>

<pthread_cond_signal@plt>:
               	jmpq	*305154(%rip)           # 0x45e178 <_GLOBAL_OFFSET_TABLE_+0x190>
               	pushq	$47
               	jmp	0x413670 <.plt>

<pthread_mutex_init@plt>:
               	jmpq	*305146(%rip)           # 0x45e180 <_GLOBAL_OFFSET_TABLE_+0x198>
               	pushq	$48
               	jmp	0x413670 <.plt>

<pthread_cond_init@plt>:
               	jmpq	*305138(%rip)           # 0x45e188 <_GLOBAL_OFFSET_TABLE_+0x1a0>
               	pushq	$49
               	jmp	0x413670 <.plt>

<pthread_mutex_destroy@plt>:
               	jmpq	*305130(%rip)           # 0x45e190 <_GLOBAL_OFFSET_TABLE_+0x1a8>
               	pushq	$50
               	jmp	0x413670 <.plt>

<pthread_cond_destroy@plt>:
               	jmpq	*305122(%rip)           # 0x45e198 <_GLOBAL_OFFSET_TABLE_+0x1b0>
               	pushq	$51
               	jmp	0x413670 <.plt>

<pthread_once@plt>:
               	jmpq	*305114(%rip)           # 0x45e1a0 <_GLOBAL_OFFSET_TABLE_+0x1b8>
               	pushq	$52
               	jmp	0x413670 <.plt>

<pthread_getspecific@plt>:
               	jmpq	*305106(%rip)           # 0x45e1a8 <_GLOBAL_OFFSET_TABLE_+0x1c0>
               	pushq	$53
               	jmp	0x413670 <.plt>

<pthread_detach@plt>:
               	jmpq	*305098(%rip)           # 0x45e1b0 <_GLOBAL_OFFSET_TABLE_+0x1c8>
               	pushq	$54
               	jmp	0x413670 <.plt>

<pthread_cond_broadcast@plt>:
               	jmpq	*305090(%rip)           # 0x45e1b8 <_GLOBAL_OFFSET_TABLE_+0x1d0>
               	pushq	$55
               	jmp	0x413670 <.plt>

<sleep@plt>:
               	jmpq	*305082(%rip)           # 0x45e1c0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
               	pushq	$56
               	jmp	0x413670 <.plt>

<_Exit@plt>:
               	jmpq	*305074(%rip)           # 0x45e1c8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
               	pushq	$57
               	jmp	0x413670 <.plt>

<_Unwind_GetDataRelBase@plt>:
               	jmpq	*305066(%rip)           # 0x45e1d0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
               	pushq	$58
               	jmp	0x413670 <.plt>

<_Unwind_GetTextRelBase@plt>:
               	jmpq	*305058(%rip)           # 0x45e1d8 <_GLOBAL_OFFSET_TABLE_+0x1f0>
               	pushq	$59
               	jmp	0x413670 <.plt>

<_Unwind_GetRegionStart@plt>:
               	jmpq	*305050(%rip)           # 0x45e1e0 <_GLOBAL_OFFSET_TABLE_+0x1f8>
               	pushq	$60
               	jmp	0x413670 <.plt>

<_Unwind_GetLanguageSpecificData@plt>:
               	jmpq	*305042(%rip)           # 0x45e1e8 <_GLOBAL_OFFSET_TABLE_+0x200>
               	pushq	$61
               	jmp	0x413670 <.plt>

<_Unwind_GetIPInfo@plt>:
               	jmpq	*305034(%rip)           # 0x45e1f0 <_GLOBAL_OFFSET_TABLE_+0x208>
               	pushq	$62
               	jmp	0x413670 <.plt>

<_Unwind_SetGR@plt>:
               	jmpq	*305026(%rip)           # 0x45e1f8 <_GLOBAL_OFFSET_TABLE_+0x210>
               	pushq	$63
               	jmp	0x413670 <.plt>

<_Unwind_SetIP@plt>:
               	jmpq	*305018(%rip)           # 0x45e200 <_GLOBAL_OFFSET_TABLE_+0x218>
               	pushq	$64
               	jmp	0x413670 <.plt>

<strcmp@plt>:
               	jmpq	*305010(%rip)           # 0x45e208 <_GLOBAL_OFFSET_TABLE_+0x220>
               	pushq	$65
               	jmp	0x413670 <.plt>

<malloc@plt>:
               	jmpq	*305002(%rip)           # 0x45e210 <_GLOBAL_OFFSET_TABLE_+0x228>
               	pushq	$66
               	jmp	0x413670 <.plt>

<_Unwind_RaiseException@plt>:
               	jmpq	*304994(%rip)           # 0x45e218 <_GLOBAL_OFFSET_TABLE_+0x230>
               	pushq	$67
               	jmp	0x413670 <.plt>

<_Unwind_DeleteException@plt>:
               	jmpq	*304986(%rip)           # 0x45e220 <_GLOBAL_OFFSET_TABLE_+0x238>
               	pushq	$68
               	jmp	0x413670 <.plt>

<_Unwind_Resume_or_Rethrow@plt>:
               	jmpq	*304978(%rip)           # 0x45e228 <_GLOBAL_OFFSET_TABLE_+0x240>
               	pushq	$69
               	jmp	0x413670 <.plt>

<fputc@plt>:
               	jmpq	*304970(%rip)           # 0x45e230 <_GLOBAL_OFFSET_TABLE_+0x248>
               	pushq	$70
               	jmp	0x413670 <.plt>

<pthread_key_delete@plt>:
               	jmpq	*304962(%rip)           # 0x45e238 <_GLOBAL_OFFSET_TABLE_+0x250>
               	pushq	$71
               	jmp	0x413670 <.plt>

<__cxa_atexit@plt>:
               	jmpq	*304954(%rip)           # 0x45e240 <_GLOBAL_OFFSET_TABLE_+0x258>
               	pushq	$72
               	jmp	0x413670 <.plt>

<pthread_cond_wait@plt>:
               	jmpq	*304946(%rip)           # 0x45e248 <_GLOBAL_OFFSET_TABLE_+0x260>
               	pushq	$73
               	jmp	0x413670 <.plt>

<ceil@plt>:
               	jmpq	*304938(%rip)           # 0x45e250 <_GLOBAL_OFFSET_TABLE_+0x268>
               	pushq	$74
               	jmp	0x413670 <.plt>

<floor@plt>:
               	jmpq	*304930(%rip)           # 0x45e258 <_GLOBAL_OFFSET_TABLE_+0x270>
               	pushq	$75
               	jmp	0x413670 <.plt>

<memchr@plt>:
               	jmpq	*304922(%rip)           # 0x45e260 <_GLOBAL_OFFSET_TABLE_+0x278>
               	pushq	$76
               	jmp	0x413670 <.plt>

<pthread_join@plt>:
               	jmpq	*304914(%rip)           # 0x45e268 <_GLOBAL_OFFSET_TABLE_+0x280>
               	pushq	$77
               	jmp	0x413670 <.plt>

<pthread_create@plt>:
               	jmpq	*304906(%rip)           # 0x45e270 <_GLOBAL_OFFSET_TABLE_+0x288>
               	pushq	$78
               	jmp	0x413670 <.plt>

<get_nprocs@plt>:
               	jmpq	*304898(%rip)           # 0x45e278 <_GLOBAL_OFFSET_TABLE_+0x290>
               	pushq	$79
               	jmp	0x413670 <.plt>

<nanosleep@plt>:
               	jmpq	*304890(%rip)           # 0x45e280 <_GLOBAL_OFFSET_TABLE_+0x298>
               	pushq	$80
               	jmp	0x413670 <.plt>

<_ITM_RU1@plt>:
               	jmpq	*304882(%rip)           # 0x45e288 <_GLOBAL_OFFSET_TABLE_+0x2a0>
               	pushq	$81
               	jmp	0x413670 <.plt>

<_ZGTtnam@plt>:
               	jmpq	*304874(%rip)           # 0x45e290 <_GLOBAL_OFFSET_TABLE_+0x2a8>
               	pushq	$82
               	jmp	0x413670 <.plt>

<_ITM_memcpyRtWn@plt>:
               	jmpq	*304866(%rip)           # 0x45e298 <_GLOBAL_OFFSET_TABLE_+0x2b0>
               	pushq	$83
               	jmp	0x413670 <.plt>

<_ITM_RU8@plt>:
               	jmpq	*304858(%rip)           # 0x45e2a0 <_GLOBAL_OFFSET_TABLE_+0x2b8>
               	pushq	$84
               	jmp	0x413670 <.plt>

<_ITM_addUserCommitAction@plt>:
               	jmpq	*304850(%rip)           # 0x45e2a8 <_GLOBAL_OFFSET_TABLE_+0x2c0>
               	pushq	$85
               	jmp	0x413670 <.plt>

<_ITM_memcpyRnWt@plt>:
               	jmpq	*304842(%rip)           # 0x45e2b0 <_GLOBAL_OFFSET_TABLE_+0x2c8>
               	pushq	$86
               	jmp	0x413670 <.plt>

<_ZGTtdlPv@plt>:
               	jmpq	*304834(%rip)           # 0x45e2b8 <_GLOBAL_OFFSET_TABLE_+0x2d0>
               	pushq	$87
               	jmp	0x413670 <.plt>

<fopen@plt>:
               	jmpq	*304826(%rip)           # 0x45e2c0 <_GLOBAL_OFFSET_TABLE_+0x2d8>
               	pushq	$88
               	jmp	0x413670 <.plt>

<strtoul@plt>:
               	jmpq	*304818(%rip)           # 0x45e2c8 <_GLOBAL_OFFSET_TABLE_+0x2e0>
               	pushq	$89
               	jmp	0x413670 <.plt>

<fclose@plt>:
               	jmpq	*304810(%rip)           # 0x45e2d0 <_GLOBAL_OFFSET_TABLE_+0x2e8>
               	pushq	$90
               	jmp	0x413670 <.plt>

<fileno@plt>:
               	jmpq	*304802(%rip)           # 0x45e2d8 <_GLOBAL_OFFSET_TABLE_+0x2f0>
               	pushq	$91
               	jmp	0x413670 <.plt>

<read@plt>:
               	jmpq	*304794(%rip)           # 0x45e2e0 <_GLOBAL_OFFSET_TABLE_+0x2f8>
               	pushq	$92
               	jmp	0x413670 <.plt>

<ioctl@plt>:
               	jmpq	*304786(%rip)           # 0x45e2e8 <_GLOBAL_OFFSET_TABLE_+0x300>
               	pushq	$93
               	jmp	0x413670 <.plt>

Disassembly of section .text:

<_GLOBAL__sub_I_GlobalData.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 313381(%rip)     # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	movups	%xmm0, 313358(%rip)     # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	movl	$1, 313380(%rip)        # 0x4604b0 <kotlin::mm::GlobalData::instance_+0x38>
               	movq	$0, 313401(%rip)        # 0x4604d0 <kotlin::mm::GlobalData::instance_+0x58>
               	movups	%xmm0, 313366(%rip)     # 0x4604b4 <kotlin::mm::GlobalData::instance_+0x3c>
               	movq	$0, 313371(%rip)        # 0x4604c4 <kotlin::mm::GlobalData::instance_+0x4c>
               	leaq	313384(%rip), %rax      # 0x4604d8 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 313385(%rip)      # 0x4604e0 <kotlin::mm::GlobalData::instance_+0x68>
               	movq	%rax, 313370(%rip)      # 0x4604d8 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	$0, 313375(%rip)        # 0x4604e8 <kotlin::mm::GlobalData::instance_+0x70>
               	leaq	313376(%rip), %rax      # 0x4604f0 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	%rax, 313377(%rip)      # 0x4604f8 <kotlin::mm::GlobalData::instance_+0x80>
               	movq	%rax, 313362(%rip)      # 0x4604f0 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	$0, 313367(%rip)        # 0x460500 <kotlin::mm::GlobalData::instance_+0x88>
               	movb	$0, 313368(%rip)        # 0x460508 <kotlin::mm::GlobalData::instance_+0x90>
               	leaq	313369(%rip), %rax      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 313370(%rip)      # 0x460518 <kotlin::mm::GlobalData::instance_+0xa0>
               	movq	%rax, 313355(%rip)      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	$0, 313360(%rip)        # 0x460520 <kotlin::mm::GlobalData::instance_+0xa8>
               	leaq	313361(%rip), %rax      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%rax, 313362(%rip)      # 0x460530 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%rax, 313347(%rip)      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	$0, 313352(%rip)        # 0x460538 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 313353(%rip)        # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	leaq	313354(%rip), %rax      # 0x460548 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 313355(%rip)      # 0x460550 <kotlin::mm::GlobalData::instance_+0xd8>
               	movq	%rax, 313340(%rip)      # 0x460548 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	$0, 313345(%rip)        # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	leaq	313346(%rip), %rax      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%rax, 313347(%rip)      # 0x460568 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%rax, 313332(%rip)      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	$0, 313337(%rip)        # 0x460570 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 313338(%rip)        # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	movl	$1, %edi
               	movl	$512, %esi              # imm = 0x200
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	addq	$8, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%r13)
               	movups	%xmm0, 32(%r13)
               	movb	$0, 48(%r13)
               	leaq	56(%r13), %rcx
               	movl	$100000, 56(%r13)       # imm = 0x186A0
               	movq	$10240, 64(%r13)        # imm = 0x2800
               	movb	$1, 72(%r13)
               	movaps	192922(%rip), %xmm0     # 0x442f60 <_IO_stdin_used+0x60>
               	movups	%xmm0, 80(%r13)
               	movabsq	$4602678819172646912, %rdx # imm = 0x3FE0000000000000
               	movq	%rdx, 96(%r13)
               	movaps	192912(%rip), %xmm0     # 0x442f70 <_IO_stdin_used+0x70>
               	movups	%xmm0, 104(%r13)
               	leaq	160(%r13), %r14
               	movq	%rax, 160(%r13)
               	movq	%rcx, 168(%r13)
               	leaq	176(%r13), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 176(%r13)
               	movups	%xmm0, 192(%r13)
               	movups	%xmm0, 208(%r13)
               	movq	%rbp, 224(%r13)
               	leaq	232(%r13), %rdi
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	movq	$0, 280(%r13)
               	movq	%rbp, 288(%r13)
               	leaq	296(%r13), %rdi
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	movq	$0, 344(%r13)
               	movq	%rbp, 352(%r13)
               	leaq	360(%r13), %rdi
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	movq	$0, 408(%r13)
               	movq	%rbp, 416(%r13)
               	leaq	424(%r13), %rdi
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	movb	$0, 472(%r13)
               	movq	$0, 480(%r13)
               	movl	$1, %edi
               	movl	$312, %esi              # imm = 0x138
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	$0, 32(%rax)
               	leaq	40(%rax), %rdi
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movups	%xmm0, 88(%rbx)
               	movq	$0, 120(%rbx)
               	movq	%r14, 128(%rbx)
               	leaq	73369(%rip), %rax       # 0x425d80 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 144(%rbx)
               	leaq	73403(%rip), %rax       # 0x425db0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>
               	movq	%rax, 152(%rbx)
               	movq	$0, 160(%rbx)
               	movw	$256, 168(%rbx)         # imm = 0x100
               	movups	%xmm0, 176(%rbx)
               	movups	%xmm0, 192(%rbx)
               	movq	$0, 208(%rbx)
               	leaq	216(%rbx), %rdi
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	movb	$0, 264(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 272(%rbx)
               	movups	%xmm0, 288(%rbx)
               	movq	$0, 304(%rbx)
               	movq	%rbx, 488(%r13)
               	leaq	316890(%rip), %rax      # 0x461540 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 496(%r13)
               	movq	168(%r13), %r12
               	movq	%r14, 216(%rsp)
               	leaq	73405(%rip), %rax       # 0x425e40 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
               	movq	%rax, 240(%rsp)
               	leaq	73406(%rip), %rax       # 0x425e50 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 232(%rsp)
               	movq	232(%rsp), %rax
               	movq	240(%rsp), %rcx
               	movq	$0, 232(%rsp)
               	movups	72(%r12), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movq	216(%rsp), %rdx
               	movq	%rdx, 72(%r12)
               	movq	224(%rsp), %rdx
               	movq	%rdx, 80(%r12)
               	movdqu	88(%r12), %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	movq	%rax, 88(%r12)
               	movq	%rcx, 96(%r12)
               	movq	%xmm0, %rax
               	testq	%rax, %rax
               	je	0x41400b <_GLOBAL__sub_I_GlobalData.cpp+0x3ab>
               	leaq	48(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	$0, 200(%rsp)
               	movq	88(%r12), %rcx
               	testq	%rcx, %rcx
               	movq	%rbp, 248(%rsp)
               	movq	%r14, 256(%rsp)
               	je	0x41405d <_GLOBAL__sub_I_GlobalData.cpp+0x3fd>
               	leaq	72(%r12), %rsi
               	leaq	184(%rsp), %rdi
               	movl	$2, %edx
               	callq	*%rcx
               	movups	88(%r12), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movups	%xmm0, 200(%rsp)
               	jmp	0x41406d <_GLOBAL__sub_I_GlobalData.cpp+0x40d>
               	movups	200(%rsp), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movl	$1, %edi
               	movl	$224, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movups	184(%rsp), %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 200(%rsp)
               	movaps	128(%rsp), %xmm0
               	movaps	%xmm0, 160(%rsp)
               	leaq	296734(%rip), %rax      # 0x45c7d0 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rbx)
               	movq	%r12, 8(%rbx)
               	leaq	312328(%rip), %rax      # 0x4604c8 <kotlin::mm::GlobalData::instance_+0x50>
               	movq	%rax, 16(%rbx)
               	movq	%r12, 24(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%rbx)
               	movq	%r12, 48(%rbx)
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 56(%rbx)
               	movaps	144(%rsp), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movups	64(%rbx), %xmm1
               	movaps	%xmm1, 144(%rsp)
               	movups	%xmm0, 64(%rbx)
               	movaps	160(%rsp), %xmm0
               	movq	$0, 160(%rsp)
               	movq	88(%rbx), %rax
               	movq	%rax, 168(%rsp)
               	movups	%xmm0, 80(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 112(%rbx)
               	movups	%xmm0, 96(%rbx)
               	movq	$0, 128(%rbx)
               	leaq	136(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	callq	0x43ccc0 <std::condition_variable::condition_variable()>
               	movb	$1, 184(%rbx)
               	movabsq	$9223372036854775807, %r14 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r14), %rax
               	testq	%rbp, %rbp
               	cmovnsq	%r14, %rax
               	imulq	$1000, %rbp, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r14, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	leaq	96(%rbx), %rcx
               	movq	%rax, 200(%rbx)
               	movb	$0, 208(%rbx)
               	leaq	16(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rsp)
               	movups	%xmm0, 24(%rsp)
               	movq	%rax, (%rsp)
               	movabsq	$8243114992121955143, %rax # imm = 0x72656D6954204347
               	movq	%rax, 16(%rsp)
               	movabsq	$7233174018586845298, %rax # imm = 0x6461657268742072
               	movq	%rax, 23(%rsp)
               	movq	$15, 8(%rsp)
               	movq	(%rsp), %rbp
               	movb	$0, 15(%rbp)
               	movb	$1, 32(%rsp)
               	movq	$0, 216(%rbx)
               	movq	%rbx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	leaq	61306(%rip), %rax       # 0x423190 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rax, %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	movb	$0, 112(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x414275 <_GLOBAL__sub_I_GlobalData.cpp+0x615>
               	leaq	96(%rsp), %rax
               	movq	%rax, 80(%rsp)
               	movq	8(%rsp), %r15
               	cmpq	$15, %r15
               	jbe	0x414263 <_GLOBAL__sub_I_GlobalData.cpp+0x603>
               	testq	%r15, %r15
               	js	0x41462e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
               	leaq	1(%r15), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 80(%rsp)
               	movq	%r15, 96(%rsp)
               	testq	%r15, %r15
               	je	0x41428b <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
               	cmpq	$1, %r15
               	jne	0x41427d <_GLOBAL__sub_I_GlobalData.cpp+0x61d>
               	movb	(%rbp), %cl
               	movb	%cl, (%rax)
               	jmp	0x41428b <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
               	movb	$1, %r14b
               	xorl	%r15d, %r15d
               	jmp	0x4142a5 <_GLOBAL__sub_I_GlobalData.cpp+0x645>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	movq	%r15, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r15, 88(%rsp)
               	movq	80(%rsp), %rax
               	movb	$0, (%rax,%r15)
               	movb	$1, 112(%rsp)
               	movb	$1, %r15b
               	xorl	%r14d, %r14d
               	leaq	61748(%rip), %rbp       # 0x4233e0 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rbp, 120(%rsp)
               	movl	$88, %edi
               	callq	0x43c079 <operator new(unsigned long)>
               	leaq	216(%rbx), %rdi
               	leaq	296255(%rip), %rcx      # 0x45c808 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rcx, (%rax)
               	movaps	48(%rsp), %xmm0
               	movups	%xmm0, 8(%rax)
               	movdqa	64(%rsp), %xmm0
               	movdqu	%xmm0, 24(%rax)
               	movb	$0, 72(%rax)
               	testb	%r14b, %r14b
               	leaq	16(%rsp), %r14
               	jne	0x41433f <_GLOBAL__sub_I_GlobalData.cpp+0x6df>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	movq	%rdx, 40(%rax)
               	movq	80(%rsp), %rsi
               	leaq	96(%rsp), %rcx
               	cmpq	%rcx, %rsi
               	je	0x414317 <_GLOBAL__sub_I_GlobalData.cpp+0x6b7>
               	movq	%rsi, 40(%rax)
               	movq	96(%rsp), %rdx
               	movq	%rdx, 56(%rax)
               	jmp	0x41431f <_GLOBAL__sub_I_GlobalData.cpp+0x6bf>
               	movdqu	(%rcx), %xmm0
               	movdqu	%xmm0, (%rdx)
               	movq	88(%rsp), %rdx
               	movq	%rdx, 48(%rax)
               	movq	%rcx, 80(%rsp)
               	movq	$0, 88(%rsp)
               	movb	$0, 96(%rsp)
               	movb	$1, 72(%rax)
               	movq	%rbp, 80(%rax)
               	movq	%rax, 40(%rsp)
               	movq	302193(%rip), %rdx      # 0x45dfc0 <write+0x45dfc0>
               	leaq	40(%rsp), %rsi
               	callq	0x43f2ae <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414369 <_GLOBAL__sub_I_GlobalData.cpp+0x709>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	je	0x41438d <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
               	movq	80(%rsp), %rdi
               	leaq	96(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41438d <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x4143a2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x4143a2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
               	callq	0x4136d0 <free@plt>
               	movq	160(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143c1 <_GLOBAL__sub_I_GlobalData.cpp+0x761>
               	leaq	144(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	64(%r12), %rbp
               	movq	%rbx, 64(%r12)
               	testq	%rbp, %rbp
               	je	0x4143e1 <_GLOBAL__sub_I_GlobalData.cpp+0x781>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	200(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414400 <_GLOBAL__sub_I_GlobalData.cpp+0x7a0>
               	leaq	184(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	232(%rsp), %rax
               	testq	%rax, %rax
               	je	0x41441f <_GLOBAL__sub_I_GlobalData.cpp+0x7bf>
               	leaq	216(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	movdqa	%xmm0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	movq	%r14, (%rsp)
               	movabsq	$7018141387277222727, %rax # imm = 0x6165726874204347
               	movq	%rax, 16(%rsp)
               	movw	$100, 24(%rsp)
               	movq	$9, 8(%rsp)
               	movb	$1, 32(%rsp)
               	movq	$0, 184(%rsp)
               	movq	256(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movb	$0, 88(%rsp)
               	leaq	72(%rsp), %rbp
               	movq	%rbp, 56(%rsp)
               	movq	8(%rsp), %rbx
               	cmpq	$15, %rbx
               	jbe	0x4144ba <_GLOBAL__sub_I_GlobalData.cpp+0x85a>
               	testq	%rbx, %rbx
               	js	0x41462e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
               	leaq	1(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 72(%rsp)
               	testq	%rbx, %rbx
               	jne	0x4144c2 <_GLOBAL__sub_I_GlobalData.cpp+0x862>
               	jmp	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	movq	%rbp, %rax
               	testq	%rbx, %rbx
               	je	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	cmpq	$1, %rbx
               	jne	0x4144d0 <_GLOBAL__sub_I_GlobalData.cpp+0x870>
               	movb	16(%rsp), %cl
               	movb	%cl, (%rax)
               	jmp	0x4144de <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r13, %r12
               	addq	$480, %r12              # imm = 0x1E0
               	movq	%rbx, 64(%rsp)
               	movq	56(%rsp), %rax
               	movb	$0, (%rax,%rbx)
               	movb	$1, 88(%rsp)
               	leaq	72062(%rip), %rbx       # 0x425e80 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
               	movq	%rbx, 96(%rsp)
               	movl	$64, %edi
               	callq	0x43c079 <operator new(unsigned long)>
               	leaq	295824(%rip), %rcx      # 0x45c8a8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	movq	56(%rsp), %rdx
               	cmpq	%rbp, %rdx
               	je	0x41454c <_GLOBAL__sub_I_GlobalData.cpp+0x8ec>
               	movq	%rdx, 16(%rax)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x414555 <_GLOBAL__sub_I_GlobalData.cpp+0x8f5>
               	movdqu	(%rbp), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rbp, 56(%rsp)
               	movq	$0, 64(%rsp)
               	movb	$0, 72(%rsp)
               	movb	$1, 48(%rax)
               	movq	%rbx, 56(%rax)
               	movq	%rax, 144(%rsp)
               	movq	301624(%rip), %rdx      # 0x45dfc0 <write+0x45dfc0>
               	leaq	184(%rsp), %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x43f2ae <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4145b0 <_GLOBAL__sub_I_GlobalData.cpp+0x950>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	je	0x4145d2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
               	movq	56(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x4145d2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, (%r12)
               	jne	0x414889 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
               	movq	184(%rsp), %rax
               	movq	%rax, (%r12)
               	movq	$0, 184(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x41460a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x41460a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
               	callq	0x4136d0 <free@plt>
               	movl	$0, 504(%r13)
               	movq	%r13, 311140(%rip)      # 0x460580 <kotlin::mm::GlobalData::instance_+0x108>
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	199003(%rip), %rdi      # 0x444f90 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4362d0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	200(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414674 <_GLOBAL__sub_I_GlobalData.cpp+0xa14>
               	leaq	184(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, 128(%rsp)
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4146a7 <_GLOBAL__sub_I_GlobalData.cpp+0xa47>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	jne	0x4146c4 <_GLOBAL__sub_I_GlobalData.cpp+0xa64>
               	jmp	0x4146d3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	movq	%rax, 128(%rsp)
               	movq	56(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x4146d3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x4146e8 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
               	movq	(%rsp), %rdi
               	cmpq	%r14, %rdi
               	je	0x4146e8 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
               	callq	0x4136d0 <free@plt>
               	movq	488(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x41485c <_GLOBAL__sub_I_GlobalData.cpp+0xbfc>
               	leaq	88(%rbx), %rbp
               	cmpq	$0, 301236(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x414716 <_GLOBAL__sub_I_GlobalData.cpp+0xab6>
               	movq	%rbp, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x41479d <_GLOBAL__sub_I_GlobalData.cpp+0xb3d>
               	cmpq	$0, (%rbx)
               	jne	0x414734 <_GLOBAL__sub_I_GlobalData.cpp+0xad4>
               	cmpq	$0, 301204(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movq	%rbp, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movb	$1, 168(%rbx)
               	leaq	40(%rbx), %r15
               	movq	%r15, %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	cmpq	$0, 301161(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x414759 <_GLOBAL__sub_I_GlobalData.cpp+0xaf9>
               	movq	%rbp, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x43f254 <std::thread::join()>
               	movb	$0, 168(%rbx)
               	cmpq	$0, 301128(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4147a4 <_GLOBAL__sub_I_GlobalData.cpp+0xb44>
               	movq	%rbp, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x41488e <_GLOBAL__sub_I_GlobalData.cpp+0xc2e>
               	movb	$1, 169(%rbx)
               	movq	%r15, %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	cmpq	$0, 301087(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	jne	0x41472a <_GLOBAL__sub_I_GlobalData.cpp+0xaca>
               	jmp	0x4147b3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movb	$1, 169(%rbx)
               	movq	%r15, %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	leaq	216(%rbx), %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	movq	144(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4147dc <_GLOBAL__sub_I_GlobalData.cpp+0xb7c>
               	leaq	128(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	leaq	40(%rbx), %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	leaq	16(%rbx), %r15
               	movq	16(%rbx), %rbp
               	movq	$0, 16(%rbx)
               	movq	%rbp, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x41482e <_GLOBAL__sub_I_GlobalData.cpp+0xbce>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	48(%rsp), %r14
               	movq	%rbp, 48(%rsp)
               	testq	%r14, %r14
               	je	0x4147fa <_GLOBAL__sub_I_GlobalData.cpp+0xb9a>
               	movq	%r14, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x4147fa <_GLOBAL__sub_I_GlobalData.cpp+0xb9a>
               	leaq	48(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r15, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpq	$0, (%rbx)
               	je	0x414854 <_GLOBAL__sub_I_GlobalData.cpp+0xbf4>
               	movq	%rbx, %rdi
               	callq	0x43f254 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x414889 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 488(%r13)
               	movq	%r12, %rdi
               	callq	0x423870 <kotlin::ScopedThread::~ScopedThread()>
               	movq	248(%rsp), %rdi
               	callq	0x427190 <GCStateHolder::~GCStateHolder()>
               	movq	128(%rsp), %rdi
               	callq	0x423180 <__clang_call_terminate>
               	callq	0x43c423 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x423860 <std::thread::~thread()>
               	movq	%rbp, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4148db <_GLOBAL__sub_I_GlobalData.cpp+0xc7b>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	movb	112(%rsp), %r15b
               	jmp	0x4148ee <_GLOBAL__sub_I_GlobalData.cpp+0xc8e>
               	movq	%rax, %rbx
               	testb	%r15b, %r15b
               	je	0x414907 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
               	movq	80(%rsp), %rdi
               	leaq	96(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414907 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x414921 <_GLOBAL__sub_I_GlobalData.cpp+0xcc1>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414921 <_GLOBAL__sub_I_GlobalData.cpp+0xcc1>
               	callq	0x4136d0 <free@plt>
               	movq	128(%rsp), %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<_GLOBAL__sub_I_CallsChecker.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	310419(%rip), %rax      # 0x4605e8 <(anonymous namespace)::checker+0x30>
               	movq	%rax, 310364(%rip)      # 0x4605b8 <(anonymous namespace)::checker>
               	movq	$1, 310361(%rip)        # 0x4605c0 <(anonymous namespace)::checker+0x8>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 310359(%rip)     # 0x4605c8 <(anonymous namespace)::checker+0x10>
               	movl	$1065353216, 310365(%rip) # imm = 0x3F800000
                                                # 0x4605d8 <(anonymous namespace)::checker+0x20>
               	leaq	310366(%rip), %rdi      # 0x4605e0 <(anonymous namespace)::checker+0x28>
               	xorl	%ebp, %ebp
               	movl	$3792, %edx             # imm = 0xED0
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movl	$237, %ebx
               	leaq	303012(%rip), %r12      # 0x45e940 <Kotlin_callsCheckerGoodFunctionNames>
               	leaq	310293(%rip), %r15      # 0x4605b8 <(anonymous namespace)::checker>
               	jmp	0x4149d0 <_GLOBAL__sub_I_CallsChecker.cpp+0x90>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, 56(%r15,%rbp,2)
               	movq	%r14, 64(%r15,%rbp,2)
               	addq	$-1, %rbx
               	addq	$8, %rbp
               	cmpq	$1, %rbx
               	jbe	0x4149de <_GLOBAL__sub_I_CallsChecker.cpp+0x9e>
               	movq	(%rbp,%r12), %r14
               	testq	%r14, %r14
               	jne	0x4149b0 <_GLOBAL__sub_I_CallsChecker.cpp+0x70>
               	xorl	%eax, %eax
               	jmp	0x4149b8 <_GLOBAL__sub_I_CallsChecker.cpp+0x78>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414b06 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	leaq	310273(%rip), %rbx      # 0x4605f0 <(anonymous namespace)::checker+0x38>
               	leaq	314042(%rip), %rsi      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	movl	$14, %edx
               	movq	%rbx, %rdi
               	callq	0x4238c0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	leaq	310262(%rip), %rax      # 0x460600 <(anonymous namespace)::checker+0x48>
               	leaq	310495(%rip), %rbp      # 0x4606f0 <(anonymous namespace)::checker+0x138>
               	movq	%r15, %r13
               	negq	%r13
               	jmp	0x414a8c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	nopl	(%rax)
               	testl	%eax, %eax
               	js	0x414a40 <_GLOBAL__sub_I_CallsChecker.cpp+0x100>
               	movq	%r14, %rdi
               	callq	0x423da0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	jne	0x414a8c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	jmp	0x414ae5 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	nopl	(%rax)
               	movups	(%r14), %xmm0
               	movaps	%xmm0, (%rsp)
               	leaq	(%r14,%r13), %rax
               	addq	$-56, %rax
               	testq	%rax, %rax
               	jle	0x414a75 <_GLOBAL__sub_I_CallsChecker.cpp+0x135>
               	shrq	$4, %rax
               	addq	$1, %rax
               	movq	%r14, %rcx
               	movups	-16(%rcx), %xmm0
               	movups	%xmm0, (%rcx)
               	addq	$-16, %rcx
               	addq	$-1, %rax
               	cmpq	$1, %rax
               	jg	0x414a60 <_GLOBAL__sub_I_CallsChecker.cpp+0x120>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, 310128(%rip)     # 0x4605f0 <(anonymous namespace)::checker+0x38>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	je	0x414ae5 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	movq	%rax, %r14
               	movq	(%rax), %rdx
               	movq	310103(%rip), %rax      # 0x4605f0 <(anonymous namespace)::checker+0x38>
               	movq	%rdx, %r12
               	subq	%rax, %r12
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x414ac0 <_GLOBAL__sub_I_CallsChecker.cpp+0x180>
               	movq	310089(%rip), %rsi      # 0x4605f8 <(anonymous namespace)::checker+0x40>
               	movq	24(%rbx), %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x414a20 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	cmpq	$2147483647, %r12       # imm = 0x7FFFFFFF
               	jg	0x414a24 <_GLOBAL__sub_I_CallsChecker.cpp+0xe4>
               	cmpq	$-2147483648, %r12      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %r12d
               	movl	%r12d, %eax
               	jmp	0x414a20 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414b06 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	movl	$312, %ebx              # imm = 0x138
               	leaq	(%r15,%rbx), %rdi
               	callq	0x423da0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	addq	$16, %rbx
               	cmpq	$3832, %rbx             # imm = 0xEF8
               	jne	0x414af0 <_GLOBAL__sub_I_CallsChecker.cpp+0x1b0>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_ThreadSuspension.cpp>:
               	leaq	309857(%rip), %rdi      # 0x460588 <(anonymous namespace)::gSuspensionCondVar>
               	jmp	0x43ccc0 <std::condition_variable::condition_variable()>
               	nopl	(%rax)

<_GLOBAL__sub_I_ConcurrentMarkAndSweep.cpp>:
               	leaq	313769(%rip), %rdi      # 0x4614e0 <(anonymous namespace)::markingCondVar>
               	jmp	0x43ccc0 <std::condition_variable::condition_variable()>

<_GLOBAL__sub_I_eh_alloc.cc>:
               	xorl	%eax, %eax
               	leaq	414011(%rip), %rdi      # 0x479c80 <(anonymous namespace)::emergency_pool>
               	movl	$10, %ecx
               	pushq	%rdx
               	rep		stosl	%eax, %es:(%rdi)
               	movl	$72704, %edi            # imm = 0x11C00
               	movq	$72704, 414043(%rip)    # imm = 0x11C00
                                                # 0x479cb8 <(anonymous namespace)::emergency_pool+0x38>
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, 414023(%rip)      # 0x479cb0 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rax, %rax
               	jne	0x414b86 <_GLOBAL__sub_I_eh_alloc.cc+0x4a>
               	movq	$0, 414015(%rip)        # 0x479cb8 <(anonymous namespace)::emergency_pool+0x38>
               	movq	$0, 413988(%rip)        # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x414b9c <_GLOBAL__sub_I_eh_alloc.cc+0x60>
               	movq	%rax, 413979(%rip)      # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	movq	$72704, (%rax)          # imm = 0x11C00
               	movq	$0, 8(%rax)
               	popq	%rax
               	retq

<_GLOBAL__sub_I_system_error.cc>:
               	pushq	%rax
               	leaq	300882(%rip), %rdx      # 0x45e2f8 <__dso_handle>
               	leaq	308763(%rip), %rsi      # 0x4601c8 <(anonymous namespace)::generic_category_instance>
               	leaq	164660(%rip), %rdi      # 0x43cee8 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	callq	0x413b00 <__cxa_atexit@plt>
               	leaq	300856(%rip), %rdx      # 0x45e2f8 <__dso_handle>
               	leaq	308729(%rip), %rsi      # 0x4601c0 <(anonymous namespace)::system_category_instance>
               	popq	%rcx
               	leaq	164599(%rip), %rdi      # 0x43cec6 <(anonymous namespace)::system_error_category::~system_error_category()>
               	jmp	0x413b00 <__cxa_atexit@plt>

<get_available_features>:
               	btl	$27, %edi
               	pushq	%rbx
               	movl	%edx, %r11d
               	jae	0x414c06 <get_available_features+0x32>
               	xorl	%ecx, %ecx
               	xgetbv
               	movl	%eax, %edx
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x414c06 <get_available_features+0x32>
               	andl	$230, %eax
               	xorl	%r10d, %r10d
               	movl	$1, %r9d
               	cmpl	$230, %eax
               	sete	%r10b
               	jmp	0x414c0c <get_available_features+0x38>
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	movl	%esi, %r8d
               	shrl	$15, %r8d
               	andl	$1, %r8d
               	btl	$23, %esi
               	jae	0x414c21 <get_available_features+0x4d>
               	orl	$2, %r8d
               	btl	$25, %esi
               	jae	0x414c2b <get_available_features+0x57>
               	orl	$8, %r8d
               	btl	$26, %esi
               	jae	0x414c35 <get_available_features+0x61>
               	orl	$16, %r8d
               	btl	$23, %edi
               	jae	0x414c3f <get_available_features+0x6b>
               	orl	$4, %r8d
               	btl	$25, %edi
               	jae	0x414c4c <get_available_features+0x78>
               	orl	$262144, %r8d           # imm = 0x40000
               	testb	$2, %dil
               	je	0x414c59 <get_available_features+0x85>
               	orl	$524288, %r8d           # imm = 0x80000
               	testb	$1, %dil
               	je	0x414c63 <get_available_features+0x8f>
               	orl	$32, %r8d
               	btl	$9, %edi
               	jae	0x414c6d <get_available_features+0x99>
               	orl	$64, %r8d
               	btl	$19, %edi
               	jae	0x414c77 <get_available_features+0xa3>
               	orb	$-128, %r8b
               	btl	$20, %edi
               	jae	0x414c84 <get_available_features+0xb0>
               	orl	$256, %r8d              # imm = 0x100
               	testl	%r9d, %r9d
               	je	0x414ca3 <get_available_features+0xcf>
               	btl	$28, %edi
               	jae	0x414c96 <get_available_features+0xc2>
               	orl	$512, %r8d              # imm = 0x200
               	btl	$12, %edi
               	jae	0x414ca3 <get_available_features+0xcf>
               	orl	$16384, %r8d            # imm = 0x4000
               	xorl	%esi, %esi
               	cmpl	$6, %r11d
               	jle	0x414db3 <get_available_features+0x1df>
               	movl	$7, %eax
               	movl	%esi, %ecx
               	cpuid
               	testb	$8, %bl
               	je	0x414cc4 <get_available_features+0xf0>
               	orl	$65536, %r8d            # imm = 0x10000
               	testl	%r9d, %r9d
               	je	0x414cd5 <get_available_features+0x101>
               	testb	$32, %bl
               	je	0x414cd5 <get_available_features+0x101>
               	orl	$1024, %r8d             # imm = 0x400
               	btl	$8, %ebx
               	jae	0x414ce2 <get_available_features+0x10e>
               	orl	$131072, %r8d           # imm = 0x20000
               	xorl	%esi, %esi
               	testl	%r10d, %r10d
               	je	0x414db3 <get_available_features+0x1df>
               	btl	$16, %ebx
               	jae	0x414cfa <get_available_features+0x126>
               	orl	$32768, %r8d            # imm = 0x8000
               	testl	%ebx, %ebx
               	jns	0x414d05 <get_available_features+0x131>
               	orl	$1048576, %r8d          # imm = 0x100000
               	btl	$30, %ebx
               	jae	0x414d12 <get_available_features+0x13e>
               	orl	$2097152, %r8d          # imm = 0x200000
               	btl	$17, %ebx
               	jae	0x414d1f <get_available_features+0x14b>
               	orl	$4194304, %r8d          # imm = 0x400000
               	btl	$28, %ebx
               	jae	0x414d2c <get_available_features+0x158>
               	orl	$8388608, %r8d          # imm = 0x800000
               	btl	$26, %ebx
               	jae	0x414d39 <get_available_features+0x165>
               	orl	$33554432, %r8d         # imm = 0x2000000
               	btl	$27, %ebx
               	jae	0x414d46 <get_available_features+0x172>
               	orl	$16777216, %r8d         # imm = 0x1000000
               	btl	$21, %ebx
               	jae	0x414d53 <get_available_features+0x17f>
               	orl	$134217728, %r8d        # imm = 0x8000000
               	testb	$2, %cl
               	je	0x414d5f <get_available_features+0x18b>
               	orl	$67108864, %r8d         # imm = 0x4000000
               	testb	$64, %cl
               	je	0x414d6b <get_available_features+0x197>
               	orl	$2147483648, %r8d       # imm = 0x80000000
               	movl	%ecx, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	btl	$10, %ecx
               	jae	0x414d7c <get_available_features+0x1a8>
               	orl	$2, %esi
               	btl	$11, %ecx
               	jae	0x414d85 <get_available_features+0x1b1>
               	orl	$4, %esi
               	btl	$12, %ecx
               	jae	0x414d8e <get_available_features+0x1ba>
               	orl	$8, %esi
               	btl	$14, %ecx
               	jae	0x414d9b <get_available_features+0x1c7>
               	orl	$1073741824, %r8d       # imm = 0x40000000
               	testb	$4, %dl
               	je	0x414da7 <get_available_features+0x1d3>
               	orl	$268435456, %r8d        # imm = 0x10000000
               	andb	$8, %dl
               	je	0x414db3 <get_available_features+0x1df>
               	orl	$536870912, %r8d        # imm = 0x20000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cpuid
               	cmpl	$2147483648, %eax       # imm = 0x80000000
               	jbe	0x414df3 <get_available_features+0x21f>
               	movl	$2147483649, %eax       # imm = 0x80000001
               	cpuid
               	testb	$64, %cl
               	je	0x414dd4 <get_available_features+0x200>
               	orl	$2048, %r8d             # imm = 0x800
               	testl	%r9d, %r9d
               	je	0x414df3 <get_available_features+0x21f>
               	btl	$16, %ecx
               	jae	0x414de6 <get_available_features+0x212>
               	orl	$4096, %r8d             # imm = 0x1000
               	btl	$11, %ecx
               	jae	0x414df3 <get_available_features+0x21f>
               	orl	$8192, %r8d             # imm = 0x2000
               	movl	%r8d, 413458(%rip)      # 0x479d0c <__cpu_model+0xc>
               	popq	%rbx
               	movl	%esi, 413455(%rip)      # 0x479d10 <__cpu_features2>
               	retq

<__cpu_indicator_init>:
               	xorl	%r9d, %r9d
               	cmpl	$0, 413428(%rip)        # 0x479d00 <__cpu_model>
               	jne	0x4151f6 <__cpu_indicator_init+0x3f4>
               	pushq	%rbx
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414e2b <__cpu_indicator_init+0x29>
               	movl	%r9d, %eax
               	cpuid
               	movl	%ebx, %r10d
               	movl	%eax, %r8d
               	testl	%eax, %eax
               	jg	0x414e3e <__cpu_indicator_init+0x3c>
               	movl	$3, 413387(%rip)        # 0x479d00 <__cpu_model>
               	orl	$-1, %r9d
               	jmp	0x4151f1 <__cpu_indicator_init+0x3ef>
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414e2b <__cpu_indicator_init+0x29>
               	movl	$1, %eax
               	cpuid
               	movl	%edx, %esi
               	movl	%ecx, %edi
               	movl	%eax, %edx
               	movl	%eax, %r11d
               	shrl	$4, %edx
               	movl	%eax, %ecx
               	shrl	$8, %r11d
               	shrl	$12, %ecx
               	andl	$15, %edx
               	andl	$15, %r11d
               	andl	$240, %ecx
               	cmpl	$1970169159, %r10d      # imm = 0x756E6547
               	jne	0x4150c8 <__cpu_indicator_init+0x2c6>
               	cmpl	$6, %r11d
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	%edx, %eax
               	orl	%ecx, %eax
               	testb	%bl, %bl
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$62, %eax
               	je	0x415064 <__cpu_indicator_init+0x262>
               	ja	0x414f55 <__cpu_indicator_init+0x153>
               	cmpl	$38, %eax
               	je	0x41500a <__cpu_indicator_init+0x208>
               	ja	0x414ef9 <__cpu_indicator_init+0xf7>
               	cmpl	$28, %eax
               	je	0x41500a <__cpu_indicator_init+0x208>
               	ja	0x414ed8 <__cpu_indicator_init+0xd6>
               	cmpl	$23, %eax
               	je	0x4150a7 <__cpu_indicator_init+0x2a5>
               	cmpl	$26, %eax
               	je	0x415040 <__cpu_indicator_init+0x23e>
               	cmpl	$15, %eax
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	jmp	0x4150a7 <__cpu_indicator_init+0x2a5>
               	cmpl	$31, %eax
               	ja	0x414eeb <__cpu_indicator_init+0xe9>
               	cmpl	$30, %eax
               	jb	0x4150a7 <__cpu_indicator_init+0x2a5>
               	jmp	0x415040 <__cpu_indicator_init+0x23e>
               	cmpl	$37, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$47, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	ja	0x414f34 <__cpu_indicator_init+0x132>
               	cmpl	$44, %eax
               	je	0x41504c <__cpu_indicator_init+0x24a>
               	ja	0x414f1d <__cpu_indicator_init+0x11b>
               	cmpl	$42, %eax
               	je	0x415058 <__cpu_indicator_init+0x256>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$45, %eax
               	je	0x415058 <__cpu_indicator_init+0x256>
               	cmpl	$46, %eax
               	je	0x415040 <__cpu_indicator_init+0x23e>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$58, %eax
               	je	0x415064 <__cpu_indicator_init+0x262>
               	ja	0x414f47 <__cpu_indicator_init+0x145>
               	cmpl	$55, %eax
               	jmp	0x414fc7 <__cpu_indicator_init+0x1c5>
               	cmpl	$60, %eax
               	je	0x415070 <__cpu_indicator_init+0x26e>
               	cmpl	$61, %eax
               	jmp	0x414f9e <__cpu_indicator_init+0x19c>
               	cmpl	$85, %eax
               	je	0x415094 <__cpu_indicator_init+0x292>
               	ja	0x414fa9 <__cpu_indicator_init+0x1a7>
               	cmpl	$71, %eax
               	je	0x41507c <__cpu_indicator_init+0x27a>
               	ja	0x414f82 <__cpu_indicator_init+0x180>
               	cmpl	$63, %eax
               	je	0x415070 <__cpu_indicator_init+0x26e>
               	cmpl	$69, %eax
               	jae	0x415070 <__cpu_indicator_init+0x26e>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$77, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	ja	0x414f92 <__cpu_indicator_init+0x190>
               	cmpl	$74, %eax
               	jmp	0x414fc7 <__cpu_indicator_init+0x1c5>
               	cmpl	$78, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	cmpl	$79, %eax
               	je	0x41507c <__cpu_indicator_init+0x27a>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$94, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	ja	0x414fce <__cpu_indicator_init+0x1cc>
               	cmpl	$87, %eax
               	je	0x415028 <__cpu_indicator_init+0x226>
               	jb	0x41507c <__cpu_indicator_init+0x27a>
               	cmpl	$90, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	cmpl	$93, %eax
               	je	0x415019 <__cpu_indicator_init+0x217>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	cmpl	$133, %eax
               	je	0x415034 <__cpu_indicator_init+0x232>
               	ja	0x414fef <__cpu_indicator_init+0x1ed>
               	cmpl	$102, %eax
               	jne	0x4150b1 <__cpu_indicator_init+0x2af>
               	movabsq	$73014444035, %rax      # imm = 0x1100000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	cmpl	$142, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	cmpl	$158, %eax
               	je	0x415088 <__cpu_indicator_init+0x286>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$1, 412912(%rip)        # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$6, 412897(%rip)        # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$7, 412882(%rip)        # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$11, 412870(%rip)       # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movabsq	$4294967299, %rax       # imm = 0x100000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$8589934595, %rax       # imm = 0x200000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$12884901891, %rax      # imm = 0x300000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$51539607555, %rax      # imm = 0xC00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$55834574851, %rax      # imm = 0xD00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$60129542147, %rax      # imm = 0xE00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$64424509443, %rax      # imm = 0xF00000003
               	jmp	0x41509e <__cpu_indicator_init+0x29c>
               	movabsq	$68719476739, %rax      # imm = 0x1000000003
               	movq	%rax, 412767(%rip)      # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4150b1 <__cpu_indicator_init+0x2af>
               	movl	$2, 412755(%rip)        # 0x479d04 <__cpu_model+0x4>
               	movl	%r8d, %edx
               	callq	0x414bd4 <get_available_features>
               	movl	$1, 412733(%rip)        # 0x479d00 <__cpu_model>
               	jmp	0x4151e2 <__cpu_indicator_init+0x3e0>
               	cmpl	$1752462657, %r10d      # imm = 0x68747541
               	jne	0x4151e7 <__cpu_indicator_init+0x3e5>
               	cmpl	$15, %r11d
               	jne	0x4151d0 <__cpu_indicator_init+0x3ce>
               	shrl	$20, %eax
               	orl	%ecx, %edx
               	movzbl	%al, %eax
               	decl	%eax
               	cmpl	$7, %eax
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	leaq	202223(%rip), %rcx      # 0x4466e8 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::word_size+0x8>
               	movslq	(%rcx,%rax,4), %rax
               	addq	%rcx, %rax
               	jmpq	*%rax
               	movl	$4, 412664(%rip)        # 0x479d04 <__cpu_model+0x4>
               	cmpl	$4, %edx
               	je	0x41512e <__cpu_indicator_init+0x32c>
               	cmpl	$8, %edx
               	je	0x41513d <__cpu_indicator_init+0x33b>
               	cmpl	$2, %edx
               	jne	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$4, 412639(%rip)        # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$5, 412624(%rip)        # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$6, 412609(%rip)        # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$8, 412590(%rip)        # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$5, 412578(%rip)        # 0x479d04 <__cpu_model+0x4>
               	cmpl	$2, %edx
               	jne	0x415173 <__cpu_indicator_init+0x371>
               	movl	$8, 412567(%rip)        # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$15, %edx
               	ja	0x415184 <__cpu_indicator_init+0x382>
               	movl	$7, 412550(%rip)        # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$47, %edx
               	jbe	0x415167 <__cpu_indicator_init+0x365>
               	cmpl	$79, %edx
               	ja	0x41519a <__cpu_indicator_init+0x398>
               	movl	$9, 412528(%rip)        # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	cmpl	$127, %edx
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$10, 412511(%rip)       # 0x479d08 <__cpu_model+0x8>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$9, 412495(%rip)        # 0x479d04 <__cpu_model+0x4>
               	jmp	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$10, 412483(%rip)       # 0x479d04 <__cpu_model+0x4>
               	cmpl	$31, %edx
               	ja	0x4151d0 <__cpu_indicator_init+0x3ce>
               	movl	$11, 412472(%rip)       # 0x479d08 <__cpu_model+0x8>
               	movl	%r8d, %edx
               	callq	0x414bd4 <get_available_features>
               	movl	$2, 412446(%rip)        # 0x479d00 <__cpu_model>
               	xorl	%r9d, %r9d
               	jmp	0x4151f1 <__cpu_indicator_init+0x3ef>
               	movl	$3, 412431(%rip)        # 0x479d00 <__cpu_model>
               	movl	%r9d, %eax
               	popq	%rbx
               	retq
               	movl	%r9d, %eax
               	retq

<_start>:
               	xorl	%ebp, %ebp
               	movq	%rdx, %r9
               	popq	%rsi
               	movq	%rsp, %rdx
               	andq	$-16, %rsp
               	pushq	%rax
               	pushq	%rsp
               	movq	$4468368, %r8           # imm = 0x442E90
               	movq	$4468272, %rcx          # imm = 0x442E30
               	movq	$4435712, %rdi          # imm = 0x43AF00
               	callq	0x413680 <__libc_start_main@plt>
               	hlt

<deregister_tm_clones>:
               	movl	$4587984, %eax          # imm = 0x4601D0
               	cmpq	$4587984, %rax          # imm = 0x4601D0
               	je	0x415242 <deregister_tm_clones+0x1e>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x415242 <deregister_tm_clones+0x1e>
               	movl	$4587984, %edi          # imm = 0x4601D0
               	jmpq	*%rax
               	retq

<register_tm_clones>:
               	movl	$4587984, %esi          # imm = 0x4601D0
               	movl	$2, %ecx
               	subq	$4587984, %rsi          # imm = 0x4601D0
               	sarq	$3, %rsi
               	movq	%rsi, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	testq	%rax, %rax
               	je	0x415279 <register_tm_clones+0x36>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x415279 <register_tm_clones+0x36>
               	movl	$4587984, %edi          # imm = 0x4601D0
               	jmpq	*%rax
               	retq

<__do_global_dtors_aux>:
               	cmpb	$0, 307071(%rip)        # 0x460200 <completed.7240>
               	jne	0x4152d0 <__do_global_dtors_aux+0x56>
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%r12
               	movl	$4548568, %r12d         # imm = 0x4567D8
               	pushq	%rbx
               	movl	$4548576, %ebx          # imm = 0x4567E0
               	subq	$4548568, %rbx          # imm = 0x4567D8
               	sarq	$3, %rbx
               	decq	%rbx
               	movq	307038(%rip), %rax      # 0x460208 <dtor_idx.7242>
               	cmpq	%rbx, %rax
               	jae	0x4152bf <__do_global_dtors_aux+0x45>
               	incq	%rax
               	movq	%rax, 307023(%rip)      # 0x460208 <dtor_idx.7242>
               	callq	*(%r12,%rax,8)
               	jmp	0x4152a3 <__do_global_dtors_aux+0x29>
               	callq	0x415224 <deregister_tm_clones>
               	popq	%rbx
               	popq	%r12
               	movb	$1, 306994(%rip)        # 0x460200 <completed.7240>
               	popq	%rbp
               	retq
               	retq

<frame_dummy>:
               	jmp	0x415243 <register_tm_clones>
               	nopl	(%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	277630(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 16(%rsp)
               	movb	311663(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415372 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x92>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4154d9 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f9>
               	movq	296(%r15), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rcx)
               	movq	$0, 24(%rcx)
               	leaq	267483(%rip), %rdx      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%rax, 80(%rsp)
               	movl	8(%rbx), %edx
               	cmpl	%ebp, %edx
               	cmovlel	%edx, %ebp
               	movq	(%rbx), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41557f <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x29f>
               	movq	(%rax), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41558e <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x2ae>
               	testl	%ebp, %ebp
               	js	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	cmpl	%ebp, 8(%rbx)
               	jb	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	cmpl	%ebp, 24(%rcx)
               	jb	0x4154d4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f4>
               	movq	(%rax), %rdx
               	testl	%ebp, %ebp
               	jle	0x4154b1 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1d1>
               	movl	%ebp, %esi
               	leaq	-1(%rsi), %rdi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$7, %rdi
               	jae	0x41542b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x14b>
               	xorl	%edi, %edi
               	jmp	0x415489 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1a9>
               	andl	$-8, %esi
               	xorl	%edi, %edi
               	movq	16(%rbx,%rdi,8), %rbp
               	movq	%rbp, 32(%rcx,%rdi,8)
               	movq	24(%rbx,%rdi,8), %rbp
               	movq	%rbp, 40(%rcx,%rdi,8)
               	movq	32(%rbx,%rdi,8), %rbp
               	movq	%rbp, 48(%rcx,%rdi,8)
               	movq	40(%rbx,%rdi,8), %rbp
               	movq	%rbp, 56(%rcx,%rdi,8)
               	movq	48(%rbx,%rdi,8), %rbp
               	movq	%rbp, 64(%rcx,%rdi,8)
               	movq	56(%rbx,%rdi,8), %rbp
               	movq	%rbp, 72(%rcx,%rdi,8)
               	movq	64(%rbx,%rdi,8), %rbp
               	movq	%rbp, 80(%rcx,%rdi,8)
               	movq	72(%rbx,%rdi,8), %rbp
               	movq	%rbp, 88(%rcx,%rdi,8)
               	addq	$8, %rdi
               	cmpq	%rdi, %rsi
               	jne	0x415430 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x150>
               	testq	%rdx, %rdx
               	je	0x4154b1 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1d1>
               	leaq	(%rbx,%rdi,8), %rsi
               	addq	$16, %rsi
               	leaq	(%rcx,%rdi,8), %rcx
               	addq	$32, %rcx
               	xorl	%edi, %edi
               	movq	(%rsi,%rdi,8), %rbp
               	movq	%rbp, (%rcx,%rdi,8)
               	addq	$1, %rdi
               	cmpq	%rdi, %rdx
               	jne	0x4154a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1c0>
               	movq	%rax, 88(%rsp)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r14
               	leaq	40(%rsp), %r12
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	289149(%rip), %rsi      # 0x45be90 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	268605(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	leaq	267018(%rip), %rsi      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419da0 <ThrowClassCastException>
               	leaq	267003(%rip), %rsi      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, %rdi
               	callq	0x419da0 <ThrowClassCastException>
               	nopl	(%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	276922(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	310953(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415638 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x98>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4156e8 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x148>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	267063(%rip), %rcx      # 0x4569b0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415693 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4156e3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	shlq	$2, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136b0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	288622(%rip), %rsi      # 0x45be90 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	268077(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nop

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	276426(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	310457(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415828 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x98>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4158d7 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x147>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	266423(%rip), %rcx      # 0x456920 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415883 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4158d2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136b0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	288127(%rip), %rsi      # 0x45be90 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	267582(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nop

<kfun:kotlin.Any#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	310094(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415993 <kfun:kotlin.Any#hashCode(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Any#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	271259(%rip), %rax      # 0x457d80 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 128(%rsp)
               	leaq	275875(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 120(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	309906(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415a4f <kfun:kotlin.Any#toString(){}kotlin.String+0xaf>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 16(%rsp)
               	movq	8(%rsp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x415aa2 <kfun:kotlin.Any#toString(){}kotlin.String+0x102>
               	leaq	64(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419710 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	movq	%rax, 64(%rsp)
               	testq	%rax, %rax
               	leaq	287844(%rip), %r13      # 0x45bf00 <__unnamed_2>
               	cmovneq	%rax, %r13
               	jmp	0x415ab2 <kfun:kotlin.Any#toString(){}kotlin.String+0x112>
               	movq	$0, 64(%rsp)
               	leaq	287822(%rip), %r13      # 0x45bf00 <__unnamed_2>
               	leaq	72(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	288(%r14), %rcx
               	movq	%rcx, 152(%rsp)
               	leaq	144(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movabsq	$51539607552, %rcx      # imm = 0xC00000000
               	movq	%rcx, 160(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movl	%eax, %edi
               	movq	%r15, %rsi
               	callq	0x43a5d0 <Kotlin_Long_toStringRadix>
               	movq	%rax, %rbp
               	leaq	120(%rsp), %rbx
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	287659(%rip), %rsi      # 0x45bf20 <__unnamed_3>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	309496(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415be9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x415c09 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	movb	8(%r14), %al
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$82, 92(%rcx)
               	jne	0x415c09 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	xorb	8(%rbx), %al
               	xorb	$1, %al
               	jmp	0x415c0b <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x3b>
               	xorl	%eax, %eax
               	andb	$1, %al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309416(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c39 <kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	287488(%rip), %rcx      # 0x45bf40 <__unnamed_4>
               	cmpb	$0, 8(%rbx)
               	leaq	287509(%rip), %rax      # 0x45bf60 <__unnamed_5>
               	cmovneq	%rcx, %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	309358(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c73 <kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movzbl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309320(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c99 <kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Enum#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	309278(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415cc3 <kfun:kotlin.Enum#hashCode(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Enum#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309240(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415ce9 <kfun:kotlin.Enum#toString(){}kotlin.String+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309192(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d19 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	nopl	(%rax,%rax)

<kfun:kotlin.String#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	309144(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d49 <kfun:kotlin.String#toString(){}kotlin.String+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.String#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	309102(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d73 <kfun:kotlin.String#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$168, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	40(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rbp      # imm = 0x600000000
               	movq	%rbp, 32(%rsp)
               	movb	308968(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415df9 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x79>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, 8(%r14)
               	movq	$0, 16(%r14)
               	movq	%r15, %rdi
               	callq	0x43a6d0 <Kotlin_getCurrentStackTrace>
               	movq	%rax, 24(%r14)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	268182(%rip), %rcx      # 0x4575d0 <ktypeglobal:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 48(%rsp)
               	movq	%r14, 24(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	268973(%rip), %rax      # 0x457920 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 8(%rsp)
               	movq	%rcx, 56(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 128(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	268572(%rip), %rbp      # 0x457800 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 136(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 24(%r15)
               	movl	303958(%rip), %eax      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x415f16 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x196>
               	leaq	303946(%rip), %rdi      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	12335(%rip), %rsi       # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	movq	303875(%rip), %rbx      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 32(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	269137(%rip), %rax      # 0x457ad0 <ktypeglobal:kotlin.native.concurrent.Lock#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rbp, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	268445(%rip), %r13      # 0x457890 <ktypeglobal:kotlin.native.concurrent.AtomicInt#internal>
               	movq	%r13, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 24(%rbx)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%r13, 16(%rax)
               	movq	%rcx, 96(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 32(%rbx)
               	movq	%rbp, 40(%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 32(%r14)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$168, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable#<get-message>(){}kotlin.String?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	308312(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416089 <kfun:kotlin.Throwable#<get-message>(){}kotlin.String?+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	308264(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160b9 <kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	308216(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4160e9 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	268322(%rip), %rcx      # 0x457920 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%r14, %rsi
               	cmpq	%rcx, %rax
               	je	0x41610d <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x3d>
               	callq	0x418c40 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>
               	jmp	0x416112 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x42>
               	callq	0x418900 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.Throwable#printStackTrace(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$280, %rsp              # imm = 0x118
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movups	%xmm0, 80(%rsp)
               	movups	%xmm0, 96(%rsp)
               	leaq	267240(%rip), %rax      # 0x457540 <ktypeglobal:kotlin.Throwable.ExceptionTraceBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 72(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 184(%rsp)
               	leaq	176(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbp      # imm = 0x400000000
               	movq	%rbp, 192(%rsp)
               	movb	308012(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4161b5 <kfun:kotlin.Throwable#printStackTrace(){}+0x95>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	72(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 160(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 144(%rsp)
               	movq	%rbx, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	273759(%rip), %rcx      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 152(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, 88(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	%rcx, 120(%rsp)
               	movq	$0, 8(%rax)
               	leaq	272208(%rip), %rax      # 0x4589e0 <ktypeglobal:kotlin.collections.HashSet#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 256(%rsp)
               	movaps	%xmm0, 240(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 248(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 256(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$96, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rcx
               	movq	%rcx, 112(%rsp)
               	movq	$0, 8(%rax)
               	leaq	270760(%rip), %rax      # 0x4584b0 <ktypeglobal:kotlin.collections.HashMap#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rcx, 264(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	263435(%rip), %rcx      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%r14, 32(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	263659(%rip), %r13      # 0x4569b0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%r13, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%rbp, 40(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%r13, 16(%rax)
               	movl	$16, 24(%rax)
               	movq	%rcx, 48(%rsp)
               	movq	%r14, 24(%rbx)
               	movq	$0, 32(%rbx)
               	movq	%rbp, 40(%rbx)
               	movq	%rcx, 48(%rbx)
               	movq	$2, 80(%rbx)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	xorps	%xmm0, %xmm0
               	movq	288(%r12), %rax
               	movq	%rax, 216(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 224(%rsp)
               	movq	48(%rbx), %rax
               	movq	%rax, 232(%rsp)
               	movl	8(%rax), %eax
               	movq	216(%rsp), %rcx
               	bsrl	%eax, %edx
               	xorl	$31, %edx
               	addl	$1, %edx
               	testl	%eax, %eax
               	movl	$33, %eax
               	cmovnel	%edx, %eax
               	movq	%rcx, 288(%r12)
               	movl	%eax, 88(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%r15)
               	movq	120(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movb	$1, 104(%rsp)
               	movq	80(%rsp), %rbx
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	leaq	284752(%rip), %rdx      # 0x45bd78 <__unnamed_6>
               	leaq	72(%rsp), %rdi
               	movq	%rbx, %rsi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	testb	%al, %al
               	je	0x416565 <kfun:kotlin.Throwable#printStackTrace(){}+0x445>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x416587 <kfun:kotlin.Throwable#printStackTrace(){}+0x467>
               	movq	184(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$280, %rsp              # imm = 0x118
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	307019(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416596 <kfun:kotlin.Throwable#printStackTrace(){}+0x476>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rsp), %rsi
               	movq	%rsi, 48(%rsp)
               	leaq	285145(%rip), %rdx      # 0x45bf80 <__unnamed_7>
               	leaq	72(%rsp), %rdi
               	callq	0x416900 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	268178(%rip), %rcx      # 0x457d80 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 64(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f90 <ThrowInvalidReceiverTypeException>

<kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	306800(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416671 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x71>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 32(%rbx)
               	jne	0x4166cd <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xcd>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	%rbx, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	testq	%r14, %r14
               	je	0x4166e4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xe4>
               	leaq	72(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*128(%rax)
               	movq	%rax, %rdi
               	jmp	0x4166eb <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xeb>
               	leaq	32(%rsp), %rdx
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e9d0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x4168e2 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2e2>
               	leaq	284453(%rip), %rdi      # 0x45be10 <__unnamed_8>
               	callq	0x43ab90 <Kotlin_io_Console_println>
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 128(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 288(%rbp)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 64(%rsp)
               	movl	16(%r14), %r15d
               	testl	%r15d, %r15d
               	jns	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movq	8(%r14), %r12
               	movq	%r12, 120(%rsp)
               	movq	%r12, 128(%rsp)
               	movl	8(%r12), %eax
               	movl	%eax, %ebx
               	sarl	$31, %ebx
               	andl	%eax, %ebx
               	movl	8(%r12), %edx
               	movl	%r15d, %edi
               	movl	%ebx, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%r12), %rax
               	cmpl	%ebx, %r15d
               	jge	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movslq	%r15d, %r9
               	leaq	(%r12,%r9,2), %r11
               	addq	$16, %r11
               	movl	%r15d, %r10d
               	notl	%r10d
               	addl	%ebx, %r10d
               	cmpl	$15, %r10d
               	jb	0x41689c <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x29c>
               	addq	$1, %r10
               	movq	%r10, %r8
               	andq	$-16, %r8
               	leaq	-16(%r8), %rax
               	movq	%rax, %rdi
               	shrq	$4, %rdi
               	addq	$1, %rdi
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpq	$112, %rax
               	jae	0x4167d6 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1d6>
               	xorl	%eax, %eax
               	jmp	0x416861 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x261>
               	leaq	(%r12,%r9,2), %rsi
               	addq	$240, %rsi
               	andq	$-8, %rdi
               	negq	%rdi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopl	(%rax)
               	movups	%xmm0, -208(%rsi,%rcx,2)
               	movups	%xmm0, -224(%rsi,%rcx,2)
               	movups	%xmm0, -192(%rsi,%rcx,2)
               	movups	%xmm0, -176(%rsi,%rcx,2)
               	movups	%xmm0, -160(%rsi,%rcx,2)
               	movups	%xmm0, -144(%rsi,%rcx,2)
               	movups	%xmm0, -128(%rsi,%rcx,2)
               	movups	%xmm0, -112(%rsi,%rcx,2)
               	movups	%xmm0, -96(%rsi,%rcx,2)
               	movups	%xmm0, -80(%rsi,%rcx,2)
               	movups	%xmm0, -64(%rsi,%rcx,2)
               	movups	%xmm0, -48(%rsi,%rcx,2)
               	movups	%xmm0, -32(%rsi,%rcx,2)
               	movups	%xmm0, -16(%rsi,%rcx,2)
               	leaq	128(%rcx), %rax
               	movups	%xmm0, 16(%rsi,%rcx,2)
               	movups	%xmm0, (%rsi,%rcx,2)
               	movq	%rax, %rcx
               	addq	$8, %rdi
               	jne	0x4167f0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1f0>
               	testq	%rdx, %rdx
               	je	0x416890 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x290>
               	addq	%r9, %r9
               	leaq	(%r9,%rax,2), %rax
               	addq	%r12, %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x416880 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x280>
               	cmpq	%r8, %r10
               	je	0x4168bf <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	addl	%r8d, %r15d
               	leaq	(%r11,%r8,2), %r11
               	subl	%r15d, %ebx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movw	$0, (%r11,%rax,2)
               	addq	$1, %rax
               	cmpl	%eax, %ebx
               	jne	0x4168b0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2b0>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	$0, 16(%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r14, 24(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 256(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rcx, (%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$124554051584, %rax     # imm = 0x1D00000000
               	movq	%rax, 48(%rsp)
               	movb	305933(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4169d4 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0xd4>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	8(%rax), %rdi
               	movq	%r14, %rsi
               	callq	0x41c650 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x416af9 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1f9>
               	leaq	120(%rsp), %rbx
               	leaq	112(%rsp), %r13
               	leaq	104(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	283504(%rip), %rsi      # 0x45bd78 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	128(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	8(%r12), %rax
               	cmpq	%r14, %rax
               	movq	%r14, %rbp
               	movq	%r14, 8(%rsp)
               	je	0x416b8a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28a>
               	movq	24(%rax), %r15
               	movl	8(%r15), %ebx
               	movq	24(%rbp), %r14
               	movl	8(%r14), %ebp
               	cmpl	%ebp, %ebx
               	movl	%ebx, %edx
               	cmovgl	%ebp, %edx
               	xorl	%r13d, %r13d
               	testl	%edx, %edx
               	cmovsl	%r13d, %edx
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	movq	%r12, 24(%rsp)
               	cmpq	%r13, %rdx
               	je	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	nopl	(%rax)
               	movzbl	305713(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416abb <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1bb>
               	movq	%rdx, %r12
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdx
               	movq	24(%rsp), %r12
               	cmpl	%ebp, 8(%r14)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	cmpl	%ebx, 8(%r15)
               	jbe	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movslq	%ebp, %rax
               	movslq	%ebx, %rcx
               	movq	16(%r15,%rcx,8), %rcx
               	cmpq	%rcx, 16(%r14,%rax,8)
               	jne	0x416b8e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>
               	addq	$1, %r13
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	cmpq	%r13, %rdx
               	jne	0x416aa0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1a0>
               	jmp	0x416b91 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	leaq	72(%rsp), %r13
               	leaq	64(%rsp), %rbx
               	leaq	56(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	283236(%rip), %rsi      # 0x45bd78 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283775(%rip), %rsi      # 0x45bfb0 <__unnamed_9>
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	leaq	80(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283397(%rip), %rsi      # 0x45be70 <__unnamed_10>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	xorl	%eax, %eax
               	jmp	0x416cf3 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3f3>
               	xorl	%ebx, %ebx
               	jmp	0x416ba1 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2a1>
               	movl	%r13d, %edx
               	xorl	%eax, %eax
               	addl	$-1, %edx
               	cmovsl	%eax, %edx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rbx
               	leaq	136(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x4160d0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %eax
               	movq	%rbx, 16(%rsp)
               	subl	%ebx, %eax
               	testl	%eax, %eax
               	jle	0x416c68 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x368>
               	movl	%eax, %r14d
               	xorl	%r15d, %r15d
               	leaq	283696(%rip), %rbx      # 0x45c000 <__unnamed_11>
               	movzbl	305409(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416be0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2e0>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x4160d0 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r15
               	jae	0x416d15 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movq	16(%rax,%r15,8), %r13
               	addq	$1, %r15
               	movq	%r13, 152(%rsp)
               	movq	16(%r12), %rbp
               	movq	%rbp, %rdi
               	leaq	282972(%rip), %rsi      # 0x45bd78 <__unnamed_6>
               	leaq	160(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	168(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	leaq	176(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	cmpq	%r15, %r14
               	movq	8(%rsp), %rbp
               	jne	0x416bd0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2d0>
               	movq	16(%rsp), %r14
               	testl	%r14d, %r14d
               	je	0x416ce0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3e0>
               	leaq	192(%rsp), %r13
               	leaq	184(%rsp), %rdx
               	leaq	200(%rsp), %r15
               	movq	16(%r12), %rbx
               	leaq	282850(%rip), %rsi      # 0x45bd78 <__unnamed_6>
               	movq	%rbx, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283515(%rip), %rsi      # 0x45c020 <__unnamed_12>
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r14d, %esi
               	movq	%r15, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	283531(%rip), %rsi      # 0x45c050 <__unnamed_13>
               	movq	%rbx, %rdi
               	leaq	208(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x416600 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	40(%rbp), %rcx
               	movq	%rcx, 216(%rsp)
               	movb	$1, %al
               	testq	%rcx, %rcx
               	jne	0x416d1a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x41a>
               	movq	40(%rsp), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 288(%rdx)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	(%rsp), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	266288(%rip), %rcx      # 0x457d80 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 224(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f90 <ThrowInvalidReceiverTypeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	$0, 8(%rsp)
               	leaq	266170(%rip), %rax      # 0x457d80 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 136(%rsp)
               	leaq	270787(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 32(%rsp)
               	movb	304815(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416e32 <kfun:kotlin.Throwable#toString(){}kotlin.String+0xc2>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	64(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rsp, %rdi
               	movq	%rdi, 40(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rbx, %rsi
               	callq	0x419480 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x416e7a <kfun:kotlin.Throwable#toString(){}kotlin.String+0x10a>
               	leaq	56(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x4193a0 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	274650(%rip), %rbx      # 0x459f50 <__unnamed_14>
               	cmovneq	%rax, %rbx
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f46 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1d6>
               	movq	%rbp, %r15
               	leaq	80(%rsp), %r13
               	leaq	128(%rsp), %rbp
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	283103(%rip), %rsi      # 0x45c0b0 <__unnamed_15>
               	movq	%rbp, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x416f19 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1a9>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x416f20 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1b0>
               	leaq	282352(%rip), %rsi      # 0x45be10 <__unnamed_8>
               	movq	%r15, %rbp
               	leaq	128(%rsp), %rbx
               	movq	%rbx, %rdi
               	leaq	112(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%rbp)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	%rbx, %rax
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1624, %rsp             # imm = 0x658
               	movq	%rsi, 136(%rsp)
               	movq	%rdi, %rbx
               	movb	304454(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416f9b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x2b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 576(%rsp)
               	movaps	%xmm0, 560(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 24(%rsp)
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 568(%rsp)
               	leaq	560(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 576(%rsp)
               	movq	24(%rbx), %rcx
               	movq	%rcx, 8(%rsp)
               	movl	8(%rcx), %r13d
               	movq	-64(%rax), %rdx
               	movl	$1, %ecx
               	movl	$1, %esi
               	xchgl	%esi, 328(%rdx)
               	movl	%esi, 108(%rsp)
               	movq	$0, 120(%rsp)
               	movl	$1, 128(%rsp)
               	movb	$0, 132(%rsp)
               	movq	-64(%rax), %rax
               	testq	%rax, %rax
               	je	0x417064 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xf4>
               	xchgl	%ecx, 328(%rax)
               	movq	%rax, 120(%rsp)
               	movl	%ecx, 128(%rsp)
               	movb	$1, 132(%rsp)
               	movq	%rdx, 144(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 48(%rsp)
               	movq	48(%rsp), %rax
               	movq	32(%rsp), %r15
               	subq	%r15, %rax
               	sarq	$5, %rax
               	cmpq	%r13, %rax
               	jae	0x41717e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x20e>
               	movq	40(%rsp), %rbx
               	movq	%rbx, %r12
               	subq	%r15, %r12
               	movl	$32, %esi
               	movq	%r13, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r14
               	cmpq	%r15, %rbx
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	leaq	16(%r14), %rax
               	leaq	16(%r15), %rcx
               	jmp	0x417105 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x195>
               	nopl	(%rax,%rax)
               	movq	%rdx, -16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, (%rax)
               	movq	-8(%rcx), %rdx
               	movq	%rdx, -8(%rax)
               	movq	%rcx, -16(%rcx)
               	movq	$0, -8(%rcx)
               	movb	$0, (%rcx)
               	addq	$32, %rax
               	leaq	32(%rcx), %rdx
               	addq	$16, %rcx
               	cmpq	%rbx, %rcx
               	movq	%rdx, %rcx
               	je	0x41711a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1aa>
               	movq	%rax, -16(%rax)
               	movq	-16(%rcx), %rdx
               	cmpq	%rcx, %rdx
               	jne	0x4170d0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x160>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x4170da <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x16a>
               	cmpq	%rbx, %r15
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	movq	%r15, %rbp
               	jmp	0x417139 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c9>
               	nopl	(%rax,%rax)
               	addq	$16, %rbp
               	cmpq	%rbx, %rbp
               	je	0x41714d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
               	movq	(%rbp), %rdi
               	addq	$16, %rbp
               	cmpq	%rbp, %rdi
               	je	0x417130 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
               	callq	0x4136d0 <free@plt>
               	jmp	0x417130 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
               	sarq	$5, %r12
               	testq	%r15, %r15
               	je	0x41715e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1ee>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, 32(%rsp)
               	shlq	$5, %r12
               	addq	%r14, %r12
               	movq	%r12, 40(%rsp)
               	movq	%r13, %rax
               	shlq	$5, %rax
               	addq	%r14, %rax
               	movq	%rax, 48(%rsp)
               	testl	%r13d, %r13d
               	je	0x417766 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
               	leaq	176(%rsp), %rax
               	movq	%rax, 160(%rsp)
               	movq	$0, 168(%rsp)
               	movb	$0, 176(%rsp)
               	movq	$-1, 192(%rsp)
               	leaq	216(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	movq	$0, 208(%rsp)
               	movb	$0, 216(%rsp)
               	movq	$-1, 232(%rsp)
               	leaq	256(%rsp), %rax
               	movq	%rax, 240(%rsp)
               	movq	$0, 248(%rsp)
               	movb	$0, 256(%rsp)
               	movq	$-1, 272(%rsp)
               	leaq	296(%rsp), %rax
               	movq	%rax, 280(%rsp)
               	movq	$0, 288(%rsp)
               	movb	$0, 296(%rsp)
               	movq	$-1, 312(%rsp)
               	leaq	336(%rsp), %rax
               	movq	%rax, 320(%rsp)
               	movq	$0, 328(%rsp)
               	movb	$0, 336(%rsp)
               	movq	$-1, 352(%rsp)
               	leaq	376(%rsp), %rax
               	movq	%rax, 360(%rsp)
               	movq	$0, 368(%rsp)
               	movb	$0, 376(%rsp)
               	movq	$-1, 392(%rsp)
               	leaq	416(%rsp), %rax
               	movq	%rax, 400(%rsp)
               	movq	$0, 408(%rsp)
               	movb	$0, 416(%rsp)
               	movq	$-1, 432(%rsp)
               	leaq	456(%rsp), %rax
               	movq	%rax, 440(%rsp)
               	movq	$0, 448(%rsp)
               	movb	$0, 456(%rsp)
               	movq	$-1, 472(%rsp)
               	leaq	496(%rsp), %rax
               	movq	%rax, 480(%rsp)
               	movq	$0, 488(%rsp)
               	movb	$0, 496(%rsp)
               	movq	$-1, 512(%rsp)
               	leaq	536(%rsp), %rax
               	movq	%rax, 520(%rsp)
               	movq	$0, 528(%rsp)
               	movb	$0, 536(%rsp)
               	movq	$-1, 552(%rsp)
               	leaq	80(%rsp), %rbp
               	leaq	592(%rsp), %r15
               	xorl	%r14d, %r14d
               	movq	8(%rsp), %rbx
               	movq	%r13, 96(%rsp)
               	jmp	0x4173d4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
               	movq	%rcx, (%r13)
               	movq	80(%rsp), %rax
               	movq	%rax, 16(%r13)
               	movq	8(%rsp), %rbx
               	movq	72(%rsp), %rax
               	movq	%rax, 8(%r13)
               	movq	%rbp, 64(%rsp)
               	movq	$0, 72(%rsp)
               	movb	$0, 80(%rsp)
               	addq	$32, %r13
               	movq	%r13, 40(%rsp)
               	movq	96(%rsp), %r13
               	leaq	592(%rsp), %r15
               	addq	$1, %r14
               	cmpq	%r13, %r14
               	je	0x417662 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6f2>
               	movq	16(%rbx,%r14,8), %rcx
               	cmpq	$2, %rcx
               	jb	0x4173c7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x457>
               	addq	$-1, %rcx
               	movq	40(%rsp), %r13
               	movq	32(%rsp), %rax
               	movq	%r13, %rbx
               	movq	%rax, 16(%rsp)
               	subq	%rax, %rbx
               	movq	%rbx, %r12
               	sarq	$5, %r12
               	leaq	187141(%rip), %rax      # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%rax, (%rsp)
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	xorl	%r8d, %r8d
               	leaq	187122(%rip), %r9       # 0x444f0c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%eax, %eax
               	callq	0x435c70 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
               	movq	%rbp, 64(%rsp)
               	movq	%r15, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rbp, %rcx
               	movq	%rax, %rbp
               	movq	%rcx, %rax
               	cmpq	$16, %rbp
               	jb	0x41745e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ee>
               	testq	%rbp, %rbp
               	js	0x417a17 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaa7>
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 64(%rsp)
               	movq	%rbp, 80(%rsp)
               	testq	%rbp, %rbp
               	je	0x417487 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
               	cmpq	$1, %rbp
               	jne	0x417474 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x504>
               	movb	592(%rsp), %cl
               	movb	%cl, (%rax)
               	jmp	0x417487 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
               	movq	%rax, %rdi
               	leaq	592(%rsp), %rsi
               	movq	%rbp, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%rbp, 72(%rsp)
               	movq	64(%rsp), %rax
               	movb	$0, (%rax,%rbp)
               	cmpq	%r13, 48(%rsp)
               	je	0x4174c3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x553>
               	leaq	16(%r13), %rax
               	movq	%rax, (%r13)
               	movq	64(%rsp), %rcx
               	leaq	80(%rsp), %rbp
               	cmpq	%rbp, %rcx
               	jne	0x417383 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x413>
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x417390 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x420>
               	testq	%rbx, %rbx
               	movq	%r12, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r12), %r15
               	movabsq	$576460752303423487, %rcx # imm = 0x7FFFFFFFFFFFFFF
               	cmpq	%rcx, %r15
               	cmovaq	%rcx, %r15
               	addq	%r12, %rax
               	cmovbq	%rcx, %r15
               	testq	%r15, %r15
               	leaq	80(%rsp), %rbx
               	je	0x417507 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x597>
               	movl	$32, %esi
               	movq	%r15, %rdi
               	callq	0x4136c0 <calloc@plt>
               	jmp	0x417509 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
               	xorl	%eax, %eax
               	shlq	$5, %r12
               	leaq	(%rax,%r12), %rdx
               	addq	$16, %rdx
               	movq	%rdx, (%rax,%r12)
               	movq	64(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	je	0x417536 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5c6>
               	leaq	(%rax,%r12), %rdx
               	movq	%rcx, (%rdx)
               	movq	80(%rsp), %rcx
               	movq	%rcx, 16(%rax,%r12)
               	jmp	0x41753c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5cc>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 8(%rax,%r12)
               	movq	%rbx, 64(%rsp)
               	movq	$0, 72(%rsp)
               	movb	$0, 80(%rsp)
               	movq	16(%rsp), %r12
               	cmpq	%r12, %r13
               	movq	%rax, 152(%rsp)
               	je	0x41760c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x69c>
               	leaq	16(%rax), %rcx
               	leaq	16(%r12), %rax
               	jmp	0x4175b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x646>
               	nopl	(%rax)
               	movq	%rcx, -16(%rbp)
               	movq	(%rax), %rcx
               	movq	%rcx, (%rbp)
               	movq	-8(%rax), %rcx
               	movq	%rcx, -8(%rbp)
               	movq	%rax, -16(%rax)
               	movq	$0, -8(%rax)
               	movb	$0, (%rax)
               	leaq	32(%rbp), %rcx
               	leaq	32(%rax), %rdx
               	addq	$16, %rax
               	cmpq	%r13, %rax
               	movq	%rdx, %rax
               	je	0x4175cf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x65f>
               	movq	%rcx, %rbp
               	movq	%rcx, -16(%rcx)
               	movq	-16(%rax), %rcx
               	cmpq	%rax, %rcx
               	jne	0x417580 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x610>
               	movups	(%rcx), %xmm0
               	movups	%xmm0, (%rbp)
               	jmp	0x41758b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x61b>
               	addq	$16, %rbp
               	addq	$32, %rbp
               	cmpq	%r12, %r13
               	je	0x417610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
               	movq	%r12, %rbx
               	jmp	0x4175f9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x689>
               	nopl	(%rax,%rax)
               	addq	$16, %rbx
               	cmpq	%r13, %rbx
               	je	0x417610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4175f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4175f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
               	leaq	32(%rax), %rbp
               	testq	%r12, %r12
               	movq	96(%rsp), %r13
               	je	0x417622 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6b2>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	152(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rbp, 40(%rsp)
               	shlq	$5, %r15
               	addq	%rax, %r15
               	movq	%r15, 48(%rsp)
               	movq	64(%rsp), %rdi
               	leaq	80(%rsp), %rbp
               	cmpq	%rbp, %rdi
               	movq	8(%rsp), %rbx
               	je	0x4173bf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4173bf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
               	movq	520(%rsp), %rdi
               	leaq	536(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41767c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x70c>
               	callq	0x43b745 <operator delete(void*)>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417696 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x726>
               	callq	0x43b745 <operator delete(void*)>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x740>
               	callq	0x43b745 <operator delete(void*)>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176ca <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x75a>
               	callq	0x43b745 <operator delete(void*)>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176e4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x774>
               	callq	0x43b745 <operator delete(void*)>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4176fe <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x78e>
               	callq	0x43b745 <operator delete(void*)>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417718 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7a8>
               	callq	0x43b745 <operator delete(void*)>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417732 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7c2>
               	callq	0x43b745 <operator delete(void*)>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41774c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7dc>
               	callq	0x43b745 <operator delete(void*)>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417766 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
               	callq	0x43b745 <operator delete(void*)>
               	movq	120(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	movl	128(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	cmpl	$1, %eax
               	jne	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	movb	302410(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41779e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	addq	$328, %rdi              # imm = 0x148
               	movl	108(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	cmpl	$1, %eax
               	jne	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	movb	302351(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4177d2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 616(%rsp)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 600(%rsp)
               	leaq	592(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 608(%rsp)
               	movq	40(%rsp), %rbp
               	movq	32(%rsp), %r13
               	movq	%rbp, %r14
               	subq	%r13, %r14
               	movq	%r14, %rbx
               	shrq	$5, %rbx
               	testl	%ebx, %ebx
               	movq	%r13, 16(%rsp)
               	movq	%rbp, 8(%rsp)
               	js	0x417a23 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xab3>
               	movq	296(%rax), %rdi
               	movq	%r14, %rax
               	shrq	$2, %rax
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%rax, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	258052(%rip), %rax      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%r15)
               	movl	%ebx, 24(%r15)
               	movq	%rcx, 96(%rsp)
               	movq	%rcx, 616(%rsp)
               	cmpq	%r13, %rbp
               	jne	0x4178b7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x947>
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417975 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa05>
               	sarq	$5, %r14
               	cmpq	$1, %r14
               	movl	$1, %ebp
               	cmovaq	%r14, %rbp
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	xorl	%ebx, %ebx
               	leaq	160(%rsp), %r14
               	movabsq	$4294967296, %r12       # imm = 0x100000000
               	nopl	(%rax,%rax)
               	movq	$0, 184(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 168(%rsp)
               	movq	%r14, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 176(%rsp)
               	movq	(%r13), %rdi
               	leaq	184(%rsp), %rsi
               	callq	0x436800 <CreateStringFromCString>
               	movq	184(%rsp), %rax
               	movq	%rbx, %rcx
               	sarq	$29, %rcx
               	movq	%rax, 32(%r15,%rcx)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	%r12, %rbx
               	addq	$32, %r13
               	addq	$-1, %rbp
               	jne	0x4178f0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x980>
               	movq	96(%rsp), %r15
               	movq	%r15, 584(%rsp)
               	movq	600(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	16(%rsp), %r14
               	movq	8(%rsp), %rbp
               	cmpq	%rbp, %r14
               	je	0x4179cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa5c>
               	movq	%r14, %rbx
               	jmp	0x4179b9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa49>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%rbp, %rbx
               	je	0x4179cc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa5c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4179b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa40>
               	callq	0x4136d0 <free@plt>
               	jmp	0x4179b0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa40>
               	testq	%r14, %r14
               	je	0x4179d9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa69>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	136(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	568(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$1624, %rsp             # imm = 0x658
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	185714(%rip), %rdi      # 0x444f90 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4362d0 <std::__throw_length_error(char const*)>
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	movq	%rax, %rbx
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417c87 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd17>
               	movq	%rax, %rbx
               	movq	520(%rsp), %rdi
               	leaq	536(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b56 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbe6>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b74 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc04>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b92 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc22>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bb0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc40>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bce <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc5e>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bec <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc7c>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c0a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc9a>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c28 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xcb8>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c46 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xcd6>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
               	callq	0x43b745 <operator delete(void*)>
               	leaq	32(%rsp), %rdi
               	callq	0x4362f0 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
               	leaq	112(%rsp), %rdi
               	callq	0x436350 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	callq	0x43b745 <operator delete(void*)>
               	movq	480(%rsp), %rdi
               	leaq	496(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a71 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb01>
               	callq	0x43b745 <operator delete(void*)>
               	movq	440(%rsp), %rdi
               	leaq	456(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417a8a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb1a>
               	callq	0x43b745 <operator delete(void*)>
               	movq	400(%rsp), %rdi
               	leaq	416(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417aa3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb33>
               	callq	0x43b745 <operator delete(void*)>
               	movq	360(%rsp), %rdi
               	leaq	376(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417abc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb4c>
               	callq	0x43b745 <operator delete(void*)>
               	movq	320(%rsp), %rdi
               	leaq	336(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417ad5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb65>
               	callq	0x43b745 <operator delete(void*)>
               	movq	280(%rsp), %rdi
               	leaq	296(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417aee <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb7e>
               	callq	0x43b745 <operator delete(void*)>
               	movq	240(%rsp), %rdi
               	leaq	256(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b07 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb97>
               	callq	0x43b745 <operator delete(void*)>
               	movq	200(%rsp), %rdi
               	leaq	216(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b20 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbb0>
               	callq	0x43b745 <operator delete(void*)>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417b35 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbc5>
               	jmp	0x417b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
               	movq	%rax, %rbx
               	movq	24(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	600(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	8(%rsp), %rax
               	cmpq	%rax, 16(%rsp)
               	je	0x417cc4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd54>
               	movq	16(%rsp), %rbp
               	movq	(%rbp), %rdi
               	addq	$16, %rbp
               	cmpq	%rbp, %rdi
               	je	0x417cb9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd49>
               	callq	0x4136d0 <free@plt>
               	addq	$16, %rbp
               	cmpq	8(%rsp), %rbp
               	jne	0x417ca7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd37>
               	cmpq	$0, 16(%rsp)
               	je	0x417cd6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd66>
               	movq	16(%rsp), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<checkRangeIndexes>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movl	%edi, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 192(%rsp)
               	movups	%xmm0, 8(%rsp)
               	leaq	266840(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 32(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 64(%rsp)
               	movb	300859(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417da6 <checkRangeIndexes+0xc6>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebx, %ebx
               	js	0x417dd8 <checkRangeIndexes+0xf8>
               	cmpl	%r15d, %ebp
               	jg	0x417dd8 <checkRangeIndexes+0xf8>
               	cmpl	%ebp, %ebx
               	jg	0x417eb5 <checkRangeIndexes+0x1d5>
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rsp, %rdi
               	movq	%rdi, 72(%rsp)
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	80(%rsp), %rdx
               	leaq	279258(%rip), %rsi      # 0x45c0d0 <__unnamed_16>
               	movq	%rsp, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	88(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebx, %esi
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	96(%rsp), %rdx
               	leaq	279271(%rip), %rsi      # 0x45c100 <__unnamed_17>
               	movq	%rsp, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	104(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebp, %esi
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	112(%rsp), %rdx
               	leaq	279284(%rip), %rsi      # 0x45c130 <__unnamed_18>
               	movq	%rsp, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	120(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%r15d, %esi
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	257898(%rip), %rcx      # 0x456e00 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 136(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 144(%rsp)
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	152(%rsp), %rdx
               	leaq	279029(%rip), %rsi      # 0x45c0d0 <__unnamed_16>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	160(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	168(%rsp), %rdx
               	leaq	279112(%rip), %rsi      # 0x45c150 <__unnamed_19>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	176(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebp, %esi
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	184(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	257846(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 192(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	300314(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417fc7 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x17>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x417ff2 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x42>
               	cmpl	%ebp, 8(%rbx)
               	jbe	0x418001 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x51>
               	movq	(%rbx), %rax
               	movslq	%ebp, %rax
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256151(%rip), %rsi      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419da0 <ThrowClassCastException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edx, %r14d
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	300214(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41802b <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x1b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x4180b6 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa6>
               	movl	8(%rbx), %edx
               	movl	%ebp, %edi
               	movl	%r14d, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%rbx), %rax
               	cmpl	%r14d, %ebp
               	jge	0x4180b1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movslq	%ebp, %rdx
               	notl	%ebp
               	addl	%r14d, %ebp
               	je	0x418094 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x84>
               	addq	$1, %rbp
               	movq	%rbp, %rcx
               	andq	$-2, %rcx
               	leaq	(%rcx,%rdx), %rax
               	leaq	(%rbx,%rdx,8), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, (%rdx,%rsi,8)
               	addq	$2, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x418080 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x70>
               	cmpq	%rcx, %rbp
               	jne	0x418097 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x87>
               	jmp	0x4180b1 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movq	%rdx, %rax
               	movl	%r14d, %ecx
               	nopw	(%rax,%rax)
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$1, %rax
               	cmpl	%eax, %ecx
               	jne	0x4180a0 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x90>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	255955(%rip), %rsi      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419da0 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.MemoryModel.$init_global#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$384, %rsp              # imm = 0x180
               	leaq	88(%rsp), %rbx
               	movl	$296, %edx              # imm = 0x128
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 96(%rsp)
               	movq	%rbx, 288(%r14)
               	movabsq	$158913789952, %rax     # imm = 0x2500000000
               	movq	%rax, 104(%rsp)
               	movb	299949(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418134 <kfun:kotlin.native.MemoryModel.$init_global#internal+0x64>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	259444(%rip), %rbx      # 0x4576d0 <ktypeglobal:kotlin.native.MemoryModel#internal>
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 112(%rsp)
               	movq	%rcx, 120(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 128(%rsp)
               	movq	%rcx, 136(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	255629(%rip), %rbx      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 160(%rsp)
               	movq	%rcx, 168(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 176(%rsp)
               	movq	120(%rsp), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 16(%rax)
               	movq	168(%rsp), %rax
               	movq	%rax, 192(%rsp)
               	movq	136(%rsp), %rcx
               	movq	%rcx, 200(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 24(%rax)
               	movq	168(%rsp), %rax
               	movq	%rax, 208(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 216(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	168(%rsp), %rsi
               	movq	%rsi, 224(%rsp)
               	movq	%rsi, 294761(%rip)      # 0x460210 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	leaq	294754(%rip), %rdi      # 0x460210 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rsi), %rax
               	movq	%rax, 232(%rsp)
               	leaq	278207(%rip), %rcx      # 0x45c180 <__unnamed_20>
               	movq	%rcx, 8(%rax)
               	movl	$0, 16(%rax)
               	movq	24(%rsi), %rax
               	movq	%rax, 240(%rsp)
               	leaq	278209(%rip), %rcx      # 0x45c1a0 <__unnamed_21>
               	movq	%rcx, 8(%rax)
               	movl	$1, 16(%rax)
               	movq	16(%rsi), %rax
               	movq	%rax, 248(%rsp)
               	leaq	278211(%rip), %rcx      # 0x45c1c0 <__unnamed_22>
               	movq	%rcx, 8(%rax)
               	movl	$2, 16(%rax)
               	callq	0x424830 <InitAndRegisterGlobal>
               	movq	294652(%rip), %rax      # 0x460210 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rax), %rcx
               	movq	%rcx, 256(%rsp)
               	movq	%rcx, 264(%rsp)
               	movq	24(%rax), %rcx
               	movq	%rcx, 272(%rsp)
               	movq	%rcx, 280(%rsp)
               	movq	16(%rax), %rax
               	movq	%rax, 288(%rsp)
               	movq	%rax, 296(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 304(%rsp)
               	movq	%rcx, 312(%rsp)
               	movq	312(%rsp), %rax
               	movq	%rax, 320(%rsp)
               	movq	264(%rsp), %rcx
               	movq	%rcx, 328(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 16(%rax)
               	movq	312(%rsp), %rax
               	movq	%rax, 336(%rsp)
               	movq	280(%rsp), %rcx
               	movq	%rcx, 344(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 24(%rax)
               	movq	312(%rsp), %rax
               	movq	%rax, 352(%rsp)
               	movq	296(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movq	(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	312(%rsp), %rbx
               	movq	%rbx, 368(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r15
               	movq	$0, 8(%rax)
               	leaq	266569(%rip), %rcx      # 0x4595c0 <ktypeglobal:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0#internal>
               	movq	%rcx, 16(%rax)
               	movq	%r15, 24(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	266276(%rip), %rcx      # 0x4594d0 <ktypeglobal:kotlin.enums.EnumEntriesList#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r15, 24(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	leaq	72(%rsp), %rsi
               	movq	288(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	%rbx, %rdi
               	callq	0x41fe70 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rbx, 376(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	leaq	294147(%rip), %rdi      # 0x460218 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movq	%rbx, %rsi
               	callq	0x424830 <InitAndRegisterGlobal>
               	movq	96(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$384, %rsp              # imm = 0x180
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	32(%rsp), %r12
               	leaq	40(%rsp), %rbp
               	movups	%xmm0, 88(%rsp)
               	leaq	264731(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	298764(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4185d5 <kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String+0x95>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r14
               	movq	%r14, 24(%rsp)
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	0x418670 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	277476(%rip), %rsi      # 0x45c1f0 <__unnamed_23>
               	movq	%r14, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 56(%rsp)
               	leaq	64(%rsp), %rsi
               	callq	0x418670 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	leaq	72(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r15)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.debugString#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movups	%xmm0, 144(%rsp)
               	leaq	264430(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 136(%rsp)
               	movq	$0, 40(%rsp)
               	leaq	259762(%rip), %rax      # 0x457d80 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 64(%rsp)
               	movb	298433(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418720 <kfun:kotlin.native.concurrent.debugString#internal+0xb0>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x418885 <kfun:kotlin.native.concurrent.debugString#internal+0x215>
               	leaq	96(%rsp), %rbp
               	leaq	88(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	%r12, 72(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	32(%rsp), %rdi
               	movq	%rdi, 80(%rsp)
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rsi
               	callq	0x419480 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	276781(%rip), %rsi      # 0x45c0b0 <__unnamed_15>
               	movq	%r12, %rdi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*120(%rax)
               	movl	%eax, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 168(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 176(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbp, %rsi
               	callq	0x43a5d0 <Kotlin_Long_toStringRadix>
               	movq	%rax, 24(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	jmp	0x41888c <kfun:kotlin.native.concurrent.debugString#internal+0x21c>
               	leaq	275844(%rip), %rax      # 0x45be10 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	298005(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4188cc <kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String+0x1c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	leaq	181970(%rip), %rdx      # 0x444fa8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x437240 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x436800 <CreateStringFromCString>
               	movq	%rax, (%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 16(%rsp)
               	movb	297816(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418989 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x89>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	293042(%rip), %eax      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x4189ba <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0xba>
               	leaq	293030(%rip), %rdi      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1419(%rip), %rsi        # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 292959(%rip)      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418a57 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x157>
               	movq	24(%r12), %r15
               	movq	%r15, %rdi
               	callq	0x419140 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	movq	16(%r12), %rax
               	movq	%rax, 40(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 48(%rsp)
               	cmpq	%rbx, 292914(%rip)      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418a4f <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x14f>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	movq	8(%rax), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x418a78 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x178>
               	leaq	80(%rsp), %rsi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$89, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	callq	*(%rax)
               	movq	%rax, %rbx
               	movq	16(%r12), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rbx, 8(%rax)
               	movq	8(%r12), %rax
               	movq	%rax, 112(%rsp)
               	movq	$0, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x4191e0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%r15, %rdi
               	callq	0x4191e0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	297417(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418b18 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x68>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r14), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	292644(%rip), %eax      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418b48 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x98>
               	leaq	292632(%rip), %rdi      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1021(%rip), %rsi        # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 292561(%rip)      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	setne	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	297231(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x418c03 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x93>
               	movq	%r15, %rdi
               	callq	0x418ab0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	je	0x418c14 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xa4>
               	leaq	24(%rsp), %rsi
               	movq	%r15, %rdi
               	callq	0x418900 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	testq	%rax, %rax
               	je	0x418c1d <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xad>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rcx)
               	jmp	0x418c24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x418ab0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x418bd9 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x69>
               	leaq	275957(%rip), %rax      # 0x45c210 <__unnamed_24>
               	jmp	0x418c24 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	leaq	274924(%rip), %rax      # 0x45be10 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	297004(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418cb5 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x75>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %r14
               	movq	%r14, %rdi
               	callq	0x419140 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 176(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$73014444032, %rax      # imm = 0x1100000000
               	movq	%rax, 64(%rsp)
               	movq	8(%rbx), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	80(%rsp), %rbp
               	movq	%rbp, 88(%rsp)
               	movl	292104(%rip), %eax      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418d64 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x124>
               	leaq	292092(%rip), %rdi      # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	481(%rip), %rsi         # 0x418f40 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	cmpq	292021(%rip), %rbp      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	je	0x418e06 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1c6>
               	movq	80(%rsp), %rbp
               	movq	%rbp, 96(%rsp)
               	movl	292055(%rip), %eax      # 0x460258 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418d99 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x159>
               	leaq	292043(%rip), %rdi      # 0x460258 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	684(%rip), %rsi         # 0x419040 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	movq	291976(%rip), %rax      # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 104(%rsp)
               	cmpq	%rax, %rbp
               	jne	0x418e78 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x238>
               	movq	8(%rbx), %rax
               	movq	291943(%rip), %rcx      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	254298(%rip), %rcx      # 0x456f40 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	275562(%rip), %rsi      # 0x45c260 <__unnamed_25>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	8(%rbx), %r13
               	movl	291912(%rip), %eax      # 0x460258 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418e28 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1e8>
               	leaq	291900(%rip), %rdi      # 0x460258 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	541(%rip), %rsi         # 0x419040 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	movq	291833(%rip), %rax      # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 8(%r13)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	testq	%rdi, %rdi
               	je	0x418ebc <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x27c>
               	leaq	144(%rsp), %rsi
               	callq	0x416f70 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, 80(%rsp)
               	movq	$0, 16(%rbx)
               	movq	8(%rbx), %rax
               	movq	80(%rsp), %rcx
               	movq	%rcx, 176(%rsp)
               	movq	%rcx, 8(%rax)
               	movq	80(%rsp), %rbx
               	movq	%rbx, 32(%rsp)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, %rdi
               	callq	0x4191e0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %r15
               	movq	%r15, 136(%rsp)
               	callq	0x43c135 <__cxa_end_catch>
               	movq	8(%rbx), %rax
               	movq	291627(%rip), %rcx      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 24(%rsp)
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%r14, %rdi
               	callq	0x4191e0 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	296263(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418f9a <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal+0x5a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256494(%rip), %rdx      # 0x4579b0 <ktypeglobal:kotlin.native.concurrent.UNINITIALIZED#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 291406(%rip)      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	leaq	291399(%rip), %rdi      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	291392(%rip), %rax      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	291326(%rip), %rsi      # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	callq	0x424830 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	296007(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41909a <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal+0x5a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256382(%rip), %rdx      # 0x457a40 <ktypeglobal:kotlin.native.concurrent.INITIALIZING#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 291158(%rip)      # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	leaq	291151(%rip), %rdi      # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	291144(%rip), %rax      # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	291078(%rip), %rsi      # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	callq	0x424830 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#lock(){}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	295820(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419155 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x15>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %rcx
               	cmpl	$2, -72(%rax)
               	je	0x419180 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x40>
               	leaq	-72(%rax), %rdi
               	leaq	197(%rip), %rsi         # 0x419240 <kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal>
               	callq	0x43a590 <CallInitThreadLocal>
               	xorl	%edi, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	nopl	(%rax)
               	movzbl	295729(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4191b0 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x70>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	sete	%cl
               	cmpl	%ebp, %eax
               	je	0x4191cd <kfun:kotlin.native.concurrent.Lock#lock(){}+0x8d>
               	testb	%cl, %cl
               	je	0x4191a0 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x60>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	16(%rbx), %rax
               	lock
               	addl	$1, 8(%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.Lock#unlock(){}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	295660(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4191f5 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x15>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movl	8(%rax), %eax
               	testl	%eax, %eax
               	jle	0x419210 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x30>
               	movq	16(%rbx), %rax
               	lock
               	addl	$-1, 8(%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	xorl	%ebp, %ebp
               	xorl	%edi, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	8(%rbx), %rcx
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$80, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movb	295490(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41929f <kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal+0x5f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%edi, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	%rax, %r14
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	256143(%rip), %rcx      # 0x457b60 <ktypeglobal:kotlin.native.concurrent.CurrentThread#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	%rbx, (%rax)
               	xorl	%edi, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	251056(%rip), %rdx      # 0x456800 <ktypeglobal:kotlin.Any#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	xorl	%edi, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$80, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	295126(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x419415 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x75>
               	movq	8(%r15), %rax
               	testl	$512, 88(%rax)          # imm = 0x200
               	jne	0x419427 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x87>
               	jmp	0x419456 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	testl	$512, 88(%rax)          # imm = 0x200
               	je	0x419456 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	movq	80(%rax), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x419456 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
               	leaq	32(%rsp), %rdx
               	movl	$46, %esi
               	callq	0x4201b0 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	movq	%rax, %rdi
               	movl	$36, %esi
               	movq	%r14, %rdx
               	callq	0x4201b0 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	jmp	0x419458 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb8>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	260833(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	movb	294866(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41950f <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x8f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	88(%rax), %ecx
               	testl	$256, %ecx              # imm = 0x100
               	jne	0x419541 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xc1>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	72(%rax), %r15
               	movq	%r15, 24(%rsp)
               	xorl	%ebx, %ebx
               	testq	%r15, %r15
               	je	0x419520 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	andl	$512, %ecx              # imm = 0x200
               	je	0x419520 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	movq	80(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	testq	%rbx, %rbx
               	je	0x41951e <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x9e>
               	cmpl	$0, 8(%r15)
               	je	0x419520 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	leaq	48(%rsp), %r12
               	leaq	80(%rsp), %r13
               	movq	%r13, 40(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	273681(%rip), %rsi      # 0x45c2b0 <__unnamed_26>
               	movq	%r13, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	jmp	0x419520 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	nop

<kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	294648(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4195e9 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x419614 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x419614 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	8(%rbx), %rax
               	cmpq	%rax, 8(%r14)
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	294574(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419633 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	movl	289823(%rip), %eax      # 0x46025c <state_global$kotlin.native.internal.NativePtr>
               	cmpl	$2, %eax
               	je	0x419655 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x35>
               	leaq	289811(%rip), %rdi      # 0x46025c <state_global$kotlin.native.internal.NativePtr>
               	leaq	704(%rip), %rsi         # 0x419910 <kfun:kotlin.native.internal.NativePtr.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	xorl	%ebx, %eax
               	popq	%rbx
               	retq

<kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	294424(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4196c9 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String+0x69>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x419710 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	273426(%rip), %rsi      # 0x45c2f0 <__unnamed_27>
               	cmovneq	%rax, %rsi
               	leaq	273383(%rip), %rdi      # 0x45c2d0 <__unnamed_28>
               	movq	%r12, %rdx
               	callq	0x437010 <Kotlin_String_plusImpl>
               	movq	%rax, (%r12)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movups	%xmm0, 120(%rsp)
               	leaq	260177(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	294206(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4197a3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x93>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	80(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	testq	%rbx, %rbx
               	je	0x419849 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x139>
               	movq	72(%rax), %r15
               	movq	%r15, 64(%rsp)
               	testq	%r15, %r15
               	je	0x4198e3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	movl	8(%r15), %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	cmpb	$0, 171503(%rip)        # 0x4435f8 <BOOLEAN_RANGE_TO>
               	jne	0x419850 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	testl	%ebp, %ebp
               	jne	0x419850 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x140>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	testl	%ebp, %ebp
               	movq	$0, 8(%rax)
               	leaq	250374(%rip), %rdx      # 0x456a40 <ktypeglobal:kotlin.Boolean#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	sete	24(%rax)
               	jmp	0x41986a <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x15a>
               	xorl	%ebx, %ebx
               	jmp	0x4198e3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	xorl	%eax, %eax
               	testl	%ebp, %ebp
               	sete	%al
               	shlq	$4, %rax
               	leaq	271758(%rip), %rcx      # 0x45bdf0 <BOOLEAN_CACHE>
               	addq	%rax, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	%rcx, 72(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	testq	%rcx, %rcx
               	je	0x4198e3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	cmpb	$0, 8(%rcx)
               	jne	0x4198e3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x1d3>
               	leaq	88(%rsp), %r13
               	leaq	112(%rsp), %rbp
               	movq	%rbp, 80(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	272888(%rip), %rsi      # 0x45c2b0 <__unnamed_26>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.internal.NativePtr.$init_global#internal>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	293753(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419968 <kfun:kotlin.native.internal.NativePtr.$init_global#internal+0x58>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	255360(%rip), %rdx      # 0x457f10 <ktypeglobal:kotlin.native.internal.NativePtr.Companion#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 288912(%rip)      # 0x460230 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	leaq	288905(%rip), %rdi      # 0x460230 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	288898(%rip), %rax      # 0x460230 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	$0, 8(%rax)
               	movq	288883(%rip), %rsi      # 0x460230 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	callq	0x424830 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	leaq	32(%rsp), %rbx
               	movups	%xmm0, 104(%rsp)
               	leaq	259444(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	293475(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419a7e <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x9e>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	96(%rsp), %rdi
               	movq	%rdi, 24(%rsp)
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	leaq	272542(%rip), %rbx      # 0x45c360 <__unnamed_29>
               	movq	%rbx, %rsi
               	cmpq	%r15, %rax
               	je	0x419af3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	testq	%rax, %rax
               	je	0x419aec <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x10c>
               	leaq	40(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x419af3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	leaq	271133(%rip), %rsi      # 0x45be10 <__unnamed_8>
               	movq	%rsi, 40(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	272511(%rip), %rsi      # 0x45c390 <__unnamed_30>
               	movq	%rbp, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*8(%rax)
               	cmpq	%r15, %rax
               	je	0x419b78 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	testq	%rax, %rax
               	je	0x419b71 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x191>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rbx
               	jmp	0x419b78 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	leaq	271000(%rip), %rbx      # 0x45be10 <__unnamed_8>
               	leaq	80(%rsp), %rdx
               	movq	%rbx, 72(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	293124(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419bdd <kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4199e0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<ThrowNullPointerException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	292996(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419c5d <ThrowNullPointerException+0x5d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	251028(%rip), %rcx      # 0x457120 <ktypeglobal:kotlin.NullPointerException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowArrayIndexOutOfBoundsException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	292788(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419d2d <ThrowArrayIndexOutOfBoundsException+0x5d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	250980(%rip), %rcx      # 0x4571c0 <ktypeglobal:kotlin.ArrayIndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowClassCastException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$176, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 160(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	253835(%rip), %rax      # 0x457d80 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 32(%rsp)
               	leaq	258454(%rip), %rcx      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 72(%rsp)
               	leaq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 80(%rsp)
               	movb	292468(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419e6d <ThrowClassCastException+0xcd>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 88(%rsp)
               	movq	%rbx, 16(%rsp)
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 96(%rsp)
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	112(%rsp), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	48(%rsp), %rdi
               	movq	%rdi, 104(%rsp)
               	movq	%rax, 56(%rsp)
               	callq	0x419660 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	120(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rdx
               	leaq	271580(%rip), %rsi      # 0x45c3b0 <__unnamed_31>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	136(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419660 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	144(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	152(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	250647(%rip), %rcx      # 0x457260 <ktypeglobal:kotlin.ClassCastException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 160(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	72(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowInvalidReceiverTypeException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	292069(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419ffc <ThrowInvalidReceiverTypeException+0x6c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$27, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	leaq	32(%rsp), %rdx
               	testq	%rax, %rax
               	leaq	271376(%rip), %rsi      # 0x45c440 <__unnamed_32>
               	cmovneq	%rax, %rsi
               	leaq	271285(%rip), %rdi      # 0x45c3f0 <__unnamed_33>
               	callq	0x437010 <Kotlin_String_plusImpl>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	249070(%rip), %rcx      # 0x456d60 <ktypeglobal:kotlin.RuntimeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 40(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax)

<ThrowIllegalArgumentException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	291796(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a10d <ThrowIllegalArgumentException+0x5d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	249188(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowFileFailedToInitializeException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	291588(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a1dd <ThrowFileFailedToInitializeException+0x5d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	251220(%rip), %rcx      # 0x457760 <ktypeglobal:kotlin.native.FileFailedToInitializeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	leaq	270916(%rip), %rsi      # 0x45c460 <__unnamed_34>
               	movq	%rbx, %rdi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<ReportUnhandledException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %rbx
               	movq	$0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 16(%rsp)
               	movb	291381(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a2ac <ReportUnhandledException+0x5c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	270877(%rip), %rdi      # 0x45c4d0 <__unnamed_35>
               	callq	0x43a8b0 <Kotlin_io_Console_print>
               	movq	%rbx, %rdi
               	callq	0x416120 <kfun:kotlin.Throwable#printStackTrace(){}>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 80(%rsp)
               	movb	291194(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a367 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x67>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	253089(%rip), %rdx      # 0x458030 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movq	%rcx, 286361(%rip)      # 0x460238 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	286354(%rip), %rax      # 0x460238 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 8(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 144(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 104(%rsp)
               	leaq	96(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%rbx, 112(%rsp)
               	movl	286245(%rip), %eax      # 0x460250 <state_global$kotlin.native.MemoryModel>
               	cmpl	$2, %eax
               	je	0x41a443 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x143>
               	leaq	286233(%rip), %rdi      # 0x460250 <state_global$kotlin.native.MemoryModel>
               	leaq	-9070(%rip), %rsi       # 0x4180d0 <kfun:kotlin.native.MemoryModel.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	movq	286150(%rip), %r13      # 0x460210 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 32(%rsp)
               	movl	8(%r13), %ebp
               	testl	%ebp, %ebp
               	js	0x41a63c <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33c>
               	movq	296(%r15), %rdi
               	leaq	31(,%rbp,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	246724(%rip), %rax      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r14, 40(%rsp)
               	movl	8(%r13), %ebp
               	xorl	%r12d, %r12d
               	testl	%ebp, %ebp
               	cmovsl	%r12d, %ebp
               	cmpl	%r12d, %ebp
               	je	0x41a52b <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x22b>
               	nop
               	movzbl	290785(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a500 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x200>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r13,%r12,8), %rax
               	movq	%rax, 48(%rsp)
               	movl	16(%rax), %ecx
               	cmpl	%ecx, 24(%rbx)
               	jbe	0x41a637 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x337>
               	movslq	%ecx, %rcx
               	movq	16(%rbx), %rdx
               	movq	%rax, 32(%rbx,%rcx,8)
               	addq	$1, %r12
               	cmpl	%r12d, %ebp
               	jne	0x41a4f0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x1f0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x41a641 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x341>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	%r14, 120(%rsp)
               	cmpl	$2, 24(%rbx)
               	jbe	0x41a637 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x337>
               	movq	48(%rbx), %rdi
               	movq	%rdi, 152(%rsp)
               	movq	104(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	285847(%rip), %rax      # 0x460210 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	16(%rax), %rsi
               	movq	%rsi, 160(%rsp)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*112(%rax)
               	movl	%eax, %ebx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	250436(%rip), %rdx      # 0x457800 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rdx, 16(%rax)
               	testb	%bl, %bl
               	je	0x41a5d6 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2d6>
               	movq	%rcx, 168(%rsp)
               	movq	$0, 24(%rax)
               	jmp	0x41a5ee <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2ee>
               	movq	%rcx, 176(%rsp)
               	movq	$0, 24(%rax)
               	movq	%rcx, 184(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rcx, 8(%rax)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movq	285739(%rip), %rsi      # 0x460238 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	leaq	285732(%rip), %rdi      # 0x460238 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	callq	0x424830 <InitAndRegisterGlobal>
               	movq	72(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	leaq	246344(%rip), %rsi      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%r14, %rdi
               	callq	0x419da0 <ThrowClassCastException>

<kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r14d
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 144(%rsp)
               	movups	%xmm0, 184(%rsp)
               	leaq	256235(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 176(%rsp)
               	movups	%xmm0, 160(%rsp)
               	movq	%rax, 152(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 16(%rsp)
               	movb	290249(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a718 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xc8>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41a747 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%r14d, %ebx
               	jg	0x41a747 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%ebx, %ebp
               	jg	0x41a814 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x1c4>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	32(%rsp), %r12
               	leaq	176(%rsp), %r13
               	movq	%r13, 24(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	269747(%rip), %rsi      # 0x45c520 <__unnamed_36>
               	movq	%r13, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebp, %esi
               	leaq	40(%rsp), %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	269762(%rip), %rsi      # 0x45c550 <__unnamed_37>
               	movq	%r13, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	268671(%rip), %rsi      # 0x45c130 <__unnamed_18>
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%r14d, %esi
               	leaq	72(%rsp), %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	leaq	80(%rsp), %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	247290(%rip), %rcx      # 0x456e00 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 88(%rsp)
               	jmp	0x41a8c4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x274>
               	leaq	112(%rsp), %r14
               	leaq	104(%rsp), %r13
               	leaq	152(%rsp), %r12
               	movq	%r12, 96(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	269537(%rip), %rsi      # 0x45c520 <__unnamed_36>
               	movq	%r12, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	269602(%rip), %rsi      # 0x45c580 <__unnamed_38>
               	movq	%r12, %rdi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	128(%rsp), %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	136(%rsp), %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	247272(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 144(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdi, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movq	$0, 224(%rsp)
               	movups	%xmm0, 248(%rsp)
               	leaq	255604(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 240(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 200(%rsp)
               	leaq	192(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 208(%rsp)
               	movb	289623(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a98a <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0xaa>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	240(%rsp), %rbx
               	movq	%rbx, 216(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	$0, 176(%rsp)
               	leaq	144(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	288(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 128(%rsp)
               	leaq	248317(%rip), %rax      # 0x457411 <ktypeglobal:kotlin.String#internal+0x1>
               	andq	$-4, %rax
               	movq	%rax, 8(%rsp)
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	267286(%rip), %r14      # 0x45be50 <__unnamed_39>
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r12, %r8
               	callq	0x41eb30 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 136(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%rax, %r12
               	movl	$1, %ebp
               	leaq	32(%rsp), %r14
               	jmp	0x41aaaf <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1cf>
               	nop
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	leaq	80(%rsp), %rdx
               	callq	0x41eab0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addl	$1, %ebp
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41acca <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3ea>
               	movzbl	289268(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aaed <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x20d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	leaq	152(%rsp), %rsi
               	callq	*8(%rax)
               	movq	%rax, %r15
               	cmpl	$2, %ebp
               	jl	0x41ab7b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x29b>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %r14
               	movq	%r13, %r12
               	leaq	266980(%rip), %r13      # 0x45be30 <__unnamed_40>
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	movq	%r12, %r13
               	movq	%r14, %r12
               	leaq	32(%rsp), %r14
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	leaq	160(%rsp), %r8
               	callq	0x41eb30 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r14, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	cmpq	$0, 16(%rsp)
               	je	0x41ac20 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x340>
               	movq	16(%rsp), %rcx
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	8(%rcx), %rdi
               	leaq	250821(%rip), %rcx      # 0x457fa0 <ktypeglobal:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	cmpq	%rcx, %rax
               	je	0x41ac80 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3a0>
               	leaq	269125(%rip), %rsi      # 0x45c730 <__unnamed_41>
               	cmpq	%rdi, %r15
               	je	0x41ac17 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	leaq	266777(%rip), %rsi      # 0x45be10 <__unnamed_8>
               	testq	%r15, %r15
               	je	0x41ac17 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%rsi, 64(%rsp)
               	jmp	0x41ac95 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3b5>
               	nop
               	testq	%r15, %r15
               	je	0x41aa90 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	cmpl	$25, (%rax,%rcx)
               	je	0x41aa90 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$84, 92(%rax)
               	jne	0x41aca2 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3c2>
               	movzwl	8(%r15), %esi
               	movq	%rbx, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41e9d0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x41aaa0 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1c0>
               	nopw	%cs:(%rax,%rax)
               	movq	%r15, %rsi
               	leaq	56(%rsp), %rdx
               	callq	0x4199e0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, %rsi
               	movq	%rax, 56(%rsp)
               	movq	%rbx, %rdi
               	leaq	72(%rsp), %rdx
               	jmp	0x41aa9b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	leaq	104(%rsp), %rdx
               	jmp	0x41aa9b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	leaq	176(%rsp), %r14
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	266620(%rip), %rbp      # 0x45be70 <__unnamed_10>
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb30 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 176(%rsp)
               	movq	%rbx, 224(%rsp)
               	movq	120(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	200(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	288616(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ad79 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41ae27 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc7>
               	testq	%rbx, %rbx
               	je	0x41ae20 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41ae20 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41ae20 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	16(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movb	288405(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ae4c <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x1c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	xorl	%ebp, %ebp
               	jmp	0x41af20 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xf0>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41af60 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x130>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41af64 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x134>
               	movzbl	288136(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aee0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41aee0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41af1e <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xee>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%ebp, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288062(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afa3 <kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288030(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afc3 <kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpl	$0, 76(%rbx)
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	287992(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afe9 <kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	movb	287919(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b032 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x22>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movl	68(%r12), %r13d
               	leal	-1(%r13), %eax
               	movslq	%eax, %rbx
               	jmp	0x41b09d <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x8d>
               	nop
               	testq	%r14, %r14
               	je	0x41b131 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x121>
               	addq	$-1, %rbx
               	testl	%ebx, %ebx
               	js	0x41b104 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xf4>
               	movzbl	287792(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b0b1 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xa1>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b136 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	addl	$-1, %r13d
               	cmpl	$0, 16(%rax,%rbx,4)
               	js	0x41b099 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41b13b <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x12b>
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b136 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	movq	16(%rax,%rbx,8), %rdi
               	movq	%rdi, 40(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b090 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x80>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41b099 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	jmp	0x41b10a <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	movl	$4294967295, %r13d      # imm = 0xFFFFFFFF
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testl	%r13d, %r13d
               	setns	%al
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ebx, %r13d
               	jmp	0x41b10a <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419c00 <ThrowNullPointerException>

<kfun:kotlin.collections.HashMap#get(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	287546(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b1a7 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x67>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41b1d6 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x96>
               	movq	16(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	testq	%rcx, %rcx
               	je	0x41b1f3 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb3>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41b1f8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb8>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, (%r14)
               	jmp	0x41b1d8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x98>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	287336(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b279 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x79>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x41bdb0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x41c650 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	movl	%eax, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movq	16(%r12), %rcx
               	movq	%rcx, 104(%rsp)
               	testq	%rcx, %rcx
               	jne	0x41b379 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x179>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	8(%r12), %rax
               	movq	%rax, 72(%rsp)
               	movl	8(%rax), %r13d
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%r13d, %r13d
               	js	0x41b3e4 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1e4>
               	movq	296(%rbx), %rdi
               	leaq	31(,%r13,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	242985(%rip), %rdx      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r13d, 24(%rax)
               	movq	%rcx, 120(%rsp)
               	movq	%rcx, 16(%r12)
               	movq	%rcx, 24(%rsp)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%ebp, %ebp
               	js	0x41b3a2 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1a2>
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3df <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movq	(%rcx), %rax
               	movslq	%ebp, %rax
               	movq	%r15, 16(%rcx,%rax,8)
               	xorl	%eax, %eax
               	jmp	0x41b3be <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1be>
               	notl	%ebp
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3df <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movslq	%ebp, %rdx
               	movq	16(%rcx,%rdx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	(%rcx), %rsi
               	movq	%r15, 16(%rcx,%rdx,8)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	244372(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	264852(%rip), %rsi      # 0x45beb0 <__unnamed_42>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#remove(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	286783(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b4a2 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0x72>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41cd10 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x41b4da <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xaa>
               	movq	16(%rbx), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b4fb <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xcb>
               	cmpl	%eax, 8(%rdi)
               	jbe	0x41b500 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xd0>
               	movslq	%eax, %rcx
               	movq	16(%rdi,%rcx,8), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	%eax, %esi
               	callq	0x417fb0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	jmp	0x41b4dc <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xac>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	286566(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b57b <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0x6b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	40(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b5c5 <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	250316(%rip), %rdx      # 0x458780 <ktypeglobal:kotlin.collections.HashMapKeys#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 40(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	286358(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b64b <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x6b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b695 <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	250348(%rip), %rdx      # 0x458870 <ktypeglobal:kotlin.collections.HashMapEntrySet#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 56(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	286226(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b6cf <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x1f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41b7af <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xff>
               	testq	%rbx, %rbx
               	je	0x41b7ab <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	cmpl	$65, (%rax,%rcx)
               	jne	0x41b7ab <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movl	76(%r14), %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41b7b3 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x103>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41d3d0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	movl	%eax, %ecx
               	jmp	0x41b7b5 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x105>
               	xorl	%ecx, %ecx
               	jmp	0x41b7cb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	movb	$1, %cl
               	jmp	0x41b7cb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	xorl	%ecx, %ecx
               	movq	%r15, %rax
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	285848(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b849 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x69>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d600 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r14d, %r14d
               	leaq	32(%rsp), %r12
               	movabsq	$34359738368, %r13      # imm = 0x800000000
               	jmp	0x41b896 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xb6>
               	nop
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	xorl	%eax, %ebp
               	movq	%rbx, %rdi
               	callq	0x41d680 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addl	%ebp, %r14d
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	jge	0x41b97d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x19d>
               	movzbl	285739(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b8b6 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xd6>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r12, 288(%r15)
               	movq	%r13, 48(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41b9a0 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1c0>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rsp)
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b99b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b940 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x160>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	jmp	0x41b942 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x162>
               	nopl	(%rax)
               	xorl	%ebp, %ebp
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 80(%rsp)
               	testq	%rax, %rax
               	je	0x41b9e3 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x203>
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b99b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 88(%rsp)
               	testq	%rdi, %rdi
               	jne	0x41b870 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x90>
               	xorl	%eax, %eax
               	jmp	0x41b87d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x9d>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%r14d, %eax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	242424(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	callq	0x419c00 <ThrowNullPointerException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, 8(%rsp)
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	48(%rsp), %rbp
               	leaq	56(%rsp), %r15
               	movups	%xmm0, 216(%rsp)
               	leaq	251239(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 208(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 32(%rsp)
               	movb	285267(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ba8e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x9e>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	leal	(%rax,%rax,2), %esi
               	addl	$2, %esi
               	leaq	208(%rsp), %r12
               	movq	%r12, 40(%rsp)
               	movq	%r12, %rdi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	264301(%rip), %rsi      # 0x45c320 <__unnamed_43>
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41d600 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	jmp	0x41bb0a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	leaq	192(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	callq	0x41d680 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addl	$1, %r13d
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	jge	0x41bd14 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x324>
               	movzbl	285111(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bb2a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x13a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r13d, %r13d
               	jle	0x41bb43 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x153>
               	movq	%r12, %rdi
               	leaq	262903(%rip), %rsi      # 0x45be30 <__unnamed_40>
               	leaq	64(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 192(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 96(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41bd66 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x376>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 112(%rsp)
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd61 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x371>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %r15
               	movq	%r15, 120(%rsp)
               	testq	%r15, %r15
               	je	0x41bc20 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x230>
               	movq	8(%rbx), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bc30 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x240>
               	movq	%r12, %rdi
               	leaq	264014(%rip), %rsi      # 0x45c360 <__unnamed_29>
               	leaq	128(%rsp), %rdx
               	jmp	0x41bc59 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x269>
               	nop
               	xorl	%esi, %esi
               	jmp	0x41bc4e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x25e>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	136(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	leaq	144(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	$61, %esi
               	leaq	152(%rsp), %rdx
               	callq	0x41e9d0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 160(%rsp)
               	testq	%rax, %rax
               	je	0x41bda9 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3b9>
               	movl	20(%rbx), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd61 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x371>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 168(%rsp)
               	testq	%rbp, %rbp
               	je	0x41bae0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf0>
               	movq	8(%rbx), %rsi
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bcf0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x300>
               	movq	%r12, %rdi
               	leaq	263816(%rip), %rsi      # 0x45c360 <__unnamed_29>
               	leaq	176(%rsp), %rdx
               	jmp	0x41baed <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xfd>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	leaq	184(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	jmp	0x41bae2 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf2>
               	leaq	72(%rsp), %rdx
               	leaq	263712(%rip), %rsi      # 0x45c340 <__unnamed_44>
               	leaq	208(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	8(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241458(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	callq	0x419c00 <ThrowNullPointerException>
               	nop

<kfun:kotlin.collections.HashMap#checkIsMutable(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	284372(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41be0d <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x5d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 80(%r14)
               	je	0x41be28 <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x78>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	242064(%rip), %rcx      # 0x456fe0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.rehash#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 144(%rsp)
               	movb	284141(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bef4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	cmpl	%eax, 68(%rbx)
               	jle	0x41c02e <kfun:kotlin.collections.HashMap.rehash#internal+0x1be>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movq	16(%rbx), %r15
               	movq	%r15, 56(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	jmp	0x41bf70 <kfun:kotlin.collections.HashMap.rehash#internal+0x100>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	movq	%rdx, 16(%r15,%rcx,8)
               	addl	$1, %r12d
               	addq	$1, %r13
               	movl	68(%rbx), %edx
               	movslq	%edx, %rax
               	cmpq	%rax, %r13
               	jge	0x41bffa <kfun:kotlin.collections.HashMap.rehash#internal+0x18a>
               	movzbl	283990(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bf8b <kfun:kotlin.collections.HashMap.rehash#internal+0x11b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %rax
               	movq	%rax, 64(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	cmpl	$0, 16(%rax,%r13,4)
               	js	0x41bf6c <kfun:kotlin.collections.HashMap.rehash#internal+0xfc>
               	movq	8(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%rax,%r13,8), %rdx
               	movq	%rdx, 88(%rsp)
               	cmpl	%r12d, %ecx
               	jbe	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	(%rax), %rcx
               	movslq	%r12d, %rcx
               	movq	%rdx, 16(%rax,%rcx,8)
               	testq	%r15, %r15
               	je	0x41bf68 <kfun:kotlin.collections.HashMap.rehash#internal+0xf8>
               	movl	8(%r15), %eax
               	cmpq	%rax, %r13
               	jae	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%r15,%r13,8), %rdx
               	movq	%rdx, 96(%rsp)
               	cmpl	%r12d, %eax
               	ja	0x41bf60 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%r12d, %esi
               	callq	0x418010 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	testq	%r15, %r15
               	je	0x41c01e <kfun:kotlin.collections.HashMap.rehash#internal+0x1ae>
               	movl	68(%rbx), %edx
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x418010 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	movl	%r12d, 68(%rbx)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rdx
               	movq	%rdx, 288(%rbp)
               	movabsq	$17179869184, %r13      # imm = 0x400000000
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%r14d, %eax
               	jne	0x41c122 <kfun:kotlin.collections.HashMap.rehash#internal+0x2b2>
               	movq	32(%rbx), %r15
               	movq	%r15, 160(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdx, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r14d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	8(%r15), %edx
               	xorl	%r12d, %r12d
               	xorl	%edi, %edi
               	movl	%r14d, %esi
               	callq	0x417ce0 <checkRangeIndexes>
               	movq	(%r15), %rax
               	testl	%r14d, %r14d
               	jle	0x41c271 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	16(%r15), %r9
               	leal	-1(%r14), %r8d
               	cmpl	$7, %r8d
               	jb	0x41c259 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e9>
               	addq	$1, %r8
               	movq	%r8, %r12
               	andq	$-8, %r12
               	leaq	-8(%r12), %rax
               	movq	%rax, %rsi
               	shrq	$3, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$56, %rax
               	jae	0x41c195 <kfun:kotlin.collections.HashMap.rehash#internal+0x325>
               	xorl	%eax, %eax
               	jmp	0x41c21e <kfun:kotlin.collections.HashMap.rehash#internal+0x3ae>
               	testl	%r14d, %r14d
               	js	0x41c492 <kfun:kotlin.collections.HashMap.rehash#internal+0x622>
               	movq	296(%rbp), %rdi
               	movl	%r14d, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	239692(%rip), %rdx      # 0x4569b0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r14d, 24(%rax)
               	movq	%rcx, 152(%rsp)
               	movq	%rcx, 32(%rbx)
               	bsrl	%r14d, %eax
               	xorl	$31, %eax
               	addl	$1, %eax
               	testl	%r14d, %r14d
               	movl	$33, %ecx
               	cmovnel	%eax, %ecx
               	movl	%ecx, 72(%rbx)
               	jmp	0x41c271 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	240(%r15), %rdi
               	andq	$-8, %rsi
               	negq	%rsi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopl	(%rax,%rax)
               	movups	%xmm0, -208(%rdi,%rcx,4)
               	movups	%xmm0, -224(%rdi,%rcx,4)
               	movups	%xmm0, -192(%rdi,%rcx,4)
               	movups	%xmm0, -176(%rdi,%rcx,4)
               	movups	%xmm0, -160(%rdi,%rcx,4)
               	movups	%xmm0, -144(%rdi,%rcx,4)
               	movups	%xmm0, -128(%rdi,%rcx,4)
               	movups	%xmm0, -112(%rdi,%rcx,4)
               	movups	%xmm0, -96(%rdi,%rcx,4)
               	movups	%xmm0, -80(%rdi,%rcx,4)
               	movups	%xmm0, -64(%rdi,%rcx,4)
               	movups	%xmm0, -48(%rdi,%rcx,4)
               	movups	%xmm0, -32(%rdi,%rcx,4)
               	movups	%xmm0, -16(%rdi,%rcx,4)
               	leaq	64(%rcx), %rax
               	movups	%xmm0, 16(%rdi,%rcx,4)
               	movups	%xmm0, (%rdi,%rcx,4)
               	movq	%rax, %rcx
               	addq	$8, %rsi
               	jne	0x41c1b0 <kfun:kotlin.collections.HashMap.rehash#internal+0x340>
               	testq	%rdx, %rdx
               	je	0x41c250 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e0>
               	leaq	(%r15,%rax,4), %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x41c240 <kfun:kotlin.collections.HashMap.rehash#internal+0x3d0>
               	cmpq	%r12, %r8
               	je	0x41c271 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	(%r9,%r12,4), %r9
               	subl	%r12d, %r14d
               	xorl	%eax, %eax
               	nop
               	movl	$0, (%r9,%rax,4)
               	addq	$1, %rax
               	cmpl	%eax, %r14d
               	jne	0x41c260 <kfun:kotlin.collections.HashMap.rehash#internal+0x3f0>
               	xorl	%r14d, %r14d
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jge	0x41c41a <kfun:kotlin.collections.HashMap.rehash#internal+0x5aa>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movb	283202(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c29f <kfun:kotlin.collections.HashMap.rehash#internal+0x42f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 48(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	16(%rax,%r14,8), %rdi
               	movq	%rdi, 64(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c320 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %r15d # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %r15d
               	jmp	0x41c323 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b3>
               	xorl	%r15d, %r15d
               	leaq	1(%r14), %rax
               	movq	%rax, 120(%rsp)
               	movl	64(%rbx), %r12d
               	jmp	0x41c344 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addl	$-1, %r15d
               	addl	$-1, %r12d
               	movzbl	283017(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c358 <kfun:kotlin.collections.HashMap.rehash#internal+0x4e8>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	cmpl	%r15d, 8(%rax)
               	jbe	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movslq	%r15d, %rcx
               	cmpl	$0, 16(%rax,%rcx,4)
               	je	0x41c3d0 <kfun:kotlin.collections.HashMap.rehash#internal+0x560>
               	testl	%r12d, %r12d
               	js	0x41c43b <kfun:kotlin.collections.HashMap.rehash#internal+0x5cb>
               	testl	%r15d, %r15d
               	jne	0x41c340 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r15d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c340 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	movq	%rax, 80(%rsp)
               	movq	(%rax), %rdx
               	movq	120(%rsp), %rdx
               	movl	%edx, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x185>
               	movq	(%rax), %rcx
               	movl	%r15d, 16(%rax,%r14,4)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rdx, %r14
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jl	0x41c290 <kfun:kotlin.collections.HashMap.rehash#internal+0x420>
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	240337(%rip), %rcx      # 0x456f40 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 168(%rsp)
               	leaq	262606(%rip), %rsi      # 0x45c650 <__unnamed_45>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.findKey#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 48(%rsp)
               	movb	282578(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c50f <kfun:kotlin.collections.HashMap.findKey#internal+0x6f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41c533 <kfun:kotlin.collections.HashMap.findKey#internal+0x93>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %ebx # imm = 0x9E3779B9
               	movl	72(%r12), %ecx
               	shrl	%cl, %ebx
               	jmp	0x41c535 <kfun:kotlin.collections.HashMap.findKey#internal+0x95>
               	xorl	%ebx, %ebx
               	movl	64(%r12), %r13d
               	jmp	0x41c543 <kfun:kotlin.collections.HashMap.findKey#internal+0xa3>
               	nop
               	addl	$-1, %ebx
               	addl	$-1, %r13d
               	movzbl	282506(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c557 <kfun:kotlin.collections.HashMap.findKey#internal+0xb7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%r12), %rax
               	movq	%rax, 56(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41c648 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebx, %rcx
               	movl	16(%rax,%rcx,4), %ebp
               	testl	%ebp, %ebp
               	je	0x41c626 <kfun:kotlin.collections.HashMap.findKey#internal+0x186>
               	jle	0x41c5c5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	addl	$-1, %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41c648 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebp, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c5c0 <kfun:kotlin.collections.HashMap.findKey#internal+0x120>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41c5c5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	jmp	0x41c62b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testq	%r14, %r14
               	je	0x41c62b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	testl	%r13d, %r13d
               	js	0x41c62b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testl	%ebx, %ebx
               	jne	0x41c540 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ebx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	jmp	0x41c540 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%ebp, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 192(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 144(%rsp)
               	movb	282105(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x98>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bdb0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	xorps	%xmm0, %xmm0
               	movq	%rbp, 40(%rsp)
               	movb	282074(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c70a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xba>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	xorl	%r15d, %r15d
               	movl	$0, %r13d
               	testq	%r14, %r14
               	je	0x41c738 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xe8>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	imull	$2654435769, %eax, %r13d # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %r13d
               	movq	%r14, %r12
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rdx
               	movq	288(%rdx), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rdx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	movq	8(%rsp), %rcx
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	movq	%rcx, 288(%rdx)
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	jmp	0x41c7b8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x168>
               	nopl	(%rax,%rax)
               	addl	$1, %r15d
               	addl	$-1, %r13d
               	movzbl	281881(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c7cb <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x17b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movq	32(%rbx), %rcx
               	movq	%rcx, 152(%rsp)
               	cmpl	%r13d, 8(%rcx)
               	jbe	0x41ccc0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%r13d, %rax
               	movl	16(%rcx,%rax,4), %ebp
               	testl	%ebp, %ebp
               	jle	0x41c8b0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x260>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%rbp), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41ccc0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c840 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rsi
               	callq	*112(%rax)
               	xorps	%xmm0, %xmm0
               	testb	%al, %al
               	je	0x41c849 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f9>
               	jmp	0x41cc23 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d3>
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x41cc23 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d3>
               	cmpl	%r15d, %r14d
               	je	0x41cad0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x480>
               	testl	%r13d, %r13d
               	jne	0x41c7b0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rcx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r13d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rcx)
               	jmp	0x41c7b0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	nopl	(%rax)
               	movl	68(%rbx), %r8d
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	%rsp, %rdi
               	movq	%rdi, 288(%rbp)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	8(%rbx), %rdx
               	movq	%rdx, 24(%rsp)
               	movl	8(%rdx), %edx
               	movq	8(%rsp), %rsi
               	movq	%rsi, 288(%rbp)
               	cmpl	%edx, %r8d
               	jl	0x41cc4d <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5fd>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdi, 288(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	68(%rbx), %eax
               	movl	%esi, %edx
               	subl	%eax, %edx
               	testl	%edx, %edx
               	movq	%r12, %r14
               	movq	%rdi, %r12
               	movq	%rcx, %r13
               	jg	0x41c9ac <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
               	movl	76(%rbx), %edx
               	subl	%edx, %esi
               	testl	%esi, %esi
               	jle	0x41c9ac <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
               	subl	%edx, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	3(%rcx), %edx
               	testl	%ecx, %ecx
               	cmovnsl	%ecx, %edx
               	sarl	$2, %edx
               	cmpl	%edx, %eax
               	jge	0x41cb30 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>
               	movl	68(%rbx), %eax
               	incl	%eax
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	movabsq	$42949672960, %rcx      # imm = 0xA00000000
               	movq	%rcx, 64(%rsp)
               	js	0x41ccc5 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x675>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	cmpl	%eax, %ecx
               	jge	0x41cc12 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5c2>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	(%rcx,%rcx,2), %ecx
               	movl	%ecx, %r15d
               	shrl	$31, %r15d
               	addl	%ecx, %r15d
               	sarl	%r15d
               	cmpl	%eax, %r15d
               	cmovll	%eax, %r15d
               	movq	8(%rbx), %rdi
               	movq	%rdi, 80(%rsp)
               	movl	%r15d, %esi
               	leaq	88(%rsp), %rdx
               	callq	0x4152e0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 88(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 96(%rsp)
               	testq	%rdi, %rdi
               	je	0x41cb79 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x529>
               	movl	%r15d, %esi
               	leaq	104(%rsp), %rdx
               	callq	0x4152e0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 104(%rsp)
               	jmp	0x41cb7b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x52b>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x41be70 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	%r12, %r14
               	jmp	0x41c6f8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rdi
               	callq	0x41be70 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	jmp	0x41c6f8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	xorl	%eax, %eax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rdi
               	movq	%rdi, 112(%rsp)
               	movl	%r15d, %esi
               	leaq	120(%rsp), %rdx
               	callq	0x4155a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 24(%rbx)
               	testl	%r15d, %r15d
               	jle	0x41cbb2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x562>
               	leal	(%r15,%r15,2), %eax
               	testl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	jne	0x41cbba <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x56a>
               	xorl	%esi, %esi
               	jmp	0x41cbca <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x57a>
               	movl	$3, %eax
               	xorps	%xmm0, %xmm0
               	bsrl	%eax, %ecx
               	xorl	$31, %ecx
               	xorb	$31, %cl
               	movl	$1, %esi
               	shll	%cl, %esi
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%eax, %esi
               	jle	0x41cc12 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5c2>
               	movq	%rbx, %rdi
               	callq	0x41be70 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c6f8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	negl	%ebp
               	movq	136(%rsp), %rax
               	movq	40(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	movl	%ebp, %eax
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	68(%rbx), %ebp
               	leal	1(%rbp), %ecx
               	movl	%ecx, 68(%rbx)
               	movq	8(%rbx), %rsi
               	movq	%rsi, 160(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41ccc0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movslq	%ebp, %rdx
               	movq	(%rsi), %rdi
               	movq	%r12, 16(%rsi,%rdx,8)
               	movq	24(%rbx), %rsi
               	movq	%rsi, 168(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41ccc0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movq	(%rsi), %rdi
               	movl	%r13d, 16(%rsi,%rdx,4)
               	movq	32(%rbx), %rdx
               	movq	%rdx, 176(%rsp)
               	cmpl	%r13d, 8(%rdx)
               	jbe	0x41ccc0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x670>
               	movq	(%rdx), %rsi
               	movl	%ecx, 16(%rdx,%rax,4)
               	movl	76(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 76(%rbx)
               	cmpl	64(%rbx), %r15d
               	jle	0x41cc25 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
               	movl	%r15d, 64(%rbx)
               	jmp	0x41cc25 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	239123(%rip), %rcx      # 0x457300 <ktypeglobal:kotlin.OutOfMemoryError#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	280504(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cd29 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bdb0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41cd4e <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x3e>
               	movl	%eax, %ebp
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	callq	0x41cd60 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	jmp	0x41cd53 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x43>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movl	%ebp, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.removeKeyAt#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movb	280331(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cdd6 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x76>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%ebp, %esi
               	callq	0x417fb0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	movq	24(%rbx), %rax
               	movq	%rax, 112(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movl	%ebp, 12(%rsp)
               	movslq	%ebp, %rcx
               	movq	%rcx, 64(%rsp)
               	movl	16(%rax,%rcx,4), %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	56(%rsp), %rsi
               	movq	288(%rsi), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 144(%rsp)
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	jmp	0x41cefe <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x19e>
               	movq	(%rax), %rcx
               	movq	72(%rsp), %rcx
               	movl	%edx, 16(%rax,%rcx,4)
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	addl	$-1, %r14d
               	js	0x41d127 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3c7>
               	movzbl	280019(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x41cf30 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1d0>
               	testl	%r12d, %r12d
               	je	0x41cf3f <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1df>
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jle	0x41cf9e <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x23e>
               	jmp	0x41d0ed <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%rsp), %rsi
               	testl	%r12d, %r12d
               	jne	0x41cf0e <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1ae>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movl	8(%rax), %r12d
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jg	0x41d0ed <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	addl	$-1, %r12d
               	movq	%rax, 160(%rsp)
               	movl	8(%rax), %ecx
               	cmpl	%r12d, %ecx
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movslq	%r12d, %rdx
               	movl	16(%rax,%rdx,4), %r13d
               	testl	%r13d, %r13d
               	je	0x41d103 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3a3>
               	js	0x41d020 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2c0>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%r13), %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movslq	%ebp, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41d050 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	56(%rsp), %rsi
               	imull	$2654435769, %eax, %eax # imm = 0x9E3779B9
               	movl	72(%rbx), %ecx
               	shrl	%cl, %eax
               	jmp	0x41d052 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f2>
               	nop
               	movq	%rax, 176(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	jmp	0x41ceec <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x18c>
               	nopw	(%rax,%rax)
               	xorl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	subl	%r12d, %eax
               	addl	$-1, %ecx
               	andl	%eax, %ecx
               	cmpl	%r15d, %ecx
               	jl	0x41cef4 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x194>
               	movq	32(%rbx), %rax
               	movq	%rax, 200(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	%r13d, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 208(%rsp)
               	cmpl	%ebp, 8(%rax)
               	ja	0x41cee0 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x180>
               	jmp	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	%rax, 152(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	ja	0x41d117 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3b7>
               	jmp	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	%rax, 168(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$0, 16(%rax,%rcx,4)
               	jmp	0x41d14a <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3ea>
               	movq	32(%rbx), %rax
               	movq	%rax, 216(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	12(%rsp), %ecx
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movq	24(%rbx), %rax
               	movq	%rax, 120(%rsp)
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d1a2 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x442>
               	movq	(%rax), %rcx
               	movq	64(%rsp), %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	76(%rbx), %eax
               	addl	$-1, %eax
               	movl	%eax, 76(%rbx)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	279224(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d229 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x79>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d2c6 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x116>
               	movq	16(%r14), %rcx
               	movq	%rcx, 32(%rsp)
               	testq	%rcx, %rcx
               	je	0x41d2ea <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13a>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d2ef <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13f>
               	leaq	48(%rsp), %rsi
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*8(%rax)
               	testq	%rbx, %rbx
               	je	0x41d2ca <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x11a>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41d2d0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	xorl	%eax, %eax
               	jmp	0x41d2d0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	testq	%rax, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	278897(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d370 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0x70>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d3a4 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa4>
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d3c1 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xc1>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	jne	0x41d3a6 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa6>
               	callq	0x419c00 <ThrowNullPointerException>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r12
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	278688(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d441 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x71>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r14
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41d512 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x142>
               	movzbl	278584(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d4a9 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xd9>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41d50e <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	60(%rcx), %edx
               	movq	64(%rcx), %rcx
               	andl	$168, %edx
               	shlq	$4, %rdx
               	cmpl	$168, (%rcx,%rdx)
               	jne	0x41d52f <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x15f>
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41d1b0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x41d470 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xa0>
               	xorl	%eax, %eax
               	jmp	0x41d514 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x144>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	243658(%rip), %rsi      # 0x458d00 <kclass:kotlin.collections.Map.Entry>
               	movq	%rax, %rdi
               	callq	0x419da0 <ThrowClassCastException>
               	jmp	0x41d540 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x170>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43c135 <__cxa_end_catch>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$4294967165, %eax       # imm = 0xFFFFFF7D
               	cmpl	$2, %eax
               	jb	0x41d50e <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nop

<kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	278343(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d59a <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>+0x1a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241659(%rip), %rcx      # 0x4585d0 <ktypeglobal:kotlin.collections.HashMap.KeysItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d680 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	278215(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d61a <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>+0x1a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241675(%rip), %rcx      # 0x458660 <ktypeglobal:kotlin.collections.HashMap.EntriesItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d680 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#initNext(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	278020(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6e9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6e9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
               	nop
               	movl	16(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 16(%rbx)
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d71e <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x9e>
               	movq	24(%rcx), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d732 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xb2>
               	cltq
               	cmpl	$0, 16(%rcx,%rax,4)
               	jns	0x41d71e <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x9e>
               	movzbl	277957(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6e0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x60>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6e0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x60>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	277902(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d753 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	68(%rax), %eax
               	cmpl	%eax, 16(%rbx)
               	setl	%al
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#remove(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	277854(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d783 <kfun:kotlin.collections.HashMap.Itr#remove(){}+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	callq	0x41bdb0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	8(%rbx), %rdi
               	movl	20(%rbx), %esi
               	callq	0x41cd60 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movl	$4294967295, 20(%rbx)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	277702(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d81b <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %ecx
               	movq	8(%r15), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41d879 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc9>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%r15)
               	movl	%ecx, 20(%r15)
               	movq	8(%rax), %rax
               	movq	%rax, 32(%rsp)
               	movl	20(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d8bd <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x10d>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	%r15, %rdi
               	callq	0x41d680 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234526(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	277407(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d942 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %eax
               	movq	8(%r15), %r13
               	cmpl	68(%r13), %eax
               	jge	0x41d9c2 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf2>
               	leal	1(%rax), %ecx
               	movl	%ecx, 16(%r15)
               	movl	%eax, 20(%r15)
               	movl	20(%r15), %ebp
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	241000(%rip), %rcx      # 0x4586f0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r13, 24(%rax)
               	movl	%ebp, 32(%rax)
               	movq	%r15, %rdi
               	callq	0x41d680 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	234197(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	277103(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41da72 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x62>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movl	16(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41daa9 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x99>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	276943(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41db12 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x62>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	je	0x41db4e <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9e>
               	movl	16(%r15), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41db53 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa3>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	276749(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dbd4 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x74>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41dcbb <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41dcbb <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	32(%rsp), %r12
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%rax, %r15
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	0x41da10 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%r15, %r15
               	je	0x41dcb6 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x156>
               	movq	(%r15), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41dcbb <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41dab0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rbx, %rbx
               	je	0x41dcd7 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x177>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41dcbd <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	testq	%rax, %rax
               	je	0x41dc5e <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0xfe>
               	xorl	%eax, %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%rax, %rax
               	sete	%al
               	jmp	0x41dcbd <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	24(%rsp), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	276367(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dd52 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0x72>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r15
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x41da10 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	xorl	%ebx, %ebx
               	movl	$0, %ebp
               	testq	%rax, %rax
               	je	0x41dd80 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xa0>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebp
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41dab0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41dda2 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xc2>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebx
               	xorl	%ebx, %ebp
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movl	%ebp, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	64(%rsp), %rbp
               	movups	%xmm0, 16(%rsp)
               	leaq	242070(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 48(%rsp)
               	movb	276101(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de5c <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x9c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r13
               	leaq	88(%rsp), %r12
               	leaq	8(%rsp), %rdi
               	movq	%rdi, 56(%rsp)
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41da10 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%rax, %rax
               	je	0x41dea7 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe7>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41dea9 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe9>
               	xorl	%esi, %esi
               	leaq	8(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	255184(%rip), %rsi      # 0x45c390 <__unnamed_30>
               	movq	%rbp, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rsi
               	callq	0x41dab0 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41defa <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13a>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41defc <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13c>
               	xorl	%esi, %esi
               	leaq	112(%rsp), %rdx
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	275854(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df53 <kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	275822(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df73 <kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	275784(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df99 <kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	275716(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dfdd <kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?+0x1d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d300 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	275593(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e058 <kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean+0x58>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	233312(%rip), %rcx      # 0x456fe0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	275496(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0b9 <kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cd10 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	275432(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0f9 <kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d580 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	275371(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e136 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x26>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbp), %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e289 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movl	%eax, %r13d
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e2b6 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1a6>
               	cmpl	%r13d, 8(%rax)
               	jbe	0x41e2bb <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r13d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e284 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x174>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e289 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	238717(%rip), %rdx      # 0x4586f0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%r15)
               	movq	%r12, 24(%rax)
               	movl	%r13d, 32(%rax)
               	jmp	0x41e28b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x17b>
               	testq	%rax, %rax
               	je	0x41e244 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x134>
               	xorl	%ecx, %ecx
               	movq	%rcx, (%r15)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movq	%rcx, (%r15)
               	movq	%rcx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	274952(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2d9 <kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d600 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	274910(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e303 <kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	274878(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e323 <kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	274840(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e349 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e385 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e385 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d1b0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	274740(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e3ad <kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?+0x1d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	*248(%rax)
               	movq	%rax, (%r15)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	274617(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e428 <kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean+0x58>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	232336(%rip), %rcx      # 0x456fe0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	274512(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e491 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x21>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e5e6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e5e6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	8(%rbp), %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, %rdi
               	callq	0x41bdb0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e5ef <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movl	%eax, %r12d
               	movq	16(%r15), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e616 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1a6>
               	cmpl	%r12d, 8(%rax)
               	jbe	0x41e61b <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r12d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e5ea <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17a>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e5ef <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x41cd60 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movb	$1, %cl
               	jmp	0x41e5f1 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x181>
               	xorl	%ecx, %ecx
               	jmp	0x41e607 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x197>
               	testq	%rax, %rax
               	je	0x41e5d7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x167>
               	xorl	%ecx, %ecx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419c00 <ThrowNullPointerException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	274088(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e639 <kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d3d0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	274046(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e663 <kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	274014(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e683 <kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	273976(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e6a9 <kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c4a0 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	273908(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e6ed <kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?+0x1d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d300 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	273848(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e729 <kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c650 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	273784(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e769 <kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41cd10 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	273720(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e7a9 <kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d580 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	273601(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e820 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0x60>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41e881 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0xc1>
               	movq	296(%rbx), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	229572(%rip), %rdx      # 0x456920 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 8(%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	273470(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e8a3 <kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 16(%rsp)
               	movb	273359(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e912 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x62>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r15, 48(%rsp)
               	testl	%ebp, %ebp
               	js	0x41e97f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	cmpl	%ebp, 16(%r14)
               	jle	0x41e97f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	8(%r14), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41e9c2 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x112>
               	movslq	%ebp, %rcx
               	movzwl	16(%rax,%rcx,2), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	230489(%rip), %rcx      # 0x456e00 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, 8(%rsp)
               	movl	%esi, %r15d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	273056(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ea41 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0x71>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 40(%rsp)
               	movl	16(%rbx), %r14d
               	leal	1(%r14), %r13d
               	movq	%rbx, %rdi
               	movl	%r13d, %esi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r13d, 16(%rbx)
               	cmpl	%r14d, 8(%rbp)
               	jbe	0x41eaa9 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd9>
               	movslq	%r14d, %rax
               	movq	(%rbp), %rcx
               	movw	%r15w, 16(%rbp,%rax,2)
               	movq	8(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	movb	272913(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ead0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder+0x20>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	leaq	250678(%rip), %rbx      # 0x45be10 <__unnamed_8>
               	cmovneq	%r12, %rbx
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb30 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r15, (%r14)
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%r8, 24(%rsp)
               	movl	%ecx, %ebx
               	movl	%edx, %r13d
               	movq	%rsi, %r15
               	movq	%rdi, 8(%rsp)
               	movb	272770(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eb5f <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	250535(%rip), %rbp      # 0x45be10 <__unnamed_8>
               	cmovneq	%r15, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 16(%rsp)
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movl	%r13d, %edi
               	movl	%ebx, %esi
               	movl	%eax, %edx
               	callq	0x41a650 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
               	movl	%ebx, %r14d
               	subl	%r13d, %r14d
               	movq	8(%rsp), %r15
               	movl	16(%r15), %esi
               	addl	%r14d, %esi
               	movq	%r15, %rdi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x41ec9b <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x16b>
               	movl	16(%r15), %eax
               	movq	8(%r15), %rcx
               	movq	%rcx, 56(%rsp)
               	movslq	%eax, %r15
               	leaq	(%rcx,%r15,2), %rdi
               	addq	$16, %rdi
               	movslq	%r13d, %rax
               	leaq	16(,%rax,2), %rsi
               	addq	%rbp, %rsi
               	movslq	%r14d, %rbp
               	movq	%rbp, %rdx
               	addq	%rbp, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	addl	%r15d, %ebp
               	movq	8(%rsp), %r15
               	movq	%r15, %rdi
               	movl	%ebp, %esi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebp, 16(%r15)
               	movq	24(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	16(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpl	%r13d, %ebx
               	cmovll	%r13d, %ebx
               	cmpl	%r13d, %ebx
               	je	0x41ec66 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
               	nopl	(%rax,%rax)
               	movzbl	272417(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ecc0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %r14
               	movq	%r14, 64(%rsp)
               	movl	16(%r15), %r12d
               	leal	1(%r12), %r15d
               	movq	8(%rsp), %rdi
               	movl	%r15d, %esi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rsp), %rax
               	movl	%r15d, 16(%rax)
               	movq	8(%rsp), %r15
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movl	%r13d, %esi
               	callq	*8(%rax)
               	cmpl	%r12d, 8(%r14)
               	jbe	0x41ed34 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x204>
               	movslq	%r12d, %rcx
               	addl	$1, %r13d
               	movq	(%r14), %rdx
               	movw	%ax, 16(%r14,%rcx,2)
               	cmpl	%r13d, %ebx
               	jne	0x41ecb0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
               	jmp	0x41ec66 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdx, 24(%rsp)
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 48(%rsp)
               	movb	272178(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41edaf <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$11, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	16(%rbx), %r15d
               	movq	8(%rbx), %r14
               	movq	%r14, 56(%rsp)
               	leaq	12(%rsp), %rbp
               	leaq	156114(%rip), %rdx      # 0x444fa8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movl	$12, %esi
               	movq	%rbp, %rdi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x437240 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movb	12(%rsp), %al
               	testb	%al, %al
               	je	0x41ee16 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
               	movslq	%r15d, %rcx
               	leaq	12(%rsp), %rbp
               	leaq	(%r14,%rcx,2), %rcx
               	addq	$16, %rcx
               	movsbl	%al, %eax
               	movw	%ax, (%rcx)
               	addq	$2, %rcx
               	movzbl	1(%rbp), %eax
               	addq	$1, %rbp
               	testb	%al, %al
               	jne	0x41ee00 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xc0>
               	leaq	12(%rsp), %rax
               	subl	%eax, %ebp
               	addl	%ebp, %r15d
               	movq	%rbx, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%rbx)
               	movq	24(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	271895(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eeca <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder+0x6a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	249660(%rip), %rbx      # 0x45be10 <__unnamed_8>
               	cmovneq	%r15, %rbx
               	movl	8(%rbx), %esi
               	addl	16(%r12), %esi
               	movq	%r12, %rdi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	16(%r12), %eax
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rbx), %edx
               	movslq	%eax, %rbp
               	leaq	(%rcx,%rbp,2), %rdi
               	addq	$16, %rdi
               	addq	$16, %rbx
               	movslq	%edx, %r15
               	leaq	(%r15,%r15), %rdx
               	movq	%rbx, %rsi
               	callq	0x4136f0 <memcpy@plt>
               	addl	%ebp, %r15d
               	movq	%r12, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef50 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%r12)
               	movq	%r12, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	271650(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41efbf <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0x6f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%r14d, 8(%rax)
               	jge	0x41f003 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0xb3>
               	leaq	48(%rsp), %rdx
               	movq	8(%rbx), %rax
               	movq	%rax, 32(%rsp)
               	movl	8(%rax), %eax
               	leal	(%rax,%rax), %esi
               	addl	$2, %esi
               	cmpl	%r14d, %esi
               	cmovll	%r14d, %esi
               	movq	8(%rbx), %rdi
               	movq	%rdi, 40(%rsp)
               	callq	0x415790 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	271450(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f087 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x67>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %r15
               	movq	%r15, 24(%rsp)
               	movl	16(%rbx), %ebp
               	testl	%ebp, %ebp
               	je	0x41f0fe <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0xde>
               	js	0x41f165 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x145>
               	movslq	%ebp, %r12
               	movq	296(%r13), %rdi
               	leaq	31(,%rbp), %rsi
               	addq	%rbp, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	230199(%rip), %rcx      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, (%r14)
               	leaq	32(%rax), %rdi
               	addq	$16, %r15
               	addq	%r12, %r12
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%rbx, (%r14)
               	jmp	0x41f144 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x124>
               	movq	$0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 48(%rsp)
               	leaq	248899(%rip), %rbx      # 0x45bd78 <__unnamed_6>
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	271106(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f1df <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x6f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41f231 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	cmpl	$18, (%rax,%rcx)
               	jne	0x41f231 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*24(%rax)
               	movl	%eax, %ecx
               	movb	$1, %al
               	testb	%cl, %cl
               	jne	0x41f2f5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f2b4 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movq	(%r12), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	*144(%rcx)
               	testb	%al, %al
               	je	0x41f2ef <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x17f>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f2f3 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x183>
               	movzbl	270836(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f270 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f270 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	xorl	%eax, %eax
               	jmp	0x41f2f5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	270782(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f323 <kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testl	%eax, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	leaq	236852(%rip), %rax      # 0x4590a0 <ktypeglobal:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	270628(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f3bd <kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String+0x7d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rsp, %rsi
               	movq	%rsi, 40(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	callq	0x41a8e0 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>
               	movq	%rax, (%r14)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movb	270548(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f40d <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%rbx, 8(%r15)
               	je	0x41f430 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x40>
               	testq	%rbx, %rbx
               	je	0x41f439 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x49>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rax)
               	jmp	0x41f440 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	250617(%rip), %rax      # 0x45c730 <__unnamed_41>
               	jmp	0x41f440 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	248272(%rip), %rax      # 0x45be10 <__unnamed_8>
               	movq	%rax, (%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	270456(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f469 <kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	236796(%rip), %rdx      # 0x4591a0 <ktypeglobal:kotlin.collections.AbstractList.IteratorImpl#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%rbx)
               	movq	%r14, 24(%rax)
               	movq	%rcx, (%rbx)
               	movq	%rcx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r13
               	movb	270334(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f4e3 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r13, %rbx
               	je	0x41f6f8 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x238>
               	testq	%rbx, %rbx
               	je	0x41f6f4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$43, %ecx
               	shlq	$4, %rcx
               	cmpl	$43, (%rax,%rcx)
               	jne	0x41f6f4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41f6fc <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23c>
               	movq	%r14, 8(%rsp)
               	leaq	64(%rsp), %r15
               	leaq	56(%rsp), %r12
               	leaq	48(%rsp), %rbp
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	%rax, %r14
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f639 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	nopl	(%rax)
               	testq	%rax, %rax
               	jne	0x41f6f0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x230>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f700 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x240>
               	movzbl	269931(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f676 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x1b6>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbp
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41f630 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x170>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	jne	0x41f639 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	xorl	%ecx, %ecx
               	jmp	0x41f702 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x242>
               	xorl	%ecx, %ecx
               	jmp	0x41f71d <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	movb	$1, %cl
               	jmp	0x41f71d <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	xorl	%ecx, %ecx
               	jmp	0x41f707 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x247>
               	movb	$1, %cl
               	movq	8(%rsp), %r14
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	movb	269715(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f74e <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x1e>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	movl	$1, %r12d
               	jmp	0x41f82c <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xfc>
               	nopl	(%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movl	%r12d, %ebp
               	shll	$5, %ebp
               	subl	%r12d, %ebp
               	testq	%rax, %rax
               	je	0x41f870 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x140>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movl	%ebp, %r12d
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f874 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x144>
               	movzbl	269436(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f7e0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f7e0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41f827 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xf7>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%r12d, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	269356(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f8b5 <kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal+0x15>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %ebp
               	movq	8(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*136(%rax)
               	cmpl	%eax, %ebp
               	setl	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	269215(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f942 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0x62>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testb	%al, %al
               	je	0x41f992 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0xb2>
               	movq	8(%rbx), %rdi
               	movl	16(%rbx), %esi
               	leal	1(%rsi), %eax
               	movl	%eax, 16(%rbx)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdx
               	callq	*192(%rax)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	226054(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	234887(%rip), %rax      # 0x458fa0 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	268920(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fa69 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0x89>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41fa8c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	cmpl	%ebx, %ebp
               	jge	0x41fa8c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r15
               	leaq	80(%rsp), %r12
               	movq	%r12, 24(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7c0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	248700(%rip), %rsi      # 0x45c630 <__unnamed_46>
               	movq	%r12, %rdi
               	movq	%r15, %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	247389(%rip), %rsi      # 0x45c130 <__unnamed_18>
               	movq	%r12, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee60 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed40 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	64(%rsp), %rsi
               	callq	0x41f020 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	226009(%rip), %rcx      # 0x456e00 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	268673(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb60 <kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean+0x10>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	268569(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fbc8 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing+0x58>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	225488(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415d80 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any>:
               	pushq	%rax
               	movb	268481(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc20 <kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any+0x10>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x41fb70 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268446(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc43 <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fc8d <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5d>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41fc8d <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5d>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	24(%rax), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	268337(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcb0 <kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int+0x10>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268302(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcd3 <kfun:kotlin.collections.EmptySet#toString(){}kotlin.String+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	248470(%rip), %rax      # 0x45c770 <__unnamed_47>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int>:
               	pushq	%rax
               	movb	268273(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fcf0 <kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int+0x10>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	268241(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd10 <kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean+0x10>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268206(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd33 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41fd42 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x22>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268158(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd63 <kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	24(%rax), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*%rax
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	268094(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fda3 <kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	255318(%rip), %rax      # 0x45e300 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?>:
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movb	268062(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fdc3 <kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	$0, (%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rsi, %rbx
               	movb	268024(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fde9 <kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rdi, %rbx
               	movb	267976(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe19 <kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	267937(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe40 <kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int+0x10>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	267902(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe63 <kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String+0x13>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	244662(%rip), %rax      # 0x45ba20 <__unnamed_48>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 16(%rsp)
               	movb	267781(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fedc <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x6c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r15), %rax
               	movq	%rax, 24(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x41ff19 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0xa9>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 16(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.<get-size>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	267581(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ffa4 <kfun:kotlin.enums.EnumEntriesList.<get-size>#internal+0x64>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	callq	0x41fe70 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.get#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	267428(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42003d <kfun:kotlin.enums.EnumEntriesList.get#internal+0x6d>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41fe70 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rax, %rbx
               	movl	8(%rax), %esi
               	movl	%r12d, %edi
               	callq	0x41f9e0 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>
               	cmpl	%r12d, 8(%rbx)
               	jbe	0x420080 <kfun:kotlin.enums.EnumEntriesList.get#internal+0xb0>
               	movslq	%r12d, %rax
               	movq	16(%rbx,%rax,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.contains#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	267238(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4200fb <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x6b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x420115 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x85>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$-86, %eax
               	cmpl	$14, %eax
               	jbe	0x420119 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x89>
               	xorl	%eax, %eax
               	jmp	0x420158 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xc8>
               	leaq	24(%rsp), %rsi
               	movq	%r14, %rdi
               	callq	0x41fe70 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	16(%r15), %ecx
               	testl	%ecx, %ecx
               	js	0x420138 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa8>
               	movl	8(%rax), %edx
               	leal	-1(%rdx), %esi
               	cmpl	%ecx, %esi
               	jge	0x42013c <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xac>
               	xorl	%eax, %eax
               	jmp	0x42014d <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xbd>
               	cmpl	%ecx, %edx
               	jbe	0x42016e <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xde>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rax, 32(%rsp)
               	cmpq	%r15, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	267080(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420199 <kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x19>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	267030(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4201cb <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x1b>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	leal	-1(%rax), %edx
               	movzwl	%bp, %esi
               	movq	%rbx, %rdi
               	callq	0x420240 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
               	cmpl	$-1, %eax
               	je	0x420226 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x76>
               	movl	8(%rbx), %edx
               	addl	$1, %eax
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	movq	%r14, %rcx
               	callq	0x4370e0 <Kotlin_String_subSequence>
               	movq	%rax, %rbx
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x420231 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x81>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	225752(%rip), %rsi      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419da0 <ThrowClassCastException>

<kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	leaq	222885(%rip), %rax      # 0x456920 <ktypeglobal:kotlin.CharArray#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movl	$1, 136(%rsp)
               	movw	$0, 144(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movb	266748(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4202e5 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xa5>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	je	0x42034c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42034c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	8(%r12), %ecx
               	testl	%ecx, %ecx
               	je	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leal	-1(%rcx), %edx
               	cmpl	%r15d, %ecx
               	cmoval	%r15d, %edx
               	testl	%edx, %edx
               	js	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%edx, %edx
               	nop
               	cmpw	%bp, 16(%r12,%rdx,2)
               	je	0x420546 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x306>
               	addq	$-1, %rdx
               	leal	1(%rdx), %ecx
               	testl	%ecx, %ecx
               	jg	0x420330 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
               	jmp	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leaq	128(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	48(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rcx
               	movw	%bp, 16(%rax)
               	movq	48(%rsp), %r14
               	movq	%r14, 64(%rsp)
               	cmpl	$1, 8(%r14)
               	jne	0x42044c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	testq	%r12, %r12
               	je	0x42044c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42044c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 112(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 96(%rsp)
               	movl	8(%r14), %eax
               	cmpl	$1, %eax
               	jne	0x42054e <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x30e>
               	movzwl	16(%r14), %esi
               	movq	88(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	8(%r12), %edx
               	testl	%edx, %edx
               	je	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	leal	-1(%rdx), %ecx
               	cmpl	%r15d, %edx
               	cmoval	%r15d, %ecx
               	testl	%ecx, %ecx
               	js	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ecx, %ecx
               	nopl	(%rax)
               	cmpw	%si, 16(%r12,%rcx,2)
               	je	0x42054a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x30a>
               	addq	$-1, %rcx
               	leal	1(%rcx), %edx
               	testl	%edx, %edx
               	jg	0x420430 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f0>
               	jmp	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	addl	$-1, %ebp
               	cmpl	%r15d, %ebp
               	cmovgl	%r15d, %ebp
               	testl	%ebp, %ebp
               	js	0x42051a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2da>
               	xorl	%r13d, %r13d
               	movq	%rbx, 8(%rsp)
               	movb	266311(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42049a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x25a>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbp), %eax
               	movl	%eax, 4(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	callq	*8(%rax)
               	movl	%eax, %ebx
               	movl	8(%r14), %r15d
               	testl	%r15d, %r15d
               	cmovsl	%r13d, %r15d
               	xorl	%r13d, %r13d
               	cmpl	%r13d, %r15d
               	je	0x420501 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c1>
               	movzbl	266225(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4204f0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b0>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpw	%bx, 16(%r14,%r13,2)
               	je	0x420521 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e1>
               	addq	$1, %r13
               	cmpl	%r13d, %r15d
               	jne	0x4204e0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a0>
               	testl	%ebp, %ebp
               	movl	4(%rsp), %eax
               	movl	%eax, %ebp
               	movq	8(%rsp), %rbx
               	movl	$0, %r13d
               	jg	0x42048b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x24b>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	jmp	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ebp, %eax
               	movq	8(%rsp), %rbx
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%edx, %eax
               	jmp	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	movl	%ecx, %eax
               	jmp	0x420528 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2e8>
               	testl	%eax, %eax
               	jne	0x42058c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x34c>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	223046(%rip), %rcx      # 0x456cc0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	leaq	245798(%rip), %rsi      # 0x45c5b0 <__unnamed_49>
               	jmp	0x4205c4 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x384>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	223468(%rip), %rcx      # 0x456ea0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	245788(%rip), %rsi      # 0x45c5e0 <__unnamed_50>
               	movq	%rbx, %rdi
               	callq	0x415d00 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:#main(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$88, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	234002(%rip), %rax      # 0x459810 <ktypeglobal:LambdaBenchmark#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 32(%rsp)
               	movb	265870(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420653 <kfun:#main(){}+0x73>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r15, 64(%rsp)
               	movq	%r14, %rax
               	cmpl	$2, -68(%r14)
               	je	0x4206a7 <kfun:#main(){}+0xc7>
               	leaq	-68(%r14), %rdi
               	leaq	142(%rip), %rsi         # 0x420730 <kfun:Random.$init_thread_local#internal>
               	callq	0x43a590 <CallInitThreadLocal>
               	movl	$3, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, 72(%rsp)
               	movl	16(%rax), %ecx
               	leal	(%rcx,%rcx,2), %ecx
               	addl	$11, %ecx
               	movslq	%ecx, %rcx
               	imulq	$1717986919, %rcx, %rdx # imm = 0x66666667
               	movq	%rdx, %rsi
               	shrq	$63, %rsi
               	sarq	$35, %rdx
               	addl	%esi, %edx
               	shll	$2, %edx
               	leal	(%rdx,%rdx,4), %edx
               	subl	%edx, %ecx
               	movl	%ecx, 16(%rax)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movl	$10001, %ebp            # imm = 0x2711
               	jmp	0x420705 <kfun:#main(){}+0x125>
               	nopw	(%rax,%rax)
               	addl	$-1, %ebp
               	je	0x420717 <kfun:#main(){}+0x137>
               	movzbl	265676(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420700 <kfun:#main(){}+0x120>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x420700 <kfun:#main(){}+0x120>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:Random.$init_thread_local#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	265557(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42078c <kfun:Random.$init_thread_local#internal+0x5c>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	$3, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	%rax, %r14
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	233695(%rip), %rcx      # 0x4598a0 <ktypeglobal:Random.Companion#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movl	$3, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	%rbx, (%rax)
               	movl	$3, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rax
               	movabsq	$4591870180066957722, %rcx # imm = 0x3FB999999999999A
               	movq	%rcx, 8(%rax)
               	movl	$3, %edi
               	callq	0x424c20 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265386(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420837 <kfun:Random.$init_thread_local#internal+0x107>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420846 <kfun:Random.$init_thread_local#internal+0x116>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260603(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265322(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420877 <kfun:Random.$init_thread_local#internal+0x147>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420886 <kfun:Random.$init_thread_local#internal+0x156>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260539(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265258(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4208b7 <kfun:Random.$init_thread_local#internal+0x187>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4208c6 <kfun:Random.$init_thread_local#internal+0x196>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260475(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265194(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4208f7 <kfun:Random.$init_thread_local#internal+0x1c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420906 <kfun:Random.$init_thread_local#internal+0x1d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260411(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265130(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420937 <kfun:Random.$init_thread_local#internal+0x207>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420946 <kfun:Random.$init_thread_local#internal+0x216>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260347(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265066(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420977 <kfun:Random.$init_thread_local#internal+0x247>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420986 <kfun:Random.$init_thread_local#internal+0x256>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260283(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	265002(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209b7 <kfun:Random.$init_thread_local#internal+0x287>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4209c6 <kfun:Random.$init_thread_local#internal+0x296>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260219(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264938(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209f7 <kfun:Random.$init_thread_local#internal+0x2c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a06 <kfun:Random.$init_thread_local#internal+0x2d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260155(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264874(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a37 <kfun:Random.$init_thread_local#internal+0x307>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a46 <kfun:Random.$init_thread_local#internal+0x316>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260091(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264810(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420a77 <kfun:Random.$init_thread_local#internal+0x347>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420a86 <kfun:Random.$init_thread_local#internal+0x356>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	260027(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264746(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ab7 <kfun:Random.$init_thread_local#internal+0x387>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ac6 <kfun:Random.$init_thread_local#internal+0x396>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259963(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264682(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420af7 <kfun:Random.$init_thread_local#internal+0x3c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b06 <kfun:Random.$init_thread_local#internal+0x3d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259899(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264618(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b37 <kfun:Random.$init_thread_local#internal+0x407>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b46 <kfun:Random.$init_thread_local#internal+0x416>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259835(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264554(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420b77 <kfun:Random.$init_thread_local#internal+0x447>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420b86 <kfun:Random.$init_thread_local#internal+0x456>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259771(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264490(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420bb7 <kfun:Random.$init_thread_local#internal+0x487>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420bc6 <kfun:Random.$init_thread_local#internal+0x496>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259707(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264426(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420bf7 <kfun:Random.$init_thread_local#internal+0x4c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c06 <kfun:Random.$init_thread_local#internal+0x4d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259643(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264362(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c37 <kfun:Random.$init_thread_local#internal+0x507>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c46 <kfun:Random.$init_thread_local#internal+0x516>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259579(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264298(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c77 <kfun:Random.$init_thread_local#internal+0x547>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420c86 <kfun:Random.$init_thread_local#internal+0x556>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259515(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264234(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cb7 <kfun:Random.$init_thread_local#internal+0x587>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420cc6 <kfun:Random.$init_thread_local#internal+0x596>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259451(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264170(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cf7 <kfun:Random.$init_thread_local#internal+0x5c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d06 <kfun:Random.$init_thread_local#internal+0x5d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259387(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264106(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d37 <kfun:Random.$init_thread_local#internal+0x607>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d46 <kfun:Random.$init_thread_local#internal+0x616>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259323(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	264042(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d77 <kfun:Random.$init_thread_local#internal+0x647>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420d86 <kfun:Random.$init_thread_local#internal+0x656>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259259(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263978(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420db7 <kfun:Random.$init_thread_local#internal+0x687>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420dc6 <kfun:Random.$init_thread_local#internal+0x696>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259195(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263914(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420df7 <kfun:Random.$init_thread_local#internal+0x6c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e06 <kfun:Random.$init_thread_local#internal+0x6d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259131(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263850(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e37 <kfun:Random.$init_thread_local#internal+0x707>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e46 <kfun:Random.$init_thread_local#internal+0x716>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259067(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263786(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e77 <kfun:Random.$init_thread_local#internal+0x747>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420e86 <kfun:Random.$init_thread_local#internal+0x756>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	259003(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263722(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420eb7 <kfun:Random.$init_thread_local#internal+0x787>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420ec6 <kfun:Random.$init_thread_local#internal+0x796>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258939(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263658(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ef7 <kfun:Random.$init_thread_local#internal+0x7c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f06 <kfun:Random.$init_thread_local#internal+0x7d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258875(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263594(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f37 <kfun:Random.$init_thread_local#internal+0x807>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f46 <kfun:Random.$init_thread_local#internal+0x816>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258811(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263530(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f77 <kfun:Random.$init_thread_local#internal+0x847>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420f86 <kfun:Random.$init_thread_local#internal+0x856>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258747(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263466(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420fb7 <kfun:Random.$init_thread_local#internal+0x887>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x420fc6 <kfun:Random.$init_thread_local#internal+0x896>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258683(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263402(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420ff7 <kfun:Random.$init_thread_local#internal+0x8c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421006 <kfun:Random.$init_thread_local#internal+0x8d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258619(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263338(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421037 <kfun:Random.$init_thread_local#internal+0x907>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421046 <kfun:Random.$init_thread_local#internal+0x916>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258555(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263274(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421077 <kfun:Random.$init_thread_local#internal+0x947>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421086 <kfun:Random.$init_thread_local#internal+0x956>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258491(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263210(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4210b7 <kfun:Random.$init_thread_local#internal+0x987>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4210c6 <kfun:Random.$init_thread_local#internal+0x996>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258427(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263146(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4210f7 <kfun:Random.$init_thread_local#internal+0x9c7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421106 <kfun:Random.$init_thread_local#internal+0x9d6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258363(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263082(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421137 <kfun:Random.$init_thread_local#internal+0xa07>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421146 <kfun:Random.$init_thread_local#internal+0xa16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258299(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	263018(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421177 <kfun:Random.$init_thread_local#internal+0xa47>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421186 <kfun:Random.$init_thread_local#internal+0xa56>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258235(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262954(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4211b7 <kfun:Random.$init_thread_local#internal+0xa87>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4211c6 <kfun:Random.$init_thread_local#internal+0xa96>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258171(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262890(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4211f7 <kfun:Random.$init_thread_local#internal+0xac7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421206 <kfun:Random.$init_thread_local#internal+0xad6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	258107(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262825(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421238 <kfun:Random.$init_thread_local#internal+0xb08>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421264 <kfun:Random.$init_thread_local#internal+0xb34>
               	testl	%ebx, %ebx
               	je	0x42126c <kfun:Random.$init_thread_local#internal+0xb3c>
               	movq	$0, 257985(%rip)        # 0x460210 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	$0, 257982(%rip)        # 0x460218 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movl	$0, 258028(%rip)        # 0x460250 <state_global$kotlin.native.MemoryModel>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	258005(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopw	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262714(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212a7 <kfun:Random.$init_thread_local#internal+0xb77>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4212b6 <kfun:Random.$init_thread_local#internal+0xb86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257931(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262650(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212e7 <kfun:Random.$init_thread_local#internal+0xbb7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4212f6 <kfun:Random.$init_thread_local#internal+0xbc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257867(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262586(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421327 <kfun:Random.$init_thread_local#internal+0xbf7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421336 <kfun:Random.$init_thread_local#internal+0xc06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257803(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262522(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421367 <kfun:Random.$init_thread_local#internal+0xc37>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421376 <kfun:Random.$init_thread_local#internal+0xc46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257739(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262457(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4213a8 <kfun:Random.$init_thread_local#internal+0xc78>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4213c9 <kfun:Random.$init_thread_local#internal+0xc99>
               	testl	%ebx, %ebx
               	je	0x4213d1 <kfun:Random.$init_thread_local#internal+0xca1>
               	movq	$0, 257633(%rip)        # 0x460220 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movl	$0, 257675(%rip)        # 0x460254 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257648(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	262361(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421408 <kfun:Random.$init_thread_local#internal+0xcd8>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421429 <kfun:Random.$init_thread_local#internal+0xcf9>
               	testl	%ebx, %ebx
               	je	0x421431 <kfun:Random.$init_thread_local#internal+0xd01>
               	movq	$0, 257545(%rip)        # 0x460228 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movl	$0, 257583(%rip)        # 0x460258 <state_global$kotlin.native.concurrent.INITIALIZING>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257552(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262266(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421467 <kfun:Random.$init_thread_local#internal+0xd37>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421476 <kfun:Random.$init_thread_local#internal+0xd46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257483(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262202(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214a7 <kfun:Random.$init_thread_local#internal+0xd77>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4214b6 <kfun:Random.$init_thread_local#internal+0xd86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257419(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262138(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214e7 <kfun:Random.$init_thread_local#internal+0xdb7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4214f6 <kfun:Random.$init_thread_local#internal+0xdc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257355(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262074(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421527 <kfun:Random.$init_thread_local#internal+0xdf7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421536 <kfun:Random.$init_thread_local#internal+0xe06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257291(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	262010(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421567 <kfun:Random.$init_thread_local#internal+0xe37>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421576 <kfun:Random.$init_thread_local#internal+0xe46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257227(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	261945(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4215a8 <kfun:Random.$init_thread_local#internal+0xe78>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4215c9 <kfun:Random.$init_thread_local#internal+0xe99>
               	testl	%ebx, %ebx
               	je	0x4215d1 <kfun:Random.$init_thread_local#internal+0xea1>
               	movq	$0, 257137(%rip)        # 0x460230 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movl	$0, 257171(%rip)        # 0x46025c <state_global$kotlin.native.internal.NativePtr>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	257136(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261850(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421607 <kfun:Random.$init_thread_local#internal+0xed7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421616 <kfun:Random.$init_thread_local#internal+0xee6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257067(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261786(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421647 <kfun:Random.$init_thread_local#internal+0xf17>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421656 <kfun:Random.$init_thread_local#internal+0xf26>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	257003(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	261721(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421688 <kfun:Random.$init_thread_local#internal+0xf58>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4216a9 <kfun:Random.$init_thread_local#internal+0xf79>
               	testl	%ebx, %ebx
               	je	0x4216b1 <kfun:Random.$init_thread_local#internal+0xf81>
               	movq	$0, 256921(%rip)        # 0x460238 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movl	$0, 256951(%rip)        # 0x460260 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	256912(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261626(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4216e7 <kfun:Random.$init_thread_local#internal+0xfb7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4216f6 <kfun:Random.$init_thread_local#internal+0xfc6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256843(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261562(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421727 <kfun:Random.$init_thread_local#internal+0xff7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421736 <kfun:Random.$init_thread_local#internal+0x1006>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256779(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261498(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421767 <kfun:Random.$init_thread_local#internal+0x1037>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421776 <kfun:Random.$init_thread_local#internal+0x1046>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256715(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261434(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217a7 <kfun:Random.$init_thread_local#internal+0x1077>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4217b6 <kfun:Random.$init_thread_local#internal+0x1086>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256651(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261370(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217e7 <kfun:Random.$init_thread_local#internal+0x10b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4217f6 <kfun:Random.$init_thread_local#internal+0x10c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256587(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261306(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421827 <kfun:Random.$init_thread_local#internal+0x10f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421836 <kfun:Random.$init_thread_local#internal+0x1106>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256523(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261242(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421867 <kfun:Random.$init_thread_local#internal+0x1137>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421876 <kfun:Random.$init_thread_local#internal+0x1146>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256459(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261178(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218a7 <kfun:Random.$init_thread_local#internal+0x1177>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4218b6 <kfun:Random.$init_thread_local#internal+0x1186>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256395(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261114(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4218e7 <kfun:Random.$init_thread_local#internal+0x11b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4218f6 <kfun:Random.$init_thread_local#internal+0x11c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256331(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	261050(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421927 <kfun:Random.$init_thread_local#internal+0x11f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421936 <kfun:Random.$init_thread_local#internal+0x1206>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256267(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260986(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421967 <kfun:Random.$init_thread_local#internal+0x1237>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421976 <kfun:Random.$init_thread_local#internal+0x1246>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256203(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260922(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4219a7 <kfun:Random.$init_thread_local#internal+0x1277>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4219b6 <kfun:Random.$init_thread_local#internal+0x1286>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256139(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260858(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4219e7 <kfun:Random.$init_thread_local#internal+0x12b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4219f6 <kfun:Random.$init_thread_local#internal+0x12c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256075(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260794(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a27 <kfun:Random.$init_thread_local#internal+0x12f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421a36 <kfun:Random.$init_thread_local#internal+0x1306>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	256011(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260729(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a68 <kfun:Random.$init_thread_local#internal+0x1338>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421a7f <kfun:Random.$init_thread_local#internal+0x134f>
               	testl	%ebx, %ebx
               	je	0x421a87 <kfun:Random.$init_thread_local#internal+0x1357>
               	movq	$0, 247937(%rip)        # 0x45e300 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255930(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260634(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ac7 <kfun:Random.$init_thread_local#internal+0x1397>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ad6 <kfun:Random.$init_thread_local#internal+0x13a6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255851(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260569(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b08 <kfun:Random.$init_thread_local#internal+0x13d8>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421b1f <kfun:Random.$init_thread_local#internal+0x13ef>
               	testl	%ebx, %ebx
               	je	0x421b27 <kfun:Random.$init_thread_local#internal+0x13f7>
               	movq	$0, 247785(%rip)        # 0x45e308 <kvar:kotlin.collections.EmptySet.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255770(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260474(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b67 <kfun:Random.$init_thread_local#internal+0x1437>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421b76 <kfun:Random.$init_thread_local#internal+0x1446>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255691(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260410(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ba7 <kfun:Random.$init_thread_local#internal+0x1477>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421bb6 <kfun:Random.$init_thread_local#internal+0x1486>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255627(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260345(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421be8 <kfun:Random.$init_thread_local#internal+0x14b8>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421bff <kfun:Random.$init_thread_local#internal+0x14cf>
               	testl	%ebx, %ebx
               	je	0x421c07 <kfun:Random.$init_thread_local#internal+0x14d7>
               	movq	$0, 247569(%rip)        # 0x45e310 <kvar:kotlin.coroutines.EmptyCoroutineContext.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255546(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260250(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c47 <kfun:Random.$init_thread_local#internal+0x1517>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421c56 <kfun:Random.$init_thread_local#internal+0x1526>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255467(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260186(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421c87 <kfun:Random.$init_thread_local#internal+0x1557>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421c96 <kfun:Random.$init_thread_local#internal+0x1566>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255403(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	260121(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421cc8 <kfun:Random.$init_thread_local#internal+0x1598>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x421ce9 <kfun:Random.$init_thread_local#internal+0x15b9>
               	testl	%ebx, %ebx
               	je	0x421cf1 <kfun:Random.$init_thread_local#internal+0x15c1>
               	movq	$0, 255329(%rip)        # 0x460240 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	movl	$0, 255355(%rip)        # 0x460264 <state_global$kotlin.ranges.IntRange>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	255312(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4248b0 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	260026(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d27 <kfun:Random.$init_thread_local#internal+0x15f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d36 <kfun:Random.$init_thread_local#internal+0x1606>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255243(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259962(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421d67 <kfun:Random.$init_thread_local#internal+0x1637>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421d76 <kfun:Random.$init_thread_local#internal+0x1646>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255179(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259898(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421da7 <kfun:Random.$init_thread_local#internal+0x1677>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421db6 <kfun:Random.$init_thread_local#internal+0x1686>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255115(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259834(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421de7 <kfun:Random.$init_thread_local#internal+0x16b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421df6 <kfun:Random.$init_thread_local#internal+0x16c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	255051(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259770(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e27 <kfun:Random.$init_thread_local#internal+0x16f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e36 <kfun:Random.$init_thread_local#internal+0x1706>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254987(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259706(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421e67 <kfun:Random.$init_thread_local#internal+0x1737>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421e76 <kfun:Random.$init_thread_local#internal+0x1746>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254923(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259642(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ea7 <kfun:Random.$init_thread_local#internal+0x1777>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421eb6 <kfun:Random.$init_thread_local#internal+0x1786>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254859(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259578(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ee7 <kfun:Random.$init_thread_local#internal+0x17b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ef6 <kfun:Random.$init_thread_local#internal+0x17c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254795(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259514(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f27 <kfun:Random.$init_thread_local#internal+0x17f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f36 <kfun:Random.$init_thread_local#internal+0x1806>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254731(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259450(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f67 <kfun:Random.$init_thread_local#internal+0x1837>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f76 <kfun:Random.$init_thread_local#internal+0x1846>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254667(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259386(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fa7 <kfun:Random.$init_thread_local#internal+0x1877>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421fb6 <kfun:Random.$init_thread_local#internal+0x1886>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254603(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259322(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fe7 <kfun:Random.$init_thread_local#internal+0x18b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421ff6 <kfun:Random.$init_thread_local#internal+0x18c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254539(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259258(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422027 <kfun:Random.$init_thread_local#internal+0x18f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422036 <kfun:Random.$init_thread_local#internal+0x1906>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254475(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259194(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422067 <kfun:Random.$init_thread_local#internal+0x1937>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422076 <kfun:Random.$init_thread_local#internal+0x1946>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254411(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259130(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220a7 <kfun:Random.$init_thread_local#internal+0x1977>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220b6 <kfun:Random.$init_thread_local#internal+0x1986>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254347(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259066(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220e7 <kfun:Random.$init_thread_local#internal+0x19b7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220f6 <kfun:Random.$init_thread_local#internal+0x19c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254283(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	259002(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422127 <kfun:Random.$init_thread_local#internal+0x19f7>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422136 <kfun:Random.$init_thread_local#internal+0x1a06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254219(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	258938(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422167 <kfun:Random.$init_thread_local#internal+0x1a37>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422176 <kfun:Random.$init_thread_local#internal+0x1a46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254155(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	258874(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4221a7 <kfun:Random.$init_thread_local#internal+0x1a77>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4221b6 <kfun:Random.$init_thread_local#internal+0x1a86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	254091(%rip), %rsi      # 0x460248 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x4248b0 <AddTLSRecord>

<_Konan_constructors>:
               	cmpl	$0, 254097(%rip)        # 0x460268 <state_global$kotlin.ranges.IntRange+0x4>
               	je	0x4221e7 <_Konan_constructors+0x17>
               	cmpl	$0, 254092(%rip)        # 0x46026c <state_global$kotlin.ranges.IntRange+0x8>
               	je	0x423105 <_Konan_constructors+0xf35>
               	retq
               	movl	$1, 254071(%rip)        # 0x460268 <state_global$kotlin.ranges.IntRange+0x4>
               	movq	359024(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358980(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	leaq	358973(%rip), %rax      # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	246018(%rip), %rdx      # 0x45e318 <init_node>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358984(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358977(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358933(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245994(%rip), %rdx      # 0x45e328 <init_node.16>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358944(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358937(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358893(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245970(%rip), %rdx      # 0x45e338 <init_node.17>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358904(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358897(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358853(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245946(%rip), %rdx      # 0x45e348 <init_node.18>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358864(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358857(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358813(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245922(%rip), %rdx      # 0x45e358 <init_node.19>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358824(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358817(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358773(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245898(%rip), %rdx      # 0x45e368 <init_node.20>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358784(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358777(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358733(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245874(%rip), %rdx      # 0x45e378 <init_node.21>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358744(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358737(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358693(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245850(%rip), %rdx      # 0x45e388 <init_node.22>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358704(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358697(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358653(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245826(%rip), %rdx      # 0x45e398 <init_node.23>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358664(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358657(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358613(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245802(%rip), %rdx      # 0x45e3a8 <init_node.24>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358624(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358617(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358573(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245778(%rip), %rdx      # 0x45e3b8 <init_node.25>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358584(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358577(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358533(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245754(%rip), %rdx      # 0x45e3c8 <init_node.26>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358544(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358537(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358493(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245730(%rip), %rdx      # 0x45e3d8 <init_node.27>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358504(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358497(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358453(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245706(%rip), %rdx      # 0x45e3e8 <init_node.28>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358464(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358457(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358413(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245682(%rip), %rdx      # 0x45e3f8 <init_node.29>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358424(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358417(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358373(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245658(%rip), %rdx      # 0x45e408 <init_node.30>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358384(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358377(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358333(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245634(%rip), %rdx      # 0x45e418 <init_node.31>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358344(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358337(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358293(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245610(%rip), %rdx      # 0x45e428 <init_node.32>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358304(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358297(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358253(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245586(%rip), %rdx      # 0x45e438 <init_node.33>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358264(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358257(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358213(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245562(%rip), %rdx      # 0x45e448 <init_node.34>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358224(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358217(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358173(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245538(%rip), %rdx      # 0x45e458 <init_node.35>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358184(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358177(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358133(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245514(%rip), %rdx      # 0x45e468 <init_node.36>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358144(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358137(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358093(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245490(%rip), %rdx      # 0x45e478 <init_node.37>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358104(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358097(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358053(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245466(%rip), %rdx      # 0x45e488 <init_node.38>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358064(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358057(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 358013(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245442(%rip), %rdx      # 0x45e498 <init_node.39>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 358024(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	358017(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357973(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245418(%rip), %rdx      # 0x45e4a8 <init_node.40>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357984(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357977(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357933(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245394(%rip), %rdx      # 0x45e4b8 <init_node.41>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357944(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357937(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357893(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245370(%rip), %rdx      # 0x45e4c8 <init_node.42>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357904(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357897(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357853(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245346(%rip), %rdx      # 0x45e4d8 <init_node.43>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357864(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357857(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357813(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245322(%rip), %rdx      # 0x45e4e8 <init_node.44>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357824(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357817(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357773(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245298(%rip), %rdx      # 0x45e4f8 <init_node.45>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357784(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357777(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357733(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245274(%rip), %rdx      # 0x45e508 <init_node.46>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357744(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357737(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357693(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245250(%rip), %rdx      # 0x45e518 <init_node.47>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357704(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357697(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357653(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245226(%rip), %rdx      # 0x45e528 <init_node.48>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357664(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357657(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357613(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245202(%rip), %rdx      # 0x45e538 <init_node.49>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357624(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357617(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357573(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245178(%rip), %rdx      # 0x45e548 <init_node.50>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357584(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357577(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357533(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245154(%rip), %rdx      # 0x45e558 <init_node.51>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357544(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357537(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357493(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245130(%rip), %rdx      # 0x45e568 <init_node.52>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357504(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357497(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357453(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245106(%rip), %rdx      # 0x45e578 <init_node.53>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357464(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357457(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357413(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245082(%rip), %rdx      # 0x45e588 <init_node.54>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357424(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357417(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357373(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245058(%rip), %rdx      # 0x45e598 <init_node.55>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357384(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357377(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357333(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245034(%rip), %rdx      # 0x45e5a8 <init_node.56>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357344(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357337(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357293(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	245010(%rip), %rdx      # 0x45e5b8 <init_node.57>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357304(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357297(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357253(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244986(%rip), %rdx      # 0x45e5c8 <init_node.58>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357264(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357257(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357213(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244962(%rip), %rdx      # 0x45e5d8 <init_node.59>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357224(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357217(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357173(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244938(%rip), %rdx      # 0x45e5e8 <init_node.60>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357184(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357177(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357133(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244914(%rip), %rdx      # 0x45e5f8 <init_node.61>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357144(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357137(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357093(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244890(%rip), %rdx      # 0x45e608 <init_node.62>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357104(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357097(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357053(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244866(%rip), %rdx      # 0x45e618 <init_node.63>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357064(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357057(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 357013(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244842(%rip), %rdx      # 0x45e628 <init_node.64>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 357024(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	357017(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356973(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244818(%rip), %rdx      # 0x45e638 <init_node.65>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356984(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356977(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356933(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244794(%rip), %rdx      # 0x45e648 <init_node.66>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356944(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356937(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356893(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244770(%rip), %rdx      # 0x45e658 <init_node.67>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356904(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356897(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356853(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244746(%rip), %rdx      # 0x45e668 <init_node.68>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356864(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356857(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356813(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244722(%rip), %rdx      # 0x45e678 <init_node.69>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356824(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356817(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356773(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244698(%rip), %rdx      # 0x45e688 <init_node.70>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356784(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356777(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356733(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244674(%rip), %rdx      # 0x45e698 <init_node.71>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356744(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356737(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356693(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244650(%rip), %rdx      # 0x45e6a8 <init_node.72>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356704(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356697(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356653(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244626(%rip), %rdx      # 0x45e6b8 <init_node.73>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356664(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356657(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356613(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244602(%rip), %rdx      # 0x45e6c8 <init_node.74>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356624(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356617(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356573(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244578(%rip), %rdx      # 0x45e6d8 <init_node.75>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356584(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356577(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356533(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244554(%rip), %rdx      # 0x45e6e8 <init_node.76>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356544(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356537(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356493(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244530(%rip), %rdx      # 0x45e6f8 <init_node.77>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356504(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356497(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356453(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244506(%rip), %rdx      # 0x45e708 <init_node.78>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356464(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356457(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356413(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244482(%rip), %rdx      # 0x45e718 <init_node.79>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356424(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356417(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356373(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244458(%rip), %rdx      # 0x45e728 <init_node.80>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356384(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356377(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356333(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244434(%rip), %rdx      # 0x45e738 <init_node.81>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356344(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356337(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356293(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244410(%rip), %rdx      # 0x45e748 <init_node.82>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356304(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356297(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356253(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244386(%rip), %rdx      # 0x45e758 <init_node.83>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356264(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356257(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356213(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244362(%rip), %rdx      # 0x45e768 <init_node.84>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356224(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356217(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356173(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244338(%rip), %rdx      # 0x45e778 <init_node.85>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356184(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356177(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356133(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244314(%rip), %rdx      # 0x45e788 <init_node.86>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356144(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356137(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356093(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244290(%rip), %rdx      # 0x45e798 <init_node.87>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356104(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356097(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356053(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244266(%rip), %rdx      # 0x45e7a8 <init_node.88>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356064(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356057(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 356013(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244242(%rip), %rdx      # 0x45e7b8 <init_node.89>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 356024(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	356017(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355973(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244218(%rip), %rdx      # 0x45e7c8 <init_node.90>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355984(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355977(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355933(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244194(%rip), %rdx      # 0x45e7d8 <init_node.91>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355944(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355937(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355893(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244170(%rip), %rdx      # 0x45e7e8 <init_node.92>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355904(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355897(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355853(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244146(%rip), %rdx      # 0x45e7f8 <init_node.93>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355864(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355857(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355813(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244122(%rip), %rdx      # 0x45e808 <init_node.94>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355824(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355817(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355773(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244098(%rip), %rdx      # 0x45e818 <init_node.95>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355784(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355777(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355733(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244074(%rip), %rdx      # 0x45e828 <init_node.96>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355744(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355737(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355693(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244050(%rip), %rdx      # 0x45e838 <init_node.97>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355704(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355697(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355653(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244026(%rip), %rdx      # 0x45e848 <init_node.98>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355664(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355657(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355613(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	244002(%rip), %rdx      # 0x45e858 <init_node.99>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355624(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355617(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355573(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243978(%rip), %rdx      # 0x45e868 <init_node.100>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355584(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355577(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355533(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243954(%rip), %rdx      # 0x45e878 <init_node.101>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355544(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355537(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355493(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243930(%rip), %rdx      # 0x45e888 <init_node.102>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355504(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355497(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355453(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243906(%rip), %rdx      # 0x45e898 <init_node.103>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355464(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355457(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355413(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243882(%rip), %rdx      # 0x45e8a8 <init_node.104>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355424(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355417(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355373(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243858(%rip), %rdx      # 0x45e8b8 <init_node.105>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355384(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355377(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355333(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243834(%rip), %rdx      # 0x45e8c8 <init_node.106>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355344(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355337(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355293(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243810(%rip), %rdx      # 0x45e8d8 <init_node.107>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355304(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355297(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355253(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243786(%rip), %rdx      # 0x45e8e8 <init_node.108>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355264(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355257(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355213(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243762(%rip), %rdx      # 0x45e8f8 <init_node.109>
               	movq	%rdx, (%rcx)
               	movq	%rdx, 355224(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355217(%rip), %rcx      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 355173(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	243738(%rip), %rax      # 0x45e908 <init_node.110>
               	movq	%rax, (%rcx)
               	movq	%rax, 355184(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	cmpl	$0, 250221(%rip)        # 0x46026c <state_global$kotlin.ranges.IntRange+0x8>
               	jne	0x4221e6 <_Konan_constructors+0x16>
               	movl	$1, 250205(%rip)        # 0x46026c <state_global$kotlin.ranges.IntRange+0x8>
               	movq	355154(%rip), %rax      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rax
               	cmpq	$0, 355110(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	leaq	355103(%rip), %rcx      # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rcx, %rax
               	leaq	243684(%rip), %rdx      # 0x45e918 <init_node.111>
               	movq	%rdx, (%rax)
               	movq	%rdx, 355114(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	movq	355107(%rip), %rax      # 0x479c68 <(anonymous namespace)::initTailNode>
               	addq	$8, %rax
               	cmpq	$0, 355063(%rip)        # 0x479c48 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rcx, %rax
               	leaq	243660(%rip), %rcx      # 0x45e928 <init_node.112>
               	movq	%rcx, (%rax)
               	movq	%rcx, 355074(%rip)      # 0x479c68 <(anonymous namespace)::initTailNode>
               	retq
               	nopw	(%rax,%rax)

<kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>:
               	jmp	0x413720 <sched_yield@plt>
               	nopw	%cs:(%rax,%rax)

<__clang_call_terminate>:
               	pushq	%rax
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c423 <std::terminate()>
               	nopl	(%rax,%rax)

<void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, (%rsp)
               	movq	%rdi, %r13
               	cmpq	$0, 241163(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4231bf <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2f>
               	movq	%r13, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x423398 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x208>
               	cmpb	$0, 88(%r13)
               	je	0x423372 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	leaq	40(%r13), %r15
               	jmp	0x42320b <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x7b>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	96(%r13), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	movabsq	$9223372036854775807, %rsi # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rsi, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 104(%r13)
               	nopl	(%rax)
               	cmpb	$0, 88(%r13)
               	je	0x423372 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	movb	$0, 112(%r13)
               	movq	104(%r13), %r14
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	cmpq	%r14, %rax
               	jge	0x4232cf <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x13f>
               	xorl	%ecx, %ecx
               	cmpq	%rax, %r14
               	setns	%cl
               	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rdx, %rcx
               	movq	%r14, %rbp
               	subq	%rax, %rbp
               	cmovoq	%rcx, %rbp
               	movabsq	$86400000000000, %rax   # imm = 0x4E94914F0000
               	cmpq	%rax, %rbp
               	cmovgq	%rax, %rbp
               	callq	0x43d060 <std::chrono::_V2::system_clock::now()>
               	movq	%rax, %rbx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	movabsq	$1237940039285380275, %rcx # imm = 0x112E0BE826D694B3
               	imulq	%rcx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$26, %rbp
               	addq	%rax, %rbp
               	imulq	$-1000000000, %rbp, %r12 # imm = 0xC4653600
               	addq	%rbx, %r12
               	nopl	(%rax,%rax)
               	cmpb	$0, 112(%r13)
               	jne	0x423200 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	movq	%rbp, 8(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	leaq	8(%rsp), %rdx
               	callq	0x413740 <pthread_cond_timedwait@plt>
               	callq	0x43d060 <std::chrono::_V2::system_clock::now()>
               	cmpq	%rbx, %rax
               	jl	0x423290 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x100>
               	cmpb	$0, 112(%r13)
               	je	0x423214 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x84>
               	jmp	0x423200 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	cmpq	$0, 240865(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4232e1 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x151>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	(%rsp), %rax
               	movq	(%rax), %rbx
               	movq	16(%rbx), %rax
               	movl	(%rax), %eax
               	cmpl	$1, %eax
               	je	0x42334d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	56(%rbx), %rcx
               	movq	48(%rbx), %rdx
               	movq	24(%rdx), %rdx
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%rbp), %rsi
               	testq	%rdx, %rdx
               	cmovnsq	%rbp, %rsi
               	imulq	$1000, %rdx, %rdx       # imm = 0x3E8
               	cmovoq	%rsi, %rdx
               	xorl	%esi, %esi
               	movq	%rcx, %rdi
               	addq	%rdx, %rdi
               	setns	%sil
               	addq	%rbp, %rsi
               	addq	%rcx, %rdx
               	cmovoq	%rsi, %rdx
               	cmpq	%rdx, %rax
               	jl	0x42334d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	cmpq	$0, 80(%rbx)
               	je	0x423393 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x203>
               	leaq	64(%rbx), %rdi
               	callq	*88(%rbx)
               	cmpq	$0, 240739(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4231d0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	%r13, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x4231d0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	cmpq	$0, 240702(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x423384 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1f4>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43d0d2 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpq	$0, 240630(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4233cc <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x23c>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42340a <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2a>
               	movq	(%rdi), %r12
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rdi
               	addq	(%r15), %rdi
               	testb	$1, %al
               	je	0x423420 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	(%rdi), %rcx
               	movq	-1(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234445(%rip), %rax      # 0x45c808 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423456 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423456 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f240 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234397(%rip), %rax      # 0x45c808 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x423486 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x423486 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f240 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rcx
               	leaq	24(%rdi), %rsi
               	leaq	16(%rdi), %rdx
               	movq	80(%rdi), %r9
               	movb	$0, 40(%rsp)
               	cmpb	$0, 72(%rdi)
               	je	0x42350c <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x6c>
               	leaq	24(%rsp), %r8
               	movq	%r8, 8(%rsp)
               	movq	40(%rdi), %rax
               	leaq	56(%rdi), %rbx
               	cmpq	%rbx, %rax
               	je	0x4234e7 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x47>
               	movq	%rax, 8(%rsp)
               	movq	56(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	jmp	0x4234ee <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x4e>
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%r8)
               	movq	48(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movq	%rbx, 40(%rdi)
               	movq	$0, 48(%rdi)
               	movb	$0, 56(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%r9
               	cmpb	$0, 40(%rsp)
               	je	0x42352f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x42352f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x423553 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x423553 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234085(%rip), %rax      # 0x45c7d0 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x4237a0 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x423591 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x31>
               	addq	$64, %rbx
               	movq	%rbx, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	234021(%rip), %rax      # 0x45c7d0 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x4237a0 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4235ce <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x2e>
               	leaq	64(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nop

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)>:
               	pushq	%rax
               	movq	40(%rsi), %rcx
               	lock
               	addq	%rcx, 32(%rdi)
               	movq	32(%rdi), %rcx
               	movq	40(%rdi), %rdx
               	addq	%rcx, %rdx
               	movq	24(%rdi), %rcx
               	movq	32(%rcx), %rcx
               	cmpq	%rcx, %rdx
               	jb	0x423613 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x33>
               	movq	%rdi, %rax
               	cmpq	$0, 80(%rdi)
               	je	0x423615 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x35>
               	leaq	64(%rax), %rdi
               	callq	*88(%rax)
               	popq	%rax
               	retq
               	callq	0x43d0d2 <std::__throw_bad_function_call()>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	xorl	%eax, %eax
               	xchgq	%rax, 32(%rdi)
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	xchgq	%rax, 56(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %r15
               	leaq	96(%rbx), %r14
               	cmpq	$0, 239962(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x423670 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0x40>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4236f3 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xc3>
               	movabsq	$9223372036854775807, %r12 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r12), %rax
               	testq	%r15, %r15
               	cmovnsq	%r12, %rax
               	imulq	$1000, %r15, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r12, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 200(%rbx)
               	movb	$1, 208(%rbx)
               	cmpq	$0, 239849(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4236d9 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xa9>
               	movq	%r14, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$136, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x43ccf8 <std::condition_variable::notify_all()>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)>:
               	movq	%rsi, %rax
               	xchgq	%rax, 40(%rdi)
               	movq	24(%rdi), %rax
               	movb	16(%rax), %al
               	testb	$1, %al
               	je	0x423798 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	%rsi, %xmm1
               	punpckldq	129025(%rip), %xmm1 # xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
                                                # 0x442f30 <_IO_stdin_used+0x30>
               	subpd	129033(%rip), %xmm1     # 0x442f40 <_IO_stdin_used+0x40>
               	movapd	%xmm1, %xmm0
               	unpckhpd	%xmm1, %xmm0            # xmm0 = xmm0[1],xmm1[1]
               	addsd	%xmm1, %xmm0
               	movq	24(%rdi), %rax
               	movsd	40(%rax), %xmm1         # xmm1 = mem[0],zero
               	divsd	%xmm1, %xmm0
               	movapd	129016(%rip), %xmm1     # 0x442f50 <_IO_stdin_used+0x50>
               	andpd	%xmm0, %xmm1
               	ucomisd	129196(%rip), %xmm1     # 0x443010 <_IO_stdin_used+0x110>
               	je	0x423798 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	24(%rdi), %rax
               	movq	48(%rax), %rax
               	xorps	%xmm1, %xmm1
               	cvtsi2sd	%rax, %xmm1
               	movq	24(%rdi), %rax
               	movq	56(%rax), %rax
               	cvtsi2sd	%rax, %xmm2
               	maxsd	%xmm0, %xmm1
               	minsd	%xmm1, %xmm2
               	cvttsd2si	%xmm2, %rax
               	movq	24(%rdi), %rcx
               	xchgq	%rax, 32(%rcx)
               	retq
               	nopl	(%rax)

<kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	cmpq	$0, 239624(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4237be <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x1e>
               	movq	%r15, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42381d <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x7d>
               	movb	$0, 88(%r15)
               	movb	$1, 112(%r15)
               	testq	%r15, %r15
               	je	0x4237df <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	cmpq	$0, 239587(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4237df <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	movq	%r15, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	leaq	40(%r15), %r14
               	movq	%r14, %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	leaq	120(%r15), %rbx
               	movq	%rbx, %rdi
               	callq	0x43f254 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	je	0x42380b <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x6b>
               	movq	%rbx, %rdi
               	callq	0x43f254 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x423818 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x78>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x43ccca <std::condition_variable::~condition_variable()>
               	callq	0x43c423 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	jmp	0x423839 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x99>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x423860 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	120(%r15), %rdi
               	callq	0x423870 <kotlin::ScopedThread::~ScopedThread()>
               	addq	$40, %r15
               	movq	%r15, %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax)

<std::thread::~thread()>:
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	jne	0x423869 <std::thread::~thread()+0x9>
               	popq	%rax
               	retq
               	callq	0x43c423 <std::terminate()>
               	nop

<kotlin::ScopedThread::~ScopedThread()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	je	0x423888 <kotlin::ScopedThread::~ScopedThread()+0x18>
               	movq	%rdi, %rbx
               	callq	0x43f254 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x423890 <kotlin::ScopedThread::~ScopedThread()+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x43c423 <std::terminate()>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x423860 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax,%rax)
               	nopl	(%rax)
		...

<void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %rbx
               	subq	%rdi, %rbx
               	cmpq	$257, %rbx              # imm = 0x101
               	jl	0x423d8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movq	%rdx, %r12
               	movq	%rsi, %r14
               	movq	%rdi, %rbp
               	leaq	16(%rdi), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rdi, 64(%rsp)
               	nopl	(%rax,%rax)
               	testq	%r12, %r12
               	movq	%r14, 8(%rsp)
               	je	0x423ce6 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x426>
               	shrq	%rbx
               	andq	$-16, %rbx
               	leaq	(%rbx,%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	-16(%r14), %rax
               	movq	%rax, 48(%rsp)
               	movq	16(%rbp), %r15
               	movq	24(%rbp), %rdi
               	movq	(%rbp,%rbx), %r13
               	movq	8(%rbp,%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rbx
               	subq	%r13, %rbx
               	movq	%r15, %rdx
               	cmovaq	%r13, %rdx
               	testq	%rdx, %rdx
               	movq	%r12, 80(%rsp)
               	je	0x423980 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	movq	%r13, 72(%rsp)
               	movq	%rdi, %r13
               	movq	40(%rsp), %rsi
               	callq	0x413780 <memcmp@plt>
               	movq	%r13, %rdi
               	movq	72(%rsp), %r13
               	testl	%eax, %eax
               	je	0x423980 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	testl	%eax, %eax
               	jns	0x4239a2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	jmp	0x423a80 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x4239a2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423a80 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x4239e0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x4239e0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	testl	%eax, %eax
               	jns	0x423a02 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	jmp	0x423aba <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423a02 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423aba <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423a40 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423a40 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423a6c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	jmp	0x423b7b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	nop
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423a6c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423b7b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	jmp	0x423b89 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2c9>
               	nop
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x423ae5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	movq	%r13, %rdx
               	movq	%rdi, %r13
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x413780 <memcmp@plt>
               	movq	%r13, %rdi
               	testl	%eax, %eax
               	je	0x423ae5 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	testl	%eax, %eax
               	jns	0x423b07 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	jmp	0x423cbf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	movq	8(%rsp), %r15
               	jmp	0x423bbf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423b07 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x423cbf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x423b30 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423b30 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x423b58 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	jmp	0x423b7b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x423b58 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x423b7b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	jmp	0x423bbf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	48(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	32(%rsp), %r13
               	jmp	0x423bbf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	nop
               	movups	(%r14), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movups	(%r15), %xmm0
               	movups	%xmm0, (%r14)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	movq	64(%rsp), %rbp
               	movq	(%rbp), %rbx
               	movq	8(%rbp), %r12
               	jmp	0x423bf2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x332>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423c20 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x360>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	16(%r14), %r13
               	testl	%eax, %eax
               	jns	0x423c24 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x364>
               	movq	%r13, %r14
               	movq	(%r13), %rdx
               	movq	%rdx, %rbp
               	subq	%rbx, %rbp
               	cmovaq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423bd0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	movq	8(%r14), %rdi
               	movq	%r12, %rsi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423bea <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x32a>
               	jmp	0x423bd0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	nopl	(%rax)
               	leaq	16(%r14), %r13
               	addq	$-16, %r15
               	movq	%r15, %rcx
               	jmp	0x423c52 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x392>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423c80 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	-16(%r15), %rcx
               	testl	%eax, %eax
               	jns	0x423c80 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	movq	%rcx, %r15
               	movq	(%rcx), %rdx
               	movq	%rbx, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x423c30 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	movq	8(%r15), %rsi
               	movq	%r12, %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423c4a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x38a>
               	jmp	0x423c30 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	cmpq	%r15, %r14
               	jb	0x423ba0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2e0>
               	movq	80(%rsp), %r12
               	addq	$-1, %r12
               	movq	%r14, %rdi
               	movq	8(%rsp), %rsi
               	movq	%r12, %rdx
               	callq	0x4238c0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	movq	%r14, %rbx
               	movq	64(%rsp), %rbp
               	subq	%rbp, %rbx
               	cmpq	$256, %rbx              # imm = 0x100
               	jg	0x423900 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
               	jmp	0x423d8f <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	8(%rsp), %r15
               	jmp	0x423b98 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2d8>
               	shrq	$4, %rbx
               	leaq	-2(%rbx), %rax
               	shrq	$63, %rax
               	leaq	(%rbx,%rax), %r14
               	addq	$-2, %r14
               	sarq	%r14
               	movq	%r14, %r15
               	shlq	$4, %r15
               	movq	(%rbp,%r15), %rcx
               	movq	8(%rbp,%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x423e20 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	%rbp, %r15
               	addq	$-8, %r15
               	cmpq	$-1, %r14
               	je	0x423d53 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x493>
               	nopl	(%rax)
               	movq	-8(%r15), %rcx
               	movq	(%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x423e20 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	$-16, %r15
               	cmpq	$-1, %r14
               	jne	0x423d30 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x470>
               	movq	8(%rsp), %rbx
               	addq	$-16, %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	8(%rbx), %r8
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rbx)
               	movq	%rbx, %r14
               	subq	%rbp, %r14
               	movq	%r14, %rdx
               	sarq	$4, %rdx
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x423e20 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-16, %rbx
               	cmpq	$16, %r14
               	jg	0x423d60 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4a0>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %r15
               	movq	8(%rdi), %r14
               	movl	$2147483648, %r12d      # imm = 0x80000000
               	nopl	(%rax,%rax)
               	movq	-16(%rbx), %rdx
               	movq	%r15, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%r15, %rdx
               	testq	%rdx, %rdx
               	je	0x423de3 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x43>
               	movq	-8(%rbx), %rsi
               	movq	%r14, %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423df9 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x59>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x423e0a <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	cmovlel	%r12d, %ebp
               	movl	%ebp, %eax
               	testl	%eax, %eax
               	jns	0x423e0a <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	movups	-16(%rbx), %xmm0
               	movups	%xmm0, (%rbx)
               	addq	$-16, %rbx
               	jmp	0x423dc0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x20>
               	movq	%r15, (%rbx)
               	movq	%r14, 8(%rbx)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, 16(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%rdi, %r14
               	leaq	-1(%rdx), %rax
               	shrq	$63, %rax
               	movq	%rdx, 32(%rsp)
               	leaq	(%rdx,%rax), %rbx
               	addq	$-1, %rbx
               	sarq	%rbx
               	movq	%rsi, %r12
               	movq	%rsi, 8(%rsp)
               	cmpq	%rsi, %rbx
               	jle	0x423f1f <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	movq	8(%rsp), %rbp
               	jmp	0x423e94 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x74>
               	nop
               	movq	%r13, %r12
               	movq	%r12, %rax
               	shlq	$4, %rax
               	shlq	$4, %rbp
               	movups	(%r14,%rax), %xmm0
               	movups	%xmm0, (%r14,%rbp)
               	movq	%r12, %rbp
               	cmpq	%rbx, %r12
               	jge	0x423f1f <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	leaq	2(,%rbp), %r12
               	addq	%rbp, %r12
               	leaq	1(,%rbp), %r13
               	addq	%rbp, %r13
               	movq	%r12, %rax
               	shlq	$4, %rax
               	movq	(%r14,%rax), %rdx
               	movq	%r13, %rcx
               	shlq	$4, %rcx
               	movq	(%r14,%rcx), %rsi
               	movq	%rdx, %r15
               	subq	%rsi, %r15
               	cmovaq	%rsi, %rdx
               	testq	%rdx, %rdx
               	je	0x423ef0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	movq	8(%r14,%rcx), %rsi
               	movq	8(%r14,%rax), %rdi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x423ef0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	testl	%eax, %eax
               	js	0x423e70 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	jmp	0x423f17 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf7>
               	nop
               	cmpq	$2147483647, %r15       # imm = 0x7FFFFFFF
               	jg	0x423e73 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x53>
               	cmpq	$-2147483648, %r15      # imm = 0x80000000
               	jg	0x423f0c <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xec>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	movl	%r15d, %eax
               	testl	%eax, %eax
               	js	0x423e70 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	%r12, %r13
               	jmp	0x423e70 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	32(%rsp), %rcx
               	testb	$1, %cl
               	jne	0x423f60 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	-2(%rcx), %rax
               	shrq	$63, %rax
               	addq	%rcx, %rax
               	addq	$-2, %rax
               	sarq	%rax
               	cmpq	%rax, %r12
               	jne	0x423f60 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	(%r12,%r12), %rax
               	addq	$1, %rax
               	movq	%rax, %rcx
               	shlq	$4, %rcx
               	shlq	$4, %r12
               	movups	(%r14,%rcx), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%rax, %r12
               	cmpq	8(%rsp), %r12
               	jle	0x423ffc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leaq	-1(%r12), %rax
               	shrq	$63, %rax
               	leaq	(%r12,%rax), %r13
               	addq	$-1, %r13
               	sarq	%r13
               	movq	%r13, %rbp
               	shlq	$4, %rbp
               	movq	(%r14,%rbp), %rdx
               	movq	%rdx, %rbx
               	movq	24(%rsp), %rax
               	subq	%rax, %rbx
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x423fc6 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1a6>
               	movq	8(%r14,%rbp), %rdi
               	movq	16(%rsp), %rsi
               	callq	0x413780 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x423fdc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1bc>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x423ffc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	cmovlel	%r15d, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	jns	0x423ffc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	addq	%r14, %rbp
               	shlq	$4, %r12
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%r13, %r12
               	cmpq	8(%rsp), %r13
               	jg	0x423f80 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x160>
               	jmp	0x423fff <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1df>
               	movq	%r12, %r13
               	shlq	$4, %r13
               	movq	24(%rsp), %rax
               	movq	%rax, (%r14,%r13)
               	movq	16(%rsp), %rax
               	movq	%rax, 8(%r14,%r13)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	352(%rdi), %r14
               	testq	%r14, %r14
               	je	0x424053 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)+0x23>
               	movq	%r14, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	addq	$8, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x424080 <kotlin::mm::ThreadData::~ThreadData()>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadData::~ThreadData()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	movq	296(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x424099 <kotlin::mm::ThreadData::~ThreadData()+0x19>
               	callq	0x4136d0 <free@plt>
               	leaq	288(%r15), %rdi
               	callq	0x427d30 <kotlin::gc::GC::ThreadData::~ThreadData()>
               	leaq	224(%r15), %rdi
               	callq	0x424230 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	leaq	256(%r15), %r14
               	movq	256(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x4240e0 <kotlin::mm::ThreadData::~ThreadData()+0x60>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430430 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4240d0 <kotlin::mm::ThreadData::~ThreadData()+0x50>
               	leaq	232(%r15), %r14
               	movq	232(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424110 <kotlin::mm::ThreadData::~ThreadData()+0x90>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430430 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424100 <kotlin::mm::ThreadData::~ThreadData()+0x80>
               	leaq	168(%r15), %rdi
               	callq	0x4242f0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	200(%r15), %r14
               	movq	200(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424140 <kotlin::mm::ThreadData::~ThreadData()+0xc0>
               	nop
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424130 <kotlin::mm::ThreadData::~ThreadData()+0xb0>
               	leaq	176(%r15), %r14
               	movq	176(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424170 <kotlin::mm::ThreadData::~ThreadData()+0xf0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x424160 <kotlin::mm::ThreadData::~ThreadData()+0xe0>
               	leaq	104(%r15), %r14
               	movq	104(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x424190 <kotlin::mm::ThreadData::~ThreadData()+0x110>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x424180 <kotlin::mm::ThreadData::~ThreadData()+0x100>
               	movq	88(%r15), %rdi
               	movq	96(%r15), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	88(%r15), %rdi
               	leaq	136(%r15), %rax
               	cmpq	%rdi, %rax
               	je	0x4241bf <kotlin::mm::ThreadData::~ThreadData()+0x13f>
               	callq	0x4136d0 <free@plt>
               	movq	64(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x4241cd <kotlin::mm::ThreadData::~ThreadData()+0x14d>
               	callq	0x4136d0 <free@plt>
               	leaq	8(%r15), %rdi
               	callq	0x4243b0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	40(%r15), %r14
               	movq	40(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x424200 <kotlin::mm::ThreadData::~ThreadData()+0x180>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4241f0 <kotlin::mm::ThreadData::~ThreadData()+0x170>
               	movq	16(%r15), %rdi
               	addq	$16, %r15
               	cmpq	%r15, %rdi
               	je	0x424220 <kotlin::mm::ThreadData::~ThreadData()+0x1a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r15, %rbx
               	jne	0x424210 <kotlin::mm::ThreadData::~ThreadData()+0x190>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42425e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 48(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x424250 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424280 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x50>
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424270 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x4242ae <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x4242d8 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42431e <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x424310 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424340 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x50>
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x424330 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42436e <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424398 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4243de <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4243d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x424400 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x50>
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x4243f0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42442e <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x7e>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	16(%r15), %rax
               	movq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x424458 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0xa8>
               	leaq	24(%r15), %rdi
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	40(%r15), %rax
               	movq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movb	249944(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x424554 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	%rdi, %r14
               	movq	8(%rdi), %rax
               	movq	288(%rax), %rdi
               	addq	$72, %rdi
               	callq	0x424e60 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>
               	leaq	249866(%rip), %rax      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	movq	%rax, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 236288(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4244ce <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0x5e>
               	leaq	249839(%rip), %rdi      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42455f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xef>
               	movb	$1, 16(%rsp)
               	callq	0x4358a0 <konan::gettid()>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movb	16(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 16(%r14)
               	andb	$1, %bpl
               	movb	249831(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x424526 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xb6>
               	leaq	245896(%rip), %r15      # 0x460588 <(anonymous namespace)::gSuspensionCondVar>
               	leaq	8(%rsp), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43ccd0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	249782(%rip), %eax      # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x424510 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xa0>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	xchgb	%bpl, 16(%r14)
               	cmpb	$0, 16(%rsp)
               	je	0x424554 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424554 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	cmpq	$0, 236144(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42454f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xdf>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nop

<kotlin::mm::RequestThreadsSuspension()>:
               	pushq	%rbx
               	cmpq	$0, 236095(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42458b <kotlin::mm::RequestThreadsSuspension()+0x1b>
               	leaq	249646(%rip), %rdi      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4245b4 <kotlin::mm::RequestThreadsSuspension()+0x44>
               	movb	$1, %cl
               	xorl	%eax, %eax
               	lock
               	cmpxchgb	%cl, 249665(%rip)       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	sete	%bl
               	cmpq	$0, 236054(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4245b0 <kotlin::mm::RequestThreadsSuspension()+0x40>
               	leaq	249605(%rip), %rdi      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	168(%rdi), %rax
               	movq	8(%rsi), %rcx
               	cmpq	%rcx, %rax
               	je	0x424628 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)+0x58>
               	leaq	200(%rbx), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c6d4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	216(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 216(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%r14), %r14
               	movq	192(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 192(%rbx)
               	movq	%r14, %rdi
               	callq	0x43c6ec <std::__detail::_List_node_base::_M_unhook()>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::SuspendIfRequestedSlowPath()>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$328, %rdi              # imm = 0x148
               	popq	%rax
               	jmp	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<ExceptionObjHolder::Throw(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movl	$16, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	0x4246d0 <(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>
               	leaq	229802(%rip), %rsi      # 0x45c860 <typeinfo for (anonymous namespace)::ExceptionObjHolderImpl>
               	leaq	163(%rip), %rdx         # 0x424760 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	leaq	229794(%rip), %rax      # 0x45c888 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	176(%rbx), %r13
               	leaq	184(%rbx), %r15
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c6d4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	200(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 200(%rbx)
               	movq	192(%rbx), %rax
               	leaq	16(%rax), %rcx
               	movq	%rax, 32(%rax)
               	movq	%rcx, 8(%r12)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	229657(%rip), %rax      # 0x45c888 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	leaq	176(%r14), %rax
               	movq	8(%rbx), %rbx
               	movq	8(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x4247d6 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()+0x76>
               	leaq	208(%r14), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rbx, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43c6d4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	224(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 224(%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%rbx), %rbx
               	movq	200(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 200(%r14)
               	movq	%rbx, %rdi
               	callq	0x43c6ec <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x424760 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>
               	nopw	%cs:(%rax,%rax)

<InitAndRegisterGlobal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	16(%rbx), %r13
               	leaq	24(%rbx), %r12
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r15, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x43c6d4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	32(%rbx), %rax
               	movq	%rax, 32(%rax)
               	testq	%r14, %r14
               	je	0x424898 <InitAndRegisterGlobal+0x68>
               	movq	%r14, (%r15)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<AddTLSRecord>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, (%rsp)
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	104(%rdi), %rbp
               	movq	%rsi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x4248ef <AddTLSRecord+0x3f>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rbx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424905 <AddTLSRecord+0x55>
               	jmp	0x424964 <AddTLSRecord+0xb4>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ebx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424964 <AddTLSRecord+0xb4>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x42495b <AddTLSRecord+0xab>
               	nop
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x424964 <AddTLSRecord+0xb4>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424940 <AddTLSRecord+0x90>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x42494b <AddTLSRecord+0x9b>
               	jmp	0x424964 <AddTLSRecord+0xb4>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x424964 <AddTLSRecord+0xb4>
               	cmpq	%rcx, %r13
               	jne	0x424910 <AddTLSRecord+0x60>
               	testq	%rdi, %rdi
               	jne	0x424bfe <AddTLSRecord+0x34e>
               	jmp	0x424964 <AddTLSRecord+0xb4>
               	testq	%rsi, %rsi
               	jne	0x424bfe <AddTLSRecord+0x34e>
               	movl	156(%r15), %r12d
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%r13, 8(%rax)
               	movq	(%rsp), %rcx
               	shlq	$32, %rcx
               	orq	%rcx, %r12
               	movq	%r12, 16(%rax)
               	movq	%rax, %r12
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x4249f9 <AddTLSRecord+0x149>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x424afa <AddTLSRecord+0x24a>
               	nopw	(%rax,%rax)
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x4249f9 <AddTLSRecord+0x149>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x4249e0 <AddTLSRecord+0x130>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x4249eb <AddTLSRecord+0x13b>
               	jmp	0x4249f9 <AddTLSRecord+0x149>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x4249f9 <AddTLSRecord+0x149>
               	cmpq	%rcx, %r13
               	jne	0x4249b0 <AddTLSRecord+0x100>
               	testq	%rdi, %rdi
               	jne	0x424b03 <AddTLSRecord+0x253>
               	leaq	128(%r15), %rdi
               	movq	120(%r15), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rsi
               	callq	0x43d20a <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x424a2c <AddTLSRecord+0x17c>
               	movq	96(%r15), %rbp
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424b75 <AddTLSRecord+0x2c5>
               	jmp	0x424b9a <AddTLSRecord+0x2ea>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	je	0x424b10 <AddTLSRecord+0x260>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	je	0x424b37 <AddTLSRecord+0x287>
               	leaq	112(%r15), %rsi
               	xorl	%edi, %edi
               	jmp	0x424a9d <AddTLSRecord+0x1ed>
               	nopl	(%rax,%rax)
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x424b37 <AddTLSRecord+0x287>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x424ad0 <AddTLSRecord+0x220>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424a80 <AddTLSRecord+0x1d0>
               	jmp	0x424adf <AddTLSRecord+0x22f>
               	nop
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x424a80 <AddTLSRecord+0x1d0>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x424a91 <AddTLSRecord+0x1e1>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x424a91 <AddTLSRecord+0x1e1>
               	testq	%rsi, %rsi
               	je	0x4249f9 <AddTLSRecord+0x149>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	jmp	0x424bec <AddTLSRecord+0x33c>
               	leaq	144(%r15), %rbp
               	movq	$0, 144(%r15)
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	jne	0x424a70 <AddTLSRecord+0x1c0>
               	movq	96(%r15), %rdi
               	leaq	144(%r15), %rax
               	cmpq	%rax, %rdi
               	je	0x424b4c <AddTLSRecord+0x29c>
               	callq	0x4136d0 <free@plt>
               	movq	%r14, 104(%r15)
               	movq	%rbp, 96(%r15)
               	movq	%r13, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x424b86 <AddTLSRecord+0x2d6>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x424b9a <AddTLSRecord+0x2ea>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rbx,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x424be0 <AddTLSRecord+0x330>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x424b75 <AddTLSRecord+0x2c5>
               	leaq	112(%r15), %rcx
               	movq	112(%r15), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 112(%r15)
               	movq	(%r12), %rax
               	testq	%rax, %rax
               	je	0x424bdb <AddTLSRecord+0x32b>
               	movq	104(%r15), %rsi
               	movq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x424bce <AddTLSRecord+0x31e>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x424bd2 <AddTLSRecord+0x322>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	96(%r15), %rbp
               	movq	%rcx, (%rbp,%rbx,8)
               	movq	120(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 120(%r15)
               	movq	(%rsp), %rax
               	addl	156(%r15), %eax
               	movl	%eax, 156(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<LookupTLS>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edi, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r9
               	leaq	243207(%rip), %r8       # 0x460248 <__KonanTlsKey>
               	cmpq	%r8, 160(%r9)
               	je	0x424c7b <LookupTLS+0x5b>
               	movq	104(%r9), %rbp
               	movq	%r8, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424c87 <LookupTLS+0x67>
               	leaq	243175(%rip), %rax      # 0x460248 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rcx
               	movq	96(%r9), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x424ca1 <LookupTLS+0x81>
               	jmp	0x424cfc <LookupTLS+0xdc>
               	movq	168(%r9), %rax
               	jmp	0x424d18 <LookupTLS+0xf8>
               	leaq	243130(%rip), %rax      # 0x460248 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ecx
               	movq	96(%r9), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x424cfc <LookupTLS+0xdc>
               	movq	(%rax), %rbx
               	cmpq	%r8, 8(%rbx)
               	je	0x424cf7 <LookupTLS+0xd7>
               	nop
               	movq	%rbx, %rdi
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x424cfc <LookupTLS+0xdc>
               	movq	8(%rbx), %rsi
               	movq	%rsi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x424ce0 <LookupTLS+0xc0>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rcx, %rdx
               	je	0x424ceb <LookupTLS+0xcb>
               	jmp	0x424cfc <LookupTLS+0xdc>
               	nopl	(%rax)
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rcx, %rdx
               	jne	0x424cfc <LookupTLS+0xdc>
               	cmpq	%r8, %rsi
               	jne	0x424cb0 <LookupTLS+0x90>
               	testq	%rdi, %rdi
               	jne	0x424cfe <LookupTLS+0xde>
               	jmp	0x424cfc <LookupTLS+0xdc>
               	testq	%rbx, %rbx
               	jne	0x424cfe <LookupTLS+0xde>
               	xorl	%ebx, %ebx
               	movq	8(%rbx), %rax
               	movq	%rax, 160(%r9)
               	movq	16(%rbx), %rax
               	movq	%rax, 168(%r9)
               	movq	16(%rbx), %rax
               	addl	%r14d, %eax
               	cltq
               	movq	72(%r9), %rcx
               	leaq	(%rcx,%rax,8), %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<Kotlin_processObjectInMark>:
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %r8
               	movl	40(%r8), %r9d
               	testl	%r9d, %r9d
               	jle	0x424d8e <Kotlin_processObjectInMark+0x5e>
               	xorl	%edx, %edx
               	jmp	0x424d60 <Kotlin_processObjectInMark+0x30>
               	nop
               	movl	40(%r8), %r9d
               	addq	$1, %rdx
               	movslq	%r9d, %rax
               	cmpq	%rax, %rdx
               	jge	0x424d8e <Kotlin_processObjectInMark+0x5e>
               	movq	32(%r8), %rcx
               	movslq	(%rcx,%rdx,4), %rcx
               	movq	(%rcx,%rsi), %rcx
               	testq	%rcx, %rcx
               	je	0x424d54 <Kotlin_processObjectInMark+0x24>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424d54 <Kotlin_processObjectInMark+0x24>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424d50 <Kotlin_processObjectInMark+0x20>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	jmp	0x424d50 <Kotlin_processObjectInMark+0x20>
               	retq
               	nop

<Kotlin_processArrayInMark>:
               	movl	8(%rsi), %eax
               	testl	%eax, %eax
               	je	0x424e46 <Kotlin_processArrayInMark+0xb6>
               	leaq	16(%rsi), %rcx
               	movslq	%eax, %r8
               	leaq	-8(,%r8,8), %rdx
               	testb	$8, %dl
               	jne	0x424dd6 <Kotlin_processArrayInMark+0x46>
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x424dd2 <Kotlin_processArrayInMark+0x42>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x424dd2 <Kotlin_processArrayInMark+0x42>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x424dd2 <Kotlin_processArrayInMark+0x42>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	leaq	24(%rsi), %rcx
               	testq	%rdx, %rdx
               	je	0x424e46 <Kotlin_processArrayInMark+0xb6>
               	leaq	(%rsi,%r8,8), %r8
               	addq	$16, %r8
               	jmp	0x424df9 <Kotlin_processArrayInMark+0x69>
               	nopl	(%rax)
               	addq	$16, %rcx
               	cmpq	%r8, %rcx
               	je	0x424e46 <Kotlin_processArrayInMark+0xb6>
               	movq	(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x424e20 <Kotlin_processArrayInMark+0x90>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x424e20 <Kotlin_processArrayInMark+0x90>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x424e20 <Kotlin_processArrayInMark+0x90>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movq	8(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x424df0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x424df0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x424df0 <Kotlin_processArrayInMark+0x60>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	jmp	0x424df0 <Kotlin_processArrayInMark+0x60>
               	retq
               	nopw	(%rax,%rax)

<Kotlin_processEmptyObjectInMark>:
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %r14
               	leaq	247452(%rip), %rax      # 0x461510 <(anonymous namespace)::markingMutex>
               	movq	%rax, (%rsp)
               	movb	$0, 8(%rsp)
               	cmpq	$0, 233779(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424e9b <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x3b>
               	leaq	247426(%rip), %rdi      # 0x461510 <(anonymous namespace)::markingMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424fb7 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x157>
               	movb	$1, 8(%rsp)
               	movb	247442(%rip), %al       # 0x461538 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x424f88 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x128>
               	movb	24(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 24(%r14)
               	movq	8(%r14), %rbx
               	leaq	8(%rbx), %rdi
               	callq	0x4243b0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	168(%rbx), %rdi
               	callq	0x4242f0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	224(%rbx), %rdi
               	callq	0x424230 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	288(%rbx), %rdi
               	addq	$112, %rdi
               	callq	0x4259b0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movb	247365(%rip), %al       # 0x461538 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x424f26 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xc6>
               	leaq	247262(%rip), %r15      # 0x4614e0 <(anonymous namespace)::markingCondVar>
               	movq	%rsp, %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43ccd0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	247318(%rip), %eax      # 0x461538 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	jne	0x424f10 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xb0>
               	andb	$1, %bpl
               	cmpb	$0, 8(%rsp)
               	je	0x424fbe <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x15e>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424f52 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xf2>
               	cmpq	$0, 233586(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424f4d <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xed>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	247279(%rip), %rbx      # 0x461548 <(anonymous namespace)::markingEpoch (.0)>
               	leaq	247264(%rip), %rax      # 0x461540 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 16(%rsp)
               	movq	8(%r14), %rdx
               	leaq	16(%rsp), %r15
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425560 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x425a80 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	xchgb	%bpl, 24(%r14)
               	cmpb	$0, 8(%rsp)
               	je	0x424fac <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424fac <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	cmpq	$0, 233496(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424fa7 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x147>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movl	$1, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	xchgb	%bpl, 24(%r14)
               	movq	%rax, %rbx
               	cmpb	$0, 8(%rsp)
               	je	0x424ff3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x424ff3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	cmpq	$0, 233425(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x424fee <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x18e>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	cmpq	$0, 233356(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425042 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x32>
               	leaq	247003(%rip), %rdi      # 0x461510 <(anonymous namespace)::markingMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425531 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x521>
               	xorl	%eax, %eax
               	xchgb	%al, 247022(%rip)       # 0x461538 <(anonymous namespace)::markingRequested (.0.0)>
               	leaq	247023(%rip), %rax      # 0x461540 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 336(%r15)
               	cmpq	$0, 233304(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425076 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x66>
               	leaq	242743(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425538 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x528>
               	addq	$336, %r15              # imm = 0x150
               	movq	242700(%rip), %rbp      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	jmp	0x425097 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x87>
               	nopl	(%rax)
               	movq	352(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x4250f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xe0>
               	movq	296(%rbp), %rax
               	movzbl	96(%rax), %eax
               	testb	$1, %al
               	jne	0x425090 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	leaq	8(%rbp), %rbx
               	leaq	16(%rbp), %rdi
               	callq	0x4243b0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	176(%rbp), %rdi
               	callq	0x4242f0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	232(%rbp), %rdi
               	callq	0x424230 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	callq	0x4259b0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x425560 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	jmp	0x425090 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	cmpq	$0, 233152(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425106 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xf6>
               	leaq	242591(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movb	$1, %al
               	xchgb	%al, 242733(%rip)       # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	je	0x425131 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x121>
               	nopl	(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 242707(%rip)       # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x425120 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x110>
               	leaq	8(%rsp), %r12
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	242648(%rip), %rbp      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	leaq	242641(%rip), %r13      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rbp
               	je	0x425210 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
               	movq	%rbp, %rsi
               	jmp	0x42519e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x18e>
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rbx
               	movq	242597(%rip), %rax      # 0x460520 <kotlin::mm::GlobalData::instance_+0xa8>
               	addq	$-1, %rax
               	movq	%rax, 242586(%rip)      # 0x460520 <kotlin::mm::GlobalData::instance_+0xa8>
               	movq	%rbx, %rdi
               	callq	0x43c6ec <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rsi
               	cmpq	%r13, %rbp
               	je	0x4251e6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1d6>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x425170 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x160>
               	cmpq	%rsi, %r12
               	je	0x425196 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	(%rsi), %rdx
               	cmpq	%r12, %rdx
               	je	0x425196 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	%r12, %rdi
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 24(%rsp)
               	movq	242527(%rip), %rax      # 0x460538 <kotlin::mm::GlobalData::instance_+0xc0>
               	addq	$-1, %rax
               	movq	%rax, 242516(%rip)      # 0x460538 <kotlin::mm::GlobalData::instance_+0xc0>
               	jmp	0x425196 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
               	movq	242491(%rip), %rdi      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rdi
               	je	0x425210 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r13, %rbx
               	jne	0x425200 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1f0>
               	movq	8(%rsp), %rax
               	cmpq	%r12, %rax
               	je	0x425255 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x245>
               	movq	%rax, 242439(%rip)      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	16(%rsp), %rax
               	movq	%rax, 242435(%rip)      # 0x460530 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, (%rax)
               	movq	242417(%rip), %rax      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%r13, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x425265 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x255>
               	movq	%r13, 242388(%rip)      # 0x460530 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, 242373(%rip)      # 0x460528 <kotlin::mm::GlobalData::instance_+0xb0>
               	xorl	%eax, %eax
               	movq	%rax, 242380(%rip)      # 0x460538 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 242381(%rip)        # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$1, %bl
               	movb	$1, %al
               	xchgb	%al, 242315(%rip)       # 0x460508 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	je	0x4252a1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x291>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 242283(%rip)       # 0x460508 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	jne	0x425290 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x280>
               	xchgb	%bl, 242329(%rip)       # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%bl, %bl
               	je	0x4252c1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2b1>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 242307(%rip)       # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x4252b0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2a0>
               	movq	242192(%rip), %rsi      # 0x4604d8 <kotlin::mm::GlobalData::instance_+0x60>
               	xorl	%eax, %eax
               	movq	242239(%rip), %rdx      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	242232(%rip), %r12      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	242169(%rip), %r13      # 0x4604d8 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rsi, %rbx
               	movl	%eax, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %ecx
               	je	0x425322 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x312>
               	cmpl	$1, %ecx
               	je	0x425300 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2f0>
               	testl	%ecx, %ecx
               	jne	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	jmp	0x425310 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x300>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x4252f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	jmp	0x425404 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3f4>
               	nop
               	movl	$1, %eax
               	movq	%rdx, %rsi
               	cmpq	%r13, %rbx
               	je	0x4252df <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2cf>
               	jmp	0x425406 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3f6>
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 32(%rsp)
               	movb	$0, 242189(%rip)        # 0x460540 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$0, 242126(%rip)        # 0x460508 <kotlin::mm::GlobalData::instance_+0x90>
               	movb	$1, %al
               	xchgb	%al, 241454(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425361 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x351>
               	nopw	(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 241427(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425350 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x340>
               	cmpb	$0, 241432(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x42538a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37a>
               	cmpq	%r14, 241415(%rip)      # 0x460278 <(anonymous namespace)::current>
               	jne	0x42538a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37a>
               	leaq	241406(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	cmpb	$0, 128(%rax)
               	je	0x4253ac <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	movupd	112(%rax), %xmm0
               	jmp	0x4253c1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3b1>
               	cmpb	$0, 241647(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x4253cc <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3bc>
               	cmpq	%r14, 241630(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x4253cc <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3bc>
               	leaq	241621(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	cmpb	$0, 128(%rax)
               	jne	0x425383 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x373>
               	xorpd	%xmm0, %xmm0
               	movupd	%xmm0, 112(%rax)
               	movupd	%xmm0, 96(%rax)
               	movb	$1, 128(%rax)
               	paddq	32(%rsp), %xmm0
               	movdqu	%xmm0, 112(%rax)
               	movb	$0, 241309(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	leaq	246022(%rip), %rdi      # 0x4614e0 <(anonymous namespace)::markingCondVar>
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	cmpq	$0, 232401(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4253f5 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e5>
               	leaq	246048(%rip), %rdi      # 0x461510 <(anonymous namespace)::markingMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %ecx
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%ecx, %ecx
               	je	0x4254a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x490>
               	cmpl	$1, %ecx
               	jne	0x42553f <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x52f>
               	movq	16(%rbx), %rsi
               	movq	%r15, %rdi
               	callq	0x425960 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x425454 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x444>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	movq	(%rbx), %rdx
               	movq	241842(%rip), %rax      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rdx, %rbx
               	movl	$1, %ecx
               	nopw	%cs:(%rax,%rax)
               	cmpl	$2, %ecx
               	je	0x42532c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x31c>
               	cmpl	$1, %ecx
               	je	0x425484 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x474>
               	testl	%ecx, %ecx
               	jne	0x425470 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x460>
               	jmp	0x425493 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x483>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x425470 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x460>
               	jmp	0x425527 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x517>
               	movq	%rax, %rdx
               	cmpq	%r13, %rbx
               	je	0x42545e <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x44e>
               	jmp	0x425410 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movq	16(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425960 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4254d1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c1>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	movq	(%rbx), %rsi
               	xorl	%ecx, %ecx
               	movq	241715(%rip), %rax      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rsi, %rbx
               	movl	%ecx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpl	$2, %edx
               	je	0x42532c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x31c>
               	cmpl	$1, %edx
               	je	0x425504 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4f4>
               	testl	%edx, %edx
               	jne	0x4254f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e0>
               	jmp	0x425513 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x503>
               	movl	$2, %edx
               	cmpq	%r12, %rbx
               	je	0x4254f0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e0>
               	jmp	0x425410 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	$1, %ecx
               	movq	%rax, %rsi
               	cmpq	%r13, %rbx
               	je	0x4254dd <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4cd>
               	movl	%edx, %ecx
               	jmp	0x425410 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	$1, %ecx
               	jmp	0x425410 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x400>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	leaq	127144(%rip), %rdx      # 0x4445ee <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nop

<void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r12
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	288(%r12), %rax
               	movq	$0, 40(%rax)
               	movq	$0, 56(%rax)
               	movq	(%rax), %rcx
               	movq	8(%rcx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%rax), %rcx
               	movl	(%rcx), %ecx
               	movslq	%ecx, %rcx
               	movq	%rcx, 64(%rax)
               	movq	280(%r12), %r13
               	movq	%r13, 8(%rsp)
               	testq	%r13, %r13
               	je	0x425654 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf4>
               	movslq	16(%r13), %rax
               	leaq	(,%rax,8), %rcx
               	addq	%r13, %rcx
               	leaq	(,%rax,8), %rdx
               	movslq	20(%r13), %rsi
               	leaq	(%rcx,%rsi,8), %rbx
               	addq	$24, %rbx
               	subq	%rdx, %rbx
               	addq	$-24, %rbx
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	movq	%rbp, 16(%rsp)
               	movq	%rbx, 24(%rsp)
               	testq	%r13, %r13
               	je	0x42567c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	cmpq	%rbx, %rbp
               	jb	0x42567c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	nop
               	movq	8(%r13), %r13
               	testq	%r13, %r13
               	je	0x425662 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x102>
               	movslq	16(%r13), %rax
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	shlq	$3, %rax
               	movq	%rbp, 16(%rsp)
               	movslq	20(%r13), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%rbp, %rbx
               	subq	%rax, %rbx
               	movq	%rbx, 24(%rsp)
               	cmpq	%rbx, %rbp
               	jae	0x425610 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xb0>
               	movq	%r13, 8(%rsp)
               	jmp	0x42567c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 16(%rsp)
               	xorl	%ebx, %ebx
               	jmp	0x42567a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11a>
               	movq	$0, 8(%rsp)
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 16(%rsp)
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	xorl	%ebp, %ebp
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	xorl	%esi, %esi
               	movl	%esi, %eax
               	nopw	(%rax,%rax)
               	cmpl	$2, %eax
               	je	0x425888 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x328>
               	cmpl	$1, %eax
               	je	0x4256c0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x160>
               	testl	%eax, %eax
               	jne	0x425690 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x130>
               	testq	%r13, %r13
               	jne	0x4256ca <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
               	testq	%rbp, %rbp
               	jne	0x4256ca <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
               	movq	%rdx, 8(%rsp)
               	movl	$1, %esi
               	movq	%rdx, %r13
               	jmp	0x425688 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
               	nop
               	movl	$2, %esi
               	cmpq	%r13, %rcx
               	je	0x425688 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%eax, %eax
               	je	0x42577f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x21f>
               	cmpl	$1, %eax
               	jne	0x425943 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3e3>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425960 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x42571c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1bc>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	addq	$8, %r13
               	movq	%r13, 8(%rsp)
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	movl	$1, %eax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x4258a5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	cmpl	$1, %eax
               	je	0x425754 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1f4>
               	testl	%eax, %eax
               	jne	0x425740 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
               	jmp	0x425763 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x203>
               	movl	$2, %eax
               	cmpq	%rcx, %r13
               	je	0x425740 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
               	jmp	0x42587e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x31e>
               	testq	%r13, %r13
               	jne	0x4256d4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	testq	%rbp, %rbp
               	jne	0x4256d4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movq	%rdx, 8(%rsp)
               	movq	%rdx, %r13
               	jmp	0x42572f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1cf>
               	movq	16(%rsp), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x425960 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4257b1 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x251>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	addq	$8, %rbp
               	movq	%rbp, 16(%rsp)
               	testq	%r13, %r13
               	je	0x42582e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	cmpq	%rbx, %rbp
               	jb	0x42582e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	nopl	(%rax)
               	movq	8(%r13), %r13
               	testq	%r13, %r13
               	je	0x425814 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2b4>
               	movslq	16(%r13), %rax
               	leaq	24(,%rax,8), %rbp
               	addq	%r13, %rbp
               	shlq	$3, %rax
               	movq	%rbp, 16(%rsp)
               	movslq	20(%r13), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%rbp, %rbx
               	subq	%rax, %rbx
               	movq	%rbx, 24(%rsp)
               	cmpq	%rbx, %rbp
               	jae	0x4257d0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	movq	%r13, 8(%rsp)
               	jmp	0x42582e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
               	movq	$0, 8(%rsp)
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 16(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%ebp, %ebp
               	xorl	%ebx, %ebx
               	movq	72(%r12), %rcx
               	movq	64(%r12), %rdx
               	xorl	%esi, %esi
               	movl	%esi, %eax
               	nopl	(%rax)
               	cmpl	$2, %eax
               	je	0x4258a5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	cmpl	$1, %eax
               	je	0x42586f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x30f>
               	testl	%eax, %eax
               	jne	0x425840 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2e0>
               	testq	%r13, %r13
               	jne	0x4256d4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	testq	%rbp, %rbp
               	jne	0x4256d4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movq	%rdx, 8(%rsp)
               	movl	$1, %esi
               	movq	%rdx, %r13
               	jmp	0x42583a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
               	movl	$2, %esi
               	cmpq	%r13, %rcx
               	je	0x42583a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
               	jmp	0x4256d4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	movl	$1, %eax
               	jmp	0x4256d4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	jmp	0x4258a5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
               	nopw	(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 240067(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4258a0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x340>
               	cmpb	$0, 240072(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x4258e4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
               	cmpq	%r14, 240055(%rip)      # 0x460278 <(anonymous namespace)::current>
               	jne	0x4258e4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
               	leaq	240046(%rip), %rcx      # 0x460278 <(anonymous namespace)::current>
               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	je	0x425911 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3b1>
               	movupd	(%rax), %xmm1
               	jmp	0x425925 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3c5>
               	cmpb	$0, 240277(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x42592d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
               	cmpq	%r14, 240260(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x42592d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
               	leaq	240251(%rip), %rcx      # 0x460378 <(anonymous namespace)::last>
               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	jne	0x4258de <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x37e>
               	xorpd	%xmm1, %xmm1
               	movupd	%xmm1, 16(%rax)
               	movupd	%xmm1, (%rax)
               	movb	$1, 128(%rcx)
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, (%rax)
               	movb	$0, 239932(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	126116(%rip), %rdx      # 0x4445ee <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>:
               	pushq	%rbx
               	cmpq	$2, %rsi
               	jae	0x42596d <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0xd>
               	xorl	%ebx, %ebx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	(%rsi), %rax
               	testb	$3, %al
               	je	0x425985 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x25>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movb	$1, %bl
               	callq	*104(%rax)
               	jmp	0x425969 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	movq	(%rdi), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	movb	$1, %bl
               	jne	0x425969 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	cmpq	$0, 24(%rdi)
               	je	0x425a47 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x97>
               	movq	%rdi, %r15
               	movq	(%rdi), %rbx
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	je	0x4259de <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x2e>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	jne	0x4259d0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x20>
               	movq	(%r15), %rax
               	cmpq	$0, (%rax)
               	je	0x4259eb <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x3b>
               	movq	8(%rax), %rax
               	movq	24(%r15), %rcx
               	movq	$0, 24(%r15)
               	movq	(%rax), %r14
               	movq	%rcx, (%rax)
               	testq	%r14, %r14
               	je	0x425a12 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x62>
               	movq	%r14, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x430430 <mi_free>
               	movq	32(%r15), %rax
               	movq	(%r15), %rcx
               	movq	%rax, 8(%rcx)
               	movq	$0, 32(%r15)
               	movdqu	40(%r15), %xmm0
               	movdqu	16(%rcx), %xmm1
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, 16(%rcx)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 40(%r15)
               	movb	$0, 32(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x425a6f <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()+0x1f>
               	movq	%rbx, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430430 <mi_free>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, 16(%rsp)
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	(%r15), %rax
               	leaq	244379(%rip), %r12      # 0x461540 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	pxor	%xmm1, %xmm1
               	jmp	0x425af3 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
               	movl	%eax, %ebx
               	addq	$15, %rbx
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*104(%rax)
               	andq	$-8, %rbx
               	addq	$15, %rbx
               	andq	$-8, %rbx
               	addq	%rbx, %r14
               	movq	%r14, %xmm0
               	addq	$2, %r13
               	movq	%r13, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	(%r15), %rax
               	cmpq	%r12, %rax
               	je	0x425bf8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x178>
               	movq	(%rax), %rcx
               	movq	%rcx, (%r15)
               	testq	%rax, %rax
               	je	0x425bf8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x178>
               	leaq	8(%rax), %rbx
               	movq	8(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	20(%rcx), %ecx
               	testl	%ecx, %ecx
               	movdqa	%xmm1, (%rsp)
               	js	0x425b30 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
               	movl	%ecx, %ebp
               	addq	$15, %rbp
               	jmp	0x425b45 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc5>
               	nop
               	addq	$-8, %rax
               	movslq	%ecx, %rcx
               	movl	24(%rax), %ebp
               	negq	%rcx
               	imulq	%rcx, %rbp
               	addq	$31, %rbp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	*104(%rax)
               	andq	$-8, %rbp
               	addq	$15, %rbp
               	andq	$-8, %rbp
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %r14
               	addq	%rbp, %r14
               	movq	%r14, %xmm0
               	movq	%xmm1, %r13
               	leaq	1(%r13), %rax
               	movq	%rax, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	je	0x425af0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	cmpq	%rax, (%rax)
               	je	0x425af0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	16(%rax), %rsi
               	testb	$1, %sil
               	je	0x425af0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	andq	$-2, %rsi
               	je	0x425af0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	xorl	%eax, %eax
               	movl	$1, %ecx
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	jne	0x425af0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	jns	0x425aab <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
               	cltq
               	movl	8(%rsi), %ebx
               	negq	%rax
               	imulq	%rax, %rbx
               	addq	$31, %rbx
               	jmp	0x425ab1 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x31>
               	movdqa	%xmm1, (%rsp)
               	movb	$1, %al
               	xchgb	%al, 239211(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425c21 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
               	nopl	(%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 239187(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425c10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x190>
               	cmpb	$0, 239192(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	movq	16(%rsp), %rax
               	je	0x425c5a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	cmpq	%rax, 239170(%rip)      # 0x460278 <(anonymous namespace)::current>
               	jne	0x425c5a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	leaq	239161(%rip), %rcx      # 0x460278 <(anonymous namespace)::current>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	je	0x425c88 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x208>
               	movdqu	(%rax), %xmm0
               	jmp	0x425c97 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x217>
               	cmpb	$0, 239391(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x425c9f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	cmpq	%rax, 239374(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x425c9f <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	leaq	239365(%rip), %rcx      # 0x460378 <(anonymous namespace)::last>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	jne	0x425c54 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1d4>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$1, 152(%rcx)
               	paddq	%xmm1, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$0, 239050(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::schedule()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	cmpq	$0, 230105(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425ced <GCStateHolder::schedule()+0x1d>
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x425d38 <GCStateHolder::schedule()+0x68>
               	movq	168(%rbx), %r14
               	movq	40(%rbx), %rax
               	cmpq	%rax, %r14
               	jg	0x425d1b <GCStateHolder::schedule()+0x4b>
               	addq	$1, %rax
               	movq	%rax, 168(%rbx)
               	leaq	184(%rbx), %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	movq	168(%rbx), %r14
               	cmpq	$0, 230037(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x425d2d <GCStateHolder::schedule()+0x5d>
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	nop

<kotlin::ThreadStateGuard::~ThreadStateGuard()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x425d69 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	movl	8(%rax), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x425d69 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	cmpl	$1, %eax
               	jne	0x425d69 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
               	movb	243571(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x425d6a <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x2a>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425d97 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425da0 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425d9d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	224147(%rip), %rax      # 0x45c928 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>
               	jmp	0x425d9a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>:
               	pushq	%rbx
               	movq	(%rsi), %rbx
               	movq	(%rdi), %rdi
               	addq	$248, %rdi
               	movq	%rbx, %rsi
               	callq	0x4273b0 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 238754(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425df1 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238723(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425de0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x30>
               	cmpb	$0, 238728(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x425e0c <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	cmpq	%rbx, 238711(%rip)      # 0x460278 <(anonymous namespace)::current>
               	jne	0x425e0c <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	leaq	238702(%rip), %rbx      # 0x460278 <(anonymous namespace)::current>
               	jmp	0x425e25 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x75>
               	cmpb	$0, 238957(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x425e32 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	cmpq	%rbx, 238940(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x425e32 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	leaq	238931(%rip), %rbx      # 0x460378 <(anonymous namespace)::last>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 80(%rbx)
               	movb	$1, 88(%rbx)
               	movb	$0, 238647(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>:
               	jmp	0x427b30 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
               	nopw	%cs:(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x425e67 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x425e70 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x425e6d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	223923(%rip), %rax      # 0x45c918 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>
               	jmp	0x425e6a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x425ead <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %rbx
               	leaq	16(%rbx), %rsi
               	leaq	184(%rbx), %rdi
               	movq	%rdi, 208(%rsp)
               	movq	%rsi, 216(%rsp)
               	callq	0x427300 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	cmpb	$1, 312(%rbx)
               	jne	0x425eeb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b>
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	56(%rbx), %rcx
               	movq	%rcx, 200(%rsp)
               	leaq	336(%rbx), %rcx
               	movq	%rcx, 192(%rsp)
               	leaq	104(%rsp), %r13
               	leaq	120(%rbx), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	229530(%rip), %r12      # 0x45dfb8 <write+0x45dfb8>
               	movq	%rbx, 72(%rsp)
               	jmp	0x425f73 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf3>
               	nopl	(%rax,%rax)
               	movq	%r15, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r13, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	208(%rsp), %rdi
               	movq	216(%rsp), %rsi
               	callq	0x427300 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	movq	72(%rsp), %rbx
               	cmpb	$1, 312(%rbx)
               	je	0x425ed9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
               	movq	(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 238322(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x425fa1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x121>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238291(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x425f90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x110>
               	cmpb	$0, 238296(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x426039 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1b9>
               	movl	$256, %edx              # imm = 0x100
               	leaq	238526(%rip), %rdi      # 0x460378 <(anonymous namespace)::last>
               	leaq	238263(%rip), %rsi      # 0x460278 <(anonymous namespace)::current>
               	callq	0x4136f0 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 238248(%rip)     # 0x460278 <(anonymous namespace)::current>
               	movups	%xmm0, 238257(%rip)     # 0x460288 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 238266(%rip)     # 0x460298 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 238275(%rip)     # 0x4602a8 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 238284(%rip)     # 0x4602b8 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 238293(%rip)     # 0x4602c8 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 238302(%rip)     # 0x4602d8 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 238311(%rip)     # 0x4602e8 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 238320(%rip)     # 0x4602f8 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 238329(%rip)     # 0x460308 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 238338(%rip)     # 0x460318 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 238347(%rip)     # 0x460328 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 238356(%rip)     # 0x460338 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 238365(%rip)     # 0x460348 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 238374(%rip)     # 0x460358 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 238383(%rip)     # 0x460368 <(anonymous namespace)::current+0xf0>
               	movq	%rbp, 238136(%rip)      # 0x460278 <(anonymous namespace)::current>
               	movb	$1, 238137(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 238133(%rip)      # 0x460288 <(anonymous namespace)::current+0x10>
               	movb	$1, 238134(%rip)        # 0x460290 <(anonymous namespace)::current+0x18>
               	movb	$0, 238095(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	cmpl	$0, 344(%rbx)
               	sete	%al
               	xchgb	%al, 242887(%rip)       # 0x461538 <(anonymous namespace)::markingRequested (.0.0)>
               	movq	%rbp, %rax
               	xchgq	%rax, 242893(%rip)      # 0x461548 <(anonymous namespace)::markingEpoch (.0)>
               	callq	0x424570 <kotlin::mm::RequestThreadsSuspension()>
               	movb	$1, %al
               	xchgb	%al, 238056(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4260a1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x221>
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238035(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426090 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x210>
               	cmpb	$0, 238040(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x4260ba <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x23a>
               	leaq	238023(%rip), %rbx      # 0x460278 <(anonymous namespace)::current>
               	cmpq	%rbp, 238016(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x4260d3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x253>
               	cmpb	$0, 238271(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x4260e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	leaq	238254(%rip), %rbx      # 0x460378 <(anonymous namespace)::last>
               	cmpq	%rbp, 238247(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x4260e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 48(%rbx)
               	movb	$1, 56(%rbx)
               	movq	%rbp, (%rsp)
               	movb	$0, 237957(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	nopl	(%rax,%rax)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	leaq	8(%rax), %rbp
               	testq	%rax, %rax
               	cmoveq	%rax, %rbp
               	testq	%r12, %r12
               	je	0x42612a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2aa>
               	leaq	238467(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426ffb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x117b>
               	movq	238431(%rip), %rax      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bl
               	jmp	0x426147 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c7>
               	nopl	(%rax,%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x426180 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x300>
               	leaq	8(%rax), %rcx
               	cmpq	%rbp, %rcx
               	je	0x426140 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426140 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426140 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	movq	296(%rax), %rcx
               	movzbl	96(%rcx), %ecx
               	testb	$1, %cl
               	jne	0x426140 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2c0>
               	xorl	%ebx, %ebx
               	nop
               	testq	%r12, %r12
               	je	0x426191 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x311>
               	leaq	238356(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testb	%bl, %bl
               	jne	0x4261a5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x325>
               	callq	0x413720 <sched_yield@plt>
               	jmp	0x4260f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x270>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237763(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4261a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x320>
               	cmpb	$0, 237768(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	movq	72(%rsp), %rbx
               	je	0x4261d3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x353>
               	leaq	237746(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237735(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x4261f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x370>
               	cmpb	$0, 237990(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x4261fb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	leaq	237973(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237962(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x4261fb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	cmpb	$0, 56(%rax)
               	je	0x4261fb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movb	$0, 237678(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	8(%rbx), %r15
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*24(%rax)
               	movq	200(%rsp), %rdi
               	movq	(%rsp), %rbp
               	movq	%rbp, %rsi
               	callq	0x4273b0 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x425010 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
               	movq	%rbp, %rdi
               	movq	192(%rsp), %rsi
               	callq	0x425a80 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	nop
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	leaq	8(%rax), %rbx
               	testq	%rax, %rax
               	cmoveq	%rax, %rbx
               	testq	%r12, %r12
               	je	0x42626e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3ee>
               	leaq	238143(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427002 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1182>
               	movq	238107(%rip), %rax      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bpl
               	jmp	0x426287 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x407>
               	nopl	(%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x4262b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x430>
               	leaq	8(%rax), %rcx
               	cmpq	%rbx, %rcx
               	je	0x426280 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x426280 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x426280 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x400>
               	xorl	%ebp, %ebp
               	nop
               	testq	%r12, %r12
               	je	0x4262c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x441>
               	leaq	238052(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testb	%bpl, %bpl
               	jne	0x4262d5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x455>
               	callq	0x413720 <sched_yield@plt>
               	jmp	0x426240 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3c0>
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237459(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4262d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x450>
               	cmpb	$0, 237464(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	leaq	238193(%rip), %r14      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	je	0x426305 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x485>
               	leaq	237440(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237429(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x426327 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4a7>
               	cmpb	$0, 237684(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x426340 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
               	leaq	237667(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	movl	$0, %esi
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 237651(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x426342 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
               	cmpb	$0, 152(%rax)
               	je	0x426340 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
               	movq	144(%rax), %rsi
               	jmp	0x426342 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
               	xorl	%esi, %esi
               	movb	$0, 237351(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*32(%rax)
               	movb	$1, %al
               	xchgb	%al, 238109(%rip)       # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426371 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4f1>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 238091(%rip)       # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426360 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4e0>
               	leaq	8(%rsp), %r15
               	movq	%r15, 16(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	238032(%rip), %rbp      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rbp
               	je	0x426440 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5c0>
               	movq	%rbp, %rsi
               	jmp	0x4263ce <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x54e>
               	nop
               	movq	40(%rax), %rbx
               	movq	237997(%rip), %rax      # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	addq	$-1, %rax
               	movq	%rax, 237986(%rip)      # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c6ec <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430430 <mi_free>
               	movq	%rbp, %rsi
               	cmpq	%r14, %rbp
               	je	0x426420 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5a0>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	32(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4263a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x520>
               	cmpq	%rsi, %r15
               	je	0x4263c6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	movq	(%rsi), %rdx
               	cmpq	%r15, %rdx
               	je	0x4263c6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	movq	%r15, %rdi
               	callq	0x43c68e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 24(%rsp)
               	movq	237923(%rip), %rax      # 0x460570 <kotlin::mm::GlobalData::instance_+0xf8>
               	addq	$-1, %rax
               	movq	%rax, 237912(%rip)      # 0x460570 <kotlin::mm::GlobalData::instance_+0xf8>
               	jmp	0x4263c6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
               	nopl	(%rax)
               	movq	237881(%rip), %rdi      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rdi
               	je	0x426440 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5c0>
               	movq	(%rdi), %rbx
               	callq	0x430430 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x426430 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5b0>
               	movq	8(%rsp), %rax
               	cmpq	%r15, %rax
               	je	0x426490 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x610>
               	movq	%rax, 237835(%rip)      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	16(%rsp), %rax
               	movq	%rax, 237831(%rip)      # 0x460568 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, (%rax)
               	movq	237813(%rip), %rax      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%r14, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r15, 16(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x4264a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
               	nopl	(%rax)
               	movq	%r14, 237777(%rip)      # 0x460568 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, 237762(%rip)      # 0x460560 <kotlin::mm::GlobalData::instance_+0xe8>
               	xorl	%eax, %eax
               	movq	%rax, 237769(%rip)      # 0x460570 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 237770(%rip)        # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	237726(%rip), %rbx      # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 236974(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	movq	(%rsp), %r14
               	je	0x4264e1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x661>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236947(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4264d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x650>
               	cmpb	$0, 236952(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x4264fa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x67a>
               	leaq	236935(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	cmpq	%r14, 236928(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x426513 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x693>
               	cmpb	$0, 237183(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x42653d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	leaq	237166(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	cmpq	%r14, 237159(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x42653d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 200(%rax)
               	movq	%rbx, 184(%rax)
               	movq	%rcx, 192(%rax)
               	jne	0x42653d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
               	movb	$1, 200(%rax)
               	movb	$0, 236844(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movb	$1, %al
               	xchgb	%al, 237612(%rip)       # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x426561 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e1>
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 237595(%rip)       # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x426550 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	237536(%rip), %rbx      # 0x460548 <kotlin::mm::GlobalData::instance_+0xd0>
               	leaq	237529(%rip), %rdx      # 0x460548 <kotlin::mm::GlobalData::instance_+0xd0>
               	jmp	0x426583 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x703>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rbx
               	cmpq	%rdx, %rbx
               	je	0x426660 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7e0>
               	movl	32(%rbx), %eax
               	testb	$4, %al
               	jne	0x426580 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4265a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x723>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%rax), %rcx
               	testb	$3, %cl
               	jne	0x426580 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	-8(%rax), %rax
               	testq	%rax, %rax
               	jne	0x426580 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x700>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x426614 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x794>
               	movq	40(%rbx), %rcx
               	testb	$1, %cl
               	je	0x4265cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x74d>
               	andq	$-2, %rcx
               	movq	8(%rcx), %rcx
               	movl	$1, %esi
               	movq	40(%rbx), %rax
               	movl	%eax, %edx
               	andl	$1, %edx
               	negq	%rdx
               	andq	%rax, %rdx
               	andq	$-2, %rdx
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	cmpl	$1, %eax
               	je	0x4265f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x770>
               	movq	$0, 8(%rdx)
               	movl	$1, %eax
               	xorl	%esi, %esi
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	xchgq	%rcx, 40(%rbx)
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x426624 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7a4>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	24(%rbx), %rcx
               	movq	%rcx, (%rax)
               	movq	(%rbx), %rbp
               	movq	237347(%rip), %rax      # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	addq	$-1, %rax
               	movq	%rax, 237336(%rip)      # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43c6ec <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x430430 <mi_free>
               	movq	%rbp, %rbx
               	jmp	0x426568 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e8>
               	nopl	(%rax,%rax)
               	movb	$0, 237329(%rip)        # 0x460578 <kotlin::mm::GlobalData::instance_+0x100>
               	movq	237290(%rip), %rbx      # 0x460558 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 236538(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426691 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x811>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236515(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426680 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x800>
               	cmpb	$0, 236520(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x4266aa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82a>
               	leaq	236503(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	cmpq	%r14, 236496(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x4266c3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x843>
               	cmpb	$0, 236751(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x4266ed <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	leaq	236734(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	cmpq	%r14, 236727(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x4266ed <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 248(%rax)
               	movq	%rbx, 232(%rax)
               	movq	%rcx, 240(%rax)
               	jne	0x4266ed <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
               	movb	$1, 248(%rax)
               	movb	$0, 236412(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	72(%rsp), %rax
               	movq	(%rax), %rbx
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	je	0x42671e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x89e>
               	nopl	(%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	jne	0x426710 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x890>
               	testq	%r12, %r12
               	je	0x426760 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e0>
               	leaq	241026(%rip), %rdi      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427009 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1189>
               	xorl	%eax, %eax
               	xchgb	%al, 241045(%rip)       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testq	%r12, %r12
               	je	0x426768 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e8>
               	leaq	240989(%rip), %rdi      # 0x4614b0 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x426768 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e8>
               	nopl	(%rax)
               	xorl	%eax, %eax
               	xchgb	%al, 241008(%rip)       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	movq	%rbx, 128(%rsp)
               	leaq	237073(%rip), %rdi      # 0x460588 <(anonymous namespace)::gSuspensionCondVar>
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	movb	$1, %al
               	xchgb	%al, 236268(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4267a1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x921>
               	nopl	(%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236243(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426790 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x910>
               	cmpb	$0, 236248(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x4267ba <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x93a>
               	leaq	236231(%rip), %rbx      # 0x460278 <(anonymous namespace)::current>
               	cmpq	%r14, 236224(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x4267d3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x953>
               	cmpb	$0, 236479(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x4267e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	leaq	236462(%rip), %rbx      # 0x460378 <(anonymous namespace)::last>
               	cmpq	%r14, 236455(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x4267e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 64(%rbx)
               	movb	$1, 72(%rbx)
               	movb	$0, 236169(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r13)
               	movq	$0, 16(%r13)
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	236925(%rip), %rax      # 0x460580 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 236125(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426831 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9b1>
               	nopl	(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 236099(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426820 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9a0>
               	movq	128(%rsp), %rax
               	leaq	8(%rax), %r14
               	cmpb	$0, 236092(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x42685a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9da>
               	leaq	236075(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 236064(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x426877 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9f7>
               	cmpb	$0, 236319(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x42688e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
               	leaq	236302(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	movq	(%rsp), %rcx
               	cmpq	%rcx, 236291(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x42688e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
               	cmpb	$0, 176(%rax)
               	movq	%rbx, 160(%rax)
               	movq	%rbp, 168(%rax)
               	je	0x4268b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa30>
               	movb	$0, 235995(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	jne	0x4268ca <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa4a>
               	jmp	0x426a70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, 176(%rax)
               	movb	$0, 235954(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x426a70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	xorl	%r13d, %r13d
               	jmp	0x4268e7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	nop
               	movq	$0, 8(%rbx)
               	movq	%rbx, %r13
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x426a70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	movq	8(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x4268d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa50>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	je	0x4268ff <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa7f>
               	cmpq	%rax, (%rax)
               	jne	0x426940 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	88(%rax), %eax
               	testb	$64, %al
               	jne	0x426940 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	js	0x426a26 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba6>
               	movl	%eax, %ecx
               	addq	$15, %rcx
               	jmp	0x426a36 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbb6>
               	nopw	%cs:(%rax,%rax)
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	20(%rax), %eax
               	testl	%eax, %eax
               	js	0x42695a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xada>
               	movl	%eax, %ecx
               	addq	$15, %rcx
               	jmp	0x42696a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaea>
               	cltq
               	movl	24(%rbx), %ecx
               	negq	%rax
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427a80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %rbx
               	movq	8(%rsp), %rax
               	movq	$0, 8(%rsp)
               	movq	%rax, 144(%rsp)
               	cmpq	$0, 104(%rsp)
               	movq	144(%rsp), %r15
               	je	0x4269dd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb5d>
               	movq	112(%rsp), %rax
               	movq	$0, 144(%rsp)
               	movq	(%rax), %rbp
               	movq	%r15, (%rax)
               	testq	%rbp, %rbp
               	je	0x4269ee <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb6e>
               	movq	%rbp, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x4269ee <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb6e>
               	movq	$0, 144(%rsp)
               	movq	%r15, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	movq	120(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, 120(%rsp)
               	leaq	144(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	8(%rsp), %r15
               	movq	%r15, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x4268e7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	jmp	0x426a70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
               	cltq
               	movl	24(%rbx), %ecx
               	negq	%rax
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x427a80 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %rbx
               	movq	%r15, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x4268e7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
               	nopw	%cs:(%rax,%rax)
               	movq	236297(%rip), %rax      # 0x460580 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 235497(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426aa1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc21>
               	nop
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 235475(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426a90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc10>
               	cmpb	$0, 235480(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	movq	(%rsp), %r14
               	je	0x426abe <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc3e>
               	leaq	235459(%rip), %rax      # 0x460278 <(anonymous namespace)::current>
               	cmpq	%r14, 235452(%rip)      # 0x460278 <(anonymous namespace)::current>
               	je	0x426ad7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc57>
               	cmpb	$0, 235707(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x426af5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	leaq	235690(%rip), %rax      # 0x460378 <(anonymous namespace)::last>
               	cmpq	%r14, 235683(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x426af5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	cmpb	$0, 224(%rax)
               	movq	%rbx, 208(%rax)
               	movq	%rbp, 216(%rax)
               	jne	0x426af5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
               	movb	$1, 224(%rax)
               	movb	$0, 235380(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	184(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x4273b0 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 235356(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	leaq	104(%rsp), %r13
               	movq	72(%rsp), %rbx
               	je	0x426b41 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcc1>
               	nopw	%cs:(%rax,%rax)
               	callq	0x423170 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 235315(%rip)       # 0x460270 <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426b30 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcb0>
               	cmpb	$0, 235320(%rip)        # 0x460280 <(anonymous namespace)::current+0x8>
               	je	0x426c00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
               	cmpq	%r14, 235299(%rip)      # 0x460278 <(anonymous namespace)::current>
               	jne	0x426c00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 235313(%rip)      # 0x460298 <(anonymous namespace)::current+0x20>
               	movb	$1, 235314(%rip)        # 0x4602a0 <(anonymous namespace)::current+0x28>
               	movl	$256, %edx              # imm = 0x100
               	leaq	235518(%rip), %rdi      # 0x460378 <(anonymous namespace)::last>
               	leaq	235255(%rip), %rsi      # 0x460278 <(anonymous namespace)::current>
               	callq	0x4136f0 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 235240(%rip)     # 0x460278 <(anonymous namespace)::current>
               	movups	%xmm0, 235249(%rip)     # 0x460288 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 235258(%rip)     # 0x460298 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 235267(%rip)     # 0x4602a8 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 235276(%rip)     # 0x4602b8 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 235285(%rip)     # 0x4602c8 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 235294(%rip)     # 0x4602d8 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 235303(%rip)     # 0x4602e8 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 235312(%rip)     # 0x4602f8 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 235321(%rip)     # 0x460308 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 235330(%rip)     # 0x460318 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 235339(%rip)     # 0x460328 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 235348(%rip)     # 0x460338 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 235357(%rip)     # 0x460348 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 235366(%rip)     # 0x460358 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 235375(%rip)     # 0x460368 <(anonymous namespace)::current+0xf0>
               	jmp	0x426c25 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	nop
               	cmpb	$0, 235385(%rip)        # 0x460380 <(anonymous namespace)::last+0x8>
               	je	0x426c25 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	cmpq	%r14, 235368(%rip)      # 0x460378 <(anonymous namespace)::last>
               	jne	0x426c25 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
               	callq	0x43d080 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 235386(%rip)      # 0x460398 <(anonymous namespace)::last+0x20>
               	movb	$1, 235387(%rip)        # 0x4603a0 <(anonymous namespace)::last+0x28>
               	movb	$0, 235076(%rip)        # 0x460270 <(anonymous namespace)::lock>
               	movq	328(%rbx), %rbp
               	leaq	88(%rbp), %rdi
               	movq	%rdi, 80(%rsp)
               	movb	$0, 88(%rsp)
               	testq	%r12, %r12
               	je	0x426c53 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd3>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427010 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1190>
               	movb	$1, 88(%rsp)
               	movq	120(%rsp), %rax
               	testq	%rax, %rax
               	leaq	80(%rsp), %rbx
               	jne	0x426c72 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdf2>
               	cmpq	$0, (%rbp)
               	je	0x426ef8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1078>
               	movq	%rax, 224(%rsp)
               	leaq	40(%rbp), %r14
               	cmpb	$0, 169(%rbp)
               	jne	0x426ca4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe24>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x43ccd0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpb	$0, 169(%rbp)
               	je	0x426c90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe10>
               	leaq	272(%rbp), %rbx
               	testq	%r12, %r12
               	je	0x426cc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe40>
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427017 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1197>
               	cmpq	$0, (%rbp)
               	je	0x426d20 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xea0>
               	testq	%r12, %r12
               	je	0x426cd4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe54>
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	104(%rsp), %rax
               	testq	%rax, %rax
               	je	0x426e6e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfee>
               	cmpq	$0, 16(%rbp)
               	je	0x426e40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfc0>
               	movq	24(%rbp), %rcx
               	movq	$0, 104(%rsp)
               	movq	(%rcx), %rbx
               	movq	%rax, (%rcx)
               	testq	%rbx, %rbx
               	je	0x426e4d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfcd>
               	movq	%rbx, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x426e4d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xfcd>
               	nop
               	movq	%rbx, %r13
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 168(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 144(%rsp)
               	movq	$22, 160(%rsp)
               	movups	121011(%rip), %xmm0     # 0x44460b <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movabsq	$8245936382198116210, %rcx # imm = 0x726F737365636F72
               	movq	%rcx, 14(%rax)
               	movq	$22, 152(%rsp)
               	movq	144(%rsp), %rbx
               	movb	$0, 22(%rbx)
               	movb	$1, 176(%rsp)
               	movq	$0, 136(%rsp)
               	movq	%rbp, 8(%rsp)
               	movb	$0, 48(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, 16(%rsp)
               	movq	$22, 32(%rsp)
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rax)
               	movq	14(%rbx), %rcx
               	movq	%rcx, 14(%rax)
               	movq	$22, 24(%rsp)
               	movq	16(%rsp), %rbx
               	movb	$0, 22(%rbx)
               	movb	$1, 48(%rsp)
               	leaq	1576(%rip), %rax        # 0x427410 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%rax, 56(%rsp)
               	movl	$64, %edi
               	callq	0x43c079 <operator new(unsigned long)>
               	leaq	219882(%rip), %rcx      # 0x45c8e8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	leaq	32(%rsp), %rdx
               	cmpq	%rdx, %rbx
               	je	0x426f20 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a0>
               	movq	%rbx, 16(%rax)
               	movq	32(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x426f26 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a6>
               	nopl	(%rax)
               	movq	$0, 104(%rsp)
               	movq	%rax, 16(%rbp)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%rbp)
               	movq	224(%rsp), %rax
               	addq	32(%rbp), %rax
               	movq	%rax, 32(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%r13)
               	movq	(%rsp), %rax
               	movq	%rax, 160(%rbp)
               	movq	%r14, %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	cmpb	$0, 88(%rsp)
               	je	0x426ea1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1021>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426ea1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1021>
               	testq	%r12, %r12
               	je	0x426e9c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x101c>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	104(%rsp), %rbp
               	movq	$0, 104(%rsp)
               	movq	%rbp, 8(%rsp)
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rbp, %rbp
               	je	0x425f30 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb0>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	8(%rsp), %rbx
               	movq	%rbp, 8(%rsp)
               	testq	%rbx, %rbx
               	je	0x426ec0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
               	movq	%rbx, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x426ec0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
               	movq	%r14, 8(%rsp)
               	cmpq	$0, 144(%rbp)
               	je	0x427023 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11a3>
               	leaq	128(%rbp), %rdi
               	movq	%r15, %rsi
               	callq	*152(%rbp)
               	jmp	0x426e81 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1001>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rcx)
               	movq	%r13, %rbx
               	movq	24(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rdx, 16(%rsp)
               	movq	$0, 24(%rsp)
               	movb	$0, 32(%rsp)
               	movb	$1, 48(%rax)
               	leaq	1216(%rip), %rcx        # 0x427410 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%rcx, 56(%rax)
               	movq	%rax, 64(%rsp)
               	leaq	136(%rsp), %rdi
               	leaq	64(%rsp), %rsi
               	movq	225363(%rip), %rdx      # 0x45dfc0 <write+0x45dfc0>
               	callq	0x43f2ae <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	64(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426f82 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1102>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 64(%rsp)
               	cmpb	$0, 48(%rsp)
               	leaq	104(%rsp), %r13
               	je	0x426fab <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
               	movq	16(%rsp), %rdi
               	leaq	32(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426fab <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, (%rbp)
               	jne	0x42701e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x119e>
               	movq	136(%rsp), %rax
               	movq	%rax, (%rbp)
               	movq	$0, 136(%rsp)
               	cmpb	$0, 176(%rsp)
               	je	0x426cc7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x426cc7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	callq	0x4136d0 <free@plt>
               	jmp	0x426cc7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	callq	0x43c423 <std::terminate()>
               	callq	0x43d0d2 <std::__throw_bad_function_call()>
               	jmp	0x42704c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11cc>
               	jmp	0x427176 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f6>
               	movq	%rax, %rbx
               	jmp	0x427060 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e0>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpb	$0, 88(%rsp)
               	je	0x427060 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e0>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	jne	0x427068 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11e8>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	cmpq	$0, 225096(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427077 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f7>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	64(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427097 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1217>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 64(%rsp)
               	cmpb	$0, 48(%rsp)
               	je	0x4270c3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
               	movq	16(%rsp), %rbx
               	jmp	0x4270b1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1231>
               	movq	%rax, %r14
               	leaq	32(%rsp), %rax
               	cmpq	%rax, %rbx
               	je	0x4270c3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	cmpb	$0, 176(%rsp)
               	je	0x4270e7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4270e7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, 224969(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427179 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f9>
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	104(%rsp), %rbx
               	movq	$0, 104(%rsp)
               	movq	%rbx, 8(%rsp)
               	testq	%rbx, %rbx
               	je	0x42714e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12ce>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	8(%rsp), %rbp
               	movq	%rbx, 8(%rsp)
               	testq	%rbp, %rbp
               	je	0x42711b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x129b>
               	movq	%rbp, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x42711b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x129b>
               	leaq	8(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	%r14, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	%r14, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::~GCStateHolder()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	addq	$248, %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	leaq	184(%rbx), %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	leaq	120(%rbx), %rdi
               	callq	0x43ccca <std::condition_variable::~condition_variable()>
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43ccca <std::condition_variable::~condition_variable()>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	218829(%rip), %rax      # 0x45c8a8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x4271f6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x4271f6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f240 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	218781(%rip), %rax      # 0x45c8a8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427226 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427226 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f240 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x4272a3 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x42727f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427285 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x4272c5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4272c5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x4272e9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4272e9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	8(%rdi), %rdi
               	movq	%rdi, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 224401(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427332 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x32>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4273a5 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0xa5>
               	movb	$1, 16(%rsp)
               	movq	104(%rbx), %rax
               	cmpq	%rax, 168(%rbx)
               	jg	0x427378 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x78>
               	leaq	16(%r14), %r15
               	leaq	8(%rsp), %r12
               	nopl	(%rax)
               	cmpb	$0, 296(%rbx)
               	jne	0x427371 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x71>
               	movq	%r15, %rdi
               	movq	%r12, %rsi
               	callq	0x43ccd0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	104(%rbx), %rax
               	cmpq	%rax, 168(%rbx)
               	jle	0x427350 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
               	cmpb	$0, 16(%rsp)
               	je	0x427396 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427396 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
               	cmpq	$0, 224302(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427391 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x91>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	nopl	(%rax)

<GCStateHolder::ValueWithCondVar<long>::set(long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	movq	8(%rdi), %r14
               	cmpq	$0, 224241(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4273d5 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x25>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427406 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x56>
               	movq	%r15, (%rbx)
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	testq	%r14, %r14
               	je	0x427400 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	cmpq	$0, 224199(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427400 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413750 <pthread_mutex_unlock@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	nopl	(%rax)

<std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42743d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x413770 <pthread_setname_np@plt>
               	movq	(%rbx), %r13
               	callq	0x4385d0 <Kotlin_initRuntimeIfNeeded>
               	leaq	176(%r13), %rax
               	movq	%rax, 32(%rsp)
               	cmpq	$0, 224095(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x42746d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x5d>
               	movq	32(%rsp), %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4278b3 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$1, 264(%r13)
               	cmpq	$0, 224059(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427489 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x79>
               	movq	32(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	leaq	216(%r13), %rdi
               	movq	%rdi, 88(%rsp)
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	leaq	88(%r13), %r14
               	leaq	40(%r13), %r15
               	leaq	24(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	128(%r13), %rax
               	movq	%rax, 112(%rsp)
               	xorl	%ebp, %ebp
               	leaq	8(%rsp), %rbx
               	movq	%r14, 104(%rsp)
               	movq	%r15, 96(%rsp)
               	jmp	0x4274d5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	nopl	(%rax)
               	movb	$0, 16(%rsp)
               	movq	%r14, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 223953(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4274f9 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xe9>
               	movq	%r14, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4278b3 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$1, 16(%rsp)
               	movq	32(%r13), %rax
               	movb	$1, %cl
               	testq	%rax, %rax
               	jne	0x427543 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x133>
               	nopl	(%rax)
               	cmpq	%rbp, 160(%r13)
               	jne	0x42753d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12d>
               	cmpb	$0, 168(%r13)
               	jne	0x42781d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x40d>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43ccd0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	32(%r13), %rax
               	testq	%rax, %rax
               	je	0x427510 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x100>
               	jmp	0x42753f <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12f>
               	xorl	%eax, %eax
               	movb	16(%rsp), %cl
               	movq	16(%r13), %rdx
               	movq	$0, 16(%r13)
               	movq	%rdx, 64(%rsp)
               	movq	24(%r13), %rdx
               	movq	160(%r13), %rbx
               	movq	%rax, 80(%rsp)
               	movq	%rdx, 72(%rsp)
               	movq	120(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	testb	%cl, %cl
               	je	0x4278a4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x494>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42759a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x18a>
               	cmpq	$0, 223786(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427595 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x185>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 80(%rsp)
               	je	0x427750 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movq	%rbx, 144(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rbx
               	xorl	%eax, %eax
               	movq	%rcx, 128(%rsp)
               	xchgl	%eax, 328(%rcx)
               	movl	%eax, 52(%rsp)
               	cmpl	$1, %eax
               	jne	0x4275f6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1e6>
               	movb	237294(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4275f6 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1e6>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 136(%rsp)
               	movq	64(%rsp), %rbx
               	testq	%rbx, %rbx
               	jne	0x42764e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
               	jmp	0x427700 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	nopl	(%rax)
               	leaq	264(%r14), %rbp
               	movl	$24, %edi
               	callq	0x428020 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%r12, 16(%rax)
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x43c6d4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	movq	280(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 280(%r14)
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x427700 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	leaq	16(%rbx), %rbp
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rsi
               	movl	88(%rsi), %eax
               	testb	$64, %al
               	je	0x42766c <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x25c>
               	movq	%rbp, %rdi
               	callq	0x437dc0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	je	0x427642 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x232>
               	cmpq	%rax, (%rax)
               	je	0x427642 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x232>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	cmpq	%rax, (%rax)
               	movl	$0, %r12d
               	cmovneq	%rax, %r12
               	movq	16(%r12), %rax
               	testb	$1, %al
               	je	0x4276a1 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x291>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%r12), %rcx
               	movq	%rcx, (%rax)
               	movq	%r15, %rax
               	movq	-64(%r15), %r14
               	leaq	232(%r14), %rax
               	movq	24(%r12), %rcx
               	addq	$-8, %r12
               	cmpq	%rcx, %rax
               	jne	0x427610 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x200>
               	movq	40(%r12), %rbp
               	movq	256(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 256(%r14)
               	movq	%rbp, %rdi
               	callq	0x43c6ec <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbp, %rdi
               	callq	0x430430 <mi_free>
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x42764e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
               	nop
               	cmpq	$0, 128(%rsp)
               	movq	104(%rsp), %r14
               	movq	96(%rsp), %r15
               	movq	144(%rsp), %rbx
               	movq	136(%rsp), %rdi
               	je	0x427750 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movl	52(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x427750 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	cmpl	$1, %eax
               	jne	0x427750 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	movb	236952(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427750 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)
               	movq	%rbx, 24(%rsp)
               	cmpq	$0, 144(%r13)
               	je	0x4278ae <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x49e>
               	movq	%rbx, %r12
               	movq	112(%rsp), %rdi
               	leaq	24(%rsp), %rsi
               	callq	*152(%r13)
               	movq	64(%rsp), %rbx
               	movq	$0, 64(%rsp)
               	movq	%rbx, 24(%rsp)
               	nopw	(%rax,%rax)
               	testq	%rbx, %rbx
               	je	0x4277d0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3c0>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	24(%rsp), %rbp
               	movq	%rbx, 24(%rsp)
               	testq	%rbp, %rbp
               	je	0x427790 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x380>
               	movq	%rbp, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x427790 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x380>
               	nop
               	leaq	24(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	64(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	leaq	8(%rsp), %rbx
               	movq	%r12, %rbp
               	je	0x4274d5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4274d5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
               	cmpq	$0, 223147(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4274d0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc0>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x4274d0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc0>
               	movb	$0, 169(%r13)
               	cmpb	$0, 16(%rsp)
               	je	0x42784a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x43a>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42784a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x43a>
               	cmpq	$0, 223098(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427845 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x435>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 223078(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427880 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x470>
               	movq	32(%rsp), %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4278b3 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4a3>
               	movb	$0, 264(%r13)
               	cmpq	$0, 223046(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427888 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x478>
               	movq	32(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x427888 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x478>
               	movb	$0, 264(%r13)
               	movq	88(%rsp), %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	callq	0x43d0d2 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	jmp	0x4278bc <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4ac>
               	movq	%rax, %r14
               	movq	64(%rsp), %rbx
               	movq	$0, 64(%rsp)
               	movq	%rbx, 40(%rsp)
               	testq	%rbx, %rbx
               	je	0x427905 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4f5>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	40(%rsp), %rbp
               	movq	%rbx, 40(%rsp)
               	testq	%rbp, %rbp
               	je	0x4278d2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4c2>
               	movq	%rbp, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x4278d2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4c2>
               	leaq	40(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	64(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	je	0x42793e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x52e>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42793e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x52e>
               	cmpq	$0, 222854(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427939 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x529>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	216973(%rip), %rax      # 0x45c8e8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x427976 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x427976 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43f240 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	216925(%rip), %rax      # 0x45c8e8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x4279a6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x4279a6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43f240 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x427a23 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x4279ff <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x427a05 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x427a45 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427a45 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	callq	0x4136d0 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x427a69 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427a69 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r12
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	movq	%rdx, %rbp
               	cmoveq	%rsi, %rbp
               	movq	(%rbp), %rcx
               	movq	$0, (%rbp)
               	movq	%rcx, (%rsp)
               	movq	(%rcx), %rax
               	movq	$0, (%rcx)
               	movq	(%rbp), %r13
               	movq	%rax, (%rbp)
               	testq	%r13, %r13
               	je	0x427adc <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
               	movq	%r13, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r13, %rdi
               	callq	0x430430 <mi_free>
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	jne	0x427ae5 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x65>
               	movq	%r12, 8(%rbx)
               	movq	16(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rax
               	subq	%r14, %rax
               	movq	%rax, 24(%rbx)
               	movq	(%rbp), %rax
               	movq	(%rsp), %rcx
               	movq	$0, (%rsp)
               	movq	%rcx, (%r15)
               	movq	%rax, 8(%r15)
               	movq	%rsp, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	testq	%r15, %r15
               	je	0x427b60 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x30>
               	xchgl	%ebp, 328(%r15)
               	jmp	0x427b63 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x33>
               	xorl	%r15d, %r15d
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x425cd0 <GCStateHolder::schedule()>
               	testq	%r15, %r15
               	je	0x427b90 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427b90 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	cmpl	$1, %eax
               	jne	0x427b90 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movb	235852(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x427b9b <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x6b>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%r15, %r15
               	je	0x427be7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x427be7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	cmpl	$1, %eax
               	jne	0x427be7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movb	235780(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427be7 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	movl	$1, %edi
               	movl	$168, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movq	(%r12), %rax
               	leaq	56(%rax), %rcx
               	movq	%rcx, (%rsp)
               	movq	%rcx, (%rbx)
               	movaps	(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movups	8(%rbx), %xmm1
               	movaps	%xmm1, (%rsp)
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 16(%rsp)
               	leaq	166(%rip), %rcx         # 0x427cf0 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rcx, 24(%rbx)
               	movq	$0, 24(%rsp)
               	leaq	194(%rip), %rcx         # 0x427d20 <std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>
               	movq	%rcx, 32(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 40(%rbx)
               	movups	%xmm0, 56(%rbx)
               	movq	64(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movq	16(%rsp), %rax
               	testq	%rax, %rax
               	je	0x427c97 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)+0xa7>
               	movq	%rsp, %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rax
               	addq	$72, %rax
               	movq	(%r12), %rcx
               	leaq	160(%rcx), %rdx
               	movq	%rdx, 72(%rbx)
               	movq	%r15, 80(%rbx)
               	movq	%rbx, 88(%rbx)
               	addq	$16, %rcx
               	movq	%rcx, 112(%rbx)
               	movq	%rax, 128(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 136(%rbx)
               	movups	%xmm0, 152(%rbx)
               	movq	%rbx, (%r14)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x427d07 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x427d10 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x427d0d <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	216115(%rip), %rax      # 0x45c938 <typeinfo for kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>
               	jmp	0x427d0a <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>:
               	movq	(%rdi), %rax
               	movq	64(%rax), %rdi
               	movq	(%rdi), %rax
               	movq	16(%rax), %rax
               	jmpq	*%rax

<kotlin::gc::GC::ThreadData::~ThreadData()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x427d73 <kotlin::gc::GC::ThreadData::~ThreadData()+0x43>
               	leaq	112(%rbx), %rdi
               	callq	0x4259b0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	leaq	136(%rbx), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x427d6b <kotlin::gc::GC::ThreadData::~ThreadData()+0x3b>
               	leaq	8(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	addq	$15, %r15
               	andq	$-8, %r15
               	movq	16(%rdi), %rax
               	movq	16(%rax), %rbx
               	movq	40(%rbx), %rax
               	addq	%r15, %rax
               	movq	%rax, 40(%rbx)
               	cmpq	48(%rbx), %rax
               	jb	0x427e00 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x70>
               	cmpq	$0, 24(%rbx)
               	je	0x427fb8 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x228>
               	leaq	8(%rbx), %rdi
               	movq	%rbx, %rsi
               	callq	*32(%rbx)
               	movq	$0, 40(%rbx)
               	movq	$0, 56(%rbx)
               	movq	(%rbx), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movb	235218(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427e0f <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x7f>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x428020 <kotlin::allocateInObjectPool(unsigned long)>
               	testq	%rax, %rax
               	jne	0x427f35 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1a5>
               	movq	16(%r14), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 36(%rsp)
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movl	%ecx, 32(%rsp)
               	movq	(%rbx), %rdi
               	addq	$16, %rdi
               	callq	0x425cd0 <GCStateHolder::schedule()>
               	movq	%rax, %r12
               	movq	(%rbx), %rbp
               	movq	128(%rbp), %rdi
               	movq	%rdi, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 221501(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427e8a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfa>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x427fd3 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x243>
               	movb	$1, 16(%rsp)
               	cmpq	%r12, 120(%rbp)
               	jge	0x427ed1 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x141>
               	leaq	136(%rbp), %rbx
               	leaq	8(%rsp), %r13
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpb	$0, 312(%rbp)
               	jne	0x427eca <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13a>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x43ccd0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpq	%r12, 120(%rbp)
               	jl	0x427eb0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
               	cmpb	$0, 16(%rsp)
               	je	0x427eef <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427eef <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
               	cmpq	$0, 221397(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x427eea <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15a>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	24(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x427f24 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movl	32(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x427f24 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	cmpl	$1, %eax
               	jne	0x427f24 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movb	234948(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x427f24 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x428020 <kotlin::allocateInObjectPool(unsigned long)>
               	testq	%rax, %rax
               	je	0x427fbd <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x22d>
               	movq	$0, (%rax)
               	movq	%rax, 8(%rsp)
               	movq	8(%rsp), %rbx
               	cmpq	$0, 24(%r14)
               	je	0x427f77 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1e7>
               	movq	32(%r14), %rax
               	movq	$0, 8(%rsp)
               	movq	(%rax), %r12
               	movq	%rbx, (%rax)
               	testq	%r12, %r12
               	je	0x427f84 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
               	movq	%r12, %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r12, %rdi
               	callq	0x430430 <mi_free>
               	jmp	0x427f84 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
               	movq	$0, 8(%rsp)
               	movq	%rbx, 24(%r14)
               	movq	%rbx, 32(%r14)
               	movq	40(%r14), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%r14)
               	addq	48(%r14), %r15
               	movq	%r15, 48(%r14)
               	leaq	8(%rsp), %rdi
               	callq	0x425a50 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43d0d2 <std::__throw_bad_function_call()>
               	leaq	116318(%rip), %rdi      # 0x444622 <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x4357d0 <konan::consoleErrorf(char const*, ...)>
               	callq	0x435ab0 <konan::abort()>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	24(%rsp), %rdi
               	callq	0x425d40 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nop

<void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>:
               	movq	$1, 229389(%rip)        # 0x460018 <options+0x78>
               	movl	$2, 229387(%rip)        # 0x460020 <options+0x80>
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::allocateInObjectPool(unsigned long)>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	js	0x42810e <kotlin::allocateInObjectPool(unsigned long)+0xee>
               	movq	%rdi, %rsi
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x4280a4 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	leaq	7(%rsi), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x4280a4 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	movl	%ebx, %ecx
               	andl	$7, %ecx
               	testq	%rcx, %rcx
               	jne	0x4280a4 <kotlin::allocateInObjectPool(unsigned long)+0x84>
               	movl	16(%rax), %ecx
               	addl	$1, %ecx
               	movl	%ecx, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	cmpq	$9, %rsi
               	jb	0x42808a <kotlin::allocateInObjectPool(unsigned long)+0x6a>
               	movb	7(%rax), %al
               	andb	$1, %al
               	je	0x42808a <kotlin::allocateInObjectPool(unsigned long)+0x6a>
               	movq	$0, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rbx, %rdi
               	callq	0x4354a0 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413710 <memset@plt>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	leaq	-8(%rsi), %rax
               	cmpq	$131064, %rax           # imm = 0x1FFF8
               	ja	0x4280c0 <kotlin::allocateInObjectPool(unsigned long)+0xa0>
               	movl	%esi, %eax
               	andl	$7, %eax
               	testq	%rax, %rax
               	jne	0x4280c0 <kotlin::allocateInObjectPool(unsigned long)+0xa0>
               	popq	%rbx
               	jmp	0x435720 <_mi_heap_malloc_zero>
               	addq	$7, %rsi
               	callq	0x435720 <_mi_heap_malloc_zero>
               	testq	%rax, %rax
               	je	0x42810e <kotlin::allocateInObjectPool(unsigned long)+0xee>
               	movq	%rax, %rbx
               	andq	$-8, %rbx
               	addq	$8, %rbx
               	testb	$7, %al
               	cmoveq	%rax, %rbx
               	cmpq	%rax, %rbx
               	je	0x428115 <kotlin::allocateInObjectPool(unsigned long)+0xf5>
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movq	96(%rdx), %rcx
               	shrq	%cl, %rax
               	shlq	$6, %rax
               	movb	126(%rdx,%rax), %cl
               	orb	$2, %cl
               	movb	%cl, 126(%rdx,%rax)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<_mi_process_init>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 227996(%rip)        # 0x45fbc8 <_mi_heap_main+0xb28>
               	jne	0x428182 <_mi_process_init+0x62>
               	movq	%fs:0, %rax
               	movq	%rax, 227970(%rip)      # 0x45fbc0 <_mi_heap_main+0xb20>
               	leaq	225115(%rip), %rbx      # 0x45f0a0 <_mi_heap_main>
               	leaq	868(%rip), %rdi         # 0x4284b0 <mi_heap_main_init>
               	callq	0x428520 <_os_random_weak>
               	movq	%rax, 227952(%rip)      # 0x45fbc8 <_mi_heap_main+0xb28>
               	leaq	227969(%rip), %rdi      # 0x45fbe0 <_mi_heap_main+0xb40>
               	callq	0x428630 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 227933(%rip)      # 0x45fbd0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 227926(%rip)      # 0x45fbd8 <_mi_heap_main+0xb38>
               	movb	$1, 235063(%rip)        # 0x4617c0 <os_preloading>
               	leaq	2752(%rip), %rdi        # 0x428c50 <mi_process_done>
               	callq	0x442ea0 <atexit>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 235701(%rip)      # 0x461a58 <out_len>
               	cmpq	$32768, %rax            # imm = 0x8000
               	movl	$32768, %ebx            # imm = 0x8000
               	cmovbq	%rax, %rbx
               	leaq	235687(%rip), %r14      # 0x461a60 <out_buf>
               	movb	$0, (%rbx,%r14)
               	movq	220675(%rip), %rax      # 0x45dfc8 <write+0x45dfc8>
               	movq	(%rax), %rsi
               	movq	%r14, %rdi
               	callq	0x413790 <fputs@plt>
               	movb	$10, (%rbx,%r14)
               	leaq	34468(%rip), %rax       # 0x430880 <mi_out_buf_stderr>
               	movq	%rax, 235629(%rip)      # 0x461a50 <mi_out_default>
               	xorl	%edi, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228799(%rip), %rsi      # 0x45ffb0 <options+0x10>
               	movq	228776(%rip), %rdx      # 0x45ffa0 <options>
               	leaq	117275(%rip), %rbx      # 0x444c1a <typeinfo name for kotlin::gc::GCSchedulerData+0x1621>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$1, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228782(%rip), %rsi      # 0x45ffc8 <options+0x28>
               	movq	228759(%rip), %rdx      # 0x45ffb8 <options+0x18>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$2, %edi
               	callq	0x42aae0 <mi_option_get>
               	movl	$3, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228786(%rip), %rsi      # 0x45fff8 <options+0x58>
               	movq	228763(%rip), %rdx      # 0x45ffe8 <options+0x48>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$4, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228776(%rip), %rsi      # 0x460010 <options+0x70>
               	movq	228753(%rip), %rdx      # 0x460000 <options+0x60>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$5, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228766(%rip), %rsi      # 0x460028 <options+0x88>
               	movq	228743(%rip), %rdx      # 0x460018 <options+0x78>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$6, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228756(%rip), %rsi      # 0x460040 <options+0xa0>
               	movq	228733(%rip), %rdx      # 0x460030 <options+0x90>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$7, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228746(%rip), %rsi      # 0x460058 <options+0xb8>
               	movq	228723(%rip), %rdx      # 0x460048 <options+0xa8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$8, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228736(%rip), %rsi      # 0x460070 <options+0xd0>
               	movq	228713(%rip), %rdx      # 0x460060 <options+0xc0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$9, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228726(%rip), %rsi      # 0x460088 <options+0xe8>
               	movq	228703(%rip), %rdx      # 0x460078 <options+0xd8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228716(%rip), %rsi      # 0x4600a0 <options+0x100>
               	movq	228693(%rip), %rdx      # 0x460090 <options+0xf0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$11, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228706(%rip), %rsi      # 0x4600b8 <options+0x118>
               	movq	228683(%rip), %rdx      # 0x4600a8 <options+0x108>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$12, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228696(%rip), %rsi      # 0x4600d0 <options+0x130>
               	movq	228673(%rip), %rdx      # 0x4600c0 <options+0x120>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$13, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228686(%rip), %rsi      # 0x4600e8 <options+0x148>
               	movq	228663(%rip), %rdx      # 0x4600d8 <options+0x138>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$14, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228676(%rip), %rsi      # 0x460100 <options+0x160>
               	movq	228653(%rip), %rdx      # 0x4600f0 <options+0x150>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$15, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228666(%rip), %rsi      # 0x460118 <options+0x178>
               	movq	228643(%rip), %rdx      # 0x460108 <options+0x168>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$16, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228656(%rip), %rsi      # 0x460130 <options+0x190>
               	movq	228633(%rip), %rdx      # 0x460120 <options+0x180>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$17, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228646(%rip), %rsi      # 0x460148 <options+0x1a8>
               	movq	228623(%rip), %rdx      # 0x460138 <options+0x198>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228636(%rip), %rsi      # 0x460160 <options+0x1c0>
               	movq	228613(%rip), %rdx      # 0x460150 <options+0x1b0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$19, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	228626(%rip), %rsi      # 0x460178 <options+0x1d8>
               	movq	228603(%rip), %rdx      # 0x460168 <options+0x1c8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	%rax, 228600(%rip)      # 0x460180 <mi_max_error_count>
               	movl	$19, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	%rax, 228087(%rip)      # 0x45ff90 <mi_max_warning_count>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x429390 <mi_process_init>
               	nopw	%cs:(%rax,%rax)

<mi_heap_main_init>:
               	pushq	%rbx
               	cmpq	$0, 227087(%rip)        # 0x45fbc8 <_mi_heap_main+0xb28>
               	je	0x4284bd <mi_heap_main_init+0xd>
               	popq	%rbx
               	retq
               	movq	%fs:0, %rax
               	movq	%rax, 227059(%rip)      # 0x45fbc0 <_mi_heap_main+0xb20>
               	leaq	224204(%rip), %rbx      # 0x45f0a0 <_mi_heap_main>
               	leaq	-43(%rip), %rdi         # 0x4284b0 <mi_heap_main_init>
               	callq	0x428520 <_os_random_weak>
               	movq	%rax, 227041(%rip)      # 0x45fbc8 <_mi_heap_main+0xb28>
               	leaq	227058(%rip), %rdi      # 0x45fbe0 <_mi_heap_main+0xb40>
               	callq	0x428630 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 227022(%rip)      # 0x45fbd0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 227015(%rip)      # 0x45fbd8 <_mi_heap_main+0xb38>
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_os_random_weak>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movabsq	$-4658895280553007687, %r15 # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r14 # imm = 0x94D049BB133111EB
               	leaq	-36(%rip), %rbx         # 0x428520 <_os_random_weak>
               	xorq	%rdi, %rbx
               	movq	%rsp, %rsi
               	movl	$1, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	xorq	(%rsp), %rbx
               	xorq	8(%rsp), %rbx
               	movl	%ebx, %ecx
               	shrl	$17, %ecx
               	xorl	%ebx, %ecx
               	andl	$15, %ecx
               	leaq	1(%rcx), %rax
               	testq	%rcx, %rcx
               	je	0x4285eb <_os_random_weak+0xcb>
               	movl	%eax, %ecx
               	andl	$-2, %ecx
               	negq	%rcx
               	jmp	0x4285ac <_os_random_weak+0x8c>
               	nopl	(%rax)
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdx
               	shrq	$27, %rdx
               	xorq	%rsi, %rdx
               	imulq	%r14, %rdx
               	movq	%rdx, %rbx
               	shrq	$31, %rbx
               	xorq	%rdx, %rbx
               	addq	$2, %rcx
               	je	0x4285eb <_os_random_weak+0xcb>
               	movl	$17, %edx
               	movl	$17, %esi
               	testq	%rbx, %rbx
               	je	0x4285be <_os_random_weak+0x9e>
               	movq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r14, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	je	0x428580 <_os_random_weak+0x60>
               	movq	%rdi, %rdx
               	jmp	0x428580 <_os_random_weak+0x60>
               	testb	$1, %al
               	je	0x428621 <_os_random_weak+0x101>
               	testq	%rbx, %rbx
               	movl	$17, %eax
               	cmovneq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r14, %rax
               	movq	%rax, %rbx
               	shrq	$31, %rbx
               	xorq	%rax, %rbx
               	movq	%rbx, %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<_mi_random_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdi, %r14
               	movq	%rsp, %rsi
               	movl	$318, %edi              # imm = 0x13E
               	movl	$32, %edx
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	cmpq	$32, %rax
               	jne	0x4286d7 <_mi_random_init+0xa7>
               	movb	(%rsp), %al
               	movb	1(%rsp), %r11b
               	movb	2(%rsp), %r10b
               	movb	3(%rsp), %r9b
               	movb	4(%rsp), %cl
               	movb	5(%rsp), %bpl
               	movb	6(%rsp), %r8b
               	movb	7(%rsp), %bl
               	movb	8(%rsp), %dl
               	movb	9(%rsp), %sil
               	movl	%esi, 36(%rsp)
               	movb	10(%rsp), %sil
               	movl	%esi, 48(%rsp)
               	movb	11(%rsp), %sil
               	movl	%esi, 52(%rsp)
               	movb	12(%rsp), %r12b
               	movb	13(%rsp), %sil
               	movl	%esi, 32(%rsp)
               	movb	14(%rsp), %sil
               	movl	%esi, 40(%rsp)
               	movb	15(%rsp), %sil
               	movl	%esi, 44(%rsp)
               	movb	16(%rsp), %r13b
               	movb	17(%rsp), %r15b
               	movb	18(%rsp), %dil
               	jmp	0x4289d4 <_mi_random_init+0x3a4>
               	movabsq	$-4658895280553007687, %rbx # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r15 # imm = 0x94D049BB133111EB
               	leaq	116485(%rip), %rdi      # 0x444df7 <typeinfo name for kotlin::gc::GCSchedulerData+0x17fe>
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	leaq	56(%rsp), %rsi
               	movl	$1, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	leaq	-495(%rip), %rcx        # 0x428520 <_os_random_weak>
               	xorq	56(%rsp), %rcx
               	xorq	64(%rsp), %rcx
               	movl	%ecx, %edx
               	shrl	$17, %edx
               	xorl	%ecx, %edx
               	andl	$15, %edx
               	leaq	1(%rdx), %rax
               	testq	%rdx, %rdx
               	je	0x4287ab <_mi_random_init+0x17b>
               	movl	%eax, %edx
               	andl	$-2, %edx
               	negq	%rdx
               	jmp	0x42876c <_mi_random_init+0x13c>
               	nopl	(%rax)
               	movq	%rsi, %rcx
               	shrq	$30, %rcx
               	xorq	%rsi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rsi
               	shrq	$27, %rsi
               	xorq	%rcx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	addq	$2, %rdx
               	je	0x4287ab <_mi_random_init+0x17b>
               	movl	$17, %esi
               	movl	$17, %edi
               	testq	%rcx, %rcx
               	je	0x42877e <_mi_random_init+0x14e>
               	movq	%rcx, %rdi
               	movq	%rdi, %rcx
               	shrq	$30, %rcx
               	xorq	%rdi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rdi
               	shrq	$27, %rdi
               	xorq	%rcx, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rcx
               	shrq	$31, %rcx
               	xorq	%rdi, %rcx
               	je	0x428740 <_mi_random_init+0x110>
               	movq	%rcx, %rsi
               	jmp	0x428740 <_mi_random_init+0x110>
               	testb	$1, %al
               	je	0x4287e1 <_mi_random_init+0x1b1>
               	testq	%rcx, %rcx
               	movl	$17, %eax
               	cmovneq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	testq	%rcx, %rcx
               	movl	$17, %ebp
               	cmoveq	%rbp, %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$27, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$31, %rax
               	xorq	%rcx, %rax
               	movq	%rax, %rcx
               	cmoveq	%rbp, %rcx
               	movl	%eax, (%rsp)
               	movq	%rcx, %rdx
               	shrq	$30, %rdx
               	xorq	%rcx, %rdx
               	imulq	%rbx, %rdx
               	movq	%rdx, %rsi
               	shrq	$27, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	movl	%ecx, 4(%rsp)
               	movq	%rcx, %rdx
               	cmoveq	%rbp, %rdx
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rdx
               	shrq	$31, %rdx
               	xorq	%rdi, %rdx
               	movl	%edx, 8(%rsp)
               	movq	%rdx, %rsi
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %r12
               	shrq	$31, %r12
               	xorq	%rsi, %r12
               	movl	%r12d, 12(%rsp)
               	movq	%r12, %rsi
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %r13
               	shrq	$31, %r13
               	xorq	%rsi, %r13
               	movq	%r13, %rdi
               	cmoveq	%rbp, %rdi
               	movl	%r13d, 16(%rsp)
               	movq	%rdi, %rsi
               	shrq	$30, %rsi
               	xorq	%rdi, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$31, %rsi
               	xorq	%rdi, %rsi
               	movl	%esi, 20(%rsp)
               	cmoveq	%rbp, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	movl	%edi, 24(%rsp)
               	cmoveq	%rbp, %rdi
               	movq	%rdi, %rsi
               	shrq	$30, %rsi
               	xorq	%rdi, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$27, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$31, %rsi
               	xorl	%edi, %esi
               	movl	%esi, 28(%rsp)
               	movl	%eax, %r11d
               	shrl	$8, %r11d
               	movl	%eax, %r10d
               	shrl	$16, %r10d
               	movl	%eax, %r9d
               	shrl	$24, %r9d
               	movl	%ecx, %ebp
               	shrl	$8, %ebp
               	movl	%ecx, %r8d
               	shrl	$16, %r8d
               	movl	%ecx, %ebx
               	shrl	$24, %ebx
               	movl	%edx, %esi
               	shrl	$8, %esi
               	movl	%esi, 36(%rsp)
               	movl	%edx, %esi
               	shrl	$16, %esi
               	movl	%esi, 48(%rsp)
               	movl	%edx, %esi
               	shrl	$24, %esi
               	movl	%esi, 52(%rsp)
               	movl	%r12d, %esi
               	shrl	$8, %esi
               	movl	%esi, 32(%rsp)
               	movl	%r12d, %esi
               	shrl	$16, %esi
               	movl	%esi, 40(%rsp)
               	movl	%r12d, %esi
               	shrl	$24, %esi
               	movl	%esi, 44(%rsp)
               	movl	%r13d, %r15d
               	shrl	$8, %r15d
               	movl	%r13d, %edi
               	shrl	$16, %edi
               	movzbl	%al, %eax
               	movzbl	%r11b, %esi
               	shll	$8, %esi
               	orl	%eax, %esi
               	movzbl	%r10b, %eax
               	shll	$16, %eax
               	orl	%esi, %eax
               	movzbl	%r9b, %esi
               	shll	$24, %esi
               	orl	%eax, %esi
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 108(%r14)
               	movdqu	%xmm0, 92(%r14)
               	movdqu	%xmm0, 76(%r14)
               	movdqu	%xmm0, 60(%r14)
               	movdqu	%xmm0, 44(%r14)
               	movq	$0, 124(%r14)
               	movaps	107869(%rip), %xmm1     # 0x442f80 <_IO_stdin_used+0x80>
               	movups	%xmm1, (%r14)
               	movl	%esi, 16(%r14)
               	movzbl	%cl, %eax
               	movzbl	%bpl, %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%r8b, %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	%bl, %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 20(%r14)
               	movzbl	%r13b, %eax
               	movzbl	20(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%dl, %eax
               	movzbl	%r12b, %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm1
               	pinsrw	$1, %ecx, %xmm1
               	movzbl	%r15b, %eax
               	movzbl	21(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	36(%rsp), %eax
               	movzbl	32(%rsp), %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm2
               	pinsrw	$1, %ecx, %xmm2
               	movzbl	%dil, %eax
               	movzbl	22(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	48(%rsp), %eax
               	movzbl	40(%rsp), %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm3
               	pinsrw	$1, %ecx, %xmm3
               	punpcklbw	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
               	pslld	$8, %xmm2
               	punpcklbw	%xmm0, %xmm3    # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3],xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
               	punpcklwd	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3]
               	por	%xmm1, %xmm0
               	movzbl	44(%rsp), %eax
               	movzbl	52(%rsp), %ecx
               	movd	%ecx, %xmm1
               	pinsrw	$2, %eax, %xmm1
               	por	%xmm2, %xmm0
               	movzbl	19(%rsp), %eax
               	pinsrw	$4, %eax, %xmm1
               	movzbl	23(%rsp), %eax
               	pinsrw	$6, %eax, %xmm1
               	pslld	$24, %xmm1
               	por	%xmm0, %xmm1
               	movdqu	%xmm1, 24(%r14)
               	movzbl	24(%rsp), %eax
               	movzbl	25(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	26(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	27(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 40(%r14)
               	movzbl	28(%rsp), %eax
               	movzbl	29(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	30(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	31(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 44(%r14)
               	movq	$0, 48(%r14)
               	movl	%r14d, 56(%r14)
               	movq	%r14, %rax
               	shrq	$32, %rax
               	movl	%eax, 60(%r14)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<_mi_heap_random_next>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	leaq	2880(%rdi), %r14
               	movl	3008(%rdi), %eax
               	testl	%eax, %eax
               	jg	0x428bc2 <_mi_heap_random_next+0x32>
               	movq	%r14, %rdi
               	callq	0x4319b0 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	movl	$16, %ebp
               	movl	$16, %ecx
               	subl	%eax, %ecx
               	movslq	%ecx, %rax
               	movl	2944(%rbx,%rax,4), %r15d
               	movl	$0, 2944(%rbx,%rax,4)
               	movl	3008(%rbx), %ecx
               	leal	-1(%rcx), %eax
               	movl	%eax, 3008(%rbx)
               	cmpl	$1, %ecx
               	jg	0x428c0f <_mi_heap_random_next+0x7f>
               	movq	%r14, %rdi
               	callq	0x4319b0 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	shlq	$32, %r15
               	subl	%eax, %ebp
               	movslq	%ebp, %rcx
               	movl	2944(%rbx,%rcx,4), %eax
               	movl	$0, 2944(%rbx,%rcx,4)
               	movl	3008(%rbx), %ecx
               	addl	$-1, %ecx
               	movl	%ecx, 3008(%rbx)
               	orq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<mi_process_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$472, %rsp              # imm = 0x1D8
               	cmpb	$0, 231660(%rip)        # 0x461554 <_mi_process_is_initialized>
               	je	0x429370 <mi_process_done+0x720>
               	cmpb	$0, 331683(%rip)        # 0x479c18 <mi_process_done.process_done>
               	jne	0x429370 <mi_process_done+0x720>
               	movb	$1, 331670(%rip)        # 0x479c18 <mi_process_done.process_done>
               	movq	$-80, %rbx
               	movq	%fs:(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x42c590 <mi_heap_collect_ex>
               	movl	$1, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x428cb9 <mi_process_done+0x69>
               	movl	$2, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429354 <mi_process_done+0x704>
               	callq	0x42a8e0 <mi_thread_init>
               	movq	%fs:(%rbx), %rax
               	movq	(%rax), %rdi
               	addq	$176, %rdi
               	callq	0x42c0a0 <mi_stats_merge_from>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	107184(%rip), %xmm0     # 0x442f90 <_IO_stdin_used+0x90>
               	movups	%xmm0, 40(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	leaq	114592(%rip), %rdi      # 0x444c99 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a0>
               	leaq	114578(%rip), %rbp      # 0x444c92 <typeinfo name for kotlin::gc::GCSchedulerData+0x1699>
               	leaq	114561(%rip), %r10      # 0x444c88 <typeinfo name for kotlin::gc::GCSchedulerData+0x168f>
               	leaq	114546(%rip), %r11      # 0x444c80 <typeinfo name for kotlin::gc::GCSchedulerData+0x1687>
               	leaq	114476(%rip), %rdx      # 0x444c41 <typeinfo name for kotlin::gc::GCSchedulerData+0x1648>
               	leaq	114506(%rip), %rcx      # 0x444c66 <typeinfo name for kotlin::gc::GCSchedulerData+0x166d>
               	leaq	114510(%rip), %r8       # 0x444c71 <typeinfo name for kotlin::gc::GCSchedulerData+0x1678>
               	leaq	114510(%rip), %r9       # 0x444c78 <typeinfo name for kotlin::gc::GCSchedulerData+0x167f>
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %rbx
               	movq	%rbx, %rsi
               	movl	$0, %eax
               	pushq	%rdi
               	pushq	%rbp
               	pushq	%r10
               	pushq	%r11
               	callq	0x430a70 <_mi_fprintf>
               	addq	$32, %rsp
               	leaq	231536(%rip), %rdi      # 0x4615c0 <_mi_stats_main+0x40>
               	leaq	114506(%rip), %rsi      # 0x444ca1 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a8>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231445(%rip), %rbp      # 0x461580 <_mi_stats_main>
               	leaq	231534(%rip), %rdi      # 0x4615e0 <_mi_stats_main+0x60>
               	leaq	114481(%rip), %rsi      # 0x444caa <typeinfo name for kotlin::gc::GCSchedulerData+0x16b1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231539(%rip), %rdi      # 0x461600 <_mi_stats_main+0x80>
               	leaq	114464(%rip), %rsi      # 0x444cb4 <typeinfo name for kotlin::gc::GCSchedulerData+0x16bb>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231544(%rip), %rdi      # 0x461620 <_mi_stats_main+0xa0>
               	leaq	114443(%rip), %rsi      # 0x444cba <typeinfo name for kotlin::gc::GCSchedulerData+0x16c1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	114431(%rip), %rsi      # 0x444cc2 <typeinfo name for kotlin::gc::GCSchedulerData+0x16c9>
               	movq	%rbp, %rdi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231524(%rip), %rdi      # 0x461640 <_mi_stats_main+0xc0>
               	leaq	114408(%rip), %rbp      # 0x444ccb <typeinfo name for kotlin::gc::GCSchedulerData+0x16d2>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231716(%rip), %rdi      # 0x461720 <_mi_stats_main+0x1a0>
               	leaq	114387(%rip), %rsi      # 0x444cd6 <typeinfo name for kotlin::gc::GCSchedulerData+0x16dd>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231303(%rip), %rdi      # 0x4615a0 <_mi_stats_main+0x20>
               	leaq	114366(%rip), %rsi      # 0x444cde <typeinfo name for kotlin::gc::GCSchedulerData+0x16e5>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231466(%rip), %rdi      # 0x461660 <_mi_stats_main+0xe0>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	leaq	231665(%rip), %rdi      # 0x461740 <_mi_stats_main+0x1c0>
               	leaq	114318(%rip), %rsi      # 0x444ce4 <typeinfo name for kotlin::gc::GCSchedulerData+0x16eb>
               	movq	%rbx, %rdx
               	callq	0x431860 <mi_stat_counter_print>
               	leaq	231691(%rip), %rdi      # 0x461770 <_mi_stats_main+0x1f0>
               	leaq	114306(%rip), %rsi      # 0x444cee <typeinfo name for kotlin::gc::GCSchedulerData+0x16f5>
               	movq	%rbx, %rdx
               	callq	0x431860 <mi_stat_counter_print>
               	leaq	231637(%rip), %rdi      # 0x461750 <_mi_stats_main+0x1d0>
               	leaq	114294(%rip), %rsi      # 0x444cf8 <typeinfo name for kotlin::gc::GCSchedulerData+0x16ff>
               	movq	%rbx, %rdx
               	callq	0x431860 <mi_stat_counter_print>
               	leaq	231631(%rip), %rdi      # 0x461760 <_mi_stats_main+0x1e0>
               	leaq	114278(%rip), %rsi      # 0x444cfe <typeinfo name for kotlin::gc::GCSchedulerData+0x1705>
               	movq	%rbx, %rdx
               	callq	0x431860 <mi_stat_counter_print>
               	leaq	231385(%rip), %rdi      # 0x461680 <_mi_stats_main+0x100>
               	leaq	114264(%rip), %rsi      # 0x444d06 <typeinfo name for kotlin::gc::GCSchedulerData+0x170d>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x430b90 <mi_stat_print>
               	movq	231620(%rip), %rcx      # 0x461788 <_mi_stats_main+0x208>
               	testq	%rcx, %rcx
               	je	0x428ef4 <mi_process_done+0x2a4>
               	movq	231600(%rip), %rax      # 0x461780 <_mi_stats_main+0x200>
               	addq	%rax, %rax
               	leaq	(%rax,%rax,4), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x428eed <mi_process_done+0x29d>
               	cqto
               	idivq	%rcx
               	movq	%rax, %r14
               	jmp	0x428ef4 <mi_process_done+0x2a4>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %r14d
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%r14, %rax
               	imulq	%rcx
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %r8
               	addq	%rax, %r8
               	leaq	(%r8,%r8), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %r14
               	leaq	114151(%rip), %rdx      # 0x444d0e <typeinfo name for kotlin::gc::GCSchedulerData+0x1715>
               	leaq	114164(%rip), %rcx      # 0x444d22 <typeinfo name for kotlin::gc::GCSchedulerData+0x1729>
               	leaq	16(%rsp), %rsi
               	movq	%r14, %r9
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	265044(%rip), %r8       # 0x469a98 <_mi_numa_node_count>
               	testq	%r8, %r8
               	je	0x429382 <mi_process_done+0x732>
               	leaq	114135(%rip), %rdx      # 0x444d2b <typeinfo name for kotlin::gc::GCSchedulerData+0x1732>
               	leaq	114139(%rip), %rcx      # 0x444d36 <typeinfo name for kotlin::gc::GCSchedulerData+0x173d>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	265055(%rip), %rbx      # 0x469ad0 <mi_process_start>
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movq	72(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	addq	264981(%rip), %rbx      # 0x469ac8 <mi_clock_diff>
               	subq	%rbx, %rbp
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137c0 <getrusage@plt>
               	movq	72(%rsp), %rax
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$2361183241434822607, %r14 # imm = 0x20C49BA5E353F7CF
               	imulq	%r14
               	movq	%rdx, %r13
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r13
               	addq	%rax, %r13
               	addq	%rcx, %r13
               	movq	88(%rsp), %rax
               	imulq	$1000, 80(%rsp), %rcx   # imm = 0x3E8
               	imulq	%r14
               	movq	%rdx, %rbx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rbx
               	addq	%rax, %rbx
               	addq	%rcx, %rbx
               	movq	136(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	230854(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	movq	%rax, 8(%rsp)
               	movq	230850(%rip), %rax      # 0x4615f8 <_mi_stats_main+0x78>
               	movq	96(%rsp), %r12
               	shlq	$10, %r12
               	movq	%rbp, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %rbp
               	leaq	113882(%rip), %rdx      # 0x444d41 <typeinfo name for kotlin::gc::GCSchedulerData+0x1748>
               	leaq	113895(%rip), %rcx      # 0x444d55 <typeinfo name for kotlin::gc::GCSchedulerData+0x175c>
               	movq	%r15, %rsi
               	movq	%rbp, %r9
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	%r13, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %r13
               	movq	%rbx, %rax
               	imulq	%r14
               	movq	%rdx, %rdi
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rdi
               	addq	%rax, %rdi
               	imulq	$1000, %rdi, %rax       # imm = 0x3E8
               	subq	%rax, %rbx
               	subq	$8, %rsp
               	leaq	113813(%rip), %rdx      # 0x444d5d <typeinfo name for kotlin::gc::GCSchedulerData+0x1764>
               	leaq	113871(%rip), %rcx      # 0x444d9e <typeinfo name for kotlin::gc::GCSchedulerData+0x17a5>
               	movq	%r15, %rsi
               	movq	%r13, %r9
               	movl	$0, %eax
               	pushq	64(%rsp)
               	pushq	%rbx
               	pushq	%rdi
               	callq	0x430a70 <_mi_fprintf>
               	addq	$32, %rsp
               	movq	%r12, %rax
               	negq	%rax
               	cmovlq	%r12, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x429127 <mi_process_done+0x4d7>
               	leaq	113828(%rip), %rdx      # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	113828(%rip), %r8       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	8(%rsp), %rbx
               	jmp	0x4291f5 <mi_process_done+0x5a5>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	113787(%rip), %rcx      # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	113782(%rip), %rdx      # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	113749(%rip), %r9       # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%r12, %rax
               	shrq	$32, %rax
               	je	0x429189 <mi_process_done+0x539>
               	movq	%r12, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x429192 <mi_process_done+0x542>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	8(%rsp), %rbx
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	113621(%rip), %rbp      # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	113622(%rip), %rdx      # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x4137d0 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	113936(%rip), %rdx      # 0x444f0c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	testq	%rbx, %rbx
               	je	0x429341 <mi_process_done+0x6f1>
               	leaq	113573(%rip), %rdx      # 0x444dc2 <typeinfo name for kotlin::gc::GCSchedulerData+0x17c9>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	%rbx, %rax
               	negq	%rax
               	cmovlq	%rbx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x429261 <mi_process_done+0x611>
               	leaq	113508(%rip), %rdx      # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	113508(%rip), %r8       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%ebx, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x429329 <mi_process_done+0x6d9>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	113473(%rip), %rcx      # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	113468(%rip), %rdx      # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	113435(%rip), %r9       # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x4292c3 <mi_process_done+0x673>
               	movq	%rbx, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4292cb <mi_process_done+0x67b>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	113313(%rip), %rbp      # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	113314(%rip), %rdx      # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x4137d0 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	113628(%rip), %rdx      # 0x444f0c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	113765(%rip), %rdx      # 0x444fad <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	223333(%rip), %rsi      # 0x45fbc0 <_mi_heap_main+0xb20>
               	leaq	112842(%rip), %rdi      # 0x444c2c <typeinfo name for kotlin::gc::GCSchedulerData+0x1633>
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movb	$0, 230480(%rip)        # 0x4617c0 <os_preloading>
               	addq	$472, %rsp              # imm = 0x1D8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42be90 <_mi_os_numa_node_count_get>
               	movq	%rax, %r8
               	jmp	0x428f4d <mi_process_done+0x2fd>
               	nop

<mi_process_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	cmpb	$0, 229807(%rip)        # 0x461554 <_mi_process_is_initialized>
               	je	0x4293b6 <mi_process_init+0x26>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	$1, 229783(%rip)        # 0x461554 <_mi_process_is_initialized>
               	cmpb	$0, 230397(%rip)        # 0x4617c1 <mi_process_setup_auto_thread_done.tls_initialized>
               	jne	0x429409 <mi_process_init+0x79>
               	movb	$1, 230388(%rip)        # 0x4617c1 <mi_process_setup_auto_thread_done.tls_initialized>
               	leaq	224172(%rip), %rdi      # 0x45ff80 <_mi_heap_default_key>
               	leaq	3525(%rip), %rsi        # 0x42a1a0 <mi_pthread_done>
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	220345(%rip), %rax      # 0x45f0a0 <_mi_heap_main>
               	movq	$-80, %rcx
               	movq	%rax, %fs:(%rcx)
               	movl	224136(%rip), %edi      # 0x45ff80 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x429409 <mi_process_init+0x79>
               	leaq	220316(%rip), %rsi      # 0x45f0a0 <_mi_heap_main>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	%fs:0, %rsi
               	leaq	111168(%rip), %rdi      # 0x444659 <typeinfo name for kotlin::gc::GCSchedulerData+0x1060>
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movl	$30, %edi
               	callq	0x413800 <sysconf@plt>
               	testq	%rax, %rax
               	jle	0x429436 <mi_process_init+0xa6>
               	movq	%rax, 224082(%rip)      # 0x45ff88 <os_page_size>
               	movb	$1, 263723(%rip)        # 0x469a68 <large_os_page_size>
               	cmpq	$0, 223107(%rip)        # 0x45fbc8 <_mi_heap_main+0xb28>
               	jne	0x42949b <mi_process_init+0x10b>
               	movq	%fs:0, %rax
               	movq	%rax, 223081(%rip)      # 0x45fbc0 <_mi_heap_main+0xb20>
               	leaq	220226(%rip), %rbx      # 0x45f0a0 <_mi_heap_main>
               	leaq	-4021(%rip), %rdi       # 0x4284b0 <mi_heap_main_init>
               	callq	0x428520 <_os_random_weak>
               	movq	%rax, 223063(%rip)      # 0x45fbc8 <_mi_heap_main+0xb28>
               	leaq	223080(%rip), %rdi      # 0x45fbe0 <_mi_heap_main+0xb40>
               	callq	0x428630 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 223044(%rip)      # 0x45fbd0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 223037(%rip)      # 0x45fbd8 <_mi_heap_main+0xb38>
               	leaq	111052(%rip), %rdi      # 0x44466e <typeinfo name for kotlin::gc::GCSchedulerData+0x1075>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	callq	0x42a8e0 <mi_thread_init>
               	callq	0x42a8e0 <mi_thread_init>
               	movq	$-80, %r14
               	movq	%fs:(%r14), %rax
               	movq	(%rax), %rdi
               	addq	$176, %rdi
               	leaq	229551(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x4294e2 <mi_process_init+0x152>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	229527(%rip), %rdi      # 0x461580 <_mi_stats_main>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	cmpq	$0, 263635(%rip)        # 0x469ad0 <mi_process_start>
               	jne	0x4295c8 <mi_process_init+0x238>
               	cmpq	$0, 263613(%rip)        # 0x469ac8 <mi_clock_diff>
               	jne	0x429589 <mi_process_init+0x1f9>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
               	imulq	%rcx
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 263487(%rip)      # 0x469ac8 <mi_clock_diff>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rcx, %rdx
               	movq	%rdx, 263432(%rip)      # 0x469ad0 <mi_process_start>
               	movl	$7, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429f7b <mi_process_init+0xbeb>
               	movl	$7, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x429f7b <mi_process_init+0xbeb>
               	movq	%rax, %rbx
               	movq	263328(%rip), %rax      # 0x469a98 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x42a194 <mi_process_init+0xe04>
               	imulq	$500, %rbx, %rcx        # imm = 0x1F4
               	testq	%rax, %rax
               	movl	$1, %esi
               	cmovneq	%rax, %rsi
               	movq	%rbx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42964d <mi_process_init+0x2bd>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	je	0x429662 <mi_process_init+0x2d2>
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429666 <mi_process_init+0x2d6>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42966c <mi_process_init+0x2dc>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	jne	0x429637 <mi_process_init+0x2a7>
               	xorl	%eax, %eax
               	jmp	0x429670 <mi_process_init+0x2e0>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	addq	$50, %rax
               	leaq	(%rax,%rax), %rcx
               	movq	%rcx, 88(%rsp)
               	movq	%rax, 32(%rsp)
               	addq	$1, %rax
               	movq	%rax, 80(%rsp)
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	xorl	%ecx, %ecx
               	movq	%rsi, 40(%rsp)
               	nopl	(%rax,%rax)
               	xorl	%r12d, %r12d
               	cmpq	56(%rsp), %rcx
               	setb	%r12b
               	addq	48(%rsp), %r12
               	je	0x429e1b <mi_process_init+0xa8b>
               	testl	%ecx, %ecx
               	movq	%rbx, 72(%rsp)
               	movq	%rcx, 64(%rsp)
               	js	0x4296f0 <mi_process_init+0x360>
               	movl	%ecx, %ebp
               	movq	263114(%rip), %rcx      # 0x469a98 <_mi_numa_node_count>
               	testq	%rcx, %rcx
               	je	0x429e67 <mi_process_init+0xad7>
               	cmpq	%rcx, %rbp
               	jb	0x4296e4 <mi_process_init+0x354>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %ebp
               	movq	%rbp, 24(%rsp)
               	jmp	0x4296fa <mi_process_init+0x36a>
               	nop
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movq	%rax, 24(%rsp)
               	movq	%r12, %rbp
               	shlq	$30, %rbp
               	movq	263096(%rip), %rbx      # 0x469ac0 <mi_huge_start>
               	jmp	0x429725 <mi_process_init+0x395>
               	nopl	(%rax)
               	leaq	(%r15,%rbp), %rcx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rcx, 263072(%rip)      # 0x469ac0 <mi_huge_start>
               	movq	%rax, %rbx
               	je	0x429750 <mi_process_init+0x3c0>
               	movq	%rbx, %r15
               	testq	%rbx, %rbx
               	jne	0x429710 <mi_process_init+0x380>
               	movq	%fs:(%r14), %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, %r15
               	andl	$536739840, %r15d       # imm = 0x1FFE0000
               	shlq	$13, %r15
               	orq	%r13, %r15
               	jmp	0x429710 <mi_process_init+0x380>
               	cmpq	$0, 263024(%rip)        # 0x469ac8 <mi_clock_diff>
               	jne	0x4297d7 <mi_process_init+0x447>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	16(%rsp), %rax
               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
               	imulq	%rcx
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	xorl	%edi, %edi
               	movq	%r14, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	subq	%rbp, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rcx, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 262897(%rip)      # 0x469ac8 <mi_clock_diff>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	movl	$1, %eax
               	movq	24(%rsp), %rcx
               	shlq	%cl, %rax
               	movq	%rax, 96(%rsp)
               	xorl	%r13d, %r13d
               	cmpl	$64, %ecx
               	jb	0x42985c <mi_process_init+0x4cc>
               	jmp	0x429a82 <mi_process_init+0x6f2>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429e42 <mi_process_init+0xab2>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429d30 <mi_process_init+0x9a0>
               	movq	%r13, %r14
               	shlq	$30, %r14
               	addq	%r15, %r14
               	movq	262683(%rip), %rax      # 0x469a88 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 262684(%rip)        # 0x469a90 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x4298f7 <mi_process_init+0x567>
               	movb	$1, 262624(%rip)        # 0x469a90 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	110263(%rip), %rdi      # 0x444775 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jb	0x429953 <mi_process_init+0x5c3>
               	movq	%rax, %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movl	$0, (%rsp)
               	movl	$237, %edi
               	movl	$1073741824, %edx       # imm = 0x40000000
               	movl	$1, %ecx
               	movl	$64, %r9d
               	movq	%rbx, %rsi
               	leaq	8(%rsp), %r8
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	testq	%rax, %rax
               	je	0x429953 <mi_process_init+0x5c3>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	110317(%rip), %rdi      # 0x444831 <typeinfo name for kotlin::gc::GCSchedulerData+0x1238>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	cmpq	%r14, %rbx
               	jne	0x429c40 <mi_process_init+0x8b0>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228494(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228472(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x429990 <mi_process_init+0x600>
               	lock
               	cmpxchgq	%rcx, 228450(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x429980 <mi_process_init+0x5f0>
               	lock
               	addq	$1073741824, 228420(%rip) # imm = 0x40000000
                                                # 0x4615e0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228398(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228376(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x4299d0 <mi_process_init+0x640>
               	lock
               	cmpxchgq	%rcx, 228354(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x4299c0 <mi_process_init+0x630>
               	lock
               	addq	$1073741824, 228324(%rip) # imm = 0x40000000
                                                # 0x4615c0 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x42984f <mi_process_init+0x4bf>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	262305(%rip), %rax      # 0x469ac8 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x429846 <mi_process_init+0x4b6>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429831 <mi_process_init+0x4a1>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429837 <mi_process_init+0x4a7>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x429e42 <mi_process_init+0xab2>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x429d30 <mi_process_init+0x9a0>
               	movq	%r13, %r14
               	shlq	$30, %r14
               	addq	%r15, %r14
               	movq	262133(%rip), %rax      # 0x469a88 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 262134(%rip)        # 0x469a90 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x429b1e <mi_process_init+0x78e>
               	movb	$1, 262074(%rip)        # 0x469a90 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	109713(%rip), %rdi      # 0x444775 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jae	0x429c30 <mi_process_init+0x8a0>
               	cmpq	%r14, %rbx
               	jne	0x429c40 <mi_process_init+0x8b0>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 228035(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	228013(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429b60 <mi_process_init+0x7d0>
               	lock
               	cmpxchgq	%rcx, 227986(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x429b50 <mi_process_init+0x7c0>
               	lock
               	addq	$1073741824, 227956(%rip) # imm = 0x40000000
                                                # 0x4615e0 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 227934(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	227912(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x429ba0 <mi_process_init+0x810>
               	lock
               	cmpxchgq	%rcx, 227890(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x429b90 <mi_process_init+0x800>
               	lock
               	addq	$1073741824, 227860(%rip) # imm = 0x40000000
                                                # 0x4615c0 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x429a75 <mi_process_init+0x6e5>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	261841(%rip), %rax      # 0x469ac8 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x429a6c <mi_process_init+0x6dc>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x429a57 <mi_process_init+0x6c7>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x429a5d <mi_process_init+0x6cd>
               	nopw	(%rax,%rax)
               	movq	%rax, %rbx
               	cmpq	%r14, %rbx
               	je	0x429b27 <mi_process_init+0x797>
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	movq	24(%rsp), %rbp
               	je	0x429d38 <mi_process_init+0x9a8>
               	leaq	109585(%rip), %rdi      # 0x444866 <typeinfo name for kotlin::gc::GCSchedulerData+0x126d>
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%rbx, %rdi
               	callq	0x413840 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227705(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227681(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rdx, %rax
               	jge	0x429ca0 <mi_process_init+0x910>
               	lock
               	cmpxchgq	%rdx, 227666(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x429c90 <mi_process_init+0x900>
               	lock
               	addq	$1073741824, 227644(%rip) # imm = 0x40000000
                                                # 0x4615e8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227612(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227590(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429ce0 <mi_process_init+0x950>
               	lock
               	cmpxchgq	%rdx, 227570(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x429cd0 <mi_process_init+0x940>
               	lock
               	addq	$1073741824, 227548(%rip) # imm = 0x40000000
                                                # 0x4615c8 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429d38 <mi_process_init+0x9a8>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	leaq	108994(%rip), %rdi      # 0x4446cf <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	jne	0x429d48 <mi_process_init+0x9b8>
               	jmp	0x429e7d <mi_process_init+0xaed>
               	nop
               	movq	%r12, %r13
               	movq	24(%rsp), %rbp
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	je	0x429e7d <mi_process_init+0xaed>
               	testq	%r13, %r13
               	je	0x429e7d <mi_process_init+0xaed>
               	leaq	109205(%rip), %rdi      # 0x4447ed <typeinfo name for kotlin::gc::GCSchedulerData+0x11f4>
               	movl	%ebp, %esi
               	movq	%r13, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	movabsq	$1099511627712, %rax    # imm = 0xFFFFFFFFC0
               	andq	%rax, %rbx
               	movq	%rbx, %rdi
               	shrq	$2, %rdi
               	addq	$64, %rdi
               	callq	0x42b740 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x429e93 <mi_process_init+0xb03>
               	movq	%rbx, 8(%rax)
               	shrq	$6, %rbx
               	movq	%rbx, 16(%rax)
               	xchgq	%r15, (%rax)
               	movl	%ebp, 24(%rax)
               	movb	$1, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	movl	$0, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	56(%rax,%rbx,8), %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 227880(%rip)      # 0x461800 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x429df0 <mi_process_init+0xa60>
               	lock
               	subq	$1, 227861(%rip)        # 0x461800 <mi_arena_count>
               	jmp	0x429dfb <mi_process_init+0xa6b>
               	leaq	227913(%rip), %rdx      # 0x461840 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	movq	$-80, %r14
               	movq	72(%rsp), %rbx
               	movq	40(%rsp), %rsi
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	movq	64(%rsp), %rcx
               	movq	%rbx, %rax
               	movl	$0, %ebx
               	subq	%r12, %rax
               	cmovaeq	%rax, %rbx
               	jbe	0x429f7b <mi_process_init+0xbeb>
               	addq	$1, %rcx
               	cmpq	%rsi, %rcx
               	jb	0x4296a0 <mi_process_init+0x310>
               	jmp	0x429f7b <mi_process_init+0xbeb>
               	movq	24(%rsp), %rbp
               	leaq	109131(%rip), %rdi      # 0x444899 <typeinfo name for kotlin::gc::GCSchedulerData+0x12a0>
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r15
               	testq	%r15, %r15
               	jne	0x429d48 <mi_process_init+0x9b8>
               	jmp	0x429e7d <mi_process_init+0xaed>
               	callq	0x42be90 <_mi_os_numa_node_count_get>
               	movq	%rax, %rcx
               	cmpq	%rcx, %rbp
               	jae	0x4296dc <mi_process_init+0x34c>
               	jmp	0x4296e4 <mi_process_init+0x354>
               	leaq	108868(%rip), %rdi      # 0x4447c8 <typeinfo name for kotlin::gc::GCSchedulerData+0x11cf>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	jmp	0x429f7b <mi_process_init+0xbeb>
               	shlq	$30, %r13
               	je	0x429f7b <mi_process_init+0xbeb>
               	leaq	108587(%rip), %rbx      # 0x4446cf <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	jmp	0x429ebd <mi_process_init+0xb2d>
               	nopl	(%rax)
               	addq	$-1073741824, %r13      # imm = 0xC0000000
               	je	0x429f7b <mi_process_init+0xbeb>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	callq	0x413840 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227102(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	227078(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429f00 <mi_process_init+0xb70>
               	lock
               	cmpxchgq	%rdx, 227058(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x429ef0 <mi_process_init+0xb60>
               	lock
               	addq	$1073741824, 227036(%rip) # imm = 0x40000000
                                                # 0x4615e8 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 227004(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	226982(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x429f40 <mi_process_init+0xbb0>
               	lock
               	cmpxchgq	%rdx, 226962(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x429f30 <mi_process_init+0xba0>
               	lock
               	addq	$1073741824, 226940(%rip) # imm = 0x40000000
                                                # 0x4615c8 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x429eb0 <mi_process_init+0xb20>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	jmp	0x429eb0 <mi_process_init+0xb20>
               	movl	$8, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4293a7 <mi_process_init+0x17>
               	movl	$8, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	jle	0x4293a7 <mi_process_init+0x17>
               	movq	%rax, %rbx
               	shlq	$10, %rbx
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x429fba <mi_process_init+0xc2a>
               	movq	221136(%rip), %rcx      # 0x45ff88 <os_page_size>
               	jmp	0x429feb <mi_process_init+0xc5b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x429feb <mi_process_init+0xc5b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x429feb <mi_process_init+0xc5b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rax, %rbx
               	jae	0x42a02d <mi_process_init+0xc9d>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42a00e <mi_process_init+0xc7e>
               	negq	%rcx
               	andq	%rcx, %rbx
               	jmp	0x42a02d <mi_process_init+0xc9d>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42a024 <mi_process_init+0xc94>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42a02a <mi_process_init+0xc9a>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	movb	$1, 8(%rsp)
               	leaq	8(%rsp), %rdx
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42aef0 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x4293a7 <mi_process_init+0x17>
               	movq	%rax, %r13
               	movb	8(%rsp), %al
               	movb	%al, 32(%rsp)
               	leaq	16777215(%rbx), %r12
               	movq	%r12, %r15
               	shrq	$24, %r15
               	leaq	63(%r15), %r14
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	movq	%rbp, %rdi
               	shlq	$4, %rdi
               	addq	$64, %rdi
               	callq	0x42b740 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x42a120 <mi_process_init+0xd90>
               	movq	%r15, 8(%rax)
               	movq	%rbp, 16(%rax)
               	xchgq	%r13, (%rax)
               	movl	$4294967295, 24(%rax)   # imm = 0xFFFFFFFF
               	movb	32(%rsp), %cl
               	movb	%cl, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	(%rax,%rbp,8), %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	andq	$-64, %r14
               	subq	%r15, %r14
               	jle	0x42a101 <mi_process_init+0xd71>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	shrq	$30, %r12
               	movq	$-1, %rsi
               	movq	$-1, %rdi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%r15d, %ecx
               	shlq	%cl, %rdi
               	cmpq	$63, %r14
               	cmovaq	%rsi, %rdi
               	lock
               	orq	%rdi, (%rdx,%r12,8)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 227057(%rip)      # 0x461800 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x42a151 <mi_process_init+0xdc1>
               	lock
               	subq	$1, 227042(%rip)        # 0x461800 <mi_arena_count>
               	jmp	0x42a15c <mi_process_init+0xdcc>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42b910 <_mi_os_free_ex>
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	leaq	107838(%rip), %rdi      # 0x444680 <typeinfo name for kotlin::gc::GCSchedulerData+0x1087>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	jmp	0x4293a7 <mi_process_init+0x17>
               	leaq	227048(%rip), %rdx      # 0x461840 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	cmpb	$0, 8(%rsp)
               	leaq	109976(%rip), %rax      # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	leaq	107814(%rip), %rdx      # 0x4446a0 <typeinfo name for kotlin::gc::GCSchedulerData+0x10a7>
               	cmoveq	%rax, %rdx
               	leaq	107824(%rip), %rdi      # 0x4446b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x10bc>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	jmp	0x4293a7 <mi_process_init+0x17>
               	callq	0x42be90 <_mi_os_numa_node_count_get>
               	jmp	0x429601 <mi_process_init+0x271>
               	nop

<mi_pthread_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	testq	%rdi, %rdi
               	je	0x42a278 <mi_pthread_done+0xd8>
               	movq	%rdi, %rbx
               	movq	$-1, %rcx
               	lock
               	xaddq	%rcx, 226510(%rip)      # 0x461698 <_mi_stats_main+0x118>
               	addq	$-1, %rcx
               	movq	226491(%rip), %rax      # 0x461690 <_mi_stats_main+0x110>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42a1f0 <mi_pthread_done+0x50>
               	lock
               	cmpxchgq	%rcx, 226466(%rip)      # 0x461690 <_mi_stats_main+0x110>
               	jne	0x42a1e0 <mi_pthread_done+0x40>
               	lock
               	addq	$1, 226447(%rip)        # 0x461688 <_mi_stats_main+0x108>
               	movq	2848(%rbx), %rax
               	movq	%fs:0, %rcx
               	leaq	206704(%rip), %r13      # 0x45c980 <_mi_heap_empty>
               	cmpq	%r13, %rbx
               	je	0x42a278 <mi_pthread_done+0xd8>
               	cmpq	%rcx, %rax
               	jne	0x42a278 <mi_pthread_done+0xd8>
               	leaq	216703(%rip), %rdx      # 0x45f0a0 <_mi_heap_main>
               	movq	219544(%rip), %rcx      # 0x45fbc0 <_mi_heap_main+0xb20>
               	cmpq	%rax, %rcx
               	movq	%r13, %rsi
               	cmoveq	%rdx, %rsi
               	testq	%rcx, %rcx
               	cmoveq	%rdx, %rsi
               	movq	$-80, %r12
               	movq	%rsi, %fs:(%r12)
               	movl	220469(%rip), %edi      # 0x45ff80 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a255 <mi_pthread_done+0xb5>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	(%rbx), %rax
               	movq	16(%rax), %r15
               	cmpq	%r13, %r15
               	je	0x42a278 <mi_pthread_done+0xd8>
               	movq	(%r15), %rax
               	movq	24(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x42a74d <mi_pthread_done+0x5ad>
               	movq	%r15, 8(%rsp)
               	jmp	0x42a299 <mi_pthread_done+0xf9>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r14, %rdi
               	callq	0x430430 <mi_free>
               	nop
               	testq	%rbx, %rbx
               	je	0x42a74d <mi_pthread_done+0x5ad>
               	movq	%rbx, %r14
               	movq	3040(%rbx), %rbx
               	cmpq	%r15, %r14
               	je	0x42a290 <mi_pthread_done+0xf0>
               	testq	%r14, %r14
               	je	0x42a290 <mi_pthread_done+0xf0>
               	cmpq	%r13, %r14
               	je	0x42a290 <mi_pthread_done+0xf0>
               	movq	%rbx, 32(%rsp)
               	movq	(%r14), %rax
               	movq	16(%rax), %rbp
               	cmpq	%r14, %rbp
               	je	0x42a6be <mi_pthread_done+0x51e>
               	cmpq	$0, 3016(%r14)
               	je	0x42a6cb <mi_pthread_done+0x52b>
               	movq	2840(%r14), %rax
               	testq	%rax, %rax
               	je	0x42a310 <mi_pthread_done+0x170>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a2e0 <mi_pthread_done+0x140>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f480 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a300 <mi_pthread_done+0x160>
               	leaq	1040(%rbp), %r10
               	leaq	1016(%rbp), %r12
               	leaq	120(%rbp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	24(%rbp), %rax
               	movq	%rax, 24(%rsp)
               	xorl	%edi, %edi
               	jmp	0x42a376 <mi_pthread_done+0x1d6>
               	nopw	(%rax,%rax)
               	xorl	%edx, %edx
               	movq	3016(%rbp), %rax
               	addq	%rdx, %rax
               	movq	%rax, 3016(%rbp)
               	movq	3016(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 3016(%r14)
               	addq	$1, %rdi
               	addq	$24, %r12
               	cmpq	$75, %rdi
               	je	0x42a633 <mi_pthread_done+0x493>
               	leaq	(,%rdi,8), %rax
               	leaq	(%rax,%rax,2), %rcx
               	movq	1040(%r14,%rcx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a340 <mi_pthread_done+0x1a0>
               	leaq	(%rcx,%rbp), %r8
               	addq	$1040, %r8              # imm = 0x410
               	leaq	(%r14,%rcx), %r9
               	addq	$1040, %r9              # imm = 0x410
               	xorl	%edx, %edx
               	jmp	0x42a3bd <mi_pthread_done+0x21d>
               	addq	$1, %rdx
               	movq	48(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x42a3f0 <mi_pthread_done+0x250>
               	movq	%rbp, 40(%rbx)
               	movq	32(%rbx), %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	je	0x42a3b0 <mi_pthread_done+0x210>
               	cmpl	$3, %esi
               	je	0x42a3b0 <mi_pthread_done+0x210>
               	cmpl	$1, %esi
               	je	0x42a3e7 <mi_pthread_done+0x247>
               	movq	%rax, %rsi
               	andq	$-4, %rsi
               	lock
               	cmpxchgq	%rsi, 32(%rbx)
               	jne	0x42a3c1 <mi_pthread_done+0x221>
               	jmp	0x42a3b0 <mi_pthread_done+0x210>
               	pause
               	jmp	0x42a3c1 <mi_pthread_done+0x221>
               	nop
               	leaq	(%rdi,%rdi,2), %rbx
               	leaq	1048(,%rbx,8), %rax
               	addq	%rbp, %rax
               	movq	1048(%rbp,%rbx,8), %rsi
               	movq	(%r9), %r15
               	testq	%rsi, %rsi
               	je	0x42a430 <mi_pthread_done+0x290>
               	movq	%r15, 48(%rsi)
               	movq	%rsi, 56(%r15)
               	movq	1048(%r14,%rbx,8), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x42a342 <mi_pthread_done+0x1a2>
               	nopl	(%rax,%rax)
               	movq	%r15, (%r8)
               	movq	1048(%r14,%rcx), %rsi
               	movq	%rsi, (%rax)
               	movq	1056(%rbp,%rcx), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42a342 <mi_pthread_done+0x1a2>
               	testq	%r15, %r15
               	leaq	111652(%rip), %rcx      # 0x445880 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r15, 8(%rbp,%r11,8)
               	je	0x42a342 <mi_pthread_done+0x1a2>
               	cmpq	$9, %rax
               	jae	0x42a480 <mi_pthread_done+0x2e0>
               	xorl	%ecx, %ecx
               	jmp	0x42a532 <mi_pthread_done+0x392>
               	cmpq	$64, %rax
               	ja	0x42a490 <mi_pthread_done+0x2f0>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42a4ab <mi_pthread_done+0x30b>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	movq	%r12, %rsi
               	nop
               	movq	16(%rsi), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42a510 <mi_pthread_done+0x370>
               	cmpq	$71, %rax
               	ja	0x42a4e0 <mi_pthread_done+0x340>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42a510 <mi_pthread_done+0x370>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42a510 <mi_pthread_done+0x370>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r9
               	movl	%r9d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r9,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%r10, %rsi
               	jbe	0x42a51e <mi_pthread_done+0x37e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r8b
               	je	0x42a4b0 <mi_pthread_done+0x310>
               	leaq	1(%rbx), %rcx
               	cmpq	%r11, %rbx
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42a342 <mi_pthread_done+0x1a2>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42a620 <mi_pthread_done+0x480>
               	movq	%r8, %r9
               	andq	$-4, %r9
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r9), %rbx
               	movq	%rbx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	cmpq	$12, %rbx
               	jae	0x42a575 <mi_pthread_done+0x3d5>
               	xorl	%ebx, %ebx
               	jmp	0x42a5d2 <mi_pthread_done+0x432>
               	movq	16(%rsp), %rbx
               	leaq	(%rbx,%rcx,8), %r13
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbx,8)
               	movdqu	%xmm0, -96(%r13,%rbx,8)
               	movdqu	%xmm0, -80(%r13,%rbx,8)
               	movdqu	%xmm0, -64(%r13,%rbx,8)
               	movdqu	%xmm0, -48(%r13,%rbx,8)
               	movdqu	%xmm0, -32(%r13,%rbx,8)
               	movdqu	%xmm0, -16(%r13,%rbx,8)
               	movdqu	%xmm0, (%r13,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42a590 <mi_pthread_done+0x3f0>
               	testq	%rsi, %rsi
               	je	0x42a602 <mi_pthread_done+0x462>
               	addq	%rcx, %rbx
               	movq	24(%rsp), %rax
               	leaq	(%rax,%rbx,8), %rax
               	negq	%rsi
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x42a5f0 <mi_pthread_done+0x450>
               	cmpq	%r9, %r8
               	leaq	205684(%rip), %r13      # 0x45c980 <_mi_heap_empty>
               	je	0x42a342 <mi_pthread_done+0x1a2>
               	addq	%r9, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, 8(%rbp,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42a620 <mi_pthread_done+0x480>
               	jmp	0x42a342 <mi_pthread_done+0x1a2>
               	movq	2840(%r14), %rax
               	movq	8(%rsp), %r15
               	movq	$-80, %r12
               	nopw	%cs:(%rax,%rax)
               	testq	%rax, %rax
               	je	0x42a680 <mi_pthread_done+0x4e0>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42a650 <mi_pthread_done+0x4b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f480 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42a670 <mi_pthread_done+0x4d0>
               	leaq	8(%r14), %rdi
               	movl	$1032, %edx             # imm = 0x408
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	1040(%r14), %rdi
               	movl	$1800, %edx             # imm = 0x708
               	leaq	206573(%rip), %rsi      # 0x45cd90 <_mi_heap_empty+0x410>
               	callq	0x4136f0 <memcpy@plt>
               	xorl	%eax, %eax
               	xchgq	%rax, 2840(%r14)
               	movq	$0, 3016(%r14)
               	jmp	0x42a6cb <mi_pthread_done+0x52b>
               	movq	%r14, %rdi
               	movl	$2, %esi
               	callq	0x42c590 <mi_heap_collect_ex>
               	movq	(%r14), %rax
               	movq	16(%rax), %rsi
               	cmpq	%r14, %rsi
               	movq	32(%rsp), %rbx
               	je	0x42a290 <mi_pthread_done+0xf0>
               	cmpq	%r14, %fs:(%r12)
               	jne	0x42a6ff <mi_pthread_done+0x55f>
               	movq	%rsi, %fs:(%r12)
               	movl	219278(%rip), %edi      # 0x45ff80 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a6fc <mi_pthread_done+0x55c>
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	(%r14), %rax
               	addq	$24, %rax
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	nopl	(%rax,%rax)
               	movq	%rdx, %rcx
               	movq	(%rsi), %rdx
               	cmpq	%r14, %rdx
               	je	0x42a727 <mi_pthread_done+0x587>
               	leaq	3040(%rdx), %rsi
               	testq	%rdx, %rdx
               	jne	0x42a710 <mi_pthread_done+0x570>
               	cmpq	%r14, %rdx
               	jne	0x42a287 <mi_pthread_done+0xe7>
               	leaq	3040(%rcx), %rdx
               	testq	%rcx, %rcx
               	movq	3040(%r14), %rcx
               	cmoveq	%rax, %rdx
               	movq	%rcx, (%rdx)
               	jmp	0x42a287 <mi_pthread_done+0xe7>
               	leaq	215372(%rip), %rax      # 0x45f0a0 <_mi_heap_main>
               	cmpq	%rax, %r15
               	je	0x42a795 <mi_pthread_done+0x5f5>
               	movq	%r15, %rdi
               	movl	$2, %esi
               	callq	0x42c590 <mi_heap_collect_ex>
               	movq	(%r15), %rdi
               	addq	$176, %rdi
               	callq	0x42c0a0 <mi_stats_merge_from>
               	movl	$3808, %esi             # imm = 0xEE0
               	movq	%r15, %rdi
               	movl	$1, %edx
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42b910 <_mi_os_free_ex>
               	movq	(%r15), %rdi
               	addq	$176, %rdi
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42c0a0 <mi_stats_merge_from>
               	nopw	%cs:(%rax,%rax)

<_mi_verbose_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42a80c <_mi_verbose_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	movl	$2, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a8ca <_mi_verbose_message+0x10a>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42a8ca <_mi_verbose_message+0x10a>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42a8ca <_mi_verbose_message+0x10a>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	225708(%rip), %r12      # 0x461a48 <mi_out_arg>
               	movq	225709(%rip), %rax      # 0x461a50 <mi_out_default>
               	testq	%rax, %rax
               	leaq	5075(%rip), %rbx        # 0x42bc80 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	107013(%rip), %rdi      # 0x444abd <typeinfo name for kotlin::gc::GCSchedulerData+0x14c4>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<mi_thread_init>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	callq	0x429390 <mi_process_init>
               	movq	$-80, %r14
               	leaq	204936(%rip), %rax      # 0x45c980 <_mi_heap_empty>
               	cmpq	%rax, %fs:(%r14)
               	je	0x42a904 <mi_thread_init+0x24>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	217781(%rip), %rax      # 0x45fbc0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42a922 <mi_thread_init+0x42>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42a9a6 <mi_thread_init+0xc6>
               	cmpq	$0, 217758(%rip)        # 0x45fbc8 <_mi_heap_main+0xb28>
               	jne	0x42a980 <mi_thread_init+0xa0>
               	movq	%fs:0, %rax
               	movq	%rax, 217732(%rip)      # 0x45fbc0 <_mi_heap_main+0xb20>
               	leaq	214877(%rip), %rbx      # 0x45f0a0 <_mi_heap_main>
               	leaq	-9370(%rip), %rdi       # 0x4284b0 <mi_heap_main_init>
               	callq	0x428520 <_os_random_weak>
               	movq	%rax, 217714(%rip)      # 0x45fbc8 <_mi_heap_main+0xb28>
               	leaq	217731(%rip), %rdi      # 0x45fbe0 <_mi_heap_main+0xb40>
               	callq	0x428630 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 217695(%rip)      # 0x45fbd0 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 217688(%rip)      # 0x45fbd8 <_mi_heap_main+0xb38>
               	leaq	214809(%rip), %rax      # 0x45f0a0 <_mi_heap_main>
               	movq	%rax, %fs:(%r14)
               	movl	218607(%rip), %edi      # 0x45ff80 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42aa81 <mi_thread_init+0x1a1>
               	leaq	214783(%rip), %rsi      # 0x45f0a0 <_mi_heap_main>
               	jmp	0x42aa7c <mi_thread_init+0x19c>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b740 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42a9ce <mi_thread_init+0xee>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42b740 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x42aabf <mi_thread_init+0x1df>
               	leaq	3056(%rbx), %r15
               	leaq	204708(%rip), %rsi      # 0x45c980 <_mi_heap_empty>
               	movl	$3056, %edx             # imm = 0xBF0
               	movq	%rbx, %rdi
               	callq	0x4136f0 <memcpy@plt>
               	movq	%fs:0, %rax
               	movq	%rax, 2848(%rbx)
               	leaq	2880(%rbx), %rdi
               	callq	0x428630 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	orq	$1, %rax
               	movq	%rax, 2856(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 2864(%rbx)
               	movq	%rbx, %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	movq	%rax, 2872(%rbx)
               	movq	%r15, (%rbx)
               	movq	%rbx, 3072(%rbx)
               	movq	%rbx, 3080(%rbx)
               	leaq	3232(%rbx), %rax
               	movq	%rax, 3200(%rbx)
               	leaq	3216(%rbx), %rcx
               	movq	%rcx, 3208(%rbx)
               	movq	%rax, 3224(%rbx)
               	movq	%rbx, %fs:(%r14)
               	movl	218380(%rip), %edi      # 0x45ff80 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42aa81 <mi_thread_init+0x1a1>
               	movq	%rbx, %rsi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 224265(%rip)      # 0x461698 <_mi_stats_main+0x118>
               	leaq	1(%rcx), %rdx
               	movq	224246(%rip), %rax      # 0x461690 <_mi_stats_main+0x110>
               	nopw	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jg	0x42aab0 <mi_thread_init+0x1d0>
               	lock
               	cmpxchgq	%rdx, 224226(%rip)      # 0x461690 <_mi_stats_main+0x110>
               	jne	0x42aaa0 <mi_thread_init+0x1c0>
               	lock
               	addq	$1, 224199(%rip)        # 0x461680 <_mi_stats_main+0x100>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	106410(%rip), %rsi      # 0x444a70 <typeinfo name for kotlin::gc::GCSchedulerData+0x1477>
               	movl	$3808, %edx             # imm = 0xEE0
               	movl	$12, %edi
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	jmp	0x42aa81 <mi_thread_init+0x1a1>
               	nopl	(%rax)

<mi_option_get>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%edi, %eax
               	leaq	(%rax,%rax,2), %rbx
               	leaq	218274(%rip), %r13      # 0x45ffa0 <options>
               	leaq	(,%rbx,8), %r12
               	addq	%r13, %r12
               	cmpl	$0, 8(%r13,%rbx,8)
               	je	0x42ab27 <mi_option_get+0x47>
               	movq	(%r12), %rax
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	8(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 80(%rsp)
               	leaq	105902(%rip), %rsi      # 0x4448f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x12f8>
               	leaq	80(%rsp), %r14
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 144(%rsp)
               	movq	16(%r13,%rbx,8), %rsi
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413870 <strncat@plt>
               	movb	$0, 144(%rsp)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, %rcx
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x42ad40 <mi_option_get+0x260>
               	movq	209977(%rip), %rax      # 0x45dfd0 <write+0x45dfd0>
               	movq	(%rax), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	je	0x42ad40 <mi_option_get+0x260>
               	movb	80(%rsp), %al
               	movb	%al, 15(%rsp)
               	testb	%al, %al
               	je	0x42ac80 <mi_option_get+0x1a0>
               	xorl	%ecx, %ecx
               	jmp	0x42abe1 <mi_option_get+0x101>
               	movq	32(%rsp), %rax
               	cmpb	$61, (%rdx,%rax)
               	je	0x42acd5 <mi_option_get+0x1f5>
               	movq	56(%rsp), %rcx
               	addq	$1, %rcx
               	cmpq	$256, %rcx              # imm = 0x100
               	je	0x42ad40 <mi_option_get+0x260>
               	movq	40(%rsp), %rax
               	movq	(%rax,%rcx,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ad40 <mi_option_get+0x260>
               	movq	%rcx, 56(%rsp)
               	xorl	%r14d, %r14d
               	movb	15(%rsp), %al
               	movl	%eax, %esi
               	movq	32(%rsp), %r15
               	movq	%rdx, 64(%rsp)
               	testq	%r15, %r15
               	je	0x42ac63 <mi_option_get+0x183>
               	movzbl	(%rdx,%r14), %ebp
               	testb	%bpl, %bpl
               	je	0x42ac63 <mi_option_get+0x183>
               	movsbq	%bpl, %rax
               	movq	%rax, 72(%rsp)
               	movl	%esi, 52(%rsp)
               	callq	0x413880 <__ctype_toupper_loc@plt>
               	movl	52(%rsp), %esi
               	movq	(%rax), %rax
               	movsbq	%sil, %rcx
               	movq	72(%rsp), %rdx
               	movl	(%rax,%rdx,4), %edx
               	cmpl	%edx, (%rax,%rcx,4)
               	movq	64(%rsp), %rdx
               	jne	0x42ac72 <mi_option_get+0x192>
               	addq	$-1, %r15
               	movzbl	81(%rsp,%r14), %esi
               	addq	$1, %r14
               	testb	%sil, %sil
               	jne	0x42ac0b <mi_option_get+0x12b>
               	addq	%rdx, %r14
               	xorl	%esi, %esi
               	jmp	0x42ac66 <mi_option_get+0x186>
               	addq	%rdx, %r14
               	testq	%r15, %r15
               	je	0x42abbc <mi_option_get+0xdc>
               	movb	(%r14), %bpl
               	cmpb	%bpl, %sil
               	je	0x42abbc <mi_option_get+0xdc>
               	jmp	0x42abcb <mi_option_get+0xeb>
               	xorl	%eax, %eax
               	jmp	0x42ac94 <mi_option_get+0x1b4>
               	addq	$2, %rax
               	cmpq	$256, %rax              # imm = 0x100
               	je	0x42ad40 <mi_option_get+0x260>
               	movq	40(%rsp), %rcx
               	movq	(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ad40 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42acb6 <mi_option_get+0x1d6>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	je	0x42acd5 <mi_option_get+0x1f5>
               	movq	40(%rsp), %rcx
               	movq	8(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42ad40 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42ac84 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	jne	0x42ac84 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rax
               	leaq	(%rdx,%rax), %rsi
               	addq	$1, %rsi
               	movb	$0, 160(%rsp)
               	leaq	160(%rsp), %r14
               	movl	$64, %r15d
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 224(%rsp)
               	movq	%r14, %rdi
               	callq	0x4136e0 <strlen@plt>
               	cmpq	$64, %rax
               	cmovbq	%rax, %r15
               	testq	%r15, %r15
               	je	0x42adeb <mi_option_get+0x30b>
               	callq	0x413880 <__ctype_toupper_loc@plt>
               	leaq	-1(%r15), %rdx
               	movl	%r15d, %r8d
               	andl	$3, %r8d
               	cmpq	$3, %rdx
               	jae	0x42ad5d <mi_option_get+0x27d>
               	xorl	%edx, %edx
               	jmp	0x42adba <mi_option_get+0x2da>
               	cmpb	$1, 223865(%rip)        # 0x4617c0 <os_preloading>
               	jne	0x42ab11 <mi_option_get+0x31>
               	movq	24(%rsp), %rax
               	movl	$1, (%rax)
               	jmp	0x42ab11 <mi_option_get+0x31>
               	movl	%r15d, %esi
               	andl	$124, %esi
               	xorl	%edx, %edx
               	movq	(%rax), %rcx
               	movsbq	160(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 80(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	161(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 81(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	162(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 82(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	163(%rsp,%rdx), %rdi
               	movl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 83(%rsp,%rdx)
               	addq	$4, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x42ad65 <mi_option_get+0x285>
               	testq	%r8, %r8
               	je	0x42adeb <mi_option_get+0x30b>
               	leaq	(%rsp,%rdx), %rsi
               	addq	$80, %rsi
               	addq	%rsp, %rdx
               	addq	$160, %rdx
               	xorl	%edi, %edi
               	movq	(%rax), %rbp
               	movsbq	(%rdx,%rdi), %rcx
               	movl	(%rbp,%rcx,4), %ecx
               	movb	%cl, (%rsi,%rdi)
               	addq	$1, %rdi
               	cmpq	%rdi, %r8
               	jne	0x42add3 <mi_option_get+0x2f3>
               	movb	$0, 80(%rsp,%r15)
               	cmpb	$0, 80(%rsp)
               	je	0x42ae0e <mi_option_get+0x32e>
               	leaq	105212(%rip), %rdi      # 0x4448fb <typeinfo name for kotlin::gc::GCSchedulerData+0x1302>
               	leaq	80(%rsp), %rsi
               	callq	0x413890 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42ae26 <mi_option_get+0x346>
               	movq	$1, (%r12)
               	movq	24(%rsp), %rax
               	movl	$2, (%rax)
               	jmp	0x42ab11 <mi_option_get+0x31>
               	leaq	105180(%rip), %rdi      # 0x444909 <typeinfo name for kotlin::gc::GCSchedulerData+0x1310>
               	leaq	80(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x413890 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42ae49 <mi_option_get+0x369>
               	movq	$0, (%r12)
               	jmp	0x42ae16 <mi_option_get+0x336>
               	movq	%r14, 16(%rsp)
               	leaq	16(%rsp), %rsi
               	movq	%r14, %rdi
               	movl	$10, %edx
               	callq	0x4138a0 <strtol@plt>
               	cmpl	$8, 12(%r13,%rbx,8)
               	movq	16(%rsp), %rcx
               	jne	0x42aead <mi_option_get+0x3cd>
               	movb	(%rcx), %dl
               	cmpb	$71, %dl
               	je	0x42ae8a <mi_option_get+0x3aa>
               	cmpb	$77, %dl
               	je	0x42ae90 <mi_option_get+0x3b0>
               	cmpb	$75, %dl
               	je	0x42ae94 <mi_option_get+0x3b4>
               	addq	$1023, %rax             # imm = 0x3FF
               	shrq	$10, %rax
               	jmp	0x42ae9f <mi_option_get+0x3bf>
               	shlq	$20, %rax
               	jmp	0x42ae94 <mi_option_get+0x3b4>
               	shlq	$10, %rax
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	movb	(%rcx), %dl
               	cmpb	$66, %dl
               	jne	0x42aead <mi_option_get+0x3cd>
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	cmpb	$0, (%rcx)
               	je	0x42aeda <mi_option_get+0x3fa>
               	leaq	16(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	(%rax), %rsi
               	leaq	105041(%rip), %rdi      # 0x444918 <typeinfo name for kotlin::gc::GCSchedulerData+0x131f>
               	leaq	80(%rsp), %rdx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movl	$1, %eax
               	jmp	0x42aee3 <mi_option_get+0x403>
               	movq	%rax, (%r12)
               	movl	$2, %eax
               	movq	24(%rsp), %rcx
               	movl	%eax, (%rcx)
               	jmp	0x42ab11 <mi_option_get+0x31>
               	nop

<_mi_os_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42b416 <_mi_os_alloc_aligned+0x526>
               	movq	%rdx, %r15
               	movl	%esi, %r14d
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42af1c <_mi_os_alloc_aligned+0x2c>
               	movq	217198(%rip), %rcx      # 0x45ff88 <os_page_size>
               	jmp	0x42af4d <_mi_os_alloc_aligned+0x5d>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rdi          # imm = 0x200000
               	jb	0x42af4d <_mi_os_alloc_aligned+0x5d>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x42af4d <_mi_os_alloc_aligned+0x5d>
               	cmpq	$33554432, %rdi         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rdi, %rax
               	jbe	0x42af8f <_mi_os_alloc_aligned+0x9f>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rdi
               	addq	$-1, %rdi
               	testq	%rax, %rcx
               	jne	0x42af70 <_mi_os_alloc_aligned+0x80>
               	negq	%rcx
               	andq	%rcx, %rdi
               	jmp	0x42af8f <_mi_os_alloc_aligned+0x9f>
               	movq	%rdi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42af86 <_mi_os_alloc_aligned+0x96>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42af8c <_mi_os_alloc_aligned+0x9c>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rdi
               	movq	217074(%rip), %rcx      # 0x45ff88 <os_page_size>
               	movq	%rcx, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %r8 # imm = 0x5555555555555555
               	andq	%r8, %rax
               	movq	%rcx, %rdx
               	subq	%rax, %rdx
               	movabsq	$3689348814741910323, %rbp # imm = 0x3333333333333333
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rsi
               	shrq	$4, %rsi
               	addq	%rdx, %rsi
               	movabsq	$1085102592571150095, %r9 # imm = 0xF0F0F0F0F0F0F0F
               	andq	%r9, %rsi
               	movabsq	$72340172838076673, %r10 # imm = 0x101010101010101
               	imulq	%r10, %rsi
               	shrq	$56, %rsi
               	leaq	4194303(%rcx), %r13
               	cmpq	$1, %rsi
               	ja	0x42b01f <_mi_os_alloc_aligned+0x12f>
               	movq	%rcx, %rax
               	negq	%rax
               	andq	%rax, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	je	0x42b056 <_mi_os_alloc_aligned+0x166>
               	movb	(%r15), %al
               	movb	%al, 3(%rsp)
               	movb	$0, (%r15)
               	jmp	0x42b05d <_mi_os_alloc_aligned+0x16d>
               	movq	%r13, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b042 <_mi_os_alloc_aligned+0x152>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42b012 <_mi_os_alloc_aligned+0x122>
               	jmp	0x42b056 <_mi_os_alloc_aligned+0x166>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42b012 <_mi_os_alloc_aligned+0x122>
               	leaq	3(%rsp), %r15
               	xorl	%eax, %eax
               	testb	%al, %al
               	setne	%r12b
               	xorl	%ebx, %ebx
               	cmpq	%r13, %rcx
               	ja	0x42b418 <_mi_os_alloc_aligned+0x528>
               	movq	%r13, %rax
               	shrq	%rax
               	andq	%r8, %rax
               	movq	%r13, %rdx
               	subq	%rax, %rdx
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rax
               	shrq	$4, %rax
               	addq	%rdx, %rax
               	andq	%r9, %rax
               	imulq	%r10, %rax
               	shrq	$56, %rax
               	cmpl	$1, %eax
               	ja	0x42b418 <_mi_os_alloc_aligned+0x528>
               	leaq	-1(%rcx), %rbp
               	addq	%rdi, %rbp
               	cmpl	$1, %esi
               	ja	0x42b0c7 <_mi_os_alloc_aligned+0x1d7>
               	negq	%rcx
               	andq	%rcx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42b0fa <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b416 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b0e8 <_mi_os_alloc_aligned+0x1f8>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42b0fa <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42b416 <_mi_os_alloc_aligned+0x526>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	je	0x42b416 <_mi_os_alloc_aligned+0x526>
               	andb	%r14b, %r12b
               	movzbl	%r14b, %eax
               	leal	(%rax,%rax,2), %ebx
               	cmpb	$1, 256349(%rip)        # 0x469a68 <large_os_page_size>
               	movl	%ebx, 4(%rsp)
               	jne	0x42b150 <_mi_os_alloc_aligned+0x260>
               	movl	$6, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b150 <_mi_os_alloc_aligned+0x260>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b150 <_mi_os_alloc_aligned+0x260>
               	movl	%r12d, %eax
               	xorb	$1, %al
               	jne	0x42b150 <_mi_os_alloc_aligned+0x260>
               	movq	256334(%rip), %rax      # 0x469a88 <mi_unix_mmap.large_page_try_ok>
               	testq	%rax, %rax
               	je	0x42b440 <_mi_os_alloc_aligned+0x550>
               	leaq	-1(%rax), %rcx
               	lock
               	cmpxchgq	%rcx, 256312(%rip)      # 0x469a88 <mi_unix_mmap.large_page_try_ok>
               	movb	$0, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42bd70 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testb	%r12b, %r12b
               	je	0x42b1aa <_mi_os_alloc_aligned+0x2ba>
               	cmpb	$1, 256243(%rip)        # 0x469a68 <large_os_page_size>
               	jne	0x42b1aa <_mi_os_alloc_aligned+0x2ba>
               	movl	$6, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b1aa <_mi_os_alloc_aligned+0x2ba>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42b1aa <_mi_os_alloc_aligned+0x2ba>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	$14, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42b1aa <_mi_os_alloc_aligned+0x2ba>
               	movb	$1, (%r15)
               	testq	%rbx, %rbx
               	je	0x42b218 <_mi_os_alloc_aligned+0x328>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 222237(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	%rbp, %rcx
               	movq	222219(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b1e0 <_mi_os_alloc_aligned+0x2f0>
               	lock
               	cmpxchgq	%rcx, 222194(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42b1d0 <_mi_os_alloc_aligned+0x2e0>
               	testq	%rbp, %rbp
               	jle	0x42b240 <_mi_os_alloc_aligned+0x350>
               	lock
               	addq	%rbp, 222163(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	testb	%r14b, %r14b
               	jne	0x42b253 <_mi_os_alloc_aligned+0x363>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	je	0x42b29d <_mi_os_alloc_aligned+0x3ad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r13
               	testq	%rdx, %rdx
               	jne	0x42b2ad <_mi_os_alloc_aligned+0x3bd>
               	jmp	0x42b418 <_mi_os_alloc_aligned+0x528>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	movzbl	%r12b, %r9d
               	leaq	103651(%rip), %rdi      # 0x44470d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%rbp, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	jmp	0x42b418 <_mi_os_alloc_aligned+0x528>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 222074(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b1f2 <_mi_os_alloc_aligned+0x302>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 222105(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	addq	%rbp, %rcx
               	movq	222087(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b280 <_mi_os_alloc_aligned+0x390>
               	lock
               	cmpxchgq	%rcx, 222066(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42b270 <_mi_os_alloc_aligned+0x380>
               	testq	%rbp, %rbp
               	jle	0x42b2ff <_mi_os_alloc_aligned+0x40f>
               	lock
               	addq	%rbp, 222035(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b202 <_mi_os_alloc_aligned+0x312>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r13d
               	testq	%rdx, %rdx
               	je	0x42b418 <_mi_os_alloc_aligned+0x528>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbp, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b32a <_mi_os_alloc_aligned+0x43a>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221987(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	subq	%rbp, %rsi
               	movq	221969(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42b2f0 <_mi_os_alloc_aligned+0x400>
               	lock
               	cmpxchgq	%rsi, 221954(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42b2e0 <_mi_os_alloc_aligned+0x3f0>
               	testq	%rbp, %rbp
               	js	0x42b322 <_mi_os_alloc_aligned+0x432>
               	lock
               	addq	%rbp, 221931(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	jmp	0x42b32a <_mi_os_alloc_aligned+0x43a>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 221915(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42b202 <_mi_os_alloc_aligned+0x312>
               	jmp	0x42b29d <_mi_os_alloc_aligned+0x3ad>
               	lock
               	addq	%rdx, 221878(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221858(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	subq	%rbp, %rsi
               	movq	221840(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b350 <_mi_os_alloc_aligned+0x460>
               	lock
               	cmpxchgq	%rsi, 221826(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42b340 <_mi_os_alloc_aligned+0x450>
               	testq	%rbp, %rbp
               	js	0x42b42a <_mi_os_alloc_aligned+0x53a>
               	lock
               	addq	%rbp, 221799(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42b389 <_mi_os_alloc_aligned+0x499>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	103254(%rip), %rdi      # 0x4446cf <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	movq	%rbp, %rcx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movq	%r13, %rax
               	notq	%rax
               	cmpq	%rax, %rbp
               	jae	0x42b416 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %r12
               	addq	%r13, %r12
               	je	0x42b416 <_mi_os_alloc_aligned+0x526>
               	cmpb	$1, 255681(%rip)        # 0x469a68 <large_os_page_size>
               	jne	0x42b3b3 <_mi_os_alloc_aligned+0x4c3>
               	movl	$6, %edi
               	callq	0x42aae0 <mi_option_get>
               	movb	$0, (%r15)
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42bd70 <mi_unix_mmapx>
               	testq	%rax, %rax
               	je	0x42b4c8 <_mi_os_alloc_aligned+0x5d8>
               	movq	%rax, %r15
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 221685(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	%r12, %rcx
               	movq	221667(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b400 <_mi_os_alloc_aligned+0x510>
               	lock
               	cmpxchgq	%rcx, 221650(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42b3f0 <_mi_os_alloc_aligned+0x500>
               	testq	%r12, %r12
               	jle	0x42b4e8 <_mi_os_alloc_aligned+0x5f8>
               	lock
               	addq	%r12, 221615(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	jmp	0x42b4f6 <_mi_os_alloc_aligned+0x606>
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 221582(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b389 <_mi_os_alloc_aligned+0x499>
               	jmp	0x42b366 <_mi_os_alloc_aligned+0x476>
               	testl	$1073741823, %ebp       # imm = 0x3FFFFFFF
               	jne	0x42b456 <_mi_os_alloc_aligned+0x566>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	cmpb	$1, 255548(%rip)        # 0x469a90 <mi_unix_mmap.mi_huge_pages_available>
               	jne	0x42b45b <_mi_os_alloc_aligned+0x56b>
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movb	$1, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	callq	0x42bd70 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b1af <_mi_os_alloc_aligned+0x2bf>
               	movb	$1, 255505(%rip)        # 0x469a90 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	103144(%rip), %rdi      # 0x444775 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	callq	0x42bd70 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42b1af <_mi_os_alloc_aligned+0x2bf>
               	movq	$10, 255433(%rip)       # 0x469a88 <mi_unix_mmap.large_page_try_ok>
               	movl	4(%rsp), %ebx
               	jmp	0x42b150 <_mi_os_alloc_aligned+0x260>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	102967(%rip), %rdi      # 0x44470d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%r12, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	jmp	0x42b234 <_mi_os_alloc_aligned+0x344>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 221394(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42b53e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 221425(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	addq	%r12, %rcx
               	movq	221407(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x42b521 <_mi_os_alloc_aligned+0x631>
               	lock
               	cmpxchgq	%rcx, 221393(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42b511 <_mi_os_alloc_aligned+0x621>
               	testq	%r12, %r12
               	jle	0x42b530 <_mi_os_alloc_aligned+0x640>
               	lock
               	addq	%r12, 221362(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	jmp	0x42b53e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 221354(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	leaq	(%r15,%r13), %rax
               	addq	$-1, %rax
               	negq	%r13
               	andq	%rax, %r13
               	movq	%r13, %rbx
               	subq	%r15, %rbx
               	movq	215599(%rip), %rcx      # 0x45ff88 <os_page_size>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x42b571 <_mi_os_alloc_aligned+0x681>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x42b590 <_mi_os_alloc_aligned+0x6a0>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b587 <_mi_os_alloc_aligned+0x697>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b58d <_mi_os_alloc_aligned+0x69d>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	subq	%rbx, %r12
               	subq	%rbp, %r12
               	testq	%rbx, %rbx
               	je	0x42b659 <_mi_os_alloc_aligned+0x769>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b5f4 <_mi_os_alloc_aligned+0x704>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221237(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	221219(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b5dd <_mi_os_alloc_aligned+0x6ed>
               	lock
               	cmpxchgq	%rsi, 221205(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42b5cd <_mi_os_alloc_aligned+0x6dd>
               	testq	%rbx, %rbx
               	js	0x42b5ec <_mi_os_alloc_aligned+0x6fc>
               	lock
               	addq	%rbx, 221182(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	jmp	0x42b5f4 <_mi_os_alloc_aligned+0x704>
               	lock
               	addq	%rdx, 221164(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221144(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	221126(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b61a <_mi_os_alloc_aligned+0x72a>
               	lock
               	cmpxchgq	%rsi, 221112(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42b60a <_mi_os_alloc_aligned+0x71a>
               	testq	%rbx, %rbx
               	js	0x42b629 <_mi_os_alloc_aligned+0x739>
               	lock
               	addq	%rbx, 221089(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	jmp	0x42b631 <_mi_os_alloc_aligned+0x741>
               	lock
               	addq	%rdx, 221071(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42b659 <_mi_os_alloc_aligned+0x769>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	102534(%rip), %rdi      # 0x4446cf <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	testq	%r12, %r12
               	je	0x42b72f <_mi_os_alloc_aligned+0x83f>
               	testq	%r13, %r13
               	je	0x42b72f <_mi_os_alloc_aligned+0x83f>
               	addq	%r13, %rbp
               	movq	%rbp, %rdi
               	movq	%r12, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%r12, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42b6c3 <_mi_os_alloc_aligned+0x7d3>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 221030(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	subq	%r12, %rsi
               	movq	221012(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42b6ac <_mi_os_alloc_aligned+0x7bc>
               	lock
               	cmpxchgq	%rsi, 220998(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42b69c <_mi_os_alloc_aligned+0x7ac>
               	testq	%r12, %r12
               	js	0x42b6bb <_mi_os_alloc_aligned+0x7cb>
               	lock
               	addq	%r12, 220975(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	jmp	0x42b6c3 <_mi_os_alloc_aligned+0x7d3>
               	lock
               	addq	%rdx, 220957(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 220937(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	subq	%r12, %rsi
               	movq	220919(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42b6e9 <_mi_os_alloc_aligned+0x7f9>
               	lock
               	cmpxchgq	%rsi, 220905(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42b6d9 <_mi_os_alloc_aligned+0x7e9>
               	testq	%r12, %r12
               	js	0x42b6f8 <_mi_os_alloc_aligned+0x808>
               	lock
               	addq	%r12, 220882(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	jmp	0x42b700 <_mi_os_alloc_aligned+0x810>
               	lock
               	addq	%rdx, 220864(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	movq	%r13, %rbx
               	cmpl	$-1, %ecx
               	jne	0x42b418 <_mi_os_alloc_aligned+0x528>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	102320(%rip), %rdi      # 0x4446cf <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movq	%r13, %rbx
               	jmp	0x42b418 <_mi_os_alloc_aligned+0x528>
               	nopw	(%rax,%rax)

<_mi_os_alloc>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42b75a <_mi_os_alloc+0x1a>
               	movq	215088(%rip), %rcx      # 0x45ff88 <os_page_size>
               	jmp	0x42b78b <_mi_os_alloc+0x4b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b78b <_mi_os_alloc+0x4b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b78b <_mi_os_alloc+0x4b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42b7b9 <_mi_os_alloc+0x79>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b83f <_mi_os_alloc+0xff>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	je	0x42b898 <_mi_os_alloc+0x158>
               	cmpb	$1, 254632(%rip)        # 0x469a68 <large_os_page_size>
               	jne	0x42b7cc <_mi_os_alloc+0x8c>
               	movl	$6, %edi
               	callq	0x42aae0 <mi_option_get>
               	xorl	%r15d, %r15d
               	movl	$0, %edi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	movq	%rax, %r14
               	cmpq	$-1, %rax
               	cmoveq	%r15, %r14
               	testq	%r14, %r14
               	je	0x42b861 <_mi_os_alloc+0x121>
               	testq	%rbx, %rbx
               	je	0x42b8fa <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 220612(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	addq	%rbx, %rcx
               	movq	220594(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b830 <_mi_os_alloc+0xf0>
               	lock
               	cmpxchgq	%rcx, 220578(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42b820 <_mi_os_alloc+0xe0>
               	testq	%rbx, %rbx
               	jle	0x42b89d <_mi_os_alloc+0x15d>
               	lock
               	addq	%rbx, 220547(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	jmp	0x42b8ab <_mi_os_alloc+0x16b>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b886 <_mi_os_alloc+0x146>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b7b9 <_mi_os_alloc+0x79>
               	jmp	0x42b898 <_mi_os_alloc+0x158>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	102046(%rip), %rdi      # 0x44470d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%r14d, %r14d
               	movq	%rbx, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	jmp	0x42b8fa <_mi_os_alloc+0x1ba>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b7b9 <_mi_os_alloc+0x79>
               	xorl	%r14d, %r14d
               	jmp	0x42b8fa <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rax
               	negq	%rax
               	lock
               	addq	%rax, 220445(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 220481(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	addq	%rbx, %rcx
               	movq	220463(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x42b8e0 <_mi_os_alloc+0x1a0>
               	lock
               	cmpxchgq	%rcx, 220434(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42b8d0 <_mi_os_alloc+0x190>
               	testq	%rbx, %rbx
               	jle	0x42b8ef <_mi_os_alloc+0x1af>
               	lock
               	addq	%rbx, 220403(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	jmp	0x42b8fa <_mi_os_alloc+0x1ba>
               	negq	%rbx
               	lock
               	addq	%rbx, 220398(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	movq	%r14, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_os_free_ex>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42ba72 <_mi_os_free_ex+0x162>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x42ba72 <_mi_os_free_ex+0x162>
               	movl	%edx, %ebp
               	movq	%rdi, %r14
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42b940 <_mi_os_free_ex+0x30>
               	movq	214602(%rip), %rcx      # 0x45ff88 <os_page_size>
               	jmp	0x42b971 <_mi_os_free_ex+0x61>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b971 <_mi_os_free_ex+0x61>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b971 <_mi_os_free_ex+0x61>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42b9cf <_mi_os_free_ex+0xbf>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b99c <_mi_os_free_ex+0x8c>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b9cf <_mi_os_free_ex+0xbf>
               	jmp	0x42ba72 <_mi_os_free_ex+0x162>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b9bd <_mi_os_free_ex+0xad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42b9cf <_mi_os_free_ex+0xbf>
               	jmp	0x42ba72 <_mi_os_free_ex+0x162>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	je	0x42ba72 <_mi_os_free_ex+0x162>
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413840 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%bpl, %bpl
               	je	0x42ba2c <_mi_os_free_ex+0x11c>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 220165(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	220147(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42ba10 <_mi_os_free_ex+0x100>
               	lock
               	cmpxchgq	%rsi, 220130(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42ba00 <_mi_os_free_ex+0xf0>
               	testq	%rbx, %rbx
               	js	0x42ba24 <_mi_os_free_ex+0x114>
               	lock
               	addq	%rbx, 220107(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	testq	%rbx, %rbx
               	jne	0x42ba2c <_mi_os_free_ex+0x11c>
               	jmp	0x42ba6d <_mi_os_free_ex+0x15d>
               	lock
               	addq	%rdx, 220084(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 220064(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	220046(%rip), %rax      # 0x4615d0 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42ba60 <_mi_os_free_ex+0x150>
               	lock
               	cmpxchgq	%rsi, 220018(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	jne	0x42ba50 <_mi_os_free_ex+0x140>
               	testq	%rbx, %rbx
               	js	0x42ba77 <_mi_os_free_ex+0x167>
               	lock
               	addq	%rbx, 219995(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	je	0x42ba84 <_mi_os_free_ex+0x174>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 219969(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42ba72 <_mi_os_free_ex+0x162>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413830 <strerror@plt>
               	leaq	101432(%rip), %rdi      # 0x4446cf <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmp	0x42bb40 <_mi_warning_message>
               	nopl	(%rax,%rax)

<_mi_stat_decrease>:
               	testq	%rsi, %rsi
               	je	0x42bb2a <_mi_stat_decrease+0x7a>
               	leaq	219840(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42bb08 <_mi_stat_decrease+0x58>
               	leaq	220400(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42bb08 <_mi_stat_decrease+0x58>
               	movq	%rsi, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 24(%rdi)
               	subq	%rsi, %rdx
               	movq	16(%rdi), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42bafd <_mi_stat_decrease+0x4d>
               	lock
               	cmpxchgq	%rdx, 16(%rdi)
               	jne	0x42baf0 <_mi_stat_decrease+0x40>
               	testq	%rsi, %rsi
               	js	0x42bb2b <_mi_stat_decrease+0x7b>
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	24(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42bb1d <_mi_stat_decrease+0x6d>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	js	0x42bb30 <_mi_stat_decrease+0x80>
               	addq	8(%rdi), %rsi
               	movq	%rsi, 8(%rdi)
               	retq
               	lock
               	addq	%rcx, (%rdi)
               	retq
               	movq	(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, (%rdi)
               	retq
               	nopw	(%rax,%rax)

<_mi_warning_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42bb8c <_mi_warning_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42bbc4 <_mi_warning_message+0x84>
               	movl	$2, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42bc71 <_mi_warning_message+0x131>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 220782(%rip)      # 0x461a40 <warning_count>
               	cmpq	213943(%rip), %rax      # 0x45ff90 <mi_max_warning_count>
               	ja	0x42bc71 <_mi_warning_message+0x131>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42bc71 <_mi_warning_message+0x131>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42bc71 <_mi_warning_message+0x131>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	220677(%rip), %r12      # 0x461a48 <mi_out_arg>
               	movq	220678(%rip), %rax      # 0x461a50 <mi_out_default>
               	testq	%rax, %rax
               	leaq	44(%rip), %rbx          # 0x42bc80 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	101018(%rip), %rdi      # 0x4446f9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1100>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq

<mi_out_buf>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42bcb7 <mi_out_buf+0x37>
               	movq	220619(%rip), %rax      # 0x461a58 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x42bcb7 <mi_out_buf+0x37>
               	movq	%rdi, %rbx
               	callq	0x4136e0 <strlen@plt>
               	testq	%rax, %rax
               	je	0x42bcb7 <mi_out_buf+0x37>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 220586(%rip)      # 0x461a58 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x42bcb9 <mi_out_buf+0x39>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	220553(%rip), %rdi      # 0x461a60 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x4136f0 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<_mi_stat_increase>:
               	testq	%rsi, %rsi
               	je	0x42bd6c <_mi_stat_increase+0x7c>
               	leaq	219268(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42bd37 <_mi_stat_increase+0x47>
               	leaq	219832(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42bd37 <_mi_stat_increase+0x47>
               	movq	%rsi, %rcx
               	lock
               	xaddq	%rcx, 24(%rdi)
               	addq	%rsi, %rcx
               	movq	16(%rdi), %rax
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42bd2d <_mi_stat_increase+0x3d>
               	lock
               	cmpxchgq	%rcx, 16(%rdi)
               	jne	0x42bd20 <_mi_stat_increase+0x30>
               	testq	%rsi, %rsi
               	jle	0x42bd58 <_mi_stat_increase+0x68>
               	lock
               	addq	%rsi, (%rdi)
               	retq
               	movq	24(%rdi), %rax
               	addq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42bd4c <_mi_stat_increase+0x5c>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	jle	0x42bd61 <_mi_stat_increase+0x71>
               	addq	(%rdi), %rsi
               	movq	%rsi, (%rdi)
               	retq
               	negq	%rsi
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 8(%rdi)
               	retq
               	nopl	(%rax)

<mi_unix_mmapx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%ecx, %r14d
               	movl	%edx, %r15d
               	movq	%rdi, %rbp
               	cmpq	$1073741824, %rdi       # imm = 0x40000000
               	ja	0x42be63 <mi_unix_mmapx+0xf3>
               	movl	%ebp, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	testq	%rax, %rax
               	jne	0x42be63 <mi_unix_mmapx+0xf3>
               	movq	%rsi, %r12
               	leaq	-1(%rsi), %rax
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42be63 <mi_unix_mmapx+0xf3>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 253123(%rip)      # 0x469a80 <aligned_base>
               	leaq	-1(%rbx), %rax
               	shrq	$41, %rax
               	cmpl	$15, %eax
               	jb	0x42be13 <mi_unix_mmapx+0xa3>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	callq	0x428b90 <_mi_heap_random_next>
               	shlq	$5, %rax
               	movabsq	$4398042316800, %rcx    # imm = 0x3FFFFC00000
               	andq	%rax, %rcx
               	movabsq	$2199023255552, %rdx    # imm = 0x20000000000
               	addq	%rcx, %rdx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rdx, 253049(%rip)      # 0x469a80 <aligned_base>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 253037(%rip)      # 0x469a80 <aligned_base>
               	movq	%rbx, %rax
               	orq	%r12, %rax
               	shrq	$32, %rax
               	je	0x42be2e <mi_unix_mmapx+0xbe>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r12
               	testq	%rbx, %rbx
               	jne	0x42be3a <mi_unix_mmapx+0xca>
               	jmp	0x42be63 <mi_unix_mmapx+0xf3>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r12d
               	testq	%rbx, %rbx
               	je	0x42be63 <mi_unix_mmapx+0xf3>
               	testq	%rdx, %rdx
               	jne	0x42be63 <mi_unix_mmapx+0xf3>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	leaq	1(%rax), %rcx
               	cmpq	$1, %rcx
               	ja	0x42be86 <mi_unix_mmapx+0x116>
               	xorl	%ebx, %ebx
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	$-1, %rax
               	cmoveq	%rbx, %rax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<_mi_os_numa_node_count_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$128, %rsp
               	movq	252917(%rip), %rbx      # 0x469a98 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x42bf23 <_mi_os_numa_node_count_get+0x93>
               	movl	$15, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x42bf0b <_mi_os_numa_node_count_get+0x7b>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	100847(%rip), %r14      # 0x4448b9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	movq	%rsp, %r15
               	nopl	(%rax)
               	cmpl	$255, %ebx
               	je	0x42bf03 <_mi_os_numa_node_count_get+0x73>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x4138c0 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x42bed0 <_mi_os_numa_node_count_get+0x40>
               	jmp	0x42bf08 <_mi_os_numa_node_count_get+0x78>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 252806(%rip)      # 0x469a98 <_mi_numa_node_count>
               	leaq	100800(%rip), %rdi      # 0x4448d9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	movq	%rbx, %rax
               	addq	$128, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_error_message>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$720, %rsp              # imm = 0x2D0
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	testb	%al, %al
               	je	0x42bf8f <_mi_error_message+0x4f>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430224, %rax     # imm = 0x3000000010
               	movq	%rax, (%rsp)
               	xorl	%edi, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42bfe7 <_mi_error_message+0xa7>
               	movl	$2, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42c06b <_mi_error_message+0x12b>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 252643(%rip)      # 0x469ad8 <error_count>
               	cmpq	213380(%rip), %rax      # 0x460180 <mi_max_error_count>
               	ja	0x42c06b <_mi_error_message+0x12b>
               	testq	%rbx, %rbx
               	je	0x42c06b <_mi_error_message+0x12b>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42c06b <_mi_error_message+0x12b>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	219659(%rip), %r12      # 0x461a48 <mi_out_arg>
               	movq	219660(%rip), %rax      # 0x461a50 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-974(%rip), %rbx        # 0x42bc80 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	100946(%rip), %rdi      # 0x444aab <typeinfo name for kotlin::gc::GCSchedulerData+0x14b2>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	movq	252526(%rip), %rax      # 0x469ae0 <mi_error_handler>
               	testq	%rax, %rax
               	je	0x42c089 <_mi_error_message+0x149>
               	movq	252514(%rip), %rax      # 0x469ae0 <mi_error_handler>
               	movq	252515(%rip), %rsi      # 0x469ae8 <mi_error_arg>
               	movl	%ebp, %edi
               	callq	*%rax
               	addq	$720, %rsp              # imm = 0x2D0
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<mi_stats_merge_from>:
               	leaq	218329(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x42c589 <mi_stats_merge_from+0x4e9>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c0bf <mi_stats_merge_from+0x1f>
               	cmpq	$0, 8(%rdi)
               	je	0x42c0eb <mi_stats_merge_from+0x4b>
               	lock
               	addq	%rax, 218297(%rip)      # 0x461580 <_mi_stats_main>
               	movq	24(%rdi), %rax
               	lock
               	addq	%rax, 218309(%rip)      # 0x461598 <_mi_stats_main+0x18>
               	movq	8(%rdi), %rax
               	lock
               	addq	%rax, 218281(%rip)      # 0x461588 <_mi_stats_main+0x8>
               	movq	16(%rdi), %rax
               	lock
               	addq	%rax, 218277(%rip)      # 0x461590 <_mi_stats_main+0x10>
               	movq	32(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c0fb <mi_stats_merge_from+0x5b>
               	cmpq	$0, 40(%rdi)
               	je	0x42c127 <mi_stats_merge_from+0x87>
               	lock
               	addq	%rax, 218269(%rip)      # 0x4615a0 <_mi_stats_main+0x20>
               	movq	56(%rdi), %rax
               	lock
               	addq	%rax, 218281(%rip)      # 0x4615b8 <_mi_stats_main+0x38>
               	movq	40(%rdi), %rax
               	lock
               	addq	%rax, 218253(%rip)      # 0x4615a8 <_mi_stats_main+0x28>
               	movq	48(%rdi), %rax
               	lock
               	addq	%rax, 218249(%rip)      # 0x4615b0 <_mi_stats_main+0x30>
               	movq	64(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c137 <mi_stats_merge_from+0x97>
               	cmpq	$0, 72(%rdi)
               	je	0x42c163 <mi_stats_merge_from+0xc3>
               	lock
               	addq	%rax, 218241(%rip)      # 0x4615c0 <_mi_stats_main+0x40>
               	movq	88(%rdi), %rax
               	lock
               	addq	%rax, 218253(%rip)      # 0x4615d8 <_mi_stats_main+0x58>
               	movq	72(%rdi), %rax
               	lock
               	addq	%rax, 218225(%rip)      # 0x4615c8 <_mi_stats_main+0x48>
               	movq	80(%rdi), %rax
               	lock
               	addq	%rax, 218221(%rip)      # 0x4615d0 <_mi_stats_main+0x50>
               	movq	96(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c173 <mi_stats_merge_from+0xd3>
               	cmpq	$0, 104(%rdi)
               	je	0x42c19f <mi_stats_merge_from+0xff>
               	lock
               	addq	%rax, 218213(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	120(%rdi), %rax
               	lock
               	addq	%rax, 218225(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	movq	104(%rdi), %rax
               	lock
               	addq	%rax, 218197(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	movq	112(%rdi), %rax
               	lock
               	addq	%rax, 218193(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	movq	128(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c1b5 <mi_stats_merge_from+0x115>
               	cmpq	$0, 136(%rdi)
               	je	0x42c1ea <mi_stats_merge_from+0x14a>
               	lock
               	addq	%rax, 218179(%rip)      # 0x461600 <_mi_stats_main+0x80>
               	movq	152(%rdi), %rax
               	lock
               	addq	%rax, 218188(%rip)      # 0x461618 <_mi_stats_main+0x98>
               	movq	136(%rdi), %rax
               	lock
               	addq	%rax, 218157(%rip)      # 0x461608 <_mi_stats_main+0x88>
               	movq	144(%rdi), %rax
               	lock
               	addq	%rax, 218150(%rip)      # 0x461610 <_mi_stats_main+0x90>
               	movq	160(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c200 <mi_stats_merge_from+0x160>
               	cmpq	$0, 168(%rdi)
               	je	0x42c235 <mi_stats_merge_from+0x195>
               	lock
               	addq	%rax, 218136(%rip)      # 0x461620 <_mi_stats_main+0xa0>
               	movq	184(%rdi), %rax
               	lock
               	addq	%rax, 218145(%rip)      # 0x461638 <_mi_stats_main+0xb8>
               	movq	168(%rdi), %rax
               	lock
               	addq	%rax, 218114(%rip)      # 0x461628 <_mi_stats_main+0xa8>
               	movq	176(%rdi), %rax
               	lock
               	addq	%rax, 218107(%rip)      # 0x461630 <_mi_stats_main+0xb0>
               	movq	224(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c24b <mi_stats_merge_from+0x1ab>
               	cmpq	$0, 232(%rdi)
               	je	0x42c280 <mi_stats_merge_from+0x1e0>
               	lock
               	addq	%rax, 218125(%rip)      # 0x461660 <_mi_stats_main+0xe0>
               	movq	248(%rdi), %rax
               	lock
               	addq	%rax, 218134(%rip)      # 0x461678 <_mi_stats_main+0xf8>
               	movq	232(%rdi), %rax
               	lock
               	addq	%rax, 218103(%rip)      # 0x461668 <_mi_stats_main+0xe8>
               	movq	240(%rdi), %rax
               	lock
               	addq	%rax, 218096(%rip)      # 0x461670 <_mi_stats_main+0xf0>
               	movq	192(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c296 <mi_stats_merge_from+0x1f6>
               	cmpq	$0, 200(%rdi)
               	je	0x42c2cb <mi_stats_merge_from+0x22b>
               	lock
               	addq	%rax, 218018(%rip)      # 0x461640 <_mi_stats_main+0xc0>
               	movq	216(%rdi), %rax
               	lock
               	addq	%rax, 218027(%rip)      # 0x461658 <_mi_stats_main+0xd8>
               	movq	200(%rdi), %rax
               	lock
               	addq	%rax, 217996(%rip)      # 0x461648 <_mi_stats_main+0xc8>
               	movq	208(%rdi), %rax
               	lock
               	addq	%rax, 217989(%rip)      # 0x461650 <_mi_stats_main+0xd0>
               	movq	256(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c2e1 <mi_stats_merge_from+0x241>
               	cmpq	$0, 264(%rdi)
               	je	0x42c316 <mi_stats_merge_from+0x276>
               	lock
               	addq	%rax, 218007(%rip)      # 0x461680 <_mi_stats_main+0x100>
               	movq	280(%rdi), %rax
               	lock
               	addq	%rax, 218016(%rip)      # 0x461698 <_mi_stats_main+0x118>
               	movq	264(%rdi), %rax
               	lock
               	addq	%rax, 217985(%rip)      # 0x461688 <_mi_stats_main+0x108>
               	movq	272(%rdi), %rax
               	lock
               	addq	%rax, 217978(%rip)      # 0x461690 <_mi_stats_main+0x110>
               	movq	384(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c32c <mi_stats_merge_from+0x28c>
               	cmpq	$0, 392(%rdi)
               	je	0x42c361 <mi_stats_merge_from+0x2c1>
               	lock
               	addq	%rax, 218060(%rip)      # 0x461700 <_mi_stats_main+0x180>
               	movq	408(%rdi), %rax
               	lock
               	addq	%rax, 218069(%rip)      # 0x461718 <_mi_stats_main+0x198>
               	movq	392(%rdi), %rax
               	lock
               	addq	%rax, 218038(%rip)      # 0x461708 <_mi_stats_main+0x188>
               	movq	400(%rdi), %rax
               	lock
               	addq	%rax, 218031(%rip)      # 0x461710 <_mi_stats_main+0x190>
               	movq	416(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c377 <mi_stats_merge_from+0x2d7>
               	cmpq	$0, 424(%rdi)
               	je	0x42c3ac <mi_stats_merge_from+0x30c>
               	lock
               	addq	%rax, 218017(%rip)      # 0x461720 <_mi_stats_main+0x1a0>
               	movq	440(%rdi), %rax
               	lock
               	addq	%rax, 218026(%rip)      # 0x461738 <_mi_stats_main+0x1b8>
               	movq	424(%rdi), %rax
               	lock
               	addq	%rax, 217995(%rip)      # 0x461728 <_mi_stats_main+0x1a8>
               	movq	432(%rdi), %rax
               	lock
               	addq	%rax, 217988(%rip)      # 0x461730 <_mi_stats_main+0x1b0>
               	movq	288(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c3c2 <mi_stats_merge_from+0x322>
               	cmpq	$0, 296(%rdi)
               	je	0x42c3f7 <mi_stats_merge_from+0x357>
               	lock
               	addq	%rax, 217814(%rip)      # 0x4616a0 <_mi_stats_main+0x120>
               	movq	312(%rdi), %rax
               	lock
               	addq	%rax, 217823(%rip)      # 0x4616b8 <_mi_stats_main+0x138>
               	movq	296(%rdi), %rax
               	lock
               	addq	%rax, 217792(%rip)      # 0x4616a8 <_mi_stats_main+0x128>
               	movq	304(%rdi), %rax
               	lock
               	addq	%rax, 217785(%rip)      # 0x4616b0 <_mi_stats_main+0x130>
               	movq	320(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c40d <mi_stats_merge_from+0x36d>
               	cmpq	$0, 328(%rdi)
               	je	0x42c442 <mi_stats_merge_from+0x3a2>
               	lock
               	addq	%rax, 217771(%rip)      # 0x4616c0 <_mi_stats_main+0x140>
               	movq	344(%rdi), %rax
               	lock
               	addq	%rax, 217780(%rip)      # 0x4616d8 <_mi_stats_main+0x158>
               	movq	328(%rdi), %rax
               	lock
               	addq	%rax, 217749(%rip)      # 0x4616c8 <_mi_stats_main+0x148>
               	movq	336(%rdi), %rax
               	lock
               	addq	%rax, 217742(%rip)      # 0x4616d0 <_mi_stats_main+0x150>
               	movq	352(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42c458 <mi_stats_merge_from+0x3b8>
               	cmpq	$0, 360(%rdi)
               	je	0x42c48d <mi_stats_merge_from+0x3ed>
               	lock
               	addq	%rax, 217728(%rip)      # 0x4616e0 <_mi_stats_main+0x160>
               	movq	376(%rdi), %rax
               	lock
               	addq	%rax, 217737(%rip)      # 0x4616f8 <_mi_stats_main+0x178>
               	movq	360(%rdi), %rax
               	lock
               	addq	%rax, 217706(%rip)      # 0x4616e8 <_mi_stats_main+0x168>
               	movq	368(%rdi), %rax
               	lock
               	addq	%rax, 217699(%rip)      # 0x4616f0 <_mi_stats_main+0x170>
               	movq	448(%rdi), %rax
               	lock
               	addq	%rax, 217764(%rip)      # 0x461740 <_mi_stats_main+0x1c0>
               	movq	456(%rdi), %rax
               	lock
               	addq	%rax, 217757(%rip)      # 0x461748 <_mi_stats_main+0x1c8>
               	movq	464(%rdi), %rax
               	lock
               	addq	%rax, 217750(%rip)      # 0x461750 <_mi_stats_main+0x1d0>
               	movq	472(%rdi), %rax
               	lock
               	addq	%rax, 217743(%rip)      # 0x461758 <_mi_stats_main+0x1d8>
               	movq	480(%rdi), %rax
               	lock
               	addq	%rax, 217736(%rip)      # 0x461760 <_mi_stats_main+0x1e0>
               	movq	488(%rdi), %rax
               	lock
               	addq	%rax, 217729(%rip)      # 0x461768 <_mi_stats_main+0x1e8>
               	movq	496(%rdi), %rax
               	lock
               	addq	%rax, 217722(%rip)      # 0x461770 <_mi_stats_main+0x1f0>
               	movq	504(%rdi), %rax
               	lock
               	addq	%rax, 217715(%rip)      # 0x461778 <_mi_stats_main+0x1f8>
               	movq	512(%rdi), %rax
               	lock
               	addq	%rax, 217708(%rip)      # 0x461780 <_mi_stats_main+0x200>
               	movq	520(%rdi), %rax
               	lock
               	addq	%rax, 217701(%rip)      # 0x461788 <_mi_stats_main+0x208>
               	movq	528(%rdi), %rax
               	lock
               	addq	%rax, 217694(%rip)      # 0x461790 <_mi_stats_main+0x210>
               	movq	536(%rdi), %rax
               	lock
               	addq	%rax, 217687(%rip)      # 0x461798 <_mi_stats_main+0x218>
               	movq	544(%rdi), %rax
               	lock
               	addq	%rax, 217680(%rip)      # 0x4617a0 <_mi_stats_main+0x220>
               	movq	552(%rdi), %rax
               	lock
               	addq	%rax, 217673(%rip)      # 0x4617a8 <_mi_stats_main+0x228>
               	movq	560(%rdi), %rax
               	lock
               	addq	%rax, 217666(%rip)      # 0x4617b0 <_mi_stats_main+0x230>
               	movq	568(%rdi), %rax
               	lock
               	addq	%rax, 217659(%rip)      # 0x4617b8 <_mi_stats_main+0x238>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	jmp	0x413710 <memset@plt>
               	retq
               	nopw	(%rax,%rax)

<mi_heap_collect_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	testq	%rdi, %rdi
               	je	0x42d092 <mi_heap_collect_ex+0xb02>
               	movq	%rdi, %r15
               	leaq	197583(%rip), %rax      # 0x45c980 <_mi_heap_empty>
               	cmpq	%rax, %rdi
               	je	0x42d092 <mi_heap_collect_ex+0xb02>
               	movl	%esi, %ebp
               	movq	(%r15), %rbx
               	movq	(%rbx), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rbx)
               	movq	316984(%rip), %rax      # 0x479c08 <deferred_free>
               	testq	%rax, %rax
               	je	0x42c5df <mi_heap_collect_ex+0x4f>
               	cmpb	$0, 8(%rbx)
               	je	0x42c779 <mi_heap_collect_ex+0x1e9>
               	cmpl	$2, %ebp
               	je	0x42c7a2 <mi_heap_collect_ex+0x212>
               	cmpl	$1, %ebp
               	jne	0x42c81d <mi_heap_collect_ex+0x28d>
               	movq	210376(%rip), %rax      # 0x45fbc0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42c60f <mi_heap_collect_ex+0x7f>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42c81d <mi_heap_collect_ex+0x28d>
               	cmpq	%r15, 16(%rbx)
               	jne	0x42c81d <mi_heap_collect_ex+0x28d>
               	cmpb	$0, 3048(%r15)
               	jne	0x42c81d <mi_heap_collect_ex+0x28d>
               	addq	$32, %rbx
               	movq	316686(%rip), %rax      # 0x479b40 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c6fc <mi_heap_collect_ex+0x16c>
               	movq	316795(%rip), %rax      # 0x479bc0 <abandoned_visited>
               	xorl	%r14d, %r14d
               	testq	%rax, %rax
               	je	0x42c820 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 316774(%rip)      # 0x479bc0 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x42c820 <mi_heap_collect_ex+0x290>
               	movq	316630(%rip), %rax      # 0x479b40 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42c690 <mi_heap_collect_ex+0x100>
               	movq	316807(%rip), %rdx      # 0x479c00 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 316594(%rip)      # 0x479b40 <abandoned>
               	je	0x42c6ec <mi_heap_collect_ex+0x15c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x42c6a0 <mi_heap_collect_ex+0x110>
               	movq	316553(%rip), %rax      # 0x479b40 <abandoned>
               	nopw	(%rax,%rax)
               	movq	316729(%rip), %rdx      # 0x479c00 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 316502(%rip)      # 0x479b40 <abandoned>
               	jne	0x42c6c0 <mi_heap_collect_ex+0x130>
               	lock
               	addq	%rdx, 316556(%rip)      # 0x479b80 <abandoned_count>
               	lock
               	subq	%rdx, 316676(%rip)      # 0x479c00 <abandoned_visited_count>
               	lock
               	addq	$1, 316411(%rip)        # 0x479b00 <abandoned_readers>
               	movq	316468(%rip), %rax      # 0x479b40 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x42c814 <mi_heap_collect_ex+0x284>
               	movq	16(%rdi), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 316423(%rip)      # 0x479b40 <abandoned>
               	jne	0x42c710 <mi_heap_collect_ex+0x180>
               	lock
               	subq	$1, 316348(%rip)        # 0x479b00 <abandoned_readers>
               	movq	$0, 16(%rdi)
               	lock
               	subq	$1, 316459(%rip)        # 0x479b80 <abandoned_count>
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fb60 <mi_segment_reclaim>
               	movq	316373(%rip), %rax      # 0x479b40 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	jbe	0x42c63e <mi_heap_collect_ex+0xae>
               	jmp	0x42c6fc <mi_heap_collect_ex+0x16c>
               	movb	$1, 8(%rbx)
               	movq	316548(%rip), %rax      # 0x479c08 <deferred_free>
               	movq	316549(%rip), %rdx      # 0x479c10 <deferred_arg>
               	movl	$1, %edi
               	callq	*%rax
               	movq	(%r15), %rbx
               	movb	$0, 8(%rbx)
               	cmpl	$2, %ebp
               	jne	0x42c5e8 <mi_heap_collect_ex+0x58>
               	movb	$1, %r14b
               	cmpq	$0, 3016(%r15)
               	je	0x42c820 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	jmp	0x42c7ca <mi_heap_collect_ex+0x23a>
               	nopw	(%rax,%rax)
               	addq	$1, %rcx
               	cmpq	$75, %rcx
               	je	0x42c820 <mi_heap_collect_ex+0x290>
               	leaq	(%rcx,%rcx,2), %rax
               	movq	1040(%r15,%rax,8), %rdx
               	nopw	%cs:(%rax,%rax)
               	testq	%rdx, %rdx
               	je	0x42c7c0 <mi_heap_collect_ex+0x230>
               	movq	%rdx, %rsi
               	movq	48(%rdx), %rdx
               	movq	32(%rsi), %rax
               	movl	%eax, %edi
               	andl	$3, %edi
               	cmpl	$3, %edi
               	je	0x42c7e0 <mi_heap_collect_ex+0x250>
               	cmpl	$1, %edi
               	je	0x42c810 <mi_heap_collect_ex+0x280>
               	movq	%rax, %rdi
               	orq	$3, %rdi
               	lock
               	cmpxchgq	%rdi, 32(%rsi)
               	jne	0x42c7ec <mi_heap_collect_ex+0x25c>
               	jmp	0x42c7e0 <mi_heap_collect_ex+0x250>
               	pause
               	jmp	0x42c7ec <mi_heap_collect_ex+0x25c>
               	lock
               	subq	$1, 316131(%rip)        # 0x479b00 <abandoned_readers>
               	xorl	%r14d, %r14d
               	movq	2840(%r15), %rax
               	xorl	%ecx, %ecx
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x42c860 <mi_heap_collect_ex+0x2d0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%rcx, 2840(%r15)
               	jne	0x42c830 <mi_heap_collect_ex+0x2a0>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x42f480 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42c850 <mi_heap_collect_ex+0x2c0>
               	movq	3024(%r15), %rbp
               	cmpq	3032(%r15), %rbp
               	jbe	0x42cc8b <mi_heap_collect_ex+0x6fb>
               	movq	$74, 3024(%r15)
               	movq	$0, 3032(%r15)
               	cmpq	$0, 3016(%r15)
               	movq	%r15, (%rsp)
               	je	0x42cd61 <mi_heap_collect_ex+0x7d1>
               	testb	%r14b, %r14b
               	je	0x42ccf4 <mi_heap_collect_ex+0x764>
               	leaq	1016(%r15), %rax
               	movq	%rax, 8(%rsp)
               	xorl	%eax, %eax
               	leaq	216262(%rip), %r13      # 0x461580 <_mi_stats_main>
               	jmp	0x42c8dd <mi_heap_collect_ex+0x34d>
               	nop
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	addq	$24, 8(%rsp)
               	cmpq	$75, %rax
               	movq	(%rsp), %r15
               	je	0x42cd61 <mi_heap_collect_ex+0x7d1>
               	movq	%rax, 16(%rsp)
               	leaq	(%rax,%rax,2), %rax
               	movq	1040(%r15,%rax,8), %r14
               	testq	%r14, %r14
               	je	0x42c8c0 <mi_heap_collect_ex+0x330>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42c925 <mi_heap_collect_ex+0x395>
               	nopl	(%rax,%rax)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d250 <_mi_page_free>
               	testq	%r14, %r14
               	je	0x42c8c0 <mi_heap_collect_ex+0x330>
               	movq	%r14, %rbx
               	movq	48(%r14), %r14
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42d180 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbx)
               	je	0x42c910 <mi_heap_collect_ex+0x380>
               	leaq	48(%rbx), %r10
               	movq	40(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	40(%rbx), %r12
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42c95e <mi_heap_collect_ex+0x3ce>
               	movq	(%r10), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%r10), %r9
               	testq	%r9, %r9
               	je	0x42c96a <mi_heap_collect_ex+0x3da>
               	movq	%rax, 56(%r9)
               	cmpq	%rbx, 8(%r15)
               	je	0x42c980 <mi_heap_collect_ex+0x3f0>
               	cmpq	%rbx, (%r15)
               	jne	0x42cb90 <mi_heap_collect_ex+0x600>
               	jmp	0x42c991 <mi_heap_collect_ex+0x401>
               	nop
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r15)
               	cmpq	%rbx, (%r15)
               	jne	0x42cb90 <mi_heap_collect_ex+0x600>
               	movq	%r9, (%r15)
               	movq	16(%r15), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42cb90 <mi_heap_collect_ex+0x600>
               	testq	%r9, %r9
               	leaq	102098(%rip), %rcx      # 0x445880 <_mi_page_empty>
               	cmoveq	%rcx, %r9
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r9, 8(%r12,%r11,8)
               	je	0x42cb90 <mi_heap_collect_ex+0x600>
               	cmpq	$9, %rax
               	jae	0x42c9d2 <mi_heap_collect_ex+0x442>
               	xorl	%ecx, %ecx
               	jmp	0x42ca92 <mi_heap_collect_ex+0x502>
               	cmpq	$64, %rax
               	ja	0x42c9e2 <mi_heap_collect_ex+0x452>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42c9fd <mi_heap_collect_ex+0x46d>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r12), %rbp
               	movq	8(%rsp), %rdx
               	nopw	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42ca70 <mi_heap_collect_ex+0x4e0>
               	cmpq	$71, %rax
               	ja	0x42ca40 <mi_heap_collect_ex+0x4b0>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x42ca70 <mi_heap_collect_ex+0x4e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42ca70 <mi_heap_collect_ex+0x4e0>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r13
               	movl	%r13d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r13,4), %ecx
               	leaq	215827(%rip), %r13      # 0x461580 <_mi_stats_main>
               	addb	$-3, %cl
               	cmpq	%rbp, %rdx
               	jbe	0x42ca7e <mi_heap_collect_ex+0x4ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r8b
               	je	0x42ca10 <mi_heap_collect_ex+0x480>
               	leaq	1(%rdi), %rcx
               	cmpq	%r11, %rdi
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42cb90 <mi_heap_collect_ex+0x600>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42cb80 <mi_heap_collect_ex+0x5f0>
               	movq	%r8, %rdi
               	andq	$-4, %rdi
               	movq	%r9, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%rdi), %rbp
               	movq	%rbp, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rbp
               	jae	0x42cad5 <mi_heap_collect_ex+0x545>
               	xorl	%ebp, %ebp
               	jmp	0x42cb32 <mi_heap_collect_ex+0x5a2>
               	leaq	(%r12,%rcx,8), %r13
               	addq	$120, %r13
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbp,8)
               	movdqu	%xmm0, -96(%r13,%rbp,8)
               	movdqu	%xmm0, -80(%r13,%rbp,8)
               	movdqu	%xmm0, -64(%r13,%rbp,8)
               	movdqu	%xmm0, -48(%r13,%rbp,8)
               	movdqu	%xmm0, -32(%r13,%rbp,8)
               	movdqu	%xmm0, -16(%r13,%rbp,8)
               	movdqu	%xmm0, (%r13,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdx
               	jne	0x42caf0 <mi_heap_collect_ex+0x560>
               	testq	%rax, %rax
               	je	0x42cb62 <mi_heap_collect_ex+0x5d2>
               	addq	%rcx, %rbp
               	leaq	(%r12,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	nopl	(%rax)
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42cb50 <mi_heap_collect_ex+0x5c0>
               	cmpq	%rdi, %r8
               	leaq	215572(%rip), %r13      # 0x461580 <_mi_stats_main>
               	je	0x42cb90 <mi_heap_collect_ex+0x600>
               	addq	%rdi, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r9, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42cb80 <mi_heap_collect_ex+0x5f0>
               	nop
               	movq	3016(%r12), %rax
               	addq	$-1, %rax
               	movq	%rax, 3016(%r12)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r10)
               	movb	6(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 6(%rbx)
               	movq	$0, 40(%rbx)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	144(%rsi), %rdx
               	leaq	224(%rdx), %rcx
               	cmpq	%r13, %rcx
               	jb	0x42cc40 <mi_heap_collect_ex+0x6b0>
               	leaq	216018(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42cc40 <mi_heap_collect_ex+0x6b0>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 248(%rdx)
               	leaq	1(%rdi), %rbp
               	movq	240(%rdx), %rax
               	cmpq	%rdi, %rax
               	jg	0x42cc20 <mi_heap_collect_ex+0x690>
               	lock
               	cmpxchgq	%rbp, 240(%rdx)
               	jne	0x42cc10 <mi_heap_collect_ex+0x680>
               	lock
               	addq	$1, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42c920 <mi_heap_collect_ex+0x390>
               	jmp	0x42cc7a <mi_heap_collect_ex+0x6ea>
               	nopl	(%rax,%rax)
               	movq	248(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 248(%rdx)
               	cmpq	240(%rdx), %rdi
               	jl	0x42cc62 <mi_heap_collect_ex+0x6d2>
               	movq	%rax, 240(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42c920 <mi_heap_collect_ex+0x390>
               	addq	$32, %rsi
               	movq	%rbx, %rdi
               	callq	0x42ef00 <mi_segment_abandon>
               	jmp	0x42c920 <mi_heap_collect_ex+0x390>
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	leaq	(%r15,%rax,8), %rbx
               	addq	$1040, %rbx             # imm = 0x410
               	jmp	0x42ccc5 <mi_heap_collect_ex+0x735>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopl	(%rax)
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r15), %rbp
               	ja	0x42c874 <mi_heap_collect_ex+0x2e4>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42ccb0 <mi_heap_collect_ex+0x720>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x42ccb0 <mi_heap_collect_ex+0x720>
               	cmpl	$0, 16(%rax)
               	jne	0x42cca3 <mi_heap_collect_ex+0x713>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42d250 <_mi_page_free>
               	jmp	0x42ccb0 <mi_heap_collect_ex+0x720>
               	xorl	%r14d, %r14d
               	jmp	0x42cd0e <mi_heap_collect_ex+0x77e>
               	nopl	(%rax)
               	addq	$1, %r14
               	cmpq	$75, %r14
               	movq	(%rsp), %r15
               	je	0x42cd61 <mi_heap_collect_ex+0x7d1>
               	leaq	(%r14,%r14,2), %rax
               	movq	1040(%r15,%rax,8), %rbp
               	testq	%rbp, %rbp
               	je	0x42cd00 <mi_heap_collect_ex+0x770>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42cd38 <mi_heap_collect_ex+0x7a8>
               	movq	%rbx, %rbp
               	testq	%rbx, %rbx
               	je	0x42cd00 <mi_heap_collect_ex+0x770>
               	movq	48(%rbp), %rbx
               	movq	%rbp, %rdi
               	movl	$1, %esi
               	callq	0x42d180 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbp)
               	jne	0x42cd30 <mi_heap_collect_ex+0x7a0>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42d250 <_mi_page_free>
               	jmp	0x42cd30 <mi_heap_collect_ex+0x7a0>
               	movq	(%r15), %r15
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42d06b <mi_heap_collect_ex+0xadb>
               	leaq	215045(%rip), %rbx      # 0x461580 <_mi_stats_main>
               	movl	$1, %r13d
               	jmp	0x42cdbc <mi_heap_collect_ex+0x82c>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	movq	(%r14), %rdx
               	andb	$1, %r12b
               	movzbl	%al, %r8d
               	movzbl	%r12b, %ecx
               	movq	%r14, %rdi
               	callq	0x42dc90 <_mi_mem_free>
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42d06b <mi_heap_collect_ex+0xadb>
               	movq	120(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 120(%r15)
               	movq	24(%r14), %rax
               	movq	%rax, 136(%r15)
               	movq	$0, 24(%r14)
               	movq	144(%r15), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rbx, %rax
               	jb	0x42ce40 <mi_heap_collect_ex+0x8b0>
               	leaq	215495(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42ce40 <mi_heap_collect_ex+0x8b0>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42ce30 <mi_heap_collect_ex+0x8a0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42ce20 <mi_heap_collect_ex+0x890>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42ce74 <mi_heap_collect_ex+0x8e4>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42ce62 <mi_heap_collect_ex+0x8d2>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	72(%r14), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r14)
               	movq	144(%r15), %rcx
               	cmpq	%rbx, %rcx
               	setae	%dl
               	leaq	215342(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42cee0 <mi_heap_collect_ex+0x950>
               	testb	%al, %al
               	je	0x42cf20 <mi_heap_collect_ex+0x990>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jge	0x42cecd <mi_heap_collect_ex+0x93d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42cec0 <mi_heap_collect_ex+0x930>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42cf42 <mi_heap_collect_ex+0x9b2>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42d02f <mi_heap_collect_ex+0xa9f>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42cf0d <mi_heap_collect_ex+0x97d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42cf00 <mi_heap_collect_ex+0x970>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42d04f <mi_heap_collect_ex+0xabf>
               	nopw	(%rax,%rax)
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42cf36 <mi_heap_collect_ex+0x9a6>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	jbe	0x42cf5b <mi_heap_collect_ex+0x9cb>
               	movq	%rax, 96(%r15)
               	movq	104(%r15), %rax
               	subq	%rsi, %rax
               	movq	%rax, 104(%r15)
               	cmpq	112(%r15), %rax
               	jbe	0x42cf70 <mi_heap_collect_ex+0x9e0>
               	movq	%rax, 112(%r15)
               	movq	64(%r14), %r10
               	testq	%r10, %r10
               	je	0x42cd90 <mi_heap_collect_ex+0x800>
               	cmpq	$1, %r10
               	jne	0x42cf90 <mi_heap_collect_ex+0xa00>
               	movb	$1, %r12b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42cfe4 <mi_heap_collect_ex+0xa54>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r14), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r12b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42cfb0 <mi_heap_collect_ex+0xa20>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42d000 <mi_heap_collect_ex+0xa70>
               	shlq	$6, %r8
               	movb	121(%r14,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r12b
               	testb	$1, %al
               	je	0x42cd93 <mi_heap_collect_ex+0x803>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42aae0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r12b, %r12d
               	movl	$0, %eax
               	cmovnel	%eax, %r12d
               	movb	$1, %al
               	jmp	0x42cd95 <mi_heap_collect_ex+0x805>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42d045 <mi_heap_collect_ex+0xab5>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	ja	0x42cf57 <mi_heap_collect_ex+0x9c7>
               	jmp	0x42cf5b <mi_heap_collect_ex+0x9cb>
               	movq	207694(%rip), %rax      # 0x45fbc0 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	movq	(%rsp), %rdx
               	je	0x42d089 <mi_heap_collect_ex+0xaf9>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42d092 <mi_heap_collect_ex+0xb02>
               	movq	(%rdx), %rax
               	cmpq	%rdx, 16(%rax)
               	je	0x42d0a1 <mi_heap_collect_ex+0xb11>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	248392(%rip), %r14      # 0x469af0 <regions_count>
               	testq	%r14, %r14
               	je	0x42d092 <mi_heap_collect_ex+0xb02>
               	xorl	%ebp, %ebp
               	leaq	248394(%rip), %r15      # 0x469b00 <regions>
               	movq	$-1, %rbx
               	jmp	0x42d0e9 <mi_heap_collect_ex+0xb59>
               	xorl	%ecx, %ecx
               	cmpq	$-1, %rax
               	sete	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	callq	0x42d4d0 <_mi_arena_free>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	addq	$1, %rbp
               	cmpq	%r14, %rbp
               	je	0x42d092 <mi_heap_collect_ex+0xb02>
               	movq	%rbp, %rcx
               	shlq	$6, %rcx
               	movq	(%rcx,%r15), %rax
               	testq	%rax, %rax
               	je	0x42d0e0 <mi_heap_collect_ex+0xb50>
               	leaq	(%r15,%rcx), %rsi
               	leaq	(%rcx,%r15), %rdx
               	addq	$16, %rdx
               	movq	16(%rcx,%r15), %rax
               	nop
               	testq	%rax, %rax
               	jne	0x42d0e0 <mi_heap_collect_ex+0xb50>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, (%rdx)
               	jne	0x42d110 <mi_heap_collect_ex+0xb80>
               	movq	8(%rcx,%r15), %rdi
               	movq	48(%rcx,%r15), %rdx
               	movq	32(%rcx,%r15), %rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 48(%rsi)
               	movdqa	%xmm0, 32(%rsi)
               	movdqa	%xmm0, 16(%rsi)
               	movdqa	%xmm0, (%rsi)
               	movq	$0, (%rsi)
               	testq	%rdi, %rdi
               	je	0x42d0e0 <mi_heap_collect_ex+0xb50>
               	movq	313769(%rip), %rcx      # 0x479b00 <abandoned_readers>
               	testq	%rcx, %rcx
               	je	0x42d0bf <mi_heap_collect_ex+0xb2f>
               	pause
               	movq	313751(%rip), %rcx      # 0x479b00 <abandoned_readers>
               	testq	%rcx, %rcx
               	jne	0x42d160 <mi_heap_collect_ex+0xbd0>
               	jmp	0x42d0bf <mi_heap_collect_ex+0xb2f>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free_collect>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	testl	%esi, %esi
               	jne	0x42d196 <_mi_page_free_collect+0x16>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x42d1e9 <_mi_page_free_collect+0x69>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x42d1a0 <_mi_page_free_collect+0x20>
               	andq	$-4, %rcx
               	je	0x42d1e9 <_mi_page_free_collect+0x69>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x42d1d2 <_mi_page_free_collect+0x52>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x42d1c0 <_mi_page_free_collect+0x40>
               	cmpl	%edx, %eax
               	jbe	0x42d216 <_mi_page_free_collect+0x96>
               	leaq	96801(%rip), %rsi       # 0x444bfe <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42d20f <_mi_page_free_collect+0x8f>
               	movq	8(%rbx), %rcx
               	testq	%rcx, %rcx
               	jne	0x42d234 <_mi_page_free_collect+0xb4>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x42d1f2 <_mi_page_free_collect+0x72>
               	jmp	0x42d20f <_mi_page_free_collect+0x8f>
               	testb	%bpl, %bpl
               	je	0x42d20f <_mi_page_free_collect+0x8f>
               	movq	%rax, %rsi
               	movq	%rsi, %rdx
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	jne	0x42d23c <_mi_page_free_collect+0xbc>
               	movq	%rcx, (%rdx)
               	jmp	0x42d1fb <_mi_page_free_collect+0x7b>
               	nopl	(%rax)

<_mi_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %rax
               	movq	(%rax), %r8
               	movq	40(%rdi), %r14
               	movq	56(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x42d27c <_mi_page_free+0x2c>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rcx)
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42d289 <_mi_page_free+0x39>
               	movq	%rcx, 56(%rax)
               	cmpq	%rdi, 8(%rsi)
               	je	0x42d29e <_mi_page_free+0x4e>
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d48e <_mi_page_free+0x23e>
               	jmp	0x42d2b3 <_mi_page_free+0x63>
               	movq	56(%rdi), %rcx
               	movq	%rcx, 8(%rsi)
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42d48e <_mi_page_free+0x23e>
               	movq	%rax, (%rsi)
               	movq	16(%rsi), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42d48e <_mi_page_free+0x23e>
               	testq	%rax, %rax
               	leaq	99759(%rip), %r10       # 0x445880 <_mi_page_empty>
               	cmovneq	%rax, %r10
               	leaq	7(%rcx), %r11
               	shrq	$3, %r11
               	cmpq	%r10, 8(%r14,%r11,8)
               	je	0x42d48e <_mi_page_free+0x23e>
               	cmpq	$9, %rcx
               	jae	0x42d2f5 <_mi_page_free+0xa5>
               	xorl	%ecx, %ecx
               	jmp	0x42d3b2 <_mi_page_free+0x162>
               	cmpq	$64, %rcx
               	ja	0x42d305 <_mi_page_free+0xb5>
               	leal	1(%r11), %r15d
               	andb	$-2, %r15b
               	jmp	0x42d320 <_mi_page_free+0xd0>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rbx,4), %r15d
               	addb	$-3, %r15b
               	leaq	1040(%r14), %rax
               	addq	$-24, %rsi
               	nopl	(%rax,%rax)
               	movq	16(%rsi), %rbx
               	addq	$7, %rbx
               	movq	%rbx, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rbx
               	jb	0x42d390 <_mi_page_free+0x140>
               	cmpq	$71, %rbx
               	ja	0x42d360 <_mi_page_free+0x110>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x42d390 <_mi_page_free+0x140>
               	movb	$73, %cl
               	cmpq	$2097159, %rbx          # imm = 0x200007
               	ja	0x42d390 <_mi_page_free+0x140>
               	leaq	-1(%rbp), %rbx
               	bsrq	%rbx, %r12
               	movl	%r12d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rbx
               	andl	$3, %ebx
               	leal	(%rbx,%r12,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rsi
               	jbe	0x42d39e <_mi_page_free+0x14e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r15b
               	je	0x42d330 <_mi_page_free+0xe0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r11, %rbp
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42d48e <_mi_page_free+0x23e>
               	addq	$1, %r11
               	movq	%r11, %r12
               	subq	%rcx, %r12
               	cmpq	$4, %r12
               	jb	0x42d480 <_mi_page_free+0x230>
               	movq	%r12, %r15
               	andq	$-4, %r15
               	movq	%r10, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r15), %rsi
               	movq	%rsi, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x42d3f5 <_mi_page_free+0x1a5>
               	xorl	%ebx, %ebx
               	jmp	0x42d449 <_mi_page_free+0x1f9>
               	leaq	(%r14,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42d410 <_mi_page_free+0x1c0>
               	testq	%rbp, %rbp
               	je	0x42d472 <_mi_page_free+0x222>
               	addq	%rcx, %rbx
               	leaq	(%r14,%rbx,8), %rax
               	addq	$24, %rax
               	negq	%rbp
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbp
               	jne	0x42d460 <_mi_page_free+0x210>
               	cmpq	%r15, %r12
               	je	0x42d48e <_mi_page_free+0x23e>
               	addq	%r15, %rcx
               	nop
               	movq	%r10, 8(%r14,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42d480 <_mi_page_free+0x230>
               	addq	$32, %r8
               	movq	3016(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 3016(%r14)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r9)
               	movb	6(%rdi), %al
               	andb	$-2, %al
               	movb	%al, 6(%rdi)
               	movq	$0, 40(%rdi)
               	movzbl	%dl, %esi
               	movq	%r8, %rdx
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e0d0 <_mi_segment_page_free>

<_mi_arena_free>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x42d586 <_mi_arena_free+0xb6>
               	movq	%rsi, %r14
               	testq	%rsi, %rsi
               	je	0x42d586 <_mi_arena_free+0xb6>
               	movq	%rdx, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	je	0x42d594 <_mi_arena_free+0xc4>
               	movzbl	%bl, %eax
               	leaq	213813(%rip), %rcx      # 0x461840 <mi_arenas>
               	movq	-8(%rcx,%rax,8), %r12
               	testq	%r12, %r12
               	je	0x42d5af <_mi_arena_free+0xdf>
               	movq	%rbx, %rax
               	shrq	$14, %rax
               	cmpq	%rax, 16(%r12)
               	jbe	0x42d5b8 <_mi_arena_free+0xe8>
               	shrq	$8, %rbx
               	leaq	16777215(%r14), %rsi
               	movq	%rsi, %r13
               	shrq	$24, %r13
               	cmpb	$0, 29(%r12)
               	jne	0x42d570 <_mi_arena_free+0xa0>
               	andq	$-16777216, %rsi        # imm = 0xFF000000
               	leaq	15(%rsp), %r8
               	movq	%r15, %rdi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42d980 <mi_os_commitx>
               	movq	48(%r12), %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d610 <_mi_bitmap_unclaim_across>
               	addq	$56, %r12
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42d610 <_mi_bitmap_unclaim_across>
               	testb	%al, %al
               	je	0x42d5e1 <_mi_arena_free+0x111>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movzbl	%cl, %edx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42b910 <_mi_os_free_ex>
               	leaq	95506(%rip), %rsi       # 0x444ac8 <typeinfo name for kotlin::gc::GCSchedulerData+0x14cf>
               	jmp	0x42d5bf <_mi_arena_free+0xef>
               	leaq	95565(%rip), %rsi       # 0x444b0c <typeinfo name for kotlin::gc::GCSchedulerData+0x1513>
               	movl	$22, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	movq	%rbx, %r8
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42bf40 <_mi_error_message>
               	leaq	95598(%rip), %rsi       # 0x444b56 <typeinfo name for kotlin::gc::GCSchedulerData+0x155d>
               	movl	$11, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42bf40 <_mi_error_message>
               	nopw	(%rax,%rax)

<_mi_bitmap_unclaim_across>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x42d913 <_mi_bitmap_unclaim_across+0x303>
               	cmpq	$63, %rsi
               	jbe	0x42d63b <_mi_bitmap_unclaim_across+0x2b>
               	movq	$-1, %rbp
               	jmp	0x42d658 <_mi_bitmap_unclaim_across+0x48>
               	testq	%rsi, %rsi
               	je	0x42d909 <_mi_bitmap_unclaim_across+0x2f9>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r9d, %r9d
               	xorl	%r8d, %r8d
               	xorl	%ebx, %ebx
               	leaq	(%rdi,%rax,8), %r11
               	movq	%rbp, %rcx
               	notq	%rcx
               	movq	(%rdi,%rax,8), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d670 <_mi_bitmap_unclaim_across+0x60>
               	andq	%rbp, %rax
               	cmpq	%rbp, %rax
               	sete	%r10b
               	addq	$8, %r11
               	testq	%rbx, %rbx
               	je	0x42d8cf <_mi_bitmap_unclaim_across+0x2bf>
               	movq	%r9, %rcx
               	notq	%rcx
               	leaq	-1(%rbx), %rdx
               	movq	%rbx, %rsi
               	andq	$3, %rsi
               	je	0x42d6e9 <_mi_bitmap_unclaim_across+0xd9>
               	xorl	%edi, %edi
               	nopl	(%rax)
               	movq	(%r11), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rbp
               	andq	%rcx, %rbp
               	lock
               	cmpxchgq	%rbp, (%r11)
               	jne	0x42d6c0 <_mi_bitmap_unclaim_across+0xb0>
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edi, %r10d
               	addq	$8, %r11
               	addq	$-1, %rsi
               	jne	0x42d6b0 <_mi_bitmap_unclaim_across+0xa0>
               	andq	$-4, %rbx
               	cmpq	$3, %rdx
               	jb	0x42d8cf <_mi_bitmap_unclaim_across+0x2bf>
               	leaq	-4(%rbx), %rdi
               	testb	$4, %dil
               	jne	0x42d798 <_mi_bitmap_unclaim_across+0x188>
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d710 <_mi_bitmap_unclaim_across+0x100>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rbx
               	andq	%rcx, %rbx
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rbx, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d730 <_mi_bitmap_unclaim_across+0x120>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rbx
               	andq	%rcx, %rbx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rbx, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d750 <_mi_bitmap_unclaim_across+0x140>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 24(%r11)
               	jne	0x42d770 <_mi_bitmap_unclaim_across+0x160>
               	andq	%rsi, %rax
               	andq	%r9, %rax
               	xorl	%edx, %edx
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edx, %r10d
               	addq	$32, %r11
               	movq	%rdi, %rbx
               	cmpq	$4, %rdi
               	jb	0x42d8cf <_mi_bitmap_unclaim_across+0x2bf>
               	xorl	%r14d, %r14d
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42d7c0 <_mi_bitmap_unclaim_across+0x1b0>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42d7e0 <_mi_bitmap_unclaim_across+0x1d0>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42d800 <_mi_bitmap_unclaim_across+0x1f0>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rdx
               	nop
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 24(%r11)
               	movq	%rax, %rdx
               	jne	0x42d820 <_mi_bitmap_unclaim_across+0x210>
               	andq	%rsi, %rdx
               	movq	32(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 32(%r11)
               	movq	%rax, %rsi
               	jne	0x42d840 <_mi_bitmap_unclaim_across+0x230>
               	movq	40(%r11), %rbp
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	andq	%rcx, %rdi
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdi, 40(%r11)
               	movq	%rax, %rbp
               	jne	0x42d860 <_mi_bitmap_unclaim_across+0x250>
               	andq	%rsi, %rbp
               	movq	48(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 48(%r11)
               	movq	%rax, %rsi
               	jne	0x42d880 <_mi_bitmap_unclaim_across+0x270>
               	andq	%rbp, %rsi
               	addq	$-8, %rbx
               	movq	56(%r11), %rax
               	nop
               	movq	%rax, %rdi
               	andq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 56(%r11)
               	jne	0x42d8a0 <_mi_bitmap_unclaim_across+0x290>
               	andq	%rsi, %rax
               	andq	%rdx, %rax
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%r14d, %r10d
               	addq	$64, %r11
               	testq	%rbx, %rbx
               	jne	0x42d7b0 <_mi_bitmap_unclaim_across+0x1a0>
               	testq	%r8, %r8
               	je	0x42d8fd <_mi_bitmap_unclaim_across+0x2ed>
               	movq	%r8, %rcx
               	notq	%rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42d8e0 <_mi_bitmap_unclaim_across+0x2d0>
               	andq	%r8, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%ecx, %r10d
               	andb	$1, %r10b
               	movl	%r10d, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	xorl	%r9d, %r9d
               	xorl	%ebp, %ebp
               	jmp	0x42d65b <_mi_bitmap_unclaim_across+0x4b>
               	movl	$64, %r10d
               	subq	%rdx, %r10
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r9
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r8d, %r8d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r10, %rsi
               	movq	%rsi, %rbx
               	shrq	$6, %rbx
               	andq	$63, %rsi
               	je	0x42d660 <_mi_bitmap_unclaim_across+0x50>
               	movq	$-1, %r9
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x42d660 <_mi_bitmap_unclaim_across+0x50>
               	nopl	(%rax)

<mi_os_commitx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%edx, %r14d
               	testq	%r8, %r8
               	je	0x42d994 <mi_os_commitx+0x14>
               	movb	$0, (%r8)
               	movb	$1, %r15b
               	testq	%rdi, %rdi
               	je	0x42dc78 <mi_os_commitx+0x2f8>
               	testq	%rsi, %rsi
               	je	0x42dc78 <mi_os_commitx+0x2f8>
               	movq	206296(%rip), %rbp      # 0x45ff88 <os_page_size>
               	movq	%rbp, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %rdx # imm = 0x5555555555555555
               	andq	%rax, %rdx
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	movabsq	$3689348814741910323, %rdx # imm = 0x3333333333333333
               	movq	%rax, %rbx
               	andq	%rdx, %rbx
               	shrq	$2, %rax
               	andq	%rdx, %rax
               	addq	%rbx, %rax
               	movq	%rax, %rdx
               	shrq	$4, %rdx
               	addq	%rax, %rdx
               	movabsq	$1085102592571150095, %rbx # imm = 0xF0F0F0F0F0F0F0F
               	andq	%rdx, %rbx
               	movabsq	$72340172838076673, %rax # imm = 0x101010101010101
               	imulq	%rbx, %rax
               	shrq	$56, %rax
               	testb	%cl, %cl
               	je	0x42da3d <mi_os_commitx+0xbd>
               	leaq	(%rdi,%rbp), %r12
               	addq	$-1, %r12
               	cmpl	$2, %eax
               	jae	0x42da6d <mi_os_commitx+0xed>
               	negq	%rbp
               	andq	%rbp, %r12
               	addq	%rsi, %rdi
               	andq	%rbp, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42db1d <mi_os_commitx+0x19d>
               	jmp	0x42dc78 <mi_os_commitx+0x2f8>
               	cmpl	$2, %eax
               	jae	0x42da83 <mi_os_commitx+0x103>
               	movq	%rbp, %rax
               	negq	%rax
               	movq	%rax, %r12
               	andq	%rdi, %r12
               	addq	%rsi, %rdi
               	leaq	(%rdi,%rbp), %rbx
               	addq	$-1, %rbx
               	andq	%rax, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42db1d <mi_os_commitx+0x19d>
               	jmp	0x42dc78 <mi_os_commitx+0x2f8>
               	movq	%r12, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42da9c <mi_os_commitx+0x11c>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42daa3 <mi_os_commitx+0x123>
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42dabf <mi_os_commitx+0x13f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rcx
               	jmp	0x42dac7 <mi_os_commitx+0x147>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %r12
               	addq	%rsi, %rdi
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42dae9 <mi_os_commitx+0x169>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42daef <mi_os_commitx+0x16f>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ecx
               	leaq	(%rdi,%rsi), %rax
               	leaq	(%rax,%rbp), %rbx
               	addq	$-1, %rbx
               	movq	%rbx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42db02 <mi_os_commitx+0x182>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42db08 <mi_os_commitx+0x188>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42db1d <mi_os_commitx+0x19d>
               	jmp	0x42dc78 <mi_os_commitx+0x2f8>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rcx, %rdi
               	subq	%rdx, %rbx
               	movq	%rdi, %r12
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jle	0x42dc78 <mi_os_commitx+0x2f8>
               	movq	%rsi, %rcx
               	testb	%r14b, %r14b
               	je	0x42db84 <mi_os_commitx+0x204>
               	lock
               	xaddq	%rcx, 211654(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	addq	%rsi, %rcx
               	movq	211636(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42db50 <mi_os_commitx+0x1d0>
               	lock
               	cmpxchgq	%rcx, 211618(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42db40 <mi_os_commitx+0x1c0>
               	testq	%rsi, %rsi
               	jle	0x42dbbf <mi_os_commitx+0x23f>
               	lock
               	addq	%rsi, 211587(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	leaq	211484(%rip), %rax      # 0x461580 <_mi_stats_main>
               	leaq	211957(%rip), %rcx      # 0x461760 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jb	0x42dbdd <mi_os_commitx+0x25d>
               	lock
               	addq	$1, 211951(%rip)        # 0x461768 <_mi_stats_main+0x1e8>
               	lock
               	addq	$1, 211934(%rip)        # 0x461760 <_mi_stats_main+0x1e0>
               	jmp	0x42dc01 <mi_os_commitx+0x281>
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 211557(%rip)      # 0x4615f8 <_mi_stats_main+0x78>
               	subq	%rsi, %rdx
               	movq	211539(%rip), %rax      # 0x4615f0 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42dbb0 <mi_os_commitx+0x230>
               	lock
               	cmpxchgq	%rdx, 211522(%rip)      # 0x4615f0 <_mi_stats_main+0x70>
               	jne	0x42dba0 <mi_os_commitx+0x220>
               	testq	%rsi, %rsi
               	js	0x42dc17 <mi_os_commitx+0x297>
               	lock
               	addq	%rsi, 211499(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	jmp	0x42dc1f <mi_os_commitx+0x29f>
               	negq	%rsi
               	lock
               	addq	%rsi, 211486(%rip)      # 0x4615e8 <_mi_stats_main+0x68>
               	leaq	211375(%rip), %rax      # 0x461580 <_mi_stats_main>
               	leaq	211848(%rip), %rcx      # 0x461760 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jae	0x42db70 <mi_os_commitx+0x1f0>
               	movq	211844(%rip), %rax      # 0x461768 <_mi_stats_main+0x1e8>
               	addq	$1, %rax
               	movq	%rax, 211833(%rip)      # 0x461768 <_mi_stats_main+0x1e8>
               	movq	211818(%rip), %rax      # 0x461760 <_mi_stats_main+0x1e0>
               	addq	$1, %rax
               	movq	%rax, 211807(%rip)      # 0x461760 <_mi_stats_main+0x1e0>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	0x4138d0 <mprotect@plt>
               	testl	%eax, %eax
               	jne	0x42dc3f <mi_os_commitx+0x2bf>
               	jmp	0x42dc78 <mi_os_commitx+0x2f8>
               	lock
               	addq	%rcx, 211393(%rip)      # 0x4615e0 <_mi_stats_main+0x60>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	$16434, %ecx            # imm = 0x4032
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	%r12, %rax
               	je	0x42dc78 <mi_os_commitx+0x2f8>
               	callq	0x413820 <__errno_location@plt>
               	movl	(%rax), %r8d
               	testl	%r8d, %r8d
               	je	0x42dc78 <mi_os_commitx+0x2f8>
               	leaq	94008(%rip), %rax       # 0x444b8b <typeinfo name for kotlin::gc::GCSchedulerData+0x1592>
               	leaq	94008(%rip), %rsi       # 0x444b92 <typeinfo name for kotlin::gc::GCSchedulerData+0x1599>
               	testb	%r14b, %r14b
               	cmovneq	%rax, %rsi
               	leaq	94003(%rip), %rdi       # 0x444b9b <typeinfo name for kotlin::gc::GCSchedulerData+0x15a2>
               	xorl	%r15d, %r15d
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movl	%r15d, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_mem_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42de07 <_mi_mem_free+0x177>
               	testq	%rsi, %rsi
               	je	0x42de07 <_mi_mem_free+0x177>
               	movq	%rdx, %rbx
               	movq	%rdi, %r14
               	movq	205518(%rip), %rdi      # 0x45ff88 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%rsi,%rdi), %r15
               	addq	$-1, %r15
               	testq	%rax, %rdi
               	jne	0x42dcfb <_mi_mem_free+0x6b>
               	negq	%rdi
               	andq	%rdi, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	je	0x42dd26 <_mi_mem_free+0x96>
               	movzbl	%cl, %ecx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42d4d0 <_mi_arena_free>
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x42dd11 <_mi_mem_free+0x81>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x42dd18 <_mi_mem_free+0x88>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rdx, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	jne	0x42dcdc <_mi_mem_free+0x4c>
               	cmpq	$67108864, %r15         # imm = 0x4000000
               	ja	0x42de07 <_mi_mem_free+0x177>
               	shrq	$7, %rbx
               	andl	$63, %r12d
               	leaq	4194303(%r15), %rbp
               	movq	%rbp, %r13
               	shrq	$22, %r13
               	shlq	$6, %rbx
               	leaq	245164(%rip), %rdi      # 0x469b00 <regions>
               	movq	(%rbx,%rdi), %rax
               	movq	8(%rbx,%rdi), %rdx
               	leaq	(%r12,%r13), %rsi
               	cmpq	$64, %rsi
               	ja	0x42de07 <_mi_mem_free+0x177>
               	movq	%r12, %rsi
               	shlq	$22, %rsi
               	addq	%rsi, %rdx
               	cmpq	%r14, %rdx
               	jne	0x42de07 <_mi_mem_free+0x177>
               	testl	$4194303, %r15d         # imm = 0x3FFFFF
               	jne	0x42ddae <_mi_mem_free+0x11e>
               	testb	%cl, %cl
               	je	0x42ddae <_mi_mem_free+0x11e>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 32(%rbx,%rdi)
               	testb	%r8b, %r8b
               	je	0x42ddd6 <_mi_mem_free+0x146>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 40(%rbx,%rdi)
               	testl	$768, %eax              # imm = 0x300
               	je	0x42de16 <_mi_mem_free+0x186>
               	leaq	(%rbx,%rdi), %rax
               	addq	$16, %rax
               	movq	$-1, %rdx
               	testq	%r13, %r13
               	je	0x42de03 <_mi_mem_free+0x173>
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	lock
               	andq	%rdx, (%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$12, %edi
               	callq	0x42aae0 <mi_option_get>
               	leaq	244953(%rip), %rdi      # 0x469b00 <regions>
               	testq	%rax, %rax
               	je	0x42dddd <_mi_mem_free+0x14d>
               	movl	$3, %edi
               	callq	0x42aae0 <mi_option_get>
               	leaq	244931(%rip), %rdi      # 0x469b00 <regions>
               	testq	%rax, %rax
               	jne	0x42de58 <_mi_mem_free+0x1c8>
               	movl	$5, %edi
               	callq	0x42aae0 <mi_option_get>
               	leaq	244909(%rip), %rdi      # 0x469b00 <regions>
               	testq	%rax, %rax
               	je	0x42dddd <_mi_mem_free+0x14d>
               	leaq	(%rbx,%rdi), %rsi
               	addq	$40, %rsi
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	movq	40(%rbx,%rdi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdx, %rcx
               	lock
               	cmpxchgq	%rcx, (%rsi)
               	jne	0x42de90 <_mi_mem_free+0x200>
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	je	0x42dddd <_mi_mem_free+0x14d>
               	movq	310352(%rip), %rax      # 0x479b00 <abandoned_readers>
               	testq	%rax, %rax
               	je	0x42dec3 <_mi_mem_free+0x233>
               	pause
               	movq	310338(%rip), %rax      # 0x479b00 <abandoned_readers>
               	testq	%rax, %rax
               	jne	0x42deb5 <_mi_mem_free+0x225>
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%r14, %rdi
               	movq	%rbp, %rsi
               	callq	0x42df00 <_mi_os_reset>
               	leaq	244772(%rip), %rax      # 0x469b00 <regions>
               	addq	%rbx, %rax
               	addq	$16, %rax
               	cmpq	$264241152, %r15        # imm = 0xFC00000
               	jbe	0x42dde5 <_mi_mem_free+0x155>
               	xorl	%edx, %edx
               	jmp	0x42de03 <_mi_mem_free+0x173>
               	nopw	(%rax,%rax)

<_mi_os_reset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	movl	$5, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42df40 <_mi_os_reset+0x40>
               	leaq	7(%rsp), %r8
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42d980 <mi_os_commitx>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%r12, %r12
               	je	0x42df34 <_mi_os_reset+0x34>
               	testq	%r15, %r15
               	je	0x42df34 <_mi_os_reset+0x34>
               	movq	204855(%rip), %rsi      # 0x45ff88 <os_page_size>
               	leaq	-1(%rsi), %rax
               	leaq	(%r12,%rsi), %r14
               	addq	$-1, %r14
               	testq	%rax, %rsi
               	jne	0x42df78 <_mi_os_reset+0x78>
               	negq	%rsi
               	andq	%rsi, %r14
               	addq	%r15, %r12
               	andq	%rsi, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jg	0x42dfcc <_mi_os_reset+0xcc>
               	jmp	0x42df34 <_mi_os_reset+0x34>
               	movq	%r14, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42df91 <_mi_os_reset+0x91>
               	movq	%r14, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rcx
               	jmp	0x42df9a <_mi_os_reset+0x9a>
               	movl	%r14d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ecx
               	addq	%r15, %r12
               	movq	%r12, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42dfb3 <_mi_os_reset+0xb3>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42dfba <_mi_os_reset+0xba>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	subq	%rcx, %r14
               	subq	%rdx, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jle	0x42df34 <_mi_os_reset+0x34>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 210496(%rip)      # 0x461618 <_mi_stats_main+0x98>
               	addq	%r12, %rcx
               	movq	210478(%rip), %rax      # 0x461610 <_mi_stats_main+0x90>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42e000 <_mi_os_reset+0x100>
               	lock
               	cmpxchgq	%rcx, 210450(%rip)      # 0x461610 <_mi_stats_main+0x90>
               	jne	0x42dff0 <_mi_os_reset+0xf0>
               	testq	%r12, %r12
               	jle	0x42e00f <_mi_os_reset+0x10f>
               	lock
               	addq	%r12, 210419(%rip)      # 0x461600 <_mi_stats_main+0x80>
               	jmp	0x42e01d <_mi_os_reset+0x11d>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 210411(%rip)      # 0x461608 <_mi_stats_main+0x88>
               	movq	205156(%rip), %r15      # 0x460188 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42df34 <_mi_os_reset+0x34>
               	callq	0x413820 <__errno_location@plt>
               	movq	%rax, %rbx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movl	(%rbx), %ecx
               	cmpl	$11, %ecx
               	jne	0x42e074 <_mi_os_reset+0x174>
               	movl	$0, (%rbx)
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42e050 <_mi_os_reset+0x150>
               	jmp	0x42df34 <_mi_os_reset+0x34>
               	cmpl	$8, %r15d
               	jne	0x42e0a4 <_mi_os_reset+0x1a4>
               	cmpl	$22, %ecx
               	jne	0x42e0a4 <_mi_os_reset+0x1a4>
               	movq	$4, 205054(%rip)        # 0x460188 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	$4, %edx
               	callq	0x4138b0 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42df34 <_mi_os_reset+0x34>
               	movl	(%rbx), %ecx
               	leaq	92955(%rip), %rdi       # 0x444bc6 <typeinfo name for kotlin::gc::GCSchedulerData+0x15cd>
               	movq	%r14, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42bb40 <_mi_warning_message>
               	nopw	%cs:(%rax,%rax)

<_mi_segment_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebx
               	movq	%rdi, %r12
               	movq	%rdi, %r13
               	andq	$-4194304, %r13         # imm = 0xFFC00000
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e20e <_mi_segment_page_free+0x13e>
               	movl	%ebx, 4(%rsp)
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	40(%r14), %r15
               	testq	%r15, %r15
               	je	0x42e1f4 <_mi_segment_page_free+0x124>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x42e167 <_mi_segment_page_free+0x97>
               	nop
               	movl	$0, 16(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbp)
               	testq	%r15, %r15
               	je	0x42e1f4 <_mi_segment_page_free+0x124>
               	movq	%r15, %rbp
               	cmpl	%ebx, 16(%r15)
               	jg	0x42e1fe <_mi_segment_page_free+0x12e>
               	movq	56(%rbp), %r15
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e150 <_mi_segment_page_free+0x80>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42e150 <_mi_segment_page_free+0x80>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e150 <_mi_segment_page_free+0x80>
               	cmpl	$3, 112(%rdx)
               	jne	0x42e1b1 <_mi_segment_page_free+0xe1>
               	movq	72(%rdx), %rsi
               	jmp	0x42e1bd <_mi_segment_page_free+0xed>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x42e1dc <_mi_segment_page_free+0x10c>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x42e150 <_mi_segment_page_free+0x80>
               	callq	0x42df00 <_mi_os_reset>
               	jmp	0x42e150 <_mi_segment_page_free+0x80>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	jmp	0x42e20a <_mi_segment_page_free+0x13a>
               	movq	%rbp, 40(%r14)
               	movq	$0, 48(%rbp)
               	movl	4(%rsp), %ebx
               	movq	%r13, %rdi
               	movq	%r12, %rsi
               	movq	%r14, %rdx
               	callq	0x42e2c0 <mi_segment_page_clear>
               	movq	56(%r13), %rax
               	testq	%rax, %rax
               	je	0x42e244 <_mi_segment_page_free+0x174>
               	cmpq	40(%r13), %rax
               	jne	0x42e260 <_mi_segment_page_free+0x190>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ef00 <mi_segment_abandon>
               	movzbl	%bl, %esi
               	movq	%r13, %rdi
               	movq	%r14, %rdx
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e530 <mi_segment_free>
               	addq	$1, %rax
               	cmpq	64(%r13), %rax
               	jne	0x42e2a2 <_mi_segment_page_free+0x1d2>
               	movl	112(%r13), %eax
               	cmpl	$1, %eax
               	je	0x42e27c <_mi_segment_page_free+0x1ac>
               	testl	%eax, %eax
               	je	0x42e280 <_mi_segment_page_free+0x1b0>
               	xorl	%r14d, %r14d
               	jmp	0x42e280 <_mi_segment_page_free+0x1b0>
               	addq	$16, %r14
               	movq	$0, 24(%r13)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r13)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r13, (%rcx)
               	movq	%r13, 8(%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_segment_page_clear>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movzwl	2(%rsi), %edi
               	movl	20(%rsi), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x42e4bd <mi_segment_page_clear+0x1fd>
               	imulq	%rdi, %rsi
               	movq	112(%r15), %rdi
               	addq	$160, %rdi
               	callq	0x42bab0 <_mi_stat_decrease>
               	movq	112(%r15), %rcx
               	leaq	32(%rcx), %rax
               	leaq	209528(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42e345 <mi_segment_page_clear+0x85>
               	leaq	210092(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e345 <mi_segment_page_clear+0x85>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 56(%rcx)
               	addq	$-1, %rdx
               	movq	48(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e33d <mi_segment_page_clear+0x7d>
               	lock
               	cmpxchgq	%rdx, 48(%rcx)
               	jne	0x42e330 <mi_segment_page_clear+0x70>
               	lock
               	addq	$1, 40(%rcx)
               	jmp	0x42e367 <mi_segment_page_clear+0xa7>
               	movq	56(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%rcx)
               	cmpq	48(%rcx), %rax
               	jle	0x42e35b <mi_segment_page_clear+0x9b>
               	movq	%rax, 48(%rcx)
               	movq	40(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rcx)
               	movb	1(%rbx), %al
               	andb	$-10, %al
               	movb	%al, 1(%rbx)
               	movl	20(%rbx), %eax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 22(%rbx)
               	movups	%xmm0, 6(%rbx)
               	movups	%xmm0, 48(%rbx)
               	movups	%xmm0, 38(%rbx)
               	movl	%eax, 20(%rbx)
               	movq	56(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%r14)
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e442 <mi_segment_page_clear+0x182>
               	cmpb	$0, 8(%r14)
               	jne	0x42e442 <mi_segment_page_clear+0x182>
               	movb	1(%rbx), %al
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e442 <mi_segment_page_clear+0x182>
               	movl	$14, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e453 <mi_segment_page_clear+0x193>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	(%rsp), %rax
               	imull	$1000, %eax, %ecx       # imm = 0x3E8
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %r14
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %r14
               	addl	%eax, %r14d
               	addl	%ecx, %r14d
               	movl	$14, %edi
               	callq	0x42aae0 <mi_option_get>
               	addl	%r14d, %eax
               	movl	%eax, 16(%rbx)
               	movq	32(%r15), %rax
               	movq	%rax, 48(%rbx)
               	movq	$0, 56(%rbx)
               	leaq	56(%rax), %rcx
               	leaq	40(%r15), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%rbx, (%rcx)
               	movq	%rbx, 32(%r15)
               	movl	$0, 2(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e442 <mi_segment_page_clear+0x182>
               	cmpb	$0, 8(%r14)
               	jne	0x42e442 <mi_segment_page_clear+0x182>
               	movb	1(%rbx), %al
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e442 <mi_segment_page_clear+0x182>
               	cmpl	$3, 112(%r14)
               	jne	0x42e483 <mi_segment_page_clear+0x1c3>
               	movq	72(%r14), %rsi
               	jmp	0x42e48f <mi_segment_page_clear+0x1cf>
               	movq	96(%r14), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movb	(%rbx), %cl
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r14, %rdi
               	testb	%cl, %cl
               	jne	0x42e4ac <mi_segment_page_clear+0x1ec>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e442 <mi_segment_page_clear+0x182>
               	callq	0x42df00 <_mi_os_reset>
               	jmp	0x42e442 <mi_segment_page_clear+0x182>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x42e4d4 <mi_segment_page_clear+0x214>
               	movq	72(%rax), %r8
               	jmp	0x42e4e1 <mi_segment_page_clear+0x221>
               	movq	96(%rax), %rcx
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	cmpb	$0, (%rbx)
               	jne	0x42e51b <mi_segment_page_clear+0x25b>
               	movq	80(%rax), %rcx
               	subq	%rcx, %r8
               	cmpl	$1, %edx
               	ja	0x42e51b <mi_segment_page_clear+0x25b>
               	addq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x42e505 <mi_segment_page_clear+0x245>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42e509 <mi_segment_page_clear+0x249>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rsi
               	jmp	0x42e2e5 <mi_segment_page_clear+0x25>
               	nopw	%cs:(%rax,%rax)

<mi_segment_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%sil, %sil
               	movq	%rdi, (%rsp)
               	je	0x42e57a <mi_segment_free+0x4a>
               	movl	$11, %edi
               	callq	0x42aae0 <mi_option_get>
               	cmpb	$0, 8(%r14)
               	je	0x42e5a4 <mi_segment_free+0x74>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e759 <mi_segment_free+0x229>
               	cmpl	$1, %eax
               	jne	0x42e7cf <mi_segment_free+0x29f>
               	leaq	16(%r12), %rax
               	jmp	0x42e761 <mi_segment_free+0x231>
               	cmpb	$0, 8(%r14)
               	je	0x42e6bf <mi_segment_free+0x18f>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42e779 <mi_segment_free+0x249>
               	cmpl	$1, %eax
               	jne	0x42e81b <mi_segment_free+0x2eb>
               	leaq	16(%r12), %rax
               	jmp	0x42e785 <mi_segment_free+0x255>
               	movq	64(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x42e55b <mi_segment_free+0x2b>
               	testq	%rax, %rax
               	je	0x42ee1a <mi_segment_free+0x8ea>
               	leaq	120(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x42e5d1 <mi_segment_free+0xa1>
               	nop
               	movq	64(%r14), %rcx
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	%rcx, %rbp
               	jae	0x42e55b <mi_segment_free+0x2b>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42e5c4 <mi_segment_free+0x94>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42e5ef <mi_segment_free+0xbf>
               	testq	%rcx, %rcx
               	jne	0x42e5f4 <mi_segment_free+0xc4>
               	jmp	0x42e601 <mi_segment_free+0xd1>
               	testq	%rcx, %rcx
               	je	0x42e66d <mi_segment_free+0x13d>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42e605 <mi_segment_free+0xd5>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r12), %rbx
               	je	0x42e656 <mi_segment_free+0x126>
               	cmpq	32(%r12), %rbx
               	je	0x42e666 <mi_segment_free+0x136>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42e5c0 <mi_segment_free+0x90>
               	cmpb	$0, 8(%r14)
               	jne	0x42e5c0 <mi_segment_free+0x90>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42e5c0 <mi_segment_free+0x90>
               	cmpl	$3, 112(%r14)
               	jne	0x42e67d <mi_segment_free+0x14d>
               	movq	72(%r14), %rsi
               	jmp	0x42e689 <mi_segment_free+0x159>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r12)
               	cmpq	32(%r12), %rbx
               	jne	0x42e613 <mi_segment_free+0xe3>
               	movq	%rax, 32(%r12)
               	jmp	0x42e613 <mi_segment_free+0xe3>
               	cmpq	32(%r12), %rbx
               	je	0x42e605 <mi_segment_free+0xd5>
               	cmpq	40(%r12), %rbx
               	jne	0x42e621 <mi_segment_free+0xf1>
               	jmp	0x42e605 <mi_segment_free+0xd5>
               	movq	96(%r14), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r14, %rdi
               	testb	%cl, %cl
               	jne	0x42e6a7 <mi_segment_free+0x177>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42e5c0 <mi_segment_free+0x90>
               	callq	0x42df00 <_mi_os_reset>
               	jmp	0x42e5c0 <mi_segment_free+0x90>
               	movq	64(%r14), %rax
               	testq	%rax, %rax
               	je	0x42e585 <mi_segment_free+0x55>
               	leaq	120(%r14), %rcx
               	xorps	%xmm0, %xmm0
               	jmp	0x42e6fe <mi_segment_free+0x1ce>
               	movq	56(%rcx), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rcx
               	je	0x42e742 <mi_segment_free+0x212>
               	movl	$0, 16(%rcx)
               	movups	%xmm0, 48(%rcx)
               	addq	$64, %rcx
               	addq	$-1, %rax
               	je	0x42e585 <mi_segment_free+0x55>
               	movzbl	1(%rcx), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42e6f0 <mi_segment_free+0x1c0>
               	movq	48(%rcx), %rdx
               	movq	56(%rcx), %rsi
               	testq	%rdx, %rdx
               	je	0x42e71e <mi_segment_free+0x1ee>
               	testq	%rsi, %rsi
               	jne	0x42e723 <mi_segment_free+0x1f3>
               	jmp	0x42e730 <mi_segment_free+0x200>
               	testq	%rsi, %rsi
               	je	0x42e749 <mi_segment_free+0x219>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e734 <mi_segment_free+0x204>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rcx
               	je	0x42e6d5 <mi_segment_free+0x1a5>
               	cmpq	32(%r12), %rcx
               	jne	0x42e6e5 <mi_segment_free+0x1b5>
               	movq	%rdx, 32(%r12)
               	jmp	0x42e6e5 <mi_segment_free+0x1b5>
               	cmpq	32(%r12), %rcx
               	je	0x42e734 <mi_segment_free+0x204>
               	cmpq	40(%r12), %rcx
               	jne	0x42e6f0 <mi_segment_free+0x1c0>
               	jmp	0x42e734 <mi_segment_free+0x204>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e7cf <mi_segment_free+0x29f>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e79d <mi_segment_free+0x26d>
               	testq	%rsi, %rsi
               	jne	0x42e7a6 <mi_segment_free+0x276>
               	jmp	0x42e7b2 <mi_segment_free+0x282>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42e81b <mi_segment_free+0x2eb>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42e7e9 <mi_segment_free+0x2b9>
               	testq	%rsi, %rsi
               	jne	0x42e7f2 <mi_segment_free+0x2c2>
               	jmp	0x42e7fe <mi_segment_free+0x2ce>
               	testq	%rsi, %rsi
               	je	0x42eea7 <mi_segment_free+0x977>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e7b6 <mi_segment_free+0x286>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42ed67 <mi_segment_free+0x837>
               	cmpq	%r14, 8(%rax)
               	je	0x42ed74 <mi_segment_free+0x844>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r12), %rdi
               	addq	$160, %rdi
               	movq	80(%r14), %rsi
               	callq	0x42bab0 <_mi_stat_decrease>
               	jmp	0x42eb5e <mi_segment_free+0x62e>
               	testq	%rsi, %rsi
               	je	0x42eeb5 <mi_segment_free+0x985>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42e802 <mi_segment_free+0x2d2>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42ed81 <mi_segment_free+0x851>
               	cmpq	%r14, 8(%rax)
               	je	0x42ed8e <mi_segment_free+0x85e>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r12), %rdi
               	addq	$160, %rdi
               	movq	80(%r14), %rsi
               	callq	0x42bab0 <_mi_stat_decrease>
               	cmpq	$4194304, 72(%r14)      # imm = 0x400000
               	jne	0x42eb5e <mi_segment_free+0x62e>
               	movl	$9, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	%rax, %rbx
               	movq	88(%r12), %rax
               	cmpq	%rbx, %rax
               	jae	0x42e867 <mi_segment_free+0x337>
               	movq	64(%r12), %rcx
               	shrq	$3, %rcx
               	cmpq	%rcx, %rax
               	jbe	0x42ed9b <mi_segment_free+0x86b>
               	cmpq	%rbx, %rax
               	jbe	0x42eb5e <mi_segment_free+0x62e>
               	leaq	208137(%rip), %rdi      # 0x461580 <_mi_stats_main>
               	movl	$1, %r14d
               	jmp	0x42e8b2 <mi_segment_free+0x382>
               	nop
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	movq	(%r13), %rdx
               	andb	$1, %r15b
               	movzbl	%al, %r8d
               	movzbl	%r15b, %ecx
               	movq	%r13, %rdi
               	callq	0x42dc90 <_mi_mem_free>
               	movq	88(%r12), %rax
               	leaq	208087(%rip), %rdi      # 0x461580 <_mi_stats_main>
               	cmpq	%rbx, %rax
               	jbe	0x42eb5e <mi_segment_free+0x62e>
               	movq	104(%r12), %r13
               	testq	%r13, %r13
               	je	0x42e8a9 <mi_segment_free+0x379>
               	addq	$-1, %rax
               	movq	%rax, 88(%r12)
               	movq	24(%r13), %rax
               	movq	%rax, 104(%r12)
               	movq	$0, 24(%r13)
               	movq	112(%r12), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rdi, %rax
               	jb	0x42e930 <mi_segment_free+0x400>
               	leaq	208594(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42e930 <mi_segment_free+0x400>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e920 <mi_segment_free+0x3f0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42e910 <mi_segment_free+0x3e0>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42e964 <mi_segment_free+0x434>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42e952 <mi_segment_free+0x422>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	72(%r13), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	cmpq	%rdi, %rcx
               	setae	%dl
               	leaq	208448(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42e9d0 <mi_segment_free+0x4a0>
               	testb	%al, %al
               	je	0x42ea07 <mi_segment_free+0x4d7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42e9bd <mi_segment_free+0x48d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42e9b0 <mi_segment_free+0x480>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42ea29 <mi_segment_free+0x4f9>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42eb1f <mi_segment_free+0x5ef>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42e9fd <mi_segment_free+0x4cd>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42e9f0 <mi_segment_free+0x4c0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42eb3f <mi_segment_free+0x60f>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42ea1d <mi_segment_free+0x4ed>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42ea46 <mi_segment_free+0x516>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%rsi, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42ea5f <mi_segment_free+0x52f>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r10
               	testq	%r10, %r10
               	je	0x42e880 <mi_segment_free+0x350>
               	cmpq	$1, %r10
               	jne	0x42ea7c <mi_segment_free+0x54c>
               	movb	$1, %r15b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42ead4 <mi_segment_free+0x5a4>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	nopl	(%rax,%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r15b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42eaa0 <mi_segment_free+0x570>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42eaf0 <mi_segment_free+0x5c0>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r15b
               	testb	$1, %al
               	je	0x42e883 <mi_segment_free+0x353>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42aae0 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r15b, %r15d
               	movl	$0, %eax
               	cmovnel	%eax, %r15d
               	movb	$1, %al
               	jmp	0x42e885 <mi_segment_free+0x355>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42eb35 <mi_segment_free+0x605>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42ea41 <mi_segment_free+0x511>
               	jmp	0x42ea46 <mi_segment_free+0x516>
               	movq	(%rsp), %r13
               	movq	72(%r13), %r15
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	leaq	207368(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	207931(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%r15, %r15
               	jle	0x42ebc5 <mi_segment_free+0x695>
               	testb	%al, %al
               	je	0x42ebf7 <mi_segment_free+0x6c7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ebbd <mi_segment_free+0x68d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42ebb0 <mi_segment_free+0x680>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42ec19 <mi_segment_free+0x6e9>
               	testb	%al, %al
               	je	0x42ed28 <mi_segment_free+0x7f8>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jg	0x42ebed <mi_segment_free+0x6bd>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42ebe0 <mi_segment_free+0x6b0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ed48 <mi_segment_free+0x818>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42ec0d <mi_segment_free+0x6dd>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42ec36 <mi_segment_free+0x706>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%r15, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42ec4f <mi_segment_free+0x71f>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r9
               	testq	%r9, %r9
               	je	0x42ec68 <mi_segment_free+0x738>
               	cmpq	$1, %r9
               	jne	0x42ec72 <mi_segment_free+0x742>
               	movb	$1, %r14b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42ecbf <mi_segment_free+0x78f>
               	movb	$1, %r14b
               	xorl	%ebp, %ebp
               	jmp	0x42ecff <mi_segment_free+0x7cf>
               	movq	%r9, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rsi
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r14b
               	xorl	%eax, %eax
               	movl	$1, %ebp
               	movzbl	-64(%rsi), %ecx
               	movzbl	(%rsi), %ebx
               	movl	%ebx, %edx
               	andb	%cl, %dl
               	shlb	$5, %dl
               	sarb	$7, %dl
               	andb	%dl, %r14b
               	orb	%cl, %bl
               	testb	$2, %bl
               	movzbl	%al, %eax
               	cmovnel	%ebp, %eax
               	subq	$-128, %rsi
               	addq	$2, %rdi
               	jne	0x42ec90 <mi_segment_free+0x760>
               	testb	$1, %r9b
               	je	0x42ecdf <mi_segment_free+0x7af>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %edx
               	movl	$1, %eax
               	cmovel	%edx, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r14b
               	xorl	%ebp, %ebp
               	testb	$1, %al
               	je	0x42ecff <mi_segment_free+0x7cf>
               	movl	$5, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	movzbl	%r14b, %eax
               	cmovel	%eax, %ebp
               	movl	%ebp, %r14d
               	movb	$1, %bpl
               	movq	(%r13), %rdx
               	andb	$1, %r14b
               	movzbl	%bpl, %r8d
               	movzbl	%r14b, %ecx
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42dc90 <_mi_mem_free>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42ed3e <mi_segment_free+0x80e>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42ec31 <mi_segment_free+0x701>
               	jmp	0x42ec36 <mi_segment_free+0x706>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e7c9 <mi_segment_free+0x299>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e7c9 <mi_segment_free+0x299>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42e815 <mi_segment_free+0x2e5>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42e815 <mi_segment_free+0x2e5>
               	movq	104(%r12), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 24(%rdx)
               	movq	%rdx, 104(%r12)
               	addq	$1, %rax
               	movq	%rax, 88(%r12)
               	movq	112(%r12), %rdx
               	leaq	416(%rdx), %rcx
               	leaq	206775(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x42eec3 <mi_segment_free+0x993>
               	leaq	207335(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42eec3 <mi_segment_free+0x993>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 440(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	432(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x42ee10 <mi_segment_free+0x8e0>
               	lock
               	cmpxchgq	%rdi, 432(%rdx)
               	jne	0x42ee00 <mi_segment_free+0x8d0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42eeef <mi_segment_free+0x9bf>
               	leaq	120(%r14), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42ee4c <mi_segment_free+0x91c>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rax
               	je	0x42ee90 <mi_segment_free+0x960>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42e55b <mi_segment_free+0x2b>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42ee3e <mi_segment_free+0x90e>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42ee6c <mi_segment_free+0x93c>
               	testq	%rsi, %rsi
               	jne	0x42ee71 <mi_segment_free+0x941>
               	jmp	0x42ee7e <mi_segment_free+0x94e>
               	testq	%rsi, %rsi
               	je	0x42ee97 <mi_segment_free+0x967>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42ee82 <mi_segment_free+0x952>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rax
               	je	0x42ee23 <mi_segment_free+0x8f3>
               	cmpq	32(%r12), %rax
               	jne	0x42ee33 <mi_segment_free+0x903>
               	movq	%rdx, 32(%r12)
               	jmp	0x42ee33 <mi_segment_free+0x903>
               	cmpq	32(%r12), %rax
               	je	0x42ee82 <mi_segment_free+0x952>
               	cmpq	40(%r12), %rax
               	jne	0x42ee3e <mi_segment_free+0x90e>
               	jmp	0x42ee82 <mi_segment_free+0x952>
               	cmpq	%r14, (%rax)
               	jne	0x42e7cf <mi_segment_free+0x29f>
               	jmp	0x42e7b6 <mi_segment_free+0x286>
               	cmpq	%r14, (%rax)
               	jne	0x42e81b <mi_segment_free+0x2eb>
               	jmp	0x42e802 <mi_segment_free+0x2d2>
               	movq	440(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 440(%rdx)
               	cmpq	432(%rdx), %rsi
               	jl	0x42eee5 <mi_segment_free+0x9b5>
               	movq	%rax, 432(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_segment_abandon>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f01b <mi_segment_abandon+0x11b>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	40(%r14), %rbp
               	testq	%rbp, %rbp
               	je	0x42f013 <mi_segment_abandon+0x113>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %r12d      # imm = 0x3E8
               	addl	%edx, %r12d
               	jmp	0x42ef87 <mi_segment_abandon+0x87>
               	nop
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	testq	%rbp, %rbp
               	je	0x42f013 <mi_segment_abandon+0x113>
               	movq	%rbp, %rbx
               	cmpl	%r12d, 16(%rbp)
               	jg	0x42f25b <mi_segment_abandon+0x35b>
               	movq	56(%rbx), %rbp
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42ef70 <mi_segment_abandon+0x70>
               	movq	%rbx, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42ef70 <mi_segment_abandon+0x70>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42ef70 <mi_segment_abandon+0x70>
               	cmpl	$3, 112(%rdx)
               	jne	0x42efd1 <mi_segment_abandon+0xd1>
               	movq	72(%rdx), %rsi
               	jmp	0x42efdd <mi_segment_abandon+0xdd>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x42effb <mi_segment_abandon+0xfb>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42ef70 <mi_segment_abandon+0x70>
               	callq	0x42df00 <_mi_os_reset>
               	jmp	0x42ef70 <mi_segment_abandon+0x70>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	movl	$11, %edi
               	callq	0x42aae0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	je	0x42f27c <mi_segment_abandon+0x37c>
               	movl	112(%r15), %eax
               	testl	%eax, %eax
               	je	0x42f043 <mi_segment_abandon+0x143>
               	cmpl	$1, %eax
               	jne	0x42f099 <mi_segment_abandon+0x199>
               	leaq	16(%r14), %rax
               	jmp	0x42f04b <mi_segment_abandon+0x14b>
               	movq	%r14, %rax
               	testq	%r14, %r14
               	je	0x42f099 <mi_segment_abandon+0x199>
               	leaq	24(%r15), %rcx
               	movq	24(%r15), %rdx
               	movq	32(%r15), %rsi
               	testq	%rdx, %rdx
               	je	0x42f063 <mi_segment_abandon+0x163>
               	testq	%rsi, %rsi
               	jne	0x42f06c <mi_segment_abandon+0x16c>
               	jmp	0x42f078 <mi_segment_abandon+0x178>
               	testq	%rsi, %rsi
               	je	0x42f470 <mi_segment_abandon+0x570>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42f07c <mi_segment_abandon+0x17c>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r15, (%rax)
               	je	0x42f39c <mi_segment_abandon+0x49c>
               	cmpq	%r15, 8(%rax)
               	jne	0x42f093 <mi_segment_abandon+0x193>
               	movq	32(%r15), %rdx
               	movq	%rdx, 8(%rax)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r14), %rcx
               	leaq	192(%rcx), %rdx
               	leaq	206037(%rip), %rsi      # 0x461580 <_mi_stats_main>
               	cmpq	%rsi, %rdx
               	jb	0x42f0fb <mi_segment_abandon+0x1fb>
               	leaq	206597(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rdx
               	jae	0x42f0fb <mi_segment_abandon+0x1fb>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 216(%rcx)
               	leaq	1(%rdi), %rbp
               	movq	208(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x42f0f0 <mi_segment_abandon+0x1f0>
               	lock
               	cmpxchgq	%rbp, 208(%rcx)
               	jne	0x42f0e0 <mi_segment_abandon+0x1e0>
               	lock
               	addq	$1, (%rdx)
               	movq	112(%r14), %rcx
               	jmp	0x42f127 <mi_segment_abandon+0x227>
               	movq	216(%rcx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 216(%rcx)
               	cmpq	208(%rcx), %rdi
               	jl	0x42f11d <mi_segment_abandon+0x21d>
               	movq	%rax, 208(%rcx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movq	72(%r15), %rdx
               	cmpq	%rsi, %rcx
               	setae	%bl
               	leaq	206472(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%bl, %al
               	testq	%rdx, %rdx
               	jle	0x42f175 <mi_segment_abandon+0x275>
               	testb	%al, %al
               	je	0x42f1a7 <mi_segment_abandon+0x2a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	addq	$-1, %rsi
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42f16d <mi_segment_abandon+0x26d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42f160 <mi_segment_abandon+0x260>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42f1c9 <mi_segment_abandon+0x2c9>
               	testb	%al, %al
               	je	0x42f3ae <mi_segment_abandon+0x4ae>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jg	0x42f19d <mi_segment_abandon+0x29d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42f190 <mi_segment_abandon+0x290>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42f3ce <mi_segment_abandon+0x4ce>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42f1bd <mi_segment_abandon+0x2bd>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42f1e2 <mi_segment_abandon+0x2e2>
               	movq	%rax, 64(%r14)
               	movq	72(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 72(%r14)
               	cmpq	80(%r14), %rax
               	jbe	0x42f1f7 <mi_segment_abandon+0x2f7>
               	movq	%rax, 80(%r14)
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	$0, 16(%r15)
               	movq	305452(%rip), %rax      # 0x479b40 <abandoned>
               	nopw	%cs:(%rax,%rax)
               	nop
               	leal	1(%rax), %ecx
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	movq	%rdx, 16(%r15)
               	andl	$4194303, %ecx          # imm = 0x3FFFFF
               	orq	%r15, %rcx
               	lock
               	cmpxchgq	%rcx, 305405(%rip)      # 0x479b40 <abandoned>
               	jne	0x42f220 <mi_segment_abandon+0x320>
               	lock
               	addq	$1, 305458(%rip)        # 0x479b80 <abandoned_count>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, 40(%r14)
               	movq	$0, 48(%rbx)
               	movl	$11, %edi
               	callq	0x42aae0 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	jne	0x42f030 <mi_segment_abandon+0x130>
               	movq	64(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42f030 <mi_segment_abandon+0x130>
               	testq	%rax, %rax
               	je	0x42f3ea <mi_segment_abandon+0x4ea>
               	leaq	120(%r15), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x42f2b5 <mi_segment_abandon+0x3b5>
               	nop
               	movq	64(%r15), %rcx
               	addq	$1, %r12
               	addq	$64, %rbx
               	cmpq	%rcx, %r12
               	jae	0x42f030 <mi_segment_abandon+0x130>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42f2a4 <mi_segment_abandon+0x3a4>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42f2d3 <mi_segment_abandon+0x3d3>
               	testq	%rcx, %rcx
               	jne	0x42f2d8 <mi_segment_abandon+0x3d8>
               	jmp	0x42f2e5 <mi_segment_abandon+0x3e5>
               	testq	%rcx, %rcx
               	je	0x42f34c <mi_segment_abandon+0x44c>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42f2e9 <mi_segment_abandon+0x3e9>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x42f338 <mi_segment_abandon+0x438>
               	cmpq	32(%r14), %rbx
               	je	0x42f346 <mi_segment_abandon+0x446>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f2a0 <mi_segment_abandon+0x3a0>
               	cmpb	$0, 8(%r15)
               	jne	0x42f2a0 <mi_segment_abandon+0x3a0>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f2a0 <mi_segment_abandon+0x3a0>
               	cmpl	$3, 112(%r15)
               	jne	0x42f35a <mi_segment_abandon+0x45a>
               	movq	72(%r15), %rsi
               	jmp	0x42f366 <mi_segment_abandon+0x466>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x42f2f5 <mi_segment_abandon+0x3f5>
               	movq	%rax, 32(%r14)
               	jmp	0x42f2f5 <mi_segment_abandon+0x3f5>
               	cmpq	32(%r14), %rbx
               	je	0x42f2e9 <mi_segment_abandon+0x3e9>
               	cmpq	40(%r14), %rbx
               	jne	0x42f303 <mi_segment_abandon+0x403>
               	jmp	0x42f2e9 <mi_segment_abandon+0x3e9>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%cl, %cl
               	jne	0x42f384 <mi_segment_abandon+0x484>
               	movq	80(%r15), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f2a0 <mi_segment_abandon+0x3a0>
               	callq	0x42df00 <_mi_os_reset>
               	jmp	0x42f2a0 <mi_segment_abandon+0x3a0>
               	movq	%rdx, (%rax)
               	cmpq	%r15, 8(%rax)
               	jne	0x42f093 <mi_segment_abandon+0x193>
               	jmp	0x42f08b <mi_segment_abandon+0x18b>
               	movq	24(%rcx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rsi
               	jl	0x42f3c4 <mi_segment_abandon+0x4c4>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	ja	0x42f1de <mi_segment_abandon+0x2de>
               	jmp	0x42f1e2 <mi_segment_abandon+0x2e2>
               	leaq	120(%r15), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42f41a <mi_segment_abandon+0x51a>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r14)
               	cmpq	32(%r14), %rax
               	je	0x42f45c <mi_segment_abandon+0x55c>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42f030 <mi_segment_abandon+0x130>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42f40c <mi_segment_abandon+0x50c>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42f43a <mi_segment_abandon+0x53a>
               	testq	%rsi, %rsi
               	jne	0x42f43f <mi_segment_abandon+0x53f>
               	jmp	0x42f44c <mi_segment_abandon+0x54c>
               	testq	%rsi, %rsi
               	je	0x42f462 <mi_segment_abandon+0x562>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42f450 <mi_segment_abandon+0x550>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r14), %rax
               	je	0x42f3f3 <mi_segment_abandon+0x4f3>
               	cmpq	32(%r14), %rax
               	jne	0x42f401 <mi_segment_abandon+0x501>
               	movq	%rdx, 32(%r14)
               	jmp	0x42f401 <mi_segment_abandon+0x501>
               	cmpq	32(%r14), %rax
               	je	0x42f450 <mi_segment_abandon+0x550>
               	cmpq	40(%r14), %rax
               	jne	0x42f40c <mi_segment_abandon+0x50c>
               	jmp	0x42f450 <mi_segment_abandon+0x550>
               	cmpq	%r15, (%rax)
               	jne	0x42f099 <mi_segment_abandon+0x199>
               	jmp	0x42f07c <mi_segment_abandon+0x17c>
               	nop

<_mi_free_delayed_block>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r15
               	movq	%rdi, %r12
               	andq	$-4194304, %r12         # imm = 0xFFC00000
               	movl	%r15d, %ebx
               	andl	$4194303, %ebx          # imm = 0x3FFFFF
               	movq	96(%r12), %rcx
               	shrq	%cl, %rbx
               	shlq	$6, %rbx
               	leaq	(%r12,%rbx), %r14
               	addq	$120, %r14
               	movq	32(%r14), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42f4dc <_mi_free_delayed_block+0x5c>
               	cmpl	$3, %ecx
               	je	0x42f4dc <_mi_free_delayed_block+0x5c>
               	cmpl	$1, %ecx
               	je	0x42f4d8 <_mi_free_delayed_block+0x58>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x42f4b2 <_mi_free_delayed_block+0x32>
               	jmp	0x42f4dc <_mi_free_delayed_block+0x5c>
               	pause
               	jmp	0x42f4b2 <_mi_free_delayed_block+0x32>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d180 <_mi_page_free_collect>
               	movq	144(%r12,%rbx), %rax
               	movq	%rax, (%r15)
               	movq	%r15, 144(%r12,%rbx)
               	movl	136(%r12,%rbx), %eax
               	addl	$-1, %eax
               	movl	%eax, 136(%r12,%rbx)
               	je	0x42f522 <_mi_free_delayed_block+0xa2>
               	testb	$1, 126(%r12,%rbx)
               	jne	0x42f535 <_mi_free_delayed_block+0xb5>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f550 <_mi_page_retire>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42f660 <_mi_page_unfull>
               	nopl	(%rax,%rax)

<_mi_page_retire>:
               	movb	6(%rdi), %dl
               	movl	%edx, %eax
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movl	20(%rdi), %r8d
               	movl	$74, %eax
               	testb	$1, %dl
               	jne	0x42f5bc <_mi_page_retire+0x6c>
               	movl	$1, %ecx
               	cmpl	$9, %r8d
               	jb	0x42f5b9 <_mi_page_retire+0x69>
               	leaq	7(%r8), %rsi
               	shrq	$3, %rsi
               	cmpl	$64, %r8d
               	ja	0x42f58f <_mi_page_retire+0x3f>
               	addl	$1, %esi
               	andl	$254, %esi
               	movq	%rsi, %rcx
               	jmp	0x42f5b9 <_mi_page_retire+0x69>
               	movl	$73, %ecx
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f5b9 <_mi_page_retire+0x69>
               	addq	$-1, %rsi
               	bsrq	%rsi, %rax
               	movl	%eax, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%rax,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	movq	40(%rdi), %rcx
               	leaq	(%rax,%rax,2), %rax
               	leaq	(%rcx,%rax,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	testb	$1, %dl
               	jne	0x42f5ec <_mi_page_retire+0x9c>
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x42f5ec <_mi_page_retire+0x9c>
               	cmpq	%rdi, 1048(%rcx,%rax,8)
               	jne	0x42f5ec <_mi_page_retire+0x9c>
               	cmpq	%rdi, (%rsi)
               	je	0x42f5f3 <_mi_page_retire+0xa3>
               	xorl	%edx, %edx
               	jmp	0x42d250 <_mi_page_free>
               	cmpl	$16385, %r8d            # imm = 0x4001
               	movl	$16, %eax
               	movl	$4, %ecx
               	cmovbl	%eax, %ecx
               	movb	7(%rdi), %al
               	andb	$1, %al
               	orb	%cl, %al
               	movb	%al, 7(%rdi)
               	movq	40(%rdi), %rax
               	subq	%rax, %rsi
               	addq	$-1040, %rsi            # imm = 0xFBF0
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rsi, %rcx
               	cmpq	3024(%rax), %rcx
               	jb	0x42f644 <_mi_page_retire+0xf4>
               	cmpq	3032(%rax), %rcx
               	ja	0x42f654 <_mi_page_retire+0x104>
               	retq
               	movq	%rcx, 3024(%rax)
               	cmpq	3032(%rax), %rcx
               	jbe	0x42f643 <_mi_page_retire+0xf3>
               	movq	%rcx, 3032(%rax)
               	retq
               	nopl	(%rax)

<_mi_page_unfull>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	testb	$1, %al
               	je	0x42fb53 <_mi_page_unfull+0x4f3>
               	movq	40(%rdi), %r12
               	movl	%eax, %ecx
               	andb	$-2, %cl
               	movb	%cl, 6(%rdi)
               	movl	20(%rdi), %esi
               	movl	$1, %ecx
               	cmpl	$9, %esi
               	jb	0x42f6cf <_mi_page_unfull+0x6f>
               	leaq	7(%rsi), %rdx
               	shrq	$3, %rdx
               	cmpl	$64, %esi
               	ja	0x42f6a6 <_mi_page_unfull+0x46>
               	addl	$1, %edx
               	andl	$254, %edx
               	movq	%rdx, %rcx
               	jmp	0x42f6cf <_mi_page_unfull+0x6f>
               	movl	$73, %ecx
               	cmpl	$2097152, %esi          # imm = 0x200000
               	ja	0x42f6cf <_mi_page_unfull+0x6f>
               	addq	$-1, %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %ecx
               	addl	$253, %ecx
               	orb	$1, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %r9
               	movq	56(%rdi), %rdx
               	testq	%rdx, %rdx
               	je	0x42f6e9 <_mi_page_unfull+0x89>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rdx)
               	movzbl	%cl, %ecx
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42f6f9 <_mi_page_unfull+0x99>
               	movq	%rdx, 56(%rax)
               	cmpq	%rdi, 2824(%r12)
               	je	0x42f717 <_mi_page_unfull+0xb7>
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f91e <_mi_page_unfull+0x2be>
               	jmp	0x42f735 <_mi_page_unfull+0xd5>
               	movq	56(%rdi), %rdx
               	movq	%rdx, 2824(%r12)
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x42f91e <_mi_page_unfull+0x2be>
               	movq	%rax, 2816(%r12)
               	movq	2832(%r12), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42f91e <_mi_page_unfull+0x2be>
               	testq	%rax, %rax
               	leaq	90404(%rip), %r8        # 0x445880 <_mi_page_empty>
               	cmovneq	%rax, %r8
               	leaq	7(%rcx), %r14
               	shrq	$3, %r14
               	cmpq	%r8, 8(%r9,%r14,8)
               	je	0x42f91e <_mi_page_unfull+0x2be>
               	cmpq	$9, %rcx
               	jae	0x42f780 <_mi_page_unfull+0x120>
               	xorl	%ecx, %ecx
               	jmp	0x42f842 <_mi_page_unfull+0x1e2>
               	cmpq	$64, %rcx
               	ja	0x42f790 <_mi_page_unfull+0x130>
               	leal	1(%r14), %r10d
               	andb	$-2, %r10b
               	jmp	0x42f7ab <_mi_page_unfull+0x14b>
               	leaq	-1(%r14), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r10d
               	addb	$-3, %r10b
               	leaq	1040(%r9), %rbx
               	leaq	2792(%r12), %rsi
               	nopw	(%rax,%rax)
               	movq	16(%rsi), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rax
               	shrq	$3, %rax
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x42f820 <_mi_page_unfull+0x1c0>
               	cmpq	$71, %rdx
               	ja	0x42f7f0 <_mi_page_unfull+0x190>
               	leal	1(%rax), %ecx
               	andb	$-2, %cl
               	jmp	0x42f820 <_mi_page_unfull+0x1c0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x42f820 <_mi_page_unfull+0x1c0>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rbx, %rsi
               	jbe	0x42f82e <_mi_page_unfull+0x1ce>
               	addq	$-24, %rsi
               	cmpb	%cl, %r10b
               	je	0x42f7c0 <_mi_page_unfull+0x160>
               	leaq	1(%rax), %rcx
               	cmpq	%r14, %rax
               	cmovaeq	%r14, %rcx
               	cmpq	%r14, %rcx
               	ja	0x42f91e <_mi_page_unfull+0x2be>
               	addq	$1, %r14
               	movq	%r14, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x42f910 <_mi_page_unfull+0x2b0>
               	movq	%r10, %r11
               	andq	$-4, %r11
               	movq	%r8, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x42f885 <_mi_page_unfull+0x225>
               	xorl	%esi, %esi
               	jmp	0x42f8d9 <_mi_page_unfull+0x279>
               	leaq	(%r9,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rsi,8)
               	movdqu	%xmm0, -96(%rbx,%rsi,8)
               	movdqu	%xmm0, -80(%rbx,%rsi,8)
               	movdqu	%xmm0, -64(%rbx,%rsi,8)
               	movdqu	%xmm0, -48(%rbx,%rsi,8)
               	movdqu	%xmm0, -32(%rbx,%rsi,8)
               	movdqu	%xmm0, -16(%rbx,%rsi,8)
               	movdqu	%xmm0, (%rbx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x42f8a0 <_mi_page_unfull+0x240>
               	testq	%rax, %rax
               	je	0x42f902 <_mi_page_unfull+0x2a2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42f8f0 <_mi_page_unfull+0x290>
               	cmpq	%r11, %r10
               	je	0x42f91e <_mi_page_unfull+0x2be>
               	addq	%r11, %rcx
               	nop
               	movq	%r8, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r14
               	jne	0x42f910 <_mi_page_unfull+0x2b0>
               	leaq	(%r12,%r15,8), %rax
               	addq	$1048, %rax             # imm = 0x418
               	movq	1048(%r12,%r15,8), %rcx
               	movq	%rcx, 56(%rdi)
               	movq	$0, 48(%rdi)
               	testq	%rcx, %rcx
               	je	0x42f955 <_mi_page_unfull+0x2f5>
               	movq	%rdi, 48(%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	jmp	0x42fb3e <_mi_page_unfull+0x4de>
               	leaq	(%r12,%r15,8), %rcx
               	addq	$1040, %rcx             # imm = 0x410
               	movq	%rdi, (%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x42fb3e <_mi_page_unfull+0x4de>
               	leaq	7(%r8), %r10
               	shrq	$3, %r10
               	cmpq	%rdi, 8(%r9,%r10,8)
               	je	0x42fb3e <_mi_page_unfull+0x4de>
               	cmpq	$9, %r8
               	jae	0x42f99b <_mi_page_unfull+0x33b>
               	xorl	%ecx, %ecx
               	jmp	0x42fa62 <_mi_page_unfull+0x402>
               	cmpq	$64, %r8
               	ja	0x42f9ab <_mi_page_unfull+0x34b>
               	leal	1(%r10), %r11d
               	andb	$-2, %r11b
               	jmp	0x42f9c6 <_mi_page_unfull+0x366>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r11d
               	addb	$-3, %r11b
               	leaq	1040(%r9), %rsi
               	leaq	(%r12,%r15,8), %rdx
               	addq	$1016, %rdx             # imm = 0x3F8
               	nopl	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42fa40 <_mi_page_unfull+0x3e0>
               	cmpq	$71, %rax
               	ja	0x42fa10 <_mi_page_unfull+0x3b0>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42fa40 <_mi_page_unfull+0x3e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42fa40 <_mi_page_unfull+0x3e0>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r14
               	movl	%r14d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r14,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x42fa4e <_mi_page_unfull+0x3ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r11b
               	je	0x42f9e0 <_mi_page_unfull+0x380>
               	leaq	1(%rbx), %rcx
               	cmpq	%r10, %rbx
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x42fb3e <_mi_page_unfull+0x4de>
               	addq	$1, %r10
               	movq	%r10, %r14
               	subq	%rcx, %r14
               	cmpq	$4, %r14
               	jb	0x42fb30 <_mi_page_unfull+0x4d0>
               	movq	%r14, %r11
               	andq	$-4, %r11
               	movq	%rdi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x42faa5 <_mi_page_unfull+0x445>
               	xorl	%esi, %esi
               	jmp	0x42faf9 <_mi_page_unfull+0x499>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rsi,8)
               	movdqu	%xmm0, -96(%rdx,%rsi,8)
               	movdqu	%xmm0, -80(%rdx,%rsi,8)
               	movdqu	%xmm0, -64(%rdx,%rsi,8)
               	movdqu	%xmm0, -48(%rdx,%rsi,8)
               	movdqu	%xmm0, -32(%rdx,%rsi,8)
               	movdqu	%xmm0, -16(%rdx,%rsi,8)
               	movdqu	%xmm0, (%rdx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rax
               	jne	0x42fac0 <_mi_page_unfull+0x460>
               	testq	%rbx, %rbx
               	je	0x42fb22 <_mi_page_unfull+0x4c2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rax
               	addq	$24, %rax
               	negq	%rbx
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbx
               	jne	0x42fb10 <_mi_page_unfull+0x4b0>
               	cmpq	%r11, %r14
               	je	0x42fb3e <_mi_page_unfull+0x4de>
               	addq	%r11, %rcx
               	nop
               	movq	%rdi, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x42fb30 <_mi_page_unfull+0x4d0>
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rdi), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<mi_segment_reclaim>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r8, %r14
               	movq	%rdx, 8(%rsp)
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	testq	%rcx, %rcx
               	je	0x42fb84 <mi_segment_reclaim+0x24>
               	movb	$0, (%rcx)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	72(%r15), %rbp
               	movq	112(%r14), %rdx
               	leaq	203224(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	203787(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rbp, %rbp
               	js	0x42fbf4 <mi_segment_reclaim+0x94>
               	testb	%al, %al
               	je	0x42fc38 <mi_segment_reclaim+0xd8>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jg	0x42fbed <mi_segment_reclaim+0x8d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x42fbe0 <mi_segment_reclaim+0x80>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x42fc58 <mi_segment_reclaim+0xf8>
               	testb	%al, %al
               	je	0x430088 <mi_segment_reclaim+0x528>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jge	0x42fc2d <mi_segment_reclaim+0xcd>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x42fc20 <mi_segment_reclaim+0xc0>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x4300aa <mi_segment_reclaim+0x54a>
               	movq	24(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rsi
               	jl	0x42fc4e <mi_segment_reclaim+0xee>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fc6f <mi_segment_reclaim+0x10f>
               	movq	%rax, 64(%r14)
               	addq	72(%r14), %rbp
               	movq	%rbp, 72(%r14)
               	cmpq	80(%r14), %rbp
               	jbe	0x42fc81 <mi_segment_reclaim+0x121>
               	movq	%rbp, 80(%r14)
               	movq	112(%r14), %rsi
               	leaq	192(%rsi), %rax
               	leaq	202989(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fe86 <mi_segment_reclaim+0x326>
               	leaq	203549(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fe86 <mi_segment_reclaim+0x326>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 216(%rsi)
               	addq	$-1, %rdx
               	movq	208(%rsi), %rax
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42fce0 <mi_segment_reclaim+0x180>
               	lock
               	cmpxchgq	%rdx, 208(%rsi)
               	jne	0x42fcd0 <mi_segment_reclaim+0x170>
               	lock
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	je	0x42fec5 <mi_segment_reclaim+0x365>
               	testq	%rcx, %rcx
               	je	0x42ff14 <mi_segment_reclaim+0x3b4>
               	movq	%rcx, 16(%rsp)
               	xorl	%r13d, %r13d
               	jmp	0x42fd31 <mi_segment_reclaim+0x1d1>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	movq	%r14, %rdx
               	callq	0x42e2c0 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %r13
               	movq	64(%r15), %rax
               	cmpq	%rax, %r13
               	jae	0x42fec7 <mi_segment_reclaim+0x367>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	testb	$1, 121(%r15,%rbx)
               	je	0x42fd20 <mi_segment_reclaim+0x1c0>
               	movq	40(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	202786(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42fdb0 <mi_segment_reclaim+0x250>
               	leaq	203350(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42fdb0 <mi_segment_reclaim+0x250>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42fda0 <mi_segment_reclaim+0x240>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42fd90 <mi_segment_reclaim+0x230>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42fde4 <mi_segment_reclaim+0x284>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42fdd2 <mi_segment_reclaim+0x272>
               	movq	%rax, 240(%rcx)
               	movq	232(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 232(%rcx)
               	leaq	(%r15,%rbx), %rbp
               	addq	$120, %rbp
               	movq	%r12, 160(%r15,%rbx)
               	movq	32(%rbp), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x42fe20 <mi_segment_reclaim+0x2c0>
               	cmpl	$1, %ecx
               	je	0x42fe15 <mi_segment_reclaim+0x2b5>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%rbp)
               	jne	0x42fdf4 <mi_segment_reclaim+0x294>
               	jmp	0x42fe20 <mi_segment_reclaim+0x2c0>
               	pause
               	jmp	0x42fdf4 <mi_segment_reclaim+0x294>
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x42d180 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbx)
               	je	0x42fd07 <mi_segment_reclaim+0x1a7>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x430100 <_mi_page_reclaim>
               	movl	140(%r15,%rbx), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42fd20 <mi_segment_reclaim+0x1c0>
               	leaq	(%r15,%rbx), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbx), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42fe79 <mi_segment_reclaim+0x319>
               	movq	32(%rbp), %rax
               	cmpq	$4, %rax
               	jb	0x42fd20 <mi_segment_reclaim+0x1c0>
               	movq	16(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x42fd20 <mi_segment_reclaim+0x1c0>
               	movq	216(%rsi), %rax
               	addq	$-1, %rax
               	movq	%rax, 216(%rsi)
               	cmpq	208(%rsi), %rax
               	jle	0x42fea8 <mi_segment_reclaim+0x348>
               	movq	%rax, 208(%rsi)
               	movq	200(%rsi), %rax
               	addq	$1, %rax
               	movq	%rax, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	jne	0x42fcf4 <mi_segment_reclaim+0x194>
               	xorl	%eax, %eax
               	movq	56(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x42feff <mi_segment_reclaim+0x39f>
               	cmpq	%rax, %rcx
               	jae	0x4300ee <mi_segment_reclaim+0x58e>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4300ee <mi_segment_reclaim+0x58e>
               	cmpl	$1, %eax
               	je	0x4300c8 <mi_segment_reclaim+0x568>
               	testl	%eax, %eax
               	je	0x4300cc <mi_segment_reclaim+0x56c>
               	xorl	%r14d, %r14d
               	jmp	0x4300cc <mi_segment_reclaim+0x56c>
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x42e530 <mi_segment_free>
               	xorl	%r15d, %r15d
               	jmp	0x4300ee <mi_segment_reclaim+0x58e>
               	xorl	%ebx, %ebx
               	jmp	0x42ff3d <mi_segment_reclaim+0x3dd>
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	callq	0x42e2c0 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbx
               	movq	64(%r15), %rax
               	cmpq	%rax, %rbx
               	jae	0x42fec7 <mi_segment_reclaim+0x367>
               	movq	%rbx, %rbp
               	shlq	$6, %rbp
               	testb	$1, 121(%r15,%rbp)
               	je	0x42ff30 <mi_segment_reclaim+0x3d0>
               	movq	40(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	202262(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42ffc0 <mi_segment_reclaim+0x460>
               	leaq	202822(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42ffc0 <mi_segment_reclaim+0x460>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ffb0 <mi_segment_reclaim+0x450>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x42ffa0 <mi_segment_reclaim+0x440>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x42fff4 <mi_segment_reclaim+0x494>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x42ffe2 <mi_segment_reclaim+0x482>
               	movq	%rax, 240(%rcx)
               	movq	232(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 232(%rcx)
               	leaq	(%r15,%rbp), %r13
               	addq	$120, %r13
               	movq	%r12, 160(%r15,%rbp)
               	movq	32(%r13), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x430030 <mi_segment_reclaim+0x4d0>
               	cmpl	$1, %ecx
               	je	0x430025 <mi_segment_reclaim+0x4c5>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r13)
               	jne	0x430004 <mi_segment_reclaim+0x4a4>
               	jmp	0x430030 <mi_segment_reclaim+0x4d0>
               	pause
               	jmp	0x430004 <mi_segment_reclaim+0x4a4>
               	nopl	(%rax)
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x42d180 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbp)
               	je	0x42ff18 <mi_segment_reclaim+0x3b8>
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	callq	0x430100 <_mi_page_reclaim>
               	movl	140(%r15,%rbp), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x42ff30 <mi_segment_reclaim+0x3d0>
               	leaq	(%r15,%rbp), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbp), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x42ff30 <mi_segment_reclaim+0x3d0>
               	movq	32(%r13), %rax
               	jmp	0x42ff30 <mi_segment_reclaim+0x3d0>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43009e <mi_segment_reclaim+0x53e>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x42fc6f <mi_segment_reclaim+0x10f>
               	jmp	0x42fc6b <mi_segment_reclaim+0x10b>
               	addq	$16, %r14
               	movq	$0, 24(%r15)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r15)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, 8(%r14)
               	movq	%r15, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<_mi_page_reclaim>:
               	pushq	%rbx
               	movl	20(%rsi), %r8d
               	cmpl	$67108864, %r8d         # imm = 0x4000000
               	jae	0x4303a2 <_mi_page_reclaim+0x2a2>
               	addq	$7, %r8
               	movl	$1, %ecx
               	cmpq	$16, %r8
               	jb	0x430165 <_mi_page_reclaim+0x65>
               	movq	%r8, %rax
               	shrq	$3, %rax
               	cmpq	$71, %r8
               	ja	0x43013b <_mi_page_reclaim+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	movq	%rax, %rcx
               	jmp	0x430165 <_mi_page_reclaim+0x65>
               	movl	$73, %ecx
               	cmpq	$2097159, %r8           # imm = 0x200007
               	ja	0x430165 <_mi_page_reclaim+0x65>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	leaq	(%rax,%rax,2), %rax
               	cmpq	$2097168, 1056(%rdi,%rax,8) # imm = 0x200010
               	sete	%cl
               	movb	6(%rsi), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 6(%rsi)
               	movq	1040(%rdi,%rax,8), %rcx
               	movq	%rcx, 48(%rsi)
               	movq	$0, 56(%rsi)
               	leaq	56(%rcx), %rdx
               	testq	%rcx, %rcx
               	leaq	1048(%rdi,%rax,8), %rcx
               	cmovneq	%rdx, %rcx
               	movq	%rsi, (%rcx)
               	movq	%rsi, 1040(%rdi,%rax,8)
               	movq	1056(%rdi,%rax,8), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43038e <_mi_page_reclaim+0x28e>
               	leaq	7(%rcx), %r9
               	shrq	$3, %r9
               	cmpq	%rsi, 8(%rdi,%r9,8)
               	je	0x43038e <_mi_page_reclaim+0x28e>
               	cmpq	$9, %rcx
               	jae	0x4301ed <_mi_page_reclaim+0xed>
               	xorl	%ecx, %ecx
               	jmp	0x4302b2 <_mi_page_reclaim+0x1b2>
               	cmpq	$64, %rcx
               	ja	0x4301fd <_mi_page_reclaim+0xfd>
               	leal	1(%r9), %r8d
               	andb	$-2, %r8b
               	jmp	0x430218 <_mi_page_reclaim+0x118>
               	leaq	-1(%r9), %rdx
               	bsrq	%rdx, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rbx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%rdi), %r10
               	leaq	(%rdi,%rax,8), %rax
               	addq	$1016, %rax             # imm = 0x3F8
               	nopl	(%rax)
               	movq	16(%rax), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x430290 <_mi_page_reclaim+0x190>
               	cmpq	$71, %rdx
               	ja	0x430260 <_mi_page_reclaim+0x160>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x430290 <_mi_page_reclaim+0x190>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x430290 <_mi_page_reclaim+0x190>
               	leaq	-1(%rbx), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%r10, %rax
               	jbe	0x43029e <_mi_page_reclaim+0x19e>
               	addq	$-24, %rax
               	cmpb	%cl, %r8b
               	je	0x430230 <_mi_page_reclaim+0x130>
               	leaq	1(%rbx), %rcx
               	cmpq	%r9, %rbx
               	cmovaeq	%r9, %rcx
               	cmpq	%r9, %rcx
               	ja	0x43038e <_mi_page_reclaim+0x28e>
               	addq	$1, %r9
               	movq	%r9, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x430380 <_mi_page_reclaim+0x280>
               	movq	%r10, %r8
               	andq	$-4, %r8
               	movq	%rsi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %r11d
               	andl	$3, %r11d
               	cmpq	$12, %rdx
               	jae	0x4302f7 <_mi_page_reclaim+0x1f7>
               	xorl	%edx, %edx
               	jmp	0x430349 <_mi_page_reclaim+0x249>
               	leaq	(%rdi,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%edx, %edx
               	nopl	(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rdx,8)
               	movdqu	%xmm0, -96(%rbx,%rdx,8)
               	movdqu	%xmm0, -80(%rbx,%rdx,8)
               	movdqu	%xmm0, -64(%rbx,%rdx,8)
               	movdqu	%xmm0, -48(%rbx,%rdx,8)
               	movdqu	%xmm0, -32(%rbx,%rdx,8)
               	movdqu	%xmm0, -16(%rbx,%rdx,8)
               	movdqu	%xmm0, (%rbx,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rax
               	jne	0x430310 <_mi_page_reclaim+0x210>
               	testq	%r11, %r11
               	je	0x430372 <_mi_page_reclaim+0x272>
               	addq	%rcx, %rdx
               	leaq	(%rdi,%rdx,8), %rax
               	addq	$24, %rax
               	negq	%r11
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%r11
               	jne	0x430360 <_mi_page_reclaim+0x260>
               	cmpq	%r8, %r10
               	je	0x43038e <_mi_page_reclaim+0x28e>
               	addq	%r8, %rcx
               	nop
               	movq	%rsi, 8(%rdi,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r9
               	jne	0x430380 <_mi_page_reclaim+0x280>
               	movq	3016(%rdi), %rax
               	addq	$1, %rax
               	movq	%rax, 3016(%rdi)
               	popq	%rbx
               	retq
               	movq	%rsi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebx
               	cmpl	$3, %ebx
               	jne	0x4303b9 <_mi_page_reclaim+0x2b9>
               	movq	72(%rax), %rdx
               	jmp	0x4303c5 <_mi_page_reclaim+0x2c5>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%rsi), %cl
               	testb	%cl, %cl
               	je	0x4303d3 <_mi_page_reclaim+0x2d3>
               	movq	%rdx, %r8
               	jmp	0x430112 <_mi_page_reclaim+0x12>
               	movq	80(%rax), %r9
               	movq	%rdx, %r10
               	subq	%r9, %r10
               	cmpl	$1, %ebx
               	ja	0x43041b <_mi_page_reclaim+0x31b>
               	testl	%r8d, %r8d
               	je	0x43041b <_mi_page_reclaim+0x31b>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x430404 <_mi_page_reclaim+0x304>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x430409 <_mi_page_reclaim+0x309>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r10
               	movq	%r10, %r8
               	jmp	0x430112 <_mi_page_reclaim+0x12>
               	nopw	%cs:(%rax,%rax)

<mi_free>:
               	movq	%rdi, %rdx
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x43048d <mi_free+0x5d>
               	movq	%fs:0, %r8
               	movl	%edx, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movq	96(%rdi), %rcx
               	shrq	%cl, %rax
               	movq	104(%rdi), %rcx
               	cmpq	%r8, %rcx
               	jne	0x43048e <mi_free+0x5e>
               	shlq	$6, %rax
               	cmpb	$0, 126(%rdi,%rax)
               	jne	0x43048e <mi_free+0x5e>
               	movq	144(%rdi,%rax), %rcx
               	movq	%rcx, (%rdx)
               	movq	%rdx, 144(%rdi,%rax)
               	movl	136(%rdi,%rax), %ecx
               	addl	$-1, %ecx
               	movl	%ecx, 136(%rdi,%rax)
               	je	0x4304a0 <mi_free+0x70>
               	retq
               	movq	104(%rdi), %rax
               	xorl	%esi, %esi
               	cmpq	%r8, %rax
               	sete	%sil
               	jmp	0x4304b0 <mi_free_generic>
               	addq	%rax, %rdi
               	addq	$120, %rdi
               	jmp	0x42f550 <_mi_page_retire>
               	nopl	(%rax)

<mi_free_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r8
               	movq	%rdx, %r11
               	subq	%rdi, %r11
               	movq	96(%rdi), %rcx
               	shrq	%cl, %r11
               	shlq	$6, %r11
               	leaq	(%rdi,%r11), %r9
               	addq	$120, %r9
               	testb	$2, 126(%rdi,%r11)
               	je	0x430576 <mi_free_generic+0xc6>
               	movl	140(%rdi,%r11), %r14d
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x4304f4 <mi_free_generic+0x44>
               	movq	72(%rdi), %r10
               	jmp	0x4304fd <mi_free_generic+0x4d>
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	movb	(%r9), %cl
               	movzbl	%cl, %ebx
               	imulq	%rbx, %r10
               	addq	%rdi, %r10
               	testb	%bl, %bl
               	jne	0x430548 <mi_free_generic+0x98>
               	addq	80(%rdi), %r10
               	cmpl	$1, %eax
               	ja	0x430548 <mi_free_generic+0x98>
               	testl	%r14d, %r14d
               	je	0x430548 <mi_free_generic+0x98>
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43052f <mi_free_generic+0x7f>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430537 <mi_free_generic+0x87>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	leaq	(%r10,%rax), %rcx
               	cmpq	%r14, %rax
               	cmovbq	%rcx, %r10
               	cmpl	$67108864, %r14d        # imm = 0x4000000
               	jae	0x4305e4 <mi_free_generic+0x134>
               	movq	%r8, %rax
               	subq	%r10, %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x43056e <mi_free_generic+0xbe>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430573 <mi_free_generic+0xc3>
               	xorl	%edx, %edx
               	divl	%r14d
               	subq	%rdx, %r8
               	testb	%sil, %sil
               	je	0x4305b7 <mi_free_generic+0x107>
               	movq	144(%rdi,%r11), %rax
               	movq	%rax, (%r8)
               	movq	%r8, 144(%rdi,%r11)
               	movl	136(%rdi,%r11), %eax
               	addl	$-1, %eax
               	movl	%eax, 136(%rdi,%r11)
               	je	0x4305c8 <mi_free_generic+0x118>
               	leaq	(%rdi,%r11), %rax
               	addq	$126, %rax
               	testb	$1, (%rax)
               	jne	0x4305d6 <mi_free_generic+0x126>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x430660 <_mi_free_block_mt>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f550 <_mi_page_retire>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f660 <_mi_page_unfull>
               	movq	%r9, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebp
               	cmpl	$3, %ebp
               	jne	0x4305fb <mi_free_generic+0x14b>
               	movq	72(%rax), %rdx
               	jmp	0x430607 <mi_free_generic+0x157>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	testb	%bl, %bl
               	je	0x430613 <mi_free_generic+0x163>
               	movq	%rdx, %r14
               	jmp	0x430555 <mi_free_generic+0xa5>
               	movq	80(%rax), %r15
               	movq	%rdx, %rcx
               	subq	%r15, %rcx
               	cmpl	$1, %ebp
               	ja	0x430658 <mi_free_generic+0x1a8>
               	testl	%r14d, %r14d
               	je	0x430658 <mi_free_generic+0x1a8>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430641 <mi_free_generic+0x191>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x430646 <mi_free_generic+0x196>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%r14, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r14
               	jmp	0x430555 <mi_free_generic+0xa5>

<_mi_free_block_mt>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	%rdi, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	cmpl	$3, 112(%r15)
               	jne	0x430737 <_mi_free_block_mt+0xd7>
               	callq	0x42a8e0 <mi_thread_init>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rcx
               	movq	2848(%rcx), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, 104(%r15)
               	jne	0x4307a1 <_mi_free_block_mt+0x141>
               	movq	8(%r14), %rax
               	movq	%rax, (%rbx)
               	movq	%rbx, 8(%r14)
               	movl	16(%r14), %eax
               	addl	$-1, %eax
               	movl	%eax, 16(%r14)
               	movb	7(%r14), %al
               	andb	$-2, %al
               	movb	%al, 7(%r14)
               	movq	(%rcx), %rcx
               	movq	72(%r15), %rsi
               	movq	144(%rcx), %rdx
               	leaq	200358(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	200921(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rsi, %rsi
               	js	0x4307a7 <_mi_free_block_mt+0x147>
               	testb	%al, %al
               	je	0x4307e8 <_mi_free_block_mt+0x188>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	leaq	1(%rdi), %rbx
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x43072d <_mi_free_block_mt+0xcd>
               	lock
               	cmpxchgq	%rbx, 16(%rdx)
               	jne	0x430720 <_mi_free_block_mt+0xc0>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x430808 <_mi_free_block_mt+0x1a8>
               	movq	32(%r14), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	movq	%rax, %rdx
               	andq	$3, %rdx
               	je	0x430760 <_mi_free_block_mt+0x100>
               	movq	%rcx, (%rbx)
               	orq	%rbx, %rdx
               	lock
               	cmpxchgq	%rdx, 32(%r14)
               	jne	0x430740 <_mi_free_block_mt+0xe0>
               	jmp	0x4307a1 <_mi_free_block_mt+0x141>
               	orq	$1, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x430740 <_mi_free_block_mt+0xe0>
               	movq	40(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x43078a <_mi_free_block_mt+0x12a>
               	movq	2840(%rcx), %rax
               	movq	%rax, (%rbx)
               	lock
               	cmpxchgq	%rbx, 2840(%rcx)
               	jne	0x43077c <_mi_free_block_mt+0x11c>
               	movq	32(%r14), %rax
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	orq	$2, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x43078e <_mi_free_block_mt+0x12e>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	testb	%al, %al
               	je	0x430847 <_mi_free_block_mt+0x1e7>
               	movq	$-1, %rdi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	addq	$-1, %rdi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rdi, %rax
               	jge	0x4307dd <_mi_free_block_mt+0x17d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x4307d0 <_mi_free_block_mt+0x170>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x430869 <_mi_free_block_mt+0x209>
               	movq	24(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rdi
               	jl	0x4307fe <_mi_free_block_mt+0x19e>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x43081f <_mi_free_block_mt+0x1bf>
               	movq	%rax, 96(%rcx)
               	addq	104(%rcx), %rsi
               	leaq	32(%rcx), %rdx
               	movq	%rsi, 104(%rcx)
               	cmpq	112(%rcx), %rsi
               	jbe	0x430835 <_mi_free_block_mt+0x1d5>
               	movq	%rsi, 112(%rcx)
               	movq	%r14, %rdi
               	movl	$1, %esi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42e0d0 <_mi_segment_page_free>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43085d <_mi_free_block_mt+0x1fd>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x43081f <_mi_free_block_mt+0x1bf>
               	jmp	0x43081b <_mi_free_block_mt+0x1bb>

<mi_out_buf_stderr>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	186173(%rip), %rax      # 0x45dfc8 <write+0x45dfc8>
               	movq	(%rax), %rsi
               	callq	0x413790 <fputs@plt>
               	testq	%rbx, %rbx
               	je	0x4308c9 <mi_out_buf_stderr+0x49>
               	movq	201145(%rip), %rax      # 0x461a58 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x4308c9 <mi_out_buf_stderr+0x49>
               	movq	%rbx, %rdi
               	callq	0x4136e0 <strlen@plt>
               	testq	%rax, %rax
               	je	0x4308c9 <mi_out_buf_stderr+0x49>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 201112(%rip)      # 0x461a58 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x4308cb <mi_out_buf_stderr+0x4b>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	201079(%rip), %rdi      # 0x461a60 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x4136f0 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<mi_buffered_out>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x430a53 <mi_buffered_out+0x153>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x430a53 <mi_buffered_out+0x153>
               	movq	%rdi, %r14
               	movb	(%rdi), %r12b
               	testb	%r12b, %r12b
               	je	0x430a53 <mi_buffered_out+0x153>
               	addq	$1, %r14
               	movq	$-56, %r15
               	movq	186007(%rip), %r13      # 0x45dfd8 <write+0x45dfd8>
               	movq	185984(%rip), %rbp      # 0x45dfc8 <write+0x45dfc8>
               	jmp	0x430969 <mi_buffered_out+0x69>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	movq	$0, 24(%rbx)
               	movzbl	(%r14), %r12d
               	addq	$1, %r14
               	testb	%r12b, %r12b
               	je	0x430a53 <mi_buffered_out+0x153>
               	movq	24(%rbx), %rax
               	cmpq	32(%rbx), %rax
               	jb	0x4309d9 <mi_buffered_out+0xd9>
               	movq	16(%rbx), %rcx
               	movb	$0, (%rcx,%rax)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x4309a0 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%r13)
               	je	0x4309a0 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%rbp)
               	je	0x4309a0 <mi_buffered_out+0xa0>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	jmp	0x4309cf <mi_buffered_out+0xcf>
               	nop
               	cmpb	$0, %fs:(%r15)
               	jne	0x4309cf <mi_buffered_out+0xcf>
               	movb	$1, %fs:(%r15)
               	movq	200853(%rip), %rsi      # 0x461a48 <mi_out_arg>
               	movq	200854(%rip), %rax      # 0x461a50 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19780(%rip), %rcx      # 0x42bc80 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	movq	$0, 24(%rbx)
               	xorl	%eax, %eax
               	movq	16(%rbx), %rcx
               	leaq	1(%rax), %rdx
               	movq	%rdx, 24(%rbx)
               	movb	%r12b, (%rcx,%rax)
               	cmpb	$10, %r12b
               	jne	0x430958 <mi_buffered_out+0x58>
               	movq	16(%rbx), %rax
               	movq	24(%rbx), %rcx
               	movb	$0, (%rax,%rcx)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x430a1b <mi_buffered_out+0x11b>
               	cmpq	%rax, (%r13)
               	je	0x430a1b <mi_buffered_out+0x11b>
               	cmpq	%rax, (%rbp)
               	jne	0x43094a <mi_buffered_out+0x4a>
               	cmpb	$0, %fs:(%r15)
               	jne	0x430950 <mi_buffered_out+0x50>
               	movb	$1, %fs:(%r15)
               	movq	200726(%rip), %rsi      # 0x461a48 <mi_out_arg>
               	movq	200727(%rip), %rax      # 0x461a50 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19907(%rip), %rcx      # 0x42bc80 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	jmp	0x430950 <mi_buffered_out+0x50>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_fprintf>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rsi, %r14
               	testb	%al, %al
               	je	0x430ab8 <_mi_fprintf+0x48>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	752(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rdx, %rdx
               	je	0x430b4a <_mi_fprintf+0xda>
               	movq	$-56, %rbx
               	cmpb	$0, %fs:(%rbx)
               	jne	0x430b4a <_mi_fprintf+0xda>
               	movb	$1, %fs:(%rbx)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	callq	0x413850 <vsnprintf@plt>
               	movb	$0, %fs:(%rbx)
               	movq	185526(%rip), %rcx      # 0x45dfd8 <write+0x45dfd8>
               	leaq	-553(%rip), %rax        # 0x430900 <mi_buffered_out>
               	cmpq	%rax, (%rcx)
               	je	0x430b55 <_mi_fprintf+0xe5>
               	movq	185491(%rip), %rcx      # 0x45dfc8 <write+0x45dfc8>
               	cmpq	%rax, (%rcx)
               	je	0x430b55 <_mi_fprintf+0xe5>
               	leaq	208(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x430900 <mi_buffered_out>
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	movb	$1, %fs:(%rbx)
               	movq	200424(%rip), %rsi      # 0x461a48 <mi_out_arg>
               	movq	200425(%rip), %rax      # 0x461a50 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-20209(%rip), %rcx      # 0x42bc80 <mi_out_buf>
               	cmovneq	%rax, %rcx
               	leaq	208(%rsp), %rdi
               	callq	*%rcx
               	movb	$0, %fs:(%rbx)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<mi_stat_print>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rcx, %r15
               	movq	%rdx, %rbx
               	movq	%rsi, %rcx
               	movq	%rdi, %r14
               	leaq	82463(%rip), %rdx       # 0x444dcd <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	testq	%rbx, %rbx
               	jle	0x430bfa <mi_stat_print+0x6a>
               	movq	16(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430c41 <mi_stat_print+0xb1>
               	leaq	82379(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82379(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430da0 <mi_stat_print+0x210>
               	movq	16(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	testq	%rbx, %rbx
               	js	0x430ca8 <mi_stat_print+0x118>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x430cd8 <mi_stat_print+0x148>
               	leaq	82306(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82306(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x43121f <mi_stat_print+0x68f>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	82272(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82267(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	82234(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430d41 <mi_stat_print+0x1b1>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430d47 <mi_stat_print+0x1b7>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431155 <mi_stat_print+0x5c5>
               	leaq	82155(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	82193(%rip), %r8        # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4314ed <mi_stat_print+0x95d>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	82122(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	82117(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	82084(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4311be <mi_stat_print+0x62e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4311c6 <mi_stat_print+0x636>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81961(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81958(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81966(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430df2 <mi_stat_print+0x262>
               	leaq	81875(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81875(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430eb1 <mi_stat_print+0x321>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81839(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81834(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81801(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430e52 <mi_stat_print+0x2c2>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430e58 <mi_stat_print+0x2c8>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81688(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81685(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81693(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	8(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x430f04 <mi_stat_print+0x374>
               	leaq	81601(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81601(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x430fc3 <mi_stat_print+0x433>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81565(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81560(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81527(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x430f64 <mi_stat_print+0x3d4>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x430f6a <mi_stat_print+0x3da>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81414(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81411(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81419(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431016 <mi_stat_print+0x486>
               	leaq	81327(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81327(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4310d5 <mi_stat_print+0x545>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81291(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81286(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81253(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431076 <mi_stat_print+0x4e6>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x43107c <mi_stat_print+0x4ec>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	81140(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	81137(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	81145(%rip), %r12       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rbx
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	81070(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81070(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movl	$32, %esi
               	movq	%rbx, %rdi
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	81065(%rip), %rcx       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	8(%r14), %rax
               	cmpq	%rax, (%r14)
               	leaq	81045(%rip), %rax       # 0x444dda <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
               	leaq	81056(%rip), %rdx       # 0x444dec <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>
               	cmovgq	%rax, %rdx
               	jmp	0x431476 <mi_stat_print+0x8e6>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	80973(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80968(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	80935(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43148c <mi_stat_print+0x8fc>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x431494 <mi_stat_print+0x904>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80810(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80807(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80815(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431271 <mi_stat_print+0x6e1>
               	leaq	80724(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80724(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431330 <mi_stat_print+0x7a0>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80688(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80683(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80650(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4312d1 <mi_stat_print+0x741>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4312d7 <mi_stat_print+0x747>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80537(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80534(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80542(%rip), %rbx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	80515(%rip), %rcx       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x43139a <mi_stat_print+0x80a>
               	leaq	80427(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80427(%rip), %r8        # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431459 <mi_stat_print+0x8c9>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80391(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80386(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80353(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4313fa <mi_stat_print+0x86a>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431400 <mi_stat_print+0x870>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80240(%rip), %rax       # 0x444dad <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80237(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80245(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	80695(%rip), %rdx       # 0x444fad <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80130(%rip), %rax       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	80089(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	80097(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43153c <mi_stat_print+0x9ac>
               	leaq	80007(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80045(%rip), %r8        # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x4315ff <mi_stat_print+0xa6f>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79974(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79969(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79936(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43159e <mi_stat_print+0xa0e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4315a6 <mi_stat_print+0xa16>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79856(%rip), %rax       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	79815(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	79823(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	8(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43164f <mi_stat_print+0xabf>
               	leaq	79732(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79770(%rip), %r8        # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431712 <mi_stat_print+0xb82>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79699(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79694(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79661(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4316b1 <mi_stat_print+0xb21>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4316b9 <mi_stat_print+0xb29>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79581(%rip), %rax       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	79540(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	79548(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	24(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431762 <mi_stat_print+0xbd2>
               	leaq	79457(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79495(%rip), %r8        # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x431825 <mi_stat_print+0xc95>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79424(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79419(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79386(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4317c4 <mi_stat_print+0xc34>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4317cc <mi_stat_print+0xc3c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79306(%rip), %rax       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	79265(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	79273(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	79280(%rip), %rdx       # 0x444df2 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f9>
               	leaq	79554(%rip), %rcx       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%r15, %rsi
               	jmp	0x431130 <mi_stat_print+0x5a0>
               	nopw	%cs:(%rax,%rax)

<mi_stat_counter_print>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %rcx
               	movq	%rdi, %rbx
               	leaq	79190(%rip), %rdx       # 0x444dcd <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	movq	(%rbx), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x4318bd <mi_stat_counter_print+0x5d>
               	leaq	79112(%rip), %rdx       # 0x444da6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79150(%rip), %r8        # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	jmp	0x43197c <mi_stat_counter_print+0x11c>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	79076(%rip), %rdx       # 0x444daf <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79071(%rip), %rsi       # 0x444db1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	79038(%rip), %r9        # 0x444db3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x43191d <mi_stat_counter_print+0xbd>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431923 <mi_stat_counter_print+0xc3>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78963(%rip), %rax       # 0x444dd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78922(%rip), %rdx       # 0x444db5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	leaq	78930(%rip), %rdx       # 0x444dd5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	leaq	79380(%rip), %rdx       # 0x444fad <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x430a70 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<chacha_block>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movl	(%rdi), %r13d
               	movl	4(%rdi), %eax
               	movl	%eax, -24(%rsp)
               	movl	8(%rdi), %r12d
               	movl	12(%rdi), %r8d
               	movl	16(%rdi), %r9d
               	movl	20(%rdi), %eax
               	movl	24(%rdi), %ebx
               	movl	28(%rdi), %ebp
               	movl	32(%rdi), %ecx
               	movl	%ecx, -32(%rsp)
               	movl	36(%rdi), %ecx
               	movl	%ecx, -28(%rsp)
               	movl	40(%rdi), %ecx
               	movl	%ecx, -20(%rsp)
               	movl	44(%rdi), %r14d
               	movl	48(%rdi), %esi
               	movl	52(%rdi), %edx
               	movl	56(%rdi), %r15d
               	movq	%rdi, -8(%rsp)
               	movl	60(%rdi), %r11d
               	movq	$-2, -16(%rsp)
               	nop
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$16, %esi
               	movl	-32(%rsp), %ecx
               	addl	%esi, %ecx
               	xorl	%ecx, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$8, %esi
               	addl	%esi, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %r9d
               	roll	$7, %r9d
               	movl	-24(%rsp), %edi
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$16, %edx
               	movl	-28(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %eax
               	roll	$12, %eax
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -28(%rsp)
               	xorl	%ecx, %eax
               	roll	$7, %eax
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$16, %r15d
               	movl	-20(%rsp), %r10d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$7, %ebp
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r10d
               	xorl	%r10d, %eax
               	roll	$12, %eax
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r10d
               	movl	%r10d, -20(%rsp)
               	xorl	%r10d, %eax
               	roll	$7, %eax
               	addl	%ebx, %edi
               	xorl	%edi, %esi
               	roll	$16, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %edi
               	movl	%edi, -24(%rsp)
               	xorl	%edi, %esi
               	roll	$8, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$16, %edx
               	movl	-32(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %ebp
               	roll	$7, %ebp
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$16, %r15d
               	movl	-28(%rsp), %edi
               	addl	%r15d, %edi
               	xorl	%edi, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %edi
               	movl	%edi, -28(%rsp)
               	xorl	%edi, %r9d
               	roll	$7, %r9d
               	movq	-16(%rsp), %r10
               	addq	$2, %r10
               	movq	%r10, -16(%rsp)
               	cmpq	$18, %r10
               	jb	0x431a10 <chacha_block+0x60>
               	movq	-8(%rsp), %rdi
               	addl	(%rdi), %r13d
               	movl	%r13d, 64(%rdi)
               	movd	%r9d, %xmm0
               	movd	%r8d, %xmm1
               	movd	%r12d, %xmm2
               	movd	-24(%rsp), %xmm3        # xmm3 = mem[0],zero,zero,zero
               	movd	-32(%rsp), %xmm4        # xmm4 = mem[0],zero,zero,zero
               	movd	%ebp, %xmm5
               	movd	%ebx, %xmm6
               	movd	%eax, %xmm7
               	punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
               	punpckldq	%xmm2, %xmm3    # xmm3 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
               	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
               	movdqu	4(%rdi), %xmm0
               	paddd	%xmm3, %xmm0
               	movdqu	20(%rdi), %xmm1
               	movdqu	%xmm0, 68(%rdi)
               	punpckldq	%xmm4, %xmm5    # xmm5 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
               	punpckldq	%xmm6, %xmm7    # xmm7 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
               	punpcklqdq	%xmm5, %xmm7    # xmm7 = xmm7[0],xmm5[0]
               	paddd	%xmm1, %xmm7
               	movdqu	%xmm7, 84(%rdi)
               	movl	-28(%rsp), %r10d
               	addl	36(%rdi), %r10d
               	movl	%r10d, 100(%rdi)
               	movl	-20(%rsp), %eax
               	addl	40(%rdi), %eax
               	movl	%eax, 104(%rdi)
               	addl	44(%rdi), %r14d
               	movl	%r14d, 108(%rdi)
               	movl	48(%rdi), %ebp
               	addl	%ebp, %esi
               	movl	%esi, 112(%rdi)
               	movl	52(%rdi), %esi
               	addl	%esi, %edx
               	movl	%edx, 116(%rdi)
               	movl	56(%rdi), %eax
               	addl	%eax, %r15d
               	movl	%r15d, 120(%rdi)
               	addl	60(%rdi), %r11d
               	movl	%r11d, 124(%rdi)
               	movl	$16, 128(%rdi)
               	incl	%ebp
               	movl	%ebp, 48(%rdi)
               	jne	0x431c3a <chacha_block+0x28a>
               	incl	%esi
               	movl	%esi, 52(%rdi)
               	jne	0x431c3a <chacha_block+0x28a>
               	addl	$1, %eax
               	movl	%eax, 56(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_malloc_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	175384(%rip), %r12      # 0x45c980 <_mi_heap_empty>
               	movq	$-80, %r13
               	xorl	%r15d, %r15d
               	cmpq	%r12, %rbx
               	je	0x431d0e <_mi_malloc_generic+0xbe>
               	movq	(%rbx), %rax
               	movq	(%rax), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rax)
               	movq	294777(%rip), %rcx      # 0x479c08 <deferred_free>
               	testq	%rcx, %rcx
               	je	0x431cb7 <_mi_malloc_generic+0x67>
               	cmpb	$0, 8(%rax)
               	jne	0x431cb7 <_mi_malloc_generic+0x67>
               	movb	$1, 8(%rax)
               	movq	294755(%rip), %rax      # 0x479c08 <deferred_free>
               	movq	294756(%rip), %rdx      # 0x479c10 <deferred_arg>
               	xorl	%edi, %edi
               	callq	*%rax
               	movq	(%rbx), %rax
               	movb	$0, 8(%rax)
               	movq	2840(%rbx), %rax
               	nop
               	testq	%rax, %rax
               	je	0x431cf0 <_mi_malloc_generic+0xa0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%r15, 2840(%rbx)
               	jne	0x431cc0 <_mi_malloc_generic+0x70>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x42f480 <_mi_free_delayed_block>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x431ce0 <_mi_malloc_generic+0x90>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431d80 <mi_find_page>
               	testq	%rax, %rax
               	je	0x431d23 <_mi_malloc_generic+0xd3>
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	jne	0x431d5b <_mi_malloc_generic+0x10b>
               	jmp	0x431c72 <_mi_malloc_generic+0x22>
               	callq	0x42a8e0 <mi_thread_init>
               	movq	%fs:(%r13), %rbx
               	cmpq	%r12, %rbx
               	jne	0x431c7b <_mi_malloc_generic+0x2b>
               	jmp	0x431d6e <_mi_malloc_generic+0x11e>
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42c590 <mi_heap_collect_ex>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x431d80 <mi_find_page>
               	testq	%rax, %rax
               	jne	0x431d00 <_mi_malloc_generic+0xb0>
               	leaq	78033(%rip), %rsi       # 0x444e18 <typeinfo name for kotlin::gc::GCSchedulerData+0x181f>
               	xorl	%r15d, %r15d
               	movl	$12, %edi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	jmp	0x431d6e <_mi_malloc_generic+0x11e>
               	movl	16(%rax), %edx
               	addl	$1, %edx
               	movl	%edx, 16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, %r15
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<mi_find_page>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %r15
               	cmpq	$2097153, %rsi          # imm = 0x200001
               	jae	0x431ec4 <mi_find_page+0x144>
               	movl	$1, %eax
               	cmpq	$9, %rdx
               	jb	0x431dd6 <mi_find_page+0x56>
               	leaq	7(%rdx), %rax
               	shrq	$3, %rax
               	cmpq	$64, %rdx
               	ja	0x431dbb <mi_find_page+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	jmp	0x431dd6 <mi_find_page+0x56>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %eax
               	addl	$253, %eax
               	movzbl	%al, %eax
               	leaq	(%rax,%rax,2), %r14
               	movq	1040(%r15,%r14,8), %rbx
               	testq	%rbx, %rbx
               	je	0x431ea7 <mi_find_page+0x127>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x431e49 <mi_find_page+0xc9>
               	movq	32(%rbx), %rax
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x431e00 <mi_find_page+0x80>
               	andq	$-4, %rcx
               	je	0x431e49 <mi_find_page+0xc9>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x431e32 <mi_find_page+0xb2>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x431e20 <mi_find_page+0xa0>
               	cmpl	%edx, %eax
               	jbe	0x431e71 <mi_find_page+0xf1>
               	leaq	77249(%rip), %rsi       # 0x444bfe <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	movq	24(%rbx), %rax
               	movq	8(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x431e91 <mi_find_page+0x111>
               	testq	%rcx, %rcx
               	jne	0x431e96 <mi_find_page+0x116>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	jmp	0x431e96 <mi_find_page+0x116>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	movq	8(%rbx), %rcx
               	testq	%rax, %rax
               	jne	0x431e56 <mi_find_page+0xd6>
               	testq	%rcx, %rcx
               	je	0x431ea7 <mi_find_page+0x127>
               	movb	7(%rbx), %al
               	andb	$1, %al
               	movb	%al, 7(%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	(%r15,%r14,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	movq	%r15, %rdi
               	movl	$1, %edx
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4328e0 <mi_page_queue_find_free_ex>
               	testq	%rdx, %rdx
               	js	0x432028 <mi_find_page+0x2a8>
               	cmpq	$33554432, %rdx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	cmpq	$8388608, %rdx          # imm = 0x800000
               	movl	$262144, %eax           # imm = 0x40000
               	cmovaeq	%rcx, %rax
               	movq	%rax, %rcx
               	notq	%rcx
               	cmpq	%rdx, %rcx
               	seta	%cl
               	testb	$1, %cl
               	je	0x431f14 <mi_find_page+0x194>
               	leaq	(%rdx,%rax), %rcx
               	addq	$-1, %rcx
               	negq	%rax
               	andq	%rcx, %rax
               	movq	%rax, %rdx
               	xorl	%ebx, %ebx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x4320d0 <mi_page_fresh_alloc>
               	testq	%rax, %rax
               	je	0x431e9e <mi_find_page+0x11e>
               	movq	%rax, %r14
               	movl	20(%rax), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x432042 <mi_find_page+0x2c2>
               	movq	$0, 40(%r14)
               	movq	(%r15), %rdi
               	cmpq	$67108865, %rsi         # imm = 0x4000001
               	jb	0x431f94 <mi_find_page+0x214>
               	addq	$528, %rdi              # imm = 0x210
               	callq	0x42bcf0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	736(%rax), %rcx
               	leaq	194068(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x431fd6 <mi_find_page+0x256>
               	leaq	194632(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x431fd6 <mi_find_page+0x256>
               	lock
               	addq	$1, 744(%rax)
               	lock
               	addq	$1, 736(%rax)
               	jmp	0x432020 <mi_find_page+0x2a0>
               	addq	$496, %rdi              # imm = 0x1F0
               	callq	0x42bcf0 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	720(%rax), %rcx
               	leaq	193999(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x431ffc <mi_find_page+0x27c>
               	leaq	194563(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x431ffc <mi_find_page+0x27c>
               	lock
               	addq	$1, 728(%rax)
               	lock
               	addq	$1, 720(%rax)
               	jmp	0x432020 <mi_find_page+0x2a0>
               	movq	744(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 744(%rax)
               	movq	736(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 736(%rax)
               	jmp	0x432020 <mi_find_page+0x2a0>
               	movq	728(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 728(%rax)
               	movq	720(%rax), %rcx
               	addq	$1, %rcx
               	movq	%rcx, 720(%rax)
               	movq	%r14, %rbx
               	jmp	0x431e9e <mi_find_page+0x11e>
               	leaq	77328(%rip), %rsi       # 0x444e3f <typeinfo name for kotlin::gc::GCSchedulerData+0x1846>
               	xorl	%ebx, %ebx
               	movl	$75, %edi
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	jmp	0x431e9e <mi_find_page+0x11e>
               	movq	%r14, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x432059 <mi_find_page+0x2d9>
               	movq	72(%rax), %rdx
               	jmp	0x432065 <mi_find_page+0x2e5>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%r14), %bl
               	testb	%bl, %bl
               	je	0x432074 <mi_find_page+0x2f4>
               	movq	%rdx, %rsi
               	jmp	0x431f3b <mi_find_page+0x1bb>
               	movq	80(%rax), %r8
               	movq	%rdx, %rcx
               	subq	%r8, %rcx
               	cmpl	$1, %edi
               	ja	0x4320ba <mi_find_page+0x33a>
               	testl	%esi, %esi
               	je	0x4320ba <mi_find_page+0x33a>
               	movzbl	%bl, %edi
               	imulq	%rdi, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4320a4 <mi_find_page+0x324>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4320a8 <mi_find_page+0x328>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	jmp	0x431f3b <mi_find_page+0x1bb>
               	nopw	%cs:(%rax,%rax)

<mi_page_fresh_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r13
               	movq	%rdi, %r12
               	movq	(%rdi), %r14
               	leaq	32(%r14), %rbx
               	leaq	160(%r14), %r9
               	cmpq	$16384, %rdx            # imm = 0x4000
               	movq	%rdx, 16(%rsp)
               	ja	0x432135 <mi_page_fresh_alloc+0x65>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	jne	0x4322c7 <mi_page_fresh_alloc+0x1f7>
               	xorl	%r15d, %r15d
               	movl	$16, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %r8
               	callq	0x4331b0 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x4322d2 <mi_page_fresh_alloc+0x202>
               	movq	(%rbx), %rdi
               	jmp	0x4322c7 <mi_page_fresh_alloc+0x1f7>
               	cmpq	$131072, %rdx           # imm = 0x20000
               	ja	0x432175 <mi_page_fresh_alloc+0xa5>
               	movq	48(%r14), %rdi
               	testq	%rdi, %rdi
               	jne	0x4322c7 <mi_page_fresh_alloc+0x1f7>
               	movl	$19, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$1, %edx
               	movq	%rbx, %r8
               	callq	0x4331b0 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x432235 <mi_page_fresh_alloc+0x165>
               	movq	48(%r14), %rdi
               	jmp	0x4322c7 <mi_page_fresh_alloc+0x1f7>
               	cmpq	$2097152, %rdx          # imm = 0x200000
               	ja	0x4321a7 <mi_page_fresh_alloc+0xd7>
               	movl	$22, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$2, %edx
               	movq	%rbx, %r8
               	callq	0x4331b0 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x432235 <mi_page_fresh_alloc+0x165>
               	movq	%rax, %rdi
               	jmp	0x4322c7 <mi_page_fresh_alloc+0x1f7>
               	xorl	%r15d, %r15d
               	movl	$22, %ecx
               	xorl	%edi, %edi
               	movq	%rdx, %rsi
               	movl	$3, %edx
               	movq	%rbx, %r8
               	callq	0x433810 <mi_segment_init>
               	testq	%rax, %rax
               	je	0x4322d2 <mi_page_fresh_alloc+0x202>
               	movq	%rax, %rdi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%rdi)
               	movq	72(%rdi), %r8
               	movq	144(%r14), %rdx
               	leaq	193435(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%cl
               	leaq	193998(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%cl, %al
               	testq	%r8, %r8
               	jle	0x43223d <mi_page_fresh_alloc+0x16d>
               	testb	%al, %al
               	je	0x432277 <mi_page_fresh_alloc+0x1a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	cmpq	%rsi, %rax
               	jge	0x43222d <mi_page_fresh_alloc+0x15d>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x432220 <mi_page_fresh_alloc+0x150>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x432299 <mi_page_fresh_alloc+0x1c9>
               	xorl	%r15d, %r15d
               	jmp	0x4322d2 <mi_page_fresh_alloc+0x202>
               	testb	%al, %al
               	je	0x432556 <mi_page_fresh_alloc+0x486>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rbp
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x43226d <mi_page_fresh_alloc+0x19d>
               	lock
               	cmpxchgq	%rbp, 16(%rdx)
               	jne	0x432260 <mi_page_fresh_alloc+0x190>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x432576 <mi_page_fresh_alloc+0x4a6>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43228d <mi_page_fresh_alloc+0x1bd>
               	movq	%rax, 16(%rdx)
               	movq	8(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	jbe	0x4322b2 <mi_page_fresh_alloc+0x1e2>
               	movq	%rax, 96(%r14)
               	movq	104(%r14), %rax
               	subq	%r8, %rax
               	movq	%rax, 104(%r14)
               	cmpq	112(%r14), %rax
               	jbe	0x4322c7 <mi_page_fresh_alloc+0x1f7>
               	movq	%rax, 112(%r14)
               	movq	%rbx, %rsi
               	callq	0x433590 <mi_segment_find_free>
               	movq	%rax, %r15
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x432404 <mi_page_fresh_alloc+0x334>
               	movq	%r12, 8(%rsp)
               	leaq	24(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x4137a0 <clock_gettime@plt>
               	movq	72(%r14), %r12
               	testq	%r12, %r12
               	je	0x4323e7 <mi_page_fresh_alloc+0x317>
               	movq	24(%rsp), %rcx
               	movq	32(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x432359 <mi_page_fresh_alloc+0x289>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	$0, 16(%rbp)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 48(%rbp)
               	testq	%r12, %r12
               	je	0x4323e7 <mi_page_fresh_alloc+0x317>
               	movq	%r12, %rbp
               	cmpl	%ebx, 16(%r12)
               	jg	0x4323f3 <mi_page_fresh_alloc+0x323>
               	movq	56(%rbp), %r12
               	movl	$10, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x432340 <mi_page_fresh_alloc+0x270>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x432340 <mi_page_fresh_alloc+0x270>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x432340 <mi_page_fresh_alloc+0x270>
               	cmpl	$3, 112(%rdx)
               	jne	0x4323a4 <mi_page_fresh_alloc+0x2d4>
               	movq	72(%rdx), %rsi
               	jmp	0x4323b0 <mi_page_fresh_alloc+0x2e0>
               	movq	96(%rdx), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movzbl	%cl, %ecx
               	movq	%rcx, %rdi
               	imulq	%rsi, %rdi
               	addq	%rdx, %rdi
               	testb	%cl, %cl
               	jne	0x4323cf <mi_page_fresh_alloc+0x2ff>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x432340 <mi_page_fresh_alloc+0x270>
               	callq	0x42df00 <_mi_os_reset>
               	jmp	0x432340 <mi_page_fresh_alloc+0x270>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 64(%r14)
               	jmp	0x4323ff <mi_page_fresh_alloc+0x32f>
               	movq	%rbp, 72(%r14)
               	movq	$0, 48(%rbp)
               	movq	8(%rsp), %r12
               	testq	%r15, %r15
               	je	0x4328c2 <mi_page_fresh_alloc+0x7f2>
               	movq	%r15, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	movq	%r12, 40(%r15)
               	movl	112(%rsi), %edx
               	cmpl	$3, %edx
               	jne	0x432429 <mi_page_fresh_alloc+0x359>
               	movq	72(%rsi), %rax
               	jmp	0x432435 <mi_page_fresh_alloc+0x365>
               	movq	96(%rsi), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	movq	16(%rsp), %rbx
               	movb	(%r15), %cl
               	movzbl	%cl, %edi
               	testb	%dil, %dil
               	jne	0x43248f <mi_page_fresh_alloc+0x3bf>
               	movq	80(%rsi), %rbp
               	movq	%rax, %rcx
               	subq	%rbp, %rcx
               	cmpl	$1, %edx
               	ja	0x43248c <mi_page_fresh_alloc+0x3bc>
               	testq	%rbx, %rbx
               	je	0x43248c <mi_page_fresh_alloc+0x3bc>
               	imulq	%rdi, %rax
               	addq	%rsi, %rax
               	addq	%rbp, %rax
               	movq	%rax, %rdx
               	orq	%rbx, %rdx
               	shrq	$32, %rdx
               	je	0x432476 <mi_page_fresh_alloc+0x3a6>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x43247a <mi_page_fresh_alloc+0x3aa>
               	xorl	%edx, %edx
               	divl	%ebx
               	movq	%rbx, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbx, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	cmpq	$67108864, %rbx         # imm = 0x4000000
               	movl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbx, %rbp
               	movl	%ebp, 20(%r15)
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x4324b6 <mi_page_fresh_alloc+0x3e6>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x4324ba <mi_page_fresh_alloc+0x3ea>
               	xorl	%edx, %edx
               	divl	%ebx
               	movw	%ax, 4(%r15)
               	movb	1(%r15), %cl
               	shrb	$3, %cl
               	andb	$1, %cl
               	movb	7(%r15), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 7(%r15)
               	cmpq	$0, 8(%r15)
               	jne	0x432610 <mi_page_fresh_alloc+0x540>
               	movzwl	2(%r15), %ecx
               	cmpw	%ax, %cx
               	jae	0x432610 <mi_page_fresh_alloc+0x540>
               	movzwl	%cx, %r8d
               	movl	112(%rsi), %edx
               	cmpl	$3, %edx
               	jne	0x43250c <mi_page_fresh_alloc+0x43c>
               	movq	72(%rsi), %rax
               	testb	%dil, %dil
               	je	0x43251d <mi_page_fresh_alloc+0x44d>
               	movq	%r12, %rbx
               	jmp	0x4325ad <mi_page_fresh_alloc+0x4dd>
               	movq	96(%rsi), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%dil, %dil
               	jne	0x432504 <mi_page_fresh_alloc+0x434>
               	movq	80(%rsi), %rbx
               	movq	%rax, %rcx
               	subq	%rbx, %rcx
               	cmpl	$1, %edx
               	ja	0x432551 <mi_page_fresh_alloc+0x481>
               	testq	%rbp, %rbp
               	je	0x432551 <mi_page_fresh_alloc+0x481>
               	imulq	%rdi, %rax
               	addq	%rax, %rsi
               	addq	%rbx, %rsi
               	movq	%rsi, %rax
               	movq	%r12, %rbx
               	shrq	$32, %rax
               	je	0x432592 <mi_page_fresh_alloc+0x4c2>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x432598 <mi_page_fresh_alloc+0x4c8>
               	movq	%r12, %rbx
               	jmp	0x4325aa <mi_page_fresh_alloc+0x4da>
               	movq	24(%rdx), %rcx
               	leaq	1(%rcx), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rcx
               	jl	0x43256c <mi_page_fresh_alloc+0x49c>
               	movq	%rax, 16(%rdx)
               	movq	(%rdx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rdx)
               	movl	$1, %eax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	ja	0x4322ae <mi_page_fresh_alloc+0x1de>
               	jmp	0x4322b2 <mi_page_fresh_alloc+0x1e2>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	movl	20(%r15), %esi
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	cmovaeq	%rax, %rsi
               	movzwl	4(%r15), %r12d
               	subq	%r8, %r12
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x4325dd <mi_page_fresh_alloc+0x50d>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %r12
               	cmovaq	%rax, %r12
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	callq	0x4330e0 <mi_page_free_list_extend>
               	movzwl	2(%r15), %eax
               	addl	%r12d, %eax
               	movw	%ax, 2(%r15)
               	testb	$8, 1(%r15)
               	movq	%rbx, %r12
               	jne	0x432610 <mi_page_fresh_alloc+0x540>
               	movb	7(%r15), %al
               	andb	$-2, %al
               	movb	%al, 7(%r15)
               	movq	(%r12), %rdx
               	leaq	208(%rdx), %rcx
               	leaq	192350(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x43266f <mi_page_fresh_alloc+0x59f>
               	leaq	192914(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x43266f <mi_page_fresh_alloc+0x59f>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 232(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	224(%rdx), %rax
               	cmpq	%rsi, %rax
               	jg	0x432660 <mi_page_fresh_alloc+0x590>
               	lock
               	cmpxchgq	%rdi, 224(%rdx)
               	jne	0x432650 <mi_page_fresh_alloc+0x580>
               	lock
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	jne	0x4326a4 <mi_page_fresh_alloc+0x5d4>
               	jmp	0x4328c2 <mi_page_fresh_alloc+0x7f2>
               	movq	232(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 232(%rdx)
               	cmpq	224(%rdx), %rsi
               	jl	0x432691 <mi_page_fresh_alloc+0x5c1>
               	movq	%rax, 224(%rdx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	testq	%r13, %r13
               	je	0x4328c2 <mi_page_fresh_alloc+0x7f2>
               	cmpq	$2097168, 16(%r13)      # imm = 0x200010
               	sete	%al
               	movb	6(%r15), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%r15)
               	movq	(%r13), %rax
               	movq	%rax, 48(%r15)
               	movq	$0, 56(%r15)
               	leaq	56(%rax), %rcx
               	leaq	8(%r13), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, (%r13)
               	movq	16(%r13), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x4328ae <mi_page_fresh_alloc+0x7de>
               	leaq	7(%rcx), %rax
               	shrq	$3, %rax
               	cmpq	%r15, 8(%r12,%rax,8)
               	je	0x4328ae <mi_page_fresh_alloc+0x7de>
               	cmpq	$9, %rcx
               	jae	0x432713 <mi_page_fresh_alloc+0x643>
               	xorl	%ecx, %ecx
               	jmp	0x4327d1 <mi_page_fresh_alloc+0x701>
               	cmpq	$64, %rcx
               	ja	0x432721 <mi_page_fresh_alloc+0x651>
               	leal	1(%rax), %edx
               	andb	$-2, %dl
               	jmp	0x43273a <mi_page_fresh_alloc+0x66a>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %edx
               	addb	$-3, %dl
               	leaq	1040(%r12), %rsi
               	addq	$-24, %r13
               	nopw	%cs:(%rax,%rax)
               	movq	16(%r13), %rdi
               	addq	$7, %rdi
               	movq	%rdi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rdi
               	jb	0x4327b0 <mi_page_fresh_alloc+0x6e0>
               	cmpq	$71, %rdi
               	ja	0x432780 <mi_page_fresh_alloc+0x6b0>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x4327b0 <mi_page_fresh_alloc+0x6e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdi          # imm = 0x200007
               	ja	0x4327b0 <mi_page_fresh_alloc+0x6e0>
               	leaq	-1(%rbp), %rdi
               	bsrq	%rdi, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdi
               	andl	$3, %edi
               	leal	(%rdi,%rbx,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %r13
               	jbe	0x4327bd <mi_page_fresh_alloc+0x6ed>
               	addq	$-24, %r13
               	cmpb	%cl, %dl
               	je	0x432750 <mi_page_fresh_alloc+0x680>
               	leaq	1(%rbp), %rcx
               	cmpq	%rax, %rbp
               	cmovaeq	%rax, %rcx
               	cmpq	%rax, %rcx
               	ja	0x4328ae <mi_page_fresh_alloc+0x7de>
               	addq	$1, %rax
               	movq	%rax, %rdx
               	subq	%rcx, %rdx
               	cmpq	$4, %rdx
               	jb	0x4328a0 <mi_page_fresh_alloc+0x7d0>
               	movq	%rdx, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x432814 <mi_page_fresh_alloc+0x744>
               	xorl	%ebx, %ebx
               	jmp	0x432869 <mi_page_fresh_alloc+0x799>
               	leaq	(%r12,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rdi
               	jne	0x432830 <mi_page_fresh_alloc+0x760>
               	testq	%rbp, %rbp
               	je	0x432892 <mi_page_fresh_alloc+0x7c2>
               	addq	%rcx, %rbx
               	leaq	(%r12,%rbx,8), %rsi
               	addq	$24, %rsi
               	negq	%rbp
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rbp
               	jne	0x432880 <mi_page_fresh_alloc+0x7b0>
               	cmpq	%r8, %rdx
               	je	0x4328ae <mi_page_fresh_alloc+0x7de>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %rax
               	jne	0x4328a0 <mi_page_fresh_alloc+0x7d0>
               	movq	3016(%r12), %rax
               	addq	$1, %rax
               	movq	%rax, 3016(%r12)
               	movq	%r15, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_queue_find_free_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorb	$1, %dl
               	leaq	-24(%rsi), %rax
               	movq	%rax, 8(%rsp)
               	leaq	1040(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movl	%edx, 4(%rsp)
               	movq	(%r14), %r13
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	testq	%r13, %r13
               	je	0x432f00 <mi_page_queue_find_free_ex+0x620>
               	movq	%r13, %rbx
               	movq	48(%r13), %r13
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432990 <mi_page_queue_find_free_ex+0xb0>
               	movq	32(%rbx), %rax
               	nop
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432940 <mi_page_queue_find_free_ex+0x60>
               	andq	$-4, %rcx
               	je	0x432990 <mi_page_queue_find_free_ex+0xb0>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x432972 <mi_page_queue_find_free_ex+0x92>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x432960 <mi_page_queue_find_free_ex+0x80>
               	cmpl	%edx, %eax
               	jbe	0x432a63 <mi_page_queue_find_free_ex+0x183>
               	movl	$14, %edi
               	leaq	74360(%rip), %rsi       # 0x444bfe <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4329b4 <mi_page_queue_find_free_ex+0xd4>
               	cmpq	$0, 8(%rbx)
               	jne	0x4329b4 <mi_page_queue_find_free_ex+0xd4>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	cmpq	$0, 8(%rbx)
               	jne	0x4330ba <mi_page_queue_find_free_ex+0x7da>
               	movzwl	2(%rbx), %eax
               	movzwl	4(%rbx), %ecx
               	cmpw	%cx, %ax
               	jb	0x432fe7 <mi_page_queue_find_free_ex+0x707>
               	testb	$1, 6(%rbx)
               	jne	0x432920 <mi_page_queue_find_free_ex+0x40>
               	movq	40(%rbx), %rdx
               	movq	40(%rbx), %r9
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4329f3 <mi_page_queue_find_free_ex+0x113>
               	movq	48(%rbx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	48(%rbx), %r15
               	testq	%r15, %r15
               	je	0x432a00 <mi_page_queue_find_free_ex+0x120>
               	movq	%rax, 56(%r15)
               	cmpq	%rbx, 8(%r14)
               	je	0x432a11 <mi_page_queue_find_free_ex+0x131>
               	cmpq	%rbx, (%r14)
               	jne	0x432c20 <mi_page_queue_find_free_ex+0x340>
               	jmp	0x432a22 <mi_page_queue_find_free_ex+0x142>
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r14)
               	cmpq	%rbx, (%r14)
               	jne	0x432c20 <mi_page_queue_find_free_ex+0x340>
               	movq	%r15, (%r14)
               	movq	16(%r14), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x432c20 <mi_page_queue_find_free_ex+0x340>
               	testq	%r15, %r15
               	leaq	77377(%rip), %rcx       # 0x445880 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r10
               	shrq	$3, %r10
               	cmpq	%r15, 8(%r9,%r10,8)
               	je	0x432c20 <mi_page_queue_find_free_ex+0x340>
               	cmpq	$9, %rax
               	jae	0x432a88 <mi_page_queue_find_free_ex+0x1a8>
               	xorl	%ecx, %ecx
               	jmp	0x432b42 <mi_page_queue_find_free_ex+0x262>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %ecx
               	subl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x432999 <mi_page_queue_find_free_ex+0xb9>
               	jmp	0x4329b4 <mi_page_queue_find_free_ex+0xd4>
               	cmpq	$64, %rax
               	ja	0x432a98 <mi_page_queue_find_free_ex+0x1b8>
               	leal	1(%r10), %r8d
               	andb	$-2, %r8b
               	jmp	0x432ab3 <mi_page_queue_find_free_ex+0x1d3>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r9), %rax
               	movq	8(%rsp), %rdi
               	nop
               	movq	16(%rdi), %rsi
               	addq	$7, %rsi
               	movq	%rsi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rsi
               	jb	0x432b20 <mi_page_queue_find_free_ex+0x240>
               	cmpq	$71, %rsi
               	ja	0x432af0 <mi_page_queue_find_free_ex+0x210>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x432b20 <mi_page_queue_find_free_ex+0x240>
               	movb	$73, %cl
               	cmpq	$2097159, %rsi          # imm = 0x200007
               	ja	0x432b20 <mi_page_queue_find_free_ex+0x240>
               	leaq	-1(%rbp), %rsi
               	bsrq	%rsi, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rdi
               	jbe	0x432b2e <mi_page_queue_find_free_ex+0x24e>
               	addq	$-24, %rdi
               	cmpb	%cl, %r8b
               	je	0x432ac0 <mi_page_queue_find_free_ex+0x1e0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r10, %rbp
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x432c20 <mi_page_queue_find_free_ex+0x340>
               	addq	$1, %r10
               	movq	%r10, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432c10 <mi_page_queue_find_free_ex+0x330>
               	movq	%r11, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x432b85 <mi_page_queue_find_free_ex+0x2a5>
               	xorl	%ebp, %ebp
               	jmp	0x432bd9 <mi_page_queue_find_free_ex+0x2f9>
               	leaq	(%r9,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbp,8)
               	movdqu	%xmm0, -96(%rsi,%rbp,8)
               	movdqu	%xmm0, -80(%rsi,%rbp,8)
               	movdqu	%xmm0, -64(%rsi,%rbp,8)
               	movdqu	%xmm0, -48(%rsi,%rbp,8)
               	movdqu	%xmm0, -32(%rsi,%rbp,8)
               	movdqu	%xmm0, -16(%rsi,%rbp,8)
               	movdqu	%xmm0, (%rsi,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdi
               	jne	0x432ba0 <mi_page_queue_find_free_ex+0x2c0>
               	testq	%rax, %rax
               	je	0x432c02 <mi_page_queue_find_free_ex+0x322>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rsi
               	addq	$24, %rsi
               	negq	%rax
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rax
               	jne	0x432bf0 <mi_page_queue_find_free_ex+0x310>
               	cmpq	%r8, %r11
               	je	0x432c20 <mi_page_queue_find_free_ex+0x340>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x432c10 <mi_page_queue_find_free_ex+0x330>
               	nop
               	movq	2824(%rdx), %rax
               	movq	%rax, 56(%rbx)
               	movq	$0, 48(%rbx)
               	testq	%rax, %rax
               	je	0x432c4f <mi_page_queue_find_free_ex+0x36f>
               	movq	%rbx, 48(%rax)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	jmp	0x432e30 <mi_page_queue_find_free_ex+0x550>
               	movq	%rbx, 2816(%rdx)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x432e30 <mi_page_queue_find_free_ex+0x550>
               	leaq	7(%r8), %r15
               	shrq	$3, %r15
               	cmpq	%rbx, 8(%r9,%r15,8)
               	je	0x432e30 <mi_page_queue_find_free_ex+0x550>
               	cmpq	$9, %r8
               	jae	0x432c91 <mi_page_queue_find_free_ex+0x3b1>
               	xorl	%ecx, %ecx
               	jmp	0x432d52 <mi_page_queue_find_free_ex+0x472>
               	cmpq	$64, %r8
               	ja	0x432ca1 <mi_page_queue_find_free_ex+0x3c1>
               	leal	1(%r15), %ebp
               	andb	$-2, %bpl
               	jmp	0x432cbb <mi_page_queue_find_free_ex+0x3db>
               	leaq	-1(%r15), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %ebp
               	addb	$-3, %bpl
               	leaq	1040(%r9), %rsi
               	addq	$2792, %rdx             # imm = 0xAE8
               	nopl	(%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x432d30 <mi_page_queue_find_free_ex+0x450>
               	cmpq	$71, %rax
               	ja	0x432d00 <mi_page_queue_find_free_ex+0x420>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x432d30 <mi_page_queue_find_free_ex+0x450>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x432d30 <mi_page_queue_find_free_ex+0x450>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r10
               	movl	%r10d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r10,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x432d3e <mi_page_queue_find_free_ex+0x45e>
               	addq	$-24, %rdx
               	cmpb	%cl, %bpl
               	je	0x432cd0 <mi_page_queue_find_free_ex+0x3f0>
               	leaq	1(%rdi), %rcx
               	cmpq	%r15, %rdi
               	cmovaeq	%r15, %rcx
               	cmpq	%r15, %rcx
               	ja	0x432e30 <mi_page_queue_find_free_ex+0x550>
               	addq	$1, %r15
               	movq	%r15, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x432e20 <mi_page_queue_find_free_ex+0x540>
               	movq	%r11, %r10
               	andq	$-4, %r10
               	movq	%rbx, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r10), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rdx
               	jae	0x432d95 <mi_page_queue_find_free_ex+0x4b5>
               	xorl	%ebp, %ebp
               	jmp	0x432de9 <mi_page_queue_find_free_ex+0x509>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rbp,8)
               	movdqu	%xmm0, -96(%rdx,%rbp,8)
               	movdqu	%xmm0, -80(%rdx,%rbp,8)
               	movdqu	%xmm0, -64(%rdx,%rbp,8)
               	movdqu	%xmm0, -48(%rdx,%rbp,8)
               	movdqu	%xmm0, -32(%rdx,%rbp,8)
               	movdqu	%xmm0, -16(%rdx,%rbp,8)
               	movdqu	%xmm0, (%rdx,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rsi
               	jne	0x432db0 <mi_page_queue_find_free_ex+0x4d0>
               	testq	%rax, %rax
               	je	0x432e12 <mi_page_queue_find_free_ex+0x532>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x432e00 <mi_page_queue_find_free_ex+0x520>
               	cmpq	%r10, %r11
               	je	0x432e30 <mi_page_queue_find_free_ex+0x550>
               	addq	%r10, %rcx
               	nop
               	movq	%rbx, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r15
               	jne	0x432e20 <mi_page_queue_find_free_ex+0x540>
               	nop
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rbx), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rbx)
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432eb0 <mi_page_queue_find_free_ex+0x5d0>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432e60 <mi_page_queue_find_free_ex+0x580>
               	andq	$-4, %rcx
               	je	0x432eb0 <mi_page_queue_find_free_ex+0x5d0>
               	movzwl	2(%rbx), %esi
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rdx
               	addl	$1, %eax
               	cmpl	%esi, %eax
               	ja	0x432e92 <mi_page_queue_find_free_ex+0x5b2>
               	movq	(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x432e80 <mi_page_queue_find_free_ex+0x5a0>
               	cmpl	%esi, %eax
               	jbe	0x432ee1 <mi_page_queue_find_free_ex+0x601>
               	movl	$14, %edi
               	leaq	73048(%rip), %rsi       # 0x444bfe <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42bf40 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rcx
               	testq	%rcx, %rcx
               	je	0x432920 <mi_page_queue_find_free_ex+0x40>
               	cmpq	$0, 8(%rbx)
               	jne	0x432920 <mi_page_queue_find_free_ex+0x40>
               	movq	%rcx, 8(%rbx)
               	movq	$0, 24(%rbx)
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	jmp	0x432920 <mi_page_queue_find_free_ex+0x40>
               	movq	24(%rbx), %rsi
               	movq	%rsi, (%rdx)
               	movq	%rcx, 24(%rbx)
               	movl	16(%rbx), %edx
               	subl	%eax, %edx
               	movl	%edx, 16(%rbx)
               	testq	%rcx, %rcx
               	jne	0x432ebd <mi_page_queue_find_free_ex+0x5dd>
               	jmp	0x432920 <mi_page_queue_find_free_ex+0x40>
               	nop
               	movq	3024(%r12), %rbp
               	cmpq	3032(%r12), %rbp
               	jbe	0x432f60 <mi_page_queue_find_free_ex+0x680>
               	movl	$74, %r13d
               	xorl	%r15d, %r15d
               	movq	%r13, 3024(%r12)
               	movq	%r15, 3032(%r12)
               	movq	16(%r14), %rdx
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x4320d0 <mi_page_fresh_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	setne	%al
               	orb	4(%rsp), %al
               	movb	$1, %dl
               	testb	$1, %al
               	je	0x43290c <mi_page_queue_find_free_ex+0x2c>
               	jmp	0x4330c2 <mi_page_queue_find_free_ex+0x7e2>
               	nopw	%cs:(%rax,%rax)
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	movq	16(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %rbx
               	movl	$74, %r13d
               	xorl	%r15d, %r15d
               	jmp	0x432fa6 <mi_page_queue_find_free_ex+0x6c6>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r12), %rbp
               	ja	0x432f1b <mi_page_queue_find_free_ex+0x63b>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432f90 <mi_page_queue_find_free_ex+0x6b0>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x432f90 <mi_page_queue_find_free_ex+0x6b0>
               	cmpl	$0, 16(%rax)
               	jne	0x432f7f <mi_page_queue_find_free_ex+0x69f>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	cmpb	$1, %cl
               	ja	0x432fd7 <mi_page_queue_find_free_ex+0x6f7>
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	callq	0x42d250 <_mi_page_free>
               	jmp	0x432f90 <mi_page_queue_find_free_ex+0x6b0>
               	cmpq	%r13, %rbp
               	cmovbq	%rbp, %r13
               	cmpq	%r15, %rbp
               	cmovaq	%rbp, %r15
               	jmp	0x432f90 <mi_page_queue_find_free_ex+0x6b0>
               	movzwl	%ax, %r8d
               	movzwl	%cx, %ebp
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rbx), %edi
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x43300e <mi_page_queue_find_free_ex+0x72e>
               	movq	72(%rax), %rsi
               	movb	(%rbx), %cl
               	testb	%cl, %cl
               	jne	0x433069 <mi_page_queue_find_free_ex+0x789>
               	jmp	0x433020 <mi_page_queue_find_free_ex+0x740>
               	movq	96(%rax), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movb	(%rbx), %cl
               	testb	%cl, %cl
               	jne	0x433069 <mi_page_queue_find_free_ex+0x789>
               	movq	80(%rax), %r9
               	movq	%rsi, %r10
               	subq	%r9, %r10
               	cmpl	$1, %edx
               	ja	0x433066 <mi_page_queue_find_free_ex+0x786>
               	testl	%edi, %edi
               	je	0x433066 <mi_page_queue_find_free_ex+0x786>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rsi
               	addq	%rsi, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x433050 <mi_page_queue_find_free_ex+0x770>
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x433054 <mi_page_queue_find_free_ex+0x774>
               	xorl	%edx, %edx
               	divl	%edi
               	movq	%rdi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rdi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r10
               	movq	%r10, %rsi
               	cmpl	$67108864, %edi         # imm = 0x4000000
               	cmovbq	%rdi, %rsi
               	subq	%r8, %rbp
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x433090 <mi_page_queue_find_free_ex+0x7b0>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %rbp
               	cmovaq	%rax, %rbp
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x4330e0 <mi_page_free_list_extend>
               	movzwl	2(%rbx), %eax
               	addl	%ebp, %eax
               	movw	%ax, 2(%rbx)
               	testb	$8, 1(%rbx)
               	jne	0x4330ba <mi_page_queue_find_free_ex+0x7da>
               	movb	7(%rbx), %al
               	andb	$-2, %al
               	movb	%al, 7(%rbx)
               	movb	7(%rbx), %al
               	andb	$1, %al
               	movb	%al, 7(%rbx)
               	movq	%rbx, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_free_list_extend>:
               	movq	%rdx, %r8
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rdi), %r9d
               	movl	112(%rax), %r10d
               	cmpl	$3, %r10d
               	jne	0x433100 <mi_page_free_list_extend+0x20>
               	movq	72(%rax), %r11
               	jmp	0x43310d <mi_page_free_list_extend+0x2d>
               	movq	96(%rax), %rcx
               	movl	$1, %r11d
               	shlq	%cl, %r11
               	movb	(%rdi), %cl
               	movzbl	%cl, %edx
               	movq	%rdx, %rcx
               	imulq	%r11, %rcx
               	addq	%rax, %rcx
               	testb	%dl, %dl
               	jne	0x43315a <mi_page_free_list_extend+0x7a>
               	addq	80(%rax), %rcx
               	cmpl	$1, %r10d
               	ja	0x43315a <mi_page_free_list_extend+0x7a>
               	testl	%r9d, %r9d
               	je	0x43315a <mi_page_free_list_extend+0x7a>
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433142 <mi_page_free_list_extend+0x62>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%r9
               	jmp	0x433149 <mi_page_free_list_extend+0x69>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%r9d
               	movq	%r9, %rax
               	subq	%rdx, %rax
               	leaq	(%rcx,%rax), %rdx
               	cmpq	%r9, %rax
               	cmovbq	%rdx, %rcx
               	movzwl	2(%rdi), %r10d
               	movq	%r10, %r11
               	imulq	%rsi, %r11
               	leaq	(%rcx,%r11), %r9
               	leaq	(%r8,%r10), %rax
               	addq	$-1, %rax
               	imulq	%rsi, %rax
               	leaq	(%rcx,%rax), %rdx
               	cmpq	%rax, %r11
               	jg	0x43319e <mi_page_free_list_extend+0xbe>
               	addq	$1, %r10
               	imulq	%rsi, %r10
               	addq	%r10, %rcx
               	movq	%r9, %rax
               	nopl	(%rax)
               	movq	%rcx, (%rax)
               	addq	%rsi, %rax
               	addq	%rsi, %rcx
               	cmpq	%rdx, %rax
               	jbe	0x433190 <mi_page_free_list_extend+0xb0>
               	movq	8(%rdi), %rax
               	movq	%rax, (%rdx)
               	movq	%r9, 8(%rdi)
               	retq
               	nopw	(%rax,%rax)

<mi_segment_reclaim_or_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%r9, %r14
               	movq	%r8, %rbx
               	movq	%rcx, %r12
               	movl	%edx, %r13d
               	movq	104(%r8), %rbp
               	testq	%rbp, %rbp
               	je	0x43325e <mi_segment_reclaim_or_alloc+0xae>
               	movq	88(%rbx), %rax
               	addq	$-1, %rax
               	movq	%rax, 88(%rbx)
               	movq	24(%rbp), %rax
               	movq	%rax, 104(%rbx)
               	movq	$0, 24(%rbp)
               	movq	112(%rbx), %rcx
               	leaq	416(%rcx), %rax
               	leaq	189307(%rip), %rdx      # 0x461580 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x4334e9 <mi_segment_reclaim_or_alloc+0x339>
               	leaq	189867(%rip), %rdx      # 0x4617c0 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x4334e9 <mi_segment_reclaim_or_alloc+0x339>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x433250 <mi_segment_reclaim_or_alloc+0xa0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x433240 <mi_segment_reclaim_or_alloc+0x90>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x43351d <mi_segment_reclaim_or_alloc+0x36d>
               	movq	%rdi, %r15
               	movq	%rsi, 24(%rsp)
               	movb	$0, 3(%rsp)
               	movl	$7, %eax
               	xorl	%ebp, %ebp
               	movl	%r13d, 4(%rsp)
               	movq	%rdi, 8(%rsp)
               	movl	%eax, 20(%rsp)
               	movq	288953(%rip), %rax      # 0x479b40 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x43334c <mi_segment_reclaim_or_alloc+0x19c>
               	movq	289062(%rip), %rax      # 0x479bc0 <abandoned_visited>
               	testq	%rax, %rax
               	je	0x4334da <mi_segment_reclaim_or_alloc+0x32a>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 289044(%rip)      # 0x479bc0 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x4334da <mi_segment_reclaim_or_alloc+0x32a>
               	movq	288900(%rip), %rax      # 0x479b40 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x4332e2 <mi_segment_reclaim_or_alloc+0x132>
               	movq	289077(%rip), %rdx      # 0x479c00 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 288864(%rip)      # 0x479b40 <abandoned>
               	je	0x43333c <mi_segment_reclaim_or_alloc+0x18c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x4332f0 <mi_segment_reclaim_or_alloc+0x140>
               	movq	288825(%rip), %rax      # 0x479b40 <abandoned>
               	nopw	(%rax,%rax)
               	movq	289001(%rip), %rdx      # 0x479c00 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 288774(%rip)      # 0x479b40 <abandoned>
               	jne	0x433310 <mi_segment_reclaim_or_alloc+0x160>
               	lock
               	addq	%rdx, 288828(%rip)      # 0x479b80 <abandoned_count>
               	lock
               	subq	%rdx, 288948(%rip)      # 0x479c00 <abandoned_visited_count>
               	lock
               	addq	$1, 288683(%rip)        # 0x479b00 <abandoned_readers>
               	movq	288740(%rip), %rax      # 0x479b40 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	je	0x4334ca <mi_segment_reclaim_or_alloc+0x31a>
               	movq	16(%r15), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 288695(%rip)      # 0x479b40 <abandoned>
               	jne	0x433360 <mi_segment_reclaim_or_alloc+0x1b0>
               	lock
               	subq	$1, 288620(%rip)        # 0x479b00 <abandoned_readers>
               	movq	$0, 16(%r15)
               	lock
               	subq	$1, 288731(%rip)        # 0x479b80 <abandoned_count>
               	movq	48(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 48(%r15)
               	cmpq	$0, 64(%r15)
               	je	0x433441 <mi_segment_reclaim_or_alloc+0x291>
               	movq	%r12, 32(%rsp)
               	movq	%rbx, 40(%rsp)
               	movq	%r14, 48(%rsp)
               	leaq	120(%r15), %r14
               	xorl	%ebp, %ebp
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	xorl	%ebx, %ebx
               	jmp	0x4333f0 <mi_segment_reclaim_or_alloc+0x240>
               	addq	$1, %r12
               	movb	$1, %bpl
               	addq	$1, %r13
               	addq	$64, %r14
               	cmpq	64(%r15), %r13
               	jae	0x43342d <mi_segment_reclaim_or_alloc+0x27d>
               	testb	$1, 1(%r14)
               	je	0x4333df <mi_segment_reclaim_or_alloc+0x22f>
               	addq	$1, %rbx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42d180 <_mi_page_free_collect>
               	movl	16(%r14), %eax
               	testl	%eax, %eax
               	je	0x4333db <mi_segment_reclaim_or_alloc+0x22b>
               	movl	20(%r14), %ecx
               	cmpq	24(%rsp), %rcx
               	jne	0x4333e2 <mi_segment_reclaim_or_alloc+0x232>
               	movzwl	4(%r14), %ecx
               	cmpl	%ecx, %eax
               	jb	0x4333df <mi_segment_reclaim_or_alloc+0x22f>
               	movq	32(%r14), %rax
               	cmpq	$4, %rax
               	jae	0x4333df <mi_segment_reclaim_or_alloc+0x22f>
               	jmp	0x4333e2 <mi_segment_reclaim_or_alloc+0x232>
               	cmpq	%r12, %rbx
               	movq	48(%rsp), %r14
               	movq	40(%rsp), %rbx
               	movq	32(%rsp), %r12
               	jne	0x43346e <mi_segment_reclaim_or_alloc+0x2be>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fb60 <mi_segment_reclaim>
               	movl	4(%rsp), %r13d
               	movl	20(%rsp), %eax
               	subl	$1, %eax
               	movl	$0, %ebp
               	jae	0x43327c <mi_segment_reclaim_or_alloc+0xcc>
               	jmp	0x4334da <mi_segment_reclaim_or_alloc+0x32a>
               	testb	$1, %bpl
               	movl	4(%rsp), %r13d
               	je	0x433483 <mi_segment_reclaim_or_alloc+0x2d3>
               	cmpl	%r13d, 112(%r15)
               	je	0x433545 <mi_segment_reclaim_or_alloc+0x395>
               	cmpq	$3, 48(%r15)
               	jb	0x4334a0 <mi_segment_reclaim_or_alloc+0x2f0>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x42fb60 <mi_segment_reclaim>
               	jmp	0x43345a <mi_segment_reclaim_or_alloc+0x2aa>
               	movq	288537(%rip), %rax      # 0x479bc0 <abandoned_visited>
               	nopw	(%rax,%rax)
               	movq	%rax, 16(%r15)
               	lock
               	cmpxchgq	%r15, 288515(%rip)      # 0x479bc0 <abandoned_visited>
               	jne	0x4334b0 <mi_segment_reclaim_or_alloc+0x300>
               	lock
               	addq	$1, 288568(%rip)        # 0x479c00 <abandoned_visited_count>
               	jmp	0x43345a <mi_segment_reclaim_or_alloc+0x2aa>
               	lock
               	subq	$1, 288301(%rip)        # 0x479b00 <abandoned_readers>
               	xorl	%ebp, %ebp
               	movl	4(%rsp), %r13d
               	cmpb	$0, 3(%rsp)
               	je	0x43356d <mi_segment_reclaim_or_alloc+0x3bd>
               	xorl	%ebp, %ebp
               	jmp	0x433533 <mi_segment_reclaim_or_alloc+0x383>
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x43350b <mi_segment_reclaim_or_alloc+0x35b>
               	movq	%rax, 432(%rcx)
               	movq	424(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 424(%rcx)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%rbx, %r8
               	movq	%r14, %r9
               	callq	0x433810 <mi_segment_init>
               	movq	%rbp, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	3(%rsp), %rcx
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	movq	24(%rsp), %rdx
               	movq	%rbx, %r8
               	callq	0x42fb60 <mi_segment_reclaim>
               	movq	%rax, %rbp
               	cmpb	$0, 3(%rsp)
               	jne	0x4334e5 <mi_segment_reclaim_or_alloc+0x335>
               	testq	%rbp, %rbp
               	jne	0x433533 <mi_segment_reclaim_or_alloc+0x383>
               	xorl	%edi, %edi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%rbx, %r8
               	movq	%r14, %r9
               	callq	0x433810 <mi_segment_init>
               	movq	%rax, %rbp
               	jmp	0x433533 <mi_segment_reclaim_or_alloc+0x383>
               	nopl	(%rax)

<mi_segment_find_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 64(%rdi)
               	je	0x433784 <mi_segment_find_free+0x1f4>
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	120(%rdi), %rbx
               	leaq	6(%rsp), %r12
               	leaq	7(%rsp), %r13
               	xorl	%ebp, %ebp
               	jmp	0x4335f6 <mi_segment_find_free+0x66>
               	nop
               	movzbl	1(%rbx), %ecx
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	testb	%al, %al
               	jne	0x433788 <mi_segment_find_free+0x1f8>
               	andb	$-2, %cl
               	movb	%cl, 1(%rbx)
               	movq	56(%r15), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%r15)
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	64(%r15), %rbp
               	jae	0x433784 <mi_segment_find_free+0x1f4>
               	movzbl	1(%rbx), %ecx
               	testb	$1, %cl
               	jne	0x4335e4 <mi_segment_find_free+0x54>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rdx
               	testq	%rax, %rax
               	je	0x433613 <mi_segment_find_free+0x83>
               	testq	%rdx, %rdx
               	jne	0x43361c <mi_segment_find_free+0x8c>
               	jmp	0x433629 <mi_segment_find_free+0x99>
               	testq	%rdx, %rdx
               	je	0x43376b <mi_segment_find_free+0x1db>
               	movq	%rax, 48(%rdx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43362d <mi_segment_find_free+0x9d>
               	movq	%rdx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x43365d <mi_segment_find_free+0xcd>
               	cmpq	32(%r14), %rbx
               	je	0x43366b <mi_segment_find_free+0xdb>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movzbl	1(%rbx), %ecx
               	testb	$4, %cl
               	jne	0x4336ce <mi_segment_find_free+0x13e>
               	cmpl	$3, 112(%r15)
               	jne	0x433671 <mi_segment_find_free+0xe1>
               	movq	72(%r15), %rsi
               	jmp	0x43367d <mi_segment_find_free+0xed>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x433639 <mi_segment_find_free+0xa9>
               	movq	%rax, 32(%r14)
               	jmp	0x433639 <mi_segment_find_free+0xa9>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%al, %al
               	jne	0x43369b <mi_segment_find_free+0x10b>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 6(%rsp)
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r12, %r8
               	callq	0x42d980 <mi_os_commitx>
               	testb	%al, %al
               	je	0x4335e4 <mi_segment_find_free+0x54>
               	cmpb	$0, 6(%rsp)
               	movzbl	1(%rbx), %ecx
               	je	0x4336c8 <mi_segment_find_free+0x138>
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	orb	$4, %cl
               	movb	%cl, 1(%rbx)
               	orb	$1, %cl
               	movb	%cl, 1(%rbx)
               	movq	56(%r15), %rax
               	addq	$1, %rax
               	movq	%rax, 56(%r15)
               	movzbl	1(%rbx), %eax
               	testb	$2, %al
               	je	0x433788 <mi_segment_find_free+0x1f8>
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433788 <mi_segment_find_free+0x1f8>
               	cmpb	$0, 8(%r15)
               	jne	0x433788 <mi_segment_find_free+0x1f8>
               	andb	$-3, %al
               	movb	%al, 1(%rbx)
               	cmpl	$3, 112(%r15)
               	jne	0x433717 <mi_segment_find_free+0x187>
               	movq	72(%r15), %rsi
               	jmp	0x433723 <mi_segment_find_free+0x193>
               	movq	96(%r15), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%r15, %rdi
               	testb	%al, %al
               	jne	0x433741 <mi_segment_find_free+0x1b1>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 7(%rsp)
               	testq	%rsi, %rsi
               	je	0x433788 <mi_segment_find_free+0x1f8>
               	movq	%r13, %rdx
               	callq	0x434890 <_mi_os_unreset>
               	cmpb	$0, 7(%rsp)
               	jne	0x4335c0 <mi_segment_find_free+0x30>
               	testb	%al, %al
               	jne	0x433788 <mi_segment_find_free+0x1f8>
               	movzbl	1(%rbx), %ecx
               	jmp	0x4335d2 <mi_segment_find_free+0x42>
               	cmpq	32(%r14), %rbx
               	je	0x43362d <mi_segment_find_free+0x9d>
               	cmpq	40(%r14), %rbx
               	jne	0x43364b <mi_segment_find_free+0xbb>
               	jmp	0x43362d <mi_segment_find_free+0x9d>
               	xorl	%ebx, %ebx
               	jmp	0x4337f1 <mi_segment_find_free+0x261>
               	movq	64(%r15), %rax
               	cmpq	%rax, 56(%r15)
               	jne	0x4337f1 <mi_segment_find_free+0x261>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x4337f1 <mi_segment_find_free+0x261>
               	testl	%eax, %eax
               	je	0x4337a8 <mi_segment_find_free+0x218>
               	cmpl	$1, %eax
               	jne	0x4337f1 <mi_segment_find_free+0x261>
               	addq	$16, %r14
               	leaq	24(%r15), %rax
               	movq	24(%r15), %rcx
               	movq	32(%r15), %rdx
               	testq	%rcx, %rcx
               	je	0x4337c0 <mi_segment_find_free+0x230>
               	testq	%rdx, %rdx
               	jne	0x4337c5 <mi_segment_find_free+0x235>
               	jmp	0x4337d1 <mi_segment_find_free+0x241>
               	testq	%rdx, %rdx
               	je	0x433803 <mi_segment_find_free+0x273>
               	movq	%rcx, 24(%rdx)
               	movq	(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4337d5 <mi_segment_find_free+0x245>
               	movq	%rdx, 32(%rcx)
               	cmpq	%r15, (%r14)
               	jne	0x4337dd <mi_segment_find_free+0x24d>
               	movq	%rcx, (%r14)
               	cmpq	%r15, 8(%r14)
               	jne	0x4337eb <mi_segment_find_free+0x25b>
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%r14)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpq	%r15, (%r14)
               	jne	0x4337f1 <mi_segment_find_free+0x261>
               	jmp	0x4337d5 <mi_segment_find_free+0x245>
               	nopw	(%rax,%rax)

<mi_segment_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%r9, 56(%rsp)
               	movq	%r8, %r12
               	movq	%rcx, %r14
               	movl	%edx, %r13d
               	movq	%rdi, %rbp
               	movl	$4194304, %eax          # imm = 0x400000
               	movl	$4194304, %edx          # imm = 0x400000
               	shrq	%cl, %rdx
               	cmpl	$3, %r13d
               	movl	$1, %r15d
               	cmovneq	%rdx, %r15
               	movl	%r15d, %ecx
               	shll	$6, %ecx
               	addl	$391, %ecx              # imm = 0x187
               	andl	$1073741568, %ecx       # imm = 0x3FFFFF00
               	movq	%rcx, 88(%rsp)
               	leaq	(%rsi,%rcx), %rbx
               	addq	$262143, %rbx           # imm = 0x3FFFF
               	andq	$-262144, %rbx          # imm = 0xFFFC0000
               	testq	%rsi, %rsi
               	cmoveq	%rax, %rbx
               	cmpl	$1, %r13d
               	movq	%rbx, 80(%rsp)
               	ja	0x4338a5 <mi_segment_init+0x95>
               	movq	56(%r12), %rbx
               	movl	$13, %edi
               	callq	0x42aae0 <mi_option_get>
               	xorl	%ecx, %ecx
               	movl	$0, %edx
               	cmpq	%rax, %rbx
               	movq	80(%rsp), %rbx
               	jb	0x4338b7 <mi_segment_init+0xa7>
               	movl	$3, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%dl
               	movb	$1, %cl
               	movb	%dl, 9(%rsp)
               	movb	$0, 8(%rsp)
               	testq	%rbp, %rbp
               	je	0x4339e6 <mi_segment_init+0x1d6>
               	movq	%r14, 96(%rsp)
               	cmpl	$1, %r13d
               	ja	0x43390c <mi_segment_init+0xfc>
               	cmpl	%r13d, 112(%rbp)
               	jne	0x43390c <mi_segment_init+0xfc>
               	cmpq	%rbx, 72(%rbp)
               	jne	0x43390c <mi_segment_init+0xfc>
               	movq	$0, 16(%rbp)
               	leaq	24(%rbp), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbp)
               	movups	%xmm0, 88(%rbp)
               	movups	%xmm0, 72(%rbp)
               	movups	%xmm0, 56(%rbp)
               	movups	%xmm0, 40(%rbp)
               	movups	%xmm0, 24(%rbp)
               	jmp	0x433afc <mi_segment_init+0x2ec>
               	movl	%r13d, 24(%rsp)
               	movq	%r12, %r14
               	cmpq	$0, 64(%rbp)
               	je	0x433a3d <mi_segment_init+0x22d>
               	movb	9(%rsp), %r13b
               	leaq	121(%rbp), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x433965 <mi_segment_init+0x155>
               	movl	$5, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x43396f <mi_segment_init+0x15f>
               	movzbl	(%rbx), %eax
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	addq	$1, %r12
               	movq	64(%rbp), %rax
               	addq	$64, %rbx
               	cmpq	%rax, %r12
               	jae	0x433a3f <mi_segment_init+0x22f>
               	testb	$2, (%rbx)
               	je	0x433950 <mi_segment_init+0x140>
               	testb	%r13b, %r13b
               	je	0x43392d <mi_segment_init+0x11d>
               	cmpb	$0, 8(%rbp)
               	jne	0x433950 <mi_segment_init+0x140>
               	movzbl	(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x433950 <mi_segment_init+0x140>
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	cmpl	$3, 112(%rbp)
               	jne	0x433992 <mi_segment_init+0x182>
               	movq	72(%rbp), %rsi
               	jmp	0x43399e <mi_segment_init+0x18e>
               	movq	96(%rbp), %rcx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	-1(%rbx), %eax
               	movzbl	%al, %eax
               	movq	%rax, %rdi
               	imulq	%rsi, %rdi
               	addq	%rbp, %rdi
               	testb	%al, %al
               	jne	0x4339bd <mi_segment_init+0x1ad>
               	movq	80(%rbp), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 16(%rsp)
               	testq	%rsi, %rsi
               	je	0x433950 <mi_segment_init+0x140>
               	leaq	16(%rsp), %rdx
               	callq	0x434890 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x433950 <mi_segment_init+0x140>
               	movzbl	(%rbx), %eax
               	orb	$8, %al
               	jmp	0x433941 <mi_segment_init+0x131>
               	movb	%cl, 10(%rsp)
               	movb	$0, 8(%rsp)
               	movb	$0, 11(%rsp)
               	testq	%rbx, %rbx
               	je	0x434431 <mi_segment_init+0xc21>
               	movq	181636(%rip), %rcx      # 0x45ff88 <os_page_size>
               	leaq	-1(%rcx), %rax
               	leaq	(%rbx,%rcx), %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x433b50 <mi_segment_init+0x340>
               	negq	%rcx
               	andq	%rcx, %rbp
               	leaq	4194303(%rbp), %rcx
               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
               	movq	%r14, 96(%rsp)
               	jbe	0x433bb4 <mi_segment_init+0x3a4>
               	jmp	0x4342c7 <mi_segment_init+0xab7>
               	xorl	%eax, %eax
               	cmpq	%r15, %rax
               	jae	0x433a7f <mi_segment_init+0x26f>
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movq	88(%rsp), %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d980 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	movq	%r14, %r12
               	movl	24(%rsp), %r13d
               	je	0x433a76 <mi_segment_init+0x266>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	jne	0x433a87 <mi_segment_init+0x277>
               	jmp	0x434431 <mi_segment_init+0xc21>
               	movq	%r14, %r12
               	movl	24(%rsp), %r13d
               	movq	$0, 16(%rbp)
               	leaq	24(%rbp), %r14
               	movq	88(%rsp), %rax
               	leaq	-24(%rax), %rdx
               	xorl	%ebx, %ebx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movb	$1, %al
               	nopw	(%rax,%rax)
               	leal	-1(%rax), %ecx
               	shlq	$6, %rbx
               	movb	%cl, 120(%rbp,%rbx)
               	movzbl	121(%rbp,%rbx), %ecx
               	movl	%ecx, %edx
               	andb	$-3, %dl
               	movb	%dl, 121(%rbp,%rbx)
               	movzbl	9(%rsp), %edx
               	shlb	$2, %dl
               	andb	$-7, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%rbp,%rbx)
               	movzbl	8(%rsp), %edx
               	shlb	$3, %dl
               	andb	$-11, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%rbp,%rbx)
               	movzbl	%al, %ebx
               	movl	%ebx, %eax
               	addb	$1, %al
               	cmpq	%rbx, %r15
               	ja	0x433ab0 <mi_segment_init+0x2a0>
               	movq	80(%rsp), %rbx
               	movl	%r13d, 112(%rbp)
               	movq	%r15, 64(%rbp)
               	movq	96(%rsp), %rax
               	movq	%rax, 96(%rbp)
               	movq	%rbx, 72(%rbp)
               	movq	88(%rsp), %rax
               	movq	%rax, 80(%rbp)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%rbp)
               	movq	180378(%rip), %rax      # 0x45fbc8 <_mi_heap_main+0xb28>
               	xorq	%rbp, %rax
               	movq	%rax, 88(%rbp)
               	cmpl	$1, %r13d
               	ja	0x434433 <mi_segment_init+0xc23>
               	movl	112(%rbp), %eax
               	cmpl	$1, %eax
               	je	0x433b66 <mi_segment_init+0x356>
               	testl	%eax, %eax
               	je	0x433b6a <mi_segment_init+0x35a>
               	xorl	%r12d, %r12d
               	jmp	0x433b6a <mi_segment_init+0x35a>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x433b92 <mi_segment_init+0x382>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x433b98 <mi_segment_init+0x388>
               	addq	$16, %r12
               	movq	$0, (%r14)
               	movq	8(%r12), %rax
               	movq	%rax, 32(%rbp)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r12, %rcx
               	movq	%rbp, (%rcx)
               	movq	%rbp, 8(%r12)
               	jmp	0x434433 <mi_segment_init+0xc23>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	leaq	4194303(%rbp), %rcx
               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
               	movq	%r14, 96(%rsp)
               	ja	0x4342c7 <mi_segment_init+0xab7>
               	movq	220893(%rip), %rax      # 0x469a98 <_mi_numa_node_count>
               	testq	%rax, %rax
               	movq	%rcx, 32(%rsp)
               	je	0x4344a6 <mi_segment_init+0xc96>
               	movq	%rbp, 104(%rsp)
               	movl	%r13d, 24(%rsp)
               	movq	%r12, 72(%rsp)
               	movl	$4294967295, %r10d      # imm = 0xFFFFFFFF
               	cmpq	$2, %rax
               	jb	0x433bf8 <mi_segment_init+0x3e8>
               	movq	220845(%rip), %rax      # 0x469a98 <_mi_numa_node_count>
               	xorl	%r10d, %r10d
               	cmpq	$1, %rax
               	jne	0x4344b5 <mi_segment_init+0xca5>
               	shrq	$22, %rcx
               	movq	%rcx, 40(%rsp)
               	movb	10(%rsp), %r9b
               	movq	220899(%rip), %r12      # 0x469af0 <regions_count>
               	testq	%r12, %r12
               	je	0x433da8 <mi_segment_init+0x598>
               	movq	56(%rsp), %rax
               	movq	(%rax), %rbp
               	testl	%r10d, %r10d
               	js	0x433ccf <mi_segment_init+0x4bf>
               	xorl	%edi, %edi
               	leaq	220880(%rip), %r8       # 0x469b00 <regions>
               	movq	%r12, %r13
               	movq	%r15, 112(%rsp)
               	movq	%r12, 64(%rsp)
               	jmp	0x433c4e <mi_segment_init+0x43e>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %r13
               	je	0x433da8 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	cmovaeq	%rdi, %rbp
               	movq	%rbp, %rbx
               	shlq	$6, %rbx
               	movq	(%rbx,%r8), %rax
               	testq	%rax, %rax
               	je	0x433c40 <mi_segment_init+0x430>
               	testb	%r9b, %r9b
               	sete	%dl
               	movl	%eax, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	testl	%eax, %eax
               	sets	%cl
               	sarl	$16, %eax
               	cmpl	%r10d, %eax
               	sete	%al
               	testb	%sil, %dl
               	jne	0x433c40 <mi_segment_init+0x430>
               	orb	%al, %cl
               	je	0x433c40 <mi_segment_init+0x430>
               	movl	%r10d, %r12d
               	leaq	(%rbx,%r8), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %r14
               	movl	%r9d, %r15d
               	callq	0x4345f0 <_mi_bitmap_try_find_claim_field>
               	xorl	%edi, %edi
               	movl	%r15d, %r9d
               	movl	%r12d, %r10d
               	movq	64(%rsp), %r12
               	movq	112(%rsp), %r15
               	movq	%r14, %r8
               	testb	%al, %al
               	je	0x433c40 <mi_segment_init+0x430>
               	addq	%rbx, %r8
               	jmp	0x433d91 <mi_segment_init+0x581>
               	testb	%r9b, %r9b
               	je	0x433d31 <mi_segment_init+0x521>
               	leaq	220709(%rip), %r8       # 0x469b00 <regions>
               	movq	%r12, %r14
               	jmp	0x433cee <mi_segment_init+0x4de>
               	addq	$1, %rbp
               	addq	$-1, %r14
               	je	0x433da8 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	movl	$0, %eax
               	cmovaeq	%rax, %rbp
               	movq	%rbp, %r13
               	shlq	$6, %r13
               	movq	(%r13,%r8), %rax
               	testq	%rax, %rax
               	je	0x433ce0 <mi_segment_init+0x4d0>
               	leaq	(%r8,%r13), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %rbx
               	callq	0x4345f0 <_mi_bitmap_try_find_claim_field>
               	movq	%rbx, %r8
               	testb	%al, %al
               	je	0x433ce0 <mi_segment_init+0x4d0>
               	addq	%r13, %r8
               	jmp	0x433d91 <mi_segment_init+0x581>
               	xorl	%ecx, %ecx
               	leaq	220614(%rip), %r8       # 0x469b00 <regions>
               	movq	%r12, %rbx
               	jmp	0x433d4a <mi_segment_init+0x53a>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %rbx
               	je	0x433da8 <mi_segment_init+0x598>
               	cmpq	%r12, %rbp
               	cmovaeq	%rcx, %rbp
               	movq	%rbp, %r14
               	shlq	$6, %r14
               	movq	(%r14,%r8), %rax
               	testq	%rax, %rax
               	je	0x433d40 <mi_segment_init+0x530>
               	andl	$256, %eax              # imm = 0x100
               	testq	%rax, %rax
               	jne	0x433d40 <mi_segment_init+0x530>
               	leaq	(%r14,%r8), %rdi
               	addq	$16, %rdi
               	movq	40(%rsp), %rsi
               	leaq	48(%rsp), %rdx
               	movq	%r8, %r13
               	callq	0x4345f0 <_mi_bitmap_try_find_claim_field>
               	xorl	%ecx, %ecx
               	movq	%r13, %r8
               	testb	%al, %al
               	je	0x433d40 <mi_segment_init+0x530>
               	addq	%r14, %r8
               	movq	72(%rsp), %r12
               	movl	24(%rsp), %r13d
               	movq	56(%rsp), %rax
               	movq	%rbp, (%rax)
               	jmp	0x433f61 <mi_segment_init+0x751>
               	movb	9(%rsp), %bl
               	movb	10(%rsp), %bpl
               	movq	220472(%rip), %rax      # 0x469af0 <regions_count>
               	cmpq	$1022, %rax             # imm = 0x3FE
               	movq	72(%rsp), %r12
               	movl	24(%rsp), %r13d
               	ja	0x4342ac <mi_segment_init+0xa9c>
               	testb	%bl, %bl
               	je	0x433de4 <mi_segment_init+0x5d4>
               	movl	$4, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	setne	%al
               	jmp	0x433de6 <mi_segment_init+0x5d6>
               	xorl	%eax, %eax
               	testb	%bpl, %bpl
               	setne	%cl
               	testb	%bl, %bl
               	setne	%dl
               	movb	%al, 12(%rsp)
               	andb	%cl, %dl
               	movb	%dl, 15(%rsp)
               	movb	$0, 14(%rsp)
               	movb	$0, 13(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	12(%rsp), %rsi
               	leaq	15(%rsp), %rdx
               	leaq	13(%rsp), %rcx
               	leaq	14(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movl	$268435456, %edi        # imm = 0x10000000
               	callq	0x4346b0 <_mi_arena_alloc_aligned>
               	testq	%rax, %rax
               	je	0x433e8c <mi_segment_init+0x67c>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 220332(%rip)      # 0x469af0 <regions_count>
               	cmpq	$1024, %rdx             # imm = 0x400
               	jb	0x433e93 <mi_segment_init+0x683>
               	lock
               	subq	$1, 220314(%rip)        # 0x469af0 <regions_count>
               	movq	16(%rsp), %rdx
               	xorl	%ecx, %ecx
               	cmpb	$0, 12(%rsp)
               	setne	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	movq	%rax, %rdi
               	callq	0x42d4d0 <_mi_arena_free>
               	leaq	69619(%rip), %rdi       # 0x444e6c <typeinfo name for kotlin::gc::GCSchedulerData+0x1873>
               	xorl	%ebx, %ebx
               	movl	$256, %esi              # imm = 0x100
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	jmp	0x433f59 <mi_segment_init+0x749>
               	xorl	%ebx, %ebx
               	jmp	0x433f59 <mi_segment_init+0x749>
               	shlq	$6, %rdx
               	leaq	220258(%rip), %rsi      # 0x469b00 <regions>
               	movq	16(%rsp), %rcx
               	xchgq	%rcx, 48(%rdx,%rsi)
               	leaq	(%rdx,%rsi), %rdi
               	addq	$16, %rdi
               	movq	$0, 16(%rdx,%rsi)
               	movsbq	14(%rsp), %rcx
               	addq	$-1, %rcx
               	movq	%rcx, 24(%rdx,%rsi)
               	movb	12(%rsp), %cl
               	andb	$1, %cl
               	negb	%cl
               	movsbq	%cl, %rcx
               	movq	%rcx, 32(%rdx,%rsi)
               	movq	$0, 40(%rdx,%rsi)
               	movq	$0, 48(%rsp)
               	movq	$-1, %rbp
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x433f19 <mi_segment_init+0x709>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x433f17 <mi_segment_init+0x707>
               	movq	$-1, %rbp
               	shlq	%cl, %rbp
               	notq	%rbp
               	jmp	0x433f19 <mi_segment_init+0x709>
               	xorl	%ebp, %ebp
               	lock
               	orq	%rbp, (%rdi)
               	leaq	(%rsi,%rdx), %r8
               	movq	%rax, 8(%rdx,%rsi)
               	movzbl	13(%rsp), %eax
               	addq	%rax, %rax
               	movzbl	15(%rsp), %ebx
               	orq	%rax, %rbx
               	movq	219995(%rip), %rax      # 0x469a98 <_mi_numa_node_count>
               	cmpq	$1, %rax
               	jne	0x4344c7 <mi_segment_init+0xcb7>
               	xorl	%eax, %eax
               	shlq	$8, %rbx
               	orq	%rax, %rbx
               	orq	$1, %rbx
               	movq	%rbx, (%r8)
               	movb	$1, %bl
               	testb	%bl, %bl
               	je	0x4342ac <mi_segment_init+0xa9c>
               	movq	(%r8), %rdx
               	movq	8(%r8), %r9
               	movq	48(%rsp), %rax
               	movq	%rax, %rsi
               	shrq	$6, %rsi
               	movq	$-1, %rdi
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x433fa9 <mi_segment_init+0x799>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x433fa7 <mi_segment_init+0x797>
               	andl	$63, %eax
               	movq	$-1, %rdi
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x433fa9 <mi_segment_init+0x799>
               	xorl	%edi, %edi
               	movq	24(%r8,%rsi,8), %rax
               	nop
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 24(%r8,%rsi,8)
               	jne	0x433fb0 <mi_segment_init+0x7a0>
               	testq	%rdi, %rax
               	sete	8(%rsp)
               	movq	%rdx, %rax
               	shrq	$8, %rax
               	andb	$1, %al
               	movb	%al, 10(%rsp)
               	shrq	$9, %rdx
               	andb	$1, %dl
               	movb	%dl, 11(%rsp)
               	movq	48(%rsp), %rdi
               	movl	%edi, %ebp
               	andl	$63, %ebp
               	shlq	$22, %rbp
               	addq	%r9, %rbp
               	cmpb	$0, 9(%rsp)
               	je	0x434033 <mi_segment_init+0x823>
               	movq	%rdi, %rdx
               	shrq	$6, %rdx
               	movq	$-1, %rsi
               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
               	ja	0x43407d <mi_segment_init+0x86d>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43407b <mi_segment_init+0x86b>
               	movl	%edi, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	jmp	0x43407d <mi_segment_init+0x86d>
               	movq	$-1, %rdx
               	movq	32(%rsp), %rbx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	ja	0x434156 <mi_segment_init+0x946>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x434154 <mi_segment_init+0x944>
               	movl	%edi, %eax
               	andl	$63, %eax
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%eax, %ecx
               	shlq	%cl, %rdx
               	movq	32(%rsp), %rbx
               	jmp	0x434156 <mi_segment_init+0x946>
               	xorl	%esi, %esi
               	movq	32(%r8,%rdx,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rsi, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r8,%rdx,8)
               	jne	0x434090 <mi_segment_init+0x880>
               	andq	%rsi, %rax
               	cmpq	%rsi, %rax
               	movq	32(%rsp), %rbx
               	je	0x43416d <mi_segment_init+0x95d>
               	movq	%rdi, 64(%rsp)
               	movq	%r9, 56(%rsp)
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	movq	%rbx, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d980 <mi_os_commitx>
               	testb	%al, %al
               	je	0x434108 <mi_segment_init+0x8f8>
               	cmpb	$0, 16(%rsp)
               	je	0x4340f2 <mi_segment_init+0x8e2>
               	movb	$1, 8(%rsp)
               	movq	32(%rsp), %rbx
               	movq	24(%rsp), %r8
               	movq	56(%rsp), %r9
               	movq	64(%rsp), %rdi
               	jmp	0x43416d <mi_segment_init+0x95d>
               	movq	48(%rsp), %rdx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	jbe	0x434122 <mi_segment_init+0x912>
               	xorl	%esi, %esi
               	movq	24(%rsp), %rdi
               	jmp	0x4342a2 <mi_segment_init+0xa92>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	movq	24(%rsp), %rdi
               	je	0x43429b <mi_segment_init+0xa8b>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	jmp	0x4342a2 <mi_segment_init+0xa92>
               	xorl	%edx, %edx
               	movq	%rdi, %rax
               	shrq	$6, %rax
               	movq	32(%r8,%rax,8), %rax
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	sete	9(%rsp)
               	movq	48(%rsp), %rdx
               	movq	$-1, %rsi
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	ja	0x4341ac <mi_segment_init+0x99c>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x4341aa <mi_segment_init+0x99a>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	movq	32(%rsp), %rbx
               	jmp	0x4341ac <mi_segment_init+0x99c>
               	xorl	%esi, %esi
               	shrq	$6, %rdx
               	movq	40(%r8,%rdx,8), %rax
               	testq	%rsi, %rax
               	je	0x43427f <mi_segment_init+0xa6f>
               	movq	48(%rsp), %rdx
               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
               	jbe	0x4341d0 <mi_segment_init+0x9c0>
               	xorl	%esi, %esi
               	jmp	0x434202 <mi_segment_init+0x9f2>
               	movq	40(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x4341fb <mi_segment_init+0x9eb>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	movq	32(%rsp), %rbx
               	notq	%rsi
               	jmp	0x434202 <mi_segment_init+0x9f2>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 40(%r8,%rdx,8)
               	cmpb	$0, 9(%rsp)
               	movq	%r9, 56(%rsp)
               	movq	%rdi, 64(%rsp)
               	je	0x43425b <mi_segment_init+0xa4b>
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	leaq	16(%rsp), %rdx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x434890 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x43424a <mi_segment_init+0xa3a>
               	movb	$1, 8(%rsp)
               	movq	24(%rsp), %r8
               	movq	56(%rsp), %r9
               	movq	64(%rsp), %rdi
               	jmp	0x43427f <mi_segment_init+0xa6f>
               	movl	$5, %edi
               	movq	%r8, %rbx
               	callq	0x42aae0 <mi_option_get>
               	movq	64(%rsp), %rdi
               	movq	56(%rsp), %r9
               	movq	%rbx, %r8
               	movq	32(%rsp), %rbx
               	testq	%rax, %rax
               	je	0x43421d <mi_segment_init+0xa0d>
               	testq	%r9, %r9
               	je	0x4342ac <mi_segment_init+0xa9c>
               	leaq	219253(%rip), %rax      # 0x469b00 <regions>
               	subq	%rax, %r8
               	addq	%rdi, %r8
               	addq	%r8, %r8
               	movq	80(%rsp), %rbx
               	jmp	0x4342f8 <mi_segment_init+0xae8>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 16(%rdi,%rdx,8)
               	leaq	68637(%rip), %rdi       # 0x444ed0 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
               	movq	104(%rsp), %rbp
               	movq	%rbp, %rsi
               	xorl	%eax, %eax
               	callq	0x42bb40 <_mi_warning_message>
               	movq	80(%rsp), %rbx
               	leaq	9(%rsp), %rsi
               	leaq	10(%rsp), %rdx
               	leaq	11(%rsp), %rcx
               	leaq	8(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movq	%rbp, %rdi
               	callq	0x4346b0 <_mi_arena_alloc_aligned>
               	movq	%rax, %rbp
               	movq	16(%rsp), %rax
               	leaq	(%rax,%rax), %r8
               	addq	$1, %r8
               	testq	%rbp, %rbp
               	je	0x434431 <mi_segment_init+0xc21>
               	movb	$1, %al
               	cmpb	$0, 9(%rsp)
               	jne	0x434348 <mi_segment_init+0xb38>
               	movq	%r8, 24(%rsp)
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%rbp, %rdi
               	movq	88(%rsp), %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d980 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	je	0x434339 <mi_segment_init+0xb29>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x43441c <mi_segment_init+0xc0c>
               	xorl	%eax, %eax
               	movq	%r8, (%rbp)
               	movb	11(%rsp), %cl
               	andb	$1, %cl
               	orb	10(%rsp), %cl
               	movb	%cl, 8(%rbp)
               	movb	%al, 9(%rbp)
               	movq	112(%r12), %rcx
               	leaq	184855(%rip), %rax      # 0x461580 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	185418(%rip), %rax      # 0x4617c0 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rbx, %rbx
               	js	0x4343bc <mi_segment_init+0xbac>
               	testb	%al, %al
               	je	0x4343f5 <mi_segment_init+0xbe5>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jg	0x4343ad <mi_segment_init+0xb9d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x4343a0 <mi_segment_init+0xb90>
               	lock
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x43446e <mi_segment_init+0xc5e>
               	testb	%al, %al
               	je	0x434445 <mi_segment_init+0xc35>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x4343ed <mi_segment_init+0xbdd>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x4343e0 <mi_segment_init+0xbd0>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x434467 <mi_segment_init+0xc57>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x43440b <mi_segment_init+0xbfb>
               	movq	%rax, 16(%rcx)
               	movq	(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, (%rcx)
               	movl	$1, %eax
               	jmp	0x43446e <mi_segment_init+0xc5e>
               	movl	$4194304, %esi          # imm = 0x400000
               	movq	%rbp, %rdi
               	movq	%r8, %rdx
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	callq	0x42dc90 <_mi_mem_free>
               	xorl	%ebp, %ebp
               	movq	%rbp, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x43445b <mi_segment_init+0xc4b>
               	movq	%rax, 16(%rcx)
               	movq	8(%rcx), %rax
               	addq	$1, %rax
               	movq	%rax, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x434484 <mi_segment_init+0xc74>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	addq	%rbx, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x433a87 <mi_segment_init+0x277>
               	movq	%rax, 80(%r12)
               	jmp	0x433a87 <mi_segment_init+0x277>
               	callq	0x42be90 <_mi_os_numa_node_count_get>
               	movq	32(%rsp), %rcx
               	jmp	0x433bc9 <mi_segment_init+0x3b9>
               	callq	0x4344e0 <_mi_os_numa_node_get>
               	movq	32(%rsp), %rcx
               	movl	%eax, %r10d
               	jmp	0x433bf8 <mi_segment_init+0x3e8>
               	movq	%r8, %rbp
               	callq	0x4344e0 <_mi_os_numa_node_get>
               	movq	%rbp, %r8
               	shll	$16, %eax
               	jmp	0x433f49 <mi_segment_init+0x739>
               	nopw	(%rax,%rax)

<_mi_os_numa_node_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	218533(%rip), %rbx      # 0x469a98 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	je	0x434567 <_mi_os_numa_node_get+0x87>
               	xorl	%eax, %eax
               	cmpq	$2, %rbx
               	jb	0x43455a <_mi_os_numa_node_get+0x7a>
               	movq	$0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	xorl	%r14d, %r14d
               	leaq	8(%rsp), %rsi
               	leaq	16(%rsp), %rdx
               	movl	$309, %edi              # imm = 0x135
               	xorl	%ecx, %ecx
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	testq	%rax, %rax
               	movq	16(%rsp), %rax
               	cmovneq	%r14, %rax
               	cmpq	%rbx, %rax
               	jb	0x43455a <_mi_os_numa_node_get+0x7a>
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x434554 <_mi_os_numa_node_get+0x74>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rdx, %rax
               	jmp	0x43455a <_mi_os_numa_node_get+0x7a>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%edx, %eax
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	218410(%rip), %rbx      # 0x469a98 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x4344f8 <_mi_os_numa_node_get+0x18>
               	movl	$15, %edi
               	callq	0x42aae0 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x4345d1 <_mi_os_numa_node_get+0xf1>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	66344(%rip), %r14       # 0x4448b9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	leaq	16(%rsp), %r15
               	cmpl	$255, %ebx
               	je	0x4345c9 <_mi_os_numa_node_get+0xe9>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x4137d0 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x4138c0 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x434596 <_mi_os_numa_node_get+0xb6>
               	jmp	0x4345ce <_mi_os_numa_node_get+0xee>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 218304(%rip)      # 0x469a98 <_mi_numa_node_count>
               	leaq	66298(%rip), %rdi       # 0x4448d9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42a7c0 <_mi_verbose_message>
               	jmp	0x4344f8 <_mi_os_numa_node_get+0x18>
               	nop

<_mi_bitmap_try_find_claim_field>:
               	movq	(%rdi), %rax
               	cmpq	$-1, %rax
               	je	0x434645 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	$-1, %r8
               	cmpq	$63, %rsi
               	ja	0x43461f <_mi_bitmap_try_find_claim_field+0x2f>
               	testq	%rsi, %rsi
               	je	0x43461c <_mi_bitmap_try_find_claim_field+0x2c>
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x43461f <_mi_bitmap_try_find_claim_field+0x2f>
               	xorl	%r8d, %r8d
               	movl	$64, %ecx
               	movl	$64, %r9d
               	subq	%rsi, %r9
               	cmpq	$-1, %rax
               	je	0x43463d <_mi_bitmap_try_find_claim_field+0x4d>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %rcx
               	shlq	%cl, %r8
               	cmpq	%r9, %rcx
               	jbe	0x434648 <_mi_bitmap_try_find_claim_field+0x58>
               	xorl	%eax, %eax
               	retq
               	cmpq	$1, %rsi
               	jne	0x43468e <_mi_bitmap_try_find_claim_field+0x9e>
               	jmp	0x43465c <_mi_bitmap_try_find_claim_field+0x6c>
               	addq	$1, %rcx
               	addq	%r8, %r8
               	cmpq	%r9, %rcx
               	ja	0x434645 <_mi_bitmap_try_find_claim_field+0x55>
               	testq	%r8, %rax
               	jne	0x434650 <_mi_bitmap_try_find_claim_field+0x60>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434657 <_mi_bitmap_try_find_claim_field+0x67>
               	jmp	0x4346a3 <_mi_bitmap_try_find_claim_field+0xb3>
               	bsrq	%rsi, %r10
               	movl	%r10d, %esi
               	subl	%ecx, %esi
               	addq	$1, %r10
               	addb	$1, %sil
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	movq	%r10, %rcx
               	cmpq	%r9, %rcx
               	ja	0x434645 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	%rax, %rsi
               	andq	%r8, %rsi
               	jne	0x434670 <_mi_bitmap_try_find_claim_field+0x80>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x434689 <_mi_bitmap_try_find_claim_field+0x99>
               	movq	%rcx, (%rdx)
               	movb	$1, %al
               	retq
               	nopl	(%rax)

<_mi_arena_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, %r14
               	movq	%rcx, %r15
               	movq	%rdx, %r12
               	movq	%rsi, (%rsp)
               	movq	%r9, 8(%rsp)
               	movq	$0, (%r9)
               	movb	$0, (%r8)
               	movb	$0, (%rcx)
               	movq	%rdi, 16(%rsp)
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x43481b <_mi_arena_alloc_aligned+0x16b>
               	movq	184585(%rip), %rax      # 0x461800 <mi_arena_count>
               	testq	%rax, %rax
               	je	0x43481b <_mi_arena_alloc_aligned+0x16b>
               	movq	%r15, 24(%rsp)
               	movq	16(%rsp), %rax
               	leaq	16777215(%rax), %rbx
               	movq	217984(%rip), %rax      # 0x469a98 <_mi_numa_node_count>
               	xorl	%r13d, %r13d
               	cmpq	$1, %rax
               	jne	0x43487e <_mi_arena_alloc_aligned+0x1ce>
               	shrq	$24, %rbx
               	leaq	184592(%rip), %rbp      # 0x461840 <mi_arenas>
               	xorl	%r15d, %r15d
               	jmp	0x43477f <_mi_arena_alloc_aligned+0xcf>
               	nopl	(%rax,%rax)
               	cmpb	$0, (%r12)
               	je	0x434796 <_mi_arena_alloc_aligned+0xe6>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	movq	(%rsp), %rcx
               	movq	%r12, %r8
               	movq	24(%rsp), %r9
               	pushq	8(%rsp)
               	pushq	%r14
               	callq	0x4349b0 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x43486f <_mi_arena_alloc_aligned+0x1bf>
               	addq	$1, %r15
               	addq	$8, %rbp
               	cmpq	$64, %r15
               	je	0x43479e <_mi_arena_alloc_aligned+0xee>
               	movq	(%rbp), %rdi
               	testq	%rdi, %rdi
               	je	0x43479e <_mi_arena_alloc_aligned+0xee>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x434740 <_mi_arena_alloc_aligned+0x90>
               	cmpl	%r13d, %eax
               	jne	0x434771 <_mi_arena_alloc_aligned+0xc1>
               	jmp	0x434740 <_mi_arena_alloc_aligned+0x90>
               	cmpb	$0, 30(%rdi)
               	jne	0x434771 <_mi_arena_alloc_aligned+0xc1>
               	jmp	0x434747 <_mi_arena_alloc_aligned+0x97>
               	movq	%rbx, 32(%rsp)
               	leaq	184470(%rip), %rbx      # 0x461840 <mi_arenas>
               	xorl	%ebp, %ebp
               	movq	24(%rsp), %r15
               	jmp	0x4347f8 <_mi_arena_alloc_aligned+0x148>
               	nopw	%cs:(%rax,%rax)
               	movq	%rbp, %rsi
               	movq	32(%rsp), %rdx
               	movq	(%rsp), %rcx
               	movq	%r12, %r8
               	movq	%r15, %r9
               	pushq	8(%rsp)
               	pushq	%r14
               	callq	0x4349b0 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x43486f <_mi_arena_alloc_aligned+0x1bf>
               	addq	$1, %rbp
               	addq	$8, %rbx
               	cmpq	$64, %rbp
               	je	0x43481b <_mi_arena_alloc_aligned+0x16b>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x43481b <_mi_arena_alloc_aligned+0x16b>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x4347ea <_mi_arena_alloc_aligned+0x13a>
               	cmpl	%r13d, %eax
               	je	0x4347ea <_mi_arena_alloc_aligned+0x13a>
               	cmpb	$0, (%r12)
               	jne	0x4347c0 <_mi_arena_alloc_aligned+0x110>
               	cmpb	$0, 30(%rdi)
               	jne	0x4347ea <_mi_arena_alloc_aligned+0x13a>
               	jmp	0x4347c0 <_mi_arena_alloc_aligned+0x110>
               	movl	$16, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x434839 <_mi_arena_alloc_aligned+0x189>
               	callq	0x413820 <__errno_location@plt>
               	movl	$12, (%rax)
               	xorl	%eax, %eax
               	jmp	0x43486f <_mi_arena_alloc_aligned+0x1bf>
               	movb	$1, (%r14)
               	movq	8(%rsp), %rax
               	movq	$0, (%rax)
               	xorl	%esi, %esi
               	movq	(%rsp), %rax
               	cmpb	$0, (%rax)
               	setne	%sil
               	movq	16(%rsp), %rdi
               	movq	%r12, %rdx
               	callq	0x42aef0 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x434835 <_mi_arena_alloc_aligned+0x185>
               	movb	(%r12), %cl
               	movb	%cl, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x4344e0 <_mi_os_numa_node_get>
               	movl	%eax, %r13d
               	jmp	0x434725 <_mi_arena_alloc_aligned+0x75>
               	nopl	(%rax,%rax)

<_mi_os_unreset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$5, %edi
               	callq	0x42aae0 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4348ca <_mi_os_unreset+0x3a>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movl	$1, %edx
               	movl	$1, %ecx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42d980 <mi_os_commitx>
               	movb	$0, (%rbx)
               	testq	%r15, %r15
               	je	0x4349a7 <_mi_os_unreset+0x117>
               	testq	%r14, %r14
               	je	0x4349a7 <_mi_os_unreset+0x117>
               	movq	177826(%rip), %rdi      # 0x45ff88 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%r15,%rdi), %rcx
               	addq	$-1, %rcx
               	testq	%rax, %rdi
               	jne	0x434910 <_mi_os_unreset+0x80>
               	negq	%rdi
               	andq	%rdi, %rcx
               	addq	%r14, %r15
               	andq	%rdi, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jg	0x43495f <_mi_os_unreset+0xcf>
               	jmp	0x4349a7 <_mi_os_unreset+0x117>
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x434929 <_mi_os_unreset+0x99>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rsi
               	jmp	0x434931 <_mi_os_unreset+0xa1>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %esi
               	addq	%r14, %r15
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43494a <_mi_os_unreset+0xba>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x434951 <_mi_os_unreset+0xc1>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rsi, %rcx
               	subq	%rdx, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jle	0x4349a7 <_mi_os_unreset+0x117>
               	movq	%r15, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 183463(%rip)      # 0x461618 <_mi_stats_main+0x98>
               	subq	%r15, %rdx
               	movq	183445(%rip), %rax      # 0x461610 <_mi_stats_main+0x90>
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x434990 <_mi_os_unreset+0x100>
               	lock
               	cmpxchgq	%rdx, 183426(%rip)      # 0x461610 <_mi_stats_main+0x90>
               	jne	0x434980 <_mi_os_unreset+0xf0>
               	testq	%r15, %r15
               	js	0x43499f <_mi_os_unreset+0x10f>
               	lock
               	addq	%r15, 183403(%rip)      # 0x461608 <_mi_stats_main+0x88>
               	jmp	0x4349a7 <_mi_os_unreset+0x117>
               	lock
               	addq	%rcx, 183385(%rip)      # 0x461600 <_mi_stats_main+0x80>
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<mi_arena_alloc_from>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %rbp
               	movq	%rdx, %rbx
               	movq	%rdi, %r12
               	movq	32(%rdi), %rax
               	movq	16(%rdi), %r10
               	cmpq	$1, %rdx
               	jne	0x434a97 <mi_arena_alloc_from+0xe7>
               	testq	%r10, %r10
               	je	0x434f29 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r9, 64(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%esi, %esi
               	movq	%rax, 48(%rsp)
               	movq	%rax, %rdx
               	jmp	0x434a11 <mi_arena_alloc_from+0x61>
               	nop
               	addq	$1, %rsi
               	addq	$1, %rdx
               	cmpq	%r10, %rsi
               	je	0x434f2c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %rdx
               	cmovaeq	%r15, %rdx
               	movq	56(%r12,%rdx,8), %rax
               	cmpq	$-1, %rax
               	je	0x434a00 <mi_arena_alloc_from+0x50>
               	je	0x434a40 <mi_arena_alloc_from+0x90>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpl	$63, %r14d
               	ja	0x434a00 <mi_arena_alloc_from+0x50>
               	jmp	0x434a4c <mi_arena_alloc_from+0x9c>
               	nop
               	movl	$64, %r14d
               	cmpl	$63, %r14d
               	ja	0x434a00 <mi_arena_alloc_from+0x50>
               	movl	$1, %edi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	jmp	0x434a6d <mi_arena_alloc_from+0xbd>
               	nopl	(%rax)
               	addq	$1, %r14
               	addq	%rdi, %rdi
               	cmpq	$64, %r14
               	jae	0x434a00 <mi_arena_alloc_from+0x50>
               	testq	%rax, %rdi
               	jne	0x434a60 <mi_arena_alloc_from+0xb0>
               	movq	%rdi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%rdx,8)
               	jne	0x434a67 <mi_arena_alloc_from+0xb7>
               	movq	%rbp, 40(%rsp)
               	movq	%r8, 32(%rsp)
               	shlq	$6, %rdx
               	addq	%rdx, %r14
               	jmp	0x434e9d <mi_arena_alloc_from+0x4ed>
               	testq	%r10, %r10
               	je	0x434f29 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r8, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movq	%rbp, 40(%rsp)
               	movq	$-1, %rdx
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	movl	$64, %r13d
               	movl	$64, %ecx
               	subq	%rbx, %rcx
               	leaq	63(%rbx), %rdi
               	movq	%rdi, 120(%rsp)
               	testq	%rbx, %rbx
               	notq	%rsi
               	cmoveq	%rbx, %rsi
               	cmpq	$63, %rbx
               	cmovaq	%rdx, %rsi
               	movq	%rcx, %rbp
               	movq	%rsi, 24(%rsp)
               	leaq	48(%r12), %rcx
               	movq	%rcx, 88(%rsp)
               	leaq	64(%r12), %rcx
               	movq	%rcx, 80(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%edx, %edx
               	movq	%rax, 48(%rsp)
               	movq	%rax, %r8
               	movq	%r10, 72(%rsp)
               	movq	%rbp, 16(%rsp)
               	jmp	0x434b59 <mi_arena_alloc_from+0x1a9>
               	nopl	(%rax,%rax)
               	movq	128(%rsp), %rdx
               	addq	$1, %rdx
               	addq	$1, %r8
               	movq	72(%rsp), %r10
               	cmpq	%r10, %rdx
               	movl	$0, %r15d
               	movq	16(%rsp), %rbp
               	je	0x434f2c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %r8
               	cmovaeq	%r15, %r8
               	cmpq	$64, %rbx
               	ja	0x434ba0 <mi_arena_alloc_from+0x1f0>
               	movq	56(%r12,%r8,8), %rax
               	cmpq	$-1, %rax
               	je	0x434ba0 <mi_arena_alloc_from+0x1f0>
               	je	0x434b87 <mi_arena_alloc_from+0x1d7>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	%rbp, %r14
               	ja	0x434ba0 <mi_arena_alloc_from+0x1f0>
               	jmp	0x434dcc <mi_arena_alloc_from+0x41c>
               	movl	$64, %r14d
               	cmpq	%rbp, %r14
               	jbe	0x434dcc <mi_arena_alloc_from+0x41c>
               	nopw	%cs:(%rax,%rax)
               	movq	%rdx, 128(%rsp)
               	movq	56(%r12,%r8,8), %r10
               	testq	%r10, %r10
               	je	0x434bd0 <mi_arena_alloc_from+0x220>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	testq	%rbp, %rbp
               	jne	0x434bde <mi_arena_alloc_from+0x22e>
               	jmp	0x434b30 <mi_arena_alloc_from+0x180>
               	nopl	(%rax)
               	movl	$64, %ebp
               	testq	%rbp, %rbp
               	je	0x434b30 <mi_arena_alloc_from+0x180>
               	leaq	(%r12,%r8,8), %r11
               	addq	$56, %r11
               	movq	72(%rsp), %r15
               	subq	%r8, %r15
               	movq	88(%rsp), %rax
               	leaq	(%rax,%r8,8), %r14
               	movq	80(%rsp), %rax
               	leaq	(%rax,%r8,8), %rax
               	movq	%rax, 96(%rsp)
               	xorl	%edx, %edx
               	cmpq	%rbx, %rbp
               	jae	0x434e18 <mi_arena_alloc_from+0x468>
               	movq	120(%rsp), %rax
               	subq	%rbp, %rax
               	shrq	$6, %rax
               	cmpq	%r15, %rax
               	jae	0x434b30 <mi_arena_alloc_from+0x180>
               	movq	%r14, %r9
               	movq	%rbp, %rax
               	nopl	(%rax,%rax)
               	leaq	64(%rax), %rsi
               	movq	%rbx, %rcx
               	subq	%rax, %rcx
               	cmpq	%rbx, %rsi
               	cmovbeq	%r13, %rcx
               	movq	16(%r9), %rdi
               	movq	$-1, %rsi
               	cmpq	$63, %rcx
               	ja	0x434c64 <mi_arena_alloc_from+0x2b4>
               	testq	%rcx, %rcx
               	je	0x434c7b <mi_arena_alloc_from+0x2cb>
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	testq	%rdi, %rsi
               	jne	0x434b30 <mi_arena_alloc_from+0x180>
               	addq	%rcx, %rax
               	addq	$8, %r9
               	cmpq	%rbx, %rax
               	jb	0x434c30 <mi_arena_alloc_from+0x280>
               	jmp	0x434c90 <mi_arena_alloc_from+0x2e0>
               	xorl	%esi, %esi
               	testq	%rdi, %rsi
               	je	0x434c6d <mi_arena_alloc_from+0x2bd>
               	jmp	0x434b30 <mi_arena_alloc_from+0x180>
               	nopl	(%rax,%rax)
               	movq	%rdx, 104(%rsp)
               	movq	%r14, 112(%rsp)
               	movl	$64, %r14d
               	subq	%rbp, %r14
               	movq	$-1, %rax
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	notq	%rax
               	negq	%rbp
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	cmpq	$1, %r10
               	movl	$0, %ecx
               	sbbq	%rcx, %rcx
               	orq	%rax, %rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	testq	%rcx, %rax
               	jne	0x434d10 <mi_arena_alloc_from+0x360>
               	movq	%rax, %rdi
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, (%r11)
               	jne	0x434cd0 <mi_arena_alloc_from+0x320>
               	movq	96(%rsp), %rdi
               	movq	$-1, %rdx
               	nop
               	movq	%rdi, %rbp
               	leaq	-8(%rdi), %rax
               	cmpq	%r9, %rax
               	jae	0x434da0 <mi_arena_alloc_from+0x3f0>
               	leaq	8(%rbp), %rdi
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, (%rbp)
               	je	0x434cf0 <mi_arena_alloc_from+0x340>
               	jmp	0x434d13 <mi_arena_alloc_from+0x363>
               	movq	%r11, %rbp
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %rdx
               	jbe	0x434d41 <mi_arena_alloc_from+0x391>
               	nopw	(%rax,%rax)
               	movq	$0, (%rbp)
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	ja	0x434d30 <mi_arena_alloc_from+0x380>
               	cmpq	%r11, %rbp
               	jne	0x434d5d <mi_arena_alloc_from+0x3ad>
               	movq	(%r11), %rax
               	notq	%rcx
               	movq	%rax, %rsi
               	andq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, (%r11)
               	jne	0x434d50 <mi_arena_alloc_from+0x3a0>
               	cmpq	$4, %rdx
               	je	0x434b30 <mi_arena_alloc_from+0x180>
               	movq	(%r11), %r10
               	testq	%r10, %r10
               	je	0x434d89 <mi_arena_alloc_from+0x3d9>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434c07 <mi_arena_alloc_from+0x257>
               	jmp	0x434b30 <mi_arena_alloc_from+0x180>
               	movl	$64, %ebp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x434c07 <mi_arena_alloc_from+0x257>
               	jmp	0x434b30 <mi_arena_alloc_from+0x180>
               	movq	(%rbp), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rsi, %rax
               	jne	0x434d13 <mi_arena_alloc_from+0x363>
               	movq	%rax, %rdi
               	orq	%rsi, %rdi
               	lock
               	cmpxchgq	%rdi, (%rbp)
               	jne	0x434db0 <mi_arena_alloc_from+0x400>
               	jmp	0x434e96 <mi_arena_alloc_from+0x4e6>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434dff <mi_arena_alloc_from+0x44f>
               	nopl	(%rax)
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	%rbp, %r14
               	ja	0x434ba0 <mi_arena_alloc_from+0x1f0>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434de0 <mi_arena_alloc_from+0x430>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%r8,8)
               	jne	0x434df6 <mi_arena_alloc_from+0x446>
               	jmp	0x434e96 <mi_arena_alloc_from+0x4e6>
               	movq	(%r11), %rax
               	cmpq	$-1, %rax
               	je	0x434b30 <mi_arena_alloc_from+0x180>
               	je	0x434e3e <mi_arena_alloc_from+0x48e>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434b30 <mi_arena_alloc_from+0x180>
               	jmp	0x434e4f <mi_arena_alloc_from+0x49f>
               	movl	$64, %r14d
               	cmpq	16(%rsp), %r14
               	ja	0x434b30 <mi_arena_alloc_from+0x180>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x434e81 <mi_arena_alloc_from+0x4d1>
               	nop
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x434b30 <mi_arena_alloc_from+0x180>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x434e60 <mi_arena_alloc_from+0x4b0>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, (%r11)
               	jne	0x434e76 <mi_arena_alloc_from+0x4c6>
               	shlq	$6, %r8
               	addq	%r8, %r14
               	movq	200(%rsp), %rax
               	movq	192(%rsp), %r13
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%r12)
               	movq	(%r12), %r15
               	movq	%r14, %rbp
               	shlq	$24, %rbp
               	movq	%r14, %rcx
               	shlq	$8, %rcx
               	movq	56(%rsp), %rdx
               	addl	$1, %edx
               	movzbl	%dl, %edx
               	orq	%rcx, %rdx
               	movq	%rdx, (%rax)
               	movq	40(%r12), %rdi
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	xorl	%ecx, %ecx
               	callq	0x435180 <_mi_bitmap_claim_across>
               	movb	%al, (%r13)
               	movb	30(%r12), %al
               	movq	32(%rsp), %rcx
               	movb	%al, (%rcx)
               	movb	$1, %al
               	cmpb	$0, 30(%r12)
               	jne	0x434f0b <mi_arena_alloc_from+0x55b>
               	movb	29(%r12), %al
               	addq	%rbp, %r15
               	movq	64(%rsp), %rcx
               	movb	%al, (%rcx)
               	cmpb	$0, 29(%r12)
               	movq	40(%rsp), %r13
               	je	0x434f41 <mi_arena_alloc_from+0x591>
               	movb	$1, (%r13)
               	jmp	0x434f2c <mi_arena_alloc_from+0x57c>
               	xorl	%r15d, %r15d
               	movq	%r15, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpb	$0, (%r13)
               	je	0x434f93 <mi_arena_alloc_from+0x5e3>
               	movq	48(%r12), %rdi
               	leaq	15(%rsp), %rcx
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	callq	0x435180 <_mi_bitmap_claim_across>
               	cmpb	$0, 15(%rsp)
               	je	0x434f2c <mi_arena_alloc_from+0x57c>
               	shlq	$24, %rbx
               	leaq	14(%rsp), %r8
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42d980 <mi_os_commitx>
               	cmpb	$0, 14(%rsp)
               	je	0x434f2c <mi_arena_alloc_from+0x57c>
               	movq	192(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x434f2c <mi_arena_alloc_from+0x57c>
               	movq	%r15, %r11
               	movq	48(%r12), %rdi
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	andl	$63, %r14d
               	leaq	(%r14,%rbx), %rax
               	cmpq	$64, %rax
               	ja	0x43510a <mi_arena_alloc_from+0x75a>
               	cmpq	$63, %rbx
               	jbe	0x434fc3 <mi_arena_alloc_from+0x613>
               	movq	$-1, %rsi
               	jmp	0x434fe1 <mi_arena_alloc_from+0x631>
               	testq	%rbx, %rbx
               	je	0x435100 <mi_arena_alloc_from+0x750>
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	xorl	%r10d, %r10d
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	(%rdi,%rbp,8), %rcx
               	andq	%rsi, %rcx
               	cmpq	%rsi, %rcx
               	sete	%cl
               	leaq	(%rdi,%rbp,8), %rdi
               	addq	$8, %rdi
               	testq	%rdx, %rdx
               	je	0x4350db <mi_arena_alloc_from+0x72b>
               	leaq	-1(%rdx), %r9
               	movq	%rdx, %rsi
               	andq	$3, %rsi
               	je	0x43503d <mi_arena_alloc_from+0x68d>
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	andq	%r10, %rbp
               	cmpq	%r10, %rbp
               	movzbl	%cl, %ecx
               	cmovnel	%ebx, %ecx
               	addq	$8, %rdi
               	addq	$-1, %rsi
               	jne	0x435020 <mi_arena_alloc_from+0x670>
               	andq	$-4, %rdx
               	cmpq	$3, %r9
               	movq	%r11, %r15
               	jb	0x4350de <mi_arena_alloc_from+0x72e>
               	leaq	-4(%rdx), %rsi
               	testb	$4, %sil
               	jne	0x435084 <mi_arena_alloc_from+0x6d4>
               	movq	(%rdi), %rdx
               	movq	8(%rdi), %rbp
               	andq	%rdx, %rbp
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rbx
               	andq	%rdx, %rbx
               	andq	%rbp, %rbx
               	movq	%r11, %r15
               	andq	%r10, %rbx
               	xorl	%edx, %edx
               	cmpq	%r10, %rbx
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	addq	$32, %rdi
               	movq	%rsi, %rdx
               	cmpq	$4, %rsi
               	jb	0x4350de <mi_arena_alloc_from+0x72e>
               	xorl	%r9d, %r9d
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	movq	8(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	16(%rdi), %rbp
               	movq	24(%rdi), %rsi
               	andq	%rbp, %rsi
               	andq	%rbx, %rsi
               	movq	32(%rdi), %rbp
               	movq	40(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	48(%rdi), %rbp
               	movq	56(%rdi), %rax
               	andq	%rbp, %rax
               	andq	%rbx, %rax
               	andq	%rsi, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%r9d, %ecx
               	addq	$64, %rdi
               	addq	$-8, %rdx
               	jne	0x435090 <mi_arena_alloc_from+0x6e0>
               	movq	%r11, %r15
               	testq	%r8, %r8
               	je	0x4350f4 <mi_arena_alloc_from+0x744>
               	movq	(%rdi), %rax
               	andq	%r8, %rax
               	xorl	%edx, %edx
               	cmpq	%r8, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	andb	$1, %cl
               	movb	%cl, (%r13)
               	jmp	0x434f2c <mi_arena_alloc_from+0x57c>
               	xorl	%r10d, %r10d
               	xorl	%esi, %esi
               	jmp	0x434fe4 <mi_arena_alloc_from+0x634>
               	movl	$64, %r9d
               	subq	%r14, %r9
               	movq	%r14, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r14d, %ecx
               	shlq	%cl, %rdx
               	xorl	%r8d, %r8d
               	cmpq	$1, %r14
               	movl	$0, %esi
               	sbbq	%rsi, %rsi
               	orq	%rdx, %rsi
               	subq	%r9, %rbx
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rbx
               	je	0x434fe9 <mi_arena_alloc_from+0x639>
               	movq	$-1, %r10
               	movq	$-1, %r8
               	movl	%ebx, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x434fe9 <mi_arena_alloc_from+0x639>
               	nopw	%cs:(%rax,%rax)

<_mi_bitmap_claim_across>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rcx, %r8
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x435437 <_mi_bitmap_claim_across+0x2b7>
               	cmpq	$63, %rsi
               	jbe	0x4351b4 <_mi_bitmap_claim_across+0x34>
               	movq	$-1, %rbp
               	jmp	0x4351d1 <_mi_bitmap_claim_across+0x51>
               	testq	%rsi, %rsi
               	je	0x4352fc <_mi_bitmap_claim_across+0x17c>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	xorl	%edx, %edx
               	leaq	(%rdi,%rax,8), %rcx
               	movq	(%rdi,%rax,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%rbp, %rsi
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	jne	0x4351f0 <_mi_bitmap_claim_across+0x70>
               	xorl	%edi, %edi
               	andq	%rbp, %rax
               	sete	%r15b
               	xorl	%esi, %esi
               	cmpq	%rbp, %rax
               	setne	%r11b
               	addq	$8, %rcx
               	testq	%rdx, %rdx
               	je	0x43522b <_mi_bitmap_claim_across+0xab>
               	testb	$1, %dl
               	jne	0x435233 <_mi_bitmap_claim_across+0xb3>
               	movq	%rdx, %r13
               	cmpq	$1, %rdx
               	jne	0x435279 <_mi_bitmap_claim_across+0xf9>
               	jmp	0x4353e3 <_mi_bitmap_claim_across+0x263>
               	movl	%r15d, %edi
               	jmp	0x4353e3 <_mi_bitmap_claim_across+0x263>
               	leaq	-1(%rdx), %r13
               	movq	(%rcx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rbp
               	orq	%r10, %rbp
               	lock
               	cmpxchgq	%rbp, (%rcx)
               	jne	0x435240 <_mi_bitmap_claim_across+0xc0>
               	xorl	%ebp, %ebp
               	andq	%r10, %rax
               	movb	%r15b, %dil
               	cmovnel	%ebp, %edi
               	cmpq	%r10, %rax
               	movb	%r11b, %sil
               	movl	$1, %r11d
               	cmovel	%esi, %r11d
               	addq	$8, %rcx
               	movl	%edi, %r15d
               	cmpq	$1, %rdx
               	je	0x4353e3 <_mi_bitmap_claim_across+0x263>
               	leaq	-2(%r13), %rbp
               	testb	$2, %bpl
               	jne	0x435306 <_mi_bitmap_claim_across+0x186>
               	movq	(%rcx), %rdx
               	nopw	(%rax,%rax)
               	movq	%rdx, %rsi
               	orq	%r10, %rsi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	movq	%rax, %rdx
               	jne	0x435290 <_mi_bitmap_claim_across+0x110>
               	movq	8(%rcx), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 8(%rcx)
               	jne	0x4352b0 <_mi_bitmap_claim_across+0x130>
               	movq	%rax, %rsi
               	orq	%rdx, %rsi
               	xorl	%ebx, %ebx
               	testq	%rsi, %r10
               	movzbl	%r15b, %edi
               	cmovnel	%ebx, %edi
               	andq	%rdx, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	addq	$16, %rcx
               	movq	%rbp, %r13
               	movl	%edi, %r15d
               	cmpq	$2, %rbp
               	jae	0x435310 <_mi_bitmap_claim_across+0x190>
               	jmp	0x4353e3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r10d, %r10d
               	xorl	%ebp, %ebp
               	jmp	0x4351d4 <_mi_bitmap_claim_across+0x54>
               	cmpq	$2, %rbp
               	jb	0x4353e3 <_mi_bitmap_claim_across+0x263>
               	xorl	%r14d, %r14d
               	movl	$1, %r12d
               	movl	%r15d, %edi
               	nopl	(%rax)
               	movq	(%rcx), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	orq	%r10, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	movq	%rax, %rsi
               	jne	0x435330 <_mi_bitmap_claim_across+0x1b0>
               	movq	8(%rcx), %rbp
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdx
               	orq	%r10, %rdx
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdx, 8(%rcx)
               	movq	%rax, %rbp
               	jne	0x435350 <_mi_bitmap_claim_across+0x1d0>
               	movq	%rbp, %rdx
               	orq	%rsi, %rdx
               	andq	%rsi, %rbp
               	movq	16(%rcx), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbx, %rsi
               	orq	%r10, %rsi
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	movq	%rax, %rbx
               	jne	0x435380 <_mi_bitmap_claim_across+0x200>
               	addq	$-4, %r13
               	movq	24(%rcx), %rax
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 24(%rcx)
               	jne	0x4353a0 <_mi_bitmap_claim_across+0x220>
               	movq	%rax, %rsi
               	orq	%rbx, %rsi
               	orq	%rdx, %rsi
               	testq	%rsi, %r10
               	movzbl	%dil, %edi
               	cmovnel	%r14d, %edi
               	andq	%rbx, %rax
               	andq	%rbp, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %r11d
               	cmovnel	%r12d, %r11d
               	addq	$32, %rcx
               	testq	%r13, %r13
               	jne	0x435320 <_mi_bitmap_claim_across+0x1a0>
               	testq	%r9, %r9
               	je	0x43541a <_mi_bitmap_claim_across+0x29a>
               	movq	(%rcx), %rax
               	nop
               	movq	%rax, %rdx
               	orq	%r9, %rdx
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	jne	0x4353f0 <_mi_bitmap_claim_across+0x270>
               	xorl	%ecx, %ecx
               	andq	%r9, %rax
               	movzbl	%dil, %edi
               	cmovnel	%ecx, %edi
               	cmpq	%r9, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	testq	%r8, %r8
               	je	0x435426 <_mi_bitmap_claim_across+0x2a6>
               	andb	$1, %r11b
               	movb	%r11b, (%r8)
               	andb	$1, %dil
               	movl	%edi, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$64, %r11d
               	subq	%rdx, %r11
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r9d, %r9d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r11, %rsi
               	movq	%rsi, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rsi
               	je	0x4351d9 <_mi_bitmap_claim_across+0x59>
               	movq	$-1, %r10
               	movq	$-1, %r9
               	movl	%esi, %ecx
               	shlq	%cl, %r9
               	notq	%r9
               	jmp	0x4351d9 <_mi_bitmap_claim_across+0x59>

<_mi_usable_size>:
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	je	0x4354e0 <_mi_usable_size+0x40>
               	movl	%edi, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	shlq	$6, %rdx
               	leaq	(%rax,%rdx), %r8
               	addq	$120, %r8
               	testb	$2, 126(%rax,%rdx)
               	movl	140(%rax,%rdx), %esi
               	jne	0x4354e6 <_mi_usable_size+0x46>
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x4354f4 <_mi_usable_size+0x54>
               	movq	%rsi, %rax
               	retq
               	xorl	%esi, %esi
               	movq	%rsi, %rax
               	retq
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x43550b <_mi_usable_size+0x6b>
               	movq	72(%rax), %r9
               	jmp	0x435514 <_mi_usable_size+0x74>
               	movq	%r8, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x43554b <_mi_usable_size+0xab>
               	movq	72(%rax), %rdx
               	jmp	0x435557 <_mi_usable_size+0xb7>
               	movl	$1, %r9d
               	shlq	%cl, %r9
               	movb	(%r8), %cl
               	movzbl	%cl, %r11d
               	imulq	%r11, %r9
               	addq	%rax, %r9
               	testb	%r11b, %r11b
               	jne	0x4355ae <_mi_usable_size+0x10e>
               	addq	80(%rax), %r9
               	cmpl	$1, %edx
               	ja	0x4355ae <_mi_usable_size+0x10e>
               	testl	%esi, %esi
               	je	0x4355ae <_mi_usable_size+0x10e>
               	movq	%r9, %rax
               	shrq	$32, %rax
               	je	0x435596 <_mi_usable_size+0xf6>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43559d <_mi_usable_size+0xfd>
               	movq	96(%rax), %rcx
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movb	(%r8), %cl
               	testb	%cl, %cl
               	je	0x435562 <_mi_usable_size+0xc2>
               	movq	%rdx, %rax
               	retq
               	movq	80(%rax), %r8
               	movq	%rdx, %r9
               	subq	%r8, %r9
               	cmpl	$1, %edi
               	ja	0x435592 <_mi_usable_size+0xf2>
               	testl	%esi, %esi
               	je	0x435592 <_mi_usable_size+0xf2>
               	movzbl	%cl, %ecx
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x4355e3 <_mi_usable_size+0x143>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4355e7 <_mi_usable_size+0x147>
               	movq	%r9, %rax
               	retq
               	movl	%r9d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	leaq	(%r9,%rax), %rcx
               	cmpq	%rsi, %rax
               	cmovbq	%rcx, %r9
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x4355fd <_mi_usable_size+0x15d>
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x4355d4 <_mi_usable_size+0x134>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rdi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %edi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %rax
               	retq
               	andq	$-4194304, %r8          # imm = 0xFFC00000
               	movl	112(%r8), %eax
               	cmpl	$3, %eax
               	jne	0x435613 <_mi_usable_size+0x173>
               	movq	72(%r8), %r10
               	jmp	0x435620 <_mi_usable_size+0x180>
               	movq	96(%r8), %rcx
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	testb	%r11b, %r11b
               	jne	0x435671 <_mi_usable_size+0x1d1>
               	movq	80(%r8), %rdx
               	movq	%r10, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x43566e <_mi_usable_size+0x1ce>
               	testl	%esi, %esi
               	je	0x43566e <_mi_usable_size+0x1ce>
               	imulq	%r11, %r10
               	addq	%r8, %r10
               	addq	%rdx, %r10
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x435655 <_mi_usable_size+0x1b5>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43565c <_mi_usable_size+0x1bc>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r10
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	orq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43568d <_mi_usable_size+0x1ed>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	movq	%rdx, %rdi
               	jmp	0x435696 <_mi_usable_size+0x1f6>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movl	%edx, %edi
               	movl	112(%r8), %edx
               	cmpl	$3, %edx
               	jne	0x4356a5 <_mi_usable_size+0x205>
               	movq	72(%r8), %rax
               	jmp	0x4356b1 <_mi_usable_size+0x211>
               	movq	96(%r8), %rcx
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%r11b, %r11b
               	je	0x4356c0 <_mi_usable_size+0x220>
               	movq	%rax, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movq	80(%r8), %r9
               	movq	%rax, %rcx
               	subq	%r9, %rcx
               	cmpl	$1, %edx
               	ja	0x435709 <_mi_usable_size+0x269>
               	testl	%esi, %esi
               	je	0x435709 <_mi_usable_size+0x269>
               	imulq	%r11, %rax
               	addq	%rax, %r8
               	addq	%r9, %r8
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x4356f0 <_mi_usable_size+0x250>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4356f7 <_mi_usable_size+0x257>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_heap_malloc_zero>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x4357ae <_mi_heap_malloc_zero+0x8e>
               	leaq	7(%r14), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x4357ae <_mi_heap_malloc_zero+0x8e>
               	movl	16(%rax), %ecx
               	addl	$1, %ecx
               	movl	%ecx, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	testq	%rbx, %rbx
               	je	0x4357a3 <_mi_heap_malloc_zero+0x83>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	%ebx, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	cmpq	$9, %r14
               	jb	0x43578e <_mi_heap_malloc_zero+0x6e>
               	shlq	$6, %rdx
               	movb	127(%rax,%rdx), %al
               	andb	$1, %al
               	je	0x43578e <_mi_heap_malloc_zero+0x6e>
               	movq	$0, (%rbx)
               	jmp	0x4357a3 <_mi_heap_malloc_zero+0x83>
               	movq	%rbx, %rdi
               	callq	0x4354a0 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413710 <memset@plt>
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%r14, %rsi
               	callq	0x431c50 <_mi_malloc_generic>
               	movq	%rax, %rbx
               	testq	%rbx, %rbx
               	jne	0x43575b <_mi_heap_malloc_zero+0x3b>
               	jmp	0x4357a3 <_mi_heap_malloc_zero+0x83>

<__cxa_demangle>:
               	movl	$4294967294, (%rcx)     # imm = 0xFFFFFFFE
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<konan::consoleErrorf(char const*, ...)>:
               	subq	$1240, %rsp             # imm = 0x4D8
               	movq	%rdi, %r10
               	testb	%al, %al
               	je	0x435815 <konan::consoleErrorf(char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	1248(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$1024, %esi             # imm = 0x400
               	movq	%r10, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43588e <konan::consoleErrorf(char const*, ...)+0xbe>
               	cmpl	$1023, %eax             # imm = 0x3FF
               	movl	$1023, %edx             # imm = 0x3FF
               	cmovbl	%eax, %edx
               	leaq	208(%rsp), %rsi
               	movl	$2, %edi
               	callq	0x4138e0 <write@plt>
               	addq	$1240, %rsp             # imm = 0x4D8
               	retq
               	nopw	%cs:(%rax,%rax)

<konan::gettid()>:
               	movl	$186, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	nopl	(%rax)

<kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$216, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x4358fb <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x4b>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x435945 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x95>
               	cmpq	$1, %rbx
               	jne	0x435949 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x99>
               	movb	$0, (%r14)
               	movl	$1, %ebx
               	jmp	0x43596e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	xorl	%ebx, %ebx
               	jmp	0x43596e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movq	%rsp, %rcx
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x43596e <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	addq	%rax, %r14
               	subq	%rax, %rbx
               	movq	%r14, %rax
               	movq	%rbx, %rdx
               	addq	$216, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>:
               	subq	$216, %rsp
               	movq	%rdx, %rdi
               	testb	%al, %al
               	je	0x4359c5 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rsi
               	callq	0x435a10 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>
               	callq	0x435ab0 <konan::abort()>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$1024, %rsp             # imm = 0x400
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	62673(%rip), %rdx       # 0x444efa <typeinfo name for kotlin::gc::GCSchedulerData+0x1901>
               	movq	%rsp, %rdi
               	movl	$1024, %esi             # imm = 0x400
               	xorl	%eax, %eax
               	callq	0x4358b0 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	testq	%rdx, %rdx
               	je	0x435a50 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x40>
               	movq	%rdx, %rbx
               	cmpq	$1, %rdx
               	jne	0x435a54 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x44>
               	movb	$0, (%rax)
               	movl	$1, %ebx
               	jmp	0x435a79 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	xorl	%ebx, %ebx
               	jmp	0x435a79 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	callq	0x413850 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x435a79 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	subq	%rax, %rbx
               	movl	$1024, %edx             # imm = 0x400
               	subl	%ebx, %edx
               	movq	%rsp, %rsi
               	movl	$2, %edi
               	callq	0x4138e0 <write@plt>
               	leaq	62745(%rip), %rdi       # 0x444fad <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	xorl	%eax, %eax
               	callq	0x4357d0 <konan::consoleErrorf(char const*, ...)>
               	addq	$1024, %rsp             # imm = 0x400
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>

<konan::abort()>:
               	pushq	%rax
               	callq	0x4138f0 <abort@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r14
               	leaq	8(%rsp), %rdi
               	callq	0x436390 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
               	movq	16(%rsp), %r12
               	movq	8(%rsp), %rbx
               	movq	%r12, %r13
               	subq	%rbx, %r13
               	movq	%r13, %r15
               	sarq	$3, %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	$0, 16(%r14)
               	testq	%r13, %r13
               	je	0x435b14 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x54>
               	movl	$8, %esi
               	movq	%r15, %rdi
               	callq	0x4136c0 <calloc@plt>
               	jmp	0x435b16 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x56>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	%rax, 8(%r14)
               	leaq	(%rax,%r15,8), %rcx
               	movq	%rcx, 16(%r14)
               	cmpq	%r12, %rbx
               	je	0x435c48 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	addq	$-8, %r13
               	cmpq	$24, %r13
               	jb	0x435c30 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	shrq	$3, %r13
               	addq	$1, %r13
               	leaq	(%rbx,%r13,8), %rcx
               	cmpq	%rcx, %rax
               	jae	0x435b5a <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x9a>
               	leaq	(%rax,%r13,8), %rcx
               	cmpq	%rcx, %rbx
               	jb	0x435c30 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	%r13, %rcx
               	andq	$-4, %rcx
               	leaq	-4(%rcx), %rdi
               	movq	%rdi, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$3, %edx
               	cmpq	$12, %rdi
               	jae	0x435b7f <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xbf>
               	xorl	%edi, %edi
               	jmp	0x435be8 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x128>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edi, %edi
               	nopl	(%rax,%rax)
               	movups	(%rbx,%rdi,8), %xmm0
               	movups	16(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, (%rax,%rdi,8)
               	movups	%xmm1, 16(%rax,%rdi,8)
               	movups	32(%rbx,%rdi,8), %xmm0
               	movups	48(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 32(%rax,%rdi,8)
               	movups	%xmm1, 48(%rax,%rdi,8)
               	movups	64(%rbx,%rdi,8), %xmm0
               	movups	80(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 64(%rax,%rdi,8)
               	movups	%xmm1, 80(%rax,%rdi,8)
               	movups	96(%rbx,%rdi,8), %xmm0
               	movups	112(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 96(%rax,%rdi,8)
               	movups	%xmm1, 112(%rax,%rdi,8)
               	addq	$16, %rdi
               	addq	$4, %rsi
               	jne	0x435b90 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xd0>
               	testq	%rdx, %rdx
               	je	0x435c1b <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x15b>
               	leaq	16(,%rdi,8), %rsi
               	negq	%rdx
               	nopl	(%rax)
               	movups	-16(%rbx,%rsi), %xmm0
               	movups	(%rbx,%rsi), %xmm1
               	movups	%xmm0, -16(%rax,%rsi)
               	movups	%xmm1, (%rax,%rsi)
               	addq	$32, %rsi
               	incq	%rdx
               	jne	0x435c00 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x140>
               	leaq	(%rax,%rcx,8), %rax
               	cmpq	%rcx, %r13
               	je	0x435c48 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	leaq	(%rbx,%rcx,8), %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, (%rax)
               	addq	$8, %rbx
               	addq	$8, %rax
               	cmpq	%rbx, %r12
               	jne	0x435c30 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r14)
               	testq	%rbx, %rbx
               	je	0x435c59 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x199>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1016, %rsp             # imm = 0x3F8
               	movq	%r9, %r13
               	movl	%r8d, %r15d
               	movq	%rcx, %rbx
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x435cd4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x64>
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm1, 240(%rsp)
               	movaps	%xmm2, 256(%rsp)
               	movaps	%xmm3, 272(%rsp)
               	movaps	%xmm4, 288(%rsp)
               	movaps	%xmm5, 304(%rsp)
               	movaps	%xmm6, 320(%rsp)
               	movaps	%xmm7, 336(%rsp)
               	movl	$3176496, 496(%rsp)     # imm = 0x307830
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	leaq	112(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413900 <dladdr@plt>
               	movq	112(%rsp), %rbp
               	testq	%rbp, %rbp
               	je	0x435dee <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x17e>
               	movq	%rbp, %rdi
               	movl	$47, %esi
               	callq	0x413910 <strrchr@plt>
               	leaq	1(%rax), %r8
               	testq	%rax, %rax
               	cmoveq	%rbp, %r8
               	testq	%rbx, %rbx
               	je	0x435dfe <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x18e>
               	movq	%r8, 64(%rsp)
               	leaq	144(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413900 <dladdr@plt>
               	testl	%eax, %eax
               	je	0x435d5e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	160(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x435d5e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	%rbx, %rbp
               	subq	168(%rsp), %rbp
               	jmp	0x435dd2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x162>
               	cmpq	$0, 278210(%rip)        # 0x479c28 <(anonymous namespace)::symbols>
               	je	0x435ebf <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x24f>
               	movq	278197(%rip), %rcx      # 0x479c28 <(anonymous namespace)::symbols>
               	movq	(%rcx), %rax
               	movq	8(%rcx), %rcx
               	jmp	0x435d84 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x114>
               	nop
               	addq	$24, %rax
               	cmpq	%rcx, %rax
               	je	0x435e03 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x193>
               	movq	(%rax), %rdx
               	movq	8(%rax), %rsi
               	jmp	0x435da4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x134>
               	nopl	(%rax)
               	addq	$24, %rdx
               	cmpq	%rsi, %rdx
               	jae	0x435d80 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x110>
               	movq	8(%rdx), %rdi
               	cmpq	%rbx, %rdi
               	ja	0x435da0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rdx), %rbp
               	addq	%rdi, %rbp
               	cmpq	%rbx, %rbp
               	jbe	0x435da0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rax), %rsi
               	movq	%rbx, %rbp
               	subq	%rdi, %rbp
               	testq	%rsi, %rsi
               	je	0x435e06 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	movl	(%rdx), %eax
               	addq	%rax, %rsi
               	leaq	496(%rsp), %rdi
               	movl	$512, %edx              # imm = 0x200
               	callq	0x413860 <strncpy@plt>
               	movb	$0, 1007(%rsp)
               	jmp	0x435e06 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	leaq	61722(%rip), %r8        # 0x444f0f <typeinfo name for kotlin::gc::GCSchedulerData+0x1916>
               	testq	%rbx, %rbx
               	jne	0x435d2b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xbb>
               	movq	%rbx, %rbp
               	jmp	0x435e0b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x19b>
               	movq	%rbx, %rbp
               	movq	64(%rsp), %r8
               	leaq	496(%rsp), %r10
               	leaq	61689(%rip), %rdx       # 0x444f13 <typeinfo name for kotlin::gc::GCSchedulerData+0x191a>
               	movl	$1023, %esi             # imm = 0x3FF
               	movq	%r14, %rdi
               	movq	%r12, %rcx
               	movq	%rbx, %r9
               	movl	$0, %eax
               	pushq	%rbp
               	pushq	%r10
               	callq	0x4358b0 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	addq	$16, %rsp
               	testb	%r15b, %r15b
               	je	0x435e55 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x1e5>
               	leaq	61673(%rip), %rcx       # 0x444f2e <typeinfo name for kotlin::gc::GCSchedulerData+0x1935>
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	xorl	%eax, %eax
               	callq	0x4358b0 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	leaq	176(%rsp), %rcx
               	movq	%rcx, 368(%rsp)
               	leaq	1072(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movabsq	$206158430256, %rcx     # imm = 0x3000000030
               	movq	%rcx, 352(%rsp)
               	testq	%rdx, %rdx
               	je	0x435ead <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	cmpq	$1, %rdx
               	jne	0x435e97 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x227>
               	movb	$0, (%rax)
               	jmp	0x435ead <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	leaq	352(%rsp), %rcx
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%r13, %rdx
               	callq	0x413850 <vsnprintf@plt>
               	addq	$1016, %rsp             # imm = 0x3F8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x435ee3 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x273>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	jmp	0x435ee5 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x275>
               	xorl	%eax, %eax
               	movq	%rax, 277820(%rip)      # 0x479c28 <(anonymous namespace)::symbols>
               	leaq	61510(%rip), %rdi       # 0x444f39 <typeinfo name for kotlin::gc::GCSchedulerData+0x1940>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x413920 <open@plt>
               	testl	%eax, %eax
               	js	0x435d6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movl	%eax, %ebp
               	leaq	352(%rsp), %rdx
               	movl	$1, %edi
               	movl	%eax, %esi
               	callq	0x413930 <__fxstat@plt>
               	testl	%eax, %eax
               	js	0x435d6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	400(%rsp), %rsi
               	xorl	%edi, %edi
               	movl	$1, %edx
               	movl	$2, %ecx
               	movl	%ebp, %r8d
               	xorl	%r9d, %r9d
               	callq	0x413810 <mmap@plt>
               	cmpq	$-1, %rax
               	je	0x435d6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	testq	%rax, %rax
               	je	0x435d6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	cmpw	$0, 60(%rax)
               	je	0x435d6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	40(%rax), %rsi
               	addq	%rax, %rsi
               	xorl	%edx, %edx
               	movq	%r13, 48(%rsp)
               	movl	%r15d, 12(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	%rsi, 72(%rsp)
               	movq	%r14, 104(%rsp)
               	jmp	0x435fc7 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x357>
               	addq	$8, %r15
               	movq	%rbp, (%r12)
               	movq	%r9, 8(%r12)
               	movq	%r14, 16(%r12)
               	movq	(%r15), %rcx
               	addq	$24, %rcx
               	movq	%r15, %rdi
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	%rcx, (%rdi)
               	addq	$1, %rdx
               	movzwl	60(%rax), %ecx
               	cmpq	%rcx, %rdx
               	movq	104(%rsp), %r14
               	jae	0x435d6c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	%rdx, %r14
               	shlq	$6, %r14
               	movl	4(%rsi,%r14), %ecx
               	cmpl	$2, %ecx
               	jne	0x436177 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x507>
               	leaq	(%rsi,%r14), %r8
               	addq	$4, %r8
               	movq	24(%rsi,%r14), %r15
               	addq	%rax, %r15
               	movq	32(%rsi,%r14), %r10
               	addq	%r15, %r10
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %rbp
               	addq	%rax, %rbp
               	movq	277532(%rip), %r12      # 0x479c28 <(anonymous namespace)::symbols>
               	movq	8(%r12), %r13
               	cmpq	16(%r12), %r13
               	je	0x436047 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x3d7>
               	addq	$8, %r12
               	movq	%r15, (%r13)
               	movq	%r10, 8(%r13)
               	movq	%rbp, 16(%r13)
               	movq	(%r12), %rcx
               	addq	$24, %rcx
               	movq	%r12, %rdi
               	movq	48(%rsp), %r13
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	jmp	0x436171 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x501>
               	movq	(%r12), %r9
               	movq	%r13, %rax
               	subq	%r9, %rax
               	movq	%rax, %rsi
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %rsi
               	testq	%rax, %rax
               	movq	%rsi, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rsi), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%rsi, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%r8, 40(%rsp)
               	movq	%rdi, 32(%rsp)
               	je	0x4360d2 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x462>
               	movq	%rsi, 88(%rsp)
               	movl	$24, %esi
               	movq	%r9, 24(%rsp)
               	movq	%r10, 96(%rsp)
               	callq	0x4136c0 <calloc@plt>
               	movq	88(%rsp), %rsi
               	movq	96(%rsp), %r10
               	movq	24(%rsp), %r9
               	movq	%rax, %rdx
               	jmp	0x4360d4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x464>
               	xorl	%edx, %edx
               	leaq	(%rsi,%rsi,2), %rax
               	movq	%r15, (%rdx,%rax,8)
               	movq	%r10, 8(%rdx,%rax,8)
               	movq	%rbp, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r9, %r13
               	je	0x43611c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4ac>
               	movq	%rdx, %rbp
               	movq	%r9, %rax
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r13
               	jne	0x436100 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x490>
               	addq	$24, %rbp
               	testq	%r9, %r9
               	movl	12(%rsp), %r15d
               	je	0x436138 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4c8>
               	movq	%r9, %rdi
               	movq	%rdx, %r13
               	callq	0x4136d0 <free@plt>
               	movq	%r13, %rdx
               	leaq	16(%r12), %rdi
               	movq	%rdx, (%r12)
               	movq	%rbp, 8(%r12)
               	movq	32(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movq	48(%rsp), %r13
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	movq	40(%rsp), %r8
               	movq	%rcx, (%rdi)
               	movl	(%r8), %ecx
               	cmpl	$11, %ecx
               	jne	0x435fb1 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x341>
               	movq	24(%rsi,%r14), %rbp
               	addq	%rax, %rbp
               	movq	32(%rsi,%r14), %r9
               	addq	%rbp, %r9
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %r14
               	addq	%rax, %r14
               	movq	277120(%rip), %r15      # 0x479c28 <(anonymous namespace)::symbols>
               	movq	8(%r15), %r12
               	cmpq	16(%r15), %r12
               	jne	0x435f88 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x318>
               	movq	(%r15), %r8
               	movq	%r12, %rax
               	subq	%r8, %rax
               	movq	%rax, %r13
               	sarq	$3, %r13
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %r13
               	testq	%rax, %rax
               	movq	%r13, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r13), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%r13, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%rdi, 40(%rsp)
               	je	0x436231 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c1>
               	movl	$24, %esi
               	movq	%r8, 32(%rsp)
               	movq	%r9, 24(%rsp)
               	callq	0x4136c0 <calloc@plt>
               	movq	24(%rsp), %r9
               	movq	32(%rsp), %r8
               	movq	%rax, %rdx
               	jmp	0x436233 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c3>
               	xorl	%edx, %edx
               	leaq	(,%r13,2), %rax
               	addq	%r13, %rax
               	movq	%rbp, (%rdx,%rax,8)
               	movq	%r9, 8(%rdx,%rax,8)
               	movq	%r14, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r8, %r12
               	je	0x43627c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x60c>
               	movq	%rdx, %rbp
               	movq	%r8, %rax
               	nop
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r12
               	jne	0x436260 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5f0>
               	addq	$24, %rbp
               	testq	%r8, %r8
               	movq	48(%rsp), %r13
               	je	0x436298 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x628>
               	movq	%r8, %rdi
               	movq	%rdx, %r14
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rdx
               	leaq	16(%r15), %rdi
               	movq	%rdx, (%r15)
               	movq	%rbp, 8(%r15)
               	movq	40(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	jmp	0x435fae <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x33e>
               	nop

<std::__throw_length_error(char const*)>:
               	pushq	%rax
               	movq	%rdi, %rcx
               	leaq	60465(%rip), %rdx       # 0x444f0c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	8(%rdi), %r15
               	cmpq	%r15, %rbx
               	je	0x43632f <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3f>
               	movq	%rdi, %r14
               	jmp	0x436319 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x29>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%r15, %rbx
               	je	0x43632c <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x436310 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	callq	0x4136d0 <free@plt>
               	jmp	0x436310 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x436341 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x51>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4136d0 <free@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>:
               	movq	%rdi, %rax
               	movq	8(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43637a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	movl	16(%rax), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x43637a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	cmpl	$1, %eax
               	jne	0x43637a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
               	movb	176482(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43637b <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2b>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	(%rax,%rax)

<kotlin::internal::GetCurrentStackTrace(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdi, %r13
               	movq	$0, 48(%rsp)
               	movl	$1, 56(%rsp)
               	movb	$0, 60(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	testq	%rax, %rax
               	je	0x4363e8 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x58>
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	%rax, 48(%rsp)
               	movl	%ecx, 56(%rsp)
               	movb	$1, 60(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	$0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	leaq	920(%rip), %rdi         # 0x4367a0 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
               	leaq	32(%rsp), %rsi
               	callq	0x413940 <_Unwind_Backtrace@plt>
               	movq	32(%rsp), %r12
               	cmpq	$4, %r12
               	jbe	0x4364ba <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x12a>
               	addq	$-4, %r12
               	movq	8(%rsp), %r15
               	movq	(%rsp), %rbx
               	movq	%r15, %rdx
               	subq	%rbx, %rdx
               	movq	%rdx, %r14
               	sarq	$3, %r14
               	movq	%r12, %rbp
               	subq	%r14, %rbp
               	jbe	0x4364e1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x151>
               	je	0x4366cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	movq	16(%rsp), %rax
               	subq	%r15, %rax
               	sarq	$3, %rax
               	cmpq	%rbp, %rax
               	jae	0x436501 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x171>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%r14, %rcx
               	xorq	%rax, %rcx
               	cmpq	%rbp, %rcx
               	jb	0x436766 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3d6>
               	movq	%rdx, 64(%rsp)
               	movq	%r13, 80(%rsp)
               	cmpq	%rbp, %r14
               	movq	%r14, %rcx
               	cmovbq	%rbp, %rcx
               	leaq	(%rcx,%r14), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%r14, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	movq	%rdi, 72(%rsp)
               	je	0x436521 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x191>
               	movl	$8, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x436524 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x194>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r13)
               	movq	$0, 16(%r13)
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x436722 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
               	callq	0x4136d0 <free@plt>
               	jmp	0x436722 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
               	jae	0x4366cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	leaq	(%rbx,%r12,8), %rax
               	cmpq	%r15, %rax
               	je	0x4366cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	movq	%rax, 8(%rsp)
               	movq	%rax, %r15
               	jmp	0x4366cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
               	leaq	8(%rsp), %rbx
               	leaq	(,%rbp,8), %rdx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	(%r15,%rbp,8), %rax
               	jmp	0x4366c0 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x330>
               	xorl	%r13d, %r13d
               	leaq	(,%r14,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %rbp
               	xorl	%esi, %esi
               	movq	%rbp, %rdx
               	callq	0x413710 <memset@plt>
               	cmpq	%r15, %rbx
               	je	0x436685 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
               	movq	64(%rsp), %rdi
               	addq	$-8, %rdi
               	movq	%r13, %rcx
               	cmpq	$24, %rdi
               	jb	0x436662 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
               	shrq	$3, %rdi
               	addq	$1, %rdi
               	leaq	(%rbx,%rdi,8), %rax
               	cmpq	%rax, %r13
               	jae	0x436584 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x1f4>
               	leaq	(,%rdi,8), %rax
               	addq	%r13, %rax
               	movq	%r13, %rcx
               	cmpq	%rbx, %rax
               	ja	0x436662 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
               	movq	%rdi, %rax
               	andq	$-4, %rax
               	leaq	-4(%rax), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %ecx
               	andl	$3, %ecx
               	cmpq	$12, %rsi
               	jae	0x4365a9 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x219>
               	xorl	%esi, %esi
               	jmp	0x436613 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x283>
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	movups	(%rbx,%rsi,8), %xmm0
               	movups	16(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, (%r13,%rsi,8)
               	movups	%xmm1, 16(%r13,%rsi,8)
               	movups	32(%rbx,%rsi,8), %xmm0
               	movups	48(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 32(%r13,%rsi,8)
               	movups	%xmm1, 48(%r13,%rsi,8)
               	movups	64(%rbx,%rsi,8), %xmm0
               	movups	80(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 64(%r13,%rsi,8)
               	movups	%xmm1, 80(%r13,%rsi,8)
               	movups	96(%rbx,%rsi,8), %xmm0
               	movups	112(%rbx,%rsi,8), %xmm1
               	movups	%xmm0, 96(%r13,%rsi,8)
               	movups	%xmm1, 112(%r13,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x4365b2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x222>
               	testq	%rcx, %rcx
               	je	0x43664e <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2be>
               	leaq	16(,%rsi,8), %rdx
               	negq	%rcx
               	nopw	(%rax,%rax)
               	movups	-16(%rbx,%rdx), %xmm0
               	movups	(%rbx,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rcx
               	jne	0x436630 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2a0>
               	cmpq	%rax, %rdi
               	je	0x436685 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
               	leaq	(,%rax,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rbx,%rax,8), %rbx
               	subq	%rbx, %r15
               	xorl	%eax, %eax
               	nopw	(%rax,%rax)
               	movq	(%rbx,%rax), %rdx
               	movq	%rdx, (%rcx,%rax)
               	addq	$8, %rax
               	cmpq	%rax, %r15
               	jne	0x436670 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2e0>
               	movq	(%rsp), %rbx
               	testq	%rbx, %rbx
               	je	0x436692 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x302>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	leaq	16(%rsp), %rbx
               	movq	%r13, (%rsp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 8(%rsp)
               	movq	72(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	80(%rsp), %r13
               	movq	%rax, (%rbx)
               	movq	(%rsp), %rbx
               	movq	8(%rsp), %r15
               	subq	%rbx, %r15
               	sarq	$3, %r15
               	movq	$0, 88(%rsp)
               	movq	$4, 96(%rsp)
               	movq	%rbx, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	leaq	186(%rip), %rdi         # 0x4367b0 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
               	leaq	88(%rsp), %rsi
               	callq	0x413940 <_Unwind_Backtrace@plt>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	16(%rsp), %rax
               	movq	%rax, 16(%r13)
               	movq	$0, 16(%rsp)
               	movq	48(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x436757 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	movl	56(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x436757 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	cmpl	$1, %eax
               	jne	0x436757 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	movb	175505(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x436757 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	59355(%rip), %rdi       # 0x444f48 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4362d0 <std::__throw_length_error(char const*)>
               	jmp	0x436774 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3e4>
               	movq	%rax, %rbx
               	movq	%rsp, %rdi
               	callq	0x4367f0 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
               	leaq	40(%rsp), %rdi
               	callq	0x436350 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>:
               	movq	(%rsi), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsi)
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	8(%rsi), %rax
               	testq	%rax, %rax
               	je	0x4367c9 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x19>
               	addq	$-1, %rax
               	movq	%rax, 8(%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	movq	24(%rbx), %rax
               	cmpq	%rax, (%rbx)
               	jae	0x4367c5 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
               	callq	0x413950 <_Unwind_GetIP@plt>
               	movq	(%rbx), %rcx
               	leaq	1(%rcx), %rdx
               	movq	%rdx, (%rbx)
               	movq	16(%rbx), %rdx
               	movq	%rax, (%rdx,%rcx,8)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4367fd <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()+0xd>
               	jmp	0x4136d0 <free@plt>
               	retq
               	nop

<CreateStringFromCString>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	testq	%rdi, %rdi
               	je	0x436902 <CreateStringFromCString+0x102>
               	movq	%rdi, %r12
               	callq	0x4136e0 <strlen@plt>
               	movq	%rax, %r13
               	leaq	(%r12,%rax), %rbx
               	movq	%r12, (%rsp)
               	testq	%rax, %rax
               	movq	%r15, 24(%rsp)
               	jle	0x436909 <CreateStringFromCString+0x109>
               	movq	%r13, 32(%rsp)
               	movq	%r12, 16(%rsp)
               	xorl	%r14d, %r14d
               	movq	%rsp, %r13
               	leaq	12(%rsp), %rbp
               	movl	$52, %r12d
               	movl	$10, %r15d
               	jmp	0x436879 <CreateStringFromCString+0x79>
               	nop
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	movl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jae	0x4368e9 <CreateStringFromCString+0xe9>
               	movl	$0, 12(%rsp)
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	callq	0x436a70 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r12d
               	jb	0x436860 <CreateStringFromCString+0x60>
               	btl	%eax, %r15d
               	jae	0x4368cd <CreateStringFromCString+0xcd>
               	movq	(%rsp), %rcx
               	addq	$1, %rcx
               	nopl	(%rax,%rax)
               	movq	%rcx, %rax
               	movq	%rcx, (%rsp)
               	cmpq	%rbx, %rcx
               	jae	0x43686c <CreateStringFromCString+0x6c>
               	movzbl	(%rax), %edx
               	andb	$-64, %dl
               	leaq	1(%rax), %rcx
               	cmpb	$-128, %dl
               	je	0x4368b0 <CreateStringFromCString+0xb0>
               	jmp	0x43686c <CreateStringFromCString+0x6c>
               	xorl	%ecx, %ecx
               	cmpl	$65535, 12(%rsp)        # imm = 0xFFFF
               	movq	(%rsp), %rax
               	seta	%cl
               	addl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jb	0x436879 <CreateStringFromCString+0x79>
               	testl	%r14d, %r14d
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %r12
               	movq	32(%rsp), %r13
               	jns	0x43690c <CreateStringFromCString+0x10c>
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	xorl	%eax, %eax
               	jmp	0x436a4f <CreateStringFromCString+0x24f>
               	xorl	%r14d, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%r14d, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	133813(%rip), %rax      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbp)
               	movl	%r14d, 24(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	%rcx, (%r15)
               	movq	%r12, (%rsp)
               	testq	%r13, %r13
               	je	0x436a45 <CreateStringFromCString+0x245>
               	addq	$32, %rbp
               	movq	%rsp, %r15
               	leaq	12(%rsp), %r12
               	movl	$52, %r14d
               	movl	$10, %r13d
               	jmp	0x4369c0 <CreateStringFromCString+0x1c0>
               	movl	%eax, %ecx
               	shrl	$10, %ecx
               	addl	$4294956992, %ecx       # imm = 0xFFFFD7C0
               	movw	%cx, (%rbp)
               	andl	$1023, %eax             # imm = 0x3FF
               	orl	$56320, %eax            # imm = 0xDC00
               	movw	%ax, 2(%rbp)
               	addq	$4, %rbp
               	cmpq	%rbx, (%rsp)
               	je	0x436a45 <CreateStringFromCString+0x245>
               	nopl	(%rax)
               	movl	$0, 12(%rsp)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x436a70 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r14d
               	jae	0x4369f0 <CreateStringFromCString+0x1f0>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	jmp	0x436a20 <CreateStringFromCString+0x220>
               	nopl	(%rax)
               	btl	%eax, %r13d
               	jae	0x436a35 <CreateStringFromCString+0x235>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	nop
               	movq	%rax, (%rsp)
               	cmpq	%rbx, %rax
               	jae	0x436a20 <CreateStringFromCString+0x220>
               	movzbl	(%rax), %ecx
               	andb	$-64, %cl
               	addq	$1, %rax
               	cmpb	$-128, %cl
               	je	0x436a00 <CreateStringFromCString+0x200>
               	movl	$65533, %eax            # imm = 0xFFFD
               	movw	%ax, (%rbp)
               	addq	$2, %rbp
               	cmpq	%rbx, (%rsp)
               	jne	0x4369c0 <CreateStringFromCString+0x1c0>
               	jmp	0x436a45 <CreateStringFromCString+0x245>
               	movl	12(%rsp), %eax
               	cmpl	$65536, %eax            # imm = 0x10000
               	jb	0x436a25 <CreateStringFromCString+0x225>
               	jmp	0x436992 <CreateStringFromCString+0x192>
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %rax
               	movq	%rax, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>:
               	movq	(%rdi), %r8
               	movb	(%r8), %al
               	movzbl	%al, %ecx
               	testb	%cl, %cl
               	js	0x436a95 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x25>
               	movq	%r8, %r9
               	cmpq	%rsi, %r8
               	je	0x436c8b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movl	%ecx, (%rdx)
               	addq	$1, %r9
               	movq	%r9, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movl	%ecx, %eax
               	andl	$-32, %eax
               	cmpl	$192, %eax
               	jne	0x436af9 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x89>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%sil, %eax
               	andl	$31, %ecx
               	shll	$6, %ecx
               	andl	$63, %eax
               	orl	%eax, %ecx
               	movl	$4, %eax
               	cmpl	$128, %ecx
               	jae	0x436a89 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	jmp	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	%ecx, %eax
               	andl	$-16, %eax
               	cmpl	$224, %eax
               	jne	0x436bbe <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x14e>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %r9b
               	movl	%r9d, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%r9b, %r10d
               	shll	$12, %ecx
               	movzwl	%cx, %eax
               	andl	$63, %r10d
               	shll	$6, %r10d
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	andl	$63488, %ecx            # imm = 0xF800
               	movl	$5, %eax
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	$4, %eax
               	cmpl	$2048, %r10d            # imm = 0x800
               	jb	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	leaq	2(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %ecx
               	andb	$-64, %cl
               	movl	$3, %eax
               	cmpb	$-128, %cl
               	jne	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%sil, %eax
               	andl	$63, %eax
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	jmp	0x436a89 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	movl	%ecx, %r9d
               	andl	$-8, %r9d
               	movl	$2, %eax
               	cmpl	$240, %r9d
               	jne	0x436a94 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x24>
               	cmpq	%rsi, %r8
               	je	0x436c8b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	leaq	1(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x436c8b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movb	(%rax), %r9b
               	movl	%r9d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x436c94 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
               	movzbl	%r9b, %r10d
               	andl	$7, %ecx
               	shll	$18, %ecx
               	andl	$63, %r10d
               	shll	$12, %r10d
               	orl	%ecx, %r10d
               	movl	$5, %eax
               	cmpl	$1114111, %r10d         # imm = 0x10FFFF
               	ja	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movl	$4, %eax
               	cmpl	$65536, %r10d           # imm = 0x10000
               	jae	0x436c35 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c5>
               	movq	%r8, (%rdi)
               	retq
               	leaq	2(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x436c8b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
               	movb	(%rax), %cl
               	movl	%ecx, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x436c94 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
               	leaq	3(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movb	(%r9), %sil
               	movl	%esi, %r11d
               	andb	$-64, %r11b
               	movl	$3, %eax
               	cmpb	$-128, %r11b
               	jne	0x436c31 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
               	movzbl	%cl, %eax
               	andl	$63, %eax
               	shll	$6, %eax
               	orl	%r10d, %eax
               	movzbl	%sil, %ecx
               	andl	$63, %ecx
               	orl	%eax, %ecx
               	jmp	0x436a89 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
               	movl	$1, %eax
               	movq	%r8, (%rdi)
               	retq
               	movl	$3, %eax
               	movq	%r8, (%rdi)
               	retq
               	nopl	(%rax)

<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %r14d
               	cmpl	$127, %edi
               	ja	0x436cd7 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x436dd3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x133>
               	movq	16(%rbx), %rcx
               	jmp	0x436de3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	%r14d, %ebp
               	cmpl	$2047, %r14d            # imm = 0x7FF
               	ja	0x436d4b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xab>
               	shrl	$6, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436e8f <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ef>
               	movq	16(%rbx), %rcx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436d19 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436f10 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	andb	$63, %r14b
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436dda <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13a>
               	movq	16(%rbx), %rcx
               	jmp	0x436ddf <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13f>
               	cmpl	$65535, %r14d           # imm = 0xFFFF
               	ja	0x436e18 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x178>
               	shrl	$12, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436ebd <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x21d>
               	movq	16(%rbx), %rcx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436d8e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436f10 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$6, %ebp
               	andb	$63, %bpl
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436ea6 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x206>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d0b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436d19 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	jmp	0x436de3 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	$15, %ecx
               	orb	$-128, %r14b
               	cmpq	%rcx, %r15
               	jbe	0x436df6 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x156>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x436f10 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r14b, (%rax,%rbp)
               	movq	%r15, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, (%rax,%r15)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	shrl	$18, %ebp
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x436ed4 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x234>
               	movq	16(%rbx), %rcx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x436e4e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x436f10 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$12, %ebp
               	andb	$63, %bpl
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	movq	(%rbx), %rax
               	cmpq	%r12, %rax
               	je	0x436eeb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x24b>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d80 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436d8e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d0b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436d19 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d0b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x436d19 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d80 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436d8e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436e40 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1a0>
               	jmp	0x436e4e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x436d80 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x436d8e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	nopw	%cs:(%rax,%rax)

<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movq	8(%rdi), %r12
               	leaq	1(%r12), %rbp
               	movq	(%rdi), %r14
               	leaq	16(%rdi), %rcx
               	cmpq	%rcx, %r14
               	je	0x436f8e <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x7e>
               	movq	16(%r15), %rax
               	testq	%rbp, %rbp
               	js	0x436f98 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x88>
               	cmpq	%rax, %rbp
               	movq	%rcx, (%rsp)
               	jbe	0x436f61 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x436f61 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	subq	%rbx, %r12
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	testq	%rbx, %rbx
               	je	0x436f87 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x77>
               	cmpq	$1, %rbx
               	jne	0x436fa4 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x94>
               	movb	(%r14), %al
               	movb	%al, (%r13)
               	testq	%r12, %r12
               	jne	0x436fb7 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xa7>
               	jmp	0x436fcc <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	movl	$15, %eax
               	testq	%rbp, %rbp
               	jns	0x436f3f <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x2f>
               	leaq	57329(%rip), %rdi       # 0x444f90 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4362d0 <std::__throw_length_error(char const*)>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	testq	%r12, %r12
               	je	0x436fcc <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	leaq	(%rbx,%r13), %rdi
               	addq	$1, %rdi
               	addq	%r14, %rbx
               	cmpq	$1, %r12
               	jne	0x436ff0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xe0>
               	movb	(%rbx), %al
               	movb	%al, (%rdi)
               	cmpq	(%rsp), %r14
               	je	0x436fda <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, (%r15)
               	movq	%rbp, 16(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	cmpq	(%rsp), %r14
               	jne	0x436fd2 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xc2>
               	jmp	0x436fda <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_plusImpl>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movl	8(%rdi), %ebp
               	addl	8(%rsi), %ebp
               	js	0x4370d0 <Kotlin_String_plusImpl+0xc0>
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	131986(%rip), %rax      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r12, (%r14)
               	leaq	32(%rbx), %rdi
               	leaq	16(%r15), %rsi
               	movl	8(%r15), %edx
               	addq	%rdx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movslq	8(%r15), %rax
               	leaq	(%rbx,%rax,2), %rdi
               	addq	$32, %rdi
               	movl	8(%r13), %edx
               	addq	$16, %r13
               	addq	%rdx, %rdx
               	movq	%r13, %rsi
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_subSequence>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	testl	%esi, %esi
               	js	0x437211 <Kotlin_String_subSequence+0x131>
               	movl	%edx, %ebp
               	movl	%esi, %ebx
               	cmpl	%esi, %edx
               	jl	0x437211 <Kotlin_String_subSequence+0x131>
               	movq	%rdi, %r15
               	cmpl	%ebp, 8(%rdi)
               	jb	0x437211 <Kotlin_String_subSequence+0x131>
               	movq	%rcx, %r14
               	subl	%ebx, %ebp
               	jne	0x43718a <Kotlin_String_subSequence+0xaa>
               	movq	$0, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbx
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 16(%rsp)
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 24(%rsp)
               	movb	172921(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437168 <Kotlin_String_subSequence+0x88>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	150537(%rip), %r12      # 0x45bd78 <__unnamed_6>
               	movq	%r12, (%r14)
               	movq	%rbx, %rax
               	movq	-64(%rbx), %rax
               	movq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	jmp	0x437201 <Kotlin_String_subSequence+0x121>
               	js	0x437216 <Kotlin_String_subSequence+0x136>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	131637(%rip), %rcx      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%r12, (%r14)
               	leaq	32(%rax), %rdi
               	movl	%ebx, %eax
               	leaq	(%r15,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	nopl	(%rax,%rax)

<Kotlin_String_get>:
               	pushq	%rax
               	cmpl	%esi, 8(%rdi)
               	jbe	0x437230 <Kotlin_String_get+0x10>
               	movslq	%esi, %rax
               	movzwl	16(%rdi,%rax,2), %eax
               	popq	%rcx
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<konan::snprintf(char*, unsigned long, char const*, ...)>:
               	subq	$216, %rsp
               	testb	%al, %al
               	je	0x437282 <konan::snprintf(char*, unsigned long, char const*, ...)+0x42>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rcx
               	callq	0x413850 <vsnprintf@plt>
               	addq	$216, %rsp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_equals>:
               	pushq	%rax
               	testq	%rsi, %rsi
               	je	0x4372ec <Kotlin_String_equals+0x1c>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	131369(%rip), %rcx      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, %rax
               	je	0x4372f0 <Kotlin_String_equals+0x20>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	cmpq	%rdi, %rsi
               	je	0x437314 <Kotlin_String_equals+0x44>
               	movl	8(%rdi), %edx
               	cmpl	8(%rsi), %edx
               	jne	0x4372ec <Kotlin_String_equals+0x1c>
               	addq	$16, %rdi
               	addq	$16, %rsi
               	addq	%rdx, %rdx
               	callq	0x413960 <bcmp@plt>
               	testl	%eax, %eax
               	sete	%al
               	popq	%rcx
               	retq
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopl	(%rax,%rax)

<Kotlin_String_hashCode>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	8(%rdi), %r14d
               	cmpb	$0, 272638(%rip)        # 0x479c30 <(anonymous namespace)::initialized>
               	jne	0x437357 <Kotlin_String_hashCode+0x37>
               	movb	$1, 272629(%rip)        # 0x479c30 <(anonymous namespace)::initialized>
               	movl	272843(%rip), %eax      # 0x479d0c <__cpu_model+0xc>
               	movl	%eax, %ecx
               	shrb	$7, %cl
               	movb	%cl, 272613(%rip)       # 0x479c31 <(anonymous namespace)::sseSupported>
               	shrl	$10, %eax
               	andb	$1, %al
               	movb	%al, 272603(%rip)       # 0x479c32 <(anonymous namespace)::avx2Supported>
               	cmpl	$16, %r14d
               	jge	0x437369 <Kotlin_String_hashCode+0x49>
               	testl	%r14d, %r14d
               	jg	0x437397 <Kotlin_String_hashCode+0x77>
               	xorl	%eax, %eax
               	jmp	0x437501 <Kotlin_String_hashCode+0x1e1>
               	movb	272579(%rip), %al       # 0x479c32 <(anonymous namespace)::avx2Supported>
               	movb	272572(%rip), %cl       # 0x479c31 <(anonymous namespace)::sseSupported>
               	orb	%al, %cl
               	je	0x437397 <Kotlin_String_hashCode+0x77>
               	leaq	16(%rbx), %rsi
               	movl	%r14d, %edi
               	shrl	$2, %edi
               	cmpl	$31, %r14d
               	jg	0x43743b <Kotlin_String_hashCode+0x11b>
               	callq	0x437510 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
               	jmp	0x437468 <Kotlin_String_hashCode+0x148>
               	leaq	-1(%r14), %rax
               	movl	%r14d, %ecx
               	andl	$3, %ecx
               	cmpq	$3, %rax
               	jae	0x4373ae <Kotlin_String_hashCode+0x8e>
               	xorl	%r14d, %r14d
               	xorl	%eax, %eax
               	jmp	0x437401 <Kotlin_String_hashCode+0xe1>
               	andl	$-4, %r14d
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	16(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	18(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	20(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	22(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$4, %rdx
               	cmpq	%rdx, %r14
               	jne	0x4373c0 <Kotlin_String_hashCode+0xa0>
               	testq	%rcx, %rcx
               	je	0x437501 <Kotlin_String_hashCode+0x1e1>
               	leaq	(%rbx,%r14,2), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%eax, %edi
               	shll	$5, %edi
               	subl	%eax, %edi
               	movzwl	(%rdx,%rsi,2), %eax
               	addl	%edi, %eax
               	addq	$1, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x437420 <Kotlin_String_hashCode+0x100>
               	jmp	0x437501 <Kotlin_String_hashCode+0x1e1>
               	testb	%al, %al
               	je	0x43744c <Kotlin_String_hashCode+0x12c>
               	cmpl	$127, %r14d
               	jg	0x437453 <Kotlin_String_hashCode+0x133>
               	callq	0x437740 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x437468 <Kotlin_String_hashCode+0x148>
               	callq	0x4375c0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x437468 <Kotlin_String_hashCode+0x148>
               	cmpl	$575, %r14d             # imm = 0x23F
               	jg	0x437463 <Kotlin_String_hashCode+0x143>
               	callq	0x437840 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>
               	jmp	0x437468 <Kotlin_String_hashCode+0x148>
               	callq	0x437a30 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>
               	movl	%r14d, %ecx
               	andl	$-4, %ecx
               	cmpl	%r14d, %ecx
               	jge	0x437501 <Kotlin_String_hashCode+0x1e1>
               	movq	%rcx, %r8
               	notq	%r8
               	addq	%r14, %r8
               	movq	%r14, %r9
               	andq	$3, %r9
               	je	0x4374b9 <Kotlin_String_hashCode+0x199>
               	movl	%r14d, %edx
               	andl	$-4, %edx
               	leaq	(%rbx,%rdx,2), %rdi
               	addq	$16, %rdi
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	(%rdi,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$1, %rdx
               	cmpq	%rdx, %r9
               	jne	0x4374a0 <Kotlin_String_hashCode+0x180>
               	orq	%r9, %rcx
               	cmpq	$3, %r8
               	jb	0x437501 <Kotlin_String_hashCode+0x1e1>
               	nop
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	16(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	18(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	20(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	22(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	addq	$4, %rcx
               	cmpq	%rcx, %r14
               	jne	0x4374c0 <Kotlin_String_hashCode+0x1a0>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>:
               	addl	$2, %edi
               	pxor	%xmm1, %xmm1
               	movdqa	47745(%rip), %xmm2      # 0x442fa0 <_IO_stdin_used+0xa0>
               	movdqa	47753(%rip), %xmm3      # 0x442fb0 <_IO_stdin_used+0xb0>
               	movdqa	47761(%rip), %xmm4      # 0x442fc0 <_IO_stdin_used+0xc0>
               	pxor	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rax
               	pmovzxwd	(%rsi), %xmm5           # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm5
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm4, %xmm6
               	pmulld	%xmm2, %xmm0
               	paddd	%xmm5, %xmm0
               	pmulld	%xmm2, %xmm1
               	paddd	%xmm6, %xmm1
               	addl	$-2, %edi
               	addq	$16, %rsi
               	cmpl	$3, %edi
               	jg	0x437540 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0x30>
               	phaddd	%xmm1, %xmm0
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	cmpl	$3, %edi
               	jne	0x4375b0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0xa0>
               	pmovzxwd	16(%rax), %xmm1         # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47671(%rip), %xmm0      # 0x442fd0 <_IO_stdin_used+0xd0>
               	pmulld	47646(%rip), %xmm1      # 0x442fc0 <_IO_stdin_used+0xc0>
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm0
               	movd	%xmm0, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	pxor	%xmm5, %xmm5
               	movdqa	47635(%rip), %xmm12     # 0x442fe0 <_IO_stdin_used+0xe0>
               	movdqa	47642(%rip), %xmm10     # 0x442ff0 <_IO_stdin_used+0xf0>
               	movdqa	47649(%rip), %xmm11     # 0x443000 <_IO_stdin_used+0x100>
               	movdqa	47560(%rip), %xmm8      # 0x442fb0 <_IO_stdin_used+0xb0>
               	movdqa	47567(%rip), %xmm9      # 0x442fc0 <_IO_stdin_used+0xc0>
               	pxor	%xmm7, %xmm7
               	pxor	%xmm1, %xmm1
               	pxor	%xmm3, %xmm3
               	nopl	(%rax)
               	movl	%edi, %eax
               	pmovzxwd	(%rsi), %xmm2           # xmm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm10, %xmm2
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm7, %xmm0
               	pmovzxwd	16(%rsi), %xmm7         # xmm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm11, %xmm6
               	movdqa	%xmm5, %xmm4
               	pmovzxwd	24(%rsi), %xmm5         # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm12, %xmm3
               	paddd	%xmm2, %xmm3
               	pmulld	%xmm12, %xmm1
               	paddd	%xmm6, %xmm1
               	pmulld	%xmm12, %xmm0
               	pmulld	%xmm12, %xmm4
               	pmulld	%xmm8, %xmm7
               	paddd	%xmm0, %xmm7
               	pmulld	%xmm9, %xmm5
               	paddd	%xmm4, %xmm5
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437600 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x40>
               	phaddd	%xmm1, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm5, %xmm7
               	phaddd	%xmm7, %xmm7
               	phaddd	%xmm7, %xmm7
               	paddd	%xmm3, %xmm7
               	leal	4(%rdi), %eax
               	cmpl	$6, %eax
               	jl	0x43770f <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x14f>
               	pxor	%xmm4, %xmm4
               	movdqa	47349(%rip), %xmm3      # 0x442fa0 <_IO_stdin_used+0xa0>
               	pxor	%xmm1, %xmm1
               	nop
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm1, %xmm2
               	movl	%edi, %eax
               	movdqa	%xmm4, %xmm5
               	pmovzxwd	8(%rsi), %xmm4          # xmm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm2
               	pmulld	%xmm3, %xmm5
               	pmulld	%xmm8, %xmm0
               	movdqa	%xmm0, %xmm1
               	paddd	%xmm2, %xmm1
               	pmulld	%xmm9, %xmm4
               	paddd	%xmm5, %xmm4
               	addq	$16, %rsi
               	leal	-2(%rax), %edi
               	cmpl	$3, %eax
               	jg	0x4376b0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf0>
               	pmulld	47268(%rip), %xmm7      # 0x442fa0 <_IO_stdin_used+0xa0>
               	phaddd	%xmm4, %xmm1
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm7
               	testl	%edi, %edi
               	jle	0x437738 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x178>
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47279(%rip), %xmm7      # 0x442fd0 <_IO_stdin_used+0xd0>
               	pmulld	47254(%rip), %xmm0      # 0x442fc0 <_IO_stdin_used+0xc0>
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	paddd	%xmm0, %xmm7
               	movd	%xmm7, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	addl	$-2, %edi
               	vpbroadcastd	47032(%rip), %ymm1 # 0x442f04 <_IO_stdin_used+0x4>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vmovdqa	47336(%rip), %ymm2      # 0x443040 <_IO_stdin_used+0x140>
               	vmovdqa	47360(%rip), %ymm3      # 0x443060 <_IO_stdin_used+0x160>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm5   # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm2, %ymm5, %ymm5
               	vpmovzxwd	16(%rsi), %ymm6 # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm1, %ymm4, %ymm4
               	vpaddd	%ymm4, %ymm5, %ymm4
               	vpmulld	%ymm1, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm6, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	addl	$2, %eax
               	cmpl	$7, %eax
               	jg	0x437770 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x30>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	leal	6(%rdi), %eax
               	cmpl	$6, %eax
               	jge	0x4377d2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x92>
               	addl	$2, %edi
               	testl	%edi, %edi
               	jg	0x43780e <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xce>
               	jmp	0x437838 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46888(%rip), %xmm2 # 0x442f08 <_IO_stdin_used+0x8>
               	vpmulld	47223(%rip), %ymm1, %ymm1 # 0x443060 <_IO_stdin_used+0x160>
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	addq	$16, %rsi
               	testl	%edi, %edi
               	jle	0x437838 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %xmm1   # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46832(%rip), %xmm2 # 0x442f0c <_IO_stdin_used+0xc>
               	vpmulld	47003(%rip), %xmm1, %xmm1 # 0x442fc0 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vmovd	%xmm0, %eax
               	vzeroupper
               	retq

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>:
               	vpbroadcastd	46791(%rip), %ymm3 # 0x442f10 <_IO_stdin_used+0x10>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	47147(%rip), %ymm4      # 0x443080 <_IO_stdin_used+0x180>
               	vmovdqa	47171(%rip), %ymm5      # 0x4430a0 <_IO_stdin_used+0x1a0>
               	vmovdqa	47067(%rip), %ymm0      # 0x443040 <_IO_stdin_used+0x140>
               	vmovdqa	47091(%rip), %ymm1      # 0x443060 <_IO_stdin_used+0x160>
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	nopw	(%rax,%rax)
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm9   # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm9, %ymm9
               	vpmovzxwd	16(%rsi), %ymm10 # ymm10 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm11 # ymm11 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm5, %ymm10, %ymm10
               	vpmovzxwd	48(%rsi), %ymm12 # ymm12 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm8, %ymm8
               	vpaddd	%ymm8, %ymm9, %ymm8
               	vpmulld	%ymm3, %ymm7, %ymm7
               	vpaddd	%ymm7, %ymm10, %ymm7
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm3, %ymm2, %ymm2
               	vpmulld	%ymm0, %ymm11, %ymm9
               	vpaddd	%ymm6, %ymm9, %ymm6
               	vpmulld	%ymm1, %ymm12, %ymm9
               	vpaddd	%ymm2, %ymm9, %ymm2
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x437880 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x40>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm6, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm3, %xmm4
               	vextracti128	$1, %ymm2, %xmm5
               	vpaddd	%xmm2, %xmm3, %xmm2
               	vpaddd	%xmm2, %xmm4, %xmm2
               	vpaddd	%xmm5, %xmm2, %xmm2
               	leal	8(%rdi), %eax
               	cmpl	$12, %eax
               	jge	0x43795b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x11b>
               	cmpl	$2, %edi
               	jge	0x4379d9 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x199>
               	testl	%edi, %edi
               	jle	0x437953 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46549(%rip), %xmm1 # 0x442f0c <_IO_stdin_used+0xc>
               	vpmulld	46720(%rip), %xmm0, %xmm0 # 0x442fc0 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpxor	%xmm3, %xmm3, %xmm3
               	vpbroadcastd	46492(%rip), %ymm4 # 0x442f04 <_IO_stdin_used+0x4>
               	vpxor	%xmm5, %xmm5, %xmm5
               	nopl	(%rax)
               	vpmovzxwd	(%rsi), %ymm6   # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm7 # ymm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm5, %ymm5
               	vpmulld	%ymm4, %ymm3, %ymm3
               	vpmulld	%ymm0, %ymm6, %ymm6
               	vpaddd	%ymm5, %ymm6, %ymm5
               	vpmulld	%ymm1, %ymm7, %ymm6
               	vpaddd	%ymm3, %ymm6, %ymm3
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437970 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x130>
               	vpbroadcastd	46422(%rip), %xmm0 # 0x442f04 <_IO_stdin_used+0x4>
               	vphaddd	%ymm3, %ymm5, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm0, %xmm2, %xmm0
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437925 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe5>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46369(%rip), %xmm1 # 0x442f08 <_IO_stdin_used+0x8>
               	vpmulld	46704(%rip), %ymm0, %ymm0 # 0x443060 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437929 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe9>
               	jmp	0x437953 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>:
               	vpbroadcastd	46299(%rip), %ymm6 # 0x442f14 <_IO_stdin_used+0x14>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46715(%rip), %ymm10     # 0x4430c0 <_IO_stdin_used+0x1c0>
               	vmovdqa	46803(%rip), %ymm11     # 0x443120 <_IO_stdin_used+0x220>
               	vmovdqa	46571(%rip), %ymm7      # 0x443040 <_IO_stdin_used+0x140>
               	vmovdqa	46595(%rip), %ymm8      # 0x443060 <_IO_stdin_used+0x160>
               	vpxor	%xmm5, %xmm5, %xmm5
               	vpxor	%xmm9, %xmm9, %xmm9
               	vpxor	%xmm12, %xmm12, %xmm12
               	vpxor	%xmm13, %xmm13, %xmm13
               	vpxor	%xmm14, %xmm14, %xmm14
               	vpxor	%xmm15, %xmm15, %xmm15
               	vpxor	%xmm0, %xmm0, %xmm0
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	46657(%rip), %ymm3, %ymm3 # 0x4430e0 <_IO_stdin_used+0x1e0>
               	vpmulld	46680(%rip), %ymm4, %ymm4 # 0x443100 <_IO_stdin_used+0x200>
               	vpmulld	%ymm6, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm1, %ymm0
               	vpmovzxwd	48(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm11, %ymm1, %ymm1
               	vpmulld	%ymm6, %ymm15, %ymm15
               	vpaddd	%ymm3, %ymm15, %ymm15
               	vpmovzxwd	64(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm14, %ymm14
               	vpaddd	%ymm4, %ymm14, %ymm14
               	vpmovzxwd	80(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm13, %ymm13
               	vpaddd	%ymm1, %ymm13, %ymm13
               	vpmulld	%ymm6, %ymm12, %ymm1
               	vpmulld	46479(%rip), %ymm3, %ymm3 # 0x443080 <_IO_stdin_used+0x180>
               	vpaddd	%ymm1, %ymm3, %ymm12
               	vpmovzxwd	96(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm9, %ymm3
               	vpmulld	46487(%rip), %ymm4, %ymm4 # 0x4430a0 <_IO_stdin_used+0x1a0>
               	vpaddd	%ymm3, %ymm4, %ymm9
               	vpmulld	%ymm6, %ymm5, %ymm3
               	vpmulld	%ymm7, %ymm1, %ymm1
               	vpaddd	%ymm3, %ymm1, %ymm5
               	vpmovzxwd	112(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm2, %ymm2
               	vpmulld	%ymm8, %ymm1, %ymm1
               	vpaddd	%ymm2, %ymm1, %ymm2
               	movl	%edi, %eax
               	subq	$-128, %rsi
               	leal	-16(%rax), %edi
               	cmpl	$31, %eax
               	jg	0x437a80 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x50>
               	vmovdqa	%ymm8, %ymm11
               	vmovdqa	%ymm7, %ymm10
               	vphaddd	%ymm15, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm13, %ymm14, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm9, %ymm12, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm5, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm0, %xmm4
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm1, %xmm5
               	vextracti128	$1, %ymm3, %xmm6
               	vextracti128	$1, %ymm2, %xmm7
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm4, %xmm0
               	vpaddd	%xmm3, %xmm5, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm6, %xmm1
               	vpaddd	%xmm7, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm2
               	leal	16(%rdi), %eax
               	cmpl	$24, %eax
               	jge	0x437c0a <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1da>
               	cmpl	$4, %edi
               	jge	0x437cee <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2be>
               	cmpl	$2, %edi
               	jge	0x437d69 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x339>
               	testl	%edi, %edi
               	jle	0x437c02 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	45862(%rip), %xmm1 # 0x442f0c <_IO_stdin_used+0xc>
               	vpmulld	46033(%rip), %xmm0, %xmm0 # 0x442fc0 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpbroadcastd	45821(%rip), %ymm5 # 0x442f10 <_IO_stdin_used+0x10>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	vmovdqa	46164(%rip), %ymm12     # 0x443080 <_IO_stdin_used+0x180>
               	vmovdqa	46188(%rip), %ymm13     # 0x4430a0 <_IO_stdin_used+0x1a0>
               	nopw	%cs:(%rax,%rax)
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	48(%rsi), %ymm9 # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmulld	%ymm5, %ymm8, %ymm8
               	vpmulld	%ymm5, %ymm7, %ymm7
               	vpmulld	%ymm5, %ymm6, %ymm6
               	vpmulld	%ymm5, %ymm0, %ymm0
               	vpmulld	%ymm12, %ymm1, %ymm1
               	vpaddd	%ymm1, %ymm8, %ymm8
               	vpmulld	%ymm13, %ymm3, %ymm1
               	vpaddd	%ymm7, %ymm1, %ymm7
               	vpmulld	%ymm10, %ymm4, %ymm1
               	vpaddd	%ymm6, %ymm1, %ymm6
               	vpmulld	%ymm11, %ymm9, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x437c40 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x210>
               	vpbroadcastd	45674(%rip), %xmm1 # 0x442f10 <_IO_stdin_used+0x10>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm6, %ymm0
               	vextracti128	$1, %ymm3, %xmm2
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm4
               	vpaddd	%xmm3, %xmm1, %xmm1
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm4, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	cmpl	$4, %edi
               	jl	0x437bcb <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x19b>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpbroadcastd	45577(%rip), %ymm3 # 0x442f04 <_IO_stdin_used+0x4>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm5 # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm4, %ymm4
               	vpmulld	%ymm3, %ymm0, %ymm0
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpaddd	%ymm4, %ymm1, %ymm4
               	vpmulld	%ymm11, %ymm5, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x437d00 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2d0>
               	vpbroadcastd	45510(%rip), %xmm1 # 0x442f04 <_IO_stdin_used+0x4>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x437bd4 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a4>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45457(%rip), %xmm1 # 0x442f08 <_IO_stdin_used+0x8>
               	vpmulld	45792(%rip), %ymm0, %ymm0 # 0x443060 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x437bd8 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a8>
               	jmp	0x437c02 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	leaq	130731(%rip), %rax      # 0x457c80 <ktypeglobal:kotlin.native.internal.CleanerImpl#internal>
               	cmpq	%rax, %rsi
               	je	0x437e36 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x76>
               	leaq	130575(%rip), %rax      # 0x457bf0 <ktypeglobal:kotlin.native.concurrent.WorkerBoundReference#internal>
               	cmpq	%rax, %rsi
               	jne	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movq	8(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	cmpq	$0, (%rbx)
               	je	0x437e20 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x60>
               	movq	8(%rbx), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$8, %rdi
               	movq	%rbp, %rsi
               	callq	0x4245d0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	%rbx, %rdi
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4136d0 <free@plt>
               	movl	269815(%rip), %r13d     # 0x479c34 <(anonymous namespace)::globalCleanerWorker>
               	cmpl	$-2, %r13d
               	je	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movslq	%r13d, %r15
               	movq	8(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	callq	0x4382d0 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	movq	%r12, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437eb0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x437eb0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	cmpl	$1, %eax
               	jne	0x437eb0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movb	169524(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437eb0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movq	%rbp, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	152(%r12), %rdi
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x437ee5 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x125>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x437f03 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x143>
               	jmp	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	(%rax), %rbp
               	cmpl	%r13d, 8(%rbp)
               	jne	0x437f34 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x174>
               	testq	%rbp, %rbp
               	jne	0x437f6e <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1ae>
               	jmp	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	cmpl	%r13d, %esi
               	je	0x437f65 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1a5>
               	movq	%rbp, %rbx
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movl	8(%rbp), %esi
               	movslq	%esi, %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x437f20 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x437f2f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x16f>
               	jmp	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	testq	%rbx, %rbx
               	je	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	16(%rbp), %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movups	80(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	%r14, 16(%rsp)
               	movq	%r14, %rax
               	movq	-64(%r14), %rdx
               	movl	$1, %r13d
               	movl	$1, %ecx
               	movq	%rdx, %r14
               	xchgl	%ecx, 328(%rdx)
               	movl	%ecx, 12(%rsp)
               	leaq	144(%rbx), %rdi
               	movq	-64(%rax), %rbp
               	xchgl	%r13d, 328(%rbp)
               	movq	%rdi, %r15
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x437ff8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%r13d, %eax
               	xchgl	%eax, (%rbp)
               	testl	%r13d, %r13d
               	jne	0x437ff8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	cmpl	$1, %eax
               	jne	0x437ff8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	movb	169196(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437ff8 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x238>
               	movq	%rbp, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	56(%rbx), %rax
               	movq	72(%rbx), %rcx
               	addq	$-40, %rcx
               	cmpq	%rcx, %rax
               	je	0x438046 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x286>
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movq	56(%rbx), %rax
               	addq	$40, %rax
               	movq	%rax, 56(%rbx)
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	jmp	0x4381f1 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x431>
               	movq	16(%rbx), %rax
               	movq	80(%rbx), %rdx
               	movq	8(%rbx), %rcx
               	movq	%rdx, %rsi
               	subq	%rcx, %rsi
               	sarq	$3, %rsi
               	movq	%rax, %rdi
               	subq	%rsi, %rdi
               	cmpq	$1, %rdi
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	ja	0x438192 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x3d2>
               	movq	%r13, 72(%rsp)
               	movq	48(%rbx), %rsi
               	subq	%rsi, %rdx
               	movq	%rdx, %rbp
               	sarq	$3, %rbp
               	leaq	2(%rbp), %r8
               	leaq	4(,%rbp), %rdi
               	addq	%rbp, %rdi
               	cmpq	%rdi, %rax
               	jbe	0x4380c7 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x307>
               	subq	%r8, %rax
               	andq	$-2, %rax
               	leaq	(%rcx,%rax,4), %r13
               	addq	$8, %rdx
               	cmpq	%rsi, %r13
               	jae	0x438139 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x379>
               	testq	%rdx, %rdx
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	movq	%r13, %rdi
               	jmp	0x438150 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x390>
               	movq	%rbp, 64(%rsp)
               	testq	%rax, %rax
               	movl	$1, %ecx
               	cmovneq	%rax, %rcx
               	leaq	(%rax,%rcx), %r13
               	addq	$2, %r13
               	movl	$8, %esi
               	movq	%r13, %rdi
               	movq	%r8, %rbp
               	callq	0x4136c0 <calloc@plt>
               	movq	%r13, 56(%rsp)
               	subq	%rbp, %r13
               	andq	$-2, %r13
               	movq	%rax, %rbp
               	leaq	(%rax,%r13,4), %r13
               	movq	48(%rbx), %rsi
               	movq	80(%rbx), %rdx
               	subq	%rsi, %rdx
               	addq	$8, %rdx
               	je	0x43811c <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x35c>
               	movq	%r13, %rdi
               	callq	0x4136b0 <memmove@plt>
               	movq	8(%rbx), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, 8(%rbx)
               	movq	56(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	64(%rsp), %rbp
               	jmp	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	testq	%rdx, %rdx
               	je	0x438155 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x395>
               	leaq	1(%rbp), %rax
               	leaq	(,%rax,8), %rdi
               	addq	%r13, %rdi
               	subq	%rdx, %rdi
               	callq	0x4136b0 <memmove@plt>
               	movq	%r13, 48(%rbx)
               	movq	(%r13), %rax
               	movq	%rax, 32(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 40(%rbx)
               	leaq	(,%rbp,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbx)
               	movq	(%r13,%rbp,8), %rax
               	movq	%rax, 64(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 72(%rbx)
               	movq	72(%rsp), %r13
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	80(%rbx), %rcx
               	movq	%rax, 8(%rcx)
               	movq	56(%rbx), %rax
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movq	80(%rbx), %rax
               	leaq	8(%rax), %rcx
               	movq	%rcx, 80(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rbx)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 72(%rbx)
               	movq	%rax, 56(%rbx)
               	addq	$184, %rbx
               	movq	%rbx, %rdi
               	callq	0x413970 <pthread_cond_signal@plt>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438245 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438245 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	cmpl	$1, %eax
               	jne	0x438245 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	movb	168607(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438245 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x485>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	addq	$328, %r15              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ecx, %ecx
               	jne	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	cmpl	$1, %eax
               	jne	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movb	168559(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438275 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	cmpl	$1, %eax
               	jne	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movb	168490(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4382ba <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4fa>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<(anonymous namespace)::theState()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	268634(%rip), %r14      # 0x479c38 <(anonymous namespace)::theState()::state>
               	testq	%r14, %r14
               	jne	0x4385b7 <(anonymous namespace)::theState()+0x2e7>
               	movl	$1, %edi
               	movl	$272, %esi              # imm = 0x110
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438422 <(anonymous namespace)::theState()+0x152>
               	movq	%rax, %rbx
               	addq	$136, %rax
               	movq	%rax, 88(%rbx)
               	movq	$1, 96(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movl	$1065353216, 120(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 128(%rbx)
               	leaq	192(%rbx), %rax
               	movq	%rax, 144(%rbx)
               	movq	$1, 152(%rbx)
               	movups	%xmm0, 160(%rbx)
               	movl	$1065353216, 176(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 184(%rbx)
               	leaq	248(%rbx), %rax
               	movq	%rax, 200(%rbx)
               	movq	$1, 208(%rbx)
               	movups	%xmm0, 216(%rbx)
               	movl	$1065353216, 232(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 240(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r14)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413980 <pthread_mutex_init@plt>
               	movq	%rbx, %rdi
               	addq	$40, %rdi
               	xorl	%esi, %esi
               	callq	0x413990 <pthread_cond_init@plt>
               	movabsq	$4294967297, %rax       # imm = 0x100000001
               	movq	%rax, 256(%rbx)
               	movl	$0, 264(%rbx)
               	testq	%r14, %r14
               	je	0x438409 <(anonymous namespace)::theState()+0x139>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x438409 <(anonymous namespace)::theState()+0x139>
               	cmpl	$1, %eax
               	jne	0x438409 <(anonymous namespace)::theState()+0x139>
               	movb	168155(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438409 <(anonymous namespace)::theState()+0x139>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 268324(%rip)      # 0x479c38 <(anonymous namespace)::theState()::state>
               	jne	0x438431 <(anonymous namespace)::theState()+0x161>
               	movq	268315(%rip), %r14      # 0x479c38 <(anonymous namespace)::theState()::state>
               	jmp	0x4385b7 <(anonymous namespace)::theState()+0x2e7>
               	xorl	%ebx, %ebx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 268297(%rip)      # 0x479c38 <(anonymous namespace)::theState()::state>
               	je	0x438416 <(anonymous namespace)::theState()+0x146>
               	movq	%rax, %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rbx, %rdi
               	callq	0x4139a0 <pthread_mutex_destroy@plt>
               	leaq	40(%rbx), %rdi
               	callq	0x4139b0 <pthread_cond_destroy@plt>
               	testq	%r15, %r15
               	je	0x438490 <(anonymous namespace)::theState()+0x1c0>
               	addq	$328, %r15              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x438490 <(anonymous namespace)::theState()+0x1c0>
               	cmpl	$1, %eax
               	jne	0x438490 <(anonymous namespace)::theState()+0x1c0>
               	movb	168020(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438490 <(anonymous namespace)::theState()+0x1c0>
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	leaq	216(%rbx), %r15
               	movq	216(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4384c0 <(anonymous namespace)::theState()+0x1f0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x4384b0 <(anonymous namespace)::theState()+0x1e0>
               	movq	200(%rbx), %rdi
               	movq	208(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	200(%rbx), %rdi
               	leaq	248(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x4384f8 <(anonymous namespace)::theState()+0x228>
               	callq	0x4136d0 <free@plt>
               	leaq	160(%rbx), %r15
               	movq	160(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438520 <(anonymous namespace)::theState()+0x250>
               	nop
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438510 <(anonymous namespace)::theState()+0x240>
               	movq	144(%rbx), %rdi
               	movq	152(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	144(%rbx), %rdi
               	leaq	192(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x438558 <(anonymous namespace)::theState()+0x288>
               	callq	0x4136d0 <free@plt>
               	leaq	104(%rbx), %r15
               	movq	104(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x438580 <(anonymous namespace)::theState()+0x2b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	callq	0x4136d0 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x438570 <(anonymous namespace)::theState()+0x2a0>
               	movq	88(%rbx), %rdi
               	movq	96(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	88(%rbx), %rdi
               	leaq	136(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x4385af <(anonymous namespace)::theState()+0x2df>
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_initRuntimeIfNeeded>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%fs:0, %rax
               	cmpq	$0, -48(%rax)
               	jne	0x43913e <Kotlin_initRuntimeIfNeeded+0xb6e>
               	movq	%rax, %r12
               	movb	267863(%rip), %al       # 0x479c58 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x439243 <Kotlin_initRuntimeIfNeeded+0xc73>
               	leaq	24(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	leaq	-8(%rax), %rax
               	leaq	96(%rsp), %rcx
               	movq	%rcx, (%rax)
               	leaq	-67122(%rip), %rbx      # 0x428000 <void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	%rbx, (%rax)
               	cmpq	$0, 153963(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43927b <Kotlin_initRuntimeIfNeeded+0xcab>
               	leaq	167670(%rip), %rdi      # 0x461550 <(anonymous namespace)::initOptions>
               	leaq	19617(%rip), %rsi       # 0x43d302 <__once_proxy>
               	callq	0x4139c0 <pthread_once@plt>
               	testl	%eax, %eax
               	jne	0x439280 <Kotlin_initRuntimeIfNeeded+0xcb0>
               	callq	0x42a8e0 <mi_thread_init>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x4390e6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movq	%rax, %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	movq	%r12, %rax
               	cmpq	$0, -48(%r12)
               	jne	0x439287 <Kotlin_initRuntimeIfNeeded+0xcb7>
               	movq	%r14, -48(%r12)
               	lock
               	addl	$1, 267654(%rip)        # 0x479c44 <(anonymous namespace)::aliveRuntimesCount>
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, 267635(%rip)      # 0x479c40 <(anonymous namespace)::globalRuntimeStatus>
               	sete	%r13b
               	callq	0x4358a0 <konan::gettid()>
               	movl	%eax, %ebx
               	movl	$1, %edi
               	movl	$368, %esi              # imm = 0x170
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r15
               	leaq	8(%rax), %rbp
               	movl	%ebx, 8(%rax)
               	leaq	163296(%rip), %rax      # 0x4604d8 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 16(%r15)
               	leaq	24(%r15), %rax
               	movq	%rax, 32(%r15)
               	movq	%rax, 24(%r15)
               	leaq	48(%r15), %rax
               	movq	%rax, 56(%r15)
               	movq	%rax, 48(%r15)
               	leaq	144(%r15), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 64(%r15)
               	movups	%xmm0, 80(%r15)
               	movq	%rax, 96(%r15)
               	movq	$1, 104(%r15)
               	movups	%xmm0, 112(%r15)
               	movl	$1065353216, 128(%r15)  # imm = 0x3F800000
               	movups	%xmm0, 136(%r15)
               	movups	%xmm0, 152(%r15)
               	xorps	%xmm0, %xmm0
               	movq	$0, 168(%r15)
               	leaq	163239(%rip), %rax      # 0x460510 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 176(%r15)
               	leaq	184(%r15), %rax
               	movq	%rax, 192(%r15)
               	movq	%rax, 184(%r15)
               	leaq	208(%r15), %rax
               	movq	%rax, 216(%r15)
               	movq	%rax, 208(%r15)
               	leaq	163239(%rip), %rax      # 0x460548 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 232(%r15)
               	leaq	240(%r15), %rax
               	movq	%rax, 248(%r15)
               	movq	%rax, 240(%r15)
               	leaq	264(%r15), %rax
               	movq	%rax, 272(%r15)
               	movq	%rax, 264(%r15)
               	leaq	296(%r15), %rdi
               	movups	%xmm0, 280(%r15)
               	leaq	163224(%rip), %rsi      # 0x460580 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	%rbp, %rdx
               	callq	0x427bf0 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 304(%r15)
               	movq	$0, 320(%r15)
               	movl	$1, 328(%r15)
               	movq	%rbp, 336(%r15)
               	movb	$0, 344(%r15)
               	movups	%xmm0, 352(%r15)
               	cmpq	$0, 153480(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x438846 <Kotlin_initRuntimeIfNeeded+0x276>
               	leaq	162919(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439297 <Kotlin_initRuntimeIfNeeded+0xcc7>
               	leaq	352(%r15), %rax
               	movq	162876(%rip), %rcx      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x438862 <Kotlin_initRuntimeIfNeeded+0x292>
               	movq	%r15, 360(%rcx)
               	jmp	0x43886b <Kotlin_initRuntimeIfNeeded+0x29b>
               	movq	%r15, 162863(%rip)      # 0x460498 <kotlin::mm::GlobalData::instance_+0x20>
               	xorl	%ecx, %ecx
               	movq	$0, 162842(%rip)        # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	(%rax), %rbx
               	movq	%rcx, (%rax)
               	testq	%rbx, %rbx
               	je	0x4388b9 <Kotlin_initRuntimeIfNeeded+0x2e9>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x43889d <Kotlin_initRuntimeIfNeeded+0x2cd>
               	movq	%rbp, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424080 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	162768(%rip), %rbx      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	%r15, 162761(%rip)      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rbx, %rbx
               	je	0x438904 <Kotlin_initRuntimeIfNeeded+0x334>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x4388e8 <Kotlin_initRuntimeIfNeeded+0x318>
               	movq	%rbp, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424080 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	cmpq	$0, 153260(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43891a <Kotlin_initRuntimeIfNeeded+0x34a>
               	leaq	162699(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movb	%r13b, 15(%rsp)
               	leaq	328(%r15), %rbx
               	movq	%r12, %rax
               	movq	%r15, -64(%r12)
               	movq	%r15, (%r14)
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%r15)
               	movl	%eax, 36(%rsp)
               	cmpl	$1, %eax
               	jne	0x438958 <Kotlin_initRuntimeIfNeeded+0x388>
               	movb	166796(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438958 <Kotlin_initRuntimeIfNeeded+0x388>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 48(%rsp)
               	movq	(%r14), %rbx
               	movq	%r12, %rax
               	movq	-40(%r12), %r13
               	movq	%rbx, %rbp
               	testq	%r13, %r13
               	movq	%r12, 56(%rsp)
               	movq	%r14, 40(%rsp)
               	jne	0x438e76 <Kotlin_initRuntimeIfNeeded+0x8a6>
               	movq	%rbx, 88(%rsp)
               	callq	0x4382d0 <(anonymous namespace)::theState()>
               	movq	%rax, %rdi
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rax, 16(%rsp)
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%rbx, %rbx
               	je	0x4389d6 <Kotlin_initRuntimeIfNeeded+0x406>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x4389d6 <Kotlin_initRuntimeIfNeeded+0x406>
               	cmpl	$1, %eax
               	jne	0x4389d6 <Kotlin_initRuntimeIfNeeded+0x406>
               	movb	166670(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4389d6 <Kotlin_initRuntimeIfNeeded+0x406>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$1, %edi
               	movl	$256, %esi              # imm = 0x100
               	callq	0x4136c0 <calloc@plt>
               	testq	%rax, %rax
               	je	0x438b2c <Kotlin_initRuntimeIfNeeded+0x55c>
               	movq	%rax, %r13
               	movq	16(%rsp), %rdx
               	movl	256(%rdx), %eax
               	leal	1(%rax), %ecx
               	movl	%ecx, 256(%rdx)
               	movl	%eax, (%r13)
               	movl	$1, 4(%r13)
               	movq	$8, 16(%r13)
               	movl	$8, %edi
               	movl	$8, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 8(%r13)
               	movq	16(%r13), %rax
               	leaq	-4(,%rax,4), %rbp
               	andq	$-8, %rbp
               	leaq	(%rbx,%rbp), %r14
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, (%rbx,%rbp)
               	movq	%r14, 48(%r13)
               	movq	(%rbx,%rbp), %rax
               	movq	%rax, 32(%r13)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 40(%r13)
               	movq	%r14, 80(%r13)
               	movq	%rax, 64(%r13)
               	movq	%rcx, 72(%r13)
               	movq	%rax, 24(%r13)
               	movq	%rax, 56(%r13)
               	leaq	96(%r13), %rax
               	movq	%rax, 112(%r13)
               	movq	%rax, 120(%r13)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 240(%r13)
               	movups	%xmm0, 128(%r13)
               	movq	-64(%r12), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r13), %rdi
               	xorl	%esi, %esi
               	callq	0x413980 <pthread_mutex_init@plt>
               	movq	%r13, %rdi
               	addq	$184, %rdi
               	xorl	%esi, %esi
               	callq	0x413990 <pthread_cond_init@plt>
               	testq	%rbp, %rbp
               	je	0x438afe <Kotlin_initRuntimeIfNeeded+0x52e>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x438afe <Kotlin_initRuntimeIfNeeded+0x52e>
               	cmpl	$1, %eax
               	jne	0x438afe <Kotlin_initRuntimeIfNeeded+0x52e>
               	movb	166374(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438afe <Kotlin_initRuntimeIfNeeded+0x52e>
               	movq	%rbp, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	(%r13), %r8d
               	movslq	%r8d, %rax
               	movq	16(%rsp), %r9
               	movq	152(%r9), %rsi
               	movq	%rax, %rcx
               	orq	%rsi, %rcx
               	shrq	$32, %rcx
               	movq	%rax, 80(%rsp)
               	je	0x438b87 <Kotlin_initRuntimeIfNeeded+0x5b7>
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rbx
               	jmp	0x438b90 <Kotlin_initRuntimeIfNeeded+0x5c0>
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	16(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438b7f <Kotlin_initRuntimeIfNeeded+0x5af>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	xorl	%r13d, %r13d
               	testl	%ebp, %ebp
               	jne	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	cmpl	$1, %eax
               	jne	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	movb	166245(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438b7f <Kotlin_initRuntimeIfNeeded+0x5af>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%r13d, %r13d
               	jmp	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ebx
               	movq	40(%rsp), %r14
               	movq	144(%r9), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x438bfc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movq	(%rax), %rbp
               	cmpl	8(%rbp), %r8d
               	jne	0x438bc9 <Kotlin_initRuntimeIfNeeded+0x5f9>
               	testq	%rbp, %rbp
               	jne	0x438e19 <Kotlin_initRuntimeIfNeeded+0x849>
               	jmp	0x438bfc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	cmpq	%rbx, %rdx
               	jne	0x438bfc <Kotlin_initRuntimeIfNeeded+0x62c>
               	cmpl	%ecx, %r8d
               	je	0x438bf3 <Kotlin_initRuntimeIfNeeded+0x623>
               	movq	%rbp, %rdi
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438bfc <Kotlin_initRuntimeIfNeeded+0x62c>
               	movl	8(%rbp), %ecx
               	movslq	%ecx, %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x438bb9 <Kotlin_initRuntimeIfNeeded+0x5e9>
               	xorl	%edx, %edx
               	divq	%rsi
               	cmpq	%rbx, %rdx
               	je	0x438bc4 <Kotlin_initRuntimeIfNeeded+0x5f4>
               	jmp	0x438bfc <Kotlin_initRuntimeIfNeeded+0x62c>
               	testq	%rdi, %rdi
               	jne	0x438e19 <Kotlin_initRuntimeIfNeeded+0x849>
               	movq	%rbx, 72(%rsp)
               	movl	$1, %edi
               	movl	$24, %esi
               	movl	%r8d, %r14d
               	movq	%r9, %rbx
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbp
               	movl	%r14d, 32(%rsp)
               	movl	%r14d, 8(%rax)
               	leaq	176(%rbx), %rdi
               	movq	152(%rbx), %rsi
               	movq	168(%rbx), %rdx
               	movl	$1, %ecx
               	callq	0x43d20a <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x438c5b <Kotlin_initRuntimeIfNeeded+0x68b>
               	movq	16(%rsp), %r9
               	movq	144(%r9), %r12
               	movq	72(%rsp), %rbx
               	jmp	0x438d89 <Kotlin_initRuntimeIfNeeded+0x7b9>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	movq	%rbp, 64(%rsp)
               	je	0x439227 <Kotlin_initRuntimeIfNeeded+0xc57>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r12
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	movq	16(%rsp), %rax
               	movq	160(%rax), %rbp
               	movq	$0, 160(%rax)
               	testq	%rbp, %rbp
               	movl	32(%rsp), %r8d
               	je	0x438d29 <Kotlin_initRuntimeIfNeeded+0x759>
               	movq	16(%rsp), %rax
               	leaq	160(%rax), %rdi
               	xorl	%ebx, %ebx
               	jmp	0x438ce6 <Kotlin_initRuntimeIfNeeded+0x716>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%r12,%rdx,8), %rax
               	testq	%rax, %rax
               	je	0x438d10 <Kotlin_initRuntimeIfNeeded+0x740>
               	movq	(%rax), %rax
               	movq	%rax, (%rsi)
               	movq	(%r12,%rdx,8), %rax
               	movq	%rsi, (%rax)
               	movq	%rbx, %rdx
               	movq	%rdx, %rbx
               	testq	%rbp, %rbp
               	je	0x438d29 <Kotlin_initRuntimeIfNeeded+0x759>
               	movq	%rbp, %rsi
               	movq	(%rbp), %rbp
               	movl	8(%rsi), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x438cc0 <Kotlin_initRuntimeIfNeeded+0x6f0>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%r12,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x438cce <Kotlin_initRuntimeIfNeeded+0x6fe>
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	movq	%rsi, (%rdi)
               	movq	%rdi, (%r12,%rdx,8)
               	cmpq	$0, (%rsi)
               	je	0x438cde <Kotlin_initRuntimeIfNeeded+0x70e>
               	movq	%rsi, (%r12,%rbx,8)
               	jmp	0x438cde <Kotlin_initRuntimeIfNeeded+0x70e>
               	movq	16(%rsp), %r9
               	movq	144(%r9), %rdi
               	leaq	192(%r9), %rax
               	cmpq	%rdi, %rax
               	movq	64(%rsp), %rbp
               	je	0x438d56 <Kotlin_initRuntimeIfNeeded+0x786>
               	movq	%r9, %rbx
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %r9
               	movl	32(%rsp), %r8d
               	movq	%r14, 152(%r9)
               	movq	%r12, 144(%r9)
               	movq	80(%rsp), %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x438d7f <Kotlin_initRuntimeIfNeeded+0x7af>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	jmp	0x438d89 <Kotlin_initRuntimeIfNeeded+0x7b9>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%r12,%rbx,8), %rax
               	testq	%rax, %rax
               	movq	40(%rsp), %r14
               	je	0x438da7 <Kotlin_initRuntimeIfNeeded+0x7d7>
               	movq	(%rax), %rax
               	movq	%rax, (%rbp)
               	movq	(%r12,%rbx,8), %rax
               	movq	%rbp, (%rax)
               	jmp	0x438e02 <Kotlin_initRuntimeIfNeeded+0x832>
               	movq	%r9, %rsi
               	addq	$160, %rsi
               	movq	160(%r9), %rax
               	movq	%rax, (%rbp)
               	movq	%rbp, 160(%r9)
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	je	0x438dfe <Kotlin_initRuntimeIfNeeded+0x82e>
               	movq	152(%r9), %rdi
               	movl	8(%rax), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x438def <Kotlin_initRuntimeIfNeeded+0x81f>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x438df3 <Kotlin_initRuntimeIfNeeded+0x823>
               	xorl	%edx, %edx
               	divl	%edi
               	movq	%rbp, (%r12,%rdx,8)
               	movq	144(%r9), %r12
               	movq	%rsi, (%r12,%rbx,8)
               	movq	168(%r9), %rax
               	addq	$1, %rax
               	movq	%rax, 168(%r9)
               	movq	56(%rsp), %r12
               	movq	%r13, 16(%rbp)
               	movq	%r9, %rdi
               	movq	-64(%r12), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	cmpl	$1, %eax
               	jne	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	movb	165505(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438e63 <Kotlin_initRuntimeIfNeeded+0x893>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r12, %rax
               	movq	%r13, -40(%r12)
               	movq	(%r14), %rbp
               	movq	88(%rsp), %rbx
               	callq	0x413760 <pthread_self@plt>
               	movq	%rax, 240(%r13)
               	movq	%rbx, 248(%r13)
               	movq	%r13, 8(%r14)
               	movq	265652(%rip), %rbx      # 0x479c48 <(anonymous namespace)::initHeadNode>
               	testq	%rbx, %rbx
               	je	0x438eb3 <Kotlin_initRuntimeIfNeeded+0x8e3>
               	nopl	(%rax)
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	callq	*(%rbx)
               	movq	8(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x438ea0 <Kotlin_initRuntimeIfNeeded+0x8d0>
               	movq	(%r14), %rbp
               	movslq	156(%rbp), %rdx
               	leaq	80(%rbp), %r12
               	movq	80(%rbp), %r13
               	movq	72(%rbp), %rax
               	movq	%r13, %rbx
               	subq	%rax, %rbx
               	sarq	$3, %rbx
               	cmpq	%rdx, %rbx
               	jae	0x438f42 <Kotlin_initRuntimeIfNeeded+0x972>
               	movq	%rdx, %r14
               	subq	%rbx, %r14
               	je	0x439039 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	88(%rbp), %rax
               	subq	%r13, %rax
               	sarq	$3, %rax
               	cmpq	%r14, %rax
               	jae	0x438f56 <Kotlin_initRuntimeIfNeeded+0x986>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%rbx, %rcx
               	xorq	%rax, %rcx
               	cmpq	%r14, %rcx
               	jb	0x43929e <Kotlin_initRuntimeIfNeeded+0xcce>
               	movq	%rdx, 16(%rsp)
               	cmpq	%r14, %rbx
               	movq	%rbx, %rcx
               	cmovbq	%r14, %rcx
               	leaq	(%rcx,%rbx), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%rbx, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	je	0x438f7c <Kotlin_initRuntimeIfNeeded+0x9ac>
               	movl	$8, %esi
               	movq	%rdi, %r12
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x438f82 <Kotlin_initRuntimeIfNeeded+0x9b2>
               	jbe	0x439039 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(%rax,%rdx,8), %rax
               	cmpq	%r13, %rax
               	jne	0x438f73 <Kotlin_initRuntimeIfNeeded+0x9a3>
               	jmp	0x439039 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(,%r14,8), %rdx
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x413710 <memset@plt>
               	leaq	(,%r14,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%r12)
               	jmp	0x439039 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	%rdi, %r12
               	xorl	%r13d, %r13d
               	leaq	(,%rbx,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %r14
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x413710 <memset@plt>
               	movq	72(%rbp), %rdi
               	movq	80(%rbp), %rax
               	cmpq	%rax, %rdi
               	je	0x439005 <Kotlin_initRuntimeIfNeeded+0xa35>
               	movq	%rax, %rcx
               	subq	%rdi, %rcx
               	addq	$-8, %rcx
               	cmpq	$24, %rcx
               	jb	0x438fe1 <Kotlin_initRuntimeIfNeeded+0xa11>
               	shrq	$3, %rcx
               	addq	$1, %rcx
               	leaq	(%rdi,%rcx,8), %rdx
               	cmpq	%rdx, %r13
               	jae	0x43914d <Kotlin_initRuntimeIfNeeded+0xb7d>
               	leaq	(,%rcx,8), %rdx
               	addq	%r13, %rdx
               	cmpq	%rdx, %rdi
               	jae	0x43914d <Kotlin_initRuntimeIfNeeded+0xb7d>
               	movq	%r13, %rcx
               	subq	%rdi, %rax
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movq	(%rdi,%rdx), %rsi
               	movq	%rsi, (%rcx,%rdx)
               	addq	$8, %rdx
               	cmpq	%rdx, %rax
               	jne	0x438ff0 <Kotlin_initRuntimeIfNeeded+0xa20>
               	movq	72(%rbp), %rdi
               	leaq	88(%rbp), %rbx
               	testq	%rdi, %rdi
               	je	0x439013 <Kotlin_initRuntimeIfNeeded+0xa43>
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 72(%rbp)
               	movq	16(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%rbx)
               	movl	$1, 152(%rbp)
               	cmpb	$0, 15(%rsp)
               	movq	56(%rsp), %r12
               	movq	40(%rsp), %r14
               	movq	48(%rsp), %r13
               	je	0x439084 <Kotlin_initRuntimeIfNeeded+0xab4>
               	movq	265188(%rip), %rbp      # 0x479c48 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x4390b4 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r14), %rbx
               	movl	$1, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x439070 <Kotlin_initRuntimeIfNeeded+0xaa0>
               	movq	265149(%rip), %rbp      # 0x479c48 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x4390b4 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r14), %rbx
               	nopw	(%rax,%rax)
               	movl	$2, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x4390a0 <Kotlin_initRuntimeIfNeeded+0xad0>
               	movl	$1, 16(%r14)
               	testq	%r15, %r15
               	je	0x4390e6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movl	36(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ecx, %ecx
               	jne	0x4390e6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	cmpl	$1, %eax
               	jne	0x4390e6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movb	164862(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4390e6 <Kotlin_initRuntimeIfNeeded+0xb16>
               	movq	%r13, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-48(%r12), %rbp
               	leaq	265003(%rip), %rdi      # 0x479c20 <konan::terminationKeyOnceControl>
               	leaq	2884(%rip), %rsi        # 0x439c40 <konan::onThreadExitInit()>
               	callq	0x4139c0 <pthread_once@plt>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %rbx
               	leaq	598(%rip), %rax         # 0x439370 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>
               	movq	%rax, 8(%rbx)
               	movq	%rbp, 16(%rbx)
               	movl	264948(%rip), %edi      # 0x479c1c <konan::terminationKey>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movq	%rax, (%rbx)
               	movl	264934(%rip), %edi      # 0x479c1c <konan::terminationKey>
               	movq	%rbx, %rsi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rcx, %r8
               	andq	$-4, %r8
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x439172 <Kotlin_initRuntimeIfNeeded+0xba2>
               	xorl	%edx, %edx
               	jmp	0x4391dc <Kotlin_initRuntimeIfNeeded+0xc0c>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edx, %edx
               	movups	(%rdi,%rdx,8), %xmm0
               	movups	16(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, (%r13,%rdx,8)
               	movups	%xmm1, 16(%r13,%rdx,8)
               	movups	32(%rdi,%rdx,8), %xmm0
               	movups	48(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 32(%r13,%rdx,8)
               	movups	%xmm1, 48(%r13,%rdx,8)
               	movups	64(%rdi,%rdx,8), %xmm0
               	movups	80(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 64(%r13,%rdx,8)
               	movups	%xmm1, 80(%r13,%rdx,8)
               	movups	96(%rdi,%rdx,8), %xmm0
               	movups	112(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 96(%r13,%rdx,8)
               	movups	%xmm1, 112(%r13,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rsi
               	jne	0x43917b <Kotlin_initRuntimeIfNeeded+0xbab>
               	testq	%rbx, %rbx
               	je	0x43920a <Kotlin_initRuntimeIfNeeded+0xc3a>
               	leaq	16(,%rdx,8), %rdx
               	negq	%rbx
               	movups	-16(%rdi,%rdx), %xmm0
               	movups	(%rdi,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rbx
               	jne	0x4391ec <Kotlin_initRuntimeIfNeeded+0xc1c>
               	cmpq	%r8, %rcx
               	je	0x439001 <Kotlin_initRuntimeIfNeeded+0xa31>
               	leaq	(,%r8,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rdi,%r8,8), %rdi
               	jmp	0x438fe4 <Kotlin_initRuntimeIfNeeded+0xa14>
               	movq	16(%rsp), %rax
               	leaq	192(%rax), %r12
               	movq	$0, 192(%rax)
               	jmp	0x438c8f <Kotlin_initRuntimeIfNeeded+0x6bf>
               	leaq	264718(%rip), %rdi      # 0x479c58 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c2d1 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x438609 <Kotlin_initRuntimeIfNeeded+0x39>
               	leaq	3346(%rip), %rdi        # 0x439f70 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43c40a <std::set_terminate(void (*)())>
               	movq	%rax, 264694(%rip)      # 0x479c60 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	264679(%rip), %rdi      # 0x479c58 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c3c0 <__cxa_guard_release>
               	jmp	0x438609 <Kotlin_initRuntimeIfNeeded+0x39>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	leaq	48340(%rip), %rdx       # 0x444f62 <typeinfo name for kotlin::gc::GCSchedulerData+0x1969>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	leaq	48291(%rip), %rdi       # 0x444f48 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x4362d0 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	testq	%r15, %r15
               	je	0x4392c2 <Kotlin_initRuntimeIfNeeded+0xcf2>
               	movq	%r15, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	-64(%r12), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r14)
               	movq	16(%rsp), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r14, %r14
               	je	0x43932d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x43932d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	cmpl	$1, %eax
               	jne	0x43932d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movb	164301(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43932d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43932d <Kotlin_initRuntimeIfNeeded+0xd5d>
               	movq	%rax, %rbp
               	jmp	0x439332 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	jmp	0x43932a <Kotlin_initRuntimeIfNeeded+0xd5a>
               	jmp	0x43932a <Kotlin_initRuntimeIfNeeded+0xd5a>
               	movq	%rax, %rbp
               	testq	%r15, %r15
               	jne	0x43933a <Kotlin_initRuntimeIfNeeded+0xd6a>
               	movq	%rbp, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	movl	36(%rsp), %edx
               	movl	%edx, %eax
               	movq	48(%rsp), %rcx
               	xchgl	%eax, (%rcx)
               	testl	%edx, %edx
               	jne	0x439332 <Kotlin_initRuntimeIfNeeded+0xd62>
               	cmpl	$1, %eax
               	jne	0x439332 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movb	164226(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439332 <Kotlin_initRuntimeIfNeeded+0xd62>
               	movq	48(%rsp), %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x4393a7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	movb	164161(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4393a7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$2, 16(%rbx)
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	%rbx, -48(%rax)
               	lock
               	addl	$-1, 264312(%rip)       # 0x479c44 <(anonymous namespace)::aliveRuntimesCount>
               	movq	(%rbx), %rax
               	movq	72(%rax), %rcx
               	cmpq	%rcx, 80(%rax)
               	je	0x4393dd <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6d>
               	movq	%rcx, 80(%rax)
               	movl	$2, 152(%rax)
               	movq	%rbx, 16(%rsp)
               	movq	8(%rbx), %rbx
               	movl	(%rbx), %eax
               	movl	%eax, 12(%rsp)
               	movq	$0, -40(%r12)
               	callq	0x4382d0 <(anonymous namespace)::theState()>
               	movq	%rax, %r13
               	movq	%rbx, (%rsp)
               	movq	248(%rbx), %r15
               	leaq	328(%r15), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439455 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x439455 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	cmpl	$1, %eax
               	jne	0x439455 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movb	163983(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439455 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movl	(%rax), %esi
               	movslq	%esi, %rax
               	movq	152(%r13), %rcx
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x43948e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x11e>
               	xorl	%edx, %edx
               	divq	%rcx
               	movq	%rdx, %r9
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	jne	0x4394ab <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x13b>
               	jmp	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %r9d
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	je	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movq	(%r10), %rdi
               	cmpl	8(%rdi), %esi
               	jne	0x4394c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rdi, %rdi
               	jne	0x43950c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19c>
               	jmp	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	nopl	(%rax)
               	movq	%rdi, %rbp
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	8(%rdi), %ebx
               	movslq	%ebx, %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x4394f0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x180>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	je	0x4394ff <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x18f>
               	jmp	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	jne	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	cmpl	%ebx, %esi
               	jne	0x4394c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rbp, %rbp
               	je	0x4395d3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
               	movq	%r10, %rax
               	nop
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rdi, %rax
               	jne	0x439510 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1a0>
               	cmpq	%rsi, %r10
               	je	0x43954d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1dd>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x4395b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movl	8(%rax), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x439576 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x206>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43957f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20f>
               	jmp	0x4395b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43959d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x22d>
               	movl	8(%rbx), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x439585 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43958e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x21e>
               	jmp	0x4395b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x4395b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x4395b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x4395b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
               	movq	%r10, (%r8,%rdx,8)
               	movq	144(%r13), %r8
               	movq	(%r8,%r9,8), %r10
               	movq	%r13, %rax
               	addq	$160, %rax
               	cmpq	%r10, %rax
               	jne	0x4395ae <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x23e>
               	movq	%rbx, (%r10)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	callq	0x4136d0 <free@plt>
               	movq	168(%r13), %rax
               	addq	$-1, %rax
               	movq	%rax, 168(%r13)
               	testq	%r15, %r15
               	movq	%r12, 24(%rsp)
               	je	0x4395ef <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x27f>
               	movl	$1, %ebx
               	xchgl	%ebx, (%r14)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	jmp	0x439610 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2a0>
               	movq	-64(%r12), %r15
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%r13, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r15, %r15
               	je	0x43963b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	movl	%ebx, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebx, %ebx
               	jne	0x43963b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	cmpl	$1, %eax
               	jne	0x43963b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	movb	163504(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43963b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movq	24(%rax), %rbp
               	movq	56(%rax), %r13
               	cmpq	%rbp, %r13
               	je	0x439735 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movq	(%rsp), %rax
               	movq	48(%rax), %r12
               	movq	40(%rax), %r14
               	leaq	39645(%rip), %rbx       # 0x443140 <_IO_stdin_used+0x240>
               	jmp	0x439695 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	nopl	(%rax,%rax)
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rsi
               	movq	%rax, %rdi
               	callq	0x439cc0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	addq	$40, %rbp
               	cmpq	%r14, %rbp
               	je	0x4396f0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
               	cmpq	%rbp, %r13
               	je	0x439735 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movl	(%rbp), %ecx
               	cmpl	$3, %ecx
               	ja	0x439683 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	8(%rbp), %rax
               	movslq	(%rbx,%rcx,4), %rcx
               	addq	%rbx, %rcx
               	jmpq	*%rcx
               	movq	%r12, 32(%rsp)
               	movq	%rbx, %r15
               	movq	24(%rbp), %rbx
               	movq	16(%rbp), %rsi
               	testq	%rsi, %rsi
               	movq	(%rsp), %r12
               	je	0x4396d4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x364>
               	movq	248(%r12), %rdi
               	addq	$8, %rdi
               	callq	0x4245d0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r12), %rsi
               	movq	%rbx, %rdi
               	callq	0x439cc0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	movq	%r15, %rbx
               	movq	32(%rsp), %r12
               	jmp	0x439683 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	nop
               	movq	8(%r12), %rbp
               	addq	$8, %r12
               	leaq	480(%rbp), %r14
               	cmpq	%rbp, %r13
               	jne	0x439695 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	jmp	0x439735 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	nop
               	testq	%rax, %rax
               	je	0x439683 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rdi
               	addq	$8, %rdi
               	movq	%rax, %rsi
               	callq	0x4245d0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439683 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %r14
               	movq	112(%r14), %rbx
               	leaq	96(%r14), %rbp
               	cmpq	%rbp, %rbx
               	movl	12(%rsp), %r13d
               	movq	16(%rsp), %r15
               	jne	0x439954 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5e4>
               	movq	136(%r14), %rsi
               	testq	%rsi, %rsi
               	je	0x439770 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x400>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4245d0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	144(%r14), %rdi
               	callq	0x4139a0 <pthread_mutex_destroy@plt>
               	leaq	184(%r14), %rdi
               	callq	0x4139b0 <pthread_cond_destroy@plt>
               	testq	%rbx, %rbx
               	movq	24(%rsp), %r12
               	je	0x4397ca <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x4397ca <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	cmpl	$1, %eax
               	jne	0x4397ca <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	movb	163098(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4397ca <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	104(%r14), %rdi
               	callq	0x439f30 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	8(%r14), %rdi
               	testq	%rdi, %rdi
               	je	0x43981b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4ab>
               	movq	48(%r14), %rbx
               	movq	80(%r14), %rbp
               	leaq	8(%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x439816 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4a6>
               	addq	$-8, %rbx
               	nopl	(%rax)
               	movq	8(%rbx), %rdi
               	addq	$8, %rbx
               	callq	0x4136d0 <free@plt>
               	cmpq	%rbp, %rbx
               	jb	0x439800 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x490>
               	movq	8(%r14), %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	(%r15), %rax
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	(%r15), %rbx
               	movl	263138(%rip), %edi      # 0x479c1c <konan::terminationKey>
               	testl	%edi, %edi
               	je	0x439848 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4d8>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	testq	%rax, %rax
               	je	0x439857 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4e7>
               	movq	%r12, %rax
               	movq	$0, -64(%r12)
               	cmpq	$0, 149337(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x439875 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x505>
               	leaq	158776(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439c2a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x8ba>
               	movq	158740(%rip), %rax      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	%rbx, 158741(%rip)      # 0x460498 <kotlin::mm::GlobalData::instance_+0x20>
               	je	0x43996f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5ff>
               	cmpq	%rbx, %rax
               	je	0x439986 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x616>
               	movq	360(%rbx), %rbp
               	movq	352(%rbp), %r14
               	movq	$0, 352(%rbp)
               	movq	352(%rbx), %rax
               	movq	$0, 352(%rbx)
               	movq	352(%rbp), %rbx
               	movq	%rax, 352(%rbp)
               	testq	%rbx, %rbx
               	je	0x439914 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5a4>
               	movq	352(%rbx), %r15
               	testq	%r15, %r15
               	je	0x4398ec <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x57c>
               	movq	%r15, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424080 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	352(%rbp), %rax
               	movq	16(%rsp), %r15
               	testq	%rax, %rax
               	je	0x439920 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5b0>
               	movq	%rbp, 360(%rax)
               	testq	%r14, %r14
               	je	0x4399f3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	movq	%r14, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	jmp	0x4399f3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	nop
               	movq	%rbx, %rdi
               	callq	0x43c7f1 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
               	movq	%rax, %rbx
               	cmpq	%rbp, %rax
               	je	0x439754 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3e4>
               	movq	40(%rbx), %rsi
               	testq	%rsi, %rsi
               	je	0x439940 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d0>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4245d0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x439940 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d0>
               	movq	360(%rbx), %rcx
               	movq	%rcx, 158491(%rip)      # 0x460498 <kotlin::mm::GlobalData::instance_+0x20>
               	cmpq	%rbx, %rax
               	jne	0x439892 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x522>
               	movq	352(%rbx), %rcx
               	movq	$0, 352(%rbx)
               	movq	%rcx, 158449(%rip)      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rax, %rax
               	je	0x4399e3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x673>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x4399c0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x650>
               	movq	%rbp, %rdi
               	callq	0x424030 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x424080 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	158381(%rip), %rcx      # 0x460490 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x4399f3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
               	movq	$0, 360(%rcx)
               	movslq	%r13d, %rbp
               	cmpq	$0, 148922(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x439a0c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x69c>
               	leaq	158361(%rip), %rdi      # 0x4604a0 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	callq	0x4382d0 <(anonymous namespace)::theState()>
               	movq	%rax, %r14
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	movq	208(%r14), %rdi
               	movq	%rbp, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x439a57 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6e7>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	200(%r14), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x439a74 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x704>
               	jmp	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	200(%r14), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movq	(%rax), %rbx
               	cmpl	%r13d, 8(%rbx)
               	jne	0x439a90 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
               	testq	%rbx, %rbx
               	jne	0x439add <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x76d>
               	jmp	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	nop
               	movq	%rbx, %rbp
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	8(%rbx), %esi
               	movslq	%esi, %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439ac0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x750>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x439acf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x75f>
               	jmp	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	cmpl	%r13d, %esi
               	jne	0x439a90 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
               	testq	%rbp, %rbp
               	je	0x439bf7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
               	movq	16(%rbx), %rdi
               	callq	0x4139e0 <pthread_detach@plt>
               	movq	208(%r14), %rdi
               	movl	8(%rbx), %eax
               	movslq	%eax, %rcx
               	movq	%rcx, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439b0c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x79c>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r9
               	jmp	0x439b13 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7a3>
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r9d
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rbx, %rax
               	jne	0x439b30 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7c0>
               	cmpq	%rsi, %rcx
               	je	0x439b6d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7fd>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x439bd7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movl	8(%rax), %eax
               	movslq	%eax, %rdx
               	movq	%rdx, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x439b97 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x827>
               	movq	%rdx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x439ba0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x830>
               	jmp	0x439bd7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	(%rbx), %r10
               	testq	%r10, %r10
               	je	0x439bbe <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x84e>
               	movl	8(%r10), %eax
               	movslq	%eax, %rbp
               	movq	%rbp, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x439ba6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x836>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x439baf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x83f>
               	jmp	0x439bd7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x439bd7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x439bd7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x439bd7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
               	movq	%rcx, (%r8,%rdx,8)
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%r14, %rax
               	addq	$216, %rax
               	cmpq	%rcx, %rax
               	jne	0x439bcf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x85f>
               	movq	%r10, (%rcx)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rbx), %rax
               	movq	%rax, (%rsi)
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	224(%r14), %rax
               	addq	$-1, %rax
               	movq	%rax, 224(%r14)
               	movq	%r14, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	$0, -48(%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	45916(%rip), %rdx       # 0x444f7d <typeinfo name for kotlin::gc::GCSchedulerData+0x1984>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x435980 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax)

<konan::onThreadExitInit()>:
               	pushq	%rax
               	leaq	262152(%rip), %rdi      # 0x479c50 <konan::dummyKey>
               	xorl	%esi, %esi
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	262086(%rip), %rdi      # 0x479c1c <konan::terminationKey>
               	leaq	19(%rip), %rsi          # 0x439c70 <konan::onThreadExitCallback(void*)>
               	popq	%rax
               	jmp	0x4137e0 <pthread_key_create@plt>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitCallback(void*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	262047(%rip), %edi      # 0x479c1c <konan::terminationKey>
               	xorl	%esi, %esi
               	callq	0x4137f0 <pthread_setspecific@plt>
               	testq	%rbx, %rbx
               	je	0x439caa <konan::onThreadExitCallback(void*)+0x3a>
               	nopl	(%rax)
               	movq	16(%rbx), %rdi
               	callq	*8(%rbx)
               	movq	(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x439c90 <konan::onThreadExitCallback(void*)+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	leaq	328(%rsi), %r14
               	movl	$1, %ebp
               	movl	$1, %eax
               	xchgl	%eax, 328(%rsi)
               	movl	%eax, 4(%rsp)
               	leaq	16(%rdi), %r12
               	movl	$1, %r13d
               	xchgl	%r13d, 328(%rsi)
               	movq	%r12, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439d63 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xa3>
               	movl	%r13d, %eax
               	xchgl	%eax, (%r14)
               	testl	%r13d, %r13d
               	jne	0x439d2c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	cmpl	$1, %eax
               	jne	0x439d2c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movb	161720(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439d2c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x439db6 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xf6>
               	jmp	0x439dcd <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x439e3f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x17f>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x439dcd <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	cmpl	$1, %eax
               	jne	0x439dcd <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movb	161559(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439dcd <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x4382d0 <(anonymous namespace)::theState()>
               	movq	%rax, %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x439e5b <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x19b>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x439e0e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	cmpl	$1, %eax
               	jne	0x439e0e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movb	161494(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439e0e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	264(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 264(%rbx)
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	%r14, %r12
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	je	0x439ea8 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1e8>
               	jmp	0x439ebf <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	callq	0x4382d0 <(anonymous namespace)::theState()>
               	movq	%rax, %rbx
               	movl	$1, %eax
               	xchgl	%eax, 328
               	movq	%rbx, %rdi
               	callq	0x413730 <pthread_mutex_lock@plt>
               	movl	264(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 264(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r12)
               	movq	%rbx, %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testq	%r12, %r12
               	je	0x439efb <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x23b>
               	addq	$328, %r12              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x439ebf <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	cmpl	$1, %eax
               	jne	0x439ebf <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	movb	161317(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439ebf <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
               	movq	%r12, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$40, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	testq	%r15, %r15
               	je	0x439eec <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	movl	4(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ecx, %ecx
               	jne	0x439eec <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	cmpl	$1, %eax
               	jne	0x439eec <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x22c>
               	movb	161264(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x439f15 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x255>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$40, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4139f0 <pthread_cond_broadcast@plt>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax,%rax)

<std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x439f5d <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x2d>
               	movq	%rdi, %rbx
               	movq	24(%rbx), %rdi
               	callq	0x439f30 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	16(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x439f40 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x10>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::kotlinHandler()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rdi
               	callq	0x43be2d <std::current_exception()>
               	cmpq	$0, 8(%rsp)
               	jne	0x439fb7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x47>
               	leaq	8(%rsp), %rdi
               	callq	0x43bdaa <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x439fd1 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x61>
               	xorl	%ebx, %ebx
               	jmp	0x439fd7 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x67>
               	leaq	16(%rsp), %rbx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43bd6c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbx, %rdi
               	callq	0x43be82 <std::rethrow_exception(std::__exception_ptr::exception_ptr)>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43a270 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a00e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a00e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	cmpl	$1, %eax
               	jne	0x43a00e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movb	160989(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a00e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	movq	%rdx, %r15
               	movq	%rax, %rbx
               	leaq	16(%rsp), %rdi
               	callq	0x43bdaa <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%rbx, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	cmpl	$2, %r15d
               	jne	0x43a08e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x11e>
               	movq	%rax, %r14
               	callq	0x4385d0 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	xorl	%ebx, %ebx
               	xchgl	%ebx, 328(%r15)
               	addq	$328, %r15              # imm = 0x148
               	cmpl	$1, %ebx
               	jne	0x43a076 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movb	160878(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a076 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43a130 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43a260 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x43a0af <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x13f>
               	xorl	%ebx, %ebx
               	jmp	0x43a0b5 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x145>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43a270 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	160767(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	jmp	0x43a107 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x197>
               	movq	%rax, %r14
               	movl	%ebx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebx, %ebx
               	jne	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	160728(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a10c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x43c135 <__cxa_end_catch>
               	leaq	8(%rsp), %rdi
               	callq	0x43bdaa <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::processUnhandledException(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	160588(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a195 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x65>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	155845(%rip), %eax      # 0x460260 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	cmpl	$2, %eax
               	je	0x43a1b3 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x83>
               	leaq	155833(%rip), %rdi      # 0x460260 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	leaq	-130734(%rip), %rsi     # 0x41a300 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>
               	callq	0x43a480 <CallInitGlobalPossiblyLock>
               	movq	155774(%rip), %rax      # 0x460238 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	%rdi, 32(%rsp)
               	testq	%rdi, %rdi
               	je	0x43a213 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0xe3>
               	leaq	40(%rsp), %rdx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$44, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rbx, %rdi
               	callq	0x43a6a0 <ThrowException>
               	movq	%rax, %rbx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$2, %edx
               	jne	0x43a255 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x125>
               	movq	%rbx, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rdi
               	callq	0x43a260 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%rax, %rbx
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x423180 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>:
               	pushq	%rax
               	callq	0x43a3a0 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()>:
               	pushq	%rax
               	callq	0x43a280 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>
               	nopw	%cs:(%rax,%rax)

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 155389(%rip)      # 0x460194 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43a29e <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1e>
               	callq	0x43a350 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
               	movq	$0, 16(%rsp)
               	movl	$1, 24(%rsp)
               	movb	$0, 28(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43a2d0 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x50>
               	xorl	%ebx, %ebx
               	jmp	0x43a2e9 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x69>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rbx, 16(%rsp)
               	movl	%ebp, 24(%rsp)
               	movb	$1, 28(%rsp)
               	movl	155297(%rip), %edi      # 0x460190 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a00 <sleep@plt>
               	leaq	8(%rsp), %rdi
               	callq	0x436350 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a10 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a33a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a33a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	cmpl	$1, %eax
               	jne	0x43a33a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	movb	160177(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a33a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0xba>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>:
               	pushq	%rax
               	callq	0x43a360 <(anonymous namespace)::TerminateHandler::instance()>
               	callq	*260356(%rip)           # 0x479c60 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	nopl	(%rax)

<(anonymous namespace)::TerminateHandler::instance()>:
               	pushq	%rax
               	movb	260337(%rip), %al       # 0x479c58 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x43a36d <(anonymous namespace)::TerminateHandler::instance()+0xd>
               	popq	%rax
               	retq
               	leaq	260324(%rip), %rdi      # 0x479c58 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c2d1 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43a36b <(anonymous namespace)::TerminateHandler::instance()+0xb>
               	leaq	-1044(%rip), %rdi       # 0x439f70 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43c40a <std::set_terminate(void (*)())>
               	movq	%rax, 260304(%rip)      # 0x479c60 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	260289(%rip), %rdi      # 0x479c58 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43c3c0 <__cxa_guard_release>
               	popq	%rax
               	retq
               	nop

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 155096(%rip)      # 0x460194 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43a3c8 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x28>
               	leaq	24(%rsp), %rdi
               	callq	0x43a470 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
               	movq	$0, 8(%rsp)
               	movl	$1, 16(%rsp)
               	movb	$0, 20(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43a3fa <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x5a>
               	xorl	%ebx, %ebx
               	jmp	0x43a413 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x73>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rbx, 8(%rsp)
               	movl	%ebp, 16(%rsp)
               	movb	$1, 20(%rsp)
               	movl	154999(%rip), %edi      # 0x460190 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a00 <sleep@plt>
               	movq	%rsp, %rdi
               	callq	0x436350 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a10 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43a462 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43a462 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	cmpl	$1, %eax
               	jne	0x43a462 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	movb	159881(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a462 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0xc2>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>:
               	pushq	%rax
               	movq	(%rdi), %rdi
               	callq	0x41a250 <ReportUnhandledException>
               	callq	0x435ab0 <konan::abort()>
               	nop

<CallInitGlobalPossiblyLock>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	(%rdi), %ebp
               	cmpl	$2, %ebp
               	je	0x43a562 <CallInitGlobalPossiblyLock+0xe2>
               	cmpl	$3, %ebp
               	je	0x43a567 <CallInitGlobalPossiblyLock+0xe7>
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	callq	0x4358a0 <konan::gettid()>
               	movl	%ebp, %ecx
               	andl	$3, %ecx
               	cmpl	$1, %ecx
               	jne	0x43a4ee <CallInitGlobalPossiblyLock+0x6e>
               	andl	$-4, %ebp
               	shll	$2, %eax
               	cmpl	%eax, %ebp
               	je	0x43a562 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a4e0 <CallInitGlobalPossiblyLock+0x60>
               	jmp	0x43a53c <CallInitGlobalPossiblyLock+0xbc>
               	leal	1(,%rax,4), %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	jne	0x43a508 <CallInitGlobalPossiblyLock+0x88>
               	callq	*%r14
               	movl	$2, (%rbx)
               	jmp	0x43a562 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	nopl	(%rax)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43a530 <CallInitGlobalPossiblyLock+0xb0>
               	testq	%rcx, %rcx
               	je	0x43a55d <CallInitGlobalPossiblyLock+0xdd>
               	movl	%eax, %ecx
               	xchgl	%ecx, (%rdi)
               	testl	%eax, %eax
               	jne	0x43a55d <CallInitGlobalPossiblyLock+0xdd>
               	cmpl	$1, %ecx
               	jne	0x43a55d <CallInitGlobalPossiblyLock+0xdd>
               	movb	159620(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a55d <CallInitGlobalPossiblyLock+0xdd>
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	cmpl	$3, %ebp
               	je	0x43a567 <CallInitGlobalPossiblyLock+0xe7>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a180 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43c274 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<CallInitThreadLocal>:
               	pushq	%rbx
               	cmpl	$3, (%rdi)
               	je	0x43a5a3 <CallInitThreadLocal+0x13>
               	movq	%rdi, %rbx
               	movl	$2, (%rdi)
               	callq	*%rsi
               	popq	%rbx
               	retq
               	callq	0x41a180 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43c274 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<Kotlin_Long_toStringRadix>:
               	subq	$72, %rsp
               	testq	%rdi, %rdi
               	je	0x43a673 <Kotlin_Long_toStringRadix+0xa3>
               	negq	%rdi
               	xorl	%r10d, %r10d
               	movl	$48, %r8d
               	movabsq	$4294967296, %r9        # imm = 0x100000000
               	xorl	%r11d, %r11d
               	nopw	%cs:(%rax,%rax)
               	leaq	15(%rdi), %rdx
               	testq	%rdi, %rdi
               	cmovnsq	%rdi, %rdx
               	sarq	$4, %rdx
               	movl	%edx, %eax
               	shll	$4, %eax
               	subl	%edi, %eax
               	cmpl	$10, %eax
               	movl	$87, %ecx
               	cmovbl	%r8d, %ecx
               	addb	%al, %cl
               	movb	%cl, (%rsp,%r11)
               	addq	$1, %r11
               	addq	%r9, %r10
               	cmpq	$-15, %rdi
               	movq	%rdx, %rdi
               	jl	0x43a600 <Kotlin_Long_toStringRadix+0x30>
               	cmpl	$1, %r11d
               	jle	0x43a683 <Kotlin_Long_toStringRadix+0xb3>
               	movl	%r11d, %r10d
               	leaq	-2(%r10), %rcx
               	xorl	%edx, %edx
               	nop
               	movzbl	(%rsp,%rdx), %edi
               	movzbl	1(%rsp,%rcx), %eax
               	movb	%al, (%rsp,%rdx)
               	movb	%dil, 1(%rsp,%rcx)
               	addq	$1, %rdx
               	leaq	-1(%rcx), %rax
               	cmpq	%rcx, %rdx
               	movq	%rax, %rcx
               	jl	0x43a650 <Kotlin_Long_toStringRadix+0x80>
               	jmp	0x43a687 <Kotlin_Long_toStringRadix+0xb7>
               	leaq	43313(%rip), %rdi       # 0x444fab <typeinfo name for kotlin::gc::GCSchedulerData+0x19b2>
               	addq	$72, %rsp
               	jmp	0x436800 <CreateStringFromCString>
               	sarq	$32, %r10
               	movb	$0, (%rsp,%r10)
               	movq	%rsp, %rdi
               	callq	0x436800 <CreateStringFromCString>
               	addq	$72, %rsp
               	retq
               	nopl	(%rax)

<ThrowException>:
               	pushq	%rax
               	callq	0x424690 <ExceptionObjHolder::Throw(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_terminateWithUnhandledException>:
               	pushq	%rax
               	callq	0x43a260 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_Any_equals>:
               	cmpq	%rsi, %rdi
               	sete	%al
               	retq
               	nopw	(%rax,%rax)

<Kotlin_getCurrentStackTrace>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbp
               	movq	-64(%rax), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rsp, %r12
               	movq	%r12, %rdi
               	callq	0x435ac0 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>
               	movq	(%rsp), %r14
               	movq	$0, (%rsp)
               	movq	8(%rsp), %r15
               	testq	%r13, %r13
               	je	0x43a74e <Kotlin_getCurrentStackTrace+0x7e>
               	addq	$328, %r13              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ebx, %ebx
               	jne	0x43a74e <Kotlin_getCurrentStackTrace+0x7e>
               	cmpl	$1, %eax
               	jne	0x43a74e <Kotlin_getCurrentStackTrace+0x7e>
               	movb	159126(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a74e <Kotlin_getCurrentStackTrace+0x7e>
               	movq	%r13, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 24(%rsp)
               	movq	%rbp, %r13
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	subq	%r14, %r15
               	movq	%r15, %rbp
               	sarq	$3, %rbp
               	testl	%ebp, %ebp
               	js	0x43a877 <Kotlin_getCurrentStackTrace+0x1a7>
               	movq	296(%rax), %rdi
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%r15, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	120486(%rip), %rax      # 0x457e80 <ktypeglobal:kotlin.native.internal.NativePtrArray#internal>
               	movq	%rax, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%r12, 24(%rsp)
               	testq	%r15, %r15
               	je	0x43a835 <Kotlin_getCurrentStackTrace+0x165>
               	cmpq	$1, %rbp
               	movl	$1, %esi
               	cmovaq	%rbp, %rsi
               	movl	24(%rcx), %edi
               	xorl	%ebp, %ebp
               	movabsq	$4294967296, %r8        # imm = 0x100000000
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	cmpq	%rbx, %rdi
               	je	0x43a872 <Kotlin_getCurrentStackTrace+0x1a2>
               	movq	(%r14,%rbx,8), %rax
               	movq	16(%rcx), %rdx
               	movq	%rbp, %rdx
               	sarq	$29, %rdx
               	movq	%rax, 32(%rcx,%rdx)
               	addq	$1, %rbx
               	addq	%r8, %rbp
               	cmpq	%rbx, %rsi
               	jne	0x43a810 <Kotlin_getCurrentStackTrace+0x140>
               	movq	32(%rsp), %rax
               	movq	%r12, (%rax)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a860 <Kotlin_getCurrentStackTrace+0x190>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419cd0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	jmp	0x43a87e <Kotlin_getCurrentStackTrace+0x1ae>
               	movq	%rax, %r15
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43a8a4 <Kotlin_getCurrentStackTrace+0x1d4>
               	movq	%r14, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax)

<Kotlin_io_Console_print>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	leaq	117569(%rip), %rcx      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, (%rax)
               	jne	0x43ab2f <Kotlin_io_Console_print+0x27f>
               	leaq	24(%rsp), %r13
               	movq	%r13, 8(%rsp)
               	movq	$0, 16(%rsp)
               	movb	$0, 24(%rsp)
               	movl	8(%r14), %ebp
               	movq	16(%rsp), %r12
               	cmpq	%rbp, %r12
               	cmovaq	%r12, %rbp
               	movq	8(%rsp), %r15
               	cmpq	%r13, %r15
               	movl	$15, %eax
               	cmovneq	24(%rsp), %rax
               	cmpq	%rax, %rbp
               	je	0x43a9ba <Kotlin_io_Console_print+0x10a>
               	cmpq	$15, %rbp
               	ja	0x43a94f <Kotlin_io_Console_print+0x9f>
               	cmpq	%rax, %rbp
               	ja	0x43a94f <Kotlin_io_Console_print+0x9f>
               	cmpq	%r13, %r15
               	je	0x43a9ba <Kotlin_io_Console_print+0x10a>
               	cmpq	$-1, %r12
               	je	0x43aa94 <Kotlin_io_Console_print+0x1e4>
               	testq	%r12, %r12
               	jne	0x43aa82 <Kotlin_io_Console_print+0x1d2>
               	movb	(%r15), %al
               	movb	%al, 24(%rsp)
               	jmp	0x43aa94 <Kotlin_io_Console_print+0x1e4>
               	testq	%rbp, %rbp
               	js	0x43ab3e <Kotlin_io_Console_print+0x28e>
               	movq	%r13, %rbx
               	cmpq	%rax, %rbp
               	jbe	0x43a979 <Kotlin_io_Console_print+0xc9>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x43a979 <Kotlin_io_Console_print+0xc9>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x4136c0 <calloc@plt>
               	movq	%rax, %r13
               	cmpq	$-1, %r12
               	je	0x43a9a0 <Kotlin_io_Console_print+0xf0>
               	testq	%r12, %r12
               	jne	0x43aa62 <Kotlin_io_Console_print+0x1b2>
               	movb	(%r15), %al
               	movb	%al, (%r13)
               	cmpq	%rbx, %r15
               	je	0x43a9ad <Kotlin_io_Console_print+0xfd>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 8(%rsp)
               	movq	%rbp, 24(%rsp)
               	movq	%rbx, %r13
               	movl	8(%r14), %eax
               	movq	%rax, %rcx
               	addq	%rax, %rcx
               	je	0x43aab1 <Kotlin_io_Console_print+0x201>
               	addq	$16, %r14
               	leaq	(%r14,%rax,2), %rbp
               	leaq	8(%rsp), %r15
               	jmp	0x43a9f9 <Kotlin_io_Console_print+0x149>
               	nopl	(%rax)
               	movl	$65533, %edi            # imm = 0xFFFD
               	movq	%r15, %rsi
               	callq	0x436ca0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%rbx, %r14
               	cmpq	%rbp, %rbx
               	je	0x43aab1 <Kotlin_io_Console_print+0x201>
               	leaq	2(%r14), %rbx
               	movzwl	(%r14), %eax
               	movl	%eax, %ecx
               	andl	$64512, %ecx            # imm = 0xFC00
               	cmpl	$55296, %ecx            # imm = 0xD800
               	jne	0x43aa40 <Kotlin_io_Console_print+0x190>
               	cmpq	%rbp, %rbx
               	je	0x43aa51 <Kotlin_io_Console_print+0x1a1>
               	movzwl	2(%r14), %ecx
               	movl	%ecx, %edx
               	andl	$64512, %edx            # imm = 0xFC00
               	cmpl	$56320, %edx            # imm = 0xDC00
               	jne	0x43a9e0 <Kotlin_io_Console_print+0x130>
               	shll	$10, %eax
               	addq	$4, %r14
               	leal	(%rax,%rcx), %edi
               	addl	$4238353408, %edi       # imm = 0xFCA02400
               	movq	%r14, %rbx
               	jmp	0x43a9e5 <Kotlin_io_Console_print+0x135>
               	movl	$65533, %edi            # imm = 0xFFFD
               	cmpl	$56320, %ecx            # imm = 0xDC00
               	je	0x43a9e5 <Kotlin_io_Console_print+0x135>
               	movl	%eax, %edi
               	jmp	0x43a9e5 <Kotlin_io_Console_print+0x135>
               	leaq	8(%rsp), %rsi
               	movl	$65533, %edi            # imm = 0xFFFD
               	callq	0x436ca0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	jmp	0x43aab1 <Kotlin_io_Console_print+0x201>
               	addq	$1, %r12
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	cmpq	%rbx, %r15
               	jne	0x43a9a5 <Kotlin_io_Console_print+0xf5>
               	jmp	0x43a9ad <Kotlin_io_Console_print+0xfd>
               	addq	$1, %r12
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x4136f0 <memcpy@plt>
               	movq	%r15, %rdi
               	callq	0x4136d0 <free@plt>
               	movq	%r13, 8(%rsp)
               	movl	8(%r14), %eax
               	movq	%rax, %rcx
               	addq	%rax, %rcx
               	jne	0x43a9ca <Kotlin_io_Console_print+0x11a>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	328(%rbx), %r14
               	movq	8(%rsp), %rsi
               	movq	16(%rsp), %rax
               	movl	%eax, %edx
               	movl	$1, %edi
               	callq	0x4138e0 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43ab11 <Kotlin_io_Console_print+0x261>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x43ab11 <Kotlin_io_Console_print+0x261>
               	cmpl	$1, %eax
               	jne	0x43ab11 <Kotlin_io_Console_print+0x261>
               	movb	158163(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ab11 <Kotlin_io_Console_print+0x261>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%rsp), %rdi
               	cmpq	%r13, %rdi
               	je	0x43ab20 <Kotlin_io_Console_print+0x270>
               	callq	0x4136d0 <free@plt>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	116954(%rip), %rsi      # 0x457410 <ktypeglobal:kotlin.String#internal>
               	movq	%r14, %rdi
               	callq	0x419da0 <ThrowClassCastException>
               	leaq	42059(%rip), %rdi       # 0x444f90 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x4362d0 <std::__throw_length_error(char const*)>
               	movq	%rax, %r15
               	testq	%rbx, %rbx
               	jne	0x43ab69 <Kotlin_io_Console_print+0x2b9>
               	movq	8(%rsp), %rdi
               	cmpq	%r13, %rdi
               	je	0x43ab61 <Kotlin_io_Console_print+0x2b1>
               	callq	0x4136d0 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x43ab52 <Kotlin_io_Console_print+0x2a2>
               	cmpl	$1, %eax
               	jne	0x43ab52 <Kotlin_io_Console_print+0x2a2>
               	movb	158043(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ab52 <Kotlin_io_Console_print+0x2a2>
               	movq	%r14, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43ab52 <Kotlin_io_Console_print+0x2a2>
               	nopl	(%rax,%rax)

<Kotlin_io_Console_println>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43a8b0 <Kotlin_io_Console_print>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	328(%rbx), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	41957(%rip), %rsi       # 0x444fad <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movl	$1, %edx
               	movl	$1, %edi
               	callq	0x4138e0 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43abf4 <Kotlin_io_Console_println+0x64>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43abf4 <Kotlin_io_Console_println+0x64>
               	cmpl	$1, %eax
               	jne	0x43abf4 <Kotlin_io_Console_println+0x64>
               	movb	157928(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43abff <Kotlin_io_Console_println+0x6f>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43ac39 <Kotlin_io_Console_println+0xa9>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43ac39 <Kotlin_io_Console_println+0xa9>
               	cmpl	$1, %eax
               	jne	0x43ac39 <Kotlin_io_Console_println+0xa9>
               	movb	157867(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ac39 <Kotlin_io_Console_println+0xa9>
               	movq	%r15, %rdi
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<Init_and_run_start>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movl	%edx, %ebx
               	movq	%rsi, %r15
               	movl	%edi, %r14d
               	callq	0x4385d0 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x43aca4 <Init_and_run_start+0x54>
               	movb	157764(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43aca4 <Init_and_run_start+0x54>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x424470 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 80(%rsp)
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 72(%rsp)
               	testl	%r14d, %r14d
               	jle	0x43ae73 <Init_and_run_start+0x223>
               	movl	%ebx, 12(%rsp)
               	leal	-1(%r14), %ebp
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x427d90 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 24(%rbx)
               	leaq	113509(%rip), %rcx      # 0x456890 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%rax, 80(%rsp)
               	cmpl	$1, %r14d
               	jne	0x43ad50 <Init_and_run_start+0x100>
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43add3 <Init_and_run_start+0x183>
               	movl	%r14d, %ebp
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	addq	$-1, %rbp
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %r12
               	nopl	(%rax)
               	movq	$0, 40(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	8(%r15,%r14,8), %rdi
               	leaq	40(%rsp), %rsi
               	callq	0x436800 <CreateStringFromCString>
               	movq	40(%rsp), %rax
               	movq	%rax, 32(%rbx,%r14,8)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$1, %r14
               	cmpq	%r14, %rbp
               	jne	0x43ad70 <Init_and_run_start+0x120>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rbx
               	movq	%rbx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	157387(%rip), %al       # 0x4614d8 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ae16 <Init_and_run_start+0x1c6>
               	callq	0x424660 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x4205e0 <kfun:#main(){}>
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$0, 12(%rsp)
               	je	0x43ae62 <Init_and_run_start+0x212>
               	movq	%r13, %rax
               	movq	-48(%r13), %rcx
               	movl	$1, %edx
               	movl	$2, %esi
               	movl	$1, %eax
               	lock
               	cmpxchgl	%esi, 257511(%rip)      # 0x479c40 <(anonymous namespace)::globalRuntimeStatus>
               	movq	(%rcx), %rax
               	xchgl	%edx, 328(%rax)
               	xorl	%eax, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a0b0 <ThrowIllegalArgumentException>
               	movq	%rax, %rdi
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43aeea <Init_and_run_start+0x29a>
               	movq	%rax, %rdi
               	movq	%r13, %rbp
               	movq	-64(%r13), %rax
               	movq	%rbx, 288(%rax)
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x43a130 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	%rbx, %rdi
               	callq	0x43a6b0 <Kotlin_terminateWithUnhandledException>
               	movq	%rax, %rdi
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	jmp	0x43aede <Init_and_run_start+0x28e>
               	movq	%rax, %rdi
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413700 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<main>:
               	pushq	%rax
               	movl	$1, %edx
               	callq	0x43ac50 <Init_and_run_start>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq

<read_uleb128(unsigned char const*, unsigned long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %r8b
               	movq	%r8, %rdi
               	andl	$127, %edi
               	shlq	%cl, %rdi
               	addl	$7, %ecx
               	orq	%rdi, %rdx
               	testb	%r8b, %r8b
               	js	0x43af16 <read_uleb128(unsigned char const*, unsigned long*)+0x7>
               	movq	%rdx, (%rsi)
               	retq

<read_sleb128(unsigned char const*, long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %dil
               	movq	%rdi, %r8
               	andl	$127, %r8d
               	shlq	%cl, %r8
               	addl	$7, %ecx
               	orq	%r8, %rdx
               	testb	%dil, %dil
               	js	0x43af3c <read_sleb128(unsigned char const*, long*)+0x7>
               	cmpl	$63, %ecx
               	ja	0x43af6d <read_sleb128(unsigned char const*, long*)+0x38>
               	andb	$64, %dil
               	je	0x43af6d <read_sleb128(unsigned char const*, long*)+0x38>
               	orq	$-1, %rdi
               	shlq	%cl, %rdi
               	orq	%rdi, %rdx
               	movq	%rdx, (%rsi)
               	retq

<get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$40, %rsp
               	movq	(%rdx), %rax
               	movq	%rsi, 8(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	(%rsi), %rax
               	callq	*16(%rax)
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	je	0x43afa9 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x38>
               	movq	24(%rsp), %rax
               	movq	(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movq	(%rbp), %rax
               	leaq	24(%rsp), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	testb	%al, %al
               	je	0x43afc9 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x58>
               	movq	24(%rsp), %rdx
               	movq	%rdx, (%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>:
               	movq	%rdx, %r9
               	movq	%rcx, %r11
               	cmpb	$80, %dil
               	jne	0x43afef <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x1f>
               	leaq	7(%rdx), %rax
               	andq	$-8, %rax
               	movq	(%rax), %rdx
               	leaq	8(%rax), %rax
               	movq	%rdx, (%rcx)
               	retq
               	pushq	%rbx
               	movl	%edi, %eax
               	movl	%edi, %r10d
               	andl	$15, %eax
               	subq	$16, %rsp
               	cmpb	$12, %al
               	ja	0x43b060 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x90>
               	leaq	43193(%rip), %rdx       # 0x4458c0 <_mi_page_empty+0x40>
               	movzbl	%al, %eax
               	movq	%rsi, %rbx
               	movslq	(%rdx,%rax,4), %rax
               	addq	%rdx, %rax
               	jmpq	*%rax
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43af0f <read_uleb128(unsigned char const*, unsigned long*)>
               	jmp	0x43b032 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x62>
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43af35 <read_sleb128(unsigned char const*, long*)>
               	movq	8(%rsp), %rdx
               	jmp	0x43b065 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movzwl	(%r9), %edx
               	jmp	0x43b048 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x78>
               	movl	(%r9), %edx
               	jmp	0x43b051 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x81>
               	movswq	(%r9), %rdx
               	leaq	2(%r9), %rax
               	jmp	0x43b065 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movslq	(%r9), %rdx
               	leaq	4(%r9), %rax
               	jmp	0x43b065 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movq	(%r9), %rdx
               	leaq	8(%r9), %rax
               	jmp	0x43b065 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	callq	0x4138f0 <abort@plt>
               	testq	%rdx, %rdx
               	je	0x43b082 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movl	%r10d, %ecx
               	andl	$112, %ecx
               	cmpb	$16, %cl
               	cmoveq	%r9, %rbx
               	addq	%rbx, %rdx
               	testb	%r10b, %r10b
               	jns	0x43b082 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movq	(%rdx), %rdx
               	movq	%rdx, (%r11)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<get_ttype_entry(lsda_header_info*, unsigned long)>:
               	subq	$24, %rsp
               	movq	%rdi, %r8
               	movzbl	40(%rdi), %edi
               	cmpb	$-1, %dil
               	je	0x43b0ca <get_ttype_entry(lsda_header_info*, unsigned long)+0x3f>
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpb	$2, %dl
               	je	0x43b0ce <get_ttype_entry(lsda_header_info*, unsigned long)+0x43>
               	ja	0x43b0b1 <get_ttype_entry(lsda_header_info*, unsigned long)+0x26>
               	movl	$8, %eax
               	testb	%dl, %dl
               	jmp	0x43b0c3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x38>
               	movl	$4, %eax
               	cmpb	$3, %dl
               	je	0x43b0d3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$8, %eax
               	cmpb	$4, %dl
               	je	0x43b0d3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	callq	0x4138f0 <abort@plt>
               	xorl	%eax, %eax
               	jmp	0x43b0d3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$2, %eax
               	imulq	%rsi, %rax
               	movq	24(%r8), %rdx
               	movq	16(%r8), %rsi
               	leaq	8(%rsp), %rcx
               	subq	%rax, %rdx
               	callq	0x43afd0 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>:
               	pushq	%r13
               	notq	%rcx
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	24(%rdi), %rbx
               	movq	%rdx, 8(%rsp)
               	leaq	24(%rsp), %r13
               	addq	%rcx, %rbx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43af0f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rbx
               	testq	%rsi, %rsi
               	je	0x43b150 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5a>
               	movq	%rbp, %rdi
               	callq	0x43b08b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	leaq	8(%rsp), %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43af71 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	testb	%al, %al
               	je	0x43b11a <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x24>
               	jmp	0x43b152 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5c>
               	xorl	%eax, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<base_of_encoded_value(unsigned char, _Unwind_Context*)>:
               	movl	%edi, %eax
               	cmpb	$-1, %dil
               	je	0x43b19c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	andl	$112, %eax
               	movq	%rsi, %rdi
               	cmpb	$32, %al
               	je	0x43b18c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2f>
               	ja	0x43b17b <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1e>
               	testb	%al, %al
               	je	0x43b19c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$16, %al
               	je	0x43b19c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	jmp	0x43b196 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	cmpb	$64, %al
               	je	0x43b191 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
               	cmpb	$80, %al
               	je	0x43b19c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$48, %al
               	jne	0x43b196 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	jmp	0x413a20 <_Unwind_GetDataRelBase@plt>
               	jmp	0x413a30 <_Unwind_GetTextRelBase@plt>
               	jmp	0x413a40 <_Unwind_GetRegionStart@plt>
               	pushq	%rax
               	callq	0x4138f0 <abort@plt>
               	xorl	%eax, %eax
               	retq

<read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>:
               	pushq	%rbx
               	movzbl	%sil, %ebx
               	movq	%rdi, %rsi
               	movl	%ebx, %edi
               	subq	$16, %rsp
               	movq	%rdx, 8(%rsp)
               	movq	%rcx, (%rsp)
               	callq	0x43b15d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rdx
               	movl	%ebx, %edi
               	addq	$16, %rsp
               	movq	%rax, %rsi
               	popq	%rbx
               	jmp	0x43afd0 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>

<parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x43b1f0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x1d>
               	callq	0x413a40 <_Unwind_GetRegionStart@plt>
               	movq	%rax, (%rbx)
               	movzbl	(%r12), %esi
               	leaq	1(%r12), %rdx
               	cmpb	$-1, %sil
               	je	0x43b214 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x41>
               	leaq	8(%rbx), %rcx
               	movq	%rbp, %rdi
               	callq	0x43b19f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movq	%rax, %rdx
               	jmp	0x43b218 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x45>
               	movq	%rax, 8(%rbx)
               	leaq	1(%rdx), %rax
               	movb	(%rdx), %dl
               	leaq	8(%rsp), %r9
               	movb	%dl, 40(%rbx)
               	incb	%dl
               	je	0x43b243 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x70>
               	movq	%r9, %rsi
               	movq	%rax, %rdi
               	callq	0x43af0f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 24(%rbx)
               	jmp	0x43b24b <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x78>
               	movq	$0, 24(%rbx)
               	leaq	1(%rax), %rdi
               	movb	(%rax), %al
               	movq	%r9, %rsi
               	movb	%al, 41(%rbx)
               	callq	0x43af0f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 32(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<__gxx_personality_v0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$152, %rsp
               	decl	%edi
               	movq	$0, 56(%rsp)
               	movl	$0, 52(%rsp)
               	jne	0x43b61e <__gxx_personality_v0+0x3ad>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	movq	%r8, %rbp
               	movq	%rcx, %rbx
               	movl	%esi, 12(%rsp)
               	addq	%rdx, %rax
               	cmpq	$1, %rax
               	movq	%rax, (%rsp)
               	setbe	35(%rsp)
               	cmpl	$6, %esi
               	sete	%al
               	andb	35(%rsp), %al
               	movb	%al, 34(%rsp)
               	je	0x43b2ec <__gxx_personality_v0+0x7b>
               	movq	-16(%rcx), %r12
               	movl	-36(%rcx), %r14d
               	movq	-24(%rcx), %r15
               	cmpq	$1, %r12
               	sbbl	%eax, %eax
               	andl	$-2, %eax
               	addl	$3, %eax
               	jmp	0x43b585 <__gxx_personality_v0+0x314>
               	movq	%r8, %rdi
               	callq	0x413a50 <_Unwind_GetLanguageSpecificData@plt>
               	movq	%rax, %r15
               	testq	%rax, %rax
               	je	0x43b53c <__gxx_personality_v0+0x2cb>
               	leaq	96(%rsp), %rax
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	movq	%rax, %rdx
               	movq	%rax, 24(%rsp)
               	callq	0x43b1d3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, %r14
               	callq	0x43b15d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	leaq	52(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	%rax, 112(%rsp)
               	callq	0x413a60 <_Unwind_GetIPInfo@plt>
               	cmpl	$0, 52(%rsp)
               	movq	%rax, %r13
               	jne	0x43b34a <__gxx_personality_v0+0xd9>
               	decq	%r13
               	leaq	64(%rsp), %r12
               	cmpq	%r14, 128(%rsp)
               	jbe	0x43b522 <__gxx_personality_v0+0x2b1>
               	movzbl	137(%rsp), %esi
               	movq	%r14, %rdx
               	movq	%r12, %rcx
               	xorl	%edi, %edi
               	callq	0x43b19f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	72(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43b19f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	80(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43b19f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	leaq	88(%rsp), %rsi
               	movq	%rax, %rdi
               	callq	0x43af0f <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	%rax, %r14
               	movq	64(%rsp), %rax
               	addq	96(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43b3c9 <__gxx_personality_v0+0x158>
               	movq	128(%rsp), %r14
               	jmp	0x43b34f <__gxx_personality_v0+0xde>
               	addq	72(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43b34f <__gxx_personality_v0+0xde>
               	movq	80(%rsp), %r12
               	testq	%r12, %r12
               	je	0x43b3e6 <__gxx_personality_v0+0x175>
               	addq	104(%rsp), %r12
               	movq	88(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b641 <__gxx_personality_v0+0x3d0>
               	movq	128(%rsp), %rdx
               	testq	%r12, %r12
               	je	0x43b53c <__gxx_personality_v0+0x2cb>
               	leaq	-1(%rdx,%rax), %r13
               	testq	%r13, %r13
               	je	0x43b54d <__gxx_personality_v0+0x2dc>
               	movl	12(%rsp), %eax
               	andl	$8, %eax
               	movl	%eax, 36(%rsp)
               	jne	0x43b43f <__gxx_personality_v0+0x1ce>
               	cmpq	$1, (%rsp)
               	ja	0x43b448 <__gxx_personality_v0+0x1d7>
               	leaq	32(%rbx), %rax
               	testb	$1, (%rbx)
               	je	0x43b434 <__gxx_personality_v0+0x1c3>
               	movq	-80(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movq	-112(%rax), %r14
               	jmp	0x43b44f <__gxx_personality_v0+0x1de>
               	leaq	139842(%rip), %r14      # 0x45d688 <typeinfo for __cxxabiv1::__forced_unwind>
               	jmp	0x43b44f <__gxx_personality_v0+0x1de>
               	leaq	139849(%rip), %r14      # 0x45d698 <typeinfo for __cxxabiv1::__foreign_exception>
               	leaq	72(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	40(%rsp), %rsi
               	movq	%r13, %rdi
               	callq	0x43af35 <read_sleb128(unsigned char const*, long*)>
               	leaq	80(%rsp), %rsi
               	movq	%rax, %rdi
               	movq	%rax, 16(%rsp)
               	callq	0x43af35 <read_sleb128(unsigned char const*, long*)>
               	movq	72(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43b506 <__gxx_personality_v0+0x295>
               	jle	0x43b4b5 <__gxx_personality_v0+0x244>
               	movq	24(%rsp), %rdi
               	movq	%rcx, %rsi
               	callq	0x43b08b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	testq	%rax, %rax
               	je	0x43b632 <__gxx_personality_v0+0x3c1>
               	testq	%r14, %r14
               	je	0x43b50b <__gxx_personality_v0+0x29a>
               	leaq	56(%rsp), %rdx
               	movq	%r14, %rsi
               	movq	%rax, %rdi
               	callq	0x43af71 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	jmp	0x43b4fd <__gxx_personality_v0+0x28c>
               	cmpl	$0, 36(%rsp)
               	sete	%al
               	testb	%al, 35(%rsp)
               	je	0x43b4df <__gxx_personality_v0+0x26e>
               	testq	%r14, %r14
               	je	0x43b4df <__gxx_personality_v0+0x26e>
               	movq	56(%rsp), %rdx
               	leaq	96(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x43b0f6 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	xorl	$1, %eax
               	jmp	0x43b4fd <__gxx_personality_v0+0x28c>
               	notq	%rcx
               	addq	120(%rsp), %rcx
               	leaq	88(%rsp), %rsi
               	movq	%rcx, %rdi
               	callq	0x43af0f <read_uleb128(unsigned char const*, unsigned long*)>
               	cmpq	$0, 88(%rsp)
               	sete	%al
               	testb	%al, %al
               	je	0x43b50b <__gxx_personality_v0+0x29a>
               	jmp	0x43b632 <__gxx_personality_v0+0x3c1>
               	movb	$1, 34(%rsp)
               	movq	80(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43b546 <__gxx_personality_v0+0x2d5>
               	movq	16(%rsp), %r13
               	addq	%rax, %r13
               	jmp	0x43b459 <__gxx_personality_v0+0x1e8>
               	xorl	%r14d, %r14d
               	xorl	%r12d, %r12d
               	xorl	%r13d, %r13d
               	movl	$1, %eax
               	testb	$1, 12(%rsp)
               	je	0x43b585 <__gxx_personality_v0+0x314>
               	cmpl	$2, %eax
               	jne	0x43b557 <__gxx_personality_v0+0x2e6>
               	movl	$8, %eax
               	jmp	0x43b655 <__gxx_personality_v0+0x3e4>
               	cmpb	$0, 34(%rsp)
               	je	0x43b53c <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	movl	$2, %eax
               	jmp	0x43b530 <__gxx_personality_v0+0x2bf>
               	cmpq	$1, (%rsp)
               	movl	$6, %eax
               	ja	0x43b655 <__gxx_personality_v0+0x3e4>
               	movq	56(%rsp), %rdx
               	movl	%r14d, -36(%rbx)
               	movq	%r13, -32(%rbx)
               	movq	%r15, -24(%rbx)
               	movq	%rdx, -8(%rbx)
               	movq	%r12, -16(%rbx)
               	jmp	0x43b655 <__gxx_personality_v0+0x3e4>
               	testb	$8, 12(%rsp)
               	jne	0x43b593 <__gxx_personality_v0+0x322>
               	cmpq	$1, (%rsp)
               	jbe	0x43b5a5 <__gxx_personality_v0+0x334>
               	decl	%eax
               	je	0x43b62d <__gxx_personality_v0+0x3bc>
               	testl	%r14d, %r14d
               	jns	0x43b5ef <__gxx_personality_v0+0x37e>
               	callq	0x43c452 <std::unexpected()>
               	decl	%eax
               	jne	0x43b5b1 <__gxx_personality_v0+0x340>
               	movq	%rbx, %rdi
               	callq	0x43c5dc <__cxa_call_terminate>
               	testl	%r14d, %r14d
               	jns	0x43b5ef <__gxx_personality_v0+0x37e>
               	leaq	96(%rsp), %rdx
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	callq	0x43b1d3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	callq	0x43b15d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, 112(%rsp)
               	callq	0x43b15d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	%rax, -16(%rbx)
               	movq	%rbx, %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x413a70 <_Unwind_SetGR@plt>
               	movslq	%r14d, %rdx
               	movl	$1, %esi
               	movq	%rbp, %rdi
               	callq	0x413a70 <_Unwind_SetGR@plt>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x413a80 <_Unwind_SetIP@plt>
               	movl	$7, %eax
               	jmp	0x43b655 <__gxx_personality_v0+0x3e4>
               	movl	$3, %eax
               	jmp	0x43b655 <__gxx_personality_v0+0x3e4>
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c423 <std::terminate()>
               	movl	72(%rsp), %r14d
               	movl	$3, %eax
               	jmp	0x43b530 <__gxx_personality_v0+0x2bf>
               	testq	%r12, %r12
               	je	0x43b53c <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	xorl	%r13d, %r13d
               	jmp	0x43b550 <__gxx_personality_v0+0x2df>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<__cxa_call_unexpected>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	-16(%rbx), %rax
               	movq	-64(%rbx), %rdi
               	movq	-24(%rbx), %r15
               	movslq	-36(%rbx), %rbp
               	movq	-56(%rbx), %r14
               	movq	%rax, 16(%rsp)
               	callq	0x43c431 <__cxxabiv1::__unexpected(void (*)())>
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c493 <__cxa_get_globals_fast>
               	movq	(%rax), %rax
               	leaq	112(%rax), %r13
               	testb	$1, 80(%rax)
               	je	0x43b6b8 <__cxa_call_unexpected+0x51>
               	movq	(%rax), %r13
               	movq	%rsp, %r12
               	movq	%r15, %rsi
               	xorl	%edi, %edi
               	movq	%r12, %rdx
               	callq	0x43b1d3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movq	-112(%r13), %rsi
               	movq	%rbp, %rcx
               	movq	%r13, %rdx
               	movq	%r12, %rdi
               	callq	0x43b0f6 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b6e3 <__cxa_call_unexpected+0x7c>
               	callq	0x43c274 <__cxa_rethrow>
               	leaq	139142(%rip), %rbx      # 0x45d670 <typeinfo for std::bad_exception>
               	movq	%rbp, %rcx
               	xorl	%edx, %edx
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x43b0f6 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43b728 <__cxa_call_unexpected+0xc1>
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	139201(%rip), %rdx      # 0x45d6d0 <vtable for std::bad_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	1359(%rip), %rdx        # 0x43bc72 <std::bad_exception::~bad_exception()>
               	callq	0x43c225 <__cxa_throw>
               	movq	%r14, %rdi
               	callq	0x43c3f8 <__cxxabiv1::__terminate(void (*)())>
               	movq	%rax, %rbx
               	callq	0x43c135 <__cxa_end_catch>
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<operator delete(void*)>:
               	jmp	0x4136d0 <free@plt>

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	leaq	138807(%rip), %rax      # 0x45d588 <vtable for __cxxabiv1::__si_class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bf4a <__cxxabiv1::__class_type_info::~__class_type_info()>
               	nop

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b74a <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
               	movq	%rbx, %rdi
               	movl	$24, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43b791 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43b791 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	cmpq	%rdx, %r8
               	jne	0x43b7d2 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x40>
               	movq	8(%rcx), %rsi
               	movq	8(%rdi), %rdi
               	movq	%r8, 24(%rsp)
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	callq	0x43b776 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rdx
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	jne	0x43b7e8 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x56>
               	movq	16(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	(%rdi), %rax
               	movq	64(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	addq	$40, %rsp
               	movl	$6, %eax
               	popq	%rbx
               	popq	%rbp
               	retq

<__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rdx
               	movq	8(%rcx), %rsi
               	movq	96(%rsp), %r12
               	movq	104(%rsp), %r15
               	movq	%r8, 24(%rsp)
               	movq	%rdx, %rdi
               	movq	%r9, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43b776 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %r9
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x43b87a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x86>
               	movq	%r8, (%r15)
               	movl	%ebp, 8(%r15)
               	testq	%rbx, %rbx
               	js	0x43b86a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x76>
               	addq	%rbx, %r8
               	xorl	%eax, %eax
               	cmpq	%r8, %r12
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	movl	%eax, 16(%r15)
               	jmp	0x43b8d6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	$-2, %rbx
               	jne	0x43b8d6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movl	$1, 16(%r15)
               	jmp	0x43b8d6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	%r12, %r8
               	jne	0x43b8a9 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movq	8(%r9), %rsi
               	movq	%rdx, %rdi
               	movq	%r8, 16(%rsp)
               	movq	%r9, 8(%rsp)
               	callq	0x43b776 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %r9
               	movq	16(%rsp), %r8
               	testb	%al, %al
               	je	0x43b8a9 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movl	%ebp, 12(%r15)
               	jmp	0x43b8d6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movq	16(%r14), %rdi
               	movq	%r13, %rcx
               	movl	%ebp, %edx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	%r15, 104(%rsp)
               	movq	%r12, 96(%rsp)
               	movq	56(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax
               	addq	$40, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	callq	0x43bff0 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
               	testb	%al, %al
               	jne	0x43b923 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x3b>
               	movq	16(%r13), %rdi
               	movq	%r12, %rcx
               	movq	%rbp, %rdx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	48(%rax), %rax
               	popq	%r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmpq	*%rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<__gnu_cxx::__concurrence_lock_error::what() const>:
               	leaq	38524(%rip), %rax       # 0x444faf <typeinfo name for kotlin::gc::GCSchedulerData+0x19b6>
               	retq

<__gnu_cxx::__concurrence_unlock_error::what() const>:
               	leaq	38552(%rip), %rax       # 0x444fd3 <typeinfo name for kotlin::gc::GCSchedulerData+0x19da>
               	retq

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	leaq	138445(%rip), %rax      # 0x45d610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	leaq	138465(%rip), %rax      # 0x45d638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b93c <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43b950 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__mutex::lock()>:
               	cmpq	$0, 140828(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43b9d8 <__gnu_cxx::__mutex::lock()+0x44>
               	pushq	%rdx
               	callq	0x413730 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x43b9d6 <__gnu_cxx::__mutex::lock()+0x42>
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	138327(%rip), %rdx      # 0x45d610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	leaq	138272(%rip), %rsi      # 0x45d5e0 <typeinfo for __gnu_cxx::__concurrence_lock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-149(%rip), %rdx        # 0x43b93c <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	callq	0x43c225 <__cxa_throw>
               	popq	%rax
               	retq
               	retq
               	nop

<__gnu_cxx::__scoped_lock::~__scoped_lock()>:
               	cmpq	$0, 140758(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43ba33 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x59>
               	pushq	%rdx
               	movq	(%rdi), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	testl	%eax, %eax
               	je	0x43ba31 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x57>
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	138294(%rip), %rdx      # 0x45d638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	leaq	138223(%rip), %rsi      # 0x45d5f8 <typeinfo for __gnu_cxx::__concurrence_unlock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-202(%rip), %rdx        # 0x43b950 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rdi
               	incq	%rdx
               	je	0x43ba2c <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x52>
               	callq	0x413700 <_Unwind_Resume@plt>
               	callq	0x43b667 <__cxa_call_unexpected>
               	popq	%rax
               	retq
               	retq

<(anonymous namespace)::pool::free(void*) (.constprop.2)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	254529(%rip), %rdi      # 0x479c80 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b994 <__gnu_cxx::__mutex::lock()>
               	movq	254548(%rip), %rdx      # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	leaq	-16(%rbx), %rcx
               	testq	%rdx, %rdx
               	je	0x43ba6a <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x36>
               	movq	-16(%rbx), %rax
               	leaq	(%rcx,%rax), %rsi
               	cmpq	%rsi, %rdx
               	jbe	0x43ba70 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x3c>
               	movq	%rdx, -8(%rbx)
               	jmp	0x43ba8f <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x5b>
               	leaq	254513(%rip), %r8       # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	jne	0x43baa4 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x70>
               	addq	(%rdx), %rax
               	movq	%rax, -16(%rbx)
               	movq	254497(%rip), %rax      # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	movq	8(%rax), %rax
               	movq	%rax, -8(%rbx)
               	movq	%rcx, 254482(%rip)      # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x43bae7 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	cmpq	%rdi, %rsi
               	jae	0x43baad <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x79>
               	leaq	8(%rdx), %r8
               	movq	%rdi, %rdx
               	movq	8(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x43ba98 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x64>
               	cmpq	%rdi, %rsi
               	jne	0x43babd <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x89>
               	addq	(%rsi), %rax
               	movq	8(%rsi), %rsi
               	movq	%rsi, 8(%rdx)
               	movq	(%r8), %rdx
               	movq	(%rdx), %rsi
               	leaq	(%rdx,%rsi), %rdi
               	cmpq	%rdi, %rcx
               	jne	0x43bad4 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xa0>
               	addq	%rsi, %rax
               	movq	%rax, (%rdx)
               	jmp	0x43bae7 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	movq	%rax, -16(%rbx)
               	movq	8(%rdx), %rax
               	movq	%rax, -8(%rbx)
               	movq	(%r8), %rax
               	movq	%rcx, 8(%rax)
               	leaq	8(%rsp), %rdi
               	callq	0x43b9da <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	popq	%rbx
               	retq
               	nop

<(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	254333(%rip), %rdi      # 0x479c80 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43b994 <__gnu_cxx::__mutex::lock()>
               	leaq	16(%rbx), %rdi
               	movl	$16, %eax
               	movq	254343(%rip), %rbx      # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	cmpq	$16, %rdi
               	leaq	254332(%rip), %rdx      # 0x479ca8 <(anonymous namespace)::emergency_pool+0x28>
               	cmovbq	%rax, %rdi
               	addq	$15, %rdi
               	andq	$-16, %rdi
               	testq	%rbx, %rbx
               	je	0x43bb78 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x80>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rcx
               	cmpq	%rax, %rdi
               	jbe	0x43bb52 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x5a>
               	leaq	8(%rbx), %rdx
               	movq	%rcx, %rbx
               	jmp	0x43bb38 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x40>
               	subq	%rdi, %rax
               	cmpq	$15, %rax
               	jbe	0x43bb71 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x79>
               	leaq	(%rbx,%rdi), %rsi
               	movq	%rcx, 8(%rsi)
               	movq	(%rdx), %rbx
               	movq	%rax, (%rsi)
               	movq	%rdi, (%rbx)
               	movq	%rsi, (%rdx)
               	jmp	0x43bb74 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x7c>
               	movq	%rcx, (%rdx)
               	addq	$16, %rbx
               	leaq	8(%rsp), %rdi
               	callq	0x43b9da <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__freeres()>:
               	movq	254238(%rip), %rdi      # 0x479cb0 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rdi, %rdi
               	je	0x43bbaa <__gnu_cxx::__freeres()+0x1f>
               	pushq	%rax
               	callq	0x4136d0 <free@plt>
               	movq	$0, 254216(%rip)        # 0x479cb0 <(anonymous namespace)::emergency_pool+0x30>
               	popq	%rdx
               	retq
               	retq

<__cxa_allocate_exception>:
               	pushq	%rbx
               	leaq	128(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bbd8 <__cxa_allocate_exception+0x2d>
               	movq	%rbx, %rdi
               	callq	0x43baf8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bbd8 <__cxa_allocate_exception+0x2d>
               	callq	0x43c423 <std::terminate()>
               	xorl	%eax, %eax
               	movl	$32, %ecx
               	movq	%rdx, %rdi
               	rep		stosl	%eax, %es:(%rdi)
               	leaq	128(%rdx), %rax
               	popq	%rbx
               	retq

<__cxa_free_exception>:
               	movq	254140(%rip), %rax      # 0x479cb0 <(anonymous namespace)::emergency_pool+0x30>
               	addq	$-128, %rdi
               	cmpq	%rax, %rdi
               	jbe	0x43bc0e <__cxa_free_exception+0x21>
               	addq	254132(%rip), %rax      # 0x479cb8 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43bc0e <__cxa_free_exception+0x21>
               	jmp	0x43ba34 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x4136d0 <free@plt>

<__cxa_allocate_dependent_exception>:
               	pushq	%rcx
               	movl	$112, %edi
               	callq	0x413aa0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bc3d <__cxa_allocate_dependent_exception+0x2a>
               	movl	$112, %edi
               	callq	0x43baf8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43bc3d <__cxa_allocate_dependent_exception+0x2a>
               	callq	0x43c423 <std::terminate()>
               	xorl	%eax, %eax
               	movq	%rdx, %rdi
               	movl	$28, %ecx
               	rep		stosl	%eax, %es:(%rdi)
               	movq	%rdx, %rax
               	popq	%rdx
               	retq

<__cxa_free_dependent_exception>:
               	movq	254043(%rip), %rax      # 0x479cb0 <(anonymous namespace)::emergency_pool+0x30>
               	cmpq	%rax, %rdi
               	jbe	0x43bc6b <__cxa_free_dependent_exception+0x1d>
               	addq	254039(%rip), %rax      # 0x479cb8 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43bc6b <__cxa_free_dependent_exception+0x1d>
               	jmp	0x43ba34 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x4136d0 <free@plt>

<std::exception::~exception()>:
               	retq
               	nop

<std::bad_exception::~bad_exception()>:
               	leaq	137815(%rip), %rax      # 0x45d6d0 <vtable for std::bad_exception>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::exception::what() const>:
               	leaq	37740(%rip), %rax       # 0x444ff9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a00>
               	retq

<std::bad_exception::what() const>:
               	leaq	37747(%rip), %rax       # 0x445008 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a0f>
               	retq

<std::exception::~exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<std::bad_exception::~bad_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bc72 <std::bad_exception::~bad_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	retq
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bcc6 <__cxxabiv1::__forced_unwind::~__forced_unwind()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	retq
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bce0 <__cxxabiv1::__foreign_exception::~__foreign_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>

<_ZGTtNKSt9exceptionD1Ev>:
               	retq

<_ZGTtNKSt9exception4whatEv>:
               	jmp	0x43bc86 <std::exception::what() const>

<_ZGTtNKSt13bad_exceptionD1Ev>:
               	retq

<_ZGTtNKSt13bad_exception4whatEv>:
               	jmp	0x43bc8e <std::bad_exception::what() const>
               	nop

<std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>:
               	retq

<__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	movq	-80(%rsi), %rbx
               	cmpl	$1, %edi
               	jbe	0x43bd1a <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x13>
               	movq	-88(%rbx), %rdi
               	callq	0x43c3f8 <__cxxabiv1::__terminate(void (*)())>
               	leaq	-80(%rsi), %rax
               	movq	%rax, %rdi
               	callq	0x43bc4e <__cxa_free_dependent_exception>
               	lock
               	decl	-128(%rbx)
               	jne	0x43bd43 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x3c>
               	movq	-104(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43bd3a <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x33>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bbed <__cxa_free_exception>
               	popq	%rbx
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr()>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::_M_addref()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43bd62 <std::__exception_ptr::exception_ptr::_M_addref()+0xc>
               	lock
               	incl	-128(%rax)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr(void*)>:
               	movq	%rsi, (%rdi)
               	jmp	0x43bd56 <std::__exception_ptr::exception_ptr::_M_addref()>

<std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bd56 <std::__exception_ptr::exception_ptr::_M_addref()>
               	nop

<std::__exception_ptr::exception_ptr::_M_release()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43bda9 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	lock
               	decl	-128(%rax)
               	jne	0x43bda9 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	pushq	%rbx
               	movq	-104(%rax), %rax
               	movq	%rdi, %rbx
               	testq	%rax, %rax
               	je	0x43bd98 <std::__exception_ptr::exception_ptr::_M_release()+0x20>
               	movq	(%rdi), %rdi
               	callq	*%rax
               	movq	(%rbx), %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	retq

<std::__exception_ptr::exception_ptr::~exception_ptr()>:
               	jmp	0x43bd78 <std::__exception_ptr::exception_ptr::_M_release()>
               	nop

<std::__exception_ptr::exception_ptr::_M_get() const>:
               	movq	(%rdi), %rax
               	retq

<std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	movq	%rdx, (%rdi)
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x43bd6c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43bdb4 <std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>
               	movq	%rbx, %rdi
               	callq	0x43bdaa <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator!() const>:
               	cmpq	$0, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const>:
               	xorl	%eax, %eax
               	cmpq	$0, (%rdi)
               	je	0x43be0d <std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const+0xf>
               	leaq	-263(%rip), %rax        # 0x43bd06 <std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>
               	xorl	%edx, %edx
               	retq

<std::__exception_ptr::exception_ptr::__cxa_exception_type() const>:
               	movq	(%rdi), %rax
               	movq	-112(%rax), %rax
               	retq

<std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rax
               	callq	0x43be18 <std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>
               	popq	%rdx
               	xorl	$1, %eax
               	retq

<std::current_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c4a8 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	jne	0x43be48 <std::current_exception()+0x1b>
               	movq	%rbx, %rdi
               	callq	0x43bd46 <std::__exception_ptr::exception_ptr::exception_ptr()>
               	jmp	0x43be7d <std::current_exception()+0x50>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	movq	80(%rax), %rcx
               	addq	%rcx, %rdx
               	cmpq	$1, %rdx
               	ja	0x43be3e <std::current_exception()+0x11>
               	movabsq	$5138137972254386944, %rdx # imm = 0x474E5543432B2B00
               	leaq	112(%rax), %rsi
               	cmpq	%rdx, %rcx
               	je	0x43be75 <std::current_exception()+0x48>
               	movq	(%rax), %rsi
               	movq	%rbx, %rdi
               	callq	0x43bd64 <std::__exception_ptr::exception_ptr::exception_ptr(void*)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::rethrow_exception(std::__exception_ptr::exception_ptr)>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bdb0 <std::__exception_ptr::exception_ptr::_M_get() const>
               	movq	%rax, %rbp
               	callq	0x43bc13 <__cxa_allocate_dependent_exception>
               	movq	%rax, %rbx
               	movq	%rbp, (%rax)
               	lock
               	incl	-128(%rbp)
               	callq	0x43c447 <std::get_unexpected()>
               	addq	$80, %rbx
               	movq	%rax, -64(%rbx)
               	callq	0x43c418 <std::get_terminate()>
               	movq	%rax, -56(%rbx)
               	movabsq	$5138137972254386945, %rax # imm = 0x474E5543432B2B01
               	movq	%rax, (%rbx)
               	leaq	-447(%rip), %rax        # 0x43bd07 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43c4a8 <__cxa_get_globals>
               	movq	%rbx, %rdi
               	incl	8(%rax)
               	callq	0x413ab0 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c423 <std::terminate()>
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	pushq	%rbx
               	movl	$1, %eax
               	movq	%rdx, %rbx
               	shlq	$36, %rax
               	subq	$32, %rsp
               	movq	(%rdx), %rdx
               	movq	%rax, 16(%rsp)
               	movq	(%rdi), %rax
               	leaq	8(%rsp), %rcx
               	movq	$0, 8(%rsp)
               	movq	$0, 24(%rsp)
               	callq	*48(%rax)
               	movl	16(%rsp), %edx
               	xorl	%eax, %eax
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x43bf36 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x4e>
               	movq	8(%rsp), %rax
               	movq	%rax, (%rbx)
               	movb	$1, %al
               	addq	$32, %rsp
               	popq	%rbx
               	retq

<__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	xorl	%eax, %eax
               	cmpq	%r8, %rdx
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	retq
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	leaq	137231(%rip), %rax      # 0x45d760 <vtable for __cxxabiv1::__class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f51c <std::type_info::~type_info()>
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43bf4a <__cxxabiv1::__class_type_info::~__class_type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43bf91 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43bf91 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	56(%rsp), %rbx
               	movq	8(%rdi), %r13
               	cmpq	48(%rsp), %r8
               	jne	0x43bfc7 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movq	8(%r9), %rsi
               	movq	%r13, %rdi
               	callq	0x43bf76 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43bfc7 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movl	%ebp, 12(%rbx)
               	jmp	0x43bfe4 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	8(%r14), %rsi
               	movq	%r13, %rdi
               	callq	0x43bf76 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43bfe4 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	%r12, (%rbx)
               	movl	%ebp, 8(%rbx)
               	movl	$1, 16(%rbx)
               	popq	%rbx
               	xorl	%eax, %eax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	pushq	%r8
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	callq	0x43bf76 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43c01d <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x2d>
               	movq	%rbp, (%rbx)
               	movq	$16, 16(%rbx)
               	movl	$6, 8(%rbx)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	movq	%rdx, 8(%rsp)
               	callq	0x43bf76 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	jne	0x43c06b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	cmpl	$3, %r12d
               	ja	0x43c06b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	40(%rax), %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmpq	*%rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<operator delete(void*, unsigned long)>:
               	jmp	0x43b745 <operator delete(void*)>

<operator new(unsigned long)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	jne	0x43c087 <operator new(unsigned long)+0xe>
               	movl	$1, %ebx
               	movq	%rbx, %rdi
               	callq	0x413aa0 <malloc@plt>
               	testq	%rax, %rax
               	jne	0x43c0d0 <operator new(unsigned long)+0x57>
               	callq	0x43c2c9 <std::get_new_handler()>
               	testq	%rax, %rax
               	jne	0x43c0cc <operator new(unsigned long)+0x53>
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	136993(%rip), %rdx      # 0x45d7d0 <vtable for std::bad_alloc>
               	leaq	136962(%rip), %rsi      # 0x45d7b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	929(%rip), %rdx         # 0x43c468 <std::bad_alloc::~bad_alloc()>
               	callq	0x43c225 <__cxa_throw>
               	callq	*%rax
               	jmp	0x43c087 <operator new(unsigned long)+0xe>
               	popq	%rbx
               	retq

<__cxa_get_exception_ptr>:
               	movq	-8(%rdi), %rax
               	retq

<__cxa_begin_catch>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c4a8 <__cxa_get_globals>
               	leaq	-80(%rbx), %rsi
               	movabsq	$-5138137972254386944, %rcx # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rcx
               	movq	(%rax), %rdx
               	cmpq	$1, %rcx
               	jbe	0x43c109 <__cxa_begin_catch+0x32>
               	testq	%rdx, %rdx
               	je	0x43c104 <__cxa_begin_catch+0x2d>
               	callq	0x43c423 <std::terminate()>
               	movq	%rsi, (%rax)
               	jmp	0x43c130 <__cxa_begin_catch+0x59>
               	movl	-40(%rbx), %edi
               	leal	1(%rdi), %ecx
               	testl	%edi, %edi
               	jns	0x43c11a <__cxa_begin_catch+0x43>
               	movl	$1, %ecx
               	subl	%edi, %ecx
               	movl	%ecx, -40(%rbx)
               	decl	8(%rax)
               	cmpq	%rsi, %rdx
               	je	0x43c12c <__cxa_begin_catch+0x55>
               	movq	%rdx, -48(%rbx)
               	movq	%rsi, (%rax)
               	movq	-8(%rbx), %rdx
               	movq	%rdx, %rax
               	popq	%rbx
               	retq

<__cxa_end_catch>:
               	pushq	%rcx
               	callq	0x43c493 <__cxa_get_globals_fast>
               	movq	(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x43c193 <__cxa_end_catch+0x5e>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43c160 <__cxa_end_catch+0x2b>
               	movq	$0, (%rax)
               	jmp	0x43c17f <__cxa_end_catch+0x4a>
               	movl	40(%rdi), %edx
               	testl	%edx, %edx
               	jns	0x43c174 <__cxa_end_catch+0x3f>
               	incl	%edx
               	jne	0x43c190 <__cxa_end_catch+0x5b>
               	movq	32(%rdi), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x43c190 <__cxa_end_catch+0x5b>
               	decl	%edx
               	jne	0x43c189 <__cxa_end_catch+0x54>
               	movq	32(%rdi), %rdx
               	movq	%rdx, (%rax)
               	addq	$80, %rdi
               	popq	%rdx
               	jmp	0x413ac0 <_Unwind_DeleteException@plt>
               	jns	0x43c190 <__cxa_end_catch+0x5b>
               	callq	0x43c423 <std::terminate()>
               	movl	%edx, 40(%rdi)
               	popq	%rax
               	retq

<std::uncaught_exception()>:
               	pushq	%rax
               	callq	0x43c4a8 <__cxa_get_globals>
               	cmpl	$0, 8(%rax)
               	popq	%rdx
               	setne	%al
               	retq

<std::uncaught_exceptions()>:
               	pushq	%rax
               	callq	0x43c4a8 <__cxa_get_globals>
               	movl	8(%rax), %eax
               	popq	%rdx
               	retq

<__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	cmpl	$1, %edi
               	jbe	0x43c1be <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0xf>
               	movq	-56(%rsi), %rdi
               	callq	0x43c3f8 <__cxxabiv1::__terminate(void (*)())>
               	lock
               	decl	-96(%rsi)
               	jne	0x43c1df <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x30>
               	movq	-72(%rsi), %rax
               	leaq	32(%rsi), %rbx
               	testq	%rax, %rax
               	je	0x43c1d6 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x27>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bbed <__cxa_free_exception>
               	popq	%rbx
               	retq

<__cxa_init_primary_exception>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	$0, -128(%rdi)
               	movq	%rsi, -112(%rdi)
               	movq	%rdx, -104(%rdi)
               	callq	0x43c447 <std::get_unexpected()>
               	movq	%rax, -96(%rbx)
               	callq	0x43c418 <std::get_terminate()>
               	movq	%rax, -88(%rbx)
               	movabsq	$5138137972254386944, %rax # imm = 0x474E5543432B2B00
               	movq	%rax, -32(%rbx)
               	leaq	-108(%rip), %rax        # 0x43c1af <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, -24(%rbx)
               	leaq	-128(%rbx), %rax
               	popq	%rbx
               	retq

<__cxa_throw>:
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43c4a8 <__cxa_get_globals>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %rsi
               	incl	8(%rax)
               	movq	24(%rsp), %rdi
               	callq	0x43c1e1 <__cxa_init_primary_exception>
               	movl	$1, (%rax)
               	leaq	96(%rax), %rbx
               	movq	%rbx, %rdi
               	callq	0x413ab0 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c423 <std::terminate()>

<__cxa_rethrow>:
               	pushq	%rbx
               	callq	0x43c4a8 <__cxa_get_globals>
               	movq	(%rax), %rdi
               	incl	8(%rax)
               	testq	%rdi, %rdi
               	je	0x43c2b9 <__cxa_rethrow+0x45>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43c2a2 <__cxa_rethrow+0x2e>
               	movq	$0, (%rax)
               	jmp	0x43c2a5 <__cxa_rethrow+0x31>
               	negl	40(%rdi)
               	leaq	80(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413ad0 <_Unwind_Resume_or_Rethrow@plt>
               	movq	%rbx, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c423 <std::terminate()>

<std::set_new_handler(void (*)())>:
               	movq	%rdi, %rax
               	xchgq	%rax, 252408(%rip)      # 0x479cc0 <(anonymous namespace)::__new_handler>
               	retq

<std::get_new_handler()>:
               	movq	252400(%rip), %rax      # 0x479cc0 <(anonymous namespace)::__new_handler>
               	retq

<__cxa_guard_acquire>:
               	movb	(%rdi), %al
               	testb	%al, %al
               	jne	0x43c38b <__cxa_guard_acquire+0xba>
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	cmpq	$0, 138443(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x43c341 <__cxa_guard_acquire+0x70>
               	movl	$1, %r12d
               	movl	$256, %ebp              # imm = 0x100
               	xorl	%r13d, %r13d
               	movl	%r13d, %eax
               	lock
               	cmpxchgl	%ebp, (%rbx)
               	je	0x43c37e <__cxa_guard_acquire+0xad>
               	movl	%eax, %ecx
               	cmpl	%eax, %r12d
               	jne	0x43c311 <__cxa_guard_acquire+0x40>
               	xorl	%eax, %eax
               	jmp	0x43c383 <__cxa_guard_acquire+0xb2>
               	cmpl	%eax, %ebp
               	jne	0x43c32b <__cxa_guard_acquire+0x5a>
               	movl	$65792, %ecx            # imm = 0x10100
               	movl	%ebp, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	je	0x43c32b <__cxa_guard_acquire+0x5a>
               	cmpl	%eax, %r12d
               	je	0x43c30d <__cxa_guard_acquire+0x3c>
               	testl	%eax, %eax
               	je	0x43c2fd <__cxa_guard_acquire+0x2c>
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	%rbx, %rsi
               	movl	$202, %edi
               	xorl	%eax, %eax
               	callq	0x4137b0 <syscall@plt>
               	jmp	0x43c2fd <__cxa_guard_acquire+0x2c>
               	cmpb	$0, (%rdi)
               	jne	0x43c30d <__cxa_guard_acquire+0x3c>
               	cmpb	$0, 1(%rdi)
               	je	0x43c37a <__cxa_guard_acquire+0xa9>
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	136939(%rip), %rdx      # 0x45da48 <vtable for __gnu_cxx::recursive_init_error>
               	leaq	136908(%rip), %rsi      # 0x45da30 <typeinfo for __gnu_cxx::recursive_init_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	12869(%rip), %rdx       # 0x43f5ba <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	callq	0x43c225 <__cxa_throw>
               	movb	$1, 1(%rdi)
               	movl	$1, %eax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	xorl	%eax, %eax
               	retq

<__cxa_guard_abort>:
               	cmpq	$0, 138274(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	movq	%rdi, %rsi
               	je	0x43c3bb <__cxa_guard_abort+0x2d>
               	xorl	%eax, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43c3bf <__cxa_guard_abort+0x31>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	movb	$0, 1(%rdi)
               	retq

<__cxa_guard_release>:
               	cmpq	$0, 138224(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	movq	%rdi, %rsi
               	je	0x43c3f0 <__cxa_guard_release+0x30>
               	movl	$1, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43c3f7 <__cxa_guard_release+0x37>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x4137b0 <syscall@plt>
               	movb	$0, 1(%rdi)
               	movb	$1, (%rdi)
               	retq

<__cxxabiv1::__terminate(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	jmp	0x43c405 <__cxxabiv1::__terminate(void (*)())+0xd>
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x4138f0 <abort@plt>

<std::set_terminate(void (*)())>:
               	leaq	146839(%rip), %rdx      # 0x4601a8 <__cxxabiv1::__terminate_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_terminate()>:
               	leaq	146825(%rip), %rax      # 0x4601a8 <__cxxabiv1::__terminate_handler>
               	movq	(%rax), %rax
               	retq

<std::terminate()>:
               	pushq	%rax
               	callq	0x43c418 <std::get_terminate()>
               	movq	%rax, %rdi
               	callq	0x43c3f8 <__cxxabiv1::__terminate(void (*)())>

<__cxxabiv1::__unexpected(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	callq	0x43c423 <std::terminate()>

<std::set_unexpected(void (*)())>:
               	leaq	146808(%rip), %rdx      # 0x4601b8 <__cxxabiv1::__unexpected_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_unexpected()>:
               	leaq	146794(%rip), %rax      # 0x4601b8 <__cxxabiv1::__unexpected_handler>
               	movq	(%rax), %rax
               	retq

<std::unexpected()>:
               	pushq	%rax
               	callq	0x43c447 <std::get_unexpected()>
               	movq	%rax, %rdi
               	callq	0x43c431 <__cxxabiv1::__unexpected(void (*)())>

<std::bad_alloc::what() const>:
               	leaq	35764(%rip), %rax       # 0x44501b <typeinfo name for kotlin::gc::GCSchedulerData+0x1a22>
               	retq

<std::bad_alloc::~bad_alloc()>:
               	leaq	136033(%rip), %rax      # 0x45d7d0 <vtable for std::bad_alloc>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::bad_alloc::~bad_alloc()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c468 <std::bad_alloc::~bad_alloc()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>

<__cxa_get_globals_fast>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__cxa_get_globals>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__gnu_cxx::__verbose_terminate_handler()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpb	$0, 251900(%rip)        # 0x479cc8 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	movq	137973(%rip), %rbx      # 0x45dfc8 <write+0x45dfc8>
               	je	0x43c4e4 <__gnu_cxx::__verbose_terminate_handler()+0x27>
               	movq	(%rbx), %rsi
               	leaq	35659(%rip), %rdi       # 0x44502a <typeinfo name for kotlin::gc::GCSchedulerData+0x1a31>
               	jmp	0x43c56f <__gnu_cxx::__verbose_terminate_handler()+0xb2>
               	movb	$1, 251869(%rip)        # 0x479cc8 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	callq	0x43f562 <__cxa_current_exception_type>
               	testq	%rax, %rax
               	je	0x43c565 <__gnu_cxx::__verbose_terminate_handler()+0xa8>
               	movq	8(%rax), %rbp
               	cmpb	$42, (%rbp)
               	jne	0x43c502 <__gnu_cxx::__verbose_terminate_handler()+0x45>
               	incq	%rbp
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	leaq	12(%rsp), %rcx
               	movq	%rbp, %rdi
               	movl	$4294967295, 12(%rsp)   # imm = 0xFFFFFFFF
               	callq	0x4357c0 <__cxa_demangle>
               	movq	(%rbx), %rsi
               	leaq	35619(%rip), %rdi       # 0x445048 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a4f>
               	movq	%rax, %r12
               	callq	0x413790 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	je	0x43c53d <__gnu_cxx::__verbose_terminate_handler()+0x80>
               	movq	%rbp, %rdi
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	leaq	35629(%rip), %rdi       # 0x445079 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a80>
               	callq	0x413790 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	jne	0x43c560 <__gnu_cxx::__verbose_terminate_handler()+0xa3>
               	movq	%r12, %rdi
               	callq	0x4136d0 <free@plt>
               	callq	0x43c274 <__cxa_rethrow>
               	movq	(%rbx), %rsi
               	leaq	35597(%rip), %rdi       # 0x44507c <typeinfo name for kotlin::gc::GCSchedulerData+0x1a83>
               	callq	0x413790 <fputs@plt>
               	callq	0x4138f0 <abort@plt>
               	movq	%rax, %rdi
               	decq	%rdx
               	jne	0x43c5c0 <__gnu_cxx::__verbose_terminate_handler()+0x103>
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	callq	*16(%rdx)
               	movq	(%rbx), %rsi
               	leaq	35601(%rip), %rdi       # 0x4450aa <typeinfo name for kotlin::gc::GCSchedulerData+0x1ab1>
               	movq	%rax, %rbp
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x413790 <fputs@plt>
               	movq	(%rbx), %rsi
               	movl	$10, %edi
               	callq	0x413ae0 <fputc@plt>
               	callq	0x43c135 <__cxa_end_catch>
               	jmp	0x43c574 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c135 <__cxa_end_catch>
               	jmp	0x43c574 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	movq	%rax, %rbx
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<__cxa_call_terminate>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x43c606 <__cxa_call_terminate+0x2a>
               	movq	%rdi, %rbx
               	callq	0x43c0d7 <__cxa_begin_catch>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rax
               	cmpq	$1, %rax
               	ja	0x43c606 <__cxa_call_terminate+0x2a>
               	movq	-56(%rbx), %rdi
               	callq	0x43c3f8 <__cxxabiv1::__terminate(void (*)())>
               	callq	0x43c423 <std::terminate()>
               	nop

<std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	cmpq	%rdi, %rax
               	je	0x43c66c <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x60>
               	cmpq	%rdx, %rsi
               	je	0x43c64f <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x43>
               	movq	%rdx, (%rdi)
               	movq	8(%rsi), %rdx
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdx, 8(%rdi)
               	movq	%rax, 8(%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdi, (%rax)
               	movq	(%rdi), %rax
               	movq	%rdi, 8(%rax)
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	retq
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rax, 8(%rsi)
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	movq	%rdi, 8(%rdi)
               	movq	%rdi, (%rdi)
               	retq
               	cmpq	%rdx, %rsi
               	je	0x43c68d <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x81>
               	movq	%rdx, (%rax)
               	movq	8(%rsi), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rax, (%rdx)
               	movq	(%rax), %rdx
               	movq	%rax, 8(%rdx)
               	movq	%rsi, 8(%rsi)
               	movq	%rsi, (%rsi)
               	retq

<std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>:
               	cmpq	%rdx, %rdi
               	je	0x43c6b8 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)+0x2a>
               	movq	8(%rdx), %rcx
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rcx)
               	movq	%rdx, (%rax)
               	movq	8(%rdi), %rax
               	movq	%rsi, (%rax)
               	movq	%rcx, 8(%rdi)
               	movq	8(%rsi), %rcx
               	movq	%rcx, 8(%rdx)
               	movq	%rax, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_reverse()>:
               	movq	%rdi, %rax
               	movq	(%rax), %rdx
               	movq	8(%rax), %rcx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, (%rax)
               	movq	%rdx, %rax
               	cmpq	%rdx, %rdi
               	jne	0x43c6bd <std::__detail::_List_node_base::_M_reverse()+0x3>
               	retq

<std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rdi)
               	movq	%rax, 8(%rdi)
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rax)
               	movq	%rdi, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_unhook()>:
               	movq	(%rdi), %rax
               	movq	8(%rdi), %rdx
               	movq	%rax, (%rdx)
               	movq	%rdx, 8(%rax)
               	retq

<std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	24(%rdi), %rax
               	movq	16(%rax), %rdx
               	movq	%rdx, 24(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c710 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c722 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c732 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 16(%rdx)
               	jne	0x43c72e <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 16(%rdx)
               	jmp	0x43c732 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 24(%rdx)
               	movq	%rdi, 16(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	16(%rdi), %rax
               	movq	24(%rax), %rdx
               	movq	%rdx, 16(%rdi)
               	testq	%rdx, %rdx
               	je	0x43c750 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43c762 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43c772 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 24(%rdx)
               	jne	0x43c76e <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 24(%rdx)
               	jmp	0x43c772 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 16(%rdx)
               	movq	%rdi, 24(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	cmpl	$0, (%rdi)
               	jne	0x43c78f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 8(%rax)
               	jne	0x43c78f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	24(%rdi), %rax
               	retq
               	movq	16(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c7a6 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2b>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c7b9 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rdx, %rax
               	jmp	0x43c798 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x1d>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 16(%rax)
               	jne	0x43c7b9 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rax, %rdi
               	movq	8(%rax), %rax
               	jmp	0x43c7aa <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2f>
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c7d1 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c7f0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c7c3 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c7e7 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c7d8 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c7f0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c808 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c827 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43c7fa <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43c81e <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43c80f <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43c827 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	jmp	0x43c77b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)>:
               	jmp	0x43c77b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c6fb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43c73b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	%rsi, %r8
               	leaq	8(%rcx), %r11
               	movq	%rdx, 8(%rsi)
               	movq	$0, 16(%rsi)
               	movq	$0, 24(%rsi)
               	movl	$0, (%rsi)
               	testb	%dil, %dil
               	je	0x43c87d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x41>
               	movq	%rsi, 16(%rdx)
               	cmpq	%rdx, %rcx
               	jne	0x43c871 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x35>
               	movq	%rsi, 8(%rcx)
               	jmp	0x43c887 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x4b>
               	cmpq	%rdx, 16(%rcx)
               	jne	0x43c8cd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 16(%rcx)
               	jmp	0x43c8cd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 24(%rdx)
               	cmpq	%rdx, 24(%rcx)
               	jne	0x43c8cd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%r8, 24(%rcx)
               	jmp	0x43c8cd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	8(%r8), %r10
               	cmpl	$0, (%r10)
               	jne	0x43c94c <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x110>
               	movq	8(%r10), %r9
               	movq	16(%r9), %rax
               	cmpq	%rax, %r10
               	jne	0x43c90a <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xce>
               	movq	24(%r9), %rax
               	testq	%rax, %rax
               	je	0x43c8d8 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	cmpl	$0, (%rax)
               	jne	0x43c8d8 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	movl	$1, (%r10)
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	movq	%r9, %r8
               	movq	8(%rcx), %rax
               	cmpq	%r8, %rax
               	jne	0x43c88d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x51>
               	jmp	0x43c949 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x10d>
               	cmpq	%r8, 24(%r10)
               	jne	0x43c8ec <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xb0>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c6fb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c73b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43c944 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x108>
               	testq	%rax, %rax
               	je	0x43c914 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd8>
               	cmpl	$0, (%rax)
               	je	0x43c8b6 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x7a>
               	cmpq	%r8, 16(%r10)
               	jne	0x43c928 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xec>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43c73b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43c6fb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r8, %r9
               	jmp	0x43c8ca <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8e>
               	movq	%r8, %rax
               	movl	$1, (%rax)
               	retq

<std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	16(%rdi), %r9
               	movq	%rsi, %r10
               	movq	%rdi, %r8
               	movq	24(%rdi), %rsi
               	testq	%r9, %r9
               	je	0x43c9f8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xa5>
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43ca00 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43c984 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x31>
               	movq	%rdx, %rax
               	jmp	0x43c976 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x23>
               	movq	24(%rax), %rdx
               	cmpq	%r8, %rax
               	je	0x43c9fd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xaa>
               	movq	%rax, 8(%r9)
               	movq	%rax, %rcx
               	movq	%r9, 16(%rax)
               	cmpq	%rax, %rsi
               	je	0x43c9be <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x6b>
               	movq	8(%rax), %rcx
               	testq	%rdx, %rdx
               	je	0x43c9aa <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x57>
               	movq	%rcx, 8(%rdx)
               	movq	8(%rax), %rdi
               	movq	%rdx, 16(%rdi)
               	movq	%rsi, 24(%rax)
               	movq	24(%r8), %rsi
               	movq	%rax, 8(%rsi)
               	cmpq	%r8, 8(%r10)
               	jne	0x43c9ca <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x77>
               	movq	%rax, 8(%r10)
               	jmp	0x43c9de <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	8(%r8), %rsi
               	cmpq	%r8, 16(%rsi)
               	jne	0x43c9da <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x87>
               	movq	%rax, 16(%rsi)
               	jmp	0x43c9de <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	%rax, 24(%rsi)
               	movq	8(%r8), %rsi
               	movl	(%r8), %edi
               	movq	%rdx, %r9
               	movq	%rsi, 8(%rax)
               	movl	(%rax), %esi
               	movl	%edi, (%rax)
               	movl	%esi, (%r8)
               	jmp	0x43ca7d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	movq	%rsi, %r9
               	jmp	0x43ca00 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	%rdx, %r9
               	movq	8(%r8), %rcx
               	testq	%r9, %r9
               	je	0x43ca0d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xba>
               	movq	%rcx, 8(%r9)
               	cmpq	%r8, 8(%r10)
               	jne	0x43ca19 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xc6>
               	movq	%r9, 8(%r10)
               	jmp	0x43ca2d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	8(%r8), %rax
               	cmpq	%r8, 16(%rax)
               	jne	0x43ca29 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd6>
               	movq	%r9, 16(%rax)
               	jmp	0x43ca2d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	%r9, 24(%rax)
               	cmpq	%r8, 16(%r10)
               	jne	0x43ca55 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x102>
               	cmpq	$0, 24(%r8)
               	movq	%r9, %rax
               	jne	0x43ca43 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	8(%r8), %rax
               	jmp	0x43ca51 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43ca51 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	%rdx, %rax
               	jmp	0x43ca43 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	%rax, 16(%r10)
               	cmpq	%r8, 24(%r10)
               	jne	0x43ca7d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	cmpq	$0, 16(%r8)
               	movq	%r9, %rax
               	jne	0x43ca6b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	8(%r8), %rax
               	jmp	0x43ca79 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43ca79 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	%rdx, %rax
               	jmp	0x43ca6b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	%rax, 24(%r10)
               	cmpl	$0, (%r8)
               	leaq	8(%r10), %r11
               	je	0x43cbec <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	cmpq	%r9, 8(%r10)
               	je	0x43cbe3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	testq	%r9, %r9
               	je	0x43caac <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	cmpl	$1, (%r9)
               	je	0x43caac <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	movl	$1, (%r9)
               	jmp	0x43cbec <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	movq	16(%rcx), %rdi
               	cmpq	%r9, %rdi
               	jne	0x43cb4c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1f9>
               	movq	24(%rcx), %rdi
               	cmpl	$0, (%rdi)
               	jne	0x43cadd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x18a>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c6fb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43caef <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x19c>
               	cmpl	$1, (%rdx)
               	jne	0x43cb01 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1ae>
               	testq	%rax, %rax
               	je	0x43cb88 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	je	0x43cb88 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	testq	%rax, %rax
               	je	0x43cb0b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1b8>
               	cmpl	$1, (%rax)
               	jne	0x43cb23 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1d0>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c73b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	24(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43cb3c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1e9>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c6fb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43cbe3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	cmpl	$0, (%rdi)
               	jne	0x43cb6c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x219>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43c73b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movq	24(%rdi), %rdx
               	movq	16(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43cb7e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x22b>
               	cmpl	$1, (%rdx)
               	jne	0x43cb9d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	testq	%rax, %rax
               	je	0x43cb88 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	jne	0x43cb9d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	movq	8(%rcx), %rax
               	movq	%rcx, %r9
               	movl	$0, (%rdi)
               	movq	%rax, %rcx
               	jmp	0x43ca8b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x138>
               	testq	%rax, %rax
               	je	0x43cba7 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x254>
               	cmpl	$1, (%rax)
               	jne	0x43cbbf <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x26c>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43c6fb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	16(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43cbd8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x285>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43c73b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	testq	%r9, %r9
               	jne	0x43caa0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x14d>
               	movq	%r8, %rax
               	retq

<std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)>:
               	xorl	%eax, %eax
               	testq	%rdi, %rdi
               	je	0x43cc09 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	cmpl	$1, (%rdi)
               	jne	0x43cbfe <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0xe>
               	incl	%eax
               	cmpq	%rsi, %rdi
               	je	0x43cc09 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	movq	8(%rdi), %rdi
               	jmp	0x43cbf7 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x7>
               	retq

<std::(anonymous namespace)::run(void*)>:
               	movq	%rdi, %rax
               	testq	%rdi, %rdi
               	jne	0x43cc13 <std::(anonymous namespace)::run(void*)+0x9>
               	retq
               	pushq	%rbx
               	movq	(%rax), %rbx
               	movq	%rax, %rdi
               	callq	*8(%rax)
               	movq	%rbx, %rax
               	testq	%rbx, %rbx
               	jne	0x43cc14 <std::(anonymous namespace)::run(void*)+0xa>
               	popq	%rbx
               	retq
               	nop

<std::(anonymous namespace)::key_init()::key_s::~key_s()>:
               	movl	250030(%rip), %edi      # 0x479cdc <std::(anonymous namespace)::key>
               	jmp	0x413af0 <pthread_key_delete@plt>

<std::(anonymous namespace)::key_init()>:
               	movb	250007(%rip), %al       # 0x479cd0 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	leaq	91(%rip), %rdi          # 0x43cc9b <std::(anonymous namespace)::run()>
               	testb	%al, %al
               	jne	0x43cc96 <std::(anonymous namespace)::key_init()+0x63>
               	pushq	%rdx
               	leaq	249988(%rip), %rdi      # 0x479cd0 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43c2d1 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43cc8e <std::(anonymous namespace)::key_init()+0x5b>
               	leaq	-82(%rip), %rsi         # 0x43cc0a <std::(anonymous namespace)::run(void*)>
               	leaq	249977(%rip), %rdi      # 0x479cdc <std::(anonymous namespace)::key>
               	callq	0x4137e0 <pthread_key_create@plt>
               	leaq	249953(%rip), %rdi      # 0x479cd0 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43c3c0 <__cxa_guard_release>
               	leaq	136829(%rip), %rdx      # 0x45e2f8 <__dso_handle>
               	leaq	249942(%rip), %rsi      # 0x479cd8 <std::(anonymous namespace)::key_init()::ks>
               	leaq	-97(%rip), %rdi         # 0x43cc28 <std::(anonymous namespace)::key_init()::key_s::~key_s()>
               	callq	0x413b00 <__cxa_atexit@plt>
               	leaq	6(%rip), %rdi           # 0x43cc9b <std::(anonymous namespace)::run()>
               	popq	%rax
               	jmp	0x442ea0 <atexit>

<std::(anonymous namespace)::run()>:
               	pushq	%rbx
               	movl	249914(%rip), %edi      # 0x479cdc <std::(anonymous namespace)::key>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movl	249903(%rip), %edi      # 0x479cdc <std::(anonymous namespace)::key>
               	xorl	%esi, %esi
               	movq	%rax, %rbx
               	callq	0x4137f0 <pthread_setspecific@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43cc0a <std::(anonymous namespace)::run(void*)>

<std::condition_variable::condition_variable()>:
               	movl	$12, %ecx
               	xorl	%eax, %eax
               	rep		stosl	%eax, %es:(%rdi)
               	retq

<std::condition_variable::~condition_variable()>:
               	jmp	0x4139b0 <pthread_cond_destroy@plt>
               	nop

<std::condition_variable::wait(std::unique_lock<std::mutex>&)>:
               	pushq	%rdx
               	movq	(%rsi), %rsi
               	callq	0x413b10 <pthread_cond_wait@plt>
               	testl	%eax, %eax
               	je	0x43cce2 <std::condition_variable::wait(std::unique_lock<std::mutex>&)+0x12>
               	callq	0x43c423 <std::terminate()>
               	popq	%rax
               	retq

<std::condition_variable::notify_one()>:
               	pushq	%rdx
               	callq	0x413970 <pthread_cond_signal@plt>
               	testl	%eax, %eax
               	je	0x43ccf5 <std::condition_variable::notify_one()+0x11>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	popq	%rax
               	retq
               	nop

<std::condition_variable::notify_all()>:
               	pushq	%rdx
               	callq	0x4139f0 <pthread_cond_broadcast@plt>
               	testl	%eax, %eax
               	je	0x43cd09 <std::condition_variable::notify_all()+0x11>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	popq	%rax
               	retq

<std::(anonymous namespace)::notifier::run(void*)>:
               	testq	%rdi, %rdi
               	je	0x43cd39 <std::(anonymous namespace)::notifier::run(void*)+0x2e>
               	cmpq	$0, 135840(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43cd27 <std::(anonymous namespace)::notifier::run(void*)+0x1c>
               	movq	24(%rdi), %rdi
               	callq	0x413750 <pthread_mutex_unlock@plt>
               	movq	16(%rbx), %rdi
               	callq	0x43ccf8 <std::condition_variable::notify_all()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>
               	retq

<std::__at_thread_exit(std::__at_thread_exit_elt*)>:
               	cmpq	$0, 135798(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43cd5b <std::__at_thread_exit(std::__at_thread_exit_elt*)+0x21>
               	leaq	-284(%rip), %rsi        # 0x43cc33 <std::(anonymous namespace)::key_init()>
               	leaq	249718(%rip), %rdi      # 0x479ccc <std::__at_thread_exit(std::__at_thread_exit_elt*)::once>
               	callq	0x4139c0 <pthread_once@plt>
               	movl	249723(%rip), %edi      # 0x479cdc <std::(anonymous namespace)::key>
               	callq	0x4139d0 <pthread_getspecific@plt>
               	movl	249712(%rip), %edi      # 0x479cdc <std::(anonymous namespace)::key>
               	movq	%rbx, %rsi
               	movq	%rax, (%rbx)
               	popq	%rbx
               	jmp	0x4137f0 <pthread_setspecific@plt>

<std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movl	$32, %edi
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43c079 <operator new(unsigned long)>
               	movb	$0, 8(%rbp)
               	movq	%rax, %rbx
               	movq	%r12, 16(%rax)
               	movq	(%rbp), %rax
               	movq	$0, (%rbp)
               	movq	%rbx, %rdi
               	movq	%rax, 24(%rbx)
               	leaq	-166(%rip), %rax        # 0x43cd0b <std::(anonymous namespace)::notifier::run(void*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43cd3a <std::__at_thread_exit(std::__at_thread_exit_elt*)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43b745 <operator delete(void*)>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<(anonymous namespace)::generic_error_category::name() const>:
               	leaq	33501(%rip), %rax       # 0x4450b6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1abd>
               	retq

<(anonymous namespace)::system_error_category::name() const>:
               	leaq	33501(%rip), %rax       # 0x4450be <typeinfo name for kotlin::gc::GCSchedulerData+0x1ac5>
               	retq

<std::_V2::error_category::default_error_condition(int) const>:
               	movq	%rdi, %rdx
               	movl	%esi, %eax
               	retq

<std::_V2::error_category::equivalent(int, std::error_condition const&) const>:
               	movq	(%rdi), %rax
               	pushq	%rbx
               	movq	%rdx, %rbx
               	callq	*40(%rax)
               	xorl	%ecx, %ecx
               	cmpq	%rdx, 8(%rbx)
               	jne	0x43cdff <std::_V2::error_category::equivalent(int, std::error_condition const&) const+0x17>
               	cmpl	%eax, (%rbx)
               	sete	%cl
               	movl	%ecx, %eax
               	popq	%rbx
               	retq
               	nop

<std::_V2::error_category::equivalent(std::error_code const&, int) const>:
               	xorl	%eax, %eax
               	cmpq	8(%rsi), %rdi
               	jne	0x43ce11 <std::_V2::error_category::equivalent(std::error_code const&, int) const+0xd>
               	cmpl	%edx, (%rsi)
               	sete	%al
               	retq

<std::system_error::~system_error()>:
               	leaq	133927(%rip), %rax      # 0x45d940 <vtable for std::system_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f668 <std::runtime_error::~runtime_error()>
               	nop

<std::system_error::~system_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ce12 <std::system_error::~system_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::_V2::error_category::_M_message[abi:cxx11](int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rsi), %rax
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	8(%rsp), %rdx
               	movq	(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x43fa5c <std::__cow_string::__cow_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	addq	$40, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	%edx, %edi
               	callq	0x413830 <strerror@plt>
               	orq	$-1, %rdx
               	movq	%rax, %rsi
               	leaq	16(%rbx), %rax
               	movq	%rax, (%rbx)
               	testq	%rsi, %rsi
               	je	0x43ceb7 <(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const+0x33>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%rbx, %rdi
               	callq	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::~error_category()>:
               	retq
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	leaq	133603(%rip), %rax      # 0x45d8b0 <vtable for (anonymous namespace)::system_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43cec4 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cec6 <(anonymous namespace)::system_error_category::~system_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	leaq	133489(%rip), %rax      # 0x45d860 <vtable for (anonymous namespace)::generic_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43cec4 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cee8 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::_V2::error_category::~error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cec4 <std::_V2::error_category::~error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::_V2::system_category()>:
               	leaq	144029(%rip), %rax      # 0x4601c0 <(anonymous namespace)::system_category_instance>
               	retq

<std::_V2::generic_category()>:
               	leaq	144029(%rip), %rax      # 0x4601c8 <(anonymous namespace)::generic_category_instance>
               	retq

<(anonymous namespace)::system_error_category::default_error_condition(int) const>:
               	cmpl	$84, %esi
               	pushq	%rbx
               	movl	%esi, %ebx
               	je	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cf6c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x40>
               	cmpl	$43, %esi
               	jg	0x43cf51 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x25>
               	cmpl	$42, %esi
               	jge	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	testl	%esi, %esi
               	jle	0x43cfae <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	cmpl	$14, %esi
               	jle	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	subl	$16, %esi
               	cmpl	$24, %esi
               	jmp	0x43cfa5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$67, %esi
               	je	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cf60 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x34>
               	subl	$60, %esi
               	cmpl	$3, %esi
               	jmp	0x43cfa5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$71, %esi
               	je	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jl	0x43cfae <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	subl	$74, %esi
               	jmp	0x43cfa2 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x76>
               	cmpl	$111, %esi
               	jg	0x43cf8d <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x61>
               	cmpl	$110, %esi
               	jge	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	cmpl	$95, %esi
               	je	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cf85 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x59>
               	subl	$88, %esi
               	cmpl	$5, %esi
               	jmp	0x43cfa5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$97, %esi
               	cmpl	$10, %esi
               	jmp	0x43cfa5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$125, %esi
               	je	0x43cfa7 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43cf9c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x70>
               	subl	$113, %esi
               	cmpl	$2, %esi
               	jmp	0x43cfa5 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$130, %esi
               	cmpl	$1, %esi
               	ja	0x43cfae <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	callq	0x43cf24 <std::_V2::generic_category()>
               	jmp	0x43cfb3 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x87>
               	callq	0x43cf1c <std::_V2::system_category()>
               	movq	%rax, %rdx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq

<std::__throw_system_error(int)>:
               	pushq	%r13
               	movl	%edi, %r13d
               	movl	$32, %edi
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rsp, %r12
               	movq	%rax, %rbx
               	callq	0x43cf24 <std::_V2::generic_category()>
               	movl	%r13d, %edx
               	movq	%r12, %rdi
               	movq	%rax, %rbp
               	movq	(%rax), %rax
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d3c4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r12, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	133432(%rip), %rax      # 0x45d940 <vtable for std::system_error>
               	movq	%rbx, %rdi
               	movl	%r13d, 16(%rbx)
               	leaq	-516(%rip), %rdx        # 0x43ce12 <std::system_error::~system_error()>
               	leaq	133099(%rip), %rsi      # 0x45d808 <typeinfo for std::system_error>
               	movq	%rbp, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%r12, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43d03d <std::__throw_system_error(int)+0x83>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::error_code::default_error_condition() const>:
               	movq	8(%rdi), %rax
               	movl	(%rdi), %esi
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	movq	40(%rdx), %rdx
               	jmpq	*%rdx

<std::chrono::_V2::system_clock::now()>:
               	subq	$24, %rsp
               	xorl	%edi, %edi
               	movq	%rsp, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<std::chrono::_V2::steady_clock::now()>:
               	subq	$24, %rsp
               	movl	$1, %edi
               	movq	%rsp, %rsi
               	callq	0x4137a0 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq
               	nop

<std::bad_function_call::what() const>:
               	leaq	32794(%rip), %rax       # 0x4450c5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1acc>
               	retq

<std::bad_function_call::~bad_function_call()>:
               	leaq	133325(%rip), %rax      # 0x45d980 <vtable for std::bad_function_call>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::bad_function_call::~bad_function_call()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d0ac <std::bad_function_call::~bad_function_call()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::__throw_bad_function_call()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	133276(%rip), %rdx      # 0x45d980 <vtable for std::bad_function_call>
               	leaq	133245(%rip), %rsi      # 0x45d968 <typeinfo for std::bad_function_call>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-80(%rip), %rdx         # 0x43d0ac <std::bad_function_call::~bad_function_call()>
               	callq	0x43c225 <__cxa_throw>
               	nop

<std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	cmpq	$12, %rsi
               	ja	0x43d16c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x6a>
               	leaq	35376(%rip), %rax       # 0x445b48 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const::__fast_bkt>
               	flds	(%rdi)
               	movzbl	(%rax,%rsi), %eax
               	movl	%eax, 4(%rsp)
               	fimull	4(%rsp)
               	movl	%eax, %ebp
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b20 <ceil@plt>
               	movsd	24281(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x443018 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43d150 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x4e>
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	jmp	0x43d163 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x61>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	movzbl	%bpl, %eax
               	jmp	0x43d202 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x100>
               	leaq	35309(%rip), %rcx       # 0x445b60 <std::__detail::__prime_list>
               	incq	%rsi
               	movl	$297, %edx              # imm = 0x129
               	leaq	48(%rcx), %rbp
               	movq	%rdx, %rax
               	sarq	%rax
               	leaq	(%rbp,%rax,8), %rdi
               	cmpq	(%rdi), %rsi
               	ja	0x43d199 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x97>
               	testq	%rax, %rax
               	jle	0x43d1a6 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xa4>
               	movq	%rax, %rdx
               	jmp	0x43d17f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x7d>
               	subq	%rax, %rdx
               	leaq	8(%rdi), %rbp
               	leaq	-1(%rdx), %rax
               	jmp	0x43d18f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x8d>
               	leaq	2424(%rcx), %rdx
               	orq	$-1, %rax
               	cmpq	%rdx, %rbp
               	je	0x43d1fa <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	fildll	(%rbp)
               	cmpq	$0, (%rbp)
               	jns	0x43d1c6 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xc4>
               	fadds	23890(%rip)             # 0x442f18 <_IO_stdin_used+0x18>
               	fmuls	(%rbx)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b20 <ceil@plt>
               	movsd	24121(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x443018 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43d1ec <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xea>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43d1fa <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>:
               	addq	%rcx, %rdx
               	cmpq	8(%rdi), %rdx
               	jb	0x43d2f6 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xec>
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	flds	(%rdi)
               	movq	%rdx, (%rsp)
               	fildll	(%rsp)
               	testq	%rdx, %rdx
               	jns	0x43d231 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x27>
               	fadds	23783(%rip)             # 0x442f18 <_IO_stdin_used+0x18>
               	fdiv	%st(1), %st
               	movq	%rsi, (%rsp)
               	fildll	(%rsp)
               	testq	%rsi, %rsi
               	jns	0x43d249 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x3f>
               	fadds	23763(%rip)             # 0x442f18 <_IO_stdin_used+0x18>
               	fxch	%st(1)
               	jmp	0x43d24b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x41>
               	fxch	%st(1)
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	fcomi	%st(1), %st
               	jb	0x43d2b1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xa7>
               	fstp	%st(1)
               	fstp	%st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b30 <floor@plt>
               	addsd	23984(%rip), %xmm0      # 0x443020 <_IO_stdin_used+0x120>
               	comisd	23968(%rip), %xmm0      # 0x443018 <_IO_stdin_used+0x118>
               	jae	0x43d281 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x77>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43d293 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x89>
               	subsd	23951(%rip), %xmm0      # 0x443018 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	leaq	(%rbp,%rbp), %rsi
               	movq	%rbx, %rdi
               	cmpq	%rsi, %rax
               	cmovaeq	%rax, %rsi
               	callq	0x43d102 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>
               	movq	%rax, %rdx
               	movl	$1, %eax
               	jmp	0x43d2fb <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	fstp	%st(0)
               	fmulp	%st, %st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b30 <floor@plt>
               	comisd	23884(%rip), %xmm0      # 0x443018 <_IO_stdin_used+0x118>
               	jae	0x43d2d9 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xcf>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	jmp	0x43d2f0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xe6>
               	subsd	23863(%rip), %xmm0      # 0x443018 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	xorl	%eax, %eax
               	xorl	%edx, %edx
               	jmp	0x43d2fb <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	retq
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<__once_proxy>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	jmpq	*%rax
               	nop

<std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43fa5c <std::__cow_string::__cow_string(char const*, unsigned long)>

<std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	133137(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43d31a <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d326 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133124(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d326 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133138(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d326 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133152(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d326 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133166(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	133179(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43d31a <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d3c4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133166(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d3c4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133180(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d3c4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	133194(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
               	testq	%rdx, %rdx
               	je	0x43d451 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xa>
               	jmp	0x413780 <memcmp@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::find(char const*, unsigned long, char const&)>:
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43d467 <std::char_traits<char>::find(char const*, unsigned long, char const&)+0x13>
               	movsbl	(%rdx), %esi
               	movq	%rax, %rdx
               	jmp	0x413b40 <memchr@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::copy(char*, char const*, unsigned long)>:
               	movq	%rdi, %rax
               	movq	%rdx, %rcx
               	testq	%rdx, %rdx
               	je	0x43d477 <std::char_traits<char>::copy(char*, char const*, unsigned long)+0xd>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>:
               	movq	%rsi, 8(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>:
               	movq	%rsi, 16(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>:
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>:
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>:
               	movq	(%rsi), %rax
               	testq	%rax, %rax
               	jns	0x43d4c5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x15>
               	pushq	%rax
               	leaq	31440(%rip), %rdi       # 0x444f90 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x440658 <std::__throw_length_error(char const*)>
               	cmpq	%rdx, %rax
               	jbe	0x43d4e9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	addq	%rdx, %rdx
               	cmpq	%rdx, %rax
               	jae	0x43d4e9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	testq	%rdx, %rdx
               	js	0x43d4dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x2c>
               	movq	%rdx, (%rsi)
               	jmp	0x43d4e9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	movq	%rax, (%rsi)
               	movq	(%rsi), %rdi
               	incq	%rdi
               	jmp	0x43c079 <operator new(unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	addq	$16, %rax
               	cmpq	%rax, %rdi
               	je	0x43d508 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x14>
               	jmp	0x43b745 <operator delete(void*)>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>:
               	movq	(%rdi), %rdi
               	jmp	0x43b745 <operator delete(void*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>:
               	movq	8(%rdi), %rcx
               	movq	%rsi, %rax
               	cmpq	%rcx, %rsi
               	jbe	0x43d53b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const+0x21>
               	pushq	%rsi
               	leaq	31657(%rip), %rdi       # 0x4450d7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x4406e6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rax, %rsi
               	subq	8(%rdi), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x43d55b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const+0x1f>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x440658 <std::__throw_length_error(char const*)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const>:
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x43d580 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const+0x14>
               	addq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d58c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	jmp	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43d59c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x43d5a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136b0 <memmove@plt>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x43d5b3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x43d5bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>:
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movq	%rsi, 8(%rsp)
               	cmpq	$15, %rsi
               	jbe	0x43d5ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x2e>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	8(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x43d602 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x44>
               	movq	(%rbx), %rdi
               	movsbl	%bpl, %edx
               	callq	0x43d5a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)>:
               	movsbl	%dl, %edx
               	jmp	0x43d5be <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d622 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43d62f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x43d65a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	cmpq	%rsi, %rdi
               	je	0x43d6dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>
               	pushq	%r13
               	leaq	16(%rdi), %rax
               	movl	$15, %edx
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rsi), %rbp
               	cmpq	%rax, (%rdi)
               	je	0x43d681 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x25>
               	movq	16(%rdi), %rdx
               	movq	%rsi, %r12
               	movq	%rdi, %rbx
               	cmpq	%rbp, %rdx
               	jae	0x43d6b2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
               	leaq	8(%rsp), %rsi
               	movq	%rbp, 8(%rsp)
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rbx, %rdi
               	movq	%rax, %r13
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%r13, (%rbx)
               	movq	%rax, 16(%rbx)
               	testq	%rbp, %rbp
               	je	0x43d6c6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6a>
               	movq	(%r12), %rsi
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	leaq	(%rbp,%rdx), %r14
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	movq	%rsi, %rax
               	subq	%r14, %rax
               	movq	%rax, 8(%rsp)
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	movl	$15, %edx
               	addq	%rsi, %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	je	0x43d72c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x4e>
               	movq	16(%rdi), %rdx
               	leaq	24(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, %r12
               	testq	%rbp, %rbp
               	je	0x43d74f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x71>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdx
               	movq	%rax, %rdi
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	testq	%r13, %r13
               	je	0x43d768 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	testq	%r15, %r15
               	je	0x43d768 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	leaq	(%r12,%rbp), %rdi
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	cmpq	$0, 8(%rsp)
               	je	0x43d788 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xaa>
               	movq	(%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	8(%rsp), %rdx
               	addq	%r12, %rdi
               	addq	%r14, %rsi
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	24(%rsp), %rax
               	movq	%r12, (%rbx)
               	movq	%rax, 16(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	(%rsi,%rdx), %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rdx
               	subq	%rax, %rdx
               	je	0x43d7d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	testq	%rbp, %rbp
               	je	0x43d7d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rdi), %rdi
               	addq	%rdi, %rax
               	addq	%rsi, %rdi
               	movq	%rax, %rsi
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbx), %rdx
               	subq	%rbp, %rax
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movsbl	%dl, %edx
               	movq	%rax, (%rdi)
               	jmp	0x43d5be <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, (%rbp)
               	movq	(%rsi), %rax
               	cmpq	%rax, %r12
               	jne	0x43d853 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2d>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43d85f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	%rax, (%rbp)
               	movq	16(%rsi), %rax
               	movq	%rax, 16(%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	%r12, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rdx
               	movq	%rdi, (%rbp)
               	movq	-16(%rsi), %rcx
               	cmpq	%rcx, %rsi
               	jne	0x43d8bc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x40>
               	movl	$16, %edx
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	jmp	0x43d8df <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x63>
               	movq	%rcx, (%rbp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 8(%rbp)
               	movq	16(%rbx), %rcx
               	movq	%rcx, 16(%rbp)
               	movq	%rsi, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	jmp	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d65c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rcx
               	movq	-16(%rsi), %rax
               	movq	(%rdi), %rdi
               	cmpq	%rax, %rsi
               	jne	0x43d931 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	8(%rbx), %rdx
               	testq	%rdx, %rdx
               	je	0x43d91f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x27>
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbp), %rdx
               	movq	%rax, 8(%rbp)
               	movb	$0, (%rdx,%rax)
               	jmp	0x43d967 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	leaq	16(%rbp), %rcx
               	cmpq	%rcx, %rdi
               	je	0x43d940 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x48>
               	movq	16(%rbp), %rdx
               	jmp	0x43d942 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4a>
               	xorl	%edi, %edi
               	movq	%rax, (%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rax
               	movq	%rax, 16(%rbp)
               	testq	%rdi, %rdi
               	je	0x43d964 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
               	movq	%rdi, (%rbx)
               	movq	%rdx, 16(%rbx)
               	jmp	0x43d967 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	movq	%rsi, (%rbx)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43da12 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x12>
               	movq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rsi, 8(%rsp)
               	cmpq	%rax, %rsi
               	jae	0x43da2d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x19>
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rsi
               	leaq	16(%rdi), %rbp
               	movl	$15, %edx
               	cmpq	%rsi, %rbp
               	je	0x43da42 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x2e>
               	movq	16(%rdi), %rdx
               	movq	8(%rsp), %rcx
               	cmpq	%rdx, %rcx
               	je	0x43daaf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	movq	%rdi, %rbx
               	cmpq	$15, %rcx
               	ja	0x43da5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x46>
               	cmpq	%rdx, %rcx
               	jbe	0x43da93 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x7f>
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%rax, %rbp
               	movq	8(%rbx), %rax
               	movq	%rbp, %rdi
               	leaq	1(%rax), %rdx
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%rbp, (%rbx)
               	movq	%rax, 16(%rbx)
               	jmp	0x43daaf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	cmpq	%rsi, %rbp
               	je	0x43daaf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	leaq	1(%rax), %rdx
               	movq	%rbp, %rdi
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rdi
               	callq	0x43b745 <operator delete(void*)>
               	movq	%rbp, (%rbx)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43dac8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x12>
               	movq	16(%rdi), %rax
               	cmpq	%rax, 8(%rdi)
               	jae	0x43dae6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x30>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x43da14 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43c135 <__cxa_end_catch>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()>:
               	movq	(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movb	$0, (%rax)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const>:
               	cmpq	$0, 8(%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43db2a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const+0x18>
               	pushq	%rax
               	leaq	30187(%rip), %rdi       # 0x44510e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4406e6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43db4a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)+0x18>
               	pushq	%rax
               	leaq	30155(%rip), %rdi       # 0x44510e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4406e6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
               	pushq	%r13
               	movl	%esi, %r13d
               	movl	$15, %eax
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	8(%rdi), %rbp
               	leaq	16(%rdi), %rdx
               	leaq	1(%rbp), %r12
               	cmpq	%rdx, (%rdi)
               	je	0x43db9d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x27>
               	movq	16(%rdi), %rax
               	cmpq	%rax, %r12
               	jbe	0x43dbb7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x41>
               	movl	$1, %r8d
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d6de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r13b, (%rax,%rbp)
               	movq	(%rbx), %rax
               	movq	%r12, 8(%rbx)
               	movb	$0, 1(%rax,%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x43db76 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d65c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	jmp	0x43d8f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	30030(%rip), %rdx       # 0x445152 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	cmpq	$-1, %r12
               	jne	0x43dc24 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	jmp	0x43dc42 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	testq	%r12, %r12
               	je	0x43dc42 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	movq	8(%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	subq	%rbp, %rdx
               	cmpq	%r12, %rdx
               	cmovaq	%r12, %rdx
               	callq	0x43d7ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43d7ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	subq	%rax, %rbx
               	addq	8(%rdi), %rax
               	cmpq	%rax, %rdx
               	jne	0x43dc8f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x21>
               	movq	%rbx, 8(%rdi)
               	movb	$0, (%rsi)
               	jmp	0x43dc9a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x2c>
               	subq	%rsi, %rdx
               	movq	%rbx, %rsi
               	callq	0x43d7ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()>:
               	movq	8(%rdi), %rax
               	movl	$1, %edx
               	leaq	-1(%rax), %rsi
               	jmp	0x43d7ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r15
               	movl	%r8d, %r15d
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	29846(%rip), %rcx       # 0x445166 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	movq	%r12, %rdx
               	movq	%r12, %r14
               	pushq	%rbx
               	movq	%rbp, %rsi
               	movq	%rdi, %rbx
               	subq	%rbp, %r14
               	pushq	%r9
               	callq	0x43d53c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%rbx), %rdx
               	movq	(%rbx), %rdi
               	leaq	16(%rbx), %rcx
               	movl	$15, %eax
               	addq	%rdx, %r14
               	cmpq	%rcx, %rdi
               	je	0x43dd07 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x4f>
               	movq	16(%rbx), %rax
               	cmpq	%r14, %rax
               	jb	0x43dd2c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x74>
               	leaq	(%rbp,%r13), %rax
               	subq	%rax, %rdx
               	je	0x43dd3f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	cmpq	%r12, %rbp
               	je	0x43dd3f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	addq	%r13, %rdi
               	leaq	(%rdi,%rbp), %rsi
               	addq	%r12, %rdi
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43dd3f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	movq	%r12, %r8
               	xorl	%ecx, %ecx
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d6de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	testq	%r12, %r12
               	je	0x43dd56 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x9e>
               	movq	(%rbx), %rdi
               	movsbl	%r15b, %edx
               	movq	%r12, %rsi
               	addq	%r13, %rdi
               	callq	0x43d5a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r14, 8(%rbx)
               	movb	$0, (%rax,%r14)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>:
               	movq	%rsi, %rcx
               	movq	8(%rdi), %rsi
               	movsbl	%dl, %r8d
               	xorl	%edx, %edx
               	jmp	0x43dcb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>:
               	movq	8(%rdi), %rax
               	cmpq	%rsi, %rax
               	jae	0x43dd98 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x14>
               	movsbl	%dl, %edx
               	subq	%rax, %rsi
               	jmp	0x43dd72 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	jbe	0x43dda5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x21>
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x43dd84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>:
               	movsbl	%dl, %r8d
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43dcb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x43ddae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	29595(%rip), %rdx       # 0x445183 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43dcb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43dcb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movl	%r8d, 4(%rsp)
               	cmpq	%rdx, %rax
               	leaq	29501(%rip), %rdx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x43dcb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x43dcb8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	callq	0x43de86 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	leaq	29404(%rip), %rcx       # 0x4451ae <typeinfo name for kotlin::gc::GCSchedulerData+0x1bb5>
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%r8, %rdx
               	movq	%rbx, %rsi
               	subq	$40, %rsp
               	callq	0x43d53c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%r12), %rax
               	movq	%r15, %rcx
               	movq	(%r12), %rbp
               	subq	%rbx, %rcx
               	movl	$15, %edx
               	movq	%rcx, 16(%rsp)
               	addq	%rax, %rcx
               	movq	%rcx, 8(%rsp)
               	leaq	16(%r12), %rcx
               	cmpq	%rcx, %rbp
               	je	0x43df1b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	16(%r12), %rdx
               	cmpq	8(%rsp), %rdx
               	jb	0x43e01a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x15e>
               	addq	%r14, %rbp
               	addq	%rbx, %r14
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	subq	%r14, %rax
               	movq	%rax, %r14
               	callq	0x43d56c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>
               	cmpq	%r15, %rbx
               	setne	%cl
               	testq	%r14, %r14
               	setne	%dl
               	andl	%edx, %ecx
               	testb	%al, %al
               	je	0x43df76 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xba>
               	testb	%cl, %cl
               	je	0x43df65 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xa9>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	testq	%r15, %r15
               	je	0x43e02e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	jmp	0x43dfea <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x12e>
               	testq	%r15, %r15
               	je	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	cmpq	%r15, %rbx
               	jb	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movb	%cl, 31(%rsp)
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movb	31(%rsp), %cl
               	testb	%cl, %cl
               	je	0x43e02e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	jmp	0x43dfa4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe8>
               	testb	%cl, %cl
               	je	0x43dfb6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xfa>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	cmpq	%r15, %rbx
               	jae	0x43e02e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	leaq	(%rbp,%rbx), %rdi
               	leaq	(%r13,%r15), %rax
               	cmpq	%rax, %rdi
               	jb	0x43dfda <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x11e>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43e02e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	cmpq	%r13, %rdi
               	ja	0x43dfef <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x133>
               	movq	16(%rsp), %rsi
               	movq	%r15, %rdx
               	addq	%r13, %rsi
               	movq	%rbp, %rdi
               	jmp	0x43e013 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x157>
               	movq	%rdi, %rbx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	subq	%r13, %rbx
               	movq	%rbx, %rdx
               	callq	0x43d591 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	%r15, %rdx
               	leaq	(%rbp,%r15), %rsi
               	leaq	(%rbp,%rbx), %rdi
               	subq	%rbx, %rdx
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43e02e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %r8
               	movq	%r13, %rcx
               	movq	%rbx, %rdx
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x43d6de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	8(%rsp), %rax
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r12)
               	movq	(%r12), %rax
               	movb	$0, (%rax,%rbx)
               	addq	$40, %rsp
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %r8
               	movq	(%rdi), %rbx
               	subq	%rdx, %r8
               	leaq	29007(%rip), %rdx       # 0x4451c7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %r8
               	cmovaq	%rcx, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rbp), %rdx
               	movq	8(%rsp), %r8
               	xorl	%esi, %esi
               	addq	$24, %rsp
               	leaq	(%rbx,%rax), %rcx
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43debc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>:
               	movq	%rdx, %r8
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43debc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e0a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)>:
               	jmp	0x43e0a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	movq	8(%r9), %rdx
               	leaq	-1(%rcx), %r8
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43debc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)>:
               	jmp	0x43e0cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movq	%r8, (%rsp)
               	cmpq	%rdx, %rax
               	leaq	28788(%rip), %rdx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	(%rsp), %r8
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43debc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rdx), %r8
               	movq	(%rdx), %rcx
               	xorl	%edx, %edx
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rdx, %rdi
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	8(%rdx), %rax
               	movq	(%rdx), %rbx
               	leaq	28681(%rip), %rdx       # 0x445183 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	$16, %rsp
               	xorl	%edx, %edx
               	leaq	(%rbx,%rax), %rcx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>:
               	movq	%rcx, %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x43e1ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28572(%rip), %rdx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%r8, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rcx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rcx), %rax
               	movq	%r9, %rbx
               	movq	(%rcx), %rbp
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r14, %rdx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rcx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43e26a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43e26a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	jmp	0x43e26a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43e0fe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rax
               	leaq	16(%rbx), %r8
               	movl	$15, %ecx
               	movq	(%rdi), %rdi
               	leaq	(%rax,%rdx), %rbp
               	cmpq	%r8, %rdi
               	je	0x43e307 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x23>
               	movq	16(%rbx), %rcx
               	cmpq	%rcx, %rbp
               	ja	0x43e31b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x37>
               	testq	%rdx, %rdx
               	je	0x43e32e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	addq	%rax, %rdi
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43e32e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	movq	%rdx, %r8
               	movq	%rsi, %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d6de <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43e2e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43e340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rdi), %rax
               	movq	%rcx, %rbx
               	movq	(%rdi), %rbp
               	subq	%rdx, %rax
               	leaq	28265(%rip), %rdx       # 0x4451dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rsi
               	movq	%rbx, %rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e2e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>:
               	pushq	%r12
               	leaq	28223(%rip), %rcx       # 0x4451dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %r12
               	xorl	%esi, %esi
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d53c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e2e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)>:
               	jmp	0x43e394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)>:
               	jmp	0x43e394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	xorl	%esi, %esi
               	pushq	%rbx
               	repne		scasb	%es:(%rdi), %al
               	movq	%rbp, %rdi
               	movq	%rcx, %rdx
               	leaq	28138(%rip), %rcx       # 0x4451dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	movq	%rbx, %rdx
               	callq	0x43d53c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rdx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e2e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>:
               	jmp	0x43e3ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28107(%rip), %rdx       # 0x4451f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	testq	%rbx, %rbx
               	je	0x43e463 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const+0x49>
               	movq	(%r12), %rsi
               	movq	%rbx, %rdx
               	movq	%r13, %rdi
               	addq	%rbp, %rsi
               	callq	0x43d581 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
               	cmpq	%rsi, %rdi
               	je	0x43e5c3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x153>
               	pushq	%r14
               	pushq	%r13
               	leaq	16(%rdi), %r13
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdx
               	movq	(%rsi), %rax
               	cmpq	%rdx, %r13
               	jne	0x43e56e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xfe>
               	cmpq	%rax, %r12
               	jne	0x43e54a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xda>
               	cmpq	$0, 8(%rdi)
               	movq	8(%rsi), %rax
               	je	0x43e4f3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x83>
               	testq	%rax, %rax
               	je	0x43e521 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xb1>
               	movq	%rsp, %r14
               	movq	%r12, %rsi
               	movl	$16, %edx
               	movq	%r14, %rdi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	movl	$16, %edx
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movl	$16, %edx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43e5a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	testq	%rax, %rax
               	je	0x43e5a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	jmp	0x43e545 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xd5>
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbp), %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	movq	$0, 8(%rbp)
               	movb	$0, (%rax)
               	jmp	0x43e5b6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x146>
               	movq	16(%rsi), %r14
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rax, (%rbp)
               	movq	%r12, (%rbx)
               	movq	%r14, 16(%rbp)
               	jmp	0x43e5a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movq	16(%rdi), %r14
               	cmpq	%rax, %r12
               	jne	0x43e594 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x124>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43d46a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%rax, (%rbx)
               	movq	%r13, (%rbp)
               	jmp	0x43e5a2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x132>
               	movq	%rax, (%rdi)
               	movq	16(%rsi), %rax
               	movq	%rdx, (%rsi)
               	movq	%rax, 16(%rdi)
               	movq	%r14, 16(%rbx)
               	movq	8(%rbp), %rax
               	movq	8(%rbx), %rdx
               	movq	%rdx, 8(%rbp)
               	movq	%rax, 8(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	testq	%rcx, %rcx
               	jne	0x43e5f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x24>
               	cmpq	%rdx, %rsi
               	jae	0x43e66b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x43e667 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x43e667 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	(%rdi), %rbp
               	movb	(%r13), %dl
               	movq	%rcx, %rbx
               	movl	$1, %r12d
               	leaq	31(%rsp), %r15
               	subq	%rbx, %r12
               	leaq	(%rbp,%rsi), %rcx
               	movb	%dl, 31(%rsp)
               	leaq	(%rbp,%rax), %rdi
               	subq	%rax, %rsi
               	movq	%rcx, 8(%rsp)
               	cmpq	%rbx, %rsi
               	jb	0x43e667 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r12, %rsi
               	movq	%r15, %rdx
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	je	0x43e667 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rax, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43e659 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%r14, %rax
               	subq	%rbp, %rax
               	jmp	0x43e66b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%r14), %rdi
               	subq	%rdi, %rsi
               	jmp	0x43e627 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e5d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e5d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	subq	$24, %rsp
               	movb	%sil, 12(%rsp)
               	movq	8(%rdi), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x43e6dd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	movq	(%rdi), %rbp
               	movq	%rdx, %rax
               	leaq	12(%rsp), %rdx
               	subq	%rax, %rsi
               	leaq	(%rbp,%rax), %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e6dd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	subq	%rbp, %rax
               	movq	%rax, %rbx
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rcx
               	ja	0x43e739 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x43e739 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x43e735 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x43e713 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e6e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e6e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e79b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x43e79b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	(%rdi), %rdx
               	leaq	-1(%rax), %rcx
               	cmpb	%sil, (%rdx,%rax)
               	je	0x43e79b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	%rcx, %rax
               	jmp	0x43e783 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x17>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%r12, %r12
               	je	0x43e7d7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	cmpq	8(%rbp), %rbx
               	jae	0x43e7d7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%rbp), %rdx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e7db <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x43e7b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e79c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e79c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e6a2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e864 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x43e864 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	cmpq	%rdx, %rax
               	movq	%rsi, %r12
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43e868 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e844 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x43e868 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e818 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e818 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43e76c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	8(%rdi), %r12
               	movq	%rdx, %rbx
               	cmpq	%r12, %rbx
               	jae	0x43e8df <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x39>
               	movq	(%rbp), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e8e3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3d>
               	incq	%rbx
               	jmp	0x43e8be <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e8a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e8a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	movq	%rdx, %rax
               	cmpq	%rcx, %rax
               	jae	0x43e932 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1a>
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e936 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x43e91f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x7>
               	orq	$-1, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43e981 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %r12
               	cmpq	%rdx, %rax
               	movq	%rsi, %rbp
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43e981 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43e963 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43e938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43e938 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43e9dd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43e9dd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x43e9ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rbx
               	movq	8(%rsi), %rbp
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	cmpq	%rbp, %rbx
               	movq	%rbp, %rdx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ea11 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	26584(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	(%r13), %rdi
               	movq	(%r14), %rsi
               	subq	%rbp, %rbx
               	cmpq	%r12, %rbx
               	cmovaq	%r12, %rbx
               	movq	8(%r14), %r12
               	movq	%rbx, %rdx
               	cmpq	%rbx, %r12
               	cmovbeq	%r12, %rdx
               	addq	%rbp, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ea78 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rcx, %r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	26467(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	leaq	26445(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	movq	%r15, %rdi
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbx
               	movq	8(%rsp), %r9
               	movq	(%r15), %rsi
               	movq	(%r14), %rdi
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	8(%r15), %rbp
               	subq	%r13, %rbp
               	movq	%rbx, %rdx
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43eb1b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const+0x99>
               	addq	$24, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	%rdi, %r8
               	movq	8(%rdi), %rbp
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r8), %rdi
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbx, %rbp
               	movq	%rbx, %rdx
               	cmovbeq	%rbp, %rdx
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43eb6d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43d63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	26231(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbp
               	movq	%r12, %rdi
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r14), %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rsi
               	notq	%rsi
               	leaq	-1(%rsi), %rbx
               	movq	%r12, %rsi
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r13, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ebe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const+0x72>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43d63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	26122(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	pushq	%r9
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	%r12, %rdx
               	movq	(%r13), %rdi
               	movq	%r14, %rsi
               	subq	%rbp, %rbx
               	cmpq	%r15, %rbx
               	cmovaq	%r15, %rbx
               	cmpq	%r12, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%rbp, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43ec56 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x68>
               	popq	%rcx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43d63c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbx), %rax
               	movb	$0, 16(%rbx)
               	movq	%rbx, %rdi
               	movq	%rax, (%rbx)
               	movq	$0, 8(%rbx)
               	movq	8(%r12), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbp
               	addq	%rbp, %rsi
               	callq	0x43da14 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e394 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	$0, 8(%rdi)
               	movb	$0, 16(%rdi)
               	movq	8(%rdx), %rax
               	leaq	1(%rax), %rsi
               	callq	0x43da14 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x43dd72 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ed86 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d622 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ed4c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43edf4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d62f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43edba <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>
               	nop

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43ee5d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43ee5d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	leaq	25538(%rip), %rdi       # 0x44521a <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x440583 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ee89 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d622 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43ee36 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x43eeb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ee36 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43ef2f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43ef2f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	leaq	25328(%rip), %rdi       # 0x44521a <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x440583 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43ef5b <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43d4b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43d62f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25266(%rip), %rdx       # 0x445244 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c4b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rdi, %r8
               	orq	$-1, %rdx
               	movq	%rax, (%rdi)
               	testq	%rsi, %rsi
               	je	0x43f02c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x28>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%r8, %rdi
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	25107(%rip), %rdx       # 0x445253 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r13, %rsi
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	movq	%rsi, %rdx
               	subq	%r13, %rdx
               	addq	8(%r12), %rdx
               	popq	%rcx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25029(%rip), %rdx       # 0x445253 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	24972(%rip), %rdx       # 0x44526e <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x43d51a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43f07e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<bool __gnu_cxx::operator==<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>:
               	testq	%rdi, %rdi
               	je	0x43f133 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)+0xb>
               	movq	(%rdi), %rax
               	jmpq	*8(%rax)
               	retq

<execute_native_thread_routine>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	movq	%rbx, %rdi
               	callq	0x43f128 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	popq	%rdx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f128 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::system_error::system_error(std::error_code, char const*)>:
               	pushq	%r15
               	movq	%rsi, %r15
               	pushq	%r14
               	movq	%rdx, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$104, %rsp
               	movq	(%rdx), %rax
               	movl	%esi, %edx
               	movq	%r14, %rsi
               	leaq	64(%rsp), %rbp
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	leaq	24813(%rip), %rdx       # 0x445283 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8a>
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x43e1c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	leaq	32(%rsp), %r12
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	callq	0x43d826 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rdx
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	callq	0x43e1c2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	movq	%rsp, %r13
               	movq	%rax, %rsi
               	movq	%r13, %rdi
               	callq	0x43d826 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43d3c4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r13, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%r12, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	124747(%rip), %rax      # 0x45d940 <vtable for std::system_error>
               	movq	%r15, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rbx
               	movq	%r13, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43f223 <std::system_error::system_error(std::error_code, char const*)+0xc1>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43f230 <std::system_error::system_error(std::error_code, char const*)+0xce>
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::thread::_State::~_State()>:
               	retq
               	nop

<std::thread::_State::~_State()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f240 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::thread::join()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43f26d <std::thread::join()+0x19>
               	xorl	%esi, %esi
               	callq	0x413b50 <pthread_join@plt>
               	testl	%eax, %eax
               	je	0x43f279 <std::thread::join()+0x25>
               	jmp	0x43f272 <std::thread::join()+0x1e>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::detach()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43f299 <std::thread::detach()+0x17>
               	callq	0x4139e0 <pthread_detach@plt>
               	testl	%eax, %eax
               	je	0x43f2a5 <std::thread::detach()+0x23>
               	jmp	0x43f29e <std::thread::detach()+0x1c>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>:
               	pushq	%rbx
               	movq	(%rsi), %rcx
               	movq	%rsi, %rbx
               	leaq	-392(%rip), %rdx        # 0x43f134 <execute_native_thread_routine>
               	xorl	%esi, %esi
               	callq	0x413b60 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43f2ce <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())+0x20>
               	movl	%eax, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::thread::hardware_concurrency()>:
               	pushq	%rax
               	callq	0x413b70 <get_nprocs@plt>
               	movl	$0, %edx
               	testl	%eax, %eax
               	cmovsl	%edx, %eax
               	popq	%rdx
               	retq

<std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdi, (%rsp)
               	movq	%rsp, %rbx
               	movq	%rsi, 8(%rsp)
               	movq	%rbx, %rsi
               	movq	%rbx, %rdi
               	callq	0x413b80 <nanosleep@plt>
               	incl	%eax
               	jne	0x43f314 <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x2a>
               	callq	0x413820 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x43f2fb <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x11>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43f37c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	126092(%rip), %rbp      # 0x45dfb8 <write+0x45dfb8>
               	testq	%rbp, %rbp
               	je	0x43f33b <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x21>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 8(%rbx)
               	jmp	0x43f344 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x2a>
               	movl	8(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 8(%rbx)
               	decl	%eax
               	jne	0x43f37c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	testq	%rbp, %rbp
               	je	0x43f360 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x46>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 12(%rbx)
               	jmp	0x43f369 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x4f>
               	movl	12(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 12(%rbx)
               	decl	%eax
               	jne	0x43f37c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	movq	24(%rax), %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<execute_native_thread_routine_compat>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rsp, %rbx
               	movq	%rax, (%rsp)
               	movq	16(%rdi), %rax
               	movq	$0, 16(%rdi)
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	leaq	8(%rbx), %rdi
               	callq	0x43f31a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43f31a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rbx
               	movq	8(%rsi), %rdx
               	movq	$0, (%rsi)
               	movq	$0, 8(%rsi)
               	leaq	8(%rsp), %r12
               	movq	8(%rbx), %rax
               	movq	%rbx, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	%rdx, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43f31a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	xorl	%esi, %esi
               	movq	%rbx, %rcx
               	movq	%rbp, %rdi
               	leaq	-172(%rip), %rdx        # 0x43f380 <execute_native_thread_routine_compat>
               	callq	0x413b60 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43f467 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())+0x91>
               	movl	%eax, %ebp
               	movq	8(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	$0, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43f31a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movl	%ebp, %edi
               	callq	0x43cfba <std::__throw_system_error(int)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	cmpq	$0, 125754(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	jne	0x43f4bf <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0x4f>
               	movl	$32, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	callq	0x43cf24 <std::_V2::generic_category()>
               	leaq	24045(%rip), %rcx       # 0x445286 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8d>
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43f162 <std::system_error::system_error(std::error_code, char const*)>
               	leaq	-9886(%rip), %rdx       # 0x43ce12 <std::system_error::~system_error()>
               	leaq	123729(%rip), %rsi      # 0x45d808 <typeinfo for std::system_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	(%rsi), %rax
               	movq	$0, (%rsi)
               	movq	%rsp, %rbx
               	xorl	%edx, %edx
               	movq	%rax, (%rsp)
               	movq	8(%rsi), %rax
               	movq	$0, 8(%rsi)
               	movq	%rbx, %rsi
               	movq	%rax, 8(%rsp)
               	callq	0x43f3d6 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>
               	leaq	8(%rbx), %rdi
               	callq	0x43f31a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	jmp	0x43f514 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0xa4>
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43f31a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::type_info::~type_info()>:
               	retq
               	nop

<std::type_info::__is_function_p() const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::~type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f51c <std::type_info::~type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	movq	8(%rdi), %rdi
               	movq	8(%rsi), %rsi
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43f561 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43f561 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	pushq	%rax
               	callq	0x413a90 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxa_current_exception_type>:
               	pushq	%rcx
               	callq	0x43c4a8 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	je	0x43f580 <__cxa_current_exception_type+0x1e>
               	movq	(%rax), %rdx
               	testb	$1, 80(%rax)
               	je	0x43f57d <__cxa_current_exception_type+0x1b>
               	leaq	-112(%rdx), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	retq

<__cxa_pure_virtual>:
               	pushq	%rax
               	movl	$27, %edx
               	movl	$2, %edi
               	leaq	23835(%rip), %rsi       # 0x4452af <typeinfo name for kotlin::gc::GCSchedulerData+0x1cb6>
               	callq	0x4138e0 <write@plt>
               	callq	0x43c423 <std::terminate()>

<__cxa_deleted_virtual>:
               	pushq	%rax
               	movl	$30, %edx
               	movl	$2, %edi
               	leaq	23835(%rip), %rsi       # 0x4452cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1cd2>
               	callq	0x4138e0 <write@plt>
               	callq	0x43c423 <std::terminate()>

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	leaq	124039(%rip), %rax      # 0x45da48 <vtable for __gnu_cxx::recursive_init_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f5ba <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<std::logic_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::runtime_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::logic_error::~logic_error()>:
               	leaq	124239(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::domain_error::~domain_error()>:
               	leaq	124241(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f5f2 <std::logic_error::~logic_error()>
               	nop

<std::invalid_argument::~invalid_argument()>:
               	leaq	124261(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f5f2 <std::logic_error::~logic_error()>
               	nop

<std::length_error::~length_error()>:
               	leaq	124281(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f5f2 <std::logic_error::~logic_error()>
               	nop

<std::out_of_range::~out_of_range()>:
               	leaq	124301(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f5f2 <std::logic_error::~logic_error()>
               	nop

<std::runtime_error::~runtime_error()>:
               	leaq	124321(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::range_error::~range_error()>:
               	leaq	124323(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f668 <std::runtime_error::~runtime_error()>
               	nop

<std::overflow_error::~overflow_error()>:
               	leaq	124343(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f668 <std::runtime_error::~runtime_error()>
               	nop

<std::underflow_error::~underflow_error()>:
               	leaq	124363(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f668 <std::runtime_error::~runtime_error()>
               	nop

<std::logic_error::~logic_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f5f2 <std::logic_error::~logic_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::domain_error::~domain_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f618 <std::domain_error::~domain_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::invalid_argument::~invalid_argument()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f62c <std::invalid_argument::~invalid_argument()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::length_error::~length_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f640 <std::length_error::~length_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::out_of_range::~out_of_range()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f654 <std::out_of_range::~out_of_range()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::runtime_error::~runtime_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f668 <std::runtime_error::~runtime_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::range_error::~range_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f68e <std::range_error::~range_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::overflow_error::~overflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6a2 <std::overflow_error::~overflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::underflow_error::~underflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f6b6 <std::underflow_error::~underflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43b745 <operator delete(void*)>

<std::logic_error::logic_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	123851(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f76c <std::logic_error::logic_error(std::string const&)>
               	leaq	123838(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f76c <std::logic_error::logic_error(std::string const&)>
               	leaq	123852(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f76c <std::logic_error::logic_error(std::string const&)>
               	leaq	123866(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f76c <std::logic_error::logic_error(std::string const&)>
               	leaq	123880(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	123893(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f80a <std::runtime_error::runtime_error(std::string const&)>
               	leaq	123880(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f80a <std::runtime_error::runtime_error(std::string const&)>
               	leaq	123894(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f80a <std::runtime_error::runtime_error(std::string const&)>
               	leaq	123908(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<_txnal_cow_string_D1_commit(void*)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rsi
               	callq	0x4415e0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::logic_error::logic_error(std::logic_error const&)>:
               	leaq	123553(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::logic_error::operator=(std::logic_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x44224e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::runtime_error::runtime_error(std::runtime_error const&)>:
               	leaq	123703(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::runtime_error::operator=(std::runtime_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x44224e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::logic_error::logic_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	123440(%rip), %rax      # 0x45db48 <vtable for std::logic_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442604 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::domain_error::domain_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	leaq	123420(%rip), %rax      # 0x45db70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	leaq	123434(%rip), %rax      # 0x45db98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	leaq	123448(%rip), %rax      # 0x45dbc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	leaq	123462(%rip), %rax      # 0x45dbe8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	123472(%rip), %rax      # 0x45dc10 <vtable for std::runtime_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442604 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bc70 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::range_error::range_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f9ac <std::runtime_error::runtime_error(char const*)>
               	leaq	123452(%rip), %rax      # 0x45dc38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f9ac <std::runtime_error::runtime_error(char const*)>
               	leaq	123466(%rip), %rax      # 0x45dc60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43f9ac <std::runtime_error::runtime_error(char const*)>
               	leaq	123480(%rip), %rax      # 0x45dc88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::__sso_string::__sso_string(std::string const&)>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rdx
               	jmp	0x44092a <std::__sso_string::__sso_string(char const*, unsigned long)>

<std::__cow_string::__cow_string()>:
               	leaq	238227(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::__cow_string::__cow_string(std::string const&)>:
               	jmp	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::__cow_string(char const*, unsigned long)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rcx
               	callq	0x44264e <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq
               	nop

<std::__cow_string::__cow_string(std::__cow_string const&)>:
               	jmp	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::operator=(std::__cow_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44224e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cow_string::~__cow_string()>:
               	jmp	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	nop

<std::__cow_string::__cow_string(std::__cow_string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	238153(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__cow_string::operator=(std::__cow_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441434 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::_M_message(int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rsi), %rax
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	*24(%rax)
               	movq	8(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	-24(%rsi), %rdx
               	callq	0x44092a <std::__sso_string::__sso_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movl	$1, %ebp
               	pushq	%rbx
               	leaq	-1(%rsi), %rbx
               	pushq	%rdx
               	leaq	(%rbx,%rbp), %rdi
               	callq	0x413b90 <_ITM_RU1@plt>
               	testb	%al, %al
               	je	0x43fb23 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x28>
               	incq	%rbp
               	jmp	0x43fb11 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x16>
               	leaq	24(%rbp), %rdi
               	callq	0x413ba0 <_ZGTtnam@plt>
               	leaq	-1(%rbp), %rdx
               	movl	$0, 16(%rax)
               	leaq	24(%rax), %rbx
               	movq	%r12, %rsi
               	movq	%rdx, 8(%rax)
               	movq	%rbx, %rdi
               	movq	%rdx, (%rax)
               	movq	%rbp, %rdx
               	callq	0x413bb0 <_ITM_memcpyRtWn@plt>
               	movq	%rbx, (%r13)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	callq	0x43c274 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43c135 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_txnal_cow_string_c_str(void const*)>:
               	jmp	0x413bc0 <_ITM_RU8@plt>

<_txnal_sso_string_c_str(void const*)>:
               	jmp	0x413bc0 <_ITM_RU8@plt>

<_txnal_cow_string_D1(void*)>:
               	pushq	%rax
               	callq	0x43fb79 <_txnal_cow_string_c_str(void const*)>
               	leaq	-771(%rip), %rdi        # 0x43f88d <_txnal_cow_string_D1_commit(void*)>
               	movl	$1, %esi
               	popq	%rcx
               	leaq	-24(%rax), %rdx
               	jmp	0x413bd0 <_ITM_addUserCommitAction@plt>

<_txnal_logic_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_txnal_runtime_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_ZGTtNSt11logic_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21334(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f5f2 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f5f2 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21228(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f5f2 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f5f2 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11logic_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fc88 <_ZGTtNSt11logic_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNKSt11logic_error4whatEv>:
               	pushq	%rax
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb79 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt12domain_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21063(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f944 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f618 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f618 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20957(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f944 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f618 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f618 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12domain_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fd97 <_ZGTtNSt12domain_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt16invalid_argumentC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20807(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f95e <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f62c <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f62c <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20701(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f95e <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f62c <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f62c <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentD2Ev>:
               	pushq	%rax
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt16invalid_argumentD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fe97 <_ZGTtNSt16invalid_argumentD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt12length_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20551(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f978 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f640 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f640 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20445(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f978 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f640 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f640 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12length_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ff97 <_ZGTtNSt12length_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt12out_of_rangeC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20295(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f992 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f654 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f654 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20189(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f992 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f654 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f654 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeD2Ev>:
               	pushq	%rax
               	callq	0x43fb9f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12out_of_rangeD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440097 <_ZGTtNSt12out_of_rangeD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt13runtime_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20039(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9ac <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f668 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f668 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19933(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9ac <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f668 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f668 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt13runtime_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440197 <_ZGTtNSt13runtime_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNKSt13runtime_error4whatEv>:
               	pushq	%rax
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb79 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt11range_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19768(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9ec <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f68e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f68e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19662(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43f9ec <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f68e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f68e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11range_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4402a6 <_ZGTtNSt11range_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt14overflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19512(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa06 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6a2 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6a2 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19406(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa06 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6a2 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6a2 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt14overflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4403a6 <_ZGTtNSt14overflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<_ZGTtNSt15underflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19256(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa20 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6b6 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6b6 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19150(%rip), %rsi       # 0x444f0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x43fa20 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413be0 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x43fb7e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43fafb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x43f6b6 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43f6b6 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x43fba4 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x43fb83 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt15underflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4404a6 <_ZGTtNSt15underflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413bf0 <_ZGTtdlPv@plt>

<std::__throw_bad_exception()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	119287(%rip), %rdx      # 0x45d6d0 <vtable for std::bad_exception>
               	leaq	119184(%rip), %rsi      # 0x45d670 <typeinfo for std::bad_exception>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-18559(%rip), %rdx      # 0x43bc72 <std::bad_exception::~bad_exception()>
               	callq	0x43c225 <__cxa_throw>

<std::__throw_bad_alloc()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	119496(%rip), %rdx      # 0x45d7d0 <vtable for std::bad_alloc>
               	leaq	119465(%rip), %rsi      # 0x45d7b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-16568(%rip), %rdx      # 0x43c468 <std::bad_alloc::~bad_alloc()>
               	callq	0x43c225 <__cxa_throw>

<std::__throw_bad_cast()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	120721(%rip), %rdx      # 0x45dcc8 <vtable for std::bad_cast>
               	leaq	120690(%rip), %rsi      # 0x45dcb0 <typeinfo for std::bad_cast>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9363(%rip), %rdx        # 0x4429e2 <std::bad_cast::~bad_cast()>
               	callq	0x43c225 <__cxa_throw>

<std::__throw_bad_typeid()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	leaq	120738(%rip), %rdx      # 0x45dd08 <vtable for std::bad_typeid>
               	leaq	120707(%rip), %rsi      # 0x45dcf0 <typeinfo for std::bad_typeid>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9368(%rip), %rdx        # 0x442a16 <std::bad_typeid::~bad_typeid()>
               	callq	0x43c225 <__cxa_throw>

<std::__throw_logic_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f904 <std::logic_error::logic_error(char const*)>
               	leaq	-4022(%rip), %rdx       # 0x43f5f2 <std::logic_error::~logic_error()>
               	leaq	120001(%rip), %rsi      # 0x45da70 <typeinfo for std::logic_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_domain_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f944 <std::domain_error::domain_error(char const*)>
               	leaq	-4055(%rip), %rdx       # 0x43f618 <std::domain_error::~domain_error()>
               	leaq	119954(%rip), %rsi      # 0x45da88 <typeinfo for std::domain_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_invalid_argument(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f95e <std::invalid_argument::invalid_argument(char const*)>
               	leaq	-4106(%rip), %rdx       # 0x43f62c <std::invalid_argument::~invalid_argument()>
               	leaq	119907(%rip), %rsi      # 0x45daa0 <typeinfo for std::invalid_argument>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_length_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f978 <std::length_error::length_error(char const*)>
               	leaq	-4157(%rip), %rdx       # 0x43f640 <std::length_error::~length_error()>
               	leaq	119860(%rip), %rsi      # 0x45dab8 <typeinfo for std::length_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_out_of_range(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f992 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4208(%rip), %rdx       # 0x43f654 <std::out_of_range::~out_of_range()>
               	leaq	119813(%rip), %rsi      # 0x45dad0 <typeinfo for std::out_of_range>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_out_of_range_fmt(char const*, ...)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rsp, %rbp
               	pushq	%r12
               	pushq	%rbx
               	subq	$208, %rsp
               	movq	%rsi, -184(%rbp)
               	movq	%rdx, -176(%rbp)
               	movq	%rcx, -168(%rbp)
               	movq	%r8, -160(%rbp)
               	movq	%r9, -152(%rbp)
               	testb	%al, %al
               	je	0x440741 <std::__throw_out_of_range_fmt(char const*, ...)+0x5b>
               	movaps	%xmm0, -144(%rbp)
               	movaps	%xmm1, -128(%rbp)
               	movaps	%xmm2, -112(%rbp)
               	movaps	%xmm3, -96(%rbp)
               	movaps	%xmm4, -80(%rbp)
               	movaps	%xmm5, -64(%rbp)
               	movaps	%xmm6, -48(%rbp)
               	movaps	%xmm7, -32(%rbp)
               	movq	%r10, %rdi
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbp), %rax
               	movl	$8, -216(%rbp)
               	movq	%rax, -208(%rbp)
               	leaq	-192(%rbp), %rax
               	movl	$48, -212(%rbp)
               	movq	%rax, -200(%rbp)
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	leaq	511(%rdx), %rsi
               	movq	%r10, %rdx
               	addq	$534, %rcx              # imm = 0x216
               	andq	$-16, %rcx
               	subq	%rcx, %rsp
               	leaq	-216(%rbp), %rcx
               	leaq	15(%rsp), %rbx
               	andq	$-16, %rbx
               	movq	%rbx, %rdi
               	callq	0x440a36 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>
               	movl	$16, %edi
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %r12
               	callq	0x43f992 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4477(%rip), %rdx       # 0x43f654 <std::out_of_range::~out_of_range()>
               	leaq	119544(%rip), %rsi      # 0x45dad0 <typeinfo for std::out_of_range>
               	movq	%r12, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_runtime_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f9ac <std::runtime_error::runtime_error(char const*)>
               	leaq	-4528(%rip), %rdx       # 0x43f668 <std::runtime_error::~runtime_error()>
               	leaq	119497(%rip), %rsi      # 0x45dae8 <typeinfo for std::runtime_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_range_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43f9ec <std::range_error::range_error(char const*)>
               	leaq	-4561(%rip), %rdx       # 0x43f68e <std::range_error::~range_error()>
               	leaq	119450(%rip), %rsi      # 0x45db00 <typeinfo for std::range_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_overflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43fa06 <std::overflow_error::overflow_error(char const*)>
               	leaq	-4612(%rip), %rdx       # 0x43f6a2 <std::overflow_error::~overflow_error()>
               	leaq	119403(%rip), %rsi      # 0x45db18 <typeinfo for std::overflow_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::__throw_underflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43bbab <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x43fa20 <std::underflow_error::underflow_error(char const*)>
               	leaq	-4663(%rip), %rdx       # 0x43f6b6 <std::underflow_error::~underflow_error()>
               	leaq	119356(%rip), %rsi      # 0x45db30 <typeinfo for std::underflow_error>
               	movq	%rbx, %rdi
               	callq	0x43c225 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43bbed <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	nop

<std::__sso_string::__sso_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__sso_string::__sso_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43eeb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::__sso_string(char const*, unsigned long)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43ef08 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__sso_string::__sso_string(std::__sso_string const&)>:
               	jmp	0x43eeb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::operator=(std::__sso_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d65c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__sso_string::~__sso_string()>:
               	jmp	0x43d4f4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__sso_string::__sso_string(std::__sso_string&&)>:
               	jmp	0x43d826 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__sso_string::operator=(std::__sso_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d8f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__throw_insufficient_space(char const*, char const*)>:
               	pushq	%rbp
               	movq	%rdi, %r8
               	movq	%rsi, %rdx
               	movl	$105, %ecx
               	subq	%r8, %rdx
               	leaq	18796(%rip), %rsi       # 0x4452ea <typeinfo name for kotlin::gc::GCSchedulerData+0x1cf1>
               	leaq	128(%rdx), %rax
               	movq	%rsp, %rbp
               	andq	$-16, %rax
               	subq	$112, %rsp
               	subq	%rax, %rsp
               	leaq	-105(%rbp), %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	leaq	15(%rsp), %rax
               	leaq	-105(%rbp), %rsi
               	movl	$26, %ecx
               	andq	$-16, %rax
               	leaq	104(%rax), %r9
               	movq	%rax, %rdi
               	rep		movsl	(%rsi), %es:(%rdi)
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	movq	%rdx, %rcx
               	rep		movsb	(%rsi), %es:(%rdi)
               	movb	$0, 104(%rax,%rdx)
               	movq	%rax, %rdi
               	callq	0x440583 <std::__throw_logic_error(char const*)>

<__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rdx, %r9
               	movl	$10, %r11d
               	movq	%rsp, %rbp
               	pushq	%rbx
               	leaq	18799(%rip), %rbx       # 0x445353 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d5a>
               	subq	$40, %rsp
               	leaq	15(%rsp), %rdi
               	andq	$-16, %rdi
               	leaq	24(%rdi), %rcx
               	movq	%rcx, %r8
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	decq	%r8
               	divq	%r11
               	movb	(%rbx,%rdx), %dl
               	movb	%dl, (%r8)
               	cmpq	$9, %r9
               	jbe	0x440a14 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x48>
               	movq	%rax, %r9
               	jmp	0x4409f8 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x2c>
               	subq	%r8, %rcx
               	orl	$-1, %eax
               	movq	%rcx, %rdx
               	cmpq	%rsi, %rcx
               	ja	0x440a30 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x64>
               	subq	%rcx, %rdi
               	movl	%edx, %eax
               	leaq	24(%rdi), %rsi
               	movq	%r10, %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	movq	-8(%rbp), %rbx
               	leave
               	retq

<__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>:
               	pushq	%r14
               	leaq	-1(%rdi,%rsi), %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	(%rbp), %al
               	testb	%al, %al
               	je	0x440b3b <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x105>
               	cmpq	%r14, %rbx
               	jae	0x440b27 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cmpb	$37, %al
               	jne	0x440b16 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movb	1(%rbp), %al
               	cmpb	$115, %al
               	je	0x440a86 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x50>
               	cmpb	$122, %al
               	je	0x440ac6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x90>
               	cmpb	$37, %al
               	jne	0x440b16 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	incq	%rbp
               	jmp	0x440b16 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x440a9f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x69>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x440aad <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x77>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	(%rax), %rax
               	movb	(%rax), %dl
               	testb	%dl, %dl
               	je	0x440b32 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xfc>
               	cmpq	%r14, %rbx
               	je	0x440b27 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	incq	%rbx
               	incq	%rax
               	movb	%dl, -1(%rbx)
               	jmp	0x440ab0 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x7a>
               	cmpb	$117, 2(%rbp)
               	jne	0x440b16 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x440ae5 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xaf>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x440af3 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xbd>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	%r14, %rsi
               	movq	(%rax), %rdx
               	movq	%rbx, %rdi
               	subq	%rbx, %rsi
               	callq	0x4409cc <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>
               	testl	%eax, %eax
               	jle	0x440b27 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cltq
               	addq	$3, %rbp
               	addq	%rax, %rbx
               	jmp	0x440a4f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movb	(%rbp), %al
               	incq	%rbx
               	incq	%rbp
               	movb	%al, -1(%rbx)
               	jmp	0x440a4f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x440968 <__gnu_cxx::__throw_insufficient_space(char const*, char const*)>
               	addq	$2, %rbp
               	jmp	0x440a4f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rax
               	movb	$0, (%rbx)
               	popq	%rbx
               	subq	%r13, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_data(char*)>:
               	movq	%rsi, %rax
               	movq	%rsi, (%rdi)
               	retq
               	nop

<std::string::_M_rep() const>:
               	movq	(%rdi), %rax
               	subq	$24, %rax
               	retq

<std::string::_M_ibegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_iend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::_M_check(unsigned long, char const*) const>:
               	movq	(%rdi), %rcx
               	movq	%rsi, %rax
               	movq	-24(%rcx), %rcx
               	cmpq	%rsi, %rcx
               	jae	0x440b92 <std::string::_M_check(unsigned long, char const*) const+0x24>
               	pushq	%rsi
               	leaq	17746(%rip), %rdi       # 0x4450d7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x4406e6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq
               	nop

<std::string::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	addq	%rax, %rsi
               	movq	(%rdi), %rax
               	subq	-24(%rax), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x440bb6 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const+0x22>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x440658 <std::__throw_length_error(char const*)>
               	retq
               	nop

<std::string::_M_limit(unsigned long, unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq

<std::string::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x440bde <std::string::_M_disjunct(char const*) const+0x14>
               	addq	-24(%rdx), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::string::_M_copy(char*, char const*, unsigned long)>:
               	movq	%rdx, %rcx
               	cmpq	$1, %rdx
               	jne	0x440bed <std::string::_M_copy(char*, char const*, unsigned long)+0xe>
               	movb	(%rsi), %dl
               	movb	%dl, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440bf4 <std::string::_M_copy(char*, char const*, unsigned long)+0x15>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::string::_M_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x440c00 <std::string::_M_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x440c0a <std::string::_M_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136b0 <memmove@plt>
               	retq

<std::string::_M_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x440c17 <std::string::_M_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x440c20 <std::string::_M_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq

<std::string::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	jmp	0x440c21 <std::string::_S_copy_chars(char*, char*, char*)>

<std::string::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	jmp	0x440c2e <std::string::_S_copy_chars(char*, char const*, char const*)>

<std::string::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x440c59 <std::string::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq

<std::string::_S_empty_rep()>:
               	leaq	233599(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	233591(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	233569(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::string::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::end() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x440c8c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::cend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::crbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x440c8c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::size() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::length() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::max_size() const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	retq
               	nop

<std::string::capacity() const>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rax
               	retq

<std::string::empty() const>:
               	movq	(%rdi), %rax
               	cmpq	$0, -24(%rax)
               	sete	%al
               	retq

<std::string::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::at(unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x440d2f <std::string::at(unsigned long) const+0x1b>
               	pushq	%rax
               	leaq	17382(%rip), %rdi       # 0x44510e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4406e6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::back() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	leaq	-1(%rax,%rdx), %rax
               	retq
               	nop

<std::string::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	17567(%rip), %rdx       # 0x4451f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rsi
               	movq	-24(%rsi), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x440d8d <std::string::copy(char*, unsigned long, unsigned long) const+0x47>
               	addq	%rbp, %rsi
               	movq	%rbx, %rdx
               	movq	%r12, %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::string::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rsi
               	testq	%rcx, %rcx
               	jne	0x440dcb <std::string::find(char const*, unsigned long, unsigned long) const+0x27>
               	cmpq	%rdx, %rsi
               	jae	0x440e3f <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x440e3b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x440e3b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movb	(%r12), %dl
               	movq	%rcx, %rbp
               	leaq	(%r13,%rsi), %rcx
               	movl	$1, %r14d
               	movq	%rcx, 8(%rsp)
               	leaq	(%r13,%rax), %rdi
               	subq	%rax, %rsi
               	subq	%rbp, %r14
               	movb	%dl, 31(%rsp)
               	leaq	31(%rsp), %r15
               	cmpq	%rbp, %rsi
               	jb	0x440e3b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x440e3b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x440e2d <std::string::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%rbx, %rax
               	subq	%r13, %rax
               	jmp	0x440e3f <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%rbx), %rdi
               	subq	%rdi, %rsi
               	jmp	0x440dfb <std::string::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::find(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440da4 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440da4 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char, unsigned long) const>:
               	pushq	%rbp
               	orq	$-1, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rbx
               	movb	%sil, 12(%rsp)
               	movq	-24(%rbx), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x440eaf <std::string::find(char, unsigned long) const+0x39>
               	movq	%rdx, %rdi
               	leaq	12(%rsp), %rdx
               	subq	%rdi, %rsi
               	addq	%rbx, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x440eaf <std::string::find(char, unsigned long) const+0x39>
               	subq	%rbx, %rax
               	movq	%rax, %rbp
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	cmpq	%rax, %rcx
               	ja	0x440f0b <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x440f0b <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x440f07 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x440ee5 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::rfind(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440eba <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440eba <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x440f6e <std::string::rfind(char, unsigned long) const+0x30>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x440f6e <std::string::rfind(char, unsigned long) const+0x30>
               	leaq	-1(%rax), %rdx
               	cmpb	%sil, 1(%rdi,%rdx)
               	je	0x440f6e <std::string::rfind(char, unsigned long) const+0x30>
               	movq	%rdx, %rax
               	jmp	0x440f58 <std::string::rfind(char, unsigned long) const+0x1a>
               	retq
               	nop

<std::string::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%rbp, %rbp
               	je	0x440fab <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%r13), %rdx
               	cmpq	-24(%rdx), %rbx
               	jae	0x440fab <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	addq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x440faf <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x440f84 <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_first_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440f70 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440f70 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440e76 <std::string::find(char, unsigned long) const>
               	nop

<std::string::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x441038 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x441038 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x44103c <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x441018 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x44103c <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::find_last_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x440fec <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x440fec <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x440f3e <std::string::rfind(char, unsigned long) const>
               	nop

<std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbp
               	movq	%rdx, %rbx
               	movq	-24(%rbp), %r12
               	cmpq	%r12, %rbx
               	jae	0x4410b1 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x37>
               	leaq	(%rbp,%rbx), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x4410b5 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3b>
               	incq	%rbx
               	jmp	0x441092 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::find_first_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x44107a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x44107a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rcx
               	movq	%rdx, %rax
               	movq	-24(%rcx), %rdi
               	cmpq	%rdi, %rax
               	jae	0x441104 <std::string::find_first_not_of(char, unsigned long) const+0x1a>
               	cmpb	%sil, (%rcx,%rax)
               	jne	0x441108 <std::string::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x4410f4 <std::string::find_first_not_of(char, unsigned long) const+0xa>
               	orq	$-1, %rax
               	retq
               	nop

<std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x441153 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43d454 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x441153 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x441135 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_last_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x44110a <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x44110a <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x4411af <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpb	%sil, (%rdi,%rax)
               	jne	0x4411af <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x4411a0 <std::string::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::string::compare(std::string const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4411e3 <std::string::compare(std::string const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x440c3b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&) const>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	16391(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r12, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441249 <std::string::compare(unsigned long, unsigned long, std::string const&) const+0x61>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x440c3b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16294(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	16252(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%rbp), %rsi
               	movq	8(%rsp), %r9
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	subq	%r13, %rbp
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4412e8 <std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const+0x96>
               	addq	$16, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x440c3b <std::string::_S_compare(unsigned long, unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r8
               	movq	%rsi, %rdi
               	movq	-24(%r8), %rbp
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441339 <std::string::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x440c3b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	16045(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r8
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rsi
               	movq	%r12, %rdi
               	movq	-24(%rsi), %rbp
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	leaq	(%rsi,%r13), %rdi
               	movq	%r12, %rsi
               	movq	%rbp, %rdx
               	notq	%rcx
               	leaq	-1(%rcx), %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x4413ae <std::string::compare(unsigned long, unsigned long, char const*) const+0x70>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x440c3b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	15938(%rip), %rdx       # 0x445204 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%r8, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r12, %rdi
               	callq	0x43d447 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441416 <std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x60>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x440c3b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::string::_Rep::_S_empty_rep()>:
               	leaq	231605(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::string::_Rep::_M_is_leaked() const>:
               	movl	16(%rdi), %eax
               	shrl	$31, %eax
               	retq
               	nop

<std::string::swap(std::string&)>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44142c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	je	0x441457 <std::string::swap(std::string&)+0x23>
               	movq	(%rbx), %rax
               	movl	$0, -8(%rax)
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44142c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	movq	(%rbp), %rax
               	je	0x441473 <std::string::swap(std::string&)+0x3f>
               	movl	$0, -8(%rax)
               	movq	(%rbx), %rdx
               	movq	%rax, (%rbx)
               	movq	%rdx, (%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::operator=(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441434 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441434 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_is_shared() const>:
               	movl	16(%rdi), %eax
               	testl	%eax, %eax
               	setg	%al
               	retq
               	nop

<std::string::_Rep::_M_set_leaked()>:
               	movl	$4294967295, 16(%rdi)   # imm = 0xFFFFFFFF
               	retq

<std::string::_Rep::_M_set_sharable()>:
               	movl	$0, 16(%rdi)
               	retq

<std::string::_Rep::_M_set_length_and_sharable(unsigned long)>:
               	cmpq	117537(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x4414d0 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)+0x18>
               	movl	$0, 16(%rdi)
               	movq	%rsi, (%rdi)
               	movb	$0, 24(%rdi,%rsi)
               	retq
               	nop

<std::string::_Rep::_M_refdata()>:
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	pushq	%rbx
               	cmpq	%rax, %rdi
               	jbe	0x4414f4 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x1c>
               	leaq	15983(%rip), %rdi       # 0x44535e <typeinfo name for kotlin::gc::GCSchedulerData+0x1d65>
               	callq	0x440658 <std::__throw_length_error(char const*)>
               	movq	%rdi, %rbx
               	cmpq	%rsi, %rdi
               	jbe	0x441507 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x2f>
               	leaq	(%rsi,%rsi), %rax
               	cmpq	%rax, %rdi
               	cmovbq	%rax, %rbx
               	leaq	57(%rbx), %rax
               	cmpq	$4096, %rax             # imm = 0x1000
               	jbe	0x441538 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	cmpq	%rsi, %rbx
               	jbe	0x441538 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	andl	$4095, %eax             # imm = 0xFFF
               	addq	$4096, %rbx             # imm = 0x1000
               	subq	%rax, %rbx
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	cmpq	%rax, %rbx
               	cmovaq	%rax, %rbx
               	leaq	25(%rbx), %rdi
               	callq	0x43c079 <operator new(unsigned long)>
               	movq	%rbx, 8(%rax)
               	movl	$0, 16(%rax)
               	popq	%rbx
               	retq

<std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	testq	%rdi, %rdi
               	je	0x441589 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x3b>
               	movl	%esi, %ebp
               	xorl	%esi, %esi
               	movq	%rdi, %rbx
               	callq	0x4414d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movsbl	%bpl, %edx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c0b <std::string::_M_assign(char*, unsigned long, char)>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x441594 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x46>
               	leaq	231248(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rdx
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	xorl	%edi, %edi
               	callq	0x44154e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movl	%edx, %esi
               	movsbl	%sil, %esi
               	movq	%rcx, %rdx
               	callq	0x44154e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)>:
               	movsbl	%sil, %esi
               	jmp	0x44154e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	nop

<std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
               	jmp	0x43b745 <operator delete(void*)>
               	nop

<std::string::_Rep::_M_dispose(std::allocator<char> const&)>:
               	cmpq	117241(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x44160f <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	cmpq	$0, 117191(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x4415fd <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x1d>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 16(%rdi)
               	jmp	0x441606 <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x26>
               	movl	16(%rdi), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 16(%rdi)
               	testl	%eax, %eax
               	jg	0x44160f <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	jmp	0x4415da <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	subq	$24, %rsp
               	movq	(%rdi), %rdi
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x4415e0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::string::clear()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	movq	(%rbx), %rdi
               	testb	%al, %al
               	je	0x441663 <std::string::clear()+0x39>
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x4415e0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	leaq	231046(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rbx)
               	jmp	0x44166e <std::string::clear()+0x44>
               	subq	$24, %rdi
               	xorl	%esi, %esi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	subq	%rdx, %r13
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rbp
               	leaq	(%r13,%rbp), %rax
               	leaq	(%rdx,%rsi), %r13
               	movq	%rax, 8(%rsp)
               	subq	%r13, %rbp
               	cmpq	-16(%rdi), %rax
               	jbe	0x4416f2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x7e>
               	leaq	47(%rsp), %rax
               	movq	8(%rsp), %rdi
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rdx
               	movq	-16(%rax), %rsi
               	callq	0x4414d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	testq	%r14, %r14
               	leaq	24(%rax), %r15
               	je	0x441723 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	movq	(%rbx), %rsi
               	movq	%r14, %rdx
               	movq	%r15, %rdi
               	movq	%rax, 24(%rsp)
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	24(%rsp), %rax
               	jmp	0x441723 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	subq	$24, %rdi
               	movq	%rdx, %r15
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4416af <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x3b>
               	testq	%rbp, %rbp
               	je	0x441752 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	cmpq	%r15, %r12
               	je	0x441752 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	movq	(%rbx), %rdi
               	addq	%r14, %r12
               	movq	%rbp, %rdx
               	leaq	(%rdi,%r13), %rsi
               	addq	%r12, %rdi
               	callq	0x440bf5 <std::string::_M_move(char*, char const*, unsigned long)>
               	jmp	0x441752 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	testq	%rbp, %rbp
               	je	0x44173e <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xca>
               	movq	(%rbx), %rsi
               	leaq	24(%r14,%r12), %rdi
               	movq	%rbp, %rdx
               	addq	%rax, %rdi
               	addq	%r13, %rsi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4415e0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r15, (%rbx)
               	movq	(%rbx), %rdi
               	movq	8(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::_M_leak_hard()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	cmpq	116828(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x4417a7 <std::string::_M_leak_hard()+0x35>
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	je	0x44179d <std::string::_M_leak_hard()+0x2b>
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbx), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nop

<std::string::_M_leak()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	callq	0x44142c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	jne	0x4417c7 <std::string::_M_leak()+0x1d>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x441772 <std::string::_M_leak_hard()>
               	popq	%rbx
               	retq
               	nop

<std::string::begin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4417aa <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::rend()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x4417ca <std::string::begin()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::end()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4417aa <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x4417ec <std::string::end()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::operator[](unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	callq	0x4417aa <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::front()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4417aa <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::back()>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rbx
               	callq	0x4417aa <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	decq	%rbx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::string::at(unsigned long)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x441879 <std::string::at(unsigned long)+0x1f>
               	leaq	14492(%rip), %rdi       # 0x44510e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4406e6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	%rdi, %rbx
               	movq	%rsi, 8(%rsp)
               	callq	0x4417aa <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14493(%rip), %rdx       # 0x445152 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	cmovbeq	%rax, %rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	xorl	%ecx, %ecx
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::pop_back()>:
               	movq	(%rdi), %rax
               	movl	$1, %edx
               	movq	-24(%rax), %rsi
               	decq	%rsi
               	jmp	0x441898 <std::string::erase(unsigned long, unsigned long)>

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	movq	%rsi, %rax
               	subq	%rsi, %rdx
               	je	0x441948 <std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)+0x30>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rcx
               	subq	(%rdi), %rax
               	xorl	%ecx, %ecx
               	movq	%rax, %rsi
               	movq	%rax, %rbx
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rsi
               	popq	%rbx
               	popq	%rbp
               	retq
               	retq
               	nop

<std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	14347(%rip), %rcx       # 0x445166 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%r12, %rdx
               	movq	%rsi, %rbp
               	movq	%r13, %rsi
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movl	%r8d, 12(%rsp)
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rcx
               	movq	%r13, %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	testq	%r12, %r12
               	movl	12(%rsp), %r8d
               	je	0x4419a4 <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x5a>
               	movq	(%rbx), %rdi
               	movsbl	%r8b, %edx
               	movq	%r12, %rsi
               	addq	%rbp, %rdi
               	callq	0x440c0b <std::string::_M_assign(char*, unsigned long, char)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::assign(unsigned long, char)>:
               	movq	(%rdi), %rax
               	movq	%rsi, %rcx
               	movsbl	%dl, %r8d
               	xorl	%esi, %esi
               	movq	-24(%rax), %rax
               	movq	%rax, %rdx
               	jmp	0x44194a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::string::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x4419b2 <std::string::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::string::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	14225(%rip), %rdx       # 0x445183 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x44194a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x44194a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	movq	-24(%rax), %rax
               	movl	%r8d, 4(%rsp)
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14120(%rip), %rdx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x44194a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x44194a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	movq	%rsi, %rdx
               	jmp	0x441a9c <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>
               	nop

<std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rcx, %r12
               	movq	%r8, %rcx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	%r8, 8(%rsp)
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	8(%rsp), %r8
               	testq	%r8, %r8
               	je	0x441af6 <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)+0x3a>
               	addq	(%rbp), %rbx
               	movq	%r8, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	addq	$16, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::assign(char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	14009(%rip), %rcx       # 0x4451c7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	movq	-24(%rax), %rsi
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x440bca <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441b4c <std::string::assign(char const*, unsigned long)+0x4a>
               	movq	(%rbx), %rax
               	movq	%rbp, %r8
               	movq	%r12, %rcx
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	popq	%rbx
               	popq	%rbp
               	movq	-24(%rax), %rdx
               	popq	%r12
               	jmp	0x441abc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441b31 <std::string::assign(char const*, unsigned long)+0x2f>
               	movq	(%rbx), %rdi
               	movq	%r12, %rax
               	subq	%rdi, %rax
               	cmpq	%rax, %rbp
               	ja	0x441b77 <std::string::assign(char const*, unsigned long)+0x75>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x441b87 <std::string::assign(char const*, unsigned long)+0x85>
               	testq	%rax, %rax
               	je	0x441b87 <std::string::assign(char const*, unsigned long)+0x85>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x440bf5 <std::string::_M_move(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441b02 <std::string::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %rax
               	subq	%rdx, %rax
               	leaq	13821(%rip), %rdx       # 0x4451c7 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rcx
               	movq	%rcx, %rbp
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x441b02 <std::string::assign(char const*, unsigned long)>

<std::string::assign(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x441b02 <std::string::assign(char const*, unsigned long)>

<std::string::operator=(char const*)>:
               	jmp	0x441bec <std::string::assign(char const*)>
               	nop

<std::string::assign(std::initializer_list<char>)>:
               	jmp	0x441b02 <std::string::assign(char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, char const*, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	13663(%rip), %rdx       # 0x445183 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	leaq	13628(%rip), %rcx       # 0x445183 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x440bca <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441c76 <std::string::insert(unsigned long, char const*, unsigned long)+0x5e>
               	popq	%rbx
               	movq	%rbp, %r8
               	movq	%r14, %rcx
               	popq	%rbp
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	xorl	%edx, %edx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x441abc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%r12), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441c5b <std::string::insert(unsigned long, char const*, unsigned long)+0x43>
               	xorl	%edx, %edx
               	movq	%r13, %rsi
               	movq	%rbp, %rcx
               	movq	%r12, %rdi
               	subq	(%r12), %r14
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%r12), %rbx
               	movq	%rbp, %rdx
               	leaq	(%rbx,%r14), %rsi
               	addq	%r13, %rbx
               	leaq	(%rsi,%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x441cba <std::string::insert(unsigned long, char const*, unsigned long)+0xa2>
               	cmpq	%rbx, %rsi
               	jb	0x441cbf <std::string::insert(unsigned long, char const*, unsigned long)+0xa7>
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	jmp	0x441cdb <std::string::insert(unsigned long, char const*, unsigned long)+0xc3>
               	subq	%r14, %r13
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	%rbp, %rdx
               	leaq	(%rbx,%rbp), %rsi
               	leaq	(%rbx,%r13), %rdi
               	subq	%r13, %rdx
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x441c18 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rdx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdx), %rbx
               	leaq	13426(%rip), %rdx       # 0x445183 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	movq	-24(%rbx), %rax
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, %rbp
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	popq	%r8
               	movq	%rbp, %rcx
               	movq	%r13, %rsi
               	leaq	(%rbx,%rax), %rdx
               	movq	%r12, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441c18 <std::string::insert(unsigned long, char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, std::string const&)>:
               	movq	(%rdx), %rax
               	xorl	%ecx, %ecx
               	movq	-24(%rax), %r8
               	jmp	0x441cf4 <std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>

<std::string::insert(unsigned long, char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441c18 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::_Rep::_M_refcopy()>:
               	cmpq	115309(%rip), %rdi      # 0x45dfe0 <write+0x45dfe0>
               	je	0x441d88 <std::string::_Rep::_M_refcopy()+0x1c>
               	cmpq	$0, 115259(%rip)        # 0x45dfb8 <write+0x45dfb8>
               	je	0x441d85 <std::string::_Rep::_M_refcopy()+0x19>
               	lock
               	incl	16(%rdi)
               	jmp	0x441d88 <std::string::_Rep::_M_refcopy()+0x1c>
               	incl	16(%rdi)
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	addq	%rdx, %rdi
               	movq	%rsi, %rdx
               	movq	8(%rbx), %rsi
               	callq	0x4414d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	(%rbx), %rdx
               	movq	%rax, %r12
               	leaq	24(%rax), %rbp
               	testq	%rdx, %rdx
               	je	0x441dc2 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)+0x34>
               	leaq	24(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::string::reserve(unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdi
               	cmpq	-16(%rdi), %rsi
               	je	0x441e2c <std::string::reserve(unsigned long)+0x56>
               	movq	(%rbp), %rdi
               	movq	%rbx, %rdx
               	movq	-24(%rdi), %rax
               	cmpq	%rax, %rbx
               	leaq	15(%rsp), %rbx
               	cmovbq	%rax, %rdx
               	movq	%rbx, %rsi
               	subq	$24, %rdi
               	subq	%rax, %rdx
               	callq	0x441d8e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	movq	%rbx, %rsi
               	movq	%rax, %r12
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4415e0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbp)
               	jmp	0x441e39 <std::string::reserve(unsigned long)+0x63>
               	subq	$24, %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441ded <std::string::reserve(unsigned long)+0x17>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::shrink_to_fit()>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rdx
               	cmpq	%rdx, -24(%rax)
               	jae	0x441e67 <std::string::shrink_to_fit()+0x25>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43c0d7 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43c135 <__cxa_end_catch>
               	retq

<std::string::append(std::string const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rsi), %rax
               	movq	-24(%rax), %r12
               	testq	%r12, %r12
               	je	0x441ecd <std::string::append(std::string const&)+0x65>
               	movq	(%rdi), %rdi
               	movq	%rsi, %r13
               	movq	-24(%rdi), %rbp
               	addq	%r12, %rbp
               	cmpq	-16(%rdi), %rbp
               	jbe	0x441e9e <std::string::append(std::string const&)+0x36>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	jmp	0x441eab <std::string::append(std::string const&)+0x43>
               	subq	$24, %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441e91 <std::string::append(std::string const&)+0x29>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	%r12, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::operator+=(std::string const&)>:
               	jmp	0x441e68 <std::string::append(std::string const&)>
               	nop

<std::string::append(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	13032(%rip), %rdx       # 0x4451dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	pushq	%rbp
               	movq	%r12, %rsi
               	movq	%rdi, %rbp
               	movq	%r14, %rdi
               	pushq	%rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%r14), %rax
               	movq	-24(%rax), %rbx
               	subq	%r12, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x441f6b <std::string::append(std::string const&, unsigned long, unsigned long)+0x8d>
               	movq	(%rbp), %rdi
               	movq	-24(%rdi), %r13
               	addq	%rbx, %r13
               	cmpq	-16(%rdi), %r13
               	jbe	0x441f38 <std::string::append(std::string const&, unsigned long, unsigned long)+0x5a>
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	jmp	0x441f45 <std::string::append(std::string const&, unsigned long, unsigned long)+0x67>
               	subq	$24, %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441f2b <std::string::append(std::string const&, unsigned long, unsigned long)+0x4d>
               	movq	(%rbp), %rdi
               	movq	(%r14), %rsi
               	movq	%rbx, %rdx
               	addq	%r12, %rsi
               	addq	-24(%rdi), %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%r13, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rbx
               	movq	%rbp, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::append(char const*, unsigned long)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rdx, %rdx
               	je	0x44200c <std::string::append(char const*, unsigned long)+0x94>
               	movq	%rsi, %rbp
               	leaq	12871(%rip), %rcx       # 0x4451dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	xorl	%esi, %esi
               	movq	%rdx, %r13
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%r13, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x441fcb <std::string::append(char const*, unsigned long)+0x53>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x440bca <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x441fda <std::string::append(char const*, unsigned long)+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	jmp	0x441feb <std::string::append(char const*, unsigned long)+0x73>
               	subq	$24, %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x441faf <std::string::append(char const*, unsigned long)+0x37>
               	jmp	0x441feb <std::string::append(char const*, unsigned long)+0x73>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	subq	(%rbx), %rbp
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	addq	(%rbx), %rbp
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	%r13, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::operator+=(std::initializer_list<char>)>:
               	jmp	0x441f78 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x441f78 <std::string::append(char const*, unsigned long)>

<std::string::operator+=(char const*)>:
               	jmp	0x44201e <std::string::append(char const*)>
               	nop

<std::string::append(std::initializer_list<char>)>:
               	jmp	0x441f78 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(unsigned long, char)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rsi, %rsi
               	je	0x4420bc <std::string::append(unsigned long, char)+0x72>
               	movq	%rsi, %rbp
               	movsbl	%dl, %r13d
               	leaq	12661(%rip), %rcx       # 0x4451dc <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %rdx
               	xorl	%esi, %esi
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%rbp, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x44208e <std::string::append(unsigned long, char)+0x44>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	jmp	0x44209b <std::string::append(unsigned long, char)+0x51>
               	subq	$24, %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442081 <std::string::append(unsigned long, char)+0x37>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movl	%r13d, %edx
               	addq	-24(%rdi), %rdi
               	callq	0x440c0b <std::string::_M_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long, char)>:
               	pushq	%r13
               	leaq	12965(%rip), %rcx       # 0x445376 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d7d>
               	pushq	%r12
               	movl	%edx, %r12d
               	movq	%rsi, %rdx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	movq	(%rdi), %rax
               	movq	-24(%rax), %r13
               	movq	%r13, %rsi
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	cmpq	%r13, %rbx
               	jbe	0x442111 <std::string::resize(unsigned long, char)+0x49>
               	subq	%r13, %rbx
               	popq	%r8
               	movsbl	%r12b, %edx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x44204a <std::string::append(unsigned long, char)>
               	jae	0x442129 <std::string::resize(unsigned long, char)+0x61>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	orq	$-1, %rdx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x441898 <std::string::erase(unsigned long, unsigned long)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x4420c8 <std::string::resize(unsigned long, char)>
               	nop

<std::string::push_back(char)>:
               	pushq	%r12
               	movl	%esi, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rax
               	leaq	1(%rax), %rbx
               	cmpq	-16(%rdi), %rbx
               	jbe	0x442162 <std::string::push_back(char)+0x28>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	jmp	0x44216f <std::string::push_back(char)+0x35>
               	subq	$24, %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442155 <std::string::push_back(char)+0x1b>
               	movq	(%rbp), %rax
               	movq	%rbx, %rsi
               	movq	-24(%rax), %rdx
               	movb	%r12b, (%rax,%rdx)
               	movq	(%rbp), %rdi
               	popq	%rbx
               	popq	%rbp
               	subq	$24, %rdi
               	popq	%r12
               	jmp	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	nop

<std::string::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x44213a <std::string::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rsi, 8(%rsp)
               	callq	0x44142c <std::string::_Rep::_M_is_leaked() const>
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	jne	0x4421ca <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)+0x28>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x441d6c <std::string::_Rep::_M_refcopy()>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	jmp	0x441d8e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	leaq	14(%rsp), %rax
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rax, %rsi
               	callq	0x4421a2 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::assign(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	cmpq	%rdi, (%rbx)
               	je	0x442242 <std::string::assign(std::string const&)+0x3e>
               	leaq	14(%rsp), %rbp
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rbp, %rsi
               	callq	0x4421a2 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rbp, %rsi
               	movq	%rax, %r12
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4415e0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbx)
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::string const&)>:
               	jmp	0x442204 <std::string::assign(std::string const&)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	227947(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	movq	%rbp, %rdi
               	addq	$24, %rax
               	movq	%rax, (%rbp)
               	movq	(%r12), %rax
               	movq	-24(%rax), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	addq	%rbx, %rsi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441f78 <std::string::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x441e68 <std::string::append(std::string const&)>
               	popq	%rdx
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	227848(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	addq	$24, %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	(%rdx), %rax
               	movq	-24(%rax), %rsi
               	incq	%rsi
               	callq	0x441dd6 <std::string::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x44204a <std::string::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x441e68 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x4421da <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x441e68 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>

<char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rdi, %rsi
               	je	0x4423a9 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x45>
               	movq	%rsi, %r14
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x4414d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c21 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x4423b4 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x50>
               	leaq	227632(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442364 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x44242e <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x442422 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x4414d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c21 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442439 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	12130(%rip), %rdi       # 0x44538b <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x440583 <std::__throw_logic_error(char const*)>
               	leaq	227499(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	%r8, 8(%rsp)
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11743(%rip), %rdx       # 0x445253 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	%rbp, %rbx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	movq	%r8, %rdx
               	callq	0x4423d8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x4423d8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	leaq	11646(%rip), %rdx       # 0x445253 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %r12
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	addq	%rbx, %r12
               	leaq	(%rbx,%rax), %rdi
               	movq	%r12, %rsi
               	callq	0x4423d8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbp)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11562(%rip), %rdx       # 0x445253 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	addq	%rbp, %rbx
               	leaq	15(%rsp), %rdx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	callq	0x4423d8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	11530(%rip), %rdx       # 0x44526e <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x442500 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x4425ec <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x4425e0 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x4414d8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x440c2e <std::string::_S_copy_chars(char*, char const*, char const*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x4414b8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x4425f7 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	11684(%rip), %rdi       # 0x44538b <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x440583 <std::__throw_logic_error(char const*)>
               	leaq	227053(%rip), %rax      # 0x479ce0 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	movq	%rsi, %r8
               	pushq	%rbx
               	orq	$-1, %rsi
               	movq	%rdi, %rbx
               	testq	%r8, %r8
               	je	0x442629 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x25>
               	xorl	%eax, %eax
               	movq	%rsi, %rcx
               	movq	%r8, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%r8,%rax), %rsi
               	movq	%r8, %rdi
               	callq	0x442596 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442596 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x442596 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	11044(%rip), %rdx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r14
               	movq	%r8, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	subq	$24, %rsp
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	movq	%r14, %rdx
               	leaq	10998(%rip), %rcx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	movq	-24(%rax), %r12
               	subq	%r13, %r12
               	cmpq	%r15, %r12
               	cmovaq	%r15, %r12
               	movq	%r12, %rsi
               	callq	0x440b94 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x440bca <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x4426e3 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x7b>
               	movq	%rbp, %rdi
               	movq	%r14, %r8
               	movq	%rbx, %rcx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	callq	0x441abc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%rax, %rbp
               	jmp	0x442794 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x44149e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4426c7 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	(%rbp), %rax
               	leaq	(%rbx,%r14), %rsi
               	leaq	(%rax,%r13), %rcx
               	cmpq	%rcx, %rsi
               	jbe	0x44274d <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	(%r13,%r12), %rdx
               	addq	%rax, %rdx
               	cmpq	%rdx, %rbx
               	jae	0x44274d <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	8(%rsp), %r15
               	leaq	7(%rsp), %rcx
               	movq	%r14, %rdx
               	movq	%rbx, %rsi
               	movq	%r15, %rdi
               	callq	0x44264e <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	movq	8(%rsp), %rcx
               	movq	%r14, %r8
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x441abc <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%r15, %rdi
               	movq	%rax, %rbp
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	jmp	0x442794 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	subq	%rax, %rbx
               	cmpq	%rcx, %rsi
               	jbe	0x44275b <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xf3>
               	addq	%r14, %rbx
               	subq	%r12, %rbx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movq	%r14, %rcx
               	callq	0x441674 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rdi
               	movq	%r14, %rdx
               	leaq	(%rdi,%rbx), %rsi
               	addq	%r13, %rdi
               	callq	0x440bdf <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x442794 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	%rax, %rbx
               	movq	%r15, %rdi
               	callq	0x441610 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413700 <_Unwind_Resume@plt>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::replace(unsigned long, unsigned long, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%r9, %r14
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	10709(%rip), %rdx       # 0x445198 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%r8, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rcx, %rdi
               	pushq	%rbx
               	movq	(%rcx), %rbx
               	movq	-24(%rbx), %rax
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %r14
               	callq	0x440b6e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rcx
               	movq	%r14, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x44282a <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x44282a <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	addq	%rcx, %r8
               	jmp	0x442874 <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x442668 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x442596 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<bool __gnu_cxx::operator==<char*, std::string>(__gnu_cxx::__normal_iterator<char*, std::string> const&, __gnu_cxx::__normal_iterator<char*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::random_device::_M_init(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	10970(%rip), %rsi       # 0x4453c2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x4412f6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x442920 <std::random_device::_M_init(std::string const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x442952 <std::random_device::_M_init(std::string const&)+0x7e>
               	testl	%eax, %eax
               	je	0x442952 <std::random_device::_M_init(std::string const&)+0x7e>
               	movl	$1, %eax
               	leaq	10919(%rip), %r12       # 0x4453b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x442959 <std::random_device::_M_init(std::string const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x442971 <std::random_device::_M_init(std::string const&)+0x9d>
               	leaq	10894(%rip), %rsi       # 0x4453b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x4412f6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442959 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	10896(%rip), %rsi       # 0x4453ca <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x4412f6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442959 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	10889(%rip), %rdi       # 0x4453d6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x4407f3 <std::__throw_runtime_error(char const*)>
               	leaq	10844(%rip), %r12       # 0x4453b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10919(%rip), %rsi       # 0x445407 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c00 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x442946 <std::random_device::_M_init(std::string const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_init_pretr1(std::string const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10885(%rip), %rsi       # 0x44540a <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x4412f6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4429c2 <std::random_device::_M_init_pretr1(std::string const&)+0x4c>
               	movq	(%rbx), %rbx
               	xorl	%edx, %edx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413c10 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	je	0x4429b6 <std::random_device::_M_init_pretr1(std::string const&)+0x40>
               	movq	8(%rsp), %rdx
               	cmpb	$0, (%rdx)
               	je	0x4429c7 <std::random_device::_M_init_pretr1(std::string const&)+0x51>
               	leaq	10777(%rip), %rdi       # 0x4453d6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x4407f3 <std::__throw_runtime_error(char const*)>
               	movl	$5489, %eax             # imm = 0x1571
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	0x442bec <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::bad_cast::what() const>:
               	leaq	10801(%rip), %rax       # 0x445412 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e19>
               	retq

<std::bad_cast::~bad_cast()>:
               	leaq	111327(%rip), %rax      # 0x45dcc8 <vtable for std::bad_cast>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::bad_cast::~bad_cast()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4429e2 <std::bad_cast::~bad_cast()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>
               	nop

<std::bad_typeid::what() const>:
               	leaq	10763(%rip), %rax       # 0x445420 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e27>
               	retq

<std::bad_typeid::~bad_typeid()>:
               	leaq	111339(%rip), %rax      # 0x45dd08 <vtable for std::bad_typeid>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43bc70 <std::exception::~exception()>
               	nop

<std::bad_typeid::~bad_typeid()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x442a16 <std::bad_typeid::~bad_typeid()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43c074 <operator delete(void*, unsigned long)>

<std::(anonymous namespace)::__x86_rdrand()>:
               	subq	$24, %rsp
               	movl	$100, %edx
               	movl	$1, %ecx
               	rdrandl	%eax
               	movl	%eax, 12(%rsp)
               	cmovbl	%ecx, %eax
               	testl	%eax, %eax
               	jne	0x442a6d <std::(anonymous namespace)::__x86_rdrand()+0x2c>
               	decl	%edx
               	jne	0x442a4f <std::(anonymous namespace)::__x86_rdrand()+0xe>
               	leaq	10696(%rip), %rdi       # 0x445430 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e37>
               	callq	0x4407f3 <std::__throw_runtime_error(char const*)>
               	movl	12(%rsp), %eax
               	addq	$24, %rsp
               	retq

<std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	10552(%rip), %rsi       # 0x4453c2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x43eb2a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x442ac2 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x442af4 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	testl	%eax, %eax
               	je	0x442af4 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	movl	$1, %eax
               	leaq	10501(%rip), %r12       # 0x4453b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x442afb <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x442b13 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
               	leaq	10476(%rip), %rsi       # 0x4453b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x43eb2a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442afb <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10478(%rip), %rsi       # 0x4453ca <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x43eb2a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x442afb <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10471(%rip), %rdi       # 0x4453d6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x4407f3 <std::__throw_runtime_error(char const*)>
               	leaq	10426(%rip), %r12       # 0x4453b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10501(%rip), %rsi       # 0x445407 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c00 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x442ae8 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_fini()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x442b25 <std::random_device::_M_fini()+0xd>
               	jmp	0x413c20 <fclose@plt>
               	retq

<std::random_device::_M_getval()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpq	$0, (%rdi)
               	jne	0x442b3b <std::random_device::_M_getval()+0x15>
               	callq	0x442a41 <std::(anonymous namespace)::__x86_rdrand()>
               	jmp	0x442b8c <std::random_device::_M_getval()+0x66>
               	movq	%rdi, %r12
               	movl	$4, %ebx
               	leaq	12(%rsp), %rbp
               	movq	(%r12), %rdi
               	callq	0x413c30 <fileno@plt>
               	movq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movl	%eax, %edi
               	callq	0x413c40 <read@plt>
               	testl	%eax, %eax
               	jle	0x442b72 <std::random_device::_M_getval()+0x4c>
               	cltq
               	addq	%rax, %rbp
               	subq	%rax, %rbx
               	jne	0x442b48 <std::random_device::_M_getval()+0x22>
               	movl	12(%rsp), %eax
               	jmp	0x442b8c <std::random_device::_M_getval()+0x66>
               	incl	%eax
               	jne	0x442b80 <std::random_device::_M_getval()+0x5a>
               	callq	0x413820 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x442b48 <std::random_device::_M_getval()+0x22>
               	leaq	10443(%rip), %rdi       # 0x445452 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e59>
               	callq	0x4407f3 <std::__throw_runtime_error(char const*)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::random_device::_M_getentropy() const>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x442be7 <std::random_device::_M_getentropy() const+0x51>
               	subq	$24, %rsp
               	callq	0x413c30 <fileno@plt>
               	testl	%eax, %eax
               	jns	0x442bb0 <std::random_device::_M_getentropy() const+0x1a>
               	xorps	%xmm0, %xmm0
               	jmp	0x442be2 <std::random_device::_M_getentropy() const+0x4c>
               	movl	%eax, %edi
               	leaq	12(%rsp), %rdx
               	xorl	%eax, %eax
               	movl	$2147766784, %esi       # imm = 0x80045200
               	callq	0x413c50 <ioctl@plt>
               	testl	%eax, %eax
               	js	0x442bab <std::random_device::_M_getentropy() const+0x15>
               	movl	12(%rsp), %eax
               	testl	%eax, %eax
               	js	0x442bab <std::random_device::_M_getentropy() const+0x15>
               	cmpl	$32, %eax
               	jle	0x442bdc <std::random_device::_M_getentropy() const+0x46>
               	movl	$32, 12(%rsp)
               	cvtsi2sdl	12(%rsp), %xmm0
               	addq	$24, %rsp
               	retq
               	xorps	%xmm0, %xmm0
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>:
               	andl	$-1, %esi
               	movl	$1, %edx
               	movq	%rsi, (%rdi)
               	movq	-8(%rdi,%rdx,8), %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	$1812433253, %rax, %rax # imm = 0x6C078965
               	addl	%edx, %eax
               	movq	%rax, (%rdi,%rdx,8)
               	incq	%rdx
               	cmpq	$624, %rdx              # imm = 0x270
               	jne	0x442bf7 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0xb>
               	movq	$624, 4992(%rdi)        # imm = 0x270
               	retq
               	nop

<std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10191(%rip), %rsi       # 0x44540a <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x43eb2a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	movl	$5489, %esi             # imm = 0x1571
               	testl	%eax, %eax
               	je	0x442c80 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	movq	(%rbx), %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x413c10 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	movq	%rax, %rsi
               	je	0x442c74 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
               	movq	8(%rsp), %rax
               	cmpb	$0, (%rax)
               	je	0x442c80 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	leaq	10231(%rip), %rdi       # 0x445472 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e79>
               	callq	0x4407f3 <std::__throw_runtime_error(char const*)>
               	movq	%rbp, %rdi
               	callq	0x442bec <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>:
               	jmp	0x442bec <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::min()>:
               	xorl	%eax, %eax
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::max()>:
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>:
               	xorl	%eax, %eax
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	3168(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442cd6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x38>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$227, %rax
               	jne	0x442ca5 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7>
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	-1824(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x442d1c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7e>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$623, %rax              # imm = 0x26F
               	jne	0x442ceb <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x4d>
               	movq	4984(%rdi), %rax
               	movq	(%rdi), %rdx
               	andq	$-2147483648, %rax      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	%rdx
               	xorq	3168(%rdi), %rdx
               	andl	$1, %eax
               	je	0x442d5c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0xbe>
               	movl	$2567483615, %eax       # imm = 0x9908B0DF
               	movq	$0, 4992(%rdi)
               	xorq	%rdx, %rax
               	movq	%rax, 4984(%rdi)
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)>:
               	pushq	%r12
               	movl	$624, %r12d             # imm = 0x270
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	4992(%rbp), %rax
               	movq	%r12, %rdx
               	subq	%rax, %rdx
               	cmpq	%rbx, %rdx
               	jae	0x442da6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x34>
               	movq	%rbp, %rdi
               	leaq	-624(%rax,%rbx), %rbx
               	callq	0x442c9e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	jmp	0x442d82 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x10>
               	addq	%rbx, %rax
               	popq	%rbx
               	movq	%rax, 4992(%rbp)
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>:
               	cmpq	$623, 4992(%rdi)        # imm = 0x26F
               	pushq	%rbx
               	movq	%rdi, %rbx
               	jbe	0x442dcc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()+0x16>
               	callq	0x442c9e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	movq	4992(%rbx), %rax
               	leaq	1(%rax), %rdx
               	movq	(%rbx,%rax,8), %rax
               	movq	%rdx, 4992(%rbx)
               	popq	%rbx
               	movq	%rax, %rcx
               	shrq	$11, %rcx
               	movl	%ecx, %edx
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$7, %rax
               	andl	$2636928640, %eax       # imm = 0x9D2C5680
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$15, %rax
               	andl	$4022730752, %eax       # imm = 0xEFC60000
               	xorq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	$18, %rdx
               	xorq	%rdx, %rax
               	retq

<std::random_device::_M_getval_pretr1()>:
               	pushq	%rax
               	callq	0x442db6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
               	popq	%rdx
               	retq
               	nop
		...
               	addb	%al, (%rax)

<__libc_csu_init>:
               	pushq	%r15
               	movq	%rdx, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movl	%edi, %r13d
               	pushq	%r12
               	leaq	110312(%rip), %r12      # 0x45dd30 <__init_array_start>
               	pushq	%rbp
               	leaq	110376(%rip), %rbp      # 0x45dd78 <_DYNAMIC>
               	pushq	%rbx
               	subq	%r12, %rbp
               	subq	$8, %rsp
               	callq	0x413640 <_init>
               	sarq	$3, %rbp
               	je	0x442e7e <__libc_csu_init+0x4e>
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	movq	%r15, %rdx
               	movq	%r14, %rsi
               	movl	%r13d, %edi
               	callq	*(%r12,%rbx,8)
               	addq	$1, %rbx
               	cmpq	%rbx, %rbp
               	jne	0x442e68 <__libc_csu_init+0x38>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<__libc_csu_fini>:
               	retq
               	nopw	%cs:(%rax,%rax)

<atexit>:
               	leaq	111697(%rip), %rax      # 0x45e2f8 <__dso_handle>
               	xorl	%edx, %edx
               	testq	%rax, %rax
               	je	0x442eb1 <atexit+0x11>
               	movq	(%rax), %rdx
               	xorl	%esi, %esi
               	jmp	0x413b00 <__cxa_atexit@plt>

<__do_global_ctors_aux>:
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%rbx
               	movl	$4548552, %ebx          # imm = 0x4567C8
               	pushq	%rdx
               	movq	(%rbx), %rax
               	cmpq	$-1, %rax
               	je	0x442ed4 <__do_global_ctors_aux+0x1c>
               	callq	*%rax
               	subq	$8, %rbx
               	jmp	0x442ec3 <__do_global_ctors_aux+0xb>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

Disassembly of section .fini:

<_fini>:
               	subq	$8, %rsp
               	callq	0x41527a <__do_global_dtors_aux>
               	addq	$8, %rsp
               	retq
