
../../benchmarkAnalysis/Ring::IntStream.filterAndMap/linuxX64/baseline/main.kexe:	file format elf64-x86-64

Disassembly of section .init:

<_init>:
               	subq	$8, %rsp
               	movq	321829(%rip), %rax      # 0x461fb0 <write+0x461fb0>
               	testq	%rax, %rax
               	je	0x413695 <_init+0x15>
               	callq	0x4136d0 <__gmon_start__@plt>
               	callq	0x415251 <frame_dummy>
               	callq	0x4439a8 <__do_global_ctors_aux>
               	addq	$8, %rsp
               	retq

Disassembly of section .plt:

<.plt>:
               	pushq	321850(%rip)            # 0x461ff0 <_GLOBAL_OFFSET_TABLE_+0x8>
               	jmpq	*321852(%rip)           # 0x461ff8 <_GLOBAL_OFFSET_TABLE_+0x10>
               	nop
               	nop
               	nop
               	nop

<__libc_start_main@plt>:
               	jmpq	*321850(%rip)           # 0x462000 <_GLOBAL_OFFSET_TABLE_+0x18>
               	pushq	$0
               	jmp	0x4136b0 <.plt>

<__gmon_start__@plt>:
               	jmpq	*321842(%rip)           # 0x462008 <_GLOBAL_OFFSET_TABLE_+0x20>
               	pushq	$1
               	jmp	0x4136b0 <.plt>

<__tls_get_addr@plt>:
               	jmpq	*321834(%rip)           # 0x462010 <_GLOBAL_OFFSET_TABLE_+0x28>
               	pushq	$2
               	jmp	0x4136b0 <.plt>

<memmove@plt>:
               	jmpq	*321826(%rip)           # 0x462018 <_GLOBAL_OFFSET_TABLE_+0x30>
               	pushq	$3
               	jmp	0x4136b0 <.plt>

<calloc@plt>:
               	jmpq	*321818(%rip)           # 0x462020 <_GLOBAL_OFFSET_TABLE_+0x38>
               	pushq	$4
               	jmp	0x4136b0 <.plt>

<strlen@plt>:
               	jmpq	*321810(%rip)           # 0x462028 <_GLOBAL_OFFSET_TABLE_+0x40>
               	pushq	$5
               	jmp	0x4136b0 <.plt>

<memcpy@plt>:
               	jmpq	*321802(%rip)           # 0x462030 <_GLOBAL_OFFSET_TABLE_+0x48>
               	pushq	$6
               	jmp	0x4136b0 <.plt>

<free@plt>:
               	jmpq	*321794(%rip)           # 0x462038 <_GLOBAL_OFFSET_TABLE_+0x50>
               	pushq	$7
               	jmp	0x4136b0 <.plt>

<_Unwind_Resume@plt>:
               	jmpq	*321786(%rip)           # 0x462040 <_GLOBAL_OFFSET_TABLE_+0x58>
               	pushq	$8
               	jmp	0x4136b0 <.plt>

<memset@plt>:
               	jmpq	*321778(%rip)           # 0x462048 <_GLOBAL_OFFSET_TABLE_+0x60>
               	pushq	$9
               	jmp	0x4136b0 <.plt>

<bcmp@plt>:
               	jmpq	*321770(%rip)           # 0x462050 <_GLOBAL_OFFSET_TABLE_+0x68>
               	pushq	$10
               	jmp	0x4136b0 <.plt>

<memmem@plt>:
               	jmpq	*321762(%rip)           # 0x462058 <_GLOBAL_OFFSET_TABLE_+0x70>
               	pushq	$11
               	jmp	0x4136b0 <.plt>

<sched_yield@plt>:
               	jmpq	*321754(%rip)           # 0x462060 <_GLOBAL_OFFSET_TABLE_+0x78>
               	pushq	$12
               	jmp	0x4136b0 <.plt>

<pthread_mutex_lock@plt>:
               	jmpq	*321746(%rip)           # 0x462068 <_GLOBAL_OFFSET_TABLE_+0x80>
               	pushq	$13
               	jmp	0x4136b0 <.plt>

<pthread_cond_timedwait@plt>:
               	jmpq	*321738(%rip)           # 0x462070 <_GLOBAL_OFFSET_TABLE_+0x88>
               	pushq	$14
               	jmp	0x4136b0 <.plt>

<pthread_mutex_unlock@plt>:
               	jmpq	*321730(%rip)           # 0x462078 <_GLOBAL_OFFSET_TABLE_+0x90>
               	pushq	$15
               	jmp	0x4136b0 <.plt>

<pthread_self@plt>:
               	jmpq	*321722(%rip)           # 0x462080 <_GLOBAL_OFFSET_TABLE_+0x98>
               	pushq	$16
               	jmp	0x4136b0 <.plt>

<pthread_setname_np@plt>:
               	jmpq	*321714(%rip)           # 0x462088 <_GLOBAL_OFFSET_TABLE_+0xa0>
               	pushq	$17
               	jmp	0x4136b0 <.plt>

<memcmp@plt>:
               	jmpq	*321706(%rip)           # 0x462090 <_GLOBAL_OFFSET_TABLE_+0xa8>
               	pushq	$18
               	jmp	0x4136b0 <.plt>

<fputs@plt>:
               	jmpq	*321698(%rip)           # 0x462098 <_GLOBAL_OFFSET_TABLE_+0xb0>
               	pushq	$19
               	jmp	0x4136b0 <.plt>

<clock_gettime@plt>:
               	jmpq	*321690(%rip)           # 0x4620a0 <_GLOBAL_OFFSET_TABLE_+0xb8>
               	pushq	$20
               	jmp	0x4136b0 <.plt>

<syscall@plt>:
               	jmpq	*321682(%rip)           # 0x4620a8 <_GLOBAL_OFFSET_TABLE_+0xc0>
               	pushq	$21
               	jmp	0x4136b0 <.plt>

<getrusage@plt>:
               	jmpq	*321674(%rip)           # 0x4620b0 <_GLOBAL_OFFSET_TABLE_+0xc8>
               	pushq	$22
               	jmp	0x4136b0 <.plt>

<snprintf@plt>:
               	jmpq	*321666(%rip)           # 0x4620b8 <_GLOBAL_OFFSET_TABLE_+0xd0>
               	pushq	$23
               	jmp	0x4136b0 <.plt>

<pthread_key_create@plt>:
               	jmpq	*321658(%rip)           # 0x4620c0 <_GLOBAL_OFFSET_TABLE_+0xd8>
               	pushq	$24
               	jmp	0x4136b0 <.plt>

<pthread_setspecific@plt>:
               	jmpq	*321650(%rip)           # 0x4620c8 <_GLOBAL_OFFSET_TABLE_+0xe0>
               	pushq	$25
               	jmp	0x4136b0 <.plt>

<sysconf@plt>:
               	jmpq	*321642(%rip)           # 0x4620d0 <_GLOBAL_OFFSET_TABLE_+0xe8>
               	pushq	$26
               	jmp	0x4136b0 <.plt>

<mmap@plt>:
               	jmpq	*321634(%rip)           # 0x4620d8 <_GLOBAL_OFFSET_TABLE_+0xf0>
               	pushq	$27
               	jmp	0x4136b0 <.plt>

<__errno_location@plt>:
               	jmpq	*321626(%rip)           # 0x4620e0 <_GLOBAL_OFFSET_TABLE_+0xf8>
               	pushq	$28
               	jmp	0x4136b0 <.plt>

<strerror@plt>:
               	jmpq	*321618(%rip)           # 0x4620e8 <_GLOBAL_OFFSET_TABLE_+0x100>
               	pushq	$29
               	jmp	0x4136b0 <.plt>

<munmap@plt>:
               	jmpq	*321610(%rip)           # 0x4620f0 <_GLOBAL_OFFSET_TABLE_+0x108>
               	pushq	$30
               	jmp	0x4136b0 <.plt>

<vsnprintf@plt>:
               	jmpq	*321602(%rip)           # 0x4620f8 <_GLOBAL_OFFSET_TABLE_+0x110>
               	pushq	$31
               	jmp	0x4136b0 <.plt>

<strncpy@plt>:
               	jmpq	*321594(%rip)           # 0x462100 <_GLOBAL_OFFSET_TABLE_+0x118>
               	pushq	$32
               	jmp	0x4136b0 <.plt>

<strncat@plt>:
               	jmpq	*321586(%rip)           # 0x462108 <_GLOBAL_OFFSET_TABLE_+0x120>
               	pushq	$33
               	jmp	0x4136b0 <.plt>

<__ctype_toupper_loc@plt>:
               	jmpq	*321578(%rip)           # 0x462110 <_GLOBAL_OFFSET_TABLE_+0x128>
               	pushq	$34
               	jmp	0x4136b0 <.plt>

<strstr@plt>:
               	jmpq	*321570(%rip)           # 0x462118 <_GLOBAL_OFFSET_TABLE_+0x130>
               	pushq	$35
               	jmp	0x4136b0 <.plt>

<strtol@plt>:
               	jmpq	*321562(%rip)           # 0x462120 <_GLOBAL_OFFSET_TABLE_+0x138>
               	pushq	$36
               	jmp	0x4136b0 <.plt>

<madvise@plt>:
               	jmpq	*321554(%rip)           # 0x462128 <_GLOBAL_OFFSET_TABLE_+0x140>
               	pushq	$37
               	jmp	0x4136b0 <.plt>

<access@plt>:
               	jmpq	*321546(%rip)           # 0x462130 <_GLOBAL_OFFSET_TABLE_+0x148>
               	pushq	$38
               	jmp	0x4136b0 <.plt>

<mprotect@plt>:
               	jmpq	*321538(%rip)           # 0x462138 <_GLOBAL_OFFSET_TABLE_+0x150>
               	pushq	$39
               	jmp	0x4136b0 <.plt>

<write@plt>:
               	jmpq	*321530(%rip)           # 0x462140 <_GLOBAL_OFFSET_TABLE_+0x158>
               	pushq	$40
               	jmp	0x4136b0 <.plt>

<abort@plt>:
               	jmpq	*321522(%rip)           # 0x462148 <_GLOBAL_OFFSET_TABLE_+0x160>
               	pushq	$41
               	jmp	0x4136b0 <.plt>

<dladdr@plt>:
               	jmpq	*321514(%rip)           # 0x462150 <_GLOBAL_OFFSET_TABLE_+0x168>
               	pushq	$42
               	jmp	0x4136b0 <.plt>

<strrchr@plt>:
               	jmpq	*321506(%rip)           # 0x462158 <_GLOBAL_OFFSET_TABLE_+0x170>
               	pushq	$43
               	jmp	0x4136b0 <.plt>

<open@plt>:
               	jmpq	*321498(%rip)           # 0x462160 <_GLOBAL_OFFSET_TABLE_+0x178>
               	pushq	$44
               	jmp	0x4136b0 <.plt>

<__fxstat@plt>:
               	jmpq	*321490(%rip)           # 0x462168 <_GLOBAL_OFFSET_TABLE_+0x180>
               	pushq	$45
               	jmp	0x4136b0 <.plt>

<_Unwind_Backtrace@plt>:
               	jmpq	*321482(%rip)           # 0x462170 <_GLOBAL_OFFSET_TABLE_+0x188>
               	pushq	$46
               	jmp	0x4136b0 <.plt>

<_Unwind_GetIP@plt>:
               	jmpq	*321474(%rip)           # 0x462178 <_GLOBAL_OFFSET_TABLE_+0x190>
               	pushq	$47
               	jmp	0x4136b0 <.plt>

<pthread_cond_signal@plt>:
               	jmpq	*321466(%rip)           # 0x462180 <_GLOBAL_OFFSET_TABLE_+0x198>
               	pushq	$48
               	jmp	0x4136b0 <.plt>

<pthread_mutex_init@plt>:
               	jmpq	*321458(%rip)           # 0x462188 <_GLOBAL_OFFSET_TABLE_+0x1a0>
               	pushq	$49
               	jmp	0x4136b0 <.plt>

<pthread_cond_init@plt>:
               	jmpq	*321450(%rip)           # 0x462190 <_GLOBAL_OFFSET_TABLE_+0x1a8>
               	pushq	$50
               	jmp	0x4136b0 <.plt>

<pthread_mutex_destroy@plt>:
               	jmpq	*321442(%rip)           # 0x462198 <_GLOBAL_OFFSET_TABLE_+0x1b0>
               	pushq	$51
               	jmp	0x4136b0 <.plt>

<pthread_cond_destroy@plt>:
               	jmpq	*321434(%rip)           # 0x4621a0 <_GLOBAL_OFFSET_TABLE_+0x1b8>
               	pushq	$52
               	jmp	0x4136b0 <.plt>

<pthread_once@plt>:
               	jmpq	*321426(%rip)           # 0x4621a8 <_GLOBAL_OFFSET_TABLE_+0x1c0>
               	pushq	$53
               	jmp	0x4136b0 <.plt>

<pthread_getspecific@plt>:
               	jmpq	*321418(%rip)           # 0x4621b0 <_GLOBAL_OFFSET_TABLE_+0x1c8>
               	pushq	$54
               	jmp	0x4136b0 <.plt>

<pthread_detach@plt>:
               	jmpq	*321410(%rip)           # 0x4621b8 <_GLOBAL_OFFSET_TABLE_+0x1d0>
               	pushq	$55
               	jmp	0x4136b0 <.plt>

<pthread_cond_broadcast@plt>:
               	jmpq	*321402(%rip)           # 0x4621c0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
               	pushq	$56
               	jmp	0x4136b0 <.plt>

<sleep@plt>:
               	jmpq	*321394(%rip)           # 0x4621c8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
               	pushq	$57
               	jmp	0x4136b0 <.plt>

<_Exit@plt>:
               	jmpq	*321386(%rip)           # 0x4621d0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
               	pushq	$58
               	jmp	0x4136b0 <.plt>

<_Unwind_GetDataRelBase@plt>:
               	jmpq	*321378(%rip)           # 0x4621d8 <_GLOBAL_OFFSET_TABLE_+0x1f0>
               	pushq	$59
               	jmp	0x4136b0 <.plt>

<_Unwind_GetTextRelBase@plt>:
               	jmpq	*321370(%rip)           # 0x4621e0 <_GLOBAL_OFFSET_TABLE_+0x1f8>
               	pushq	$60
               	jmp	0x4136b0 <.plt>

<_Unwind_GetRegionStart@plt>:
               	jmpq	*321362(%rip)           # 0x4621e8 <_GLOBAL_OFFSET_TABLE_+0x200>
               	pushq	$61
               	jmp	0x4136b0 <.plt>

<_Unwind_GetLanguageSpecificData@plt>:
               	jmpq	*321354(%rip)           # 0x4621f0 <_GLOBAL_OFFSET_TABLE_+0x208>
               	pushq	$62
               	jmp	0x4136b0 <.plt>

<_Unwind_GetIPInfo@plt>:
               	jmpq	*321346(%rip)           # 0x4621f8 <_GLOBAL_OFFSET_TABLE_+0x210>
               	pushq	$63
               	jmp	0x4136b0 <.plt>

<_Unwind_SetGR@plt>:
               	jmpq	*321338(%rip)           # 0x462200 <_GLOBAL_OFFSET_TABLE_+0x218>
               	pushq	$64
               	jmp	0x4136b0 <.plt>

<_Unwind_SetIP@plt>:
               	jmpq	*321330(%rip)           # 0x462208 <_GLOBAL_OFFSET_TABLE_+0x220>
               	pushq	$65
               	jmp	0x4136b0 <.plt>

<strcmp@plt>:
               	jmpq	*321322(%rip)           # 0x462210 <_GLOBAL_OFFSET_TABLE_+0x228>
               	pushq	$66
               	jmp	0x4136b0 <.plt>

<malloc@plt>:
               	jmpq	*321314(%rip)           # 0x462218 <_GLOBAL_OFFSET_TABLE_+0x230>
               	pushq	$67
               	jmp	0x4136b0 <.plt>

<_Unwind_RaiseException@plt>:
               	jmpq	*321306(%rip)           # 0x462220 <_GLOBAL_OFFSET_TABLE_+0x238>
               	pushq	$68
               	jmp	0x4136b0 <.plt>

<_Unwind_DeleteException@plt>:
               	jmpq	*321298(%rip)           # 0x462228 <_GLOBAL_OFFSET_TABLE_+0x240>
               	pushq	$69
               	jmp	0x4136b0 <.plt>

<_Unwind_Resume_or_Rethrow@plt>:
               	jmpq	*321290(%rip)           # 0x462230 <_GLOBAL_OFFSET_TABLE_+0x248>
               	pushq	$70
               	jmp	0x4136b0 <.plt>

<fputc@plt>:
               	jmpq	*321282(%rip)           # 0x462238 <_GLOBAL_OFFSET_TABLE_+0x250>
               	pushq	$71
               	jmp	0x4136b0 <.plt>

<pthread_key_delete@plt>:
               	jmpq	*321274(%rip)           # 0x462240 <_GLOBAL_OFFSET_TABLE_+0x258>
               	pushq	$72
               	jmp	0x4136b0 <.plt>

<__cxa_atexit@plt>:
               	jmpq	*321266(%rip)           # 0x462248 <_GLOBAL_OFFSET_TABLE_+0x260>
               	pushq	$73
               	jmp	0x4136b0 <.plt>

<pthread_cond_wait@plt>:
               	jmpq	*321258(%rip)           # 0x462250 <_GLOBAL_OFFSET_TABLE_+0x268>
               	pushq	$74
               	jmp	0x4136b0 <.plt>

<ceil@plt>:
               	jmpq	*321250(%rip)           # 0x462258 <_GLOBAL_OFFSET_TABLE_+0x270>
               	pushq	$75
               	jmp	0x4136b0 <.plt>

<floor@plt>:
               	jmpq	*321242(%rip)           # 0x462260 <_GLOBAL_OFFSET_TABLE_+0x278>
               	pushq	$76
               	jmp	0x4136b0 <.plt>

<memchr@plt>:
               	jmpq	*321234(%rip)           # 0x462268 <_GLOBAL_OFFSET_TABLE_+0x280>
               	pushq	$77
               	jmp	0x4136b0 <.plt>

<pthread_join@plt>:
               	jmpq	*321226(%rip)           # 0x462270 <_GLOBAL_OFFSET_TABLE_+0x288>
               	pushq	$78
               	jmp	0x4136b0 <.plt>

<pthread_create@plt>:
               	jmpq	*321218(%rip)           # 0x462278 <_GLOBAL_OFFSET_TABLE_+0x290>
               	pushq	$79
               	jmp	0x4136b0 <.plt>

<get_nprocs@plt>:
               	jmpq	*321210(%rip)           # 0x462280 <_GLOBAL_OFFSET_TABLE_+0x298>
               	pushq	$80
               	jmp	0x4136b0 <.plt>

<nanosleep@plt>:
               	jmpq	*321202(%rip)           # 0x462288 <_GLOBAL_OFFSET_TABLE_+0x2a0>
               	pushq	$81
               	jmp	0x4136b0 <.plt>

<_ITM_RU1@plt>:
               	jmpq	*321194(%rip)           # 0x462290 <_GLOBAL_OFFSET_TABLE_+0x2a8>
               	pushq	$82
               	jmp	0x4136b0 <.plt>

<_ZGTtnam@plt>:
               	jmpq	*321186(%rip)           # 0x462298 <_GLOBAL_OFFSET_TABLE_+0x2b0>
               	pushq	$83
               	jmp	0x4136b0 <.plt>

<_ITM_memcpyRtWn@plt>:
               	jmpq	*321178(%rip)           # 0x4622a0 <_GLOBAL_OFFSET_TABLE_+0x2b8>
               	pushq	$84
               	jmp	0x4136b0 <.plt>

<_ITM_RU8@plt>:
               	jmpq	*321170(%rip)           # 0x4622a8 <_GLOBAL_OFFSET_TABLE_+0x2c0>
               	pushq	$85
               	jmp	0x4136b0 <.plt>

<_ITM_addUserCommitAction@plt>:
               	jmpq	*321162(%rip)           # 0x4622b0 <_GLOBAL_OFFSET_TABLE_+0x2c8>
               	pushq	$86
               	jmp	0x4136b0 <.plt>

<_ITM_memcpyRnWt@plt>:
               	jmpq	*321154(%rip)           # 0x4622b8 <_GLOBAL_OFFSET_TABLE_+0x2d0>
               	pushq	$87
               	jmp	0x4136b0 <.plt>

<_ZGTtdlPv@plt>:
               	jmpq	*321146(%rip)           # 0x4622c0 <_GLOBAL_OFFSET_TABLE_+0x2d8>
               	pushq	$88
               	jmp	0x4136b0 <.plt>

<fopen@plt>:
               	jmpq	*321138(%rip)           # 0x4622c8 <_GLOBAL_OFFSET_TABLE_+0x2e0>
               	pushq	$89
               	jmp	0x4136b0 <.plt>

<strtoul@plt>:
               	jmpq	*321130(%rip)           # 0x4622d0 <_GLOBAL_OFFSET_TABLE_+0x2e8>
               	pushq	$90
               	jmp	0x4136b0 <.plt>

<fclose@plt>:
               	jmpq	*321122(%rip)           # 0x4622d8 <_GLOBAL_OFFSET_TABLE_+0x2f0>
               	pushq	$91
               	jmp	0x4136b0 <.plt>

<fileno@plt>:
               	jmpq	*321114(%rip)           # 0x4622e0 <_GLOBAL_OFFSET_TABLE_+0x2f8>
               	pushq	$92
               	jmp	0x4136b0 <.plt>

<read@plt>:
               	jmpq	*321106(%rip)           # 0x4622e8 <_GLOBAL_OFFSET_TABLE_+0x300>
               	pushq	$93
               	jmp	0x4136b0 <.plt>

<ioctl@plt>:
               	jmpq	*321098(%rip)           # 0x4622f0 <_GLOBAL_OFFSET_TABLE_+0x308>
               	pushq	$94
               	jmp	0x4136b0 <.plt>

Disassembly of section .text:

<_GLOBAL__sub_I_GlobalData.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 327757(%rip)     # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	movups	%xmm0, 327734(%rip)     # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	movl	$1, 327756(%rip)        # 0x463d28 <kotlin::mm::GlobalData::instance_+0x38>
               	movq	$0, 327777(%rip)        # 0x463d48 <kotlin::mm::GlobalData::instance_+0x58>
               	movups	%xmm0, 327742(%rip)     # 0x463d2c <kotlin::mm::GlobalData::instance_+0x3c>
               	movq	$0, 327747(%rip)        # 0x463d3c <kotlin::mm::GlobalData::instance_+0x4c>
               	leaq	327760(%rip), %rax      # 0x463d50 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 327761(%rip)      # 0x463d58 <kotlin::mm::GlobalData::instance_+0x68>
               	movq	%rax, 327746(%rip)      # 0x463d50 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	$0, 327751(%rip)        # 0x463d60 <kotlin::mm::GlobalData::instance_+0x70>
               	leaq	327752(%rip), %rax      # 0x463d68 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	%rax, 327753(%rip)      # 0x463d70 <kotlin::mm::GlobalData::instance_+0x80>
               	movq	%rax, 327738(%rip)      # 0x463d68 <kotlin::mm::GlobalData::instance_+0x78>
               	movq	$0, 327743(%rip)        # 0x463d78 <kotlin::mm::GlobalData::instance_+0x88>
               	movb	$0, 327744(%rip)        # 0x463d80 <kotlin::mm::GlobalData::instance_+0x90>
               	leaq	327745(%rip), %rax      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 327746(%rip)      # 0x463d90 <kotlin::mm::GlobalData::instance_+0xa0>
               	movq	%rax, 327731(%rip)      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	$0, 327736(%rip)        # 0x463d98 <kotlin::mm::GlobalData::instance_+0xa8>
               	leaq	327737(%rip), %rax      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%rax, 327738(%rip)      # 0x463da8 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%rax, 327723(%rip)      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	$0, 327728(%rip)        # 0x463db0 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 327729(%rip)        # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	leaq	327730(%rip), %rax      # 0x463dc0 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 327731(%rip)      # 0x463dc8 <kotlin::mm::GlobalData::instance_+0xd8>
               	movq	%rax, 327716(%rip)      # 0x463dc0 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	$0, 327721(%rip)        # 0x463dd0 <kotlin::mm::GlobalData::instance_+0xe0>
               	leaq	327722(%rip), %rax      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%rax, 327723(%rip)      # 0x463de0 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%rax, 327708(%rip)      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	$0, 327713(%rip)        # 0x463de8 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 327714(%rip)        # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	movl	$1, %edi
               	movl	$512, %esi              # imm = 0x200
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	addq	$8, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%r13)
               	movups	%xmm0, 32(%r13)
               	movb	$0, 48(%r13)
               	leaq	56(%r13), %rcx
               	movl	$100000, 56(%r13)       # imm = 0x186A0
               	movq	$10240, 64(%r13)        # imm = 0x2800
               	movb	$1, 72(%r13)
               	movaps	195658(%rip), %xmm0     # 0x443a60 <_IO_stdin_used+0x60>
               	movups	%xmm0, 80(%r13)
               	movabsq	$4602678819172646912, %rdx # imm = 0x3FE0000000000000
               	movq	%rdx, 96(%r13)
               	movaps	195648(%rip), %xmm0     # 0x443a70 <_IO_stdin_used+0x70>
               	movups	%xmm0, 104(%r13)
               	leaq	160(%r13), %r12
               	movq	%rax, 160(%r13)
               	movq	%rcx, 168(%r13)
               	leaq	176(%r13), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 176(%r13)
               	movups	%xmm0, 192(%r13)
               	movups	%xmm0, 208(%r13)
               	movq	%rbp, 224(%r13)
               	leaq	232(%r13), %rdi
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	movq	$0, 280(%r13)
               	movq	%rbp, 288(%r13)
               	leaq	296(%r13), %rdi
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	movq	$0, 344(%r13)
               	movq	%rbp, 352(%r13)
               	leaq	360(%r13), %rdi
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	movq	$0, 408(%r13)
               	movq	%rbp, 416(%r13)
               	leaq	424(%r13), %rdi
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	movb	$0, 472(%r13)
               	movq	$0, 480(%r13)
               	movl	$1, %edi
               	movl	$312, %esi              # imm = 0x138
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	$0, 32(%rax)
               	leaq	40(%rax), %rdi
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movups	%xmm0, 88(%rbx)
               	movq	$0, 120(%rbx)
               	movq	%r12, 128(%rbx)
               	leaq	77913(%rip), %rax       # 0x426f90 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 144(%rbx)
               	leaq	77947(%rip), %rax       # 0x426fc0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>
               	movq	%rax, 152(%rbx)
               	movq	$0, 160(%rbx)
               	movw	$256, 168(%rbx)         # imm = 0x100
               	movups	%xmm0, 176(%rbx)
               	movups	%xmm0, 192(%rbx)
               	movq	$0, 208(%rbx)
               	leaq	216(%rbx), %rdi
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	movb	$0, 264(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 272(%rbx)
               	movups	%xmm0, 288(%rbx)
               	movq	$0, 304(%rbx)
               	movq	%rbx, 488(%r13)
               	leaq	331266(%rip), %rax      # 0x464db8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 496(%r13)
               	movq	168(%r13), %r14
               	movq	%r12, 208(%rsp)
               	leaq	77949(%rip), %rax       # 0x427050 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
               	movq	%rax, 232(%rsp)
               	leaq	77950(%rip), %rax       # 0x427060 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rax, 224(%rsp)
               	movdqu	224(%rsp), %xmm0
               	movq	$0, 224(%rsp)
               	movups	72(%r14), %xmm1
               	movaps	%xmm1, 48(%rsp)
               	movq	208(%rsp), %rax
               	movq	%rax, 72(%r14)
               	movq	216(%rsp), %rax
               	movq	%rax, 80(%r14)
               	movdqu	88(%r14), %xmm1
               	movdqa	%xmm1, 64(%rsp)
               	movdqu	%xmm0, 88(%r14)
               	movq	%xmm1, %rcx
               	testq	%rcx, %rcx
               	je	0x414093 <_GLOBAL__sub_I_GlobalData.cpp+0x3e3>
               	leaq	48(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rcx
               	movq	88(%r14), %rcx
               	movq	$0, 192(%rsp)
               	testq	%rcx, %rcx
               	movq	%rbp, 240(%rsp)
               	je	0x4140b1 <_GLOBAL__sub_I_GlobalData.cpp+0x401>
               	leaq	72(%r14), %rsi
               	leaq	176(%rsp), %rdi
               	movl	$2, %edx
               	callq	*%rcx
               	movups	88(%r14), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movups	%xmm0, 192(%rsp)
               	jmp	0x4140c1 <_GLOBAL__sub_I_GlobalData.cpp+0x411>
               	movq	%xmm0, %rcx
               	movq	$0, 192(%rsp)
               	testq	%rcx, %rcx
               	movq	%rbp, 240(%rsp)
               	jne	0x414069 <_GLOBAL__sub_I_GlobalData.cpp+0x3b9>
               	movups	192(%rsp), %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movl	$1, %edi
               	movl	$224, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movups	176(%rsp), %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 192(%rsp)
               	movaps	128(%rsp), %xmm0
               	movaps	%xmm0, 160(%rsp)
               	leaq	311154(%rip), %rax      # 0x460078 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rbx)
               	movq	%r14, 8(%rbx)
               	leaq	326700(%rip), %rax      # 0x463d40 <kotlin::mm::GlobalData::instance_+0x50>
               	movq	%rax, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%rbx)
               	movq	%r14, 48(%rbx)
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 56(%rbx)
               	movaps	144(%rsp), %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movups	64(%rbx), %xmm1
               	movaps	%xmm1, 144(%rsp)
               	movups	%xmm0, 64(%rbx)
               	movaps	160(%rsp), %xmm0
               	movq	$0, 160(%rsp)
               	movq	88(%rbx), %rax
               	movq	%rax, 168(%rsp)
               	movups	%xmm0, 80(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 112(%rbx)
               	movups	%xmm0, 96(%rbx)
               	movq	$0, 128(%rbx)
               	leaq	136(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	callq	0x43d7b0 <std::condition_variable::condition_variable()>
               	movb	$1, 184(%rbx)
               	movabsq	$9223372036854775807, %r15 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r15), %rax
               	testq	%rbp, %rbp
               	cmovnsq	%r15, %rax
               	imulq	$1000, %rbp, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r15, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	leaq	96(%rbx), %rcx
               	movq	%rax, 200(%rbx)
               	movb	$0, 208(%rbx)
               	leaq	16(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rsp)
               	movups	%xmm0, 24(%rsp)
               	movq	%rax, (%rsp)
               	movabsq	$8243114992121955143, %rax # imm = 0x72656D6954204347
               	movq	%rax, 16(%rsp)
               	movabsq	$7233174018586845298, %rax # imm = 0x6461657268742072
               	movq	%rax, 23(%rsp)
               	movq	$15, 8(%rsp)
               	movw	$256, 31(%rsp)          # imm = 0x100
               	movq	$0, 216(%rbx)
               	movq	%rbx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	leaq	66124(%rip), %rax       # 0x4244b0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%rax, %xmm0
               	movdqa	%xmm0, 64(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, 80(%rsp)
               	movq	16(%rsp), %rax
               	movq	23(%rsp), %rcx
               	movq	%rax, 96(%rsp)
               	movq	%rcx, 103(%rsp)
               	movq	$15, 88(%rsp)
               	movw	$256, 111(%rsp)         # imm = 0x100
               	leaq	66652(%rip), %r15       # 0x424700 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
               	movq	%r15, 120(%rsp)
               	movl	$88, %edi
               	callq	0x43cb69 <operator new(unsigned long)>
               	leaq	216(%rbx), %rdi
               	leaq	310767(%rip), %rcx      # 0x4600b0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rcx, (%rax)
               	movaps	48(%rsp), %xmm0
               	movups	%xmm0, 8(%rax)
               	movdqa	64(%rsp), %xmm0
               	movdqu	%xmm0, 24(%rax)
               	movb	$0, 72(%rax)
               	movq	%rax, %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	80(%rsp), %rdx
               	cmpq	%rbp, %rdx
               	je	0x414300 <_GLOBAL__sub_I_GlobalData.cpp+0x650>
               	movq	%rdx, 40(%rax)
               	movq	96(%rsp), %rcx
               	movq	%rcx, 56(%rax)
               	jmp	0x414309 <_GLOBAL__sub_I_GlobalData.cpp+0x659>
               	movdqu	(%rbp), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	88(%rsp), %rcx
               	movq	%rcx, 48(%rax)
               	movq	%rbp, 80(%rsp)
               	movq	$0, 88(%rsp)
               	movb	$0, 96(%rsp)
               	movb	$1, 72(%rax)
               	movq	%r15, 80(%rax)
               	movq	%rax, 40(%rsp)
               	movq	318599(%rip), %rdx      # 0x461fc0 <write+0x461fc0>
               	leaq	40(%rsp), %rsi
               	callq	0x43fd9e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414353 <_GLOBAL__sub_I_GlobalData.cpp+0x6a3>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	je	0x414372 <_GLOBAL__sub_I_GlobalData.cpp+0x6c2>
               	movq	80(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x414372 <_GLOBAL__sub_I_GlobalData.cpp+0x6c2>
               	callq	0x413730 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x41438c <_GLOBAL__sub_I_GlobalData.cpp+0x6dc>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41438c <_GLOBAL__sub_I_GlobalData.cpp+0x6dc>
               	callq	0x413730 <free@plt>
               	movq	160(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143ab <_GLOBAL__sub_I_GlobalData.cpp+0x6fb>
               	leaq	144(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	64(%r14), %rbp
               	movq	%rbx, 64(%r14)
               	testq	%rbp, %rbp
               	je	0x4143c9 <_GLOBAL__sub_I_GlobalData.cpp+0x719>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbp, %rdi
               	callq	0x413730 <free@plt>
               	movq	192(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4143e8 <_GLOBAL__sub_I_GlobalData.cpp+0x738>
               	leaq	176(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	224(%rsp), %rax
               	testq	%rax, %rax
               	je	0x414407 <_GLOBAL__sub_I_GlobalData.cpp+0x757>
               	leaq	208(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%r13, %r15
               	addq	$480, %r15              # imm = 0x1E0
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	movdqa	%xmm0, 16(%rsp)
               	movq	$0, 32(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, (%rsp)
               	movabsq	$7018141387277222727, %rax # imm = 0x6165726874204347
               	movq	%rax, 16(%rsp)
               	movw	$100, 24(%rsp)
               	movq	$9, 8(%rsp)
               	movb	$1, 32(%rsp)
               	movq	$0, 176(%rsp)
               	movq	%r12, 48(%rsp)
               	leaq	72(%rsp), %rbx
               	movq	%rbx, 56(%rsp)
               	movq	%rax, 72(%rsp)
               	movw	$100, 80(%rsp)
               	movq	$9, 64(%rsp)
               	movb	$1, 88(%rsp)
               	leaq	76798(%rip), %rbp       # 0x427090 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
               	movq	%rbp, 96(%rsp)
               	movl	$64, %edi
               	callq	0x43cb69 <operator new(unsigned long)>
               	leaq	312336(%rip), %rcx      # 0x4608b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	%r12, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rax, %rcx
               	addq	$32, %rcx
               	movq	%rcx, 16(%rax)
               	movq	56(%rsp), %rdx
               	cmpq	%rbx, %rdx
               	je	0x4144d7 <_GLOBAL__sub_I_GlobalData.cpp+0x827>
               	movq	%rdx, 16(%rax)
               	movq	72(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	jmp	0x4144df <_GLOBAL__sub_I_GlobalData.cpp+0x82f>
               	movdqu	(%rbx), %xmm0
               	movdqu	%xmm0, (%rcx)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 24(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	$0, 64(%rsp)
               	movb	$0, 72(%rsp)
               	movb	$1, 48(%rax)
               	movq	%rbp, 56(%rax)
               	movq	%rax, 144(%rsp)
               	movq	318126(%rip), %rdx      # 0x461fc0 <write+0x461fc0>
               	leaq	176(%rsp), %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x43fd9e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x41453a <_GLOBAL__sub_I_GlobalData.cpp+0x88a>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	je	0x41455c <_GLOBAL__sub_I_GlobalData.cpp+0x8ac>
               	movq	56(%rsp), %rdi
               	cmpq	%rbx, %rdi
               	je	0x41455c <_GLOBAL__sub_I_GlobalData.cpp+0x8ac>
               	callq	0x413730 <free@plt>
               	cmpq	$0, (%r15)
               	jne	0x41480f <_GLOBAL__sub_I_GlobalData.cpp+0xb5f>
               	movq	176(%rsp), %rax
               	movq	%rax, (%r15)
               	movq	$0, 176(%rsp)
               	cmpb	$0, 32(%rsp)
               	je	0x414597 <_GLOBAL__sub_I_GlobalData.cpp+0x8e7>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x414597 <_GLOBAL__sub_I_GlobalData.cpp+0x8e7>
               	callq	0x413730 <free@plt>
               	movl	$0, 504(%r13)
               	movq	%r13, 325711(%rip)      # 0x463df8 <kotlin::mm::GlobalData::instance_+0x108>
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	192(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4145f5 <_GLOBAL__sub_I_GlobalData.cpp+0x945>
               	leaq	176(%rsp), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, 128(%rsp)
               	movq	144(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414628 <_GLOBAL__sub_I_GlobalData.cpp+0x978>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 88(%rsp)
               	jne	0x414645 <_GLOBAL__sub_I_GlobalData.cpp+0x995>
               	jmp	0x414654 <_GLOBAL__sub_I_GlobalData.cpp+0x9a4>
               	movq	%rax, 128(%rsp)
               	movq	56(%rsp), %rdi
               	cmpq	%rbx, %rdi
               	je	0x414654 <_GLOBAL__sub_I_GlobalData.cpp+0x9a4>
               	callq	0x413730 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x41466e <_GLOBAL__sub_I_GlobalData.cpp+0x9be>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41466e <_GLOBAL__sub_I_GlobalData.cpp+0x9be>
               	callq	0x413730 <free@plt>
               	movq	488(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x4147e2 <_GLOBAL__sub_I_GlobalData.cpp+0xb32>
               	leaq	88(%rbx), %rbp
               	cmpq	$0, 317742(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x41469c <_GLOBAL__sub_I_GlobalData.cpp+0x9ec>
               	movq	%rbp, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x414723 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
               	cmpq	$0, (%rbx)
               	jne	0x4146ba <_GLOBAL__sub_I_GlobalData.cpp+0xa0a>
               	cmpq	$0, 317710(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x414739 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
               	movq	%rbp, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	jmp	0x414739 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
               	movb	$1, 168(%rbx)
               	leaq	40(%rbx), %r12
               	movq	%r12, %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	cmpq	$0, 317667(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4146df <_GLOBAL__sub_I_GlobalData.cpp+0xa2f>
               	movq	%rbp, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x43fd44 <std::thread::join()>
               	movb	$0, 168(%rbx)
               	cmpq	$0, 317634(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x41472a <_GLOBAL__sub_I_GlobalData.cpp+0xa7a>
               	movq	%rbp, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x414814 <_GLOBAL__sub_I_GlobalData.cpp+0xb64>
               	movb	$1, 169(%rbx)
               	movq	%r12, %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	cmpq	$0, 317593(%rip)        # 0x461fb8 <write+0x461fb8>
               	jne	0x4146b0 <_GLOBAL__sub_I_GlobalData.cpp+0xa00>
               	jmp	0x414739 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movb	$1, 169(%rbx)
               	movq	%r12, %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	leaq	216(%rbx), %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	movq	144(%rbx), %rax
               	testq	%rax, %rax
               	je	0x414762 <_GLOBAL__sub_I_GlobalData.cpp+0xab2>
               	leaq	128(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	leaq	40(%rbx), %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	leaq	16(%rbx), %r12
               	movq	16(%rbx), %rbp
               	movq	$0, 16(%rbx)
               	movq	%rbp, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x4147b4 <_GLOBAL__sub_I_GlobalData.cpp+0xb04>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	48(%rsp), %r14
               	movq	%rbp, 48(%rsp)
               	testq	%r14, %r14
               	je	0x414780 <_GLOBAL__sub_I_GlobalData.cpp+0xad0>
               	movq	%r14, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x414780 <_GLOBAL__sub_I_GlobalData.cpp+0xad0>
               	leaq	48(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r12, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpq	$0, (%rbx)
               	je	0x4147da <_GLOBAL__sub_I_GlobalData.cpp+0xb2a>
               	movq	%rbx, %rdi
               	callq	0x43fd44 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x41480f <_GLOBAL__sub_I_GlobalData.cpp+0xb5f>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 488(%r13)
               	movq	%r15, %rdi
               	callq	0x424b90 <kotlin::ScopedThread::~ScopedThread()>
               	movq	240(%rsp), %rdi
               	callq	0x4282f0 <GCStateHolder::~GCStateHolder()>
               	movq	128(%rsp), %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	callq	0x43cf13 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	(%rbx), %rdi
               	callq	0x424b80 <std::thread::~thread()>
               	movq	%rbp, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	40(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x414861 <_GLOBAL__sub_I_GlobalData.cpp+0xbb1>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 40(%rsp)
               	cmpb	$0, 112(%rsp)
               	jne	0x414876 <_GLOBAL__sub_I_GlobalData.cpp+0xbc6>
               	jmp	0x414885 <_GLOBAL__sub_I_GlobalData.cpp+0xbd5>
               	movq	%rax, %rbx
               	movq	80(%rsp), %rdi
               	cmpq	%rbp, %rdi
               	je	0x414885 <_GLOBAL__sub_I_GlobalData.cpp+0xbd5>
               	callq	0x413730 <free@plt>
               	cmpb	$0, 32(%rsp)
               	je	0x41489f <_GLOBAL__sub_I_GlobalData.cpp+0xbef>
               	movq	(%rsp), %rdi
               	leaq	16(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41489f <_GLOBAL__sub_I_GlobalData.cpp+0xbef>
               	callq	0x413730 <free@plt>
               	movq	128(%rsp), %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_CallsChecker.cpp>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	325003(%rip), %rax      # 0x463e60 <(anonymous namespace)::checker+0x30>
               	movq	%rax, 324948(%rip)      # 0x463e30 <(anonymous namespace)::checker>
               	movq	$1, 324945(%rip)        # 0x463e38 <(anonymous namespace)::checker+0x8>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 324943(%rip)     # 0x463e40 <(anonymous namespace)::checker+0x10>
               	movl	$1065353216, 324949(%rip) # imm = 0x3F800000
                                                # 0x463e50 <(anonymous namespace)::checker+0x20>
               	leaq	324950(%rip), %rdi      # 0x463e58 <(anonymous namespace)::checker+0x28>
               	xorl	%ebp, %ebp
               	movl	$3792, %edx             # imm = 0xED0
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movl	$237, %ebx
               	leaq	309220(%rip), %r12      # 0x460100 <Kotlin_callsCheckerGoodFunctionNames>
               	leaq	324877(%rip), %r15      # 0x463e30 <(anonymous namespace)::checker>
               	jmp	0x414950 <_GLOBAL__sub_I_CallsChecker.cpp+0x90>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	callq	0x413710 <strlen@plt>
               	movq	%rax, 56(%r15,%rbp,2)
               	movq	%r14, 64(%r15,%rbp,2)
               	addq	$-1, %rbx
               	addq	$8, %rbp
               	cmpq	$1, %rbx
               	jbe	0x41495e <_GLOBAL__sub_I_CallsChecker.cpp+0x9e>
               	movq	(%rbp,%r12), %r14
               	testq	%r14, %r14
               	jne	0x414930 <_GLOBAL__sub_I_CallsChecker.cpp+0x70>
               	xorl	%eax, %eax
               	jmp	0x414938 <_GLOBAL__sub_I_CallsChecker.cpp+0x78>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414a86 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	leaq	324857(%rip), %rbx      # 0x463e68 <(anonymous namespace)::checker+0x38>
               	leaq	328626(%rip), %rsi      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	movl	$14, %edx
               	movq	%rbx, %rdi
               	callq	0x424be0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	leaq	324846(%rip), %rax      # 0x463e78 <(anonymous namespace)::checker+0x48>
               	leaq	325079(%rip), %rbp      # 0x463f68 <(anonymous namespace)::checker+0x138>
               	movq	%r15, %r13
               	negq	%r13
               	jmp	0x414a0c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	nopl	(%rax)
               	testl	%eax, %eax
               	js	0x4149c0 <_GLOBAL__sub_I_CallsChecker.cpp+0x100>
               	movq	%r14, %rdi
               	callq	0x4250c0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	jne	0x414a0c <_GLOBAL__sub_I_CallsChecker.cpp+0x14c>
               	jmp	0x414a65 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	nopl	(%rax)
               	movups	(%r14), %xmm0
               	movaps	%xmm0, (%rsp)
               	leaq	(%r14,%r13), %rax
               	addq	$-56, %rax
               	testq	%rax, %rax
               	jle	0x4149f5 <_GLOBAL__sub_I_CallsChecker.cpp+0x135>
               	shrq	$4, %rax
               	addq	$1, %rax
               	movq	%r14, %rcx
               	movups	-16(%rcx), %xmm0
               	movups	%xmm0, (%rcx)
               	addq	$-16, %rcx
               	addq	$-1, %rax
               	cmpq	$1, %rax
               	jg	0x4149e0 <_GLOBAL__sub_I_CallsChecker.cpp+0x120>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, 324712(%rip)     # 0x463e68 <(anonymous namespace)::checker+0x38>
               	leaq	16(%r14), %rax
               	movq	%r14, %rbx
               	cmpq	%rbp, %rax
               	je	0x414a65 <_GLOBAL__sub_I_CallsChecker.cpp+0x1a5>
               	movq	%rax, %r14
               	movq	(%rax), %rdx
               	movq	324687(%rip), %rax      # 0x463e68 <(anonymous namespace)::checker+0x38>
               	movq	%rdx, %r12
               	subq	%rax, %r12
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x414a40 <_GLOBAL__sub_I_CallsChecker.cpp+0x180>
               	movq	324673(%rip), %rsi      # 0x463e70 <(anonymous namespace)::checker+0x40>
               	movq	24(%rbx), %rdi
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x4149a0 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	cmpq	$2147483647, %r12       # imm = 0x7FFFFFFF
               	jg	0x4149a4 <_GLOBAL__sub_I_CallsChecker.cpp+0xe4>
               	cmpq	$-2147483648, %r12      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %r12d
               	movl	%r12d, %eax
               	jmp	0x4149a0 <_GLOBAL__sub_I_CallsChecker.cpp+0xe0>
               	xorl	%eax, %eax
               	testb	%al, %al
               	jne	0x414a86 <_GLOBAL__sub_I_CallsChecker.cpp+0x1c6>
               	movl	$312, %ebx              # imm = 0x138
               	leaq	(%r15,%rbx), %rdi
               	callq	0x4250c0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>
               	addq	$16, %rbx
               	cmpq	$3832, %rbx             # imm = 0xEF8
               	jne	0x414a70 <_GLOBAL__sub_I_CallsChecker.cpp+0x1b0>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)
               	nop

<_GLOBAL__sub_I_ThreadSuspension.cpp>:
               	leaq	324441(%rip), %rdi      # 0x463e00 <(anonymous namespace)::gSuspensionCondVar>
               	jmp	0x43d7b0 <std::condition_variable::condition_variable()>
               	nopl	(%rax)

<_GLOBAL__sub_I_ConcurrentMarkAndSweep.cpp>:
               	leaq	328353(%rip), %rdi      # 0x464d58 <(anonymous namespace)::markingCondVar>
               	jmp	0x43d7b0 <std::condition_variable::condition_variable()>

<_GLOBAL__sub_I_eh_alloc.cc>:
               	xorl	%eax, %eax
               	leaq	428603(%rip), %rdi      # 0x47d500 <(anonymous namespace)::emergency_pool>
               	movl	$10, %ecx
               	pushq	%rdx
               	rep		stosl	%eax, %es:(%rdi)
               	movl	$72704, %edi            # imm = 0x11C00
               	movq	$72704, 428635(%rip)    # imm = 0x11C00
                                                # 0x47d538 <(anonymous namespace)::emergency_pool+0x38>
               	callq	0x413af0 <malloc@plt>
               	movq	%rax, 428615(%rip)      # 0x47d530 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rax, %rax
               	jne	0x414b06 <_GLOBAL__sub_I_eh_alloc.cc+0x4a>
               	movq	$0, 428607(%rip)        # 0x47d538 <(anonymous namespace)::emergency_pool+0x38>
               	movq	$0, 428580(%rip)        # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x414b1c <_GLOBAL__sub_I_eh_alloc.cc+0x60>
               	movq	%rax, 428571(%rip)      # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	movq	$72704, (%rax)          # imm = 0x11C00
               	movq	$0, 8(%rax)
               	popq	%rax
               	retq

<_GLOBAL__sub_I_system_error.cc>:
               	pushq	%rax
               	leaq	317410(%rip), %rdx      # 0x462308 <__dso_handle>
               	leaq	323387(%rip), %rsi      # 0x463a68 <(anonymous namespace)::generic_category_instance>
               	leaq	167588(%rip), %rdi      # 0x43d9d8 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	callq	0x413b50 <__cxa_atexit@plt>
               	leaq	317384(%rip), %rdx      # 0x462308 <__dso_handle>
               	leaq	323353(%rip), %rsi      # 0x463a60 <(anonymous namespace)::system_category_instance>
               	popq	%rcx
               	leaq	167527(%rip), %rdi      # 0x43d9b6 <(anonymous namespace)::system_error_category::~system_error_category()>
               	jmp	0x413b50 <__cxa_atexit@plt>

<get_available_features>:
               	btl	$27, %edi
               	pushq	%rbx
               	movl	%edx, %r11d
               	jae	0x414b86 <get_available_features+0x32>
               	xorl	%ecx, %ecx
               	xgetbv
               	movl	%eax, %edx
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x414b86 <get_available_features+0x32>
               	andl	$230, %eax
               	xorl	%r10d, %r10d
               	movl	$1, %r9d
               	cmpl	$230, %eax
               	sete	%r10b
               	jmp	0x414b8c <get_available_features+0x38>
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	movl	%esi, %r8d
               	shrl	$15, %r8d
               	andl	$1, %r8d
               	btl	$23, %esi
               	jae	0x414ba1 <get_available_features+0x4d>
               	orl	$2, %r8d
               	btl	$25, %esi
               	jae	0x414bab <get_available_features+0x57>
               	orl	$8, %r8d
               	btl	$26, %esi
               	jae	0x414bb5 <get_available_features+0x61>
               	orl	$16, %r8d
               	btl	$23, %edi
               	jae	0x414bbf <get_available_features+0x6b>
               	orl	$4, %r8d
               	btl	$25, %edi
               	jae	0x414bcc <get_available_features+0x78>
               	orl	$262144, %r8d           # imm = 0x40000
               	testb	$2, %dil
               	je	0x414bd9 <get_available_features+0x85>
               	orl	$524288, %r8d           # imm = 0x80000
               	testb	$1, %dil
               	je	0x414be3 <get_available_features+0x8f>
               	orl	$32, %r8d
               	btl	$9, %edi
               	jae	0x414bed <get_available_features+0x99>
               	orl	$64, %r8d
               	btl	$19, %edi
               	jae	0x414bf7 <get_available_features+0xa3>
               	orb	$-128, %r8b
               	btl	$20, %edi
               	jae	0x414c04 <get_available_features+0xb0>
               	orl	$256, %r8d              # imm = 0x100
               	testl	%r9d, %r9d
               	je	0x414c23 <get_available_features+0xcf>
               	btl	$28, %edi
               	jae	0x414c16 <get_available_features+0xc2>
               	orl	$512, %r8d              # imm = 0x200
               	btl	$12, %edi
               	jae	0x414c23 <get_available_features+0xcf>
               	orl	$16384, %r8d            # imm = 0x4000
               	xorl	%esi, %esi
               	cmpl	$6, %r11d
               	jle	0x414d33 <get_available_features+0x1df>
               	movl	$7, %eax
               	movl	%esi, %ecx
               	cpuid
               	testb	$8, %bl
               	je	0x414c44 <get_available_features+0xf0>
               	orl	$65536, %r8d            # imm = 0x10000
               	testl	%r9d, %r9d
               	je	0x414c55 <get_available_features+0x101>
               	testb	$32, %bl
               	je	0x414c55 <get_available_features+0x101>
               	orl	$1024, %r8d             # imm = 0x400
               	btl	$8, %ebx
               	jae	0x414c62 <get_available_features+0x10e>
               	orl	$131072, %r8d           # imm = 0x20000
               	xorl	%esi, %esi
               	testl	%r10d, %r10d
               	je	0x414d33 <get_available_features+0x1df>
               	btl	$16, %ebx
               	jae	0x414c7a <get_available_features+0x126>
               	orl	$32768, %r8d            # imm = 0x8000
               	testl	%ebx, %ebx
               	jns	0x414c85 <get_available_features+0x131>
               	orl	$1048576, %r8d          # imm = 0x100000
               	btl	$30, %ebx
               	jae	0x414c92 <get_available_features+0x13e>
               	orl	$2097152, %r8d          # imm = 0x200000
               	btl	$17, %ebx
               	jae	0x414c9f <get_available_features+0x14b>
               	orl	$4194304, %r8d          # imm = 0x400000
               	btl	$28, %ebx
               	jae	0x414cac <get_available_features+0x158>
               	orl	$8388608, %r8d          # imm = 0x800000
               	btl	$26, %ebx
               	jae	0x414cb9 <get_available_features+0x165>
               	orl	$33554432, %r8d         # imm = 0x2000000
               	btl	$27, %ebx
               	jae	0x414cc6 <get_available_features+0x172>
               	orl	$16777216, %r8d         # imm = 0x1000000
               	btl	$21, %ebx
               	jae	0x414cd3 <get_available_features+0x17f>
               	orl	$134217728, %r8d        # imm = 0x8000000
               	testb	$2, %cl
               	je	0x414cdf <get_available_features+0x18b>
               	orl	$67108864, %r8d         # imm = 0x4000000
               	testb	$64, %cl
               	je	0x414ceb <get_available_features+0x197>
               	orl	$2147483648, %r8d       # imm = 0x80000000
               	movl	%ecx, %esi
               	shrl	$8, %esi
               	andl	$1, %esi
               	btl	$10, %ecx
               	jae	0x414cfc <get_available_features+0x1a8>
               	orl	$2, %esi
               	btl	$11, %ecx
               	jae	0x414d05 <get_available_features+0x1b1>
               	orl	$4, %esi
               	btl	$12, %ecx
               	jae	0x414d0e <get_available_features+0x1ba>
               	orl	$8, %esi
               	btl	$14, %ecx
               	jae	0x414d1b <get_available_features+0x1c7>
               	orl	$1073741824, %r8d       # imm = 0x40000000
               	testb	$4, %dl
               	je	0x414d27 <get_available_features+0x1d3>
               	orl	$268435456, %r8d        # imm = 0x10000000
               	andb	$8, %dl
               	je	0x414d33 <get_available_features+0x1df>
               	orl	$536870912, %r8d        # imm = 0x20000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cpuid
               	cmpl	$2147483648, %eax       # imm = 0x80000000
               	jbe	0x414d73 <get_available_features+0x21f>
               	movl	$2147483649, %eax       # imm = 0x80000001
               	cpuid
               	testb	$64, %cl
               	je	0x414d54 <get_available_features+0x200>
               	orl	$2048, %r8d             # imm = 0x800
               	testl	%r9d, %r9d
               	je	0x414d73 <get_available_features+0x21f>
               	btl	$16, %ecx
               	jae	0x414d66 <get_available_features+0x212>
               	orl	$4096, %r8d             # imm = 0x1000
               	btl	$11, %ecx
               	jae	0x414d73 <get_available_features+0x21f>
               	orl	$8192, %r8d             # imm = 0x2000
               	movl	%r8d, 428050(%rip)      # 0x47d58c <__cpu_model+0xc>
               	popq	%rbx
               	movl	%esi, 428047(%rip)      # 0x47d590 <__cpu_features2>
               	retq

<__cpu_indicator_init>:
               	xorl	%r9d, %r9d
               	cmpl	$0, 428020(%rip)        # 0x47d580 <__cpu_model>
               	jne	0x415176 <__cpu_indicator_init+0x3f4>
               	pushq	%rbx
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414dab <__cpu_indicator_init+0x29>
               	movl	%r9d, %eax
               	cpuid
               	movl	%ebx, %r10d
               	movl	%eax, %r8d
               	testl	%eax, %eax
               	jg	0x414dbe <__cpu_indicator_init+0x3c>
               	movl	$3, 427979(%rip)        # 0x47d580 <__cpu_model>
               	orl	$-1, %r9d
               	jmp	0x415171 <__cpu_indicator_init+0x3ef>
               	movl	%r9d, %eax
               	cpuid
               	testl	%eax, %eax
               	je	0x414dab <__cpu_indicator_init+0x29>
               	movl	$1, %eax
               	cpuid
               	movl	%edx, %esi
               	movl	%ecx, %edi
               	movl	%eax, %edx
               	movl	%eax, %r11d
               	shrl	$4, %edx
               	movl	%eax, %ecx
               	shrl	$8, %r11d
               	shrl	$12, %ecx
               	andl	$15, %edx
               	andl	$15, %r11d
               	andl	$240, %ecx
               	cmpl	$1970169159, %r10d      # imm = 0x756E6547
               	jne	0x415048 <__cpu_indicator_init+0x2c6>
               	cmpl	$6, %r11d
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	movl	%edx, %eax
               	orl	%ecx, %eax
               	testb	%bl, %bl
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$62, %eax
               	je	0x414fe4 <__cpu_indicator_init+0x262>
               	ja	0x414ed5 <__cpu_indicator_init+0x153>
               	cmpl	$38, %eax
               	je	0x414f8a <__cpu_indicator_init+0x208>
               	ja	0x414e79 <__cpu_indicator_init+0xf7>
               	cmpl	$28, %eax
               	je	0x414f8a <__cpu_indicator_init+0x208>
               	ja	0x414e58 <__cpu_indicator_init+0xd6>
               	cmpl	$23, %eax
               	je	0x415027 <__cpu_indicator_init+0x2a5>
               	cmpl	$26, %eax
               	je	0x414fc0 <__cpu_indicator_init+0x23e>
               	cmpl	$15, %eax
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	jmp	0x415027 <__cpu_indicator_init+0x2a5>
               	cmpl	$31, %eax
               	ja	0x414e6b <__cpu_indicator_init+0xe9>
               	cmpl	$30, %eax
               	jb	0x415027 <__cpu_indicator_init+0x2a5>
               	jmp	0x414fc0 <__cpu_indicator_init+0x23e>
               	cmpl	$37, %eax
               	je	0x414fcc <__cpu_indicator_init+0x24a>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$47, %eax
               	je	0x414fcc <__cpu_indicator_init+0x24a>
               	ja	0x414eb4 <__cpu_indicator_init+0x132>
               	cmpl	$44, %eax
               	je	0x414fcc <__cpu_indicator_init+0x24a>
               	ja	0x414e9d <__cpu_indicator_init+0x11b>
               	cmpl	$42, %eax
               	je	0x414fd8 <__cpu_indicator_init+0x256>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$45, %eax
               	je	0x414fd8 <__cpu_indicator_init+0x256>
               	cmpl	$46, %eax
               	je	0x414fc0 <__cpu_indicator_init+0x23e>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$58, %eax
               	je	0x414fe4 <__cpu_indicator_init+0x262>
               	ja	0x414ec7 <__cpu_indicator_init+0x145>
               	cmpl	$55, %eax
               	jmp	0x414f47 <__cpu_indicator_init+0x1c5>
               	cmpl	$60, %eax
               	je	0x414ff0 <__cpu_indicator_init+0x26e>
               	cmpl	$61, %eax
               	jmp	0x414f1e <__cpu_indicator_init+0x19c>
               	cmpl	$85, %eax
               	je	0x415014 <__cpu_indicator_init+0x292>
               	ja	0x414f29 <__cpu_indicator_init+0x1a7>
               	cmpl	$71, %eax
               	je	0x414ffc <__cpu_indicator_init+0x27a>
               	ja	0x414f02 <__cpu_indicator_init+0x180>
               	cmpl	$63, %eax
               	je	0x414ff0 <__cpu_indicator_init+0x26e>
               	cmpl	$69, %eax
               	jae	0x414ff0 <__cpu_indicator_init+0x26e>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$77, %eax
               	je	0x414f99 <__cpu_indicator_init+0x217>
               	ja	0x414f12 <__cpu_indicator_init+0x190>
               	cmpl	$74, %eax
               	jmp	0x414f47 <__cpu_indicator_init+0x1c5>
               	cmpl	$78, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	cmpl	$79, %eax
               	je	0x414ffc <__cpu_indicator_init+0x27a>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$94, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	ja	0x414f4e <__cpu_indicator_init+0x1cc>
               	cmpl	$87, %eax
               	je	0x414fa8 <__cpu_indicator_init+0x226>
               	jb	0x414ffc <__cpu_indicator_init+0x27a>
               	cmpl	$90, %eax
               	je	0x414f99 <__cpu_indicator_init+0x217>
               	cmpl	$93, %eax
               	je	0x414f99 <__cpu_indicator_init+0x217>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	cmpl	$133, %eax
               	je	0x414fb4 <__cpu_indicator_init+0x232>
               	ja	0x414f6f <__cpu_indicator_init+0x1ed>
               	cmpl	$102, %eax
               	jne	0x415031 <__cpu_indicator_init+0x2af>
               	movabsq	$73014444035, %rax      # imm = 0x1100000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	cmpl	$142, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	cmpl	$158, %eax
               	je	0x415008 <__cpu_indicator_init+0x286>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$1, 427504(%rip)        # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$6, 427489(%rip)        # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$7, 427474(%rip)        # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$11, 427462(%rip)       # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movabsq	$4294967299, %rax       # imm = 0x100000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$8589934595, %rax       # imm = 0x200000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$12884901891, %rax      # imm = 0x300000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$51539607555, %rax      # imm = 0xC00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$55834574851, %rax      # imm = 0xD00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$60129542147, %rax      # imm = 0xE00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$64424509443, %rax      # imm = 0xF00000003
               	jmp	0x41501e <__cpu_indicator_init+0x29c>
               	movabsq	$68719476739, %rax      # imm = 0x1000000003
               	movq	%rax, 427359(%rip)      # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415031 <__cpu_indicator_init+0x2af>
               	movl	$2, 427347(%rip)        # 0x47d584 <__cpu_model+0x4>
               	movl	%r8d, %edx
               	callq	0x414b54 <get_available_features>
               	movl	$1, 427325(%rip)        # 0x47d580 <__cpu_model>
               	jmp	0x415162 <__cpu_indicator_init+0x3e0>
               	cmpl	$1752462657, %r10d      # imm = 0x68747541
               	jne	0x415167 <__cpu_indicator_init+0x3e5>
               	cmpl	$15, %r11d
               	jne	0x415150 <__cpu_indicator_init+0x3ce>
               	shrl	$20, %eax
               	orl	%ecx, %edx
               	movzbl	%al, %eax
               	decl	%eax
               	cmpl	$7, %eax
               	ja	0x415150 <__cpu_indicator_init+0x3ce>
               	leaq	205231(%rip), %rcx      # 0x447228 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::word_size+0x8>
               	movslq	(%rcx,%rax,4), %rax
               	addq	%rcx, %rax
               	jmpq	*%rax
               	movl	$4, 427256(%rip)        # 0x47d584 <__cpu_model+0x4>
               	cmpl	$4, %edx
               	je	0x4150ae <__cpu_indicator_init+0x32c>
               	cmpl	$8, %edx
               	je	0x4150bd <__cpu_indicator_init+0x33b>
               	cmpl	$2, %edx
               	jne	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$4, 427231(%rip)        # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$5, 427216(%rip)        # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$6, 427201(%rip)        # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$8, 427182(%rip)        # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$5, 427170(%rip)        # 0x47d584 <__cpu_model+0x4>
               	cmpl	$2, %edx
               	jne	0x4150f3 <__cpu_indicator_init+0x371>
               	movl	$8, 427159(%rip)        # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	cmpl	$15, %edx
               	ja	0x415104 <__cpu_indicator_init+0x382>
               	movl	$7, 427142(%rip)        # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	cmpl	$47, %edx
               	jbe	0x4150e7 <__cpu_indicator_init+0x365>
               	cmpl	$79, %edx
               	ja	0x41511a <__cpu_indicator_init+0x398>
               	movl	$9, 427120(%rip)        # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	cmpl	$127, %edx
               	ja	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$10, 427103(%rip)       # 0x47d588 <__cpu_model+0x8>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$9, 427087(%rip)        # 0x47d584 <__cpu_model+0x4>
               	jmp	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$10, 427075(%rip)       # 0x47d584 <__cpu_model+0x4>
               	cmpl	$31, %edx
               	ja	0x415150 <__cpu_indicator_init+0x3ce>
               	movl	$11, 427064(%rip)       # 0x47d588 <__cpu_model+0x8>
               	movl	%r8d, %edx
               	callq	0x414b54 <get_available_features>
               	movl	$2, 427038(%rip)        # 0x47d580 <__cpu_model>
               	xorl	%r9d, %r9d
               	jmp	0x415171 <__cpu_indicator_init+0x3ef>
               	movl	$3, 427023(%rip)        # 0x47d580 <__cpu_model>
               	movl	%r9d, %eax
               	popq	%rbx
               	retq
               	movl	%r9d, %eax
               	retq

<_start>:
               	xorl	%ebp, %ebp
               	movq	%rdx, %r9
               	popq	%rsi
               	movq	%rsp, %rdx
               	andq	$-16, %rsp
               	pushq	%rax
               	pushq	%rsp
               	movq	$4471168, %r8           # imm = 0x443980
               	movq	$4471072, %rcx          # imm = 0x443920
               	movq	$4438512, %rdi          # imm = 0x43B9F0
               	callq	0x4136c0 <__libc_start_main@plt>
               	hlt

<deregister_tm_clones>:
               	movl	$4602480, %eax          # imm = 0x463A70
               	cmpq	$4602480, %rax          # imm = 0x463A70
               	je	0x4151c2 <deregister_tm_clones+0x1e>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x4151c2 <deregister_tm_clones+0x1e>
               	movl	$4602480, %edi          # imm = 0x463A70
               	jmpq	*%rax
               	retq

<register_tm_clones>:
               	movl	$4602480, %esi          # imm = 0x463A70
               	movl	$2, %ecx
               	subq	$4602480, %rsi          # imm = 0x463A70
               	sarq	$3, %rsi
               	movq	%rsi, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	testq	%rax, %rax
               	je	0x4151f9 <register_tm_clones+0x36>
               	movl	$0, %eax
               	testq	%rax, %rax
               	je	0x4151f9 <register_tm_clones+0x36>
               	movl	$4602480, %edi          # imm = 0x463A70
               	jmpq	*%rax
               	retq

<__do_global_dtors_aux>:
               	cmpb	$0, 321663(%rip)        # 0x463a80 <completed.7240>
               	jne	0x415250 <__do_global_dtors_aux+0x56>
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%r12
               	movl	$4554456, %r12d         # imm = 0x457ED8
               	pushq	%rbx
               	movl	$4554464, %ebx          # imm = 0x457EE0
               	subq	$4554456, %rbx          # imm = 0x457ED8
               	sarq	$3, %rbx
               	decq	%rbx
               	movq	321630(%rip), %rax      # 0x463a88 <dtor_idx.7242>
               	cmpq	%rbx, %rax
               	jae	0x41523f <__do_global_dtors_aux+0x45>
               	incq	%rax
               	movq	%rax, 321615(%rip)      # 0x463a88 <dtor_idx.7242>
               	callq	*(%r12,%rax,8)
               	jmp	0x415223 <__do_global_dtors_aux+0x29>
               	callq	0x4151a4 <deregister_tm_clones>
               	popq	%rbx
               	popq	%r12
               	movb	$1, 321586(%rip)        # 0x463a80 <completed.7240>
               	popq	%rbp
               	retq
               	retq

<frame_dummy>:
               	jmp	0x4151c3 <register_tm_clones>
               	nopl	(%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)
               	addb	%al, (%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	284093(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 16(%rsp)
               	movb	326246(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4152f3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x93>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r12d, %r12d
               	js	0x4154c4 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x264>
               	movq	296(%r15), %rdi
               	movl	%r12d, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rcx)
               	movq	$0, 24(%rcx)
               	leaq	273496(%rip), %rdx      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rcx)
               	movl	%r12d, 24(%rcx)
               	movq	%rax, 80(%rsp)
               	movl	8(%rbx), %edx
               	cmpl	%r12d, %edx
               	cmovlel	%edx, %r12d
               	movq	(%rbx), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41556b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x30b>
               	movq	(%rax), %rdx
               	andq	$-4, %rdx
               	movq	(%rdx), %rdx
               	cmpl	$72, 92(%rdx)
               	jne	0x41557a <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x31a>
               	testl	%r12d, %r12d
               	js	0x4154bf <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25f>
               	cmpl	%r12d, 8(%rbx)
               	jb	0x4154bf <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25f>
               	cmpl	%r12d, 24(%rcx)
               	jb	0x4154bf <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25f>
               	movq	(%rax), %rdx
               	testl	%r12d, %r12d
               	jle	0x41549c <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x23c>
               	leaq	32(%rcx), %r10
               	leaq	16(%rbx), %rbp
               	movl	%r12d, %r9d
               	cmpl	$1, %r12d
               	je	0x4153d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x173>
               	leaq	(%rbx,%r9,8), %rdx
               	addq	$16, %rdx
               	cmpq	%rdx, %r10
               	jae	0x41546b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x20b>
               	leaq	(%rcx,%r9,8), %rdx
               	addq	$32, %rdx
               	cmpq	%rdx, %rbp
               	jae	0x41546b <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x20b>
               	xorl	%esi, %esi
               	movl	%r9d, %edx
               	subl	%esi, %edx
               	movq	%rsi, %r8
               	notq	%r8
               	addq	%r9, %r8
               	andq	$7, %rdx
               	je	0x415403 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1a3>
               	nopl	(%rax)
               	movq	(%rbp,%rsi,8), %rdi
               	movq	%rdi, (%r10,%rsi,8)
               	addq	$1, %rsi
               	addq	$-1, %rdx
               	jne	0x4153f0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x190>
               	cmpq	$7, %r8
               	jb	0x41549c <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x23c>
               	nopl	(%rax)
               	movq	16(%rbx,%rsi,8), %rdx
               	movq	%rdx, 32(%rcx,%rsi,8)
               	movq	24(%rbx,%rsi,8), %rdx
               	movq	%rdx, 40(%rcx,%rsi,8)
               	movq	32(%rbx,%rsi,8), %rdx
               	movq	%rdx, 48(%rcx,%rsi,8)
               	movq	40(%rbx,%rsi,8), %rdx
               	movq	%rdx, 56(%rcx,%rsi,8)
               	movq	48(%rbx,%rsi,8), %rdx
               	movq	%rdx, 64(%rcx,%rsi,8)
               	movq	56(%rbx,%rsi,8), %rdx
               	movq	%rdx, 72(%rcx,%rsi,8)
               	movq	64(%rbx,%rsi,8), %rdx
               	movq	%rdx, 80(%rcx,%rsi,8)
               	movq	72(%rbx,%rsi,8), %rdx
               	movq	%rdx, 88(%rcx,%rsi,8)
               	addq	$8, %rsi
               	cmpq	%rsi, %r9
               	jne	0x415410 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1b0>
               	jmp	0x41549c <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x23c>
               	movl	%r9d, %esi
               	andl	$-2, %esi
               	xorl	%edx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movups	(%rbp,%rdx,8), %xmm0
               	movups	%xmm0, (%r10,%rdx,8)
               	addq	$2, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x415480 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x220>
               	cmpq	%r9, %rsi
               	jne	0x4153d5 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x175>
               	movq	%rax, 88(%rsp)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r14
               	leaq	40(%rsp), %rbp
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	303522(%rip), %rsi      # 0x45f6a0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r12d, %esi
               	movq	%r14, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	274513(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	leaq	272926(%rip), %rsi      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	leaq	272911(%rip), %rsi      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	nopl	(%rax)

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	283274(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	325425(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415628 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x98>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4156d8 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x148>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	272967(%rip), %rcx      # 0x4580b0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415683 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4156d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4156d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4156d3 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray+0x143>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	shlq	$2, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136f0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	302990(%rip), %rsi      # 0x45f6a0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	273981(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nop

<kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	movups	%xmm0, 104(%rsp)
               	leaq	282778(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	324929(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415818 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x98>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x4158c7 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x147>
               	movq	296(%r12), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	272327(%rip), %rcx      # 0x458020 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, 72(%rsp)
               	movl	8(%r15), %ecx
               	cmpl	%ebp, %ecx
               	jge	0x415873 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0xf3>
               	movl	%ecx, %ebp
               	testl	%ecx, %ecx
               	js	0x4158c2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 8(%r15)
               	jb	0x4158c2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	cmpl	%ebp, 24(%rax)
               	jb	0x4158c2 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray+0x142>
               	movq	16(%rax), %rcx
               	addq	$32, %rax
               	addq	$16, %r15
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x4136f0 <memmove@plt>
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r13
               	leaq	96(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%r13, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	302495(%rip), %rsi      # 0x45f6a0 <__unnamed_1>
               	movq	%rbx, %rdi
               	movq	%r14, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	movq	%r15, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	273486(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 64(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nop

<kfun:kotlin.Any#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	324566(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415983 <kfun:kotlin.Any#hashCode(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Any#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	277467(%rip), %rax      # 0x4595b0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 128(%rsp)
               	leaq	282227(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 120(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movb	324378(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415a3f <kfun:kotlin.Any#toString(){}kotlin.String+0xaf>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 16(%rsp)
               	movq	8(%rsp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x415a92 <kfun:kotlin.Any#toString(){}kotlin.String+0x102>
               	leaq	64(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x419790 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	movq	%rax, 64(%rsp)
               	testq	%rax, %rax
               	leaq	302212(%rip), %r13      # 0x45f710 <__unnamed_2>
               	cmovneq	%rax, %r13
               	jmp	0x415aa2 <kfun:kotlin.Any#toString(){}kotlin.String+0x112>
               	movq	$0, 64(%rsp)
               	leaq	302190(%rip), %r13      # 0x45f710 <__unnamed_2>
               	leaq	72(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	288(%r14), %rcx
               	movq	%rcx, 152(%rsp)
               	leaq	144(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movabsq	$51539607552, %rcx      # imm = 0xC00000000
               	movq	%rcx, 160(%rsp)
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	movl	%eax, %edi
               	movq	%r15, %rsi
               	callq	0x43b1d0 <Kotlin_Long_toStringRadix>
               	movq	%rax, %rbp
               	leaq	120(%rsp), %rbx
               	movq	%rbx, 80(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	302027(%rip), %rsi      # 0x45f730 <__unnamed_3>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	323968(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415bd9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x415bf9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	movb	8(%r14), %al
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$82, 92(%rcx)
               	jne	0x415bf9 <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x39>
               	xorb	8(%rbx), %al
               	xorb	$1, %al
               	jmp	0x415bfb <kfun:kotlin.Boolean#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x3b>
               	xorl	%eax, %eax
               	andb	$1, %al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	323888(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c29 <kfun:kotlin.Boolean#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	301856(%rip), %rcx      # 0x45f750 <__unnamed_4>
               	cmpb	$0, 8(%rbx)
               	leaq	301877(%rip), %rax      # 0x45f770 <__unnamed_5>
               	cmovneq	%rcx, %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	323830(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415c63 <kfun:kotlin.Boolean#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movzbl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	323721(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415cd0 <kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any+0x60>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$0, 189537(%rip)        # 0x444138 <BOOLEAN_RANGE_TO>
               	jne	0x415d18 <kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any+0xa8>
               	testb	%bpl, %bpl
               	je	0x415d18 <kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any+0xa8>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	271415(%rip), %rdx      # 0x458140 <ktypeglobal:kotlin.Boolean#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 24(%rsp)
               	movb	%bpl, 24(%rcx)
               	jmp	0x415d2d <kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any+0xbd>
               	movzbl	%bpl, %ecx
               	shlq	$4, %rcx
               	leaq	297177(%rip), %rax      # 0x45e600 <BOOLEAN_CACHE>
               	addq	%rcx, %rax
               	movq	%rax, (%r14)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	323568(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d69 <kfun:kotlin.Enum#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Enum#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	323526(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415d93 <kfun:kotlin.Enum#hashCode(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Enum#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	323488(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415db9 <kfun:kotlin.Enum#toString(){}kotlin.String+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	323440(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415de9 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	nopl	(%rax,%rax)

<kfun:kotlin.Int#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	323392(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415e19 <kfun:kotlin.Int#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x415e40 <kfun:kotlin.Int#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x40>
               	movl	8(%r14), %eax
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$104, 92(%rcx)
               	jne	0x415e40 <kfun:kotlin.Int#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x40>
               	cmpl	%eax, 8(%rbx)
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.Int#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	323309(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415e6c <kfun:kotlin.Int#$<bridge-NBN>toString(){}kotlin.String(){}kotlin.String+0x1c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	leaq	195698(%rip), %rdx      # 0x445ae8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x437ef0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x4374c0 <CreateStringFromCString>
               	movq	%rax, (%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.Int#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	323238(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415eb3 <kfun:kotlin.Int#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.String#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	323200(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415ed9 <kfun:kotlin.String#toString(){}kotlin.String+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.String#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	323158(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415f03 <kfun:kotlin.String#<get-length>(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$168, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	40(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rbp      # imm = 0x600000000
               	movq	%rbp, 32(%rsp)
               	movb	323024(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x415f89 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x79>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, 8(%r14)
               	movq	$0, 16(%r14)
               	movq	%r15, %rdi
               	callq	0x43b2d0 <Kotlin_getCurrentStackTrace>
               	movq	%rax, 24(%r14)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	273974(%rip), %rcx      # 0x458e00 <ktypeglobal:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 48(%rsp)
               	movq	%r14, 24(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	274765(%rip), %rax      # 0x459150 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 8(%rsp)
               	movq	%rcx, 56(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 128(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	274364(%rip), %rbp      # 0x459030 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 136(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 24(%r15)
               	movl	318022(%rip), %eax      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x4160a6 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}+0x196>
               	leaq	318010(%rip), %rdi      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	12079(%rip), %rsi       # 0x418fd0 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movq	317939(%rip), %rbx      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbp, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%rcx, 32(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	274929(%rip), %rax      # 0x459300 <ktypeglobal:kotlin.native.concurrent.Lock#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rbp, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	274237(%rip), %r13      # 0x4590c0 <ktypeglobal:kotlin.native.concurrent.AtomicInt#internal>
               	movq	%r13, 16(%rax)
               	movq	%rcx, 88(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 24(%rbx)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%r13, 16(%rax)
               	movq	%rcx, 96(%rsp)
               	movl	$0, 24(%rax)
               	movq	%rcx, 32(%rbx)
               	movq	%rbp, 40(%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rax, 32(%r14)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$168, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.Throwable#<get-message>(){}kotlin.String?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	322368(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416219 <kfun:kotlin.Throwable#<get-message>(){}kotlin.String?+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	322320(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416249 <kfun:kotlin.Throwable#<get-cause>(){}kotlin.Throwable?+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	322272(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416279 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	274114(%rip), %rcx      # 0x459150 <ktypeglobal:kotlin.native.concurrent.SynchronizedLazyImpl#internal>
               	movq	%r14, %rsi
               	cmpq	%rcx, %rax
               	je	0x41629d <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x3d>
               	callq	0x418ce0 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>
               	jmp	0x4162a2 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal+0x42>
               	callq	0x4189a0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.Throwable#printStackTrace(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$280, %rsp              # imm = 0x118
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movups	%xmm0, 80(%rsp)
               	movups	%xmm0, 96(%rsp)
               	leaq	273032(%rip), %rax      # 0x458d70 <ktypeglobal:kotlin.Throwable.ExceptionTraceBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 72(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 184(%rsp)
               	leaq	176(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbp      # imm = 0x400000000
               	movq	%rbp, 192(%rsp)
               	movb	322068(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416345 <kfun:kotlin.Throwable#printStackTrace(){}+0x95>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	72(%rsp), %rax
               	movq	%rax, 200(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 160(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 144(%rsp)
               	movq	%rbx, 80(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	279695(%rip), %rcx      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 152(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, 88(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	leaq	16(%rax), %rcx
               	movq	%rcx, 120(%rsp)
               	movq	$0, 8(%rax)
               	leaq	278144(%rip), %rax      # 0x45a2a0 <ktypeglobal:kotlin.collections.HashSet#internal>
               	movq	%rax, 16(%r15)
               	movq	%rcx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 256(%rsp)
               	movaps	%xmm0, 240(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 248(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbp, 256(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$96, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rcx
               	movq	%rcx, 112(%rsp)
               	movq	$0, 8(%rax)
               	leaq	276696(%rip), %rax      # 0x459d70 <ktypeglobal:kotlin.collections.HashMap#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rcx, 264(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r14
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	268923(%rip), %rcx      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%r14, 32(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	269147(%rip), %r13      # 0x4580b0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%r13, 16(%rax)
               	movl	$8, 24(%rax)
               	movq	%rbp, 40(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$88, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%r13, 16(%rax)
               	movl	$16, 24(%rax)
               	movq	%rcx, 48(%rsp)
               	movq	%r14, 24(%rbx)
               	movq	$0, 32(%rbx)
               	movq	%rbp, 40(%rbx)
               	movq	%rcx, 48(%rbx)
               	movq	$2, 80(%rbx)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	xorps	%xmm0, %xmm0
               	movq	288(%r12), %rax
               	movq	%rax, 216(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 224(%rsp)
               	movq	48(%rbx), %rax
               	movq	%rax, 232(%rsp)
               	movl	8(%rax), %eax
               	movq	216(%rsp), %rcx
               	bsrl	%eax, %edx
               	xorl	$31, %edx
               	addl	$1, %edx
               	testl	%eax, %eax
               	movl	$33, %eax
               	cmovnel	%edx, %eax
               	movq	%rcx, 288(%r12)
               	movl	%eax, 88(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%r15)
               	movq	120(%rsp), %rax
               	movq	%rax, 96(%rsp)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movb	$1, 104(%rsp)
               	movq	80(%rsp), %rbx
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	leaq	294136(%rip), %rdx      # 0x45e3b0 <__unnamed_6>
               	leaq	72(%rsp), %rdi
               	movq	%rbx, %rsi
               	callq	0x416aa0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	testb	%al, %al
               	je	0x4166f0 <kfun:kotlin.Throwable#printStackTrace(){}+0x440>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movq	%rax, 32(%rsp)
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x416712 <kfun:kotlin.Throwable#printStackTrace(){}+0x462>
               	movq	184(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$280, %rsp              # imm = 0x118
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movb	321080(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416721 <kfun:kotlin.Throwable#printStackTrace(){}+0x471>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rsp), %rsi
               	movq	%rsi, 48(%rsp)
               	leaq	299102(%rip), %rdx      # 0x45f790 <__unnamed_7>
               	leaq	72(%rsp), %rdi
               	callq	0x416aa0 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>
               	movq	32(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	273975(%rip), %rcx      # 0x4595b0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 64(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f60 <ThrowInvalidReceiverTypeException>
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	320853(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416804 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x74>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 32(%rbx)
               	jne	0x416862 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xd2>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	%rbx, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	testq	%r14, %r14
               	je	0x416879 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xe9>
               	leaq	72(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*128(%rax)
               	movq	%rax, %rdi
               	jmp	0x416880 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0xf0>
               	leaq	32(%rsp), %rdx
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e9b0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x416a73 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2e3>
               	leaq	298400(%rip), %rdi      # 0x45f620 <__unnamed_8>
               	callq	0x43b680 <Kotlin_io_Console_println>
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 128(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	movq	%rbx, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 64(%rsp)
               	movslq	16(%r14), %r15
               	testq	%r15, %r15
               	jns	0x416a4f <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	movq	8(%r14), %r13
               	movq	%r13, 120(%rsp)
               	movq	%r13, 128(%rsp)
               	movl	8(%r13), %edx
               	movl	%edx, %ebx
               	sarl	$31, %ebx
               	andl	%edx, %ebx
               	movl	%r15d, %edi
               	movl	%ebx, %esi
               	callq	0x417d90 <checkRangeIndexes>
               	movq	(%r13), %rax
               	cmpl	%ebx, %r15d
               	jge	0x416a4f <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	leaq	16(,%r15,2), %r10
               	addq	%r13, %r10
               	movl	%r15d, %r9d
               	notl	%r9d
               	addl	%ebx, %r9d
               	cmpl	$15, %r9d
               	jb	0x416a2c <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x29c>
               	addq	$1, %r9
               	movq	%r9, %r8
               	andq	$-16, %r8
               	leaq	-16(%r8), %rax
               	movq	%rax, %rdi
               	shrq	$4, %rdi
               	addq	$1, %rdi
               	movl	%edi, %esi
               	andl	$7, %esi
               	cmpq	$112, %rax
               	jae	0x416968 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1d8>
               	xorl	%eax, %eax
               	jmp	0x4169f1 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x261>
               	leaq	240(,%r15,2), %rdx
               	addq	%r13, %rdx
               	andq	$-8, %rdi
               	negq	%rdi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, -208(%rdx,%rcx,2)
               	movups	%xmm0, -224(%rdx,%rcx,2)
               	movups	%xmm0, -192(%rdx,%rcx,2)
               	movups	%xmm0, -176(%rdx,%rcx,2)
               	movups	%xmm0, -160(%rdx,%rcx,2)
               	movups	%xmm0, -144(%rdx,%rcx,2)
               	movups	%xmm0, -128(%rdx,%rcx,2)
               	movups	%xmm0, -112(%rdx,%rcx,2)
               	movups	%xmm0, -96(%rdx,%rcx,2)
               	movups	%xmm0, -80(%rdx,%rcx,2)
               	movups	%xmm0, -64(%rdx,%rcx,2)
               	movups	%xmm0, -48(%rdx,%rcx,2)
               	movups	%xmm0, -32(%rdx,%rcx,2)
               	movups	%xmm0, -16(%rdx,%rcx,2)
               	leaq	128(%rcx), %rax
               	movups	%xmm0, 16(%rdx,%rcx,2)
               	movups	%xmm0, (%rdx,%rcx,2)
               	movq	%rax, %rcx
               	addq	$8, %rdi
               	jne	0x416980 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x1f0>
               	testq	%rsi, %rsi
               	je	0x416a20 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x290>
               	movq	%r15, %rcx
               	addq	%r15, %rcx
               	leaq	(%rcx,%rax,2), %rax
               	addq	%r13, %rax
               	addq	$16, %rax
               	negq	%rsi
               	xorps	%xmm0, %xmm0
               	nopl	(%rax)
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x416a10 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x280>
               	cmpq	%r8, %r9
               	je	0x416a4f <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2bf>
               	addl	%r8d, %r15d
               	leaq	(%r10,%r8,2), %r10
               	subl	%r15d, %ebx
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movw	$0, (%r10,%rax,2)
               	addq	$1, %rax
               	cmpl	%eax, %ebx
               	jne	0x416a40 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal+0x2b0>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	$0, 16(%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, 24(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 256(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rcx, (%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$124554051584, %rax     # imm = 0x1D00000000
               	movq	%rax, 48(%rsp)
               	movb	319973(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416b74 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0xd4>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	8(%rax), %rdi
               	movq	%r14, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x416c99 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1f9>
               	leaq	120(%rsp), %rbx
               	leaq	112(%rsp), %r13
               	leaq	104(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	292872(%rip), %rsi      # 0x45e3b0 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	128(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416790 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	8(%r12), %rax
               	cmpq	%r14, %rax
               	movq	%r14, %rbp
               	movq	%r14, 8(%rsp)
               	je	0x416d2a <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28a>
               	movq	24(%rax), %r15
               	movl	8(%r15), %ebx
               	movq	24(%rbp), %r14
               	movl	8(%r14), %ebp
               	cmpl	%ebp, %ebx
               	movl	%ebx, %edx
               	cmovgl	%ebp, %edx
               	xorl	%r13d, %r13d
               	testl	%edx, %edx
               	cmovsl	%r13d, %edx
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	movq	%r12, 24(%rsp)
               	cmpq	%r13, %rdx
               	je	0x416d31 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	nopl	(%rax)
               	movzbl	319753(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416c5b <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1bb>
               	movq	%rdx, %r12
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdx
               	movq	24(%rsp), %r12
               	cmpl	%ebp, 8(%r14)
               	jbe	0x416eb5 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	cmpl	%ebx, 8(%r15)
               	jbe	0x416eb5 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movslq	%ebp, %rax
               	movq	16(%r14,%rax,8), %rax
               	movslq	%ebx, %rcx
               	cmpq	16(%r15,%rcx,8), %rax
               	jne	0x416d2e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>
               	addq	$1, %r13
               	addl	$-1, %ebx
               	addl	$-1, %ebp
               	cmpq	%r13, %rdx
               	jne	0x416c40 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x1a0>
               	jmp	0x416d31 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x291>
               	leaq	72(%rsp), %r13
               	leaq	64(%rsp), %rbx
               	leaq	56(%rsp), %rdx
               	movq	16(%r12), %rbp
               	leaq	292604(%rip), %rsi      # 0x45e3b0 <__unnamed_6>
               	movq	%rbp, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	297711(%rip), %rsi      # 0x45f7c0 <__unnamed_9>
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	leaq	80(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	297333(%rip), %rsi      # 0x45f680 <__unnamed_10>
               	movq	%rbp, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416790 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	xorl	%eax, %eax
               	jmp	0x416e93 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3f3>
               	xorl	%ebx, %ebx
               	jmp	0x416d41 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2a1>
               	movl	%r13d, %edx
               	xorl	%eax, %eax
               	addl	$-1, %edx
               	cmovsl	%eax, %edx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rbx
               	leaq	136(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x416260 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %eax
               	movq	%rbx, 16(%rsp)
               	subl	%ebx, %eax
               	testl	%eax, %eax
               	jle	0x416e08 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x368>
               	movl	%eax, %r14d
               	xorl	%r15d, %r15d
               	leaq	297632(%rip), %rbx      # 0x45f810 <__unnamed_11>
               	movzbl	319449(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416d80 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2e0>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	leaq	144(%rsp), %rsi
               	callq	0x416260 <kfun:kotlin.Throwable.<get-stackTraceStrings>#internal>
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r15
               	jae	0x416eb5 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x415>
               	movq	16(%rax,%r15,8), %r13
               	addq	$1, %r15
               	movq	%r13, 152(%rsp)
               	movq	16(%r12), %rbp
               	movq	%rbp, %rdi
               	leaq	292340(%rip), %rsi      # 0x45e3b0 <__unnamed_6>
               	leaq	160(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	168(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	leaq	176(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x416790 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	cmpq	%r15, %r14
               	movq	8(%rsp), %rbp
               	jne	0x416d70 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x2d0>
               	movq	16(%rsp), %r14
               	testl	%r14d, %r14d
               	je	0x416e80 <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x3e0>
               	leaq	192(%rsp), %r13
               	leaq	184(%rsp), %rdx
               	leaq	200(%rsp), %r15
               	movq	16(%r12), %rbx
               	leaq	292218(%rip), %rsi      # 0x45e3b0 <__unnamed_6>
               	movq	%rbx, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	297451(%rip), %rsi      # 0x45f830 <__unnamed_12>
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movl	%r14d, %esi
               	movq	%r15, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	297467(%rip), %rsi      # 0x45f860 <__unnamed_13>
               	movq	%rbx, %rdi
               	leaq	208(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x416790 <kfun:kotlin.Throwable.ExceptionTraceBuilder.endln#internal>
               	movq	40(%rbp), %rcx
               	movq	%rcx, 216(%rsp)
               	movb	$1, %al
               	testq	%rcx, %rcx
               	jne	0x416eba <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x41a>
               	movq	40(%rsp), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 288(%rdx)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rbx
               	movq	(%rsp), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	272064(%rip), %rcx      # 0x4595b0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 224(%rsp)
               	movq	%rbx, 24(%rax)
               	callq	0x419f60 <ThrowInvalidReceiverTypeException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.Throwable#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	48(%rsp), %rbx
               	movq	$0, 8(%rsp)
               	leaq	271946(%rip), %rax      # 0x4595b0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 136(%rsp)
               	leaq	276707(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 32(%rsp)
               	movb	318855(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x416fd2 <kfun:kotlin.Throwable#toString(){}kotlin.String+0xc2>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	64(%rsp), %r15
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rsp, %rdi
               	movq	%rdi, 40(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rbx, %rsi
               	callq	0x419500 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x41701a <kfun:kotlin.Throwable#toString(){}kotlin.String+0x10a>
               	leaq	56(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x419430 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	282602(%rip), %rbx      # 0x45c000 <__unnamed_14>
               	cmovneq	%rax, %rbx
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x4170e6 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1d6>
               	movq	%rbp, %r15
               	leaq	80(%rsp), %r13
               	leaq	128(%rsp), %rbp
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	297039(%rip), %rsi      # 0x45f8c0 <__unnamed_15>
               	movq	%rbp, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*144(%rax)
               	testq	%rax, %rax
               	je	0x4170b9 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1a9>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x4170c0 <kfun:kotlin.Throwable#toString(){}kotlin.String+0x1b0>
               	leaq	296288(%rip), %rsi      # 0x45f620 <__unnamed_8>
               	movq	%r15, %rbp
               	leaq	128(%rsp), %rbx
               	movq	%rbx, %rdi
               	leaq	112(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	%rbx, (%rbp)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movq	%rbx, %rax
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1608, %rsp             # imm = 0x648
               	movq	%rsi, 136(%rsp)
               	movq	%rdi, %rbx
               	movb	318494(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41713b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x2b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 560(%rsp)
               	movaps	%xmm0, 544(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 552(%rsp)
               	leaq	544(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 560(%rsp)
               	movq	24(%rbx), %r15
               	movl	8(%r15), %ebp
               	movq	-64(%rax), %rbx
               	movl	$1, %r14d
               	xchgl	%r14d, 328(%rbx)
               	movq	%rax, 8(%rsp)
               	movl	$1, %ecx
               	movq	-64(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x4171d4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc4>
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rdi)
               	jmp	0x4171d6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc6>
               	xorl	%edi, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 64(%rsp)
               	testl	%ebp, %ebp
               	je	0x41782a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x71a>
               	movl	%r14d, 116(%rsp)
               	movq	%rbx, 128(%rsp)
               	movl	%ecx, 44(%rsp)
               	movq	%rdi, 120(%rsp)
               	movl	$32, %esi
               	movq	%rbp, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	%rbp, %rcx
               	shlq	$5, %rcx
               	addq	%rax, %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 144(%rsp)
               	movq	$0, 152(%rsp)
               	movb	$0, 160(%rsp)
               	movq	$-1, 176(%rsp)
               	leaq	200(%rsp), %rax
               	movq	%rax, 184(%rsp)
               	movq	$0, 192(%rsp)
               	movb	$0, 200(%rsp)
               	movq	$-1, 216(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 224(%rsp)
               	movq	$0, 232(%rsp)
               	movb	$0, 240(%rsp)
               	movq	$-1, 256(%rsp)
               	leaq	280(%rsp), %rax
               	movq	%rax, 264(%rsp)
               	movq	$0, 272(%rsp)
               	movb	$0, 280(%rsp)
               	movq	$-1, 296(%rsp)
               	leaq	320(%rsp), %rax
               	movq	%rax, 304(%rsp)
               	movq	$0, 312(%rsp)
               	movb	$0, 320(%rsp)
               	movq	$-1, 336(%rsp)
               	leaq	360(%rsp), %rax
               	movq	%rax, 344(%rsp)
               	movq	$0, 352(%rsp)
               	movb	$0, 360(%rsp)
               	movq	$-1, 376(%rsp)
               	leaq	400(%rsp), %rax
               	movq	%rax, 384(%rsp)
               	movq	$0, 392(%rsp)
               	movb	$0, 400(%rsp)
               	movq	$-1, 416(%rsp)
               	leaq	440(%rsp), %rax
               	movq	%rax, 424(%rsp)
               	movq	$0, 432(%rsp)
               	movb	$0, 440(%rsp)
               	movq	$-1, 456(%rsp)
               	leaq	480(%rsp), %rax
               	movq	%rax, 464(%rsp)
               	movq	$0, 472(%rsp)
               	movb	$0, 480(%rsp)
               	movq	$-1, 496(%rsp)
               	leaq	520(%rsp), %rax
               	movq	%rax, 504(%rsp)
               	movq	$0, 512(%rsp)
               	movb	$0, 520(%rsp)
               	movq	$-1, 536(%rsp)
               	leaq	88(%rsp), %r13
               	movq	64(%rsp), %r12
               	xorl	%eax, %eax
               	movq	%r15, 32(%rsp)
               	movq	%rbp, 104(%rsp)
               	jmp	0x417470 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x360>
               	movq	%rcx, (%r14)
               	movq	88(%rsp), %rax
               	movq	%rax, 16(%r14)
               	movq	32(%rsp), %r15
               	movq	104(%rsp), %rbp
               	movq	80(%rsp), %rax
               	movq	%rax, 8(%r14)
               	movq	%r13, 72(%rsp)
               	movq	$0, 80(%rsp)
               	movb	$0, 88(%rsp)
               	addq	$32, %r14
               	movq	%r14, 56(%rsp)
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	cmpq	%rbp, %rax
               	je	0x41770b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5fb>
               	movq	16(%r15,%rax,8), %rcx
               	cmpq	$2, %rcx
               	jb	0x417463 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x353>
               	movq	%rax, 16(%rsp)
               	addq	$-1, %rcx
               	movq	48(%rsp), %rax
               	movq	56(%rsp), %r14
               	movq	%r14, %r15
               	movq	%rax, 24(%rsp)
               	subq	%rax, %r15
               	movq	%r15, %rbx
               	sarq	$5, %rbx
               	leaq	189860(%rip), %rax      # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%rax, (%rsp)
               	leaq	576(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rdx
               	xorl	%r8d, %r8d
               	leaq	189833(%rip), %r9       # 0x445a4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%eax, %eax
               	callq	0x436bc0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
               	movq	%r13, 72(%rsp)
               	movq	%rbp, %rdi
               	callq	0x413710 <strlen@plt>
               	movq	%rax, %rbp
               	cmpq	$16, %rax
               	jb	0x417504 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x3f4>
               	testq	%rbp, %rbp
               	js	0x417ab7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x9a7>
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	movq	%rax, 72(%rsp)
               	movq	%rbp, 88(%rsp)
               	testq	%rbp, %rbp
               	je	0x41751a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x40a>
               	cmpq	$1, %rbp
               	jne	0x417551 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x441>
               	movb	576(%rsp), %al
               	movb	%al, (%r13)
               	movq	%rbp, 80(%rsp)
               	movb	$0, (%r13,%rbp)
               	cmpq	%r14, %r12
               	je	0x417574 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
               	leaq	16(%r14), %rax
               	movq	%rax, (%r14)
               	movq	72(%rsp), %rcx
               	leaq	88(%rsp), %r13
               	cmpq	%r13, %rcx
               	jne	0x417423 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x313>
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rax)
               	jmp	0x41742f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x31f>
               	movq	%r13, %rdi
               	leaq	576(%rsp), %rsi
               	movq	%rbp, %rdx
               	callq	0x413720 <memcpy@plt>
               	movq	%rbp, 80(%rsp)
               	movb	$0, (%r13,%rbp)
               	cmpq	%r14, %r12
               	jne	0x41752a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x41a>
               	testq	%r15, %r15
               	movq	%rbx, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rbx), %r13
               	movabsq	$576460752303423487, %rcx # imm = 0x7FFFFFFFFFFFFFF
               	cmpq	%rcx, %r13
               	cmovaq	%rcx, %r13
               	addq	%rbx, %rax
               	cmovbq	%rcx, %r13
               	movq	%r12, %rbp
               	movq	24(%rsp), %rbx
               	subq	%rbx, %rbp
               	sarq	$5, %rbp
               	testq	%r13, %r13
               	je	0x4175c5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4b5>
               	movl	$32, %esi
               	movq	%r13, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r14
               	jmp	0x4175c8 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4b8>
               	xorl	%r14d, %r14d
               	shlq	$5, %rbp
               	leaq	(%r14,%rbp), %rax
               	addq	$16, %rax
               	movq	%rax, (%r14,%rbp)
               	movq	72(%rsp), %rcx
               	leaq	88(%rsp), %rdx
               	cmpq	%rdx, %rcx
               	movq	32(%rsp), %r15
               	je	0x4175ff <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ef>
               	leaq	(%r14,%rbp), %rax
               	movq	%rcx, (%rax)
               	movq	88(%rsp), %rax
               	movq	%rax, 16(%r14,%rbp)
               	jmp	0x417605 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4f5>
               	movups	(%rdx), %xmm0
               	movups	%xmm0, (%rax)
               	movq	80(%rsp), %rax
               	movq	%rax, 8(%r14,%rbp)
               	movq	%rdx, 72(%rsp)
               	movq	$0, 80(%rsp)
               	movb	$0, 88(%rsp)
               	cmpq	%rbx, %r12
               	je	0x417700 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5f0>
               	leaq	16(%r14), %rcx
               	leaq	16(%rbx), %rax
               	jmp	0x417676 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x566>
               	nopl	(%rax,%rax)
               	movq	%rcx, -16(%rbp)
               	movq	(%rax), %rcx
               	movq	%rcx, (%rbp)
               	movq	-8(%rax), %rcx
               	movq	%rcx, -8(%rbp)
               	movq	%rax, -16(%rax)
               	movq	$0, -8(%rax)
               	movb	$0, (%rax)
               	leaq	32(%rbp), %rcx
               	leaq	32(%rax), %rdx
               	addq	$16, %rax
               	cmpq	%r12, %rax
               	movq	%rdx, %rax
               	je	0x41768f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x57f>
               	movq	%rcx, %rbp
               	movq	%rcx, -16(%rcx)
               	movq	-16(%rax), %rcx
               	cmpq	%rax, %rcx
               	jne	0x417640 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x530>
               	movups	(%rcx), %xmm0
               	movups	%xmm0, (%rbp)
               	jmp	0x41764b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x53b>
               	addq	$16, %rbp
               	addq	$32, %rbp
               	cmpq	%rbx, %r12
               	jne	0x4176a9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
               	jmp	0x4176c1 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5b1>
               	nop
               	addq	$16, %rbx
               	cmpq	%r12, %rbx
               	je	0x4176bc <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5ac>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x4176a0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x590>
               	callq	0x413730 <free@plt>
               	jmp	0x4176a0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x590>
               	movq	24(%rsp), %rbx
               	testq	%rbx, %rbx
               	je	0x4176ce <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5be>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, 48(%rsp)
               	movq	%rbp, 56(%rsp)
               	shlq	$5, %r13
               	movq	%r13, %r12
               	addq	%r14, %r12
               	movq	72(%rsp), %rdi
               	leaq	88(%rsp), %r13
               	cmpq	%r13, %rdi
               	je	0x4176f6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5e6>
               	callq	0x413730 <free@plt>
               	movq	104(%rsp), %rbp
               	jmp	0x41745e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x34e>
               	leaq	32(%r14), %rbp
               	testq	%rbx, %rbx
               	jne	0x4176c6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5b6>
               	jmp	0x4176ce <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5be>
               	movq	%r12, 64(%rsp)
               	movq	504(%rsp), %rdi
               	leaq	520(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41772a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x61a>
               	callq	0x43c235 <operator delete(void*)>
               	movq	464(%rsp), %rdi
               	leaq	480(%rsp), %rax
               	cmpq	%rax, %rdi
               	movq	128(%rsp), %rbx
               	movl	116(%rsp), %r14d
               	je	0x417751 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x641>
               	callq	0x43c235 <operator delete(void*)>
               	movq	424(%rsp), %rdi
               	leaq	440(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41776b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x65b>
               	callq	0x43c235 <operator delete(void*)>
               	movq	384(%rsp), %rdi
               	leaq	400(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417785 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x675>
               	callq	0x43c235 <operator delete(void*)>
               	movq	344(%rsp), %rdi
               	leaq	360(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x41779f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x68f>
               	callq	0x43c235 <operator delete(void*)>
               	movq	304(%rsp), %rdi
               	leaq	320(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4177b9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a9>
               	callq	0x43c235 <operator delete(void*)>
               	movq	264(%rsp), %rdi
               	leaq	280(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4177d3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6c3>
               	callq	0x43c235 <operator delete(void*)>
               	movq	224(%rsp), %rdi
               	leaq	240(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x4177ed <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6dd>
               	callq	0x43c235 <operator delete(void*)>
               	movq	184(%rsp), %rdi
               	leaq	200(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417807 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6f7>
               	callq	0x43c235 <operator delete(void*)>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417821 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x711>
               	callq	0x43c235 <operator delete(void*)>
               	movq	120(%rsp), %rdi
               	movl	44(%rsp), %ecx
               	testq	%rdi, %rdi
               	je	0x417856 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	movl	%ecx, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%ecx, %ecx
               	jne	0x417856 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	cmpl	$1, %eax
               	jne	0x417856 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	movb	316682(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417856 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x417883 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%r14d, %eax
               	xchgl	%eax, (%rbx)
               	testl	%r14d, %r14d
               	jne	0x417883 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	cmpl	$1, %eax
               	jne	0x417883 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	movb	316633(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417883 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 600(%rsp)
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 584(%rsp)
               	leaq	576(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 592(%rsp)
               	movq	48(%rsp), %r13
               	movq	56(%rsp), %r14
               	movq	%r14, %r15
               	subq	%r13, %r15
               	movq	%r15, %rbx
               	shrq	$5, %rbx
               	testl	%ebx, %ebx
               	movq	%r13, 16(%rsp)
               	movq	%r14, 24(%rsp)
               	js	0x417ac3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x9b3>
               	movq	296(%rax), %rdi
               	movq	%r15, %rax
               	shrq	$2, %rax
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%rax, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	263763(%rip), %rax      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbp)
               	movl	%ebx, 24(%rbp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 600(%rsp)
               	cmpq	%r13, %r14
               	jne	0x417967 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x857>
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417a1a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x90a>
               	sarq	$5, %r15
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	cmpq	$1, %r15
               	movl	$1, %ebx
               	cmovaq	%r15, %rbx
               	movq	288(%rax), %rcx
               	xorl	%r15d, %r15d
               	leaq	144(%rsp), %r12
               	movabsq	$4294967296, %r14       # imm = 0x100000000
               	movq	$0, 168(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 160(%rsp)
               	movq	(%r13), %rdi
               	leaq	168(%rsp), %rsi
               	callq	0x4374c0 <CreateStringFromCString>
               	movq	168(%rsp), %rax
               	movq	%r15, %rcx
               	sarq	$29, %rcx
               	movq	%rax, 32(%rbp,%rcx)
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	%r14, %r15
               	addq	$32, %r13
               	addq	$-1, %rbx
               	jne	0x4179a0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x890>
               	movq	32(%rsp), %r15
               	movq	%r15, 568(%rsp)
               	movq	584(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	16(%rsp), %r14
               	movq	24(%rsp), %rbp
               	cmpq	%rbp, %r14
               	je	0x417a6c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x95c>
               	movq	%r14, %rbx
               	jmp	0x417a59 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x949>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%rbp, %rbx
               	je	0x417a6c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x95c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x417a50 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x940>
               	callq	0x413730 <free@plt>
               	jmp	0x417a50 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x940>
               	testq	%r14, %r14
               	je	0x417a79 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x969>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	136(%rsp), %rdx
               	movq	%r15, (%rdx)
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	552(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r15, (%rdx)
               	movq	%r15, %rax
               	addq	$1608, %rsp             # imm = 0x648
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	188434(%rip), %rdi      # 0x445ad0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x437220 <std::__throw_length_error(char const*)>
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	movq	%rax, %rbp
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	jmp	0x417d30 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc20>
               	movq	%rax, %rbx
               	movq	%r12, 64(%rsp)
               	movq	504(%rsp), %rdi
               	leaq	520(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bff <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaef>
               	movq	464(%rsp), %rdi
               	leaq	480(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c1d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb0d>
               	movq	424(%rsp), %rdi
               	leaq	440(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c3b <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb2b>
               	movq	384(%rsp), %rdi
               	leaq	400(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c59 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb49>
               	movq	344(%rsp), %rdi
               	leaq	360(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c77 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb67>
               	movq	304(%rsp), %rdi
               	leaq	320(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417c95 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xb85>
               	movq	264(%rsp), %rdi
               	leaq	280(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417cb3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xba3>
               	movq	224(%rsp), %rdi
               	leaq	240(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417cd1 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbc1>
               	movq	184(%rsp), %rdi
               	leaq	200(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417cef <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbdf>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417bdf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xacf>
               	callq	0x43c235 <operator delete(void*)>
               	leaq	48(%rsp), %rdi
               	callq	0x437240 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
               	movq	120(%rsp), %rdi
               	movl	44(%rsp), %esi
               	callq	0x4372a0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	callq	0x43c235 <operator delete(void*)>
               	movq	464(%rsp), %rdi
               	leaq	480(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b16 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa06>
               	callq	0x43c235 <operator delete(void*)>
               	movq	424(%rsp), %rdi
               	leaq	440(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b2f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa1f>
               	callq	0x43c235 <operator delete(void*)>
               	movq	384(%rsp), %rdi
               	leaq	400(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b48 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa38>
               	callq	0x43c235 <operator delete(void*)>
               	movq	344(%rsp), %rdi
               	leaq	360(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b61 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa51>
               	callq	0x43c235 <operator delete(void*)>
               	movq	304(%rsp), %rdi
               	leaq	320(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b7a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa6a>
               	callq	0x43c235 <operator delete(void*)>
               	movq	264(%rsp), %rdi
               	leaq	280(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417b93 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa83>
               	callq	0x43c235 <operator delete(void*)>
               	movq	224(%rsp), %rdi
               	leaq	240(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417bac <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa9c>
               	callq	0x43c235 <operator delete(void*)>
               	movq	184(%rsp), %rdi
               	leaq	200(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x417bc5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xab5>
               	callq	0x43c235 <operator delete(void*)>
               	movq	144(%rsp), %rdi
               	leaq	160(%rsp), %rax
               	cmpq	%rax, %rdi
               	jne	0x417bda <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaca>
               	jmp	0x417bdf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xacf>
               	movq	%rax, %rbp
               	movq	8(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	152(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	584(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	24(%rsp), %rax
               	cmpq	%rax, 16(%rsp)
               	je	0x417d6c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc5c>
               	movq	16(%rsp), %rbx
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x417d61 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc51>
               	callq	0x413730 <free@plt>
               	addq	$16, %rbx
               	cmpq	24(%rsp), %rbx
               	jne	0x417d50 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc40>
               	cmpq	$0, 16(%rsp)
               	je	0x417d7e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc6e>
               	movq	16(%rsp), %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<checkRangeIndexes>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movl	%edi, %ebx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 192(%rsp)
               	movups	%xmm0, 8(%rsp)
               	leaq	273000(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movups	%xmm0, 32(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 64(%rsp)
               	movb	315139(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x417e56 <checkRangeIndexes+0xc6>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebx, %ebx
               	js	0x417e88 <checkRangeIndexes+0xf8>
               	cmpl	%r15d, %ebp
               	jg	0x417e88 <checkRangeIndexes+0xf8>
               	cmpl	%ebp, %ebx
               	jg	0x417f65 <checkRangeIndexes+0x1d5>
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rsp, %rdi
               	movq	%rdi, 72(%rsp)
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	80(%rsp), %rdx
               	leaq	293434(%rip), %rsi      # 0x45f8e0 <__unnamed_16>
               	movq	%rsp, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	88(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebx, %esi
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	96(%rsp), %rdx
               	leaq	293447(%rip), %rsi      # 0x45f910 <__unnamed_17>
               	movq	%rsp, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	104(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%ebp, %esi
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	112(%rsp), %rdx
               	leaq	293460(%rip), %rsi      # 0x45f940 <__unnamed_18>
               	movq	%rsp, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	120(%rsp), %rdx
               	movq	%rsp, %rdi
               	movl	%r15d, %esi
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rsi
               	movq	%rsp, %rdi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	263610(%rip), %rcx      # 0x458500 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 136(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 144(%rsp)
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	152(%rsp), %rdx
               	leaq	293205(%rip), %rsi      # 0x45f8e0 <__unnamed_16>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	160(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebx, %esi
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	168(%rsp), %rdx
               	leaq	293288(%rip), %rsi      # 0x45f960 <__unnamed_19>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	176(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movl	%ebp, %esi
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	184(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	263558(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 192(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	314594(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418077 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x17>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x4180a2 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x42>
               	cmpl	%ebp, 8(%rbx)
               	jbe	0x4180b1 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}+0x51>
               	movq	(%rbx), %rax
               	movslq	%ebp, %rax
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	261863(%rip), %rsi      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edx, %r14d
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	314494(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4180db <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x1b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x418166 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa6>
               	movl	8(%rbx), %edx
               	movl	%ebp, %edi
               	movl	%r14d, %esi
               	callq	0x417d90 <checkRangeIndexes>
               	movq	(%rbx), %rax
               	cmpl	%r14d, %ebp
               	jge	0x418161 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movslq	%ebp, %rdx
               	notl	%ebp
               	addl	%r14d, %ebp
               	je	0x418144 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x84>
               	addq	$1, %rbp
               	movq	%rbp, %rcx
               	andq	$-2, %rcx
               	leaq	(%rcx,%rdx), %rax
               	leaq	(%rbx,%rdx,8), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	xorps	%xmm0, %xmm0
               	nop
               	movups	%xmm0, (%rdx,%rsi,8)
               	addq	$2, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x418130 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x70>
               	cmpq	%rcx, %rbp
               	jne	0x418147 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x87>
               	jmp	0x418161 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0xa1>
               	movq	%rdx, %rax
               	movl	%r14d, %ecx
               	nopw	(%rax,%rax)
               	movq	$0, 16(%rbx,%rax,8)
               	addq	$1, %rax
               	cmpl	%eax, %ecx
               	jne	0x418150 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}+0x90>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	261667(%rip), %rsi      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.MemoryModel.$init_global#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$384, %rsp              # imm = 0x180
               	leaq	88(%rsp), %rbx
               	movl	$296, %edx              # imm = 0x128
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 96(%rsp)
               	movq	%rbx, 288(%r14)
               	movabsq	$158913789952, %rax     # imm = 0x2500000000
               	movq	%rax, 104(%rsp)
               	movb	314229(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4181e4 <kfun:kotlin.native.MemoryModel.$init_global#internal+0x64>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	265460(%rip), %rbx      # 0x458f00 <ktypeglobal:kotlin.native.MemoryModel#internal>
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 112(%rsp)
               	movq	%rcx, 120(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 128(%rsp)
               	movq	%rcx, 136(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	movq	%rbx, 16(%rax)
               	movq	%rcx, 144(%rsp)
               	movq	%rcx, 152(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	261341(%rip), %rbx      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 160(%rsp)
               	movq	%rcx, 168(%rsp)
               	movq	%rcx, 176(%rsp)
               	movq	120(%rsp), %rcx
               	movq	%rcx, 184(%rsp)
               	movq	16(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	136(%rsp), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 192(%rsp)
               	movq	%rax, 200(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 24(%rcx)
               	movq	152(%rsp), %rax
               	movq	168(%rsp), %rcx
               	movq	%rcx, 208(%rsp)
               	movq	%rax, 216(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 32(%rcx)
               	movq	168(%rsp), %rsi
               	movq	%rsi, 224(%rsp)
               	movq	%rsi, 309056(%rip)      # 0x463a90 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	leaq	309049(%rip), %rdi      # 0x463a90 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rsi), %rax
               	movq	%rax, 232(%rsp)
               	leaq	292390(%rip), %rcx      # 0x45f990 <__unnamed_20>
               	movq	%rcx, 8(%rax)
               	movl	$0, 16(%rax)
               	movq	24(%rsi), %rax
               	movq	%rax, 240(%rsp)
               	leaq	292392(%rip), %rcx      # 0x45f9b0 <__unnamed_21>
               	movq	%rcx, 8(%rax)
               	movl	$1, 16(%rax)
               	movq	16(%rsi), %rax
               	movq	%rax, 248(%rsp)
               	leaq	292394(%rip), %rcx      # 0x45f9d0 <__unnamed_22>
               	movq	%rcx, 8(%rax)
               	movl	$2, 16(%rax)
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	308947(%rip), %rax      # 0x463a90 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	32(%rax), %rcx
               	movq	%rcx, 256(%rsp)
               	movq	%rcx, 264(%rsp)
               	movq	24(%rax), %rcx
               	movq	%rcx, 272(%rsp)
               	movq	%rcx, 280(%rsp)
               	movq	16(%rax), %rax
               	movq	%rax, 288(%rsp)
               	movq	%rax, 296(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	movq	%rbx, 16(%rax)
               	movl	$3, 24(%rax)
               	movq	%rcx, 304(%rsp)
               	movq	%rcx, 312(%rsp)
               	movq	%rcx, 320(%rsp)
               	movq	264(%rsp), %rcx
               	movq	%rcx, 328(%rsp)
               	movq	16(%rax), %rdx
               	movq	%rcx, 32(%rax)
               	movq	280(%rsp), %rax
               	movq	312(%rsp), %rcx
               	movq	%rcx, 336(%rsp)
               	movq	%rax, 344(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 24(%rcx)
               	movq	296(%rsp), %rax
               	movq	312(%rsp), %rcx
               	movq	%rcx, 352(%rsp)
               	movq	%rax, 360(%rsp)
               	movq	(%rcx), %rdx
               	movq	%rax, 32(%rcx)
               	movq	312(%rsp), %rbx
               	movq	%rbx, 368(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r15
               	movq	$0, 8(%rax)
               	leaq	273543(%rip), %rcx      # 0x45b1a0 <ktypeglobal:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0#internal>
               	movq	%rcx, 16(%rax)
               	movq	%r15, 24(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	273250(%rip), %rcx      # 0x45b0b0 <ktypeglobal:kotlin.enums.EnumEntriesList#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%r15, 24(%rax)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	leaq	72(%rsp), %rsi
               	movq	288(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	%rbx, %rdi
               	callq	0x420490 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rbx, 376(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	leaq	308449(%rip), %rdi      # 0x463a98 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movq	%rbx, %rsi
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	96(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$384, %rsp              # imm = 0x180
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	32(%rsp), %r12
               	leaq	40(%rsp), %rbp
               	movups	%xmm0, 88(%rsp)
               	leaq	270907(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	313060(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418675 <kfun:kotlin.native.concurrent.FreezableAtomicReference#toString(){}kotlin.String+0x95>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r14
               	movq	%r14, 24(%rsp)
               	movq	%r14, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	0x418710 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	291668(%rip), %rsi      # 0x45fa00 <__unnamed_23>
               	movq	%r14, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 56(%rsp)
               	leaq	64(%rsp), %rsi
               	callq	0x418710 <kfun:kotlin.native.concurrent.debugString#internal>
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	leaq	72(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r15)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.debugString#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movups	%xmm0, 144(%rsp)
               	leaq	270606(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 136(%rsp)
               	movq	$0, 40(%rsp)
               	leaq	265794(%rip), %rax      # 0x4595b0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 64(%rsp)
               	movb	312729(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4187c0 <kfun:kotlin.native.concurrent.debugString#internal+0xb0>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x418925 <kfun:kotlin.native.concurrent.debugString#internal+0x215>
               	leaq	96(%rsp), %rbp
               	leaq	88(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	%r12, 72(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	32(%rsp), %rdi
               	movq	%rdi, 80(%rsp)
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rsi
               	callq	0x419500 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	290973(%rip), %rsi      # 0x45f8c0 <__unnamed_15>
               	movq	%r12, %rdi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*120(%rax)
               	movl	%eax, %edi
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 240(%rsp)
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 168(%rsp)
               	leaq	160(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 176(%rsp)
               	movq	168(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbp, %rsi
               	callq	0x43b1d0 <Kotlin_Long_toStringRadix>
               	movq	%rax, 24(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	jmp	0x41892c <kfun:kotlin.native.concurrent.debugString#internal+0x21c>
               	leaq	290036(%rip), %rax      # 0x45f620 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	312301(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41896c <kfun:kotlin.native.concurrent.AtomicInt#toString(){}kotlin.String+0x1c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	leaq	184690(%rip), %rdx      # 0x445ae8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x437ef0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x4374c0 <CreateStringFromCString>
               	movq	%rax, (%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 112(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 16(%rsp)
               	movb	312112(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418a29 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x89>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	307346(%rip), %eax      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418a5a <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0xba>
               	leaq	307334(%rip), %rdi      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1403(%rip), %rsi        # 0x418fd0 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 307263(%rip)      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418af7 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x157>
               	movq	24(%r12), %r15
               	movq	%r15, %rdi
               	callq	0x4191d0 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	movq	16(%r12), %rax
               	movq	%rax, 40(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 48(%rsp)
               	cmpq	%rbx, 307218(%rip)      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	jne	0x418aef <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x14f>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	movq	8(%rax), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x418b18 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0+0x178>
               	leaq	80(%rsp), %rsi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$89, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	callq	*(%rax)
               	movq	%rax, %rbx
               	movq	16(%r12), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rbx, 8(%rax)
               	movq	8(%r12), %rax
               	movq	%rax, 112(%rsp)
               	movq	$0, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x419270 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 56(%rsp)
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%r15, %rdi
               	callq	0x419270 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	311713(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418bb8 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x68>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r14), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	306948(%rip), %eax      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418be8 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean+0x98>
               	leaq	306936(%rip), %rdi      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	1005(%rip), %rsi        # 0x418fd0 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	cmpq	%rbx, 306865(%rip)      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	setne	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	311527(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x418ca3 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x93>
               	movq	%r15, %rdi
               	callq	0x418b50 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	je	0x418cb4 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xa4>
               	leaq	24(%rsp), %rsi
               	movq	%r15, %rdi
               	callq	0x4189a0 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#<get-value>(){}1:0>
               	testq	%rax, %rax
               	je	0x418cbd <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xad>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rcx)
               	jmp	0x418cc4 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	callq	0x418b50 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#isInitialized(){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x418c79 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0x69>
               	leaq	290149(%rip), %rax      # 0x45fa20 <__unnamed_24>
               	jmp	0x418cc4 <kfun:kotlin.native.concurrent.SynchronizedLazyImpl#toString(){}kotlin.String+0xb4>
               	leaq	289116(%rip), %rax      # 0x45f620 <__unnamed_8>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	311300(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x418d55 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x75>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %r14
               	movq	%r14, %rdi
               	callq	0x4191d0 <kfun:kotlin.native.concurrent.Lock#lock(){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	$0, 176(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$73014444032, %rax      # imm = 0x1100000000
               	movq	%rax, 64(%rsp)
               	movq	8(%rbx), %rax
               	movq	8(%rax), %r13
               	movq	%r13, 72(%rsp)
               	movq	%r13, 80(%rsp)
               	movq	%r13, 88(%rsp)
               	movl	306413(%rip), %eax      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	cmpl	$2, %eax
               	je	0x418dff <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x11f>
               	leaq	306401(%rip), %rdi      # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	leaq	470(%rip), %rsi         # 0x418fd0 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	cmpq	%r13, 306330(%rip)      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	je	0x418ea1 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1c1>
               	movq	80(%rsp), %rbp
               	movq	%rbp, 96(%rsp)
               	movl	306364(%rip), %eax      # 0x463ad8 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418e34 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x154>
               	leaq	306352(%rip), %rdi      # 0x463ad8 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	673(%rip), %rsi         # 0x4190d0 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movq	306285(%rip), %rax      # 0x463aa8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 104(%rsp)
               	cmpq	%rax, %rbp
               	jne	0x418f13 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x233>
               	movq	8(%rbx), %rax
               	movq	306252(%rip), %rcx      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	260031(%rip), %rcx      # 0x458640 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	289759(%rip), %rsi      # 0x45fa70 <__unnamed_25>
               	movq	%rbx, %rdi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	8(%rbx), %rbp
               	movl	306221(%rip), %eax      # 0x463ad8 <state_global$kotlin.native.concurrent.INITIALIZING>
               	cmpl	$2, %eax
               	je	0x418ec3 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1e3>
               	leaq	306209(%rip), %rdi      # 0x463ad8 <state_global$kotlin.native.concurrent.INITIALIZING>
               	leaq	530(%rip), %rsi         # 0x4190d0 <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movq	306142(%rip), %rax      # 0x463aa8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 128(%rsp)
               	testq	%rdi, %rdi
               	je	0x418f57 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x277>
               	leaq	144(%rsp), %rsi
               	callq	0x417110 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, 80(%rsp)
               	movq	$0, 16(%rbx)
               	movq	8(%rbx), %rax
               	movq	80(%rsp), %rcx
               	movq	%rcx, 176(%rsp)
               	movq	%rcx, 8(%rax)
               	movq	80(%rsp), %rbx
               	movq	%rbx, 32(%rsp)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r14, %rdi
               	callq	0x419270 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, (%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %r15
               	movq	%r15, 136(%rsp)
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	8(%rbx), %rax
               	movq	305936(%rip), %rcx      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movq	%rcx, 8(%rax)
               	movq	%r15, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%r12)
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 24(%rsp)
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%r14, %rdi
               	callq	0x419270 <kfun:kotlin.native.concurrent.Lock#unlock(){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>

<kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	310575(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41902a <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal+0x5a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	262542(%rip), %rdx      # 0x4591e0 <ktypeglobal:kotlin.native.concurrent.UNINITIALIZED#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 305726(%rip)      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	leaq	305719(%rip), %rdi      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	305653(%rip), %rsi      # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 16(%rsp)
               	movb	310319(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41912a <kfun:kotlin.native.concurrent.INITIALIZING.$init_global#internal+0x5a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	262430(%rip), %rdx      # 0x459270 <ktypeglobal:kotlin.native.concurrent.INITIALIZING#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 305478(%rip)      # 0x463aa8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	leaq	305471(%rip), %rdi      # 0x463aa8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r14, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	305405(%rip), %rsi      # 0x463aa8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.concurrent.Lock#lock(){}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	310132(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4191e5 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x15>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %rcx
               	cmpl	$2, -72(%rax)
               	je	0x419210 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x40>
               	leaq	-72(%rax), %rdi
               	leaq	197(%rip), %rsi         # 0x4192d0 <kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal>
               	callq	0x43b190 <CallInitThreadLocal>
               	xorl	%edi, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	nopl	(%rax)
               	movzbl	310041(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419240 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x70>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	sete	%cl
               	cmpl	%ebp, %eax
               	je	0x41925d <kfun:kotlin.native.concurrent.Lock#lock(){}+0x8d>
               	testb	%cl, %cl
               	je	0x419230 <kfun:kotlin.native.concurrent.Lock#lock(){}+0x60>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	16(%rbx), %rax
               	lock
               	addl	$1, 8(%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.Lock#unlock(){}>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	309972(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419285 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x15>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%rbx), %rax
               	movl	8(%rax), %eax
               	testl	%eax, %eax
               	jle	0x4192a0 <kfun:kotlin.native.concurrent.Lock#unlock(){}+0x30>
               	movq	16(%rbx), %rax
               	lock
               	addl	$-1, 8(%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	xorl	%ebp, %ebp
               	xorl	%edi, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	8(%rbx), %rcx
               	lock
               	cmpxchgl	%ebp, 8(%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$80, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movb	309802(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41932f <kfun:kotlin.native.concurrent.CurrentThread.$init_thread_local#internal+0x5f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%edi, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	%rax, %r14
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	262191(%rip), %rcx      # 0x459390 <ktypeglobal:kotlin.native.concurrent.CurrentThread#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	%rbx, (%rax)
               	xorl	%edi, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$16, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256800(%rip), %rdx      # 0x457f00 <ktypeglobal:kotlin.Any#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 32(%rsp)
               	movq	%rcx, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	xorl	%edi, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r14)
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$80, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	309438(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x4194a2 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x72>
               	movq	8(%r15), %rax
               	testb	$2, 89(%rax)
               	jne	0x4194b1 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x81>
               	jmp	0x4194e0 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	testb	$2, 89(%rax)
               	je	0x4194e0 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
               	movq	80(%rax), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x4194e0 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
               	leaq	32(%rsp), %rdx
               	movl	$46, %esi
               	callq	0x421180 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	movq	%rax, %rdi
               	movl	$36, %esi
               	movq	%r14, %rdx
               	callq	0x421180 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>
               	jmp	0x4194e2 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb2>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 64(%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	267041(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 16(%rsp)
               	movb	309194(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41958f <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x8f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	88(%rax), %ecx
               	testl	$256, %ecx              # imm = 0x100
               	jne	0x4195c1 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xc1>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	72(%rax), %r15
               	movq	%r15, 24(%rsp)
               	xorl	%ebx, %ebx
               	testq	%r15, %r15
               	je	0x4195a0 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	andl	$512, %ecx              # imm = 0x200
               	je	0x4195a0 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	movq	80(%rax), %rbx
               	movq	%rbx, 32(%rsp)
               	testq	%rbx, %rbx
               	je	0x41959e <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0x9e>
               	cmpl	$0, 8(%r15)
               	je	0x4195a0 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	leaq	48(%rsp), %r12
               	leaq	80(%rsp), %r13
               	movq	%r13, 40(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	287905(%rip), %rsi      # 0x45fac0 <__unnamed_26>
               	movq	%r13, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	jmp	0x4195a0 <kfun:kotlin.native.internal.KClassImpl#<get-qualifiedName>(){}kotlin.String?+0xa0>
               	nop

<kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	308976(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419669 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x419694 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$202, 92(%rax)
               	jne	0x419694 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
               	movq	8(%r14), %rax
               	cmpq	8(%rbx), %rax
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	308902(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4196b3 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbx
               	movl	304159(%rip), %eax      # 0x463adc <state_global$kotlin.native.internal.NativePtr>
               	cmpl	$2, %eax
               	je	0x4196d5 <kfun:kotlin.native.internal.KClassImpl#hashCode(){}kotlin.Int+0x35>
               	leaq	304147(%rip), %rdi      # 0x463adc <state_global$kotlin.native.internal.NativePtr>
               	leaq	544(%rip), %rsi         # 0x4198f0 <kfun:kotlin.native.internal.NativePtr.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	xorl	%ebx, %eax
               	popq	%rbx
               	retq

<kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	308752(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419749 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String+0x69>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x419790 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>
               	testq	%rax, %rax
               	leaq	287650(%rip), %rsi      # 0x45fb00 <__unnamed_27>
               	cmovneq	%rax, %rsi
               	leaq	287607(%rip), %rdi      # 0x45fae0 <__unnamed_28>
               	movq	%r12, %rdx
               	callq	0x437cc0 <Kotlin_String_plusImpl>
               	movq	%rax, (%r12)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	266389(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	308540(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41981d <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x8d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	80(%rax), %rbx
               	movq	%rbx, 24(%rsp)
               	testq	%rbx, %rbx
               	je	0x4198c3 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x133>
               	movq	72(%rax), %r15
               	movq	%r15, 32(%rsp)
               	testq	%r15, %r15
               	je	0x4198c5 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x135>
               	leaq	40(%rsp), %rsi
               	xorl	%edi, %edi
               	cmpl	$0, 8(%r15)
               	sete	%dil
               	callq	0x415c70 <kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any>
               	testq	%rax, %rax
               	je	0x4198c5 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x135>
               	cmpb	$0, 8(%rax)
               	jne	0x4198c5 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x135>
               	leaq	56(%rsp), %r13
               	leaq	80(%rsp), %rbp
               	movq	%rbp, 48(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	287274(%rip), %rsi      # 0x45fac0 <__unnamed_26>
               	movq	%rbp, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	leaq	72(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	jmp	0x4198c5 <kfun:kotlin.native.internal.KClassImpl#<get-fullName>(){}kotlin.String?+0x135>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.native.internal.NativePtr.$init_global#internal>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	308241(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419948 <kfun:kotlin.native.internal.NativePtr.$init_global#internal+0x58>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	261584(%rip), %rdx      # 0x459740 <ktypeglobal:kotlin.native.internal.NativePtr.Companion#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 303408(%rip)      # 0x463ab0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	leaq	303401(%rip), %rdi      # 0x463ab0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movq	$0, 24(%rax)
               	movq	303386(%rip), %rsi      # 0x463ab0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 80(%rsp)
               	leaq	32(%rsp), %rbx
               	movups	%xmm0, 104(%rsp)
               	leaq	265828(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 96(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 16(%rsp)
               	movb	307979(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419a4e <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x9e>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	96(%rsp), %rdi
               	movq	%rdi, 24(%rsp)
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	leaq	286942(%rip), %rbx      # 0x45fb70 <__unnamed_29>
               	movq	%rbx, %rsi
               	cmpq	%r15, %rax
               	je	0x419ac3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	testq	%rax, %rax
               	je	0x419abc <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x10c>
               	leaq	40(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x419ac3 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x113>
               	leaq	285533(%rip), %rsi      # 0x45f620 <__unnamed_8>
               	movq	%rsi, 40(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	286911(%rip), %rsi      # 0x45fba0 <__unnamed_30>
               	movq	%rbp, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*8(%rax)
               	cmpq	%r15, %rax
               	je	0x419b48 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	testq	%rax, %rax
               	je	0x419b41 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x191>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rbx
               	jmp	0x419b48 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal+0x198>
               	leaq	285400(%rip), %rbx      # 0x45f620 <__unnamed_8>
               	leaq	80(%rsp), %rdx
               	movq	%rbx, 72(%rsp)
               	leaq	96(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r12)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	307628(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419bad <kfun:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x4199b0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<ThrowNullPointerException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	307500(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419c2d <ThrowNullPointerException+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	256964(%rip), %rcx      # 0x458820 <ktypeglobal:kotlin.NullPointerException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowArrayIndexOutOfBoundsException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	307292(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419cfd <ThrowArrayIndexOutOfBoundsException+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	256916(%rip), %rcx      # 0x4588c0 <ktypeglobal:kotlin.ArrayIndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowClassCastException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$176, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	$0, 160(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	260075(%rip), %rax      # 0x4595b0 <ktypeglobal:kotlin.native.internal.KClassImpl#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movups	%xmm0, 32(%rsp)
               	leaq	264838(%rip), %rcx      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 72(%rsp)
               	leaq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$55834574848, %rax      # imm = 0xD00000000
               	movq	%rax, 80(%rsp)
               	movb	306972(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419e3d <ThrowClassCastException+0xcd>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	8(%rsp), %rax
               	movq	%rax, 88(%rsp)
               	movq	%rbx, 16(%rsp)
               	leaq	24(%rsp), %rdi
               	movq	%rdi, 96(%rsp)
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	112(%rsp), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	48(%rsp), %rdi
               	movq	%rdi, 104(%rsp)
               	movq	%rax, 56(%rsp)
               	callq	0x4196e0 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	120(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	128(%rsp), %rdx
               	leaq	285980(%rip), %rsi      # 0x45fbc0 <__unnamed_31>
               	leaq	24(%rsp), %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	136(%rsp), %rsi
               	leaq	8(%rsp), %rdi
               	callq	0x4196e0 <kfun:kotlin.native.internal.KClassImpl#toString(){}kotlin.String>
               	leaq	144(%rsp), %rdx
               	leaq	24(%rsp), %rdi
               	movq	%rax, %rsi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	152(%rsp), %rsi
               	leaq	24(%rsp), %rdi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	256583(%rip), %rcx      # 0x458960 <ktypeglobal:kotlin.ClassCastException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 160(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	72(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowInvalidReceiverTypeException>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	306573(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x419fcc <ThrowInvalidReceiverTypeException+0x6c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$27, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	leaq	32(%rsp), %rdx
               	testq	%rax, %rax
               	leaq	285776(%rip), %rsi      # 0x45fc50 <__unnamed_32>
               	cmovneq	%rax, %rsi
               	leaq	285685(%rip), %rdi      # 0x45fc00 <__unnamed_33>
               	callq	0x437cc0 <Kotlin_String_plusImpl>
               	movq	%rax, %r15
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	255006(%rip), %rcx      # 0x458460 <ktypeglobal:kotlin.RuntimeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 40(%rsp)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax)

<ThrowIllegalArgumentException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	306300(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a0dd <ThrowIllegalArgumentException+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	255124(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<ThrowFileFailedToInitializeException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	306092(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a1ad <ThrowFileFailedToInitializeException+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	257460(%rip), %rcx      # 0x458f90 <ktypeglobal:kotlin.native.FileFailedToInitializeException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	leaq	285316(%rip), %rsi      # 0x45fc70 <__unnamed_34>
               	movq	%rbx, %rdi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<ReportUnhandledException>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %rbx
               	movq	$0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 16(%rsp)
               	movb	305885(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a27c <ReportUnhandledException+0x5c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	285277(%rip), %rdi      # 0x45fce0 <__unnamed_35>
               	callq	0x43b4a0 <Kotlin_io_Console_print>
               	movq	%rbx, %rdi
               	callq	0x4162b0 <kfun:kotlin.Throwable#printStackTrace(){}>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 80(%rsp)
               	movb	305696(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a339 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x69>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdx
               	movq	$0, 8(%rax)
               	leaq	259326(%rip), %rcx      # 0x459860 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
               	movq	%rax, 8(%rsp)
               	movq	%rcx, 16(%rax)
               	movq	%rdx, 88(%rsp)
               	movq	%rdx, 300865(%rip)      # 0x463ab8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 144(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 104(%rsp)
               	leaq	96(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, 112(%rsp)
               	movl	300757(%rip), %eax      # 0x463ad0 <state_global$kotlin.native.MemoryModel>
               	cmpl	$2, %eax
               	je	0x41a413 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x143>
               	leaq	300745(%rip), %rdi      # 0x463ad0 <state_global$kotlin.native.MemoryModel>
               	leaq	-8846(%rip), %rsi       # 0x418180 <kfun:kotlin.native.MemoryModel.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movq	300662(%rip), %r13      # 0x463a90 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 48(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 32(%rsp)
               	movl	8(%r13), %ebp
               	testl	%ebp, %ebp
               	js	0x41a60f <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33f>
               	movq	296(%r12), %rdi
               	leaq	31(,%rbp,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	252657(%rip), %rax      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r15, 40(%rsp)
               	movl	8(%r13), %ebp
               	xorl	%r14d, %r14d
               	testl	%ebp, %ebp
               	cmovsl	%r14d, %ebp
               	cmpl	%r14d, %ebp
               	je	0x41a4f9 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x229>
               	nopl	(%rax)
               	movzbl	305289(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a4d0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x200>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r13,%r14,8), %rax
               	movq	%rax, 48(%rsp)
               	movslq	16(%rax), %rcx
               	cmpl	%ecx, 24(%rbx)
               	jbe	0x41a60a <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33a>
               	movq	16(%rbx), %rdx
               	movq	%rax, 32(%rbx,%rcx,8)
               	addq	$1, %r14
               	cmpl	%r14d, %ebp
               	jne	0x41a4c0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x1f0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$72, 92(%rax)
               	jne	0x41a614 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x344>
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%r15, 120(%rsp)
               	cmpl	$2, 24(%rbx)
               	jbe	0x41a60a <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x33a>
               	movq	48(%rbx), %rdi
               	movq	%rdi, 152(%rsp)
               	movq	104(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	300359(%rip), %rax      # 0x463a90 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	16(%rax), %rsi
               	movq	%rsi, 160(%rsp)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*112(%rax)
               	movl	%eax, %ebx
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	256675(%rip), %rdx      # 0x459030 <ktypeglobal:kotlin.native.concurrent.FreezableAtomicReference#internal>
               	movq	%rdx, 16(%rax)
               	testb	%bl, %bl
               	je	0x41a5a7 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2d7>
               	movq	%rcx, 168(%rsp)
               	movq	$0, 24(%rax)
               	jmp	0x41a5bf <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal+0x2ef>
               	movq	%rcx, 176(%rsp)
               	movq	$0, 24(%rax)
               	movq	%rcx, 184(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rcx, 24(%rax)
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	300249(%rip), %rsi      # 0x463ab8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	leaq	300242(%rip), %rdi      # 0x463ab8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	72(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	leaq	252277(%rip), %rsi      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%r15, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movl	%edx, %r14d
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 144(%rsp)
               	movups	%xmm0, 184(%rsp)
               	leaq	262603(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 176(%rsp)
               	movups	%xmm0, 160(%rsp)
               	movq	%rax, 152(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$81604378624, %rax      # imm = 0x1300000000
               	movq	%rax, 16(%rsp)
               	movb	304737(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a6f8 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xc8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41a727 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%r14d, %ebx
               	jg	0x41a727 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0xf7>
               	cmpl	%ebx, %ebp
               	jg	0x41a7f4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x1c4>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	32(%rsp), %r12
               	leaq	176(%rsp), %r13
               	movq	%r13, 24(%rsp)
               	movq	%r13, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	284131(%rip), %rsi      # 0x45fd30 <__unnamed_36>
               	movq	%r13, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebp, %esi
               	leaq	40(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	284146(%rip), %rsi      # 0x45fd60 <__unnamed_37>
               	movq	%r13, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	283055(%rip), %rsi      # 0x45f940 <__unnamed_18>
               	movq	%r13, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	movl	%r14d, %esi
               	leaq	72(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r13, %rdi
               	leaq	80(%rsp), %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	253210(%rip), %rcx      # 0x458500 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 88(%rsp)
               	jmp	0x41a8a4 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}+0x274>
               	leaq	112(%rsp), %r14
               	leaq	104(%rsp), %r13
               	leaq	152(%rsp), %r12
               	movq	%r12, 96(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	283921(%rip), %rsi      # 0x45fd30 <__unnamed_36>
               	movq	%r12, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	283986(%rip), %rsi      # 0x45fd90 <__unnamed_38>
               	movq	%r12, %rdi
               	leaq	120(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	128(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	136(%rsp), %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	253192(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 144(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$264, %rsp              # imm = 0x108
               	movq	%rdx, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdi, %rbp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movq	$0, 224(%rsp)
               	movups	%xmm0, 248(%rsp)
               	leaq	261972(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 240(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 200(%rsp)
               	leaq	192(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 208(%rsp)
               	movb	304111(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41a96a <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0xaa>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	240(%rsp), %rbx
               	movq	%rbx, 216(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movq	$0, 176(%rsp)
               	leaq	144(%rsp), %r15
               	leaq	136(%rsp), %r12
               	movq	288(%r13), %rax
               	movq	%rax, 120(%rsp)
               	leaq	112(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 128(%rsp)
               	leaq	254541(%rip), %rax      # 0x458c41 <ktypeglobal:kotlin.String#internal+0x1>
               	andq	$-4, %rax
               	movq	%rax, 8(%rsp)
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	281670(%rip), %r14      # 0x45f660 <__unnamed_39>
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r12, %r8
               	callq	0x41eb10 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 136(%rsp)
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%rax, %r12
               	movl	$1, %ebp
               	leaq	32(%rsp), %r14
               	jmp	0x41aa8f <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1cf>
               	nop
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	leaq	80(%rsp), %rdx
               	callq	0x41ea90 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addl	$1, %ebp
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41acaa <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3ea>
               	movzbl	303756(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aacd <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x20d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	leaq	152(%rsp), %rsi
               	callq	*8(%rax)
               	movq	%rax, %r15
               	cmpl	$2, %ebp
               	jl	0x41ab5b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x29b>
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %r14
               	movq	%r13, %r12
               	leaq	281364(%rip), %r13      # 0x45f640 <__unnamed_40>
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	movq	%r12, %r13
               	movq	%r14, %r12
               	leaq	32(%rsp), %r14
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	leaq	160(%rsp), %r8
               	callq	0x41eb10 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 160(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r14, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	cmpq	$0, 16(%rsp)
               	je	0x41ac00 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x340>
               	movq	16(%rsp), %rcx
               	movq	(%rcx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	8(%rcx), %rdi
               	leaq	257045(%rip), %rcx      # 0x4597d0 <ktypeglobal:kotlin.native.internal.NSDictionaryAsKMap.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	cmpq	%rcx, %rax
               	je	0x41ac60 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3a0>
               	leaq	283509(%rip), %rsi      # 0x45ff40 <__unnamed_41>
               	cmpq	%rdi, %r15
               	je	0x41abf7 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	leaq	281161(%rip), %rsi      # 0x45f620 <__unnamed_8>
               	testq	%r15, %r15
               	je	0x41abf7 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x337>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	64(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%rsi, 64(%rsp)
               	jmp	0x41ac75 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3b5>
               	nop
               	testq	%r15, %r15
               	je	0x41aa70 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	cmpl	$25, (%rax,%rcx)
               	je	0x41aa70 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1b0>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$84, 92(%rax)
               	jne	0x41ac82 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x3c2>
               	movzwl	8(%r15), %esi
               	movq	%rbx, %rdi
               	leaq	88(%rsp), %rdx
               	callq	0x41e9b0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	jmp	0x41aa80 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1c0>
               	nopw	%cs:(%rax,%rax)
               	movq	%r15, %rsi
               	leaq	56(%rsp), %rdx
               	callq	0x4199b0 <kfun:kotlin.native.internal.NSDictionaryAsKMap.toString$lambda$0#internal>
               	movq	%rax, %rsi
               	movq	%rax, 56(%rsp)
               	movq	%rbx, %rdi
               	leaq	72(%rsp), %rdx
               	jmp	0x41aa7b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	96(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	leaq	104(%rsp), %rdx
               	jmp	0x41aa7b <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String+0x1bb>
               	leaq	176(%rsp), %r14
               	movq	8(%rsp), %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	281004(%rip), %rbp      # 0x45f680 <__unnamed_10>
               	movq	%rbp, %rdi
               	callq	*(%rax)
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb10 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, 176(%rsp)
               	movq	%rbx, 224(%rsp)
               	movq	120(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rdi
               	movq	24(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	200(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$264, %rsp              # imm = 0x108
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.object-2.iterator#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	303104(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ad59 <kfun:kotlin.collections.object-2.iterator#internal+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x420dd0 <kfun:kotlin.ranges.IntProgression#iterator(){}kotlin.collections.IntIterator>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	303056(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ad89 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41ae37 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc7>
               	testq	%rbx, %rbx
               	je	0x41ae30 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x41ae30 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41ae30 <kfun:kotlin.collections.AbstractMutableSet#equals(kotlin.Any?){}kotlin.Boolean+0xc0>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	16(%rax), %rax
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmpq	*%rax
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movb	302845(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ae5c <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x1c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	xorl	%ebp, %ebp
               	jmp	0x41af30 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xf0>
               	nopw	%cs:(%rax,%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41af70 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x130>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41af74 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0x134>
               	movzbl	302576(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aef0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41aef0 <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41af2e <kfun:kotlin.collections.AbstractMutableSet#hashCode(){}kotlin.Int+0xee>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%ebp, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	302502(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afb3 <kfun:kotlin.collections.HashMap#<get-size>(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	302470(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41afd3 <kfun:kotlin.collections.HashMap#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpl	$0, 76(%rbx)
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	302432(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41aff9 <kfun:kotlin.collections.HashMap#containsKey(1:0){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	movb	302359(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b042 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x22>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movl	68(%r12), %r13d
               	leal	-1(%r13), %eax
               	movslq	%eax, %rbx
               	jmp	0x41b0ad <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x8d>
               	nop
               	testq	%r14, %r14
               	je	0x41b141 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x121>
               	addq	$-1, %rbx
               	testl	%ebx, %ebx
               	js	0x41b114 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xf4>
               	movzbl	302232(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b0c1 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xa1>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%r12), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b146 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	addl	$-1, %r13d
               	cmpl	$0, 16(%rax,%rbx,4)
               	js	0x41b0a9 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41b14b <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x12b>
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41b146 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x126>
               	movq	16(%rax,%rbx,8), %rdi
               	movq	%rdi, 40(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b0a0 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x80>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41b0a9 <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0x89>
               	jmp	0x41b11a <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	movl	$4294967295, %r13d      # imm = 0xFFFFFFFF
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testl	%r13d, %r13d
               	setns	%al
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ebx, %r13d
               	jmp	0x41b11a <kfun:kotlin.collections.HashMap#containsValue(1:1){}kotlin.Boolean+0xfa>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x419bd0 <ThrowNullPointerException>

<kfun:kotlin.collections.HashMap#get(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	301986(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b1b7 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x67>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41b1e6 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x96>
               	movq	16(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	testq	%rcx, %rcx
               	je	0x41b203 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb3>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41b208 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0xb8>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, (%r14)
               	jmp	0x41b1e8 <kfun:kotlin.collections.HashMap#get(1:0){}1:1?+0x98>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	301776(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b289 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x79>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	movl	%eax, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movq	16(%r12), %rcx
               	movq	%rcx, 104(%rsp)
               	testq	%rcx, %rcx
               	jne	0x41b389 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x179>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	leaq	48(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 64(%rsp)
               	movq	8(%r12), %rax
               	movq	%rax, 72(%rsp)
               	movl	8(%rax), %r13d
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%r13d, %r13d
               	js	0x41b3f4 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1e4>
               	movq	296(%rbx), %rdi
               	leaq	31(,%r13,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	248857(%rip), %rdx      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r13d, 24(%rax)
               	movq	%rcx, 120(%rsp)
               	movq	%rcx, 16(%r12)
               	movq	%rcx, 24(%rsp)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	testl	%ebp, %ebp
               	js	0x41b3b2 <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1a2>
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3ef <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movq	(%rcx), %rax
               	movslq	%ebp, %rax
               	movq	%r15, 16(%rcx,%rax,8)
               	xorl	%eax, %eax
               	jmp	0x41b3ce <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1be>
               	notl	%ebp
               	cmpl	%ebp, 8(%rcx)
               	jbe	0x41b3ef <kfun:kotlin.collections.HashMap#put(1:0;1:1){}1:1?+0x1df>
               	movslq	%ebp, %rdx
               	movq	16(%rcx,%rdx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	(%rcx), %rsi
               	movq	%r15, 16(%rcx,%rdx,8)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	250244(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 112(%rsp)
               	leaq	279188(%rip), %rsi      # 0x45f6c0 <__unnamed_42>
               	movq	%rbx, %rdi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#remove(1:0){}1:1?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	301223(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b4b2 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0x72>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41ccf0 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	js	0x41b4ea <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xaa>
               	movq	16(%rbx), %rdi
               	movq	%rdi, 24(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b50b <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xcb>
               	cmpl	%eax, 8(%rdi)
               	jbe	0x41b510 <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xd0>
               	movslq	%eax, %rcx
               	movq	16(%rdi,%rcx,8), %rbx
               	movq	%rbx, 32(%rsp)
               	movl	%eax, %esi
               	callq	0x418060 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	jmp	0x41b4ec <kfun:kotlin.collections.HashMap#remove(1:0){}1:1?+0xac>
               	xorl	%ebx, %ebx
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	301006(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b58b <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0x6b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	40(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b5d5 <kfun:kotlin.collections.HashMap#<get-keys>(){}kotlin.collections.MutableSet<1:0>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	256636(%rip), %rdx      # 0x45a040 <ktypeglobal:kotlin.collections.HashMapKeys#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 40(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	300798(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b65b <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x6b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%r15), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	jne	0x41b6a5 <kfun:kotlin.collections.HashMap#<get-entries>(){}kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0xb5>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	addq	$16, %rax
               	movq	$0, 8(%rcx)
               	leaq	256668(%rip), %rdx      # 0x45a130 <ktypeglobal:kotlin.collections.HashMapEntrySet#internal>
               	movq	%rdx, 16(%rcx)
               	movq	%rax, 32(%rsp)
               	movq	%r15, 24(%rcx)
               	movq	%rax, 56(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	300666(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b6df <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x1f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r14, %rbx
               	je	0x41b7bf <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xff>
               	testq	%rbx, %rbx
               	je	0x41b7bb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	cmpl	$65, (%rax,%rcx)
               	jne	0x41b7bb <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0xfb>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movl	76(%r14), %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41b7c3 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x103>
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$65, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41d3b0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	movl	%eax, %ecx
               	jmp	0x41b7c5 <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x105>
               	xorl	%ecx, %ecx
               	jmp	0x41b7db <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	movb	$1, %cl
               	jmp	0x41b7db <kfun:kotlin.collections.HashMap#equals(kotlin.Any?){}kotlin.Boolean+0x11b>
               	xorl	%ecx, %ecx
               	movq	%r15, %rax
               	movq	-64(%r15), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	300288(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b859 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x69>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d5e0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r14d, %r14d
               	leaq	32(%rsp), %r12
               	movabsq	$34359738368, %r13      # imm = 0x800000000
               	jmp	0x41b8a6 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xb6>
               	nop
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	xorl	%eax, %ebp
               	movq	%rbx, %rdi
               	callq	0x41d660 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addl	%ebp, %r14d
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41b97b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x18b>
               	movzbl	300179(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41b8c6 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0xd6>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r12, 288(%r15)
               	movq	%r13, 48(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41b99e <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1ae>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rsp)
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b999 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1a9>
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41b940 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x150>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movl	%eax, %ebp
               	jmp	0x41b942 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x152>
               	xorl	%ebp, %ebp
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 80(%rsp)
               	testq	%rax, %rax
               	je	0x41b9e1 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1f1>
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41b999 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1a9>
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 88(%rsp)
               	testq	%rdi, %rdi
               	jne	0x41b880 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x90>
               	xorl	%eax, %eax
               	jmp	0x41b88d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x9d>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%r14d, %eax
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	248314(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	callq	0x419bd0 <ThrowNullPointerException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movq	%rsi, 8(%rsp)
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	leaq	48(%rsp), %rbp
               	leaq	56(%rsp), %r15
               	movups	%xmm0, 216(%rsp)
               	leaq	257575(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 208(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 32(%rsp)
               	movb	299723(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ba8e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x9e>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	76(%rbx), %eax
               	leal	(%rax,%rax,2), %esi
               	addl	$2, %esi
               	leaq	208(%rsp), %r12
               	movq	%r12, 40(%rsp)
               	movq	%r12, %rdi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	278653(%rip), %rsi      # 0x45fb30 <__unnamed_43>
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x41d5e0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	jmp	0x41bb0a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	leaq	192(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	callq	0x41d660 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addl	$1, %r13d
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41bd04 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x314>
               	movzbl	299567(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bb2a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x13a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%r13d, %r13d
               	jle	0x41bb43 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x153>
               	movq	%r12, %rdi
               	leaq	277255(%rip), %rsi      # 0x45f640 <__unnamed_40>
               	leaq	64(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 192(%rsp)
               	movq	288(%r14), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r14)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 96(%rsp)
               	movl	16(%rbx), %ecx
               	movq	8(%rbx), %rax
               	cmpl	68(%rax), %ecx
               	jge	0x41bd56 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x366>
               	leal	1(%rcx), %edx
               	movl	%edx, 16(%rbx)
               	movl	%ecx, 20(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 112(%rsp)
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd51 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x361>
               	movq	16(%rax,%rcx,8), %r15
               	movq	%r15, 120(%rsp)
               	testq	%r15, %r15
               	je	0x41bc20 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x230>
               	movq	8(%rbx), %rsi
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bc30 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x240>
               	movq	%r12, %rdi
               	leaq	278368(%rip), %rsi      # 0x45fb70 <__unnamed_29>
               	leaq	128(%rsp), %rdx
               	jmp	0x41bc59 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x269>
               	nopl	(%rax)
               	xorl	%esi, %esi
               	jmp	0x41bc4e <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x25e>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	leaq	136(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	leaq	144(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	$61, %esi
               	leaq	152(%rsp), %rdx
               	callq	0x41e9b0 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
               	movq	8(%rbx), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 160(%rsp)
               	testq	%rax, %rax
               	je	0x41bd99 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3a9>
               	movslq	20(%rbx), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41bd51 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x361>
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 168(%rsp)
               	testq	%rbp, %rbp
               	je	0x41bae0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf0>
               	movq	8(%rbx), %rsi
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41bce0 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x2f0>
               	movq	%r12, %rdi
               	leaq	278174(%rip), %rsi      # 0x45fb70 <__unnamed_29>
               	leaq	176(%rsp), %rdx
               	jmp	0x41baed <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xfd>
               	nop
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbp, %rdi
               	leaq	184(%rsp), %rsi
               	callq	*128(%rax)
               	movq	%rax, %rsi
               	jmp	0x41bae2 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0xf2>
               	leaq	72(%rsp), %rdx
               	leaq	278080(%rip), %rsi      # 0x45fb50 <__unnamed_44>
               	leaq	208(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	8(%rsp), %rbx
               	movq	%rbx, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%rbx)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	247362(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	callq	0x419bd0 <ThrowNullPointerException>
               	nop

<kfun:kotlin.collections.HashMap#checkIsMutable(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	298844(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bdfd <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpb	$1, 80(%r14)
               	je	0x41be18 <kfun:kotlin.collections.HashMap#checkIsMutable(){}+0x78>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	247968(%rip), %rcx      # 0x4586e0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.rehash#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 144(%rsp)
               	movb	298613(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bee4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	68(%rbx), %eax
               	cmpl	76(%rbx), %eax
               	jle	0x41bfec <kfun:kotlin.collections.HashMap.rehash#internal+0x18c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 48(%rsp)
               	movq	16(%rbx), %r15
               	movq	%r15, 56(%rsp)
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	jmp	0x41bf60 <kfun:kotlin.collections.HashMap.rehash#internal+0x100>
               	nopw	(%rax,%rax)
               	movq	(%r15), %rax
               	movq	%rdx, 16(%r15,%rcx,8)
               	addl	$1, %r12d
               	addq	$1, %r13
               	movslq	68(%rbx), %rdx
               	cmpq	%rdx, %r13
               	jge	0x41bff5 <kfun:kotlin.collections.HashMap.rehash#internal+0x195>
               	movzbl	298460(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41bf7d <kfun:kotlin.collections.HashMap.rehash#internal+0x11d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	24(%rbx), %rax
               	movq	%rax, 64(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	cmpl	$0, 16(%rax,%r13,4)
               	js	0x41bf5c <kfun:kotlin.collections.HashMap.rehash#internal+0xfc>
               	movq	8(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	movq	%rax, 80(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r13
               	jae	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	16(%rax,%r13,8), %rdx
               	movq	%rdx, 88(%rsp)
               	cmpl	%r12d, %ecx
               	jbe	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	(%rax), %rcx
               	movslq	%r12d, %rcx
               	movq	%rdx, 16(%rax,%rcx,8)
               	testq	%r15, %r15
               	je	0x41bf58 <kfun:kotlin.collections.HashMap.rehash#internal+0xf8>
               	movl	8(%r15), %eax
               	cmpq	%rax, %r13
               	jae	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	16(%r15,%r13,8), %rdx
               	movq	%rdx, 96(%rsp)
               	cmpl	%r12d, %eax
               	ja	0x41bf50 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	movq	288(%rbp), %rax
               	jmp	0x41c029 <kfun:kotlin.collections.HashMap.rehash#internal+0x1c9>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%r12d, %esi
               	callq	0x4180c0 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	testq	%r15, %r15
               	je	0x41c019 <kfun:kotlin.collections.HashMap.rehash#internal+0x1b9>
               	movl	68(%rbx), %edx
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x4180c0 <kfun:kotlin.collections#resetRange__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}>
               	movl	%r12d, 68(%rbx)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rdx
               	movq	%rdx, 288(%rbp)
               	movabsq	$17179869184, %r13      # imm = 0x400000000
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ecx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	cmpl	%r14d, %ecx
               	jne	0x41c10f <kfun:kotlin.collections.HashMap.rehash#internal+0x2af>
               	movq	32(%rbx), %r15
               	movq	%r15, 160(%rsp)
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rax, 8(%rsp)
               	movq	%rdx, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r14d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	8(%r15), %edx
               	xorl	%r12d, %r12d
               	xorl	%edi, %edi
               	movl	%r14d, %esi
               	callq	0x417d90 <checkRangeIndexes>
               	movq	(%r15), %rax
               	testl	%r14d, %r14d
               	jle	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	16(%r15), %r9
               	leal	-1(%r14), %r8d
               	cmpl	$7, %r8d
               	jb	0x41c249 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e9>
               	addq	$1, %r8
               	movq	%r8, %r12
               	andq	$-8, %r12
               	leaq	-8(%r12), %rax
               	movq	%rax, %rsi
               	shrq	$3, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$7, %edx
               	cmpq	$56, %rax
               	jae	0x41c182 <kfun:kotlin.collections.HashMap.rehash#internal+0x322>
               	xorl	%eax, %eax
               	jmp	0x41c20e <kfun:kotlin.collections.HashMap.rehash#internal+0x3ae>
               	testl	%r14d, %r14d
               	js	0x41c482 <kfun:kotlin.collections.HashMap.rehash#internal+0x622>
               	movq	296(%rbp), %rdi
               	movl	%r14d, %eax
               	leaq	31(,%rax,4), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	245599(%rip), %rdx      # 0x4580b0 <ktypeglobal:kotlin.IntArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%r14d, 24(%rax)
               	movq	%rcx, 152(%rsp)
               	movq	%rcx, 32(%rbx)
               	bsrl	%r14d, %eax
               	xorl	$31, %eax
               	addl	$1, %eax
               	testl	%r14d, %r14d
               	movl	$33, %ecx
               	cmovnel	%eax, %ecx
               	movl	%ecx, 72(%rbx)
               	jmp	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	240(%r15), %rdi
               	andq	$-8, %rsi
               	negq	%rsi
               	xorl	%ecx, %ecx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, -208(%rdi,%rcx,4)
               	movups	%xmm0, -224(%rdi,%rcx,4)
               	movups	%xmm0, -192(%rdi,%rcx,4)
               	movups	%xmm0, -176(%rdi,%rcx,4)
               	movups	%xmm0, -160(%rdi,%rcx,4)
               	movups	%xmm0, -144(%rdi,%rcx,4)
               	movups	%xmm0, -128(%rdi,%rcx,4)
               	movups	%xmm0, -112(%rdi,%rcx,4)
               	movups	%xmm0, -96(%rdi,%rcx,4)
               	movups	%xmm0, -80(%rdi,%rcx,4)
               	movups	%xmm0, -64(%rdi,%rcx,4)
               	movups	%xmm0, -48(%rdi,%rcx,4)
               	movups	%xmm0, -32(%rdi,%rcx,4)
               	movups	%xmm0, -16(%rdi,%rcx,4)
               	leaq	64(%rcx), %rax
               	movups	%xmm0, 16(%rdi,%rcx,4)
               	movups	%xmm0, (%rdi,%rcx,4)
               	movq	%rax, %rcx
               	addq	$8, %rsi
               	jne	0x41c1a0 <kfun:kotlin.collections.HashMap.rehash#internal+0x340>
               	testq	%rdx, %rdx
               	je	0x41c240 <kfun:kotlin.collections.HashMap.rehash#internal+0x3e0>
               	leaq	(%r15,%rax,4), %rax
               	addq	$16, %rax
               	negq	%rdx
               	xorps	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nop
               	movups	%xmm0, 16(%rax)
               	movups	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rdx
               	jne	0x41c230 <kfun:kotlin.collections.HashMap.rehash#internal+0x3d0>
               	cmpq	%r12, %r8
               	je	0x41c261 <kfun:kotlin.collections.HashMap.rehash#internal+0x401>
               	leaq	(%r9,%r12,4), %r9
               	subl	%r12d, %r14d
               	xorl	%eax, %eax
               	nop
               	movl	$0, (%r9,%rax,4)
               	addq	$1, %rax
               	cmpl	%eax, %r14d
               	jne	0x41c250 <kfun:kotlin.collections.HashMap.rehash#internal+0x3f0>
               	xorl	%r14d, %r14d
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jge	0x41c40a <kfun:kotlin.collections.HashMap.rehash#internal+0x5aa>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movb	297674(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c28f <kfun:kotlin.collections.HashMap.rehash#internal+0x42f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 48(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	16(%rax,%r14,8), %rdi
               	movq	%rdi, 64(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c310 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %r15d # imm = 0x9E3779B9
               	movb	72(%rbx), %cl
               	shrl	%cl, %r15d
               	jmp	0x41c313 <kfun:kotlin.collections.HashMap.rehash#internal+0x4b3>
               	xorl	%r15d, %r15d
               	leaq	1(%r14), %rax
               	movq	%rax, 120(%rsp)
               	movl	64(%rbx), %r12d
               	jmp	0x41c334 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addl	$-1, %r15d
               	addl	$-1, %r12d
               	movzbl	297489(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c348 <kfun:kotlin.collections.HashMap.rehash#internal+0x4e8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%rbx), %rax
               	movq	%rax, 72(%rsp)
               	cmpl	%r15d, 8(%rax)
               	jbe	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movslq	%r15d, %rcx
               	cmpl	$0, 16(%rax,%rcx,4)
               	je	0x41c3c0 <kfun:kotlin.collections.HashMap.rehash#internal+0x560>
               	testl	%r12d, %r12d
               	js	0x41c42b <kfun:kotlin.collections.HashMap.rehash#internal+0x5cb>
               	testl	%r15d, %r15d
               	jne	0x41c330 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r15d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c330 <kfun:kotlin.collections.HashMap.rehash#internal+0x4d0>
               	movq	%rax, 80(%rsp)
               	movq	(%rax), %rdx
               	movq	120(%rsp), %rdx
               	movl	%edx, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 88(%rsp)
               	movl	8(%rax), %ecx
               	cmpq	%rcx, %r14
               	jae	0x41bfe7 <kfun:kotlin.collections.HashMap.rehash#internal+0x187>
               	movq	(%rax), %rcx
               	movl	%r15d, 16(%rax,%r14,4)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rdx, %r14
               	movslq	68(%rbx), %rax
               	cmpq	%rax, %r14
               	jl	0x41c280 <kfun:kotlin.collections.HashMap.rehash#internal+0x420>
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	246241(%rip), %rcx      # 0x458640 <ktypeglobal:kotlin.IllegalStateException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 168(%rsp)
               	leaq	276974(%rip), %rsi      # 0x45fe60 <__unnamed_45>
               	movq	%rbx, %rdi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.findKey#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 48(%rsp)
               	movb	297050(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c4ff <kfun:kotlin.collections.HashMap.findKey#internal+0x6f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41c523 <kfun:kotlin.collections.HashMap.findKey#internal+0x93>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	imull	$2654435769, %eax, %ebx # imm = 0x9E3779B9
               	movb	72(%r12), %cl
               	shrl	%cl, %ebx
               	jmp	0x41c525 <kfun:kotlin.collections.HashMap.findKey#internal+0x95>
               	xorl	%ebx, %ebx
               	movl	64(%r12), %r13d
               	jmp	0x41c533 <kfun:kotlin.collections.HashMap.findKey#internal+0xa3>
               	nop
               	addl	$-1, %ebx
               	addl	$-1, %r13d
               	movzbl	296978(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c547 <kfun:kotlin.collections.HashMap.findKey#internal+0xb7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	32(%r12), %rax
               	movq	%rax, 56(%rsp)
               	cmpl	%ebx, 8(%rax)
               	jbe	0x41c638 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebx, %rcx
               	movl	16(%rax,%rcx,4), %ebp
               	testl	%ebp, %ebp
               	je	0x41c616 <kfun:kotlin.collections.HashMap.findKey#internal+0x186>
               	jle	0x41c5b5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	movq	8(%r12), %rax
               	movq	%rax, 64(%rsp)
               	addl	$-1, %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41c638 <kfun:kotlin.collections.HashMap.findKey#internal+0x1a8>
               	movslq	%ebp, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 72(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c5b0 <kfun:kotlin.collections.HashMap.findKey#internal+0x120>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rsi
               	callq	*112(%rax)
               	testb	%al, %al
               	je	0x41c5b5 <kfun:kotlin.collections.HashMap.findKey#internal+0x125>
               	jmp	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testq	%r14, %r14
               	je	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	testl	%r13d, %r13d
               	js	0x41c61b <kfun:kotlin.collections.HashMap.findKey#internal+0x18b>
               	testl	%ebx, %ebx
               	jne	0x41c530 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ebx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	jmp	0x41c530 <kfun:kotlin.collections.HashMap.findKey#internal+0xa0>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movl	%ebp, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$200, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	$0, 192(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$38654705664, %rax      # imm = 0x900000000
               	movq	%rax, 144(%rsp)
               	movb	296577(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6d8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x98>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	xorps	%xmm0, %xmm0
               	movq	%rbp, 40(%rsp)
               	movb	296546(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c6fa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xba>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	xorl	%r15d, %r15d
               	movl	$0, %r13d
               	testq	%r14, %r14
               	je	0x41c728 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xe8>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*120(%rax)
               	xorps	%xmm0, %xmm0
               	imull	$2654435769, %eax, %r13d # imm = 0x9E3779B9
               	movb	72(%rbx), %cl
               	shrl	%cl, %r13d
               	movq	%r14, %r12
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rdx
               	movq	288(%rdx), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rdx)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	movq	8(%rsp), %rcx
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	movq	%rcx, 288(%rdx)
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	jmp	0x41c7a8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x168>
               	nopl	(%rax,%rax)
               	addl	$1, %r15d
               	addl	$-1, %r13d
               	movzbl	296353(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41c7bb <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x17b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movq	32(%rbx), %rcx
               	movq	%rcx, 152(%rsp)
               	cmpl	%r13d, 8(%rcx)
               	jbe	0x41cca2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movslq	%r13d, %rax
               	movl	16(%rcx,%rax,4), %ebp
               	testl	%ebp, %ebp
               	jle	0x41c8a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x260>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%rbp), %ecx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41cca2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movslq	%ecx, %rcx
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41c830 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r12, %rsi
               	callq	*112(%rax)
               	xorps	%xmm0, %xmm0
               	testb	%al, %al
               	je	0x41c839 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x1f9>
               	jmp	0x41cc0a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5ca>
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x41cc0a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5ca>
               	cmpl	%r15d, %r14d
               	je	0x41cac0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x480>
               	testl	%r13d, %r13d
               	jne	0x41c7a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rcx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %r13d
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rcx)
               	jmp	0x41c7a0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x160>
               	nopl	(%rax)
               	movl	68(%rbx), %r8d
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	%rsp, %rdi
               	movq	%rdi, 288(%rbp)
               	movabsq	$17179869184, %rsi      # imm = 0x400000000
               	movq	%rsi, 16(%rsp)
               	movq	8(%rbx), %rdx
               	movq	%rdx, 24(%rsp)
               	movq	8(%rsp), %rcx
               	cmpl	8(%rdx), %r8d
               	movq	%rcx, 288(%rbp)
               	jl	0x41cc34 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5f4>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rdi, 288(%rbp)
               	movq	%rsi, 16(%rsp)
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %ecx
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movl	68(%rbx), %eax
               	movl	%ecx, %edx
               	subl	%eax, %edx
               	testl	%edx, %edx
               	movq	%r12, %r14
               	movq	%rdi, %r12
               	movq	%rsi, %r13
               	jg	0x41c99a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35a>
               	movl	76(%rbx), %edx
               	subl	%edx, %ecx
               	testl	%ecx, %ecx
               	jle	0x41c99a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35a>
               	subl	%edx, %eax
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %edx
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	leal	3(%rdx), %esi
               	testl	%edx, %edx
               	cmovnsl	%edx, %esi
               	sarl	$2, %esi
               	cmpl	%esi, %eax
               	jge	0x41cb20 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>
               	movl	68(%rbx), %eax
               	incl	%eax
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 56(%rsp)
               	leaq	48(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	movabsq	$42949672960, %rcx      # imm = 0xA00000000
               	movq	%rcx, 64(%rsp)
               	js	0x41cca7 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x667>
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %edx
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	cmpl	%eax, %edx
               	jge	0x41cbf9 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5b9>
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 24(%rsp)
               	movl	8(%rcx), %ecx
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rbp)
               	leal	(%rcx,%rcx,2), %ecx
               	movl	%ecx, %r15d
               	shrl	$31, %r15d
               	addl	%ecx, %r15d
               	sarl	%r15d
               	cmpl	%eax, %r15d
               	cmovll	%eax, %r15d
               	movq	8(%rbx), %rdi
               	movq	%rdi, 80(%rsp)
               	movl	%r15d, %esi
               	leaq	88(%rsp), %rdx
               	callq	0x415260 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 88(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	16(%rbx), %rdi
               	movq	%rdi, 96(%rsp)
               	testq	%rdi, %rdi
               	je	0x41cb62 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x522>
               	movl	%r15d, %esi
               	leaq	104(%rsp), %rdx
               	callq	0x415260 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
               	movq	%rax, 104(%rsp)
               	jmp	0x41cb64 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x524>
               	nopw	(%rax,%rax)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	40(%rsp), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	%r12, %r14
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	movaps	%xmm0, (%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movl	8(%rax), %esi
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	xorl	%eax, %eax
               	movq	%rax, 16(%rbx)
               	movq	24(%rbx), %rdi
               	movq	%rdi, 112(%rsp)
               	movl	%r15d, %esi
               	leaq	120(%rsp), %rdx
               	callq	0x415590 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.IntArray(kotlin.Int;kotlin.Int){}kotlin.IntArray>
               	movq	%rax, 120(%rsp)
               	movq	%rax, 24(%rbx)
               	testl	%r15d, %r15d
               	jle	0x41cb9b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x55b>
               	leal	(%r15,%r15,2), %eax
               	testl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	jne	0x41cba3 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x563>
               	xorl	%esi, %esi
               	jmp	0x41cbb3 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x573>
               	movl	$3, %eax
               	xorps	%xmm0, %xmm0
               	bsrl	%eax, %ecx
               	xorl	$31, %ecx
               	xorb	$31, %cl
               	movl	$1, %esi
               	shll	%cl, %esi
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r13, 16(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	movq	8(%rsp), %rcx
               	cmpl	8(%rax), %esi
               	movq	%rcx, 288(%rbp)
               	jle	0x41cbf9 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5b9>
               	movq	%rbx, %rdi
               	callq	0x41be60 <kfun:kotlin.collections.HashMap.rehash#internal>
               	xorps	%xmm0, %xmm0
               	movq	56(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	jmp	0x41c6e8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
               	negl	%ebp
               	movq	136(%rsp), %rax
               	movq	40(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	movl	%ebp, %eax
               	addq	$200, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	68(%rbx), %ebp
               	leal	1(%rbp), %ecx
               	movl	%ecx, 68(%rbx)
               	movq	8(%rbx), %rsi
               	movq	%rsi, 160(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41cca2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movslq	%ebp, %rdx
               	movq	(%rsi), %rdi
               	movq	%r12, 16(%rsi,%rdx,8)
               	movq	24(%rbx), %rsi
               	movq	%rsi, 168(%rsp)
               	cmpl	%ebp, 8(%rsi)
               	jbe	0x41cca2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movq	(%rsi), %rdi
               	movl	%r13d, 16(%rsi,%rdx,4)
               	movq	32(%rbx), %rdx
               	movq	%rdx, 176(%rsp)
               	cmpl	%r13d, 8(%rdx)
               	jbe	0x41cca2 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x662>
               	movq	(%rdx), %rsi
               	movl	%ecx, 16(%rdx,%rax,4)
               	addl	$1, 76(%rbx)
               	cmpl	64(%rbx), %r15d
               	jle	0x41cc0c <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5cc>
               	movl	%r15d, 64(%rbx)
               	jmp	0x41cc0c <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5cc>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	245041(%rip), %rcx      # 0x458a00 <ktypeglobal:kotlin.OutOfMemoryError#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 72(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	294992(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cd09 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41cd2e <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x3e>
               	movl	%eax, %ebp
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	callq	0x41cd40 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	jmp	0x41cd33 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int+0x43>
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	movl	%ebp, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMap.removeKeyAt#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rcx, 56(%rsp)
               	movq	%rax, 288(%rcx)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 96(%rsp)
               	movb	294819(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41cdb6 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x76>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%rdi, 104(%rsp)
               	movl	%ebp, %esi
               	callq	0x418060 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
               	movq	24(%rbx), %rax
               	movq	%rax, 112(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movl	%ebp, 12(%rsp)
               	movslq	%ebp, %rcx
               	movq	%rcx, 64(%rsp)
               	movl	16(%rax,%rcx,4), %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 208(%rsp)
               	movaps	%xmm0, 192(%rsp)
               	movaps	%xmm0, 176(%rsp)
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movq	56(%rsp), %rsi
               	movq	288(%rsi), %rax
               	movq	%rax, 136(%rsp)
               	leaq	128(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$51539607552, %rax      # imm = 0xC00000000
               	movq	%rax, 144(%rsp)
               	movl	64(%rbx), %eax
               	addl	%eax, %eax
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	movl	%ecx, %r14d
               	shrl	$31, %r14d
               	addl	%ecx, %r14d
               	sarl	%r14d
               	cmpl	%r14d, %eax
               	cmovlel	%eax, %r14d
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	jmp	0x41cede <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x19e>
               	movq	(%rax), %rcx
               	movq	72(%rsp), %rcx
               	movl	%edx, 16(%rax,%rcx,4)
               	xorl	%r15d, %r15d
               	movl	%r12d, 8(%rsp)
               	addl	$-1, %r14d
               	js	0x41d107 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3c7>
               	movzbl	294507(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x41cf10 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1d0>
               	testl	%r12d, %r12d
               	je	0x41cf1f <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1df>
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jle	0x41cf7e <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x23e>
               	jmp	0x41d0cd <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	56(%rsp), %rsi
               	testl	%r12d, %r12d
               	jne	0x41ceee <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x1ae>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	32(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movl	8(%rax), %r12d
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addl	$1, %r15d
               	movq	32(%rbx), %rax
               	cmpl	64(%rbx), %r15d
               	jg	0x41d0cd <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x38d>
               	addl	$-1, %r12d
               	movq	%rax, 160(%rsp)
               	movl	8(%rax), %ecx
               	cmpl	%r12d, %ecx
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movslq	%r12d, %rdx
               	movl	16(%rax,%rdx,4), %r13d
               	testl	%r13d, %r13d
               	je	0x41d0e3 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3a3>
               	js	0x41d000 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2c0>
               	movq	8(%rbx), %rax
               	movq	%rax, 184(%rsp)
               	leal	-1(%r13), %ebp
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movslq	%ebp, %rcx
               	movq	%rcx, 72(%rsp)
               	movq	16(%rax,%rcx,8), %rdi
               	movq	%rdi, 192(%rsp)
               	testq	%rdi, %rdi
               	je	0x41d030 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f0>
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*120(%rax)
               	movq	56(%rsp), %rsi
               	imull	$2654435769, %eax, %eax # imm = 0x9E3779B9
               	movzbl	72(%rbx), %ecx
               	shrl	%cl, %eax
               	jmp	0x41d032 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x2f2>
               	nop
               	movq	%rax, 176(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	jmp	0x41cecc <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x18c>
               	nopw	(%rax,%rax)
               	xorl	%eax, %eax
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	288(%rsi), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rsi)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 32(%rsp)
               	movq	32(%rbx), %rcx
               	movq	%rcx, 40(%rsp)
               	movl	8(%rcx), %ecx
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rsi)
               	subl	%r12d, %eax
               	addl	$-1, %ecx
               	andl	%eax, %ecx
               	cmpl	%r15d, %ecx
               	jl	0x41ced4 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x194>
               	movq	32(%rbx), %rax
               	movq	%rax, 200(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	%r13d, 16(%rax,%rcx,4)
               	movq	24(%rbx), %rax
               	movq	%rax, 208(%rsp)
               	cmpl	%ebp, 8(%rax)
               	ja	0x41cec0 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x180>
               	jmp	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	%rax, 152(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	ja	0x41d0f7 <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3b7>
               	jmp	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	%rax, 168(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, %ecx
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$0, 16(%rax,%rcx,4)
               	jmp	0x41d12a <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x3ea>
               	movq	32(%rbx), %rax
               	movq	%rax, 216(%rsp)
               	movl	8(%rsp), %edx
               	cmpl	%edx, 8(%rax)
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movslq	%edx, %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	movl	12(%rsp), %ecx
               	movq	136(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	movq	24(%rbx), %rax
               	movq	%rax, 120(%rsp)
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41d17d <kfun:kotlin.collections.HashMap.removeKeyAt#internal+0x43d>
               	movq	(%rax), %rcx
               	movq	64(%rsp), %rcx
               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF
               	addl	$-1, 76(%rbx)
               	movq	88(%rsp), %rax
               	movq	%rax, 288(%rsi)
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	293712(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d209 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x79>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	*(%rax)
               	movq	%r14, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d2a6 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x116>
               	movq	16(%r14), %rcx
               	movq	%rcx, 32(%rsp)
               	testq	%rcx, %rcx
               	je	0x41d2ca <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13a>
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d2cf <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x13f>
               	leaq	48(%rsp), %rsi
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*8(%rax)
               	testq	%rbx, %rbx
               	je	0x41d2aa <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x11a>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41d2b0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	xorl	%eax, %eax
               	jmp	0x41d2b0 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean+0x120>
               	testq	%rax, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	293385(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d350 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0x70>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41d384 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa4>
               	movq	8(%r12), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d3a1 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xc1>
               	cltq
               	movq	16(%rcx,%rax,8), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	jne	0x41d386 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?+0xa6>
               	callq	0x419bd0 <ThrowNullPointerException>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r12
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rbp
               	movq	%rbp, 288(%r13)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	293176(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d421 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x71>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r14
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41d4f2 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x142>
               	movzbl	293072(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d489 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xd9>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	testq	%rax, %rax
               	je	0x41d4ee <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movl	60(%rcx), %edx
               	movq	64(%rcx), %rcx
               	andl	$168, %edx
               	shlq	$4, %rdx
               	cmpl	$168, (%rcx,%rdx)
               	jne	0x41d50f <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x15f>
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41d190 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	testb	%al, %al
               	jne	0x41d450 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0xa0>
               	xorl	%eax, %eax
               	jmp	0x41d4f4 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x144>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	250026(%rip), %rsi      # 0x45a5c0 <kclass:kotlin.collections.Map.Entry>
               	movq	%rax, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	jmp	0x41d520 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x170>
               	movq	%rbp, 288(%r13)
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	$4294967165, %ecx       # imm = 0xFFFFFF7D
               	addl	92(%rax), %ecx
               	cmpl	$2, %ecx
               	jb	0x41d4ee <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean+0x13e>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nop

<kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	292831(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d57a <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>+0x1a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	248027(%rip), %rcx      # 0x459e90 <ktypeglobal:kotlin.collections.HashMap.KeysItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d660 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	movb	292703(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d5fa <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>+0x1a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	248043(%rip), %rcx      # 0x459f20 <ktypeglobal:kotlin.collections.HashMap.EntriesItr#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, (%r15)
               	movq	%r14, 24(%rax)
               	movl	$4294967295, 36(%rax)   # imm = 0xFFFFFFFF
               	movq	%rbx, %rdi
               	callq	0x41d660 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r15)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#initNext(){}>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	292508(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6bd <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	jmp	0x41d6d9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x79>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	16(%rbx), %eax
               	addl	$1, %eax
               	movl	%eax, 16(%rbx)
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d70b <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xab>
               	movq	24(%rcx), %rcx
               	movq	%rcx, 24(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d71f <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xbf>
               	cltq
               	cmpl	$0, 16(%rcx,%rax,4)
               	jns	0x41d70b <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0xab>
               	movzbl	292432(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d6d0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x70>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41d6d0 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x70>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r14)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	292374(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d743 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	movq	8(%rbx), %rcx
               	cmpl	68(%rcx), %eax
               	setl	%al
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.Itr#remove(){}>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	292326(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d773 <kfun:kotlin.collections.HashMap.Itr#remove(){}+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	8(%rbx), %rdi
               	movl	20(%rbx), %esi
               	callq	0x41cd40 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movl	$4294967295, 20(%rbx)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	292174(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d80b <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %eax
               	movq	8(%r15), %rcx
               	cmpl	68(%rcx), %eax
               	jge	0x41d864 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc4>
               	leal	1(%rax), %edx
               	movl	%edx, 16(%r15)
               	movl	%eax, 20(%r15)
               	movq	8(%rcx), %rcx
               	movq	%rcx, 32(%rsp)
               	cmpl	%eax, 8(%rcx)
               	jbe	0x41d8a8 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x108>
               	cltq
               	movq	16(%rcx,%rax,8), %rbx
               	movq	%rbx, 40(%rsp)
               	movq	%r15, %rdi
               	callq	0x41d660 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	240435(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax)

<kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	291895(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41d922 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %r13d
               	movq	8(%r15), %rbp
               	cmpl	68(%rbp), %r13d
               	jge	0x41d9a0 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf0>
               	leal	1(%r13), %eax
               	movl	%eax, 16(%r15)
               	movl	%r13d, 20(%r15)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	247371(%rip), %rcx      # 0x459fb0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 32(%rsp)
               	movq	%rbp, 24(%rax)
               	movl	%r13d, 32(%rax)
               	movq	%r15, %rdi
               	callq	0x41d660 <kfun:kotlin.collections.HashMap.Itr#initNext(){}>
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	240119(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	291591(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41da52 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x62>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movslq	16(%r15), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41da86 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x96>
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	291431(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41daf2 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x62>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rax
               	movq	16(%rax), %rax
               	movq	%rax, 24(%rsp)
               	testq	%rax, %rax
               	je	0x41db2b <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9b>
               	movslq	16(%r15), %rcx
               	cmpl	%ecx, 8(%rax)
               	jbe	0x41db30 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa0>
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	291237(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dbb4 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x74>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41dc9b <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41dc9b <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	32(%rsp), %r12
               	leaq	24(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%rax, %r15
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	0x41d9f0 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%r15, %r15
               	je	0x41dc96 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x156>
               	movq	(%r15), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41dc9b <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15b>
               	leaq	48(%rsp), %r15
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41da90 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rbx, %rbx
               	je	0x41dcb7 <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x177>
               	movq	(%rbx), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	jmp	0x41dc9d <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	testq	%rax, %rax
               	je	0x41dc3e <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0xfe>
               	xorl	%eax, %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%rax, %rax
               	sete	%al
               	jmp	0x41dc9d <kfun:kotlin.collections.HashMap.EntryRef#equals(kotlin.Any?){}kotlin.Boolean+0x15d>
               	nop

<kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	24(%rsp), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	290855(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dd32 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0x72>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	32(%rsp), %r15
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x41d9f0 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	xorl	%ebx, %ebx
               	movl	$0, %ebp
               	testq	%rax, %rax
               	je	0x41dd60 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xa0>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebp
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	0x41da90 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41dd82 <kfun:kotlin.collections.HashMap.EntryRef#hashCode(){}kotlin.Int+0xc2>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	movl	%eax, %ebx
               	xorl	%ebx, %ebp
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movl	%ebp, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 112(%rsp)
               	leaq	64(%rsp), %rbp
               	movups	%xmm0, 16(%rsp)
               	leaq	248438(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r15)
               	movabsq	$47244640256, %rax      # imm = 0xB00000000
               	movq	%rax, 48(%rsp)
               	movb	290589(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41de3c <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x9c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	80(%rsp), %r13
               	leaq	88(%rsp), %r12
               	leaq	8(%rsp), %rdi
               	movq	%rdi, 56(%rsp)
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x41d9f0 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0>
               	testq	%rax, %rax
               	je	0x41de87 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe7>
               	leaq	72(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41de89 <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0xe9>
               	xorl	%esi, %esi
               	leaq	8(%rsp), %rbp
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	leaq	269568(%rip), %rsi      # 0x45fba0 <__unnamed_30>
               	movq	%rbp, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	leaq	96(%rsp), %rsi
               	callq	0x41da90 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1>
               	testq	%rax, %rax
               	je	0x41deda <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13a>
               	leaq	104(%rsp), %rsi
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*128(%rcx)
               	movq	%rax, %rsi
               	jmp	0x41dedc <kfun:kotlin.collections.HashMap.EntryRef#toString(){}kotlin.String+0x13c>
               	xorl	%esi, %esi
               	leaq	112(%rsp), %rdx
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	290342(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df33 <kfun:kotlin.collections.HashMapKeys#<get-size>(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	290310(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df53 <kfun:kotlin.collections.HashMapKeys#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	290272(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41df79 <kfun:kotlin.collections.HashMapKeys#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	290204(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41dfbd <kfun:kotlin.collections.HashMapKeys#getElement(1:0){}1:0?+0x1d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d2e0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	290081(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e038 <kfun:kotlin.collections.HashMapKeys#add(1:0){}kotlin.Boolean+0x58>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	239232(%rip), %rcx      # 0x4586e0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	289984(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e099 <kfun:kotlin.collections.HashMapKeys#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41ccf0 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	289920(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e0d9 <kfun:kotlin.collections.HashMapKeys#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d560 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	289859(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e116 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x26>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbp), %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e269 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movl	%eax, %r13d
               	movq	16(%r12), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e296 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1a6>
               	cmpl	%r13d, 8(%rax)
               	jbe	0x41e29b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r13d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e264 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x174>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e269 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x179>
               	movq	-64(%r14), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	245085(%rip), %rdx      # 0x459fb0 <ktypeglobal:kotlin.collections.HashMap.EntryRef#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%r15)
               	movq	%r12, 24(%rax)
               	movl	%r13d, 32(%rax)
               	jmp	0x41e26b <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x17b>
               	testq	%rax, %rax
               	je	0x41e224 <kfun:kotlin.collections.HashMapEntrySet#getEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.collections.MutableMap.MutableEntry<1:0,1:1>?+0x134>
               	xorl	%ecx, %ecx
               	movq	%rcx, (%r15)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movq	%rcx, (%r15)
               	movq	%rcx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	289440(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2b9 <kfun:kotlin.collections.HashMapEntrySet#iterator(){}kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<1:0,1:1>>+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d5e0 <kfun:kotlin.collections.HashMap#entriesIterator(){}kotlin.collections.HashMap.EntriesItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	289398(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e2e3 <kfun:kotlin.collections.HashMapEntrySetBase#<get-size>(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	289366(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e303 <kfun:kotlin.collections.HashMapEntrySetBase#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	289328(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e329 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e365 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e365 <kfun:kotlin.collections.HashMapEntrySetBase#contains(1:2){}kotlin.Boolean+0x55>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d190 <kfun:kotlin.collections.HashMap#containsEntry(kotlin.collections.Map.Entry<1:0,1:1>){}kotlin.Boolean>
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r15
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	289228(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e38d <kfun:kotlin.collections.HashMapEntrySetBase#getElement(1:2){}1:2?+0x1d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	*248(%rax)
               	movq	%rax, (%r15)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	289105(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e408 <kfun:kotlin.collections.HashMapEntrySetBase#add(1:2){}kotlin.Boolean+0x58>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	238256(%rip), %rcx      # 0x4586e0 <ktypeglobal:kotlin.UnsupportedOperationException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %rbp
               	movb	289000(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e471 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x21>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x41e5c6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	cmpl	$168, (%rax,%rcx)
               	jne	0x41e5c6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x176>
               	movq	8(%rbp), %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, %rdi
               	callq	0x41bda0 <kfun:kotlin.collections.HashMap#checkIsMutable(){}>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rax, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	js	0x41e5cf <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movl	%eax, %r12d
               	movq	16(%r15), %rax
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x41e5f6 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1a6>
               	cmpl	%r12d, 8(%rax)
               	jbe	0x41e5fb <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x1ab>
               	leaq	48(%rsp), %rsi
               	movslq	%r12d, %rcx
               	movq	16(%rax,%rcx,8), %rbp
               	movq	%rbp, 40(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$168, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41e5ca <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17a>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	je	0x41e5cf <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x17f>
               	movq	%r15, %rdi
               	movl	%r12d, %esi
               	callq	0x41cd40 <kfun:kotlin.collections.HashMap.removeKeyAt#internal>
               	movb	$1, %cl
               	jmp	0x41e5d1 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x181>
               	xorl	%ecx, %ecx
               	jmp	0x41e5e7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x197>
               	testq	%rax, %rax
               	je	0x41e5b7 <kfun:kotlin.collections.HashMapEntrySetBase#remove(1:2){}kotlin.Boolean+0x167>
               	xorl	%ecx, %ecx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>

<kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	288576(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e619 <kfun:kotlin.collections.HashMapEntrySetBase#containsAll(kotlin.collections.Collection<1:2>){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x41d3b0 <kfun:kotlin.collections.HashMap#containsAllEntries(kotlin.collections.Collection<*>){}kotlin.Boolean>
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288534(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e643 <kfun:kotlin.collections.HashSet#<get-size>(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movl	76(%rax), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	288502(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e663 <kfun:kotlin.collections.HashSet#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	cmpl	$0, 76(%rax)
               	sete	%al
               	popq	%rbx
               	retq

<kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	288464(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e689 <kfun:kotlin.collections.HashSet#contains(1:0){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c490 <kfun:kotlin.collections.HashMap.findKey#internal>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	288396(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e6cd <kfun:kotlin.collections.HashSet#getElement(1:0){}1:0?+0x1d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r15), %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x41d2e0 <kfun:kotlin.collections.HashMap#getKey(1:0){}1:0?>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	288336(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e709 <kfun:kotlin.collections.HashSet#add(1:0){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41c640 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	288272(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e749 <kfun:kotlin.collections.HashSet#remove(1:0){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	%r14, %rsi
               	callq	0x41ccf0 <kfun:kotlin.collections.HashMap#removeKey(1:0){}kotlin.Int>
               	testl	%eax, %eax
               	setns	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	288208(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e789 <kfun:kotlin.collections.HashSet#iterator(){}kotlin.collections.MutableIterator<1:0>+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r14), %rdi
               	movq	%rbx, %rsi
               	callq	0x41d560 <kfun:kotlin.collections.HashMap#keysIterator(){}kotlin.collections.HashMap.KeysItr<1:0,1:1>>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	288089(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e800 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0x60>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41e861 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}+0xc1>
               	movq	296(%rbx), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	235492(%rip), %rdx      # 0x458020 <ktypeglobal:kotlin.CharArray#internal>
               	movq	%rdx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rcx, 24(%rsp)
               	movq	%rcx, 8(%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	287958(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e883 <kfun:kotlin.text.StringBuilder#<get-length>(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$72, %rsp
               	movl	%esi, %ebp
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %r15      # imm = 0x400000000
               	movq	%r15, 16(%rsp)
               	movb	287847(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41e8f2 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x62>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%rbx), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	%r15, 48(%rsp)
               	testl	%ebp, %ebp
               	js	0x41e95f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	cmpl	%ebp, 16(%r14)
               	jle	0x41e95f <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0xcf>
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movq	8(%r14), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%ebp, 8(%rax)
               	jbe	0x41e9a2 <kfun:kotlin.text.StringBuilder#get(kotlin.Int){}kotlin.Char+0x112>
               	movslq	%ebp, %rcx
               	movzwl	16(%rax,%rcx,2), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	236409(%rip), %rcx      # 0x458500 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, 8(%rsp)
               	movl	%esi, %r15d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	287544(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ea21 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0x71>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %esi
               	addl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 40(%rsp)
               	movslq	16(%rbx), %r14
               	leal	1(%r14), %r13d
               	movq	%rbx, %rdi
               	movl	%r13d, %esi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r13d, 16(%rbx)
               	cmpl	%r14d, 8(%rbp)
               	jbe	0x41ea86 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd6>
               	movq	(%rbp), %rax
               	movw	%r15w, 16(%rbp,%r14,2)
               	movq	8(%rsp), %rax
               	movq	%rbx, (%rax)
               	movq	24(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	movb	287401(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eab0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?){}kotlin.text.StringBuilder+0x20>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	leaq	265062(%rip), %rbx      # 0x45f620 <__unnamed_8>
               	cmovneq	%r12, %rbx
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	%eax, %ecx
               	movq	%r14, %r8
               	callq	0x41eb10 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r15, (%r14)
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%r8, 24(%rsp)
               	movl	%ecx, %ebp
               	movl	%edx, %r13d
               	movq	%rsi, %rbx
               	movq	%rdi, 8(%rsp)
               	movb	287258(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eb3f <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	leaq	264919(%rip), %r12      # 0x45f620 <__unnamed_8>
               	cmovneq	%rbx, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, 16(%rsp)
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 40(%rsp)
               	leaq	32(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%r13d, %edi
               	movl	%ebp, %esi
               	movl	%eax, %edx
               	callq	0x41a630 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
               	movl	%ebp, %ebx
               	subl	%r13d, %ebx
               	movq	8(%rsp), %r14
               	movl	16(%r14), %esi
               	addl	%ebx, %esi
               	movq	%r14, %rdi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x41ec6d <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x15d>
               	movslq	16(%r14), %rbp
               	movq	8(%r14), %rax
               	movq	%rax, 56(%rsp)
               	leaq	(%rax,%rbp,2), %rdi
               	addq	$16, %rdi
               	movslq	%r13d, %rax
               	leaq	(%r12,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebx, %rdx
               	addq	%rdx, %rdx
               	callq	0x413720 <memcpy@plt>
               	addl	%ebp, %ebx
               	movq	%r14, %rdi
               	movl	%ebx, %esi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebx, 16(%r14)
               	movq	%r14, %rbx
               	movq	24(%rsp), %rdx
               	movq	%rbx, (%rdx)
               	movq	16(%rsp), %rax
               	movq	-64(%rax), %rax
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%rbx, (%rdx)
               	movq	%rbx, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpl	%r13d, %ebp
               	cmovll	%r13d, %ebp
               	movq	%r12, %r14
               	movl	%ebp, 4(%rsp)
               	movq	8(%rsp), %rbx
               	cmpl	%r13d, %ebp
               	je	0x41ec38 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x128>
               	nopl	(%rax)
               	movzbl	286905(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41eca0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rbp
               	movq	%rbp, 64(%rsp)
               	movslq	16(%rbx), %r12
               	leal	1(%r12), %r15d
               	movq	%rbx, %rdi
               	movl	%r15d, %esi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%r15d, 16(%rbx)
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movl	%r13d, %esi
               	callq	*8(%rax)
               	cmpl	%r12d, 8(%rbp)
               	jbe	0x41ed09 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x1f9>
               	addl	$1, %r13d
               	movq	(%rbp), %rcx
               	movw	%ax, 16(%rbp,%r12,2)
               	movl	4(%rsp), %ebp
               	cmpl	%r13d, %ebp
               	jne	0x41ec90 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
               	jmp	0x41ec38 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x128>
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nop

<kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rdx, 24(%rsp)
               	movl	%esi, %r12d
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 48(%rsp)
               	movb	286682(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ed7f <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%r15), %esi
               	addl	$11, %esi
               	movq	%r15, %rdi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movslq	16(%r15), %r13
               	movq	8(%r15), %r14
               	movq	%r14, 56(%rsp)
               	leaq	12(%rsp), %rbx
               	leaq	159041(%rip), %rdx      # 0x445ae8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movl	$12, %esi
               	movq	%rbx, %rdi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x437ef0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movb	12(%rsp), %al
               	testb	%al, %al
               	je	0x41ede6 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
               	leaq	12(%rsp), %rbx
               	leaq	(%r14,%r13,2), %rcx
               	addq	$16, %rcx
               	nop
               	movsbl	%al, %eax
               	movw	%ax, (%rcx)
               	addq	$2, %rcx
               	movzbl	1(%rbx), %eax
               	addq	$1, %rbx
               	testb	%al, %al
               	jne	0x41edd0 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xc0>
               	leaq	12(%rsp), %rax
               	subl	%eax, %ebx
               	addl	%r13d, %ebx
               	movq	%r15, %rdi
               	movl	%ebx, %esi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebx, 16(%r15)
               	movq	24(%rsp), %rax
               	movq	%r15, (%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	%r15, %rax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	286399(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ee9a <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder+0x6a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	leaq	264060(%rip), %rbx      # 0x45f620 <__unnamed_8>
               	cmovneq	%r15, %rbx
               	movl	16(%r12), %esi
               	addl	8(%rbx), %esi
               	movq	%r12, %rdi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movslq	16(%r12), %r15
               	movq	8(%r12), %rax
               	movq	%rax, 24(%rsp)
               	movslq	8(%rbx), %rbp
               	leaq	(%rax,%r15,2), %rdi
               	addq	$16, %rdi
               	addq	$16, %rbx
               	movq	%rbp, %rdx
               	addq	%rbp, %rdx
               	movq	%rbx, %rsi
               	callq	0x413720 <memcpy@plt>
               	leal	(%r15,%rbp), %ebx
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	callq	0x41ef20 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
               	movl	%ebx, 16(%r12)
               	movq	%r12, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movl	%esi, %r14d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	286154(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ef8f <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0x6f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	cmpl	%r14d, 8(%rax)
               	jge	0x41efd3 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}+0xb3>
               	leaq	48(%rsp), %rdx
               	movq	8(%rbx), %rax
               	movq	%rax, 32(%rsp)
               	movl	8(%rax), %eax
               	leal	(%rax,%rax), %esi
               	addl	$2, %esi
               	cmpl	%r14d, %esi
               	cmovll	%r14d, %esi
               	movq	8(%rbx), %rdi
               	movq	%rdi, 40(%rsp)
               	callq	0x415780 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.CharArray(kotlin.Int;kotlin.Int){}kotlin.CharArray>
               	movq	%rax, 48(%rsp)
               	movq	%rax, 8(%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	285954(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f057 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x67>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %r15
               	movq	%r15, 24(%rsp)
               	movl	16(%rbx), %ebp
               	testq	%rbp, %rbp
               	je	0x41f0d1 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0xe1>
               	testl	%ebp, %ebp
               	js	0x41f138 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x148>
               	movslq	%ebp, %r12
               	movq	296(%r13), %rdi
               	leaq	31(,%rbp), %rsi
               	addq	%rbp, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	236436(%rip), %rcx      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%rbx, (%r14)
               	leaq	32(%rax), %rdi
               	addq	$16, %r15
               	addq	%r12, %r12
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	callq	0x413720 <memcpy@plt>
               	movq	%rbx, (%r14)
               	jmp	0x41f117 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String+0x127>
               	movq	$0, 32(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 48(%rsp)
               	leaq	258728(%rip), %rbx      # 0x45e3b0 <__unnamed_6>
               	movq	%rbx, (%r14)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movq	%rbx, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	285610(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f1af <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x6f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r14, %r14
               	je	0x41f201 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	cmpl	$18, (%rax,%rcx)
               	jne	0x41f201 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0xc1>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*24(%rax)
               	movl	%eax, %ecx
               	movb	$1, %al
               	testb	%cl, %cl
               	jne	0x41f2c5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rsi
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$49, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	callq	*(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f284 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movq	(%r12), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%r12, %rdi
               	movq	%rax, %rsi
               	callq	*144(%rcx)
               	testb	%al, %al
               	je	0x41f2bf <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x17f>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f2c3 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x183>
               	movzbl	285340(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f240 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f240 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x100>
               	xorl	%eax, %eax
               	jmp	0x41f2c5 <kfun:kotlin.collections.AbstractCollection#containsAll(kotlin.collections.Collection<1:0>){}kotlin.Boolean+0x185>
               	movb	$1, %al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	285286(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f2f3 <kfun:kotlin.collections.AbstractCollection#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testl	%eax, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	leaq	243236(%rip), %rax      # 0x45a960 <ktypeglobal:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0#internal>
               	orq	$3, %rax
               	movq	%rax, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rsp), %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	285132(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f38d <kfun:kotlin.collections.AbstractCollection#toString(){}kotlin.String+0x7d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rsp, %rsi
               	movq	%rsi, 40(%rsp)
               	movq	%r15, 8(%rsp)
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	callq	0x41a8c0 <kfun:kotlin.collections#joinToString__at__kotlin.collections.Iterable<0:0>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.Int;kotlin.CharSequence;kotlin.Function1<0:0,kotlin.CharSequence>?){0§<kotlin.Any?>}kotlin.String>
               	movq	%rax, (%r14)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movb	285052(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f3dd <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%rbx, 8(%r15)
               	je	0x41f400 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x40>
               	testq	%rbx, %rbx
               	je	0x41f409 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x49>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	*128(%rax)
               	jmp	0x41f410 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	265017(%rip), %rax      # 0x45ff40 <__unnamed_41>
               	jmp	0x41f410 <kfun:kotlin.collections.AbstractCollection.$toString$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x50>
               	leaq	262672(%rip), %rax      # 0x45f620 <__unnamed_8>
               	movq	%rax, (%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	284960(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f439 <kfun:kotlin.collections.AbstractList#iterator(){}kotlin.collections.Iterator<1:0>+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	243180(%rip), %rdx      # 0x45aa60 <ktypeglobal:kotlin.collections.AbstractList.IteratorImpl#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%rbx)
               	movq	%r14, 24(%rax)
               	movq	%rcx, (%rbx)
               	movq	%rcx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r13
               	movb	284838(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f4b3 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpq	%r13, %rbx
               	je	0x41f6c8 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x238>
               	testq	%rbx, %rbx
               	je	0x41f6c4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$43, %ecx
               	shlq	$4, %rcx
               	cmpl	$43, (%rax,%rcx)
               	jne	0x41f6c4 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x234>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 32(%rsp)
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	cmpl	%eax, %ebp
               	jne	0x41f6cc <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x23c>
               	movq	%r14, 8(%rsp)
               	leaq	64(%rsp), %r15
               	leaq	56(%rsp), %r12
               	leaq	48(%rsp), %rbp
               	leaq	40(%rsp), %rsi
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	%rax, %r14
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	jmp	0x41f609 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	nopl	(%rax)
               	testq	%rax, %rax
               	jne	0x41f6c0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x230>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f6d0 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x240>
               	movzbl	284435(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f646 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x1b6>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r12, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbp
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	testq	%rbp, %rbp
               	je	0x41f600 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x170>
               	movq	(%rbp), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	*112(%rcx)
               	testb	%al, %al
               	jne	0x41f609 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x179>
               	xorl	%ecx, %ecx
               	jmp	0x41f6d2 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x242>
               	xorl	%ecx, %ecx
               	jmp	0x41f6ed <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	movb	$1, %cl
               	jmp	0x41f6ed <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x25d>
               	xorl	%ecx, %ecx
               	jmp	0x41f6d7 <kfun:kotlin.collections.AbstractList#equals(kotlin.Any?){}kotlin.Boolean+0x247>
               	movb	$1, %cl
               	movq	8(%rsp), %r14
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	24(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rdi, %rbx
               	movb	284219(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f71e <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x1e>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	leaq	32(%rsp), %r15
               	leaq	24(%rsp), %rbp
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%rax, %rbx
               	movl	$1, %r12d
               	jmp	0x41f7fc <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xfc>
               	nopl	(%rax)
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	*8(%rax)
               	movl	%r12d, %ebp
               	shll	$5, %ebp
               	subl	%r12d, %ebp
               	testq	%rax, %rax
               	je	0x41f840 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x140>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movq	%rax, %rdi
               	callq	*120(%rcx)
               	addl	%eax, %ebp
               	movl	%ebp, %r12d
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x41f844 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0x144>
               	movzbl	283940(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f7b0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x41f7b0 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xb0>
               	nop
               	xorl	%eax, %eax
               	jmp	0x41f7f7 <kfun:kotlin.collections.AbstractList#hashCode(){}kotlin.Int+0xf7>
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movl	%r12d, %eax
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movb	283860(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f885 <kfun:kotlin.collections.AbstractList.IteratorImpl.hasNext#internal+0x15>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %ebp
               	movq	8(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	callq	*136(%rax)
               	cmpl	%eax, %ebp
               	setl	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	283719(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41f912 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0x62>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	testb	%al, %al
               	je	0x41f962 <kfun:kotlin.collections.AbstractList.IteratorImpl.next#internal+0xb2>
               	movq	8(%rbx), %rdi
               	movl	16(%rbx), %esi
               	leal	1(%rsi), %eax
               	movl	%eax, 16(%rbx)
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdx
               	callq	*192(%rax)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	231990(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	movl	%esi, %ebx
               	movl	%edi, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movups	%xmm0, 88(%rsp)
               	leaq	241271(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r13)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 16(%rsp)
               	movb	283424(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fa39 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0x89>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testl	%ebp, %ebp
               	js	0x41fa5c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	cmpl	%ebx, %ebp
               	jge	0x41fa5c <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}+0xac>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r13)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	40(%rsp), %r14
               	leaq	32(%rsp), %r15
               	leaq	80(%rsp), %r12
               	movq	%r12, 24(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	leaq	263100(%rip), %rsi      # 0x45fe40 <__unnamed_46>
               	movq	%r12, %rdi
               	movq	%r15, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	movq	%r14, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	261789(%rip), %rsi      # 0x45f940 <__unnamed_18>
               	movq	%r12, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	leaq	56(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	leaq	64(%rsp), %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, %rbx
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	231945(%rip), %rcx      # 0x458500 <ktypeglobal:kotlin.IndexOutOfBoundsException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbp, 72(%rsp)
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbp, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	283177(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb30 <kfun:kotlin.collections.EmptyIterator#hasNext(){}kotlin.Boolean+0x10>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>:
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	283073(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fb98 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing+0x58>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%rbx), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	231424(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopl	(%rax,%rax)

<kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any>:
               	pushq	%rax
               	movb	282985(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fbf0 <kfun:kotlin.collections.EmptyIterator#$<bridge-UNN>next(){}kotlin.Nothing(){}kotlin.Any+0x10>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x41fb40 <kfun:kotlin.collections.EmptyIterator#next(){}kotlin.Nothing>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.IntIterator#$<bridge-BNN>next(){}kotlin.Int(){}kotlin.Any?>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	282940(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fc1d <kfun:kotlin.collections.IntIterator#$<bridge-BNN>next(){}kotlin.Int(){}kotlin.Any?+0x1d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*144(%rax)
               	movl	%eax, %ebp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbx
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movsbl	%bpl, %eax
               	cmpl	%ebp, %eax
               	jne	0x41fc9a <kfun:kotlin.collections.IntIterator#$<bridge-BNN>next(){}kotlin.Int(){}kotlin.Any?+0x9a>
               	subl	$-128, %ebp
               	movslq	%ebp, %rax
               	shlq	$4, %rax
               	leaq	256398(%rip), %rcx      # 0x45e620 <INT_CACHE>
               	addq	%rax, %rcx
               	movq	%rcx, (%r14)
               	jmp	0x41fcd5 <kfun:kotlin.collections.IntIterator#$<bridge-BNN>next(){}kotlin.Int(){}kotlin.Any?+0xd5>
               	movq	-64(%rbx), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	233143(%rip), %rdx      # 0x458b80 <ktypeglobal:kotlin.Int#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, 24(%rsp)
               	movl	%ebp, 24(%rax)
               	movq	%rcx, (%r14)
               	movq	-64(%rbx), %rax
               	movq	8(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movq	%rcx, (%r14)
               	movq	%rcx, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.sequences.TransformingSequence#iterator(){}kotlin.collections.Iterator<1:1>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	282679(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fd22 <kfun:kotlin.sequences.TransformingSequence#iterator(){}kotlin.collections.Iterator<1:1>+0x22>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r13
               	movq	$0, 8(%rax)
               	leaq	241565(%rip), %rax      # 0x45ad00 <ktypeglobal:kotlin.sequences.TransformingSequence.object-1#internal>
               	movq	%rax, 16(%rbx)
               	movq	%r13, (%r14)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rsi
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, 32(%rbx)
               	movq	8(%r15), %rdi
               	callq	0x41fef0 <kfun:kotlin.sequences.FilteringSequence#iterator(){}kotlin.collections.Iterator<1:0>>
               	movq	%rax, 24(%rbx)
               	movq	-64(%r12), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r13, (%r14)
               	movq	%r13, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.sequences.TransformingSequence.object-1.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	282368(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fe59 <kfun:kotlin.sequences.TransformingSequence.object-1.next#internal+0x69>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%r12), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	movl	8(%rax), %edi
               	movq	%r15, %rsi
               	callq	0x421a80 <kfun:IntStreamBenchmark.$filterAndMap$lambda$1$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, (%r15)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.sequences.TransformingSequence.object-1.hasNext#internal>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	282262(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41fec3 <kfun:kotlin.sequences.TransformingSequence.object-1.hasNext#internal+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	popq	%rbx
               	jmpq	*(%rax)
               	nopw	(%rax,%rax)

<kfun:kotlin.sequences.FilteringSequence#iterator(){}kotlin.collections.Iterator<1:0>>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movb	282183(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x41ff12 <kfun:kotlin.sequences.FilteringSequence#iterator(){}kotlin.collections.Iterator<1:0>+0x22>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$48, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r13
               	movq	$0, 8(%rax)
               	leaq	241357(%rip), %rax      # 0x45ae20 <ktypeglobal:kotlin.sequences.FilteringSequence.object-1#internal>
               	movq	%rax, 16(%rbx)
               	movq	%r13, (%r14)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %rsi
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movq	%r15, 40(%rbx)
               	movq	8(%r15), %rax
               	movq	8(%rax), %rdi
               	callq	0x420dd0 <kfun:kotlin.ranges.IntProgression#iterator(){}kotlin.collections.IntIterator>
               	movq	%rax, 24(%rsp)
               	movq	%rax, 24(%rbx)
               	movl	$4294967295, 48(%rbx)   # imm = 0xFFFFFFFF
               	movq	-64(%r12), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	%r13, (%r14)
               	movq	%r13, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	281857(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42009e <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0xae>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x42009e <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0xae>
               	nopl	(%rax)
               	movq	8(%r15), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movl	8(%rax), %edi
               	callq	0x421900 <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>
               	movq	24(%r15), %rcx
               	cmpb	24(%rcx), %al
               	je	0x4200da <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0xea>
               	movq	8(%r15), %rdi
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x4200e8 <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0xf8>
               	movzbl	281729(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420060 <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0x70>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	jmp	0x420060 <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0x70>
               	movq	%rbx, 16(%r15)
               	movl	$1, 32(%r15)
               	jmp	0x4200f0 <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal+0x100>
               	movl	$0, 32(%r15)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.sequences.FilteringSequence.object-1.next#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	281566(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x4201b3 <kfun:kotlin.sequences.FilteringSequence.object-1.next#internal+0xa3>
               	movl	32(%rbx), %eax
               	cmpl	$-1, %eax
               	je	0x4201c0 <kfun:kotlin.sequences.FilteringSequence.object-1.next#internal+0xb0>
               	testl	%eax, %eax
               	je	0x4201cf <kfun:kotlin.sequences.FilteringSequence.object-1.next#internal+0xbf>
               	movq	16(%rbx), %rax
               	movq	%rax, 32(%rsp)
               	movq	$0, 16(%rbx)
               	movl	$4294967295, 32(%rbx)   # imm = 0xFFFFFFFF
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	32(%rbx), %eax
               	cmpl	$-1, %eax
               	jne	0x42017e <kfun:kotlin.sequences.FilteringSequence.object-1.next#internal+0x6e>
               	movq	%rbx, %rdi
               	callq	0x41fff0 <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal>
               	movl	32(%rbx), %eax
               	testl	%eax, %eax
               	jne	0x420182 <kfun:kotlin.sequences.FilteringSequence.object-1.next#internal+0x72>
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	229833(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.sequences.FilteringSequence.object-1.hasNext#internal>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	281382(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x42023e <kfun:kotlin.sequences.FilteringSequence.object-1.hasNext#internal+0x1e>
               	movl	32(%rbx), %eax
               	cmpl	$-1, %eax
               	je	0x42024b <kfun:kotlin.sequences.FilteringSequence.object-1.hasNext#internal+0x2b>
               	cmpl	$1, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	32(%rbx), %eax
               	cmpl	$-1, %eax
               	jne	0x420236 <kfun:kotlin.sequences.FilteringSequence.object-1.hasNext#internal+0x16>
               	movq	%rbx, %rdi
               	callq	0x41fff0 <kfun:kotlin.sequences.FilteringSequence.object-1.calcNext#internal>
               	movl	32(%rbx), %eax
               	cmpl	$1, %eax
               	sete	%al
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	281318(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420273 <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x4202ba <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5a>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	cmpl	$30, (%rax,%rcx)
               	jne	0x4202ba <kfun:kotlin.collections.EmptySet#equals(kotlin.Any?){}kotlin.Boolean+0x5a>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$30, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*24(%rax)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	281225(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4202d0 <kfun:kotlin.collections.EmptySet#hashCode(){}kotlin.Int+0x10>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	281190(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4202f3 <kfun:kotlin.collections.EmptySet#toString(){}kotlin.String+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	261254(%rip), %rax      # 0x45ff80 <__unnamed_47>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int>:
               	pushq	%rax
               	movb	281161(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420310 <kfun:kotlin.collections.EmptySet#<get-size>(){}kotlin.Int+0x10>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean>:
               	pushq	%rax
               	movb	281129(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420330 <kfun:kotlin.collections.EmptySet#isEmpty(){}kotlin.Boolean+0x10>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	281094(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420353 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x420362 <kfun:kotlin.collections.EmptySet#contains(kotlin.Nothing){}kotlin.Boolean+0x22>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	281046(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420383 <kfun:kotlin.collections.EmptySet#containsAll(kotlin.collections.Collection<kotlin.Nothing>){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$18, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmpq	*24(%rax)
               	nopw	(%rax,%rax)

<kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280982(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4203c3 <kfun:kotlin.collections.EmptySet#iterator(){}kotlin.collections.Iterator<kotlin.Nothing>+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	270150(%rip), %rax      # 0x462310 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?>:
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movb	280950(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4203e3 <kfun:kotlin.coroutines.EmptyCoroutineContext#get(kotlin.coroutines.CoroutineContext.Key<0:0>){0§<kotlin.coroutines.CoroutineContext.Element>}0:0?+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	$0, (%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rsi, %rbx
               	movb	280912(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420409 <kfun:kotlin.coroutines.EmptyCoroutineContext#fold(0:0;kotlin.Function2<0:0,kotlin.coroutines.CoroutineContext.Element,0:0>){0§<kotlin.Any?>}0:0+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r14
               	movq	%rdi, %rbx
               	movb	280864(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420439 <kfun:kotlin.coroutines.EmptyCoroutineContext#minusKey(kotlin.coroutines.CoroutineContext.Key<*>){}kotlin.coroutines.CoroutineContext+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int>:
               	pushq	%rax
               	movb	280825(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420460 <kfun:kotlin.coroutines.EmptyCoroutineContext#hashCode(){}kotlin.Int+0x10>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movb	280790(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420483 <kfun:kotlin.coroutines.EmptyCoroutineContext#toString(){}kotlin.String+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	252118(%rip), %rax      # 0x45dd60 <__unnamed_48>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$64, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$34359738368, %rax      # imm = 0x800000000
               	movq	%rax, 16(%rsp)
               	movb	280669(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4204fc <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x6c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	16(%r15), %rax
               	movq	%rax, 24(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	jne	0x42052f <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal+0x9f>
               	movq	8(%r15), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rsp)
               	movq	%rax, 32(%rsp)
               	movq	%rax, 56(%rsp)
               	movq	%rax, 16(%r15)
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$64, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.<get-size>#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r15
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	280485(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4205b4 <kfun:kotlin.enums.EnumEntriesList.<get-size>#internal+0x64>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	callq	0x420490 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movl	8(%rax), %eax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.get#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %r12d
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	280332(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42064d <kfun:kotlin.enums.EnumEntriesList.get#internal+0x6d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x420490 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movq	%rax, %rbx
               	movl	8(%rax), %esi
               	movl	%r12d, %edi
               	callq	0x41f9b0 <kfun:kotlin.collections.AbstractList.Companion#checkElementIndex(kotlin.Int;kotlin.Int){}>
               	cmpl	%r12d, 8(%rbx)
               	jbe	0x420690 <kfun:kotlin.enums.EnumEntriesList.get#internal+0xb0>
               	movslq	%r12d, %rax
               	movq	16(%rbx,%rax,8), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.EnumEntriesList.contains#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$48, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movq	288(%rbx), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbx)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 16(%rsp)
               	movb	280142(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42070b <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x6b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x420725 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x85>
               	movq	(%r15), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	addl	$-86, %eax
               	cmpl	$14, %eax
               	jbe	0x420729 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0x89>
               	xorl	%eax, %eax
               	jmp	0x420766 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xc6>
               	leaq	24(%rsp), %rsi
               	movq	%r14, %rdi
               	callq	0x420490 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
               	movslq	16(%r15), %rcx
               	testq	%rcx, %rcx
               	js	0x420749 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa9>
               	movl	8(%rax), %edx
               	leal	-1(%rdx), %esi
               	cmpl	%ecx, %esi
               	jge	0x42074d <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xad>
               	xorl	%eax, %eax
               	jmp	0x42075b <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xbb>
               	cmpl	%ecx, %edx
               	jbe	0x42077c <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xdc>
               	movq	16(%rax,%rcx,8), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rax, 32(%rsp)
               	cmpq	%r15, %rax
               	sete	%al
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbx)
               	addq	$48, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	279984(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4207a9 <kfun:kotlin.enums.$enumEntries$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	8(%rbx), %rax
               	movq	%rax, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.ranges.IntRange.$init_global#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movq	288(%r12), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r12)
               	movabsq	$17179869184, %rbx      # imm = 0x400000000
               	movq	%rbx, 16(%rsp)
               	movb	279865(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420820 <kfun:kotlin.ranges.IntRange.$init_global#internal+0x60>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %r15
               	addq	$16, %rax
               	movq	$0, 8(%r15)
               	leaq	240260(%rip), %rcx      # 0x45b2d0 <ktypeglobal:kotlin.ranges.IntRange.Companion#internal>
               	movq	%rcx, 16(%r15)
               	movq	%rax, 24(%rsp)
               	movq	%rax, 275044(%rip)      # 0x463ac0 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	leaq	275037(%rip), %r14      # 0x463ac0 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	288(%r12), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	%rbx, 48(%rsp)
               	movq	296(%r12), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	239992(%rip), %rcx      # 0x45b230 <ktypeglobal:kotlin.ranges.IntRange#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	xorl	%edx, %edx
               	callq	0x420910 <kfun:kotlin.ranges.IntRange#<init>(kotlin.Int;kotlin.Int){}>
               	movq	%rbx, 24(%r15)
               	movq	40(%rsp), %rax
               	movq	%rax, 288(%r12)
               	movq	274904(%rip), %rsi      # 0x463ac0 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	movq	%r14, %rdi
               	callq	0x425b00 <InitAndRegisterGlobal>
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r12)
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<kfun:kotlin.ranges.IntRange#<init>(kotlin.Int;kotlin.Int){}>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$80, %rsp
               	movl	%edx, %r14d
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	279594(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42092f <kfun:kotlin.ranges.IntRange#<init>(kotlin.Int;kotlin.Int){}+0x1f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	%rsp, %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$21474836480, %rcx      # imm = 0x500000000
               	movq	%rcx, 16(%rsp)
               	movl	%ebp, 8(%rbx)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 56(%rsp)
               	leaq	48(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movq	-64(%rax), %rax
               	movl	%r14d, 12(%rbx)
               	movl	$1, 16(%rbx)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$80, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.ranges.IntRange#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	279398(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4209f3 <kfun:kotlin.ranges.IntRange#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	274667(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	je	0x420a11 <kfun:kotlin.ranges.IntRange#isEmpty(){}kotlin.Boolean+0x31>
               	leaq	274655(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-588(%rip), %rsi        # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movl	8(%rbx), %eax
               	cmpl	12(%rbx), %eax
               	setg	%al
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	279328(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x420a49 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0x29>
               	movl	274602(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	jne	0x420a59 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0x39>
               	testq	%rbx, %rbx
               	jne	0x420a75 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0x55>
               	jmp	0x420b0f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xef>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	274576(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	je	0x420a3f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0x1f>
               	leaq	274564(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-679(%rip), %rsi        # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	testq	%rbx, %rbx
               	je	0x420b0f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xef>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$371, 92(%rax)          # imm = 0x173
               	jne	0x420b0f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xef>
               	movl	274514(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	je	0x420aaa <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0x8a>
               	leaq	274502(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-741(%rip), %rsi        # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movl	8(%r14), %eax
               	cmpl	12(%r14), %eax
               	jle	0x420ad1 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xb1>
               	movl	274474(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	jne	0x420aea <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xca>
               	movl	8(%rbx), %ecx
               	movb	$1, %al
               	cmpl	12(%rbx), %ecx
               	jle	0x420b07 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xe7>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movl	8(%rbx), %ecx
               	cmpl	%ecx, %eax
               	jne	0x420b0f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xef>
               	movl	12(%r14), %eax
               	cmpl	12(%rbx), %eax
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	274419(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-824(%rip), %rsi        # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movl	8(%rbx), %ecx
               	movb	$1, %al
               	cmpl	12(%rbx), %ecx
               	jg	0x420ac9 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xa9>
               	movl	8(%r14), %eax
               	cmpl	%ecx, %eax
               	je	0x420ad8 <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xb8>
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	279078(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x420b72 <kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int+0x52>
               	movl	274352(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	jne	0x420b82 <kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int+0x62>
               	movl	274341(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	je	0x420b57 <kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int+0x37>
               	leaq	274329(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-914(%rip), %rsi        # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movl	8(%rbx), %eax
               	movl	12(%rbx), %ecx
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	addl	%ecx, %edx
               	cmpl	%ecx, %eax
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	cmovlel	%edx, %eax
               	popq	%rbx
               	retq
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	274279(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	je	0x420b39 <kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int+0x19>
               	leaq	274267(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-976(%rip), %rsi        # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movl	274249(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	jne	0x420b44 <kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int+0x24>
               	jmp	0x420b57 <kfun:kotlin.ranges.IntRange#hashCode(){}kotlin.Int+0x37>
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.ranges.IntRange#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 48(%rsp)
               	movups	%xmm0, 72(%rsp)
               	leaq	236662(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 16(%rsp)
               	movb	278815(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420c3a <kfun:kotlin.ranges.IntRange#toString(){}kotlin.String+0x8a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	274084(%rip), %eax      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	cmpl	$2, %eax
               	je	0x420c58 <kfun:kotlin.ranges.IntRange#toString(){}kotlin.String+0xa8>
               	leaq	274072(%rip), %rdi      # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	leaq	-1171(%rip), %rsi       # 0x4207c0 <kfun:kotlin.ranges.IntRange.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	leaq	40(%rsp), %r12
               	leaq	32(%rsp), %r13
               	leaq	64(%rsp), %rbp
               	movq	%rbp, 24(%rsp)
               	movq	%rbp, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movl	8(%rbx), %esi
               	movq	%rbp, %rdi
               	movq	%r13, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	258866(%rip), %rsi      # 0x45ffc0 <__unnamed_49>
               	movq	%rbp, %rdi
               	movq	%r12, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movl	12(%rbx), %esi
               	movq	%rbp, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r15)
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.ranges.IntProgressionIterator#hasNext(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	278630(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420cf3 <kfun:kotlin.ranges.IntProgressionIterator#hasNext(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movb	20(%rbx), %al
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<kfun:kotlin.ranges.IntProgressionIterator#nextInt(){}kotlin.Int>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movq	288(%r14), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r14)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	278524(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420d5d <kfun:kotlin.ranges.IntProgressionIterator#nextInt(){}kotlin.Int+0x5d>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	16(%rbx), %eax
               	cmpl	12(%rbx), %eax
               	jne	0x420d71 <kfun:kotlin.ranges.IntProgressionIterator#nextInt(){}kotlin.Int+0x71>
               	cmpb	$0, 20(%rbx)
               	je	0x420d8d <kfun:kotlin.ranges.IntProgressionIterator#nextInt(){}kotlin.Int+0x8d>
               	movb	$0, 20(%rbx)
               	jmp	0x420d79 <kfun:kotlin.ranges.IntProgressionIterator#nextInt(){}kotlin.Int+0x79>
               	movl	8(%rbx), %ecx
               	addl	%eax, %ecx
               	movl	%ecx, 16(%rbx)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%r14)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	296(%r14), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	226827(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x415f10 <kfun:kotlin.Throwable#<init>(kotlin.String?;kotlin.Throwable?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>

<kfun:kotlin.ranges.IntProgression#iterator(){}kotlin.collections.IntIterator>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	movb	278381(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420dec <kfun:kotlin.ranges.IntProgression#iterator(){}kotlin.collections.IntIterator+0x1c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %r15d
               	movl	12(%rbx), %ebp
               	movl	16(%rbx), %ebx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rcx
               	movq	$0, 8(%rax)
               	leaq	238895(%rip), %rdx      # 0x45b360 <ktypeglobal:kotlin.ranges.IntProgressionIterator#internal>
               	movq	%rdx, 16(%rax)
               	movq	%rcx, (%r14)
               	movl	%ebx, 24(%rax)
               	movl	%ebp, 28(%rax)
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	cmpl	%ebp, %r15d
               	setle	%dl
               	setge	%sil
               	testl	%ebx, %ebx
               	cmovgl	%edx, %esi
               	movb	%sil, 36(%rax)
               	testb	%sil, %sil
               	cmovnel	%r15d, %ebp
               	movl	%ebp, 32(%rax)
               	movq	%rcx, (%r14)
               	movq	%rcx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<kfun:kotlin.ranges.IntProgression#isEmpty(){}kotlin.Boolean>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	278230(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420e83 <kfun:kotlin.ranges.IntProgression#isEmpty(){}kotlin.Boolean+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%rbx), %ecx
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	cmpl	12(%rbx), %ecx
               	setg	%dl
               	setl	%al
               	cmpl	$0, 16(%rbx)
               	cmovgl	%edx, %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movb	278176(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420eb9 <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%rbx, %rbx
               	je	0x420f2b <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	92(%rax), %eax
               	andl	$-2, %eax
               	cmpl	$370, %eax              # imm = 0x172
               	jne	0x420f2b <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
               	movq	(%r14), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r14, %rdi
               	callq	*136(%rax)
               	testb	%al, %al
               	je	0x420f07 <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x67>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movl	%eax, %ecx
               	movb	$1, %al
               	testb	%cl, %cl
               	jne	0x420f23 <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x83>
               	movl	8(%r14), %eax
               	cmpl	8(%rbx), %eax
               	jne	0x420f2b <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
               	movl	12(%r14), %eax
               	cmpl	12(%rbx), %eax
               	jne	0x420f2b <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
               	movl	16(%r14), %eax
               	cmpl	16(%rbx), %eax
               	sete	%al
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.ranges.IntProgression#hashCode(){}kotlin.Int>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	278022(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x420f53 <kfun:kotlin.ranges.IntProgression#hashCode(){}kotlin.Int+0x13>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*136(%rax)
               	movl	%eax, %ecx
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testb	%cl, %cl
               	jne	0x420f88 <kfun:kotlin.ranges.IntProgression#hashCode(){}kotlin.Int+0x48>
               	movl	8(%rbx), %eax
               	movl	%eax, %ecx
               	shll	$5, %ecx
               	subl	%eax, %ecx
               	addl	12(%rbx), %ecx
               	movl	%ecx, %eax
               	shll	$5, %eax
               	subl	%ecx, %eax
               	addl	16(%rbx), %eax
               	popq	%rbx
               	retq
               	nopw	(%rax,%rax)

<kfun:kotlin.ranges.IntProgression#toString(){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$168, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r13
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	$0, 112(%rsp)
               	movups	%xmm0, 152(%rsp)
               	leaq	235644(%rip), %rax      # 0x45a860 <ktypeglobal:kotlin.text.StringBuilder#internal>
               	orq	$3, %rax
               	movq	%rax, 144(%rsp)
               	movups	%xmm0, 128(%rsp)
               	movq	%rax, 120(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$64424509440, %rax      # imm = 0xF00000000
               	movq	%rax, 16(%rsp)
               	movb	277781(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421044 <kfun:kotlin.ranges.IntProgression#toString(){}kotlin.String+0xb4>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpl	$0, 16(%r13)
               	jle	0x4210cf <kfun:kotlin.ranges.IntProgression#toString(){}kotlin.String+0x13f>
               	leaq	40(%rsp), %r15
               	leaq	32(%rsp), %r12
               	leaq	144(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movl	8(%r13), %esi
               	movq	%rbx, %rdi
               	movq	%r12, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	257847(%rip), %rsi      # 0x45ffc0 <__unnamed_49>
               	movq	%rbx, %rdi
               	movq	%r15, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movl	12(%r13), %esi
               	movq	%rbx, %rdi
               	leaq	48(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	257844(%rip), %rsi      # 0x45ffe0 <__unnamed_50>
               	movq	%rbx, %rdi
               	leaq	56(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movl	16(%r13), %esi
               	movq	%rbx, %rdi
               	leaq	64(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%rbx, %rdi
               	jmp	0x42114c <kfun:kotlin.ranges.IntProgression#toString(){}kotlin.String+0x1bc>
               	leaq	88(%rsp), %r15
               	leaq	80(%rsp), %rbx
               	leaq	120(%rsp), %r12
               	movq	%r12, 72(%rsp)
               	movq	%r12, %rdi
               	movl	$10, %esi
               	callq	0x41e7a0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
               	movl	8(%r13), %esi
               	movq	%r12, %rdi
               	movq	%rbx, %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	257786(%rip), %rsi      # 0x460000 <__unnamed_51>
               	movq	%r12, %rdi
               	movq	%r15, %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	movl	12(%r13), %esi
               	movq	%r12, %rdi
               	leaq	96(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	leaq	257719(%rip), %rsi      # 0x45ffe0 <__unnamed_50>
               	movq	%r12, %rdi
               	leaq	104(%rsp), %rdx
               	callq	0x41ee30 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
               	xorl	%esi, %esi
               	subl	16(%r13), %esi
               	movq	%r12, %rdi
               	leaq	112(%rsp), %rdx
               	callq	0x41ed10 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder>
               	movq	%r12, %rdi
               	movq	%r14, %rsi
               	callq	0x41eff0 <kfun:kotlin.text.StringBuilder#toString(){}kotlin.String>
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rbp)
               	addq	$168, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r14
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	movb	277438(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42119b <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x1b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rdi
               	callq	*(%rax)
               	leal	-1(%rax), %edx
               	movzwl	%bp, %esi
               	movq	%rbx, %rdi
               	callq	0x421210 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
               	cmpl	$-1, %eax
               	je	0x4211f6 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x76>
               	movl	8(%rbx), %edx
               	addl	$1, %eax
               	movq	%rbx, %rdi
               	movl	%eax, %esi
               	movq	%r14, %rcx
               	callq	0x437d90 <Kotlin_String_subSequence>
               	movq	%rax, %rbx
               	movq	(%rax), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x421201 <kfun:kotlin.text#substringAfterLast$default__at__kotlin.String(kotlin.Char;kotlin.String?;kotlin.Int){}kotlin.String+0x81>
               	movq	%rbx, (%r14)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	leaq	227896(%rip), %rsi      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419d70 <ThrowClassCastException>

<kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movl	%edx, %r15d
               	movl	%esi, %ebp
               	movq	%rdi, %r12
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	movq	$0, 128(%rsp)
               	leaq	224722(%rip), %rax      # 0x458020 <ktypeglobal:kotlin.CharArray#internal>
               	orq	$3, %rax
               	movq	%rax, 8(%rsp)
               	movl	$1, 16(%rsp)
               	movw	$0, 24(%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r13
               	movq	288(%r13), %rax
               	movq	%rax, 88(%rsp)
               	leaq	80(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$30064771072, %rax      # imm = 0x700000000
               	movq	%rax, 96(%rsp)
               	movb	277162(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4212af <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x9f>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	testq	%r12, %r12
               	je	0x42131c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42131c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	8(%r12), %ecx
               	testl	%ecx, %ecx
               	je	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	leal	-1(%rcx), %edx
               	cmpl	%r15d, %ecx
               	cmoval	%r15d, %edx
               	testl	%edx, %edx
               	js	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%edx, %edx
               	nopl	(%rax)
               	cmpw	%bp, 16(%r12,%rdx,2)
               	je	0x42150c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2fc>
               	addq	$-1, %rdx
               	leal	1(%rdx), %ecx
               	testl	%ecx, %ecx
               	jg	0x421300 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
               	jmp	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	leaq	8(%rsp), %rax
               	movq	%rax, 104(%rsp)
               	movq	%rax, 112(%rsp)
               	movq	%rax, 120(%rsp)
               	movq	8(%rsp), %rcx
               	movw	%bp, 24(%rsp)
               	movq	%rax, 128(%rsp)
               	cmpl	$1, 16(%rsp)
               	jne	0x42141c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	testq	%r12, %r12
               	je	0x42141c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x42141c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x20c>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	288(%r13), %rax
               	movq	%rax, 40(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 288(%r13)
               	movabsq	$21474836480, %rax      # imm = 0x500000000
               	movq	%rax, 48(%rsp)
               	movl	16(%rsp), %eax
               	cmpl	$1, %eax
               	jne	0x421514 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x304>
               	movzwl	24(%rsp), %esi
               	movq	40(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%r15d, %r15d
               	js	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	8(%r12), %edx
               	testl	%edx, %edx
               	je	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	leal	-1(%rdx), %ecx
               	cmpl	%r15d, %edx
               	cmoval	%r15d, %ecx
               	testl	%ecx, %ecx
               	js	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%ecx, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpw	%si, 16(%r12,%rcx,2)
               	je	0x421510 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x300>
               	addq	$-1, %rcx
               	leal	1(%rcx), %edx
               	testl	%edx, %edx
               	jg	0x421400 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f0>
               	jmp	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%eax, %ebp
               	addl	$-1, %ebp
               	cmpl	%r15d, %ebp
               	cmovgl	%r15d, %ebp
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	testl	%ebp, %ebp
               	js	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	xorl	%r15d, %r15d
               	movb	276719(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42146a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x25a>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbp), %eax
               	movl	%eax, 28(%rsp)
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movl	%ebp, %esi
               	callq	*8(%rax)
               	movl	%eax, %ebx
               	movl	16(%rsp), %r14d
               	testl	%r14d, %r14d
               	cmovsl	%r15d, %r14d
               	xorl	%r15d, %r15d
               	cmpl	%r15d, %r14d
               	je	0x4214d1 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c1>
               	nopl	(%rax)
               	movzbl	276633(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4214c0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b0>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	cmpw	%bx, 24(%rsp,%r15,2)
               	je	0x4214ec <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2dc>
               	addq	$1, %r15
               	cmpl	%r15d, %r14d
               	jne	0x4214b0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a0>
               	testl	%ebp, %ebp
               	movl	28(%rsp), %eax
               	movl	%eax, %ebp
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	$0, %r15d
               	jg	0x42145b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x24b>
               	jmp	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%ebp, %eax
               	movq	88(%rsp), %rcx
               	movq	%rcx, 288(%r13)
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%edx, %eax
               	jmp	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	movl	%ecx, %eax
               	jmp	0x4214ee <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2de>
               	testl	%eax, %eax
               	jne	0x421552 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x342>
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	224896(%rip), %rcx      # 0x4583c0 <ktypeglobal:kotlin.NoSuchElementException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 56(%rsp)
               	leaq	256112(%rip), %rsi      # 0x45fdc0 <__unnamed_52>
               	jmp	0x42158a <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x37a>
               	movq	296(%r13), %rdi
               	addq	$112, %rdi
               	movl	$56, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	225318(%rip), %rcx      # 0x4585a0 <ktypeglobal:kotlin.IllegalArgumentException#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 64(%rsp)
               	leaq	256102(%rip), %rsi      # 0x45fdf0 <__unnamed_53>
               	movq	%rbx, %rdi
               	callq	0x415dd0 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	nopw	(%rax,%rax)

<kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$72, %rsp
               	movl	%esi, %ebx
               	movq	%rdi, %r12
               	movb	276375(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4215c2 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x22>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 48(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	$0, 64(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r13
               	movq	-64(%rax), %rcx
               	movq	288(%rcx), %rdx
               	movq	%rdx, 40(%rsp)
               	leaq	32(%rsp), %rdx
               	movq	%rdx, 288(%rcx)
               	movabsq	$21474836480, %rcx      # imm = 0x500000000
               	cmpl	$11, %ebx
               	movl	$10, %r15d
               	cmovll	%ebx, %r15d
               	movq	%rcx, 48(%rsp)
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %rbp
               	movq	$0, 8(%rax)
               	leaq	236508(%rip), %rax      # 0x45b230 <ktypeglobal:kotlin.ranges.IntRange#internal>
               	movq	%rax, 16(%rbx)
               	movq	%rbp, 56(%rsp)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	movl	%r15d, %edx
               	callq	0x420910 <kfun:kotlin.ranges.IntRange#<init>(kotlin.Int;kotlin.Int){}>
               	movq	%rbp, 56(%rsp)
               	movq	256442(%rip), %rax      # 0x460030 <__unnamed_54>
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x4216be <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x11e>
               	testq	%r12, %r12
               	je	0x4216be <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x11e>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	cmpl	$116, 92(%rax)
               	jne	0x4216be <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x11e>
               	movl	24(%rbx), %ebp
               	movl	28(%rbx), %r14d
               	movl	32(%rbx), %ebx
               	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
               	testl	%ebx, %ebx
               	jle	0x421825 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x285>
               	cmpl	%r14d, %ebp
               	jle	0x421834 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x294>
               	jmp	0x4218cd <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x32d>
               	movl	24(%rbx), %r14d
               	movl	28(%rbx), %edx
               	movl	32(%rbx), %ecx
               	movq	%rcx, %rax
               	movq	%rcx, 24(%rsp)
               	testl	%ecx, %ecx
               	jle	0x4216e3 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x143>
               	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
               	cmpl	%edx, %r14d
               	jle	0x4216f7 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x157>
               	jmp	0x4218cd <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x32d>
               	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
               	je	0x4218cd <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x32d>
               	cmpl	%r14d, %edx
               	jg	0x4218cd <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x32d>
               	movq	%r13, 8(%rsp)
               	leaq	226622(%rip), %r15      # 0x458c41 <ktypeglobal:kotlin.String#internal+0x1>
               	andq	$-4, %r15
               	movl	%edx, 20(%rsp)
               	jmp	0x421728 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x188>
               	movq	24(%rsp), %rax
               	addl	%r14d, %eax
               	movl	20(%rsp), %edx
               	cmpl	%edx, %r14d
               	movl	%eax, %r14d
               	je	0x4218c3 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x323>
               	movb	276002(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421737 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x197>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	testl	%r14d, %r14d
               	js	0x421710 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x170>
               	movl	%eax, %r13d
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	cmpl	%r13d, %eax
               	js	0x421710 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x170>
               	movl	$10, %eax
               	subl	%r13d, %eax
               	cmpl	%r14d, %eax
               	jl	0x421710 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x170>
               	testl	%r13d, %r13d
               	jle	0x42181d <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x27d>
               	xorl	%ebx, %ebx
               	nop
               	movzbl	275865(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4217c0 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x220>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	movl	%ebx, %esi
               	callq	*8(%rax)
               	movl	%eax, %ebp
               	leal	(%r14,%rbx), %esi
               	movq	(%r15), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	leaq	256039(%rip), %rdi      # 0x460030 <__unnamed_54>
               	callq	*8(%rax)
               	cmpw	%ax, %bp
               	jne	0x421710 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x170>
               	addl	$1, %ebx
               	cmpl	%ebx, %r13d
               	jne	0x4217b0 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x210>
               	movl	%r14d, %ecx
               	jmp	0x4218c8 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x328>
               	je	0x4218cd <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x32d>
               	cmpl	%ebp, %r14d
               	jg	0x4218cd <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x32d>
               	movq	%r13, 8(%rsp)
               	leaq	16(%r12), %r15
               	addl	%ebx, %r14d
               	leaq	255976(%rip), %r13      # 0x460030 <__unnamed_54>
               	jmp	0x421857 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x2b7>
               	nopl	(%rax)
               	addl	%ebx, %ebp
               	cmpl	%ebp, %r14d
               	je	0x4218c3 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x323>
               	movzbl	275698(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421867 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x2c7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r12), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$25, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r12, %rdi
               	callq	*(%rax)
               	movl	%eax, %ecx
               	orl	%ebp, %ecx
               	js	0x421850 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x2b0>
               	cmpl	%eax, 8(%r12)
               	jl	0x421850 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x2b0>
               	leal	(%rax,%rbp), %ecx
               	cmpl	$10, %ecx
               	jg	0x421850 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x2b0>
               	movslq	%ebp, %rcx
               	leaq	16(,%rcx,2), %rsi
               	addq	%r13, %rsi
               	movslq	%eax, %rdx
               	addq	%rdx, %rdx
               	movq	%r15, %rdi
               	callq	0x413760 <bcmp@plt>
               	testl	%eax, %eax
               	jne	0x421850 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x2b0>
               	movl	%ebp, %ecx
               	jmp	0x4218c8 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int+0x328>
               	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
               	movq	8(%rsp), %r13
               	movq	-64(%r13), %rax
               	movq	40(%rsp), %rdx
               	movq	%rdx, 288(%rax)
               	movl	%ecx, %eax
               	addq	$72, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movl	%edi, %ebp
               	movb	275518(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x42191b <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x1b>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	leaq	24(%rsp), %r15
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	leaq	147834(%rip), %rdx      # 0x445ae8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	leaq	32(%rsp), %rbx
               	movl	$16, %esi
               	movq	%rbx, %rdi
               	movl	%ebp, %ecx
               	xorl	%eax, %eax
               	callq	0x437ef0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x4374c0 <CreateStringFromCString>
               	testq	%rax, %rax
               	je	0x4219fe <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0xfe>
               	movq	(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$116, 92(%rcx)
               	jne	0x4219fe <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0xfe>
               	movq	255621(%rip), %rcx      # 0x460030 <__unnamed_54>
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	cmpl	$116, 92(%rcx)
               	jne	0x4219fe <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0xfe>
               	movl	8(%rax), %ecx
               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
               	cmpl	$10, %ecx
               	jg	0x421a0d <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x10d>
               	testl	%ecx, %ecx
               	je	0x421a30 <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x130>
               	addq	$16, %rax
               	addq	%rcx, %rcx
               	leaq	255593(%rip), %rdi      # 0x460040 <__unnamed_54+0x10>
               	movl	$20, %esi
               	movq	%rax, %rdx
               	callq	0x413770 <memmem@plt>
               	testq	%rax, %rax
               	je	0x421a0d <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x10d>
               	leaq	255552(%rip), %rcx      # 0x460030 <__unnamed_54>
               	subq	%rcx, %rax
               	addq	$-16, %rax
               	shrq	%rax
               	movl	%eax, %ebp
               	jmp	0x421a0d <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x10d>
               	movq	%rax, %rdi
               	movl	$10, %esi
               	callq	0x4215a0 <kfun:kotlin.text#indexOf$default__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Int;kotlin.Boolean;kotlin.Boolean;kotlin.Int){}kotlin.Int>
               	movl	%eax, %ebp
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testl	%ebp, %ebp
               	setns	%al
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	xorl	%ebp, %ebp
               	jmp	0x421a0d <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal+0x10d>
               	nopw	%cs:(%rax,%rax)

<kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.$<bridge-BNNB>invoke(kotlin.Int){}kotlin.Boolean#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movb	275200(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a59 <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.$<bridge-BNNB>invoke(kotlin.Int){}kotlin.Boolean#internal+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%r14), %edi
               	callq	0x421900 <kfun:IntStreamBenchmark.$filterAndMap$lambda$0$FUNCTION_REFERENCE$0.invoke#internal>
               	movzbl	%al, %edi
               	movq	%rbx, %rsi
               	callq	0x415c70 <kfun:kotlin#<Boolean-box>(kotlin.Boolean){}kotlin.Any>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<kfun:IntStreamBenchmark.$filterAndMap$lambda$1$FUNCTION_REFERENCE$1.invoke#internal>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	275133(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421a9c <kfun:IntStreamBenchmark.$filterAndMap$lambda$1$FUNCTION_REFERENCE$1.invoke#internal+0x1c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	147525(%rip), %rdx      # 0x445ae8 <typeinfo name for kotlin::gc::GCSchedulerData+0x19af>
               	movq	%rsp, %r14
               	movl	$16, %esi
               	movq	%r14, %rdi
               	movl	%ebp, %ecx
               	xorl	%eax, %eax
               	callq	0x437ef0 <konan::snprintf(char*, unsigned long, char const*, ...)>
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x4374c0 <CreateStringFromCString>
               	movq	%rax, (%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nop

<kfun:IntStreamBenchmark.$filterAndMap$lambda$1$FUNCTION_REFERENCE$1.$<bridge-NNNB>invoke(kotlin.Int){}kotlin.String#internal>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movb	275056(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ae9 <kfun:IntStreamBenchmark.$filterAndMap$lambda$1$FUNCTION_REFERENCE$1.$<bridge-NNNB>invoke(kotlin.Int){}kotlin.String#internal+0x19>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	8(%r14), %edi
               	movq	%rbx, %rsi
               	callq	0x421a80 <kfun:IntStreamBenchmark.$filterAndMap$lambda$1$FUNCTION_REFERENCE$1.invoke#internal>
               	movq	%rax, (%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq

<kfun:#main(){}>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$184, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 160(%rsp)
               	movaps	%xmm0, 144(%rsp)
               	movq	$0, 48(%rsp)
               	leaq	236556(%rip), %rax      # 0x45b740 <ktypeglobal:IntStreamBenchmark#internal>
               	orq	$3, %rax
               	movq	%rax, 40(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rbp
               	movq	288(%rbp), %rax
               	movq	%rax, 152(%rsp)
               	leaq	144(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$17179869184, %r14      # imm = 0x400000000
               	movq	%r14, 160(%rsp)
               	movb	274887(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421b92 <kfun:#main(){}+0x92>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	40(%rsp), %rax
               	movq	%rax, 168(%rsp)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %r12
               	movq	%r12, 288(%rbp)
               	movq	%r14, 16(%rsp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	235074(%rip), %rcx      # 0x45b230 <ktypeglobal:kotlin.ranges.IntRange#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	movl	$10000, %edx            # imm = 0x2710
               	callq	0x420910 <kfun:kotlin.ranges.IntRange#<init>(kotlin.Int;kotlin.Int){}>
               	movq	%rbx, 48(%rsp)
               	movq	8(%rsp), %rax
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 64(%rsp)
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	movaps	%xmm0, 96(%rsp)
               	movaps	%xmm0, 80(%rsp)
               	xorps	%xmm0, %xmm0
               	movq	%rax, 72(%rsp)
               	leaq	64(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movabsq	$42949672960, %rax      # imm = 0xA00000000
               	movq	%rax, 80(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	288(%rbp), %rax
               	movq	%rax, 8(%rsp)
               	movq	%r12, 288(%rbp)
               	movq	%r14, 16(%rsp)
               	movq	48(%rsp), %rbx
               	movq	%rbx, 24(%rsp)
               	testq	%rbx, %rbx
               	je	0x421e75 <kfun:#main(){}+0x375>
               	leaq	128(%rsp), %r14
               	leaq	120(%rsp), %r12
               	movq	%rbx, 88(%rsp)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%rbp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r13
               	movq	$0, 8(%rax)
               	leaq	228721(%rip), %rcx      # 0x459a40 <ktypeglobal:kotlin.collections.object-2#internal>
               	movq	%rcx, 16(%rax)
               	movq	%r13, 96(%rsp)
               	movq	%rbx, 24(%rax)
               	movq	%r13, 96(%rsp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$40, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	233607(%rip), %rcx      # 0x45ad90 <ktypeglobal:kotlin.sequences.FilteringSequence#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%r13, 24(%rax)
               	movb	$1, 40(%rax)
               	leaq	254719(%rip), %rcx      # 0x460020 <__unnamed_55>
               	movq	%rcx, 32(%rax)
               	movq	%rbx, 104(%rsp)
               	movq	%rbp, 56(%rsp)
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	movl	$32, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rdi
               	movq	$0, 8(%rax)
               	leaq	233241(%rip), %rcx      # 0x45ac70 <ktypeglobal:kotlin.sequences.TransformingSequence#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rdi, 112(%rsp)
               	movq	%rbx, 24(%rax)
               	leaq	254653(%rip), %rcx      # 0x460028 <__unnamed_56>
               	movq	%rcx, 32(%rax)
               	movq	%rdi, 112(%rsp)
               	movq	%r12, %rsi
               	callq	0x41fd00 <kfun:kotlin.sequences.TransformingSequence#iterator(){}kotlin.collections.Iterator<1:1>>
               	movq	%rax, %r13
               	jmp	0x421dbf <kfun:#main(){}+0x2bf>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	$3, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	(%rax), %rbp
               	movq	%rbp, 136(%rsp)
               	movl	8(%rbp), %r12d
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%rbx, %rdi
               	callq	*120(%rax)
               	addl	%r12d, %eax
               	movl	%eax, 8(%rbp)
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	callq	*(%rax)
               	testb	%al, %al
               	je	0x421e4f <kfun:#main(){}+0x34f>
               	movzbl	274272(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421df9 <kfun:#main(){}+0x2f9>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	(%r13), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$160, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	*8(%rax)
               	movq	%rax, %rbx
               	movq	%r15, %rax
               	cmpl	$2, -68(%r15)
               	je	0x421d90 <kfun:#main(){}+0x290>
               	leaq	-68(%r15), %rdi
               	leaq	59(%rip), %rsi          # 0x421e80 <kfun:Blackhole.$init_thread_local#internal>
               	callq	0x43b190 <CallInitThreadLocal>
               	jmp	0x421d90 <kfun:#main(){}+0x290>
               	movq	152(%rsp), %rax
               	movq	56(%rsp), %rcx
               	movq	%rax, 288(%rcx)
               	addq	$184, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419bd0 <ThrowNullPointerException>
               	nopw	(%rax,%rax)

<kfun:Blackhole.$init_thread_local#internal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$32, %rsp
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movq	288(%r15), %rax
               	movq	%rax, 8(%rsp)
               	movq	%rsp, %rax
               	movq	%rax, 288(%r15)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 16(%rsp)
               	movb	274045(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421edc <kfun:Blackhole.$init_thread_local#internal+0x5c>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	$3, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	%rax, %r14
               	movq	296(%r15), %rdi
               	addq	$112, %rdi
               	movl	$24, %esi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %rbx
               	movq	$0, 8(%rax)
               	leaq	235999(%rip), %rcx      # 0x45b8f0 <ktypeglobal:Blackhole.Companion#internal>
               	movq	%rcx, 16(%rax)
               	movq	%rbx, 24(%rsp)
               	movl	$3, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	%rbx, (%rax)
               	movl	$3, %edi
               	callq	0x425ed0 <LookupTLS>
               	movl	$3, %edi
               	callq	0x425ed0 <LookupTLS>
               	movq	(%rax), %rax
               	movq	%rax, (%r14)
               	movq	8(%rsp), %rax
               	movq	%rax, 288(%r15)
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273890(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421f77 <kfun:Blackhole.$init_thread_local#internal+0xf7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421f86 <kfun:Blackhole.$init_thread_local#internal+0x106>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269115(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273826(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421fb7 <kfun:Blackhole.$init_thread_local#internal+0x137>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x421fc6 <kfun:Blackhole.$init_thread_local#internal+0x146>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	269051(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273762(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x421ff7 <kfun:Blackhole.$init_thread_local#internal+0x177>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422006 <kfun:Blackhole.$init_thread_local#internal+0x186>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268987(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273698(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422037 <kfun:Blackhole.$init_thread_local#internal+0x1b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422046 <kfun:Blackhole.$init_thread_local#internal+0x1c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268923(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273634(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422077 <kfun:Blackhole.$init_thread_local#internal+0x1f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422086 <kfun:Blackhole.$init_thread_local#internal+0x206>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268859(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273570(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220b7 <kfun:Blackhole.$init_thread_local#internal+0x237>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4220c6 <kfun:Blackhole.$init_thread_local#internal+0x246>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268795(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273506(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4220f7 <kfun:Blackhole.$init_thread_local#internal+0x277>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422106 <kfun:Blackhole.$init_thread_local#internal+0x286>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268731(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273442(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422137 <kfun:Blackhole.$init_thread_local#internal+0x2b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422146 <kfun:Blackhole.$init_thread_local#internal+0x2c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268667(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273378(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422177 <kfun:Blackhole.$init_thread_local#internal+0x2f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422186 <kfun:Blackhole.$init_thread_local#internal+0x306>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268603(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273314(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4221b7 <kfun:Blackhole.$init_thread_local#internal+0x337>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4221c6 <kfun:Blackhole.$init_thread_local#internal+0x346>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268539(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273250(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4221f7 <kfun:Blackhole.$init_thread_local#internal+0x377>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422206 <kfun:Blackhole.$init_thread_local#internal+0x386>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268475(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273186(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422237 <kfun:Blackhole.$init_thread_local#internal+0x3b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422246 <kfun:Blackhole.$init_thread_local#internal+0x3c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268411(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273122(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422277 <kfun:Blackhole.$init_thread_local#internal+0x3f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422286 <kfun:Blackhole.$init_thread_local#internal+0x406>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268347(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	273058(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4222b7 <kfun:Blackhole.$init_thread_local#internal+0x437>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4222c6 <kfun:Blackhole.$init_thread_local#internal+0x446>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268283(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272994(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4222f7 <kfun:Blackhole.$init_thread_local#internal+0x477>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422306 <kfun:Blackhole.$init_thread_local#internal+0x486>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268219(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272930(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422337 <kfun:Blackhole.$init_thread_local#internal+0x4b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422346 <kfun:Blackhole.$init_thread_local#internal+0x4c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268155(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272866(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422377 <kfun:Blackhole.$init_thread_local#internal+0x4f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422386 <kfun:Blackhole.$init_thread_local#internal+0x506>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268091(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272802(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4223b7 <kfun:Blackhole.$init_thread_local#internal+0x537>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4223c6 <kfun:Blackhole.$init_thread_local#internal+0x546>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	268027(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272738(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4223f7 <kfun:Blackhole.$init_thread_local#internal+0x577>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422406 <kfun:Blackhole.$init_thread_local#internal+0x586>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267963(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272674(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422437 <kfun:Blackhole.$init_thread_local#internal+0x5b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422446 <kfun:Blackhole.$init_thread_local#internal+0x5c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267899(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272610(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422477 <kfun:Blackhole.$init_thread_local#internal+0x5f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422486 <kfun:Blackhole.$init_thread_local#internal+0x606>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267835(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272546(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4224b7 <kfun:Blackhole.$init_thread_local#internal+0x637>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4224c6 <kfun:Blackhole.$init_thread_local#internal+0x646>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267771(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272482(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4224f7 <kfun:Blackhole.$init_thread_local#internal+0x677>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422506 <kfun:Blackhole.$init_thread_local#internal+0x686>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267707(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272418(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422537 <kfun:Blackhole.$init_thread_local#internal+0x6b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422546 <kfun:Blackhole.$init_thread_local#internal+0x6c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267643(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272354(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422577 <kfun:Blackhole.$init_thread_local#internal+0x6f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422586 <kfun:Blackhole.$init_thread_local#internal+0x706>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267579(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272290(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4225b7 <kfun:Blackhole.$init_thread_local#internal+0x737>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4225c6 <kfun:Blackhole.$init_thread_local#internal+0x746>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267515(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272226(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4225f7 <kfun:Blackhole.$init_thread_local#internal+0x777>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422606 <kfun:Blackhole.$init_thread_local#internal+0x786>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267451(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272162(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422637 <kfun:Blackhole.$init_thread_local#internal+0x7b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422646 <kfun:Blackhole.$init_thread_local#internal+0x7c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267387(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272098(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422677 <kfun:Blackhole.$init_thread_local#internal+0x7f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422686 <kfun:Blackhole.$init_thread_local#internal+0x806>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267323(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	272034(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4226b7 <kfun:Blackhole.$init_thread_local#internal+0x837>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4226c6 <kfun:Blackhole.$init_thread_local#internal+0x846>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267259(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271970(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4226f7 <kfun:Blackhole.$init_thread_local#internal+0x877>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422706 <kfun:Blackhole.$init_thread_local#internal+0x886>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267195(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271906(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422737 <kfun:Blackhole.$init_thread_local#internal+0x8b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422746 <kfun:Blackhole.$init_thread_local#internal+0x8c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267131(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271842(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422777 <kfun:Blackhole.$init_thread_local#internal+0x8f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422786 <kfun:Blackhole.$init_thread_local#internal+0x906>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267067(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271778(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4227b7 <kfun:Blackhole.$init_thread_local#internal+0x937>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4227c6 <kfun:Blackhole.$init_thread_local#internal+0x946>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	267003(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271714(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4227f7 <kfun:Blackhole.$init_thread_local#internal+0x977>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422806 <kfun:Blackhole.$init_thread_local#internal+0x986>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266939(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271650(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422837 <kfun:Blackhole.$init_thread_local#internal+0x9b7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422846 <kfun:Blackhole.$init_thread_local#internal+0x9c6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266875(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271586(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422877 <kfun:Blackhole.$init_thread_local#internal+0x9f7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422886 <kfun:Blackhole.$init_thread_local#internal+0xa06>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266811(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271522(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4228b7 <kfun:Blackhole.$init_thread_local#internal+0xa37>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4228c6 <kfun:Blackhole.$init_thread_local#internal+0xa46>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266747(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271458(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4228f7 <kfun:Blackhole.$init_thread_local#internal+0xa77>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422906 <kfun:Blackhole.$init_thread_local#internal+0xa86>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266683(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271394(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422937 <kfun:Blackhole.$init_thread_local#internal+0xab7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422946 <kfun:Blackhole.$init_thread_local#internal+0xac6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266619(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	271329(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422978 <kfun:Blackhole.$init_thread_local#internal+0xaf8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4229a4 <kfun:Blackhole.$init_thread_local#internal+0xb24>
               	testl	%ebx, %ebx
               	je	0x4229ac <kfun:Blackhole.$init_thread_local#internal+0xb2c>
               	movq	$0, 266497(%rip)        # 0x463a90 <kvar:kotlin.native.MemoryModel.$VALUES#internal>
               	movq	$0, 266494(%rip)        # 0x463a98 <kvar:kotlin.native.MemoryModel.$ENTRIES#internal>
               	movl	$0, 266540(%rip)        # 0x463ad0 <state_global$kotlin.native.MemoryModel>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	266517(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopw	(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271218(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4229e7 <kfun:Blackhole.$init_thread_local#internal+0xb67>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4229f6 <kfun:Blackhole.$init_thread_local#internal+0xb76>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266443(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271154(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422a27 <kfun:Blackhole.$init_thread_local#internal+0xba7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422a36 <kfun:Blackhole.$init_thread_local#internal+0xbb6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266379(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271090(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422a67 <kfun:Blackhole.$init_thread_local#internal+0xbe7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422a76 <kfun:Blackhole.$init_thread_local#internal+0xbf6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266315(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	271026(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422aa7 <kfun:Blackhole.$init_thread_local#internal+0xc27>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422ab6 <kfun:Blackhole.$init_thread_local#internal+0xc36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	266251(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	270961(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422ae8 <kfun:Blackhole.$init_thread_local#internal+0xc68>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x422b09 <kfun:Blackhole.$init_thread_local#internal+0xc89>
               	testl	%ebx, %ebx
               	je	0x422b11 <kfun:Blackhole.$init_thread_local#internal+0xc91>
               	movq	$0, 266145(%rip)        # 0x463aa0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
               	movl	$0, 266187(%rip)        # 0x463ad4 <state_global$kotlin.native.concurrent.UNINITIALIZED>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	266160(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	270865(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422b48 <kfun:Blackhole.$init_thread_local#internal+0xcc8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x422b69 <kfun:Blackhole.$init_thread_local#internal+0xce9>
               	testl	%ebx, %ebx
               	je	0x422b71 <kfun:Blackhole.$init_thread_local#internal+0xcf1>
               	movq	$0, 266057(%rip)        # 0x463aa8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
               	movl	$0, 266095(%rip)        # 0x463ad8 <state_global$kotlin.native.concurrent.INITIALIZING>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	266064(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270770(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422ba7 <kfun:Blackhole.$init_thread_local#internal+0xd27>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422bb6 <kfun:Blackhole.$init_thread_local#internal+0xd36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265995(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270706(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422be7 <kfun:Blackhole.$init_thread_local#internal+0xd67>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422bf6 <kfun:Blackhole.$init_thread_local#internal+0xd76>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265931(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270642(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422c27 <kfun:Blackhole.$init_thread_local#internal+0xda7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422c36 <kfun:Blackhole.$init_thread_local#internal+0xdb6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265867(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270578(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422c67 <kfun:Blackhole.$init_thread_local#internal+0xde7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422c76 <kfun:Blackhole.$init_thread_local#internal+0xdf6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265803(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270514(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422ca7 <kfun:Blackhole.$init_thread_local#internal+0xe27>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422cb6 <kfun:Blackhole.$init_thread_local#internal+0xe36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265739(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	270449(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422ce8 <kfun:Blackhole.$init_thread_local#internal+0xe68>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x422d09 <kfun:Blackhole.$init_thread_local#internal+0xe89>
               	testl	%ebx, %ebx
               	je	0x422d11 <kfun:Blackhole.$init_thread_local#internal+0xe91>
               	movq	$0, 265649(%rip)        # 0x463ab0 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
               	movl	$0, 265683(%rip)        # 0x463adc <state_global$kotlin.native.internal.NativePtr>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	265648(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270354(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422d47 <kfun:Blackhole.$init_thread_local#internal+0xec7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422d56 <kfun:Blackhole.$init_thread_local#internal+0xed6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265579(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270290(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422d87 <kfun:Blackhole.$init_thread_local#internal+0xf07>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422d96 <kfun:Blackhole.$init_thread_local#internal+0xf16>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265515(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	270225(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422dc8 <kfun:Blackhole.$init_thread_local#internal+0xf48>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x422de9 <kfun:Blackhole.$init_thread_local#internal+0xf69>
               	testl	%ebx, %ebx
               	je	0x422df1 <kfun:Blackhole.$init_thread_local#internal+0xf71>
               	movq	$0, 265433(%rip)        # 0x463ab8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movl	$0, 265463(%rip)        # 0x463ae0 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	265424(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270130(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422e27 <kfun:Blackhole.$init_thread_local#internal+0xfa7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422e36 <kfun:Blackhole.$init_thread_local#internal+0xfb6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265355(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270066(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422e67 <kfun:Blackhole.$init_thread_local#internal+0xfe7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422e76 <kfun:Blackhole.$init_thread_local#internal+0xff6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265291(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	270002(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422ea7 <kfun:Blackhole.$init_thread_local#internal+0x1027>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422eb6 <kfun:Blackhole.$init_thread_local#internal+0x1036>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265227(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269938(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422ee7 <kfun:Blackhole.$init_thread_local#internal+0x1067>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422ef6 <kfun:Blackhole.$init_thread_local#internal+0x1076>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265163(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269874(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422f27 <kfun:Blackhole.$init_thread_local#internal+0x10a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422f36 <kfun:Blackhole.$init_thread_local#internal+0x10b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265099(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269810(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422f67 <kfun:Blackhole.$init_thread_local#internal+0x10e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422f76 <kfun:Blackhole.$init_thread_local#internal+0x10f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	265035(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269746(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422fa7 <kfun:Blackhole.$init_thread_local#internal+0x1127>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422fb6 <kfun:Blackhole.$init_thread_local#internal+0x1136>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264971(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269682(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x422fe7 <kfun:Blackhole.$init_thread_local#internal+0x1167>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x422ff6 <kfun:Blackhole.$init_thread_local#internal+0x1176>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264907(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269618(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423027 <kfun:Blackhole.$init_thread_local#internal+0x11a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423036 <kfun:Blackhole.$init_thread_local#internal+0x11b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264843(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269554(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423067 <kfun:Blackhole.$init_thread_local#internal+0x11e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423076 <kfun:Blackhole.$init_thread_local#internal+0x11f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264779(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269490(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4230a7 <kfun:Blackhole.$init_thread_local#internal+0x1227>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4230b6 <kfun:Blackhole.$init_thread_local#internal+0x1236>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264715(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269426(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4230e7 <kfun:Blackhole.$init_thread_local#internal+0x1267>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4230f6 <kfun:Blackhole.$init_thread_local#internal+0x1276>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264651(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269362(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423127 <kfun:Blackhole.$init_thread_local#internal+0x12a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423136 <kfun:Blackhole.$init_thread_local#internal+0x12b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264587(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269298(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423167 <kfun:Blackhole.$init_thread_local#internal+0x12e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423176 <kfun:Blackhole.$init_thread_local#internal+0x12f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264523(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	269233(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4231a8 <kfun:Blackhole.$init_thread_local#internal+0x1328>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x4231bf <kfun:Blackhole.$init_thread_local#internal+0x133f>
               	testl	%ebx, %ebx
               	je	0x4231c7 <kfun:Blackhole.$init_thread_local#internal+0x1347>
               	movq	$0, 258385(%rip)        # 0x462310 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	264442(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	269138(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423207 <kfun:Blackhole.$init_thread_local#internal+0x1387>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423216 <kfun:Blackhole.$init_thread_local#internal+0x1396>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264363(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	269073(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423248 <kfun:Blackhole.$init_thread_local#internal+0x13c8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x42325f <kfun:Blackhole.$init_thread_local#internal+0x13df>
               	testl	%ebx, %ebx
               	je	0x423267 <kfun:Blackhole.$init_thread_local#internal+0x13e7>
               	movq	$0, 258233(%rip)        # 0x462318 <kvar:kotlin.collections.EmptySet.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	264282(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268978(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4232a7 <kfun:Blackhole.$init_thread_local#internal+0x1427>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4232b6 <kfun:Blackhole.$init_thread_local#internal+0x1436>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264203(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268914(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4232e7 <kfun:Blackhole.$init_thread_local#internal+0x1467>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4232f6 <kfun:Blackhole.$init_thread_local#internal+0x1476>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	264139(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	268849(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423328 <kfun:Blackhole.$init_thread_local#internal+0x14a8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x42333f <kfun:Blackhole.$init_thread_local#internal+0x14bf>
               	testl	%ebx, %ebx
               	je	0x423347 <kfun:Blackhole.$init_thread_local#internal+0x14c7>
               	movq	$0, 258017(%rip)        # 0x462320 <kvar:kotlin.coroutines.EmptyCoroutineContext.$instance#internal>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	264058(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopw	%cs:(%rax,%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268754(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423387 <kfun:Blackhole.$init_thread_local#internal+0x1507>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423396 <kfun:Blackhole.$init_thread_local#internal+0x1516>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263979(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268690(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4233c7 <kfun:Blackhole.$init_thread_local#internal+0x1547>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4233d6 <kfun:Blackhole.$init_thread_local#internal+0x1556>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263915(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movl	%edi, %ebx
               	movb	268625(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423408 <kfun:Blackhole.$init_thread_local#internal+0x1588>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leal	-1(%rbx), %eax
               	cmpl	$2, %eax
               	jb	0x423429 <kfun:Blackhole.$init_thread_local#internal+0x15a9>
               	testl	%ebx, %ebx
               	je	0x423431 <kfun:Blackhole.$init_thread_local#internal+0x15b1>
               	movq	$0, 263841(%rip)        # 0x463ac0 <kvar:kotlin.ranges.IntRange.$companion#internal>
               	movl	$0, 263867(%rip)        # 0x463ae4 <state_global$kotlin.ranges.IntRange>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	leaq	263824(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%r14, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x425b70 <AddTLSRecord>
               	nopl	(%rax)
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268530(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423467 <kfun:Blackhole.$init_thread_local#internal+0x15e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423476 <kfun:Blackhole.$init_thread_local#internal+0x15f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263755(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268466(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4234a7 <kfun:Blackhole.$init_thread_local#internal+0x1627>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4234b6 <kfun:Blackhole.$init_thread_local#internal+0x1636>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263691(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268402(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4234e7 <kfun:Blackhole.$init_thread_local#internal+0x1667>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4234f6 <kfun:Blackhole.$init_thread_local#internal+0x1676>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263627(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268338(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423527 <kfun:Blackhole.$init_thread_local#internal+0x16a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423536 <kfun:Blackhole.$init_thread_local#internal+0x16b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263563(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268274(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423567 <kfun:Blackhole.$init_thread_local#internal+0x16e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423576 <kfun:Blackhole.$init_thread_local#internal+0x16f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263499(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268210(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4235a7 <kfun:Blackhole.$init_thread_local#internal+0x1727>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4235b6 <kfun:Blackhole.$init_thread_local#internal+0x1736>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263435(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268146(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4235e7 <kfun:Blackhole.$init_thread_local#internal+0x1767>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4235f6 <kfun:Blackhole.$init_thread_local#internal+0x1776>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263371(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268082(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423627 <kfun:Blackhole.$init_thread_local#internal+0x17a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423636 <kfun:Blackhole.$init_thread_local#internal+0x17b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263307(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	268018(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423667 <kfun:Blackhole.$init_thread_local#internal+0x17e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423676 <kfun:Blackhole.$init_thread_local#internal+0x17f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263243(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267954(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4236a7 <kfun:Blackhole.$init_thread_local#internal+0x1827>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4236b6 <kfun:Blackhole.$init_thread_local#internal+0x1836>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263179(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267890(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4236e7 <kfun:Blackhole.$init_thread_local#internal+0x1867>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4236f6 <kfun:Blackhole.$init_thread_local#internal+0x1876>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263115(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267826(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423727 <kfun:Blackhole.$init_thread_local#internal+0x18a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423736 <kfun:Blackhole.$init_thread_local#internal+0x18b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	263051(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267762(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423767 <kfun:Blackhole.$init_thread_local#internal+0x18e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423776 <kfun:Blackhole.$init_thread_local#internal+0x18f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262987(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267698(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4237a7 <kfun:Blackhole.$init_thread_local#internal+0x1927>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4237b6 <kfun:Blackhole.$init_thread_local#internal+0x1936>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262923(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267634(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4237e7 <kfun:Blackhole.$init_thread_local#internal+0x1967>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4237f6 <kfun:Blackhole.$init_thread_local#internal+0x1976>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262859(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267570(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423827 <kfun:Blackhole.$init_thread_local#internal+0x19a7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423836 <kfun:Blackhole.$init_thread_local#internal+0x19b6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262795(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267506(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x423867 <kfun:Blackhole.$init_thread_local#internal+0x19e7>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x423876 <kfun:Blackhole.$init_thread_local#internal+0x19f6>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262731(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267442(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4238a7 <kfun:Blackhole.$init_thread_local#internal+0x1a27>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4238b6 <kfun:Blackhole.$init_thread_local#internal+0x1a36>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262667(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	movb	267378(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4238e7 <kfun:Blackhole.$init_thread_local#internal+0x1a67>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	addl	$-1, %ebp
               	cmpl	$3, %ebp
               	jae	0x4238f6 <kfun:Blackhole.$init_thread_local#internal+0x1a76>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	leaq	262603(%rip), %rsi      # 0x463ac8 <__KonanTlsKey>
               	movq	%rbx, %rdi
               	movl	$4, %edx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmp	0x425b70 <AddTLSRecord>

<_Konan_constructors>:
               	cmpb	$0, 262609(%rip)        # 0x463ae8 <_Konan_init_stdlib_guard>
               	je	0x423927 <_Konan_constructors+0x17>
               	cmpb	$0, 262601(%rip)        # 0x463ae9 <_Konan_init_main_guard>
               	je	0x42442d <_Konan_constructors+0xb1d>
               	retq
               	movb	$1, 262586(%rip)        # 0x463ae8 <_Konan_init_stdlib_guard>
               	leaq	367507(%rip), %rax      # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	movq	367532(%rip), %rcx      # 0x47d4e8 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 367488(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	256469(%rip), %rdx      # 0x462328 <init_node>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367466(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256459(%rip), %rcx      # 0x462330 <init_node+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256456(%rip), %rdx      # 0x462338 <init_node.19>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367437(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256446(%rip), %rcx      # 0x462340 <init_node.19+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256443(%rip), %rdx      # 0x462348 <init_node.20>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367408(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256433(%rip), %rcx      # 0x462350 <init_node.20+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256430(%rip), %rdx      # 0x462358 <init_node.21>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367379(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256420(%rip), %rcx      # 0x462360 <init_node.21+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256417(%rip), %rdx      # 0x462368 <init_node.22>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367350(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256407(%rip), %rcx      # 0x462370 <init_node.22+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256404(%rip), %rdx      # 0x462378 <init_node.23>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367321(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256394(%rip), %rcx      # 0x462380 <init_node.23+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256391(%rip), %rdx      # 0x462388 <init_node.24>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367292(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256381(%rip), %rcx      # 0x462390 <init_node.24+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256378(%rip), %rdx      # 0x462398 <init_node.25>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367263(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256368(%rip), %rcx      # 0x4623a0 <init_node.25+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256365(%rip), %rdx      # 0x4623a8 <init_node.26>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367234(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256355(%rip), %rcx      # 0x4623b0 <init_node.26+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256352(%rip), %rdx      # 0x4623b8 <init_node.27>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367205(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256342(%rip), %rcx      # 0x4623c0 <init_node.27+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256339(%rip), %rdx      # 0x4623c8 <init_node.28>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367176(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256329(%rip), %rcx      # 0x4623d0 <init_node.28+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256326(%rip), %rdx      # 0x4623d8 <init_node.29>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367147(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256316(%rip), %rcx      # 0x4623e0 <init_node.29+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256313(%rip), %rdx      # 0x4623e8 <init_node.30>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367118(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256303(%rip), %rcx      # 0x4623f0 <init_node.30+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256300(%rip), %rdx      # 0x4623f8 <init_node.31>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367089(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256290(%rip), %rcx      # 0x462400 <init_node.31+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256287(%rip), %rdx      # 0x462408 <init_node.32>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367060(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256277(%rip), %rcx      # 0x462410 <init_node.32+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256274(%rip), %rdx      # 0x462418 <init_node.33>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367031(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256264(%rip), %rcx      # 0x462420 <init_node.33+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256261(%rip), %rdx      # 0x462428 <init_node.34>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 367002(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256251(%rip), %rcx      # 0x462430 <init_node.34+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256248(%rip), %rdx      # 0x462438 <init_node.35>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366973(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256238(%rip), %rcx      # 0x462440 <init_node.35+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256235(%rip), %rdx      # 0x462448 <init_node.36>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366944(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256225(%rip), %rcx      # 0x462450 <init_node.36+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256222(%rip), %rdx      # 0x462458 <init_node.37>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366915(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256212(%rip), %rcx      # 0x462460 <init_node.37+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256209(%rip), %rdx      # 0x462468 <init_node.38>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366886(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256199(%rip), %rcx      # 0x462470 <init_node.38+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256196(%rip), %rdx      # 0x462478 <init_node.39>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366857(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256186(%rip), %rcx      # 0x462480 <init_node.39+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256183(%rip), %rdx      # 0x462488 <init_node.40>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366828(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256173(%rip), %rcx      # 0x462490 <init_node.40+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256170(%rip), %rdx      # 0x462498 <init_node.41>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366799(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256160(%rip), %rcx      # 0x4624a0 <init_node.41+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256157(%rip), %rdx      # 0x4624a8 <init_node.42>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366770(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256147(%rip), %rcx      # 0x4624b0 <init_node.42+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256144(%rip), %rdx      # 0x4624b8 <init_node.43>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366741(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256134(%rip), %rcx      # 0x4624c0 <init_node.43+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256131(%rip), %rdx      # 0x4624c8 <init_node.44>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366712(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256121(%rip), %rcx      # 0x4624d0 <init_node.44+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256118(%rip), %rdx      # 0x4624d8 <init_node.45>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366683(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256108(%rip), %rcx      # 0x4624e0 <init_node.45+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256105(%rip), %rdx      # 0x4624e8 <init_node.46>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366654(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256095(%rip), %rcx      # 0x4624f0 <init_node.46+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256092(%rip), %rdx      # 0x4624f8 <init_node.47>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366625(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256082(%rip), %rcx      # 0x462500 <init_node.47+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256079(%rip), %rdx      # 0x462508 <init_node.48>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366596(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256069(%rip), %rcx      # 0x462510 <init_node.48+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256066(%rip), %rdx      # 0x462518 <init_node.49>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366567(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256056(%rip), %rcx      # 0x462520 <init_node.49+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256053(%rip), %rdx      # 0x462528 <init_node.50>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366538(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256043(%rip), %rcx      # 0x462530 <init_node.50+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256040(%rip), %rdx      # 0x462538 <init_node.51>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366509(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256030(%rip), %rcx      # 0x462540 <init_node.51+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256027(%rip), %rdx      # 0x462548 <init_node.52>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366480(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256017(%rip), %rcx      # 0x462550 <init_node.52+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256014(%rip), %rdx      # 0x462558 <init_node.53>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366451(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	256004(%rip), %rcx      # 0x462560 <init_node.53+0x8>
               	cmoveq	%rax, %rcx
               	leaq	256001(%rip), %rdx      # 0x462568 <init_node.54>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366422(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255991(%rip), %rcx      # 0x462570 <init_node.54+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255988(%rip), %rdx      # 0x462578 <init_node.55>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366393(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255978(%rip), %rcx      # 0x462580 <init_node.55+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255975(%rip), %rdx      # 0x462588 <init_node.56>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366364(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255965(%rip), %rcx      # 0x462590 <init_node.56+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255962(%rip), %rdx      # 0x462598 <init_node.57>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366335(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255952(%rip), %rcx      # 0x4625a0 <init_node.57+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255949(%rip), %rdx      # 0x4625a8 <init_node.58>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366306(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255939(%rip), %rcx      # 0x4625b0 <init_node.58+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255936(%rip), %rdx      # 0x4625b8 <init_node.59>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366277(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255926(%rip), %rcx      # 0x4625c0 <init_node.59+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255923(%rip), %rdx      # 0x4625c8 <init_node.60>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366248(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255913(%rip), %rcx      # 0x4625d0 <init_node.60+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255910(%rip), %rdx      # 0x4625d8 <init_node.61>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366219(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255900(%rip), %rcx      # 0x4625e0 <init_node.61+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255897(%rip), %rdx      # 0x4625e8 <init_node.62>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366190(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255887(%rip), %rcx      # 0x4625f0 <init_node.62+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255884(%rip), %rdx      # 0x4625f8 <init_node.63>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366161(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255874(%rip), %rcx      # 0x462600 <init_node.63+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255871(%rip), %rdx      # 0x462608 <init_node.64>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366132(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255861(%rip), %rcx      # 0x462610 <init_node.64+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255858(%rip), %rdx      # 0x462618 <init_node.65>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366103(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255848(%rip), %rcx      # 0x462620 <init_node.65+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255845(%rip), %rdx      # 0x462628 <init_node.66>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366074(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255835(%rip), %rcx      # 0x462630 <init_node.66+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255832(%rip), %rdx      # 0x462638 <init_node.67>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366045(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255822(%rip), %rcx      # 0x462640 <init_node.67+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255819(%rip), %rdx      # 0x462648 <init_node.68>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 366016(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255809(%rip), %rcx      # 0x462650 <init_node.68+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255806(%rip), %rdx      # 0x462658 <init_node.69>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365987(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255796(%rip), %rcx      # 0x462660 <init_node.69+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255793(%rip), %rdx      # 0x462668 <init_node.70>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365958(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255783(%rip), %rcx      # 0x462670 <init_node.70+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255780(%rip), %rdx      # 0x462678 <init_node.71>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365929(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255770(%rip), %rcx      # 0x462680 <init_node.71+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255767(%rip), %rdx      # 0x462688 <init_node.72>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365900(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255757(%rip), %rcx      # 0x462690 <init_node.72+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255754(%rip), %rdx      # 0x462698 <init_node.73>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365871(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255744(%rip), %rcx      # 0x4626a0 <init_node.73+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255741(%rip), %rdx      # 0x4626a8 <init_node.74>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365842(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255731(%rip), %rcx      # 0x4626b0 <init_node.74+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255728(%rip), %rdx      # 0x4626b8 <init_node.75>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365813(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255718(%rip), %rcx      # 0x4626c0 <init_node.75+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255715(%rip), %rdx      # 0x4626c8 <init_node.76>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365784(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255705(%rip), %rcx      # 0x4626d0 <init_node.76+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255702(%rip), %rdx      # 0x4626d8 <init_node.77>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365755(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255692(%rip), %rcx      # 0x4626e0 <init_node.77+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255689(%rip), %rdx      # 0x4626e8 <init_node.78>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365726(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255679(%rip), %rcx      # 0x4626f0 <init_node.78+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255676(%rip), %rdx      # 0x4626f8 <init_node.79>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365697(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255666(%rip), %rcx      # 0x462700 <init_node.79+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255663(%rip), %rdx      # 0x462708 <init_node.80>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365668(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255653(%rip), %rcx      # 0x462710 <init_node.80+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255650(%rip), %rdx      # 0x462718 <init_node.81>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365639(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255640(%rip), %rcx      # 0x462720 <init_node.81+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255637(%rip), %rdx      # 0x462728 <init_node.82>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365610(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255627(%rip), %rcx      # 0x462730 <init_node.82+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255624(%rip), %rdx      # 0x462738 <init_node.83>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365581(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255614(%rip), %rcx      # 0x462740 <init_node.83+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255611(%rip), %rdx      # 0x462748 <init_node.84>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365552(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255601(%rip), %rcx      # 0x462750 <init_node.84+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255598(%rip), %rdx      # 0x462758 <init_node.85>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365523(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255588(%rip), %rcx      # 0x462760 <init_node.85+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255585(%rip), %rdx      # 0x462768 <init_node.86>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365494(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255575(%rip), %rcx      # 0x462770 <init_node.86+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255572(%rip), %rdx      # 0x462778 <init_node.87>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365465(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255562(%rip), %rcx      # 0x462780 <init_node.87+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255559(%rip), %rdx      # 0x462788 <init_node.88>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365436(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255549(%rip), %rcx      # 0x462790 <init_node.88+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255546(%rip), %rdx      # 0x462798 <init_node.89>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365407(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255536(%rip), %rcx      # 0x4627a0 <init_node.89+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255533(%rip), %rdx      # 0x4627a8 <init_node.90>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365378(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255523(%rip), %rcx      # 0x4627b0 <init_node.90+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255520(%rip), %rdx      # 0x4627b8 <init_node.91>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365349(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255510(%rip), %rcx      # 0x4627c0 <init_node.91+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255507(%rip), %rdx      # 0x4627c8 <init_node.92>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365320(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255497(%rip), %rcx      # 0x4627d0 <init_node.92+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255494(%rip), %rdx      # 0x4627d8 <init_node.93>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365291(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255484(%rip), %rcx      # 0x4627e0 <init_node.93+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255481(%rip), %rdx      # 0x4627e8 <init_node.94>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365262(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255471(%rip), %rcx      # 0x4627f0 <init_node.94+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255468(%rip), %rdx      # 0x4627f8 <init_node.95>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365233(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255458(%rip), %rcx      # 0x462800 <init_node.95+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255455(%rip), %rdx      # 0x462808 <init_node.96>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365204(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255445(%rip), %rcx      # 0x462810 <init_node.96+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255442(%rip), %rdx      # 0x462818 <init_node.97>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365175(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255432(%rip), %rcx      # 0x462820 <init_node.97+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255429(%rip), %rdx      # 0x462828 <init_node.98>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365146(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255419(%rip), %rcx      # 0x462830 <init_node.98+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255416(%rip), %rdx      # 0x462838 <init_node.99>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365117(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255406(%rip), %rcx      # 0x462840 <init_node.99+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255403(%rip), %rdx      # 0x462848 <init_node.100>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365088(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255393(%rip), %rcx      # 0x462850 <init_node.100+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255390(%rip), %rdx      # 0x462858 <init_node.101>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365059(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255380(%rip), %rcx      # 0x462860 <init_node.101+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255377(%rip), %rdx      # 0x462868 <init_node.102>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365030(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255367(%rip), %rcx      # 0x462870 <init_node.102+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255364(%rip), %rdx      # 0x462878 <init_node.103>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 365001(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255354(%rip), %rcx      # 0x462880 <init_node.103+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255351(%rip), %rdx      # 0x462888 <init_node.104>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364972(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255341(%rip), %rcx      # 0x462890 <init_node.104+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255338(%rip), %rdx      # 0x462898 <init_node.105>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364943(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255328(%rip), %rcx      # 0x4628a0 <init_node.105+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255325(%rip), %rdx      # 0x4628a8 <init_node.106>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364914(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255315(%rip), %rcx      # 0x4628b0 <init_node.106+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255312(%rip), %rdx      # 0x4628b8 <init_node.107>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364885(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255302(%rip), %rcx      # 0x4628c0 <init_node.107+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255299(%rip), %rdx      # 0x4628c8 <init_node.108>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364856(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255289(%rip), %rcx      # 0x4628d0 <init_node.108+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255286(%rip), %rdx      # 0x4628d8 <init_node.109>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364827(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255276(%rip), %rcx      # 0x4628e0 <init_node.109+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255273(%rip), %rdx      # 0x4628e8 <init_node.110>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364798(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255263(%rip), %rcx      # 0x4628f0 <init_node.110+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255260(%rip), %rdx      # 0x4628f8 <init_node.111>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364769(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255250(%rip), %rcx      # 0x462900 <init_node.111+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255247(%rip), %rdx      # 0x462908 <init_node.112>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364740(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255237(%rip), %rcx      # 0x462910 <init_node.112+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255234(%rip), %rax      # 0x462918 <init_node.113>
               	movq	%rax, (%rcx)
               	movq	%rax, 364744(%rip)      # 0x47d4e8 <(anonymous namespace)::initTailNode>
               	cmpb	$0, 259778(%rip)        # 0x463ae9 <_Konan_init_main_guard>
               	jne	0x423926 <_Konan_constructors+0x16>
               	movb	$1, 259765(%rip)        # 0x463ae9 <_Konan_init_main_guard>
               	leaq	364685(%rip), %rax      # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	movq	364710(%rip), %rcx      # 0x47d4e8 <(anonymous namespace)::initTailNode>
               	addq	$8, %rcx
               	cmpq	$0, 364666(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	cmoveq	%rax, %rcx
               	leaq	255183(%rip), %rdx      # 0x462928 <init_node.114>
               	movq	%rdx, (%rcx)
               	cmpq	$0, 364644(%rip)        # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	leaq	255173(%rip), %rcx      # 0x462930 <init_node.114+0x8>
               	cmoveq	%rax, %rcx
               	leaq	255170(%rip), %rax      # 0x462938 <init_node.115>
               	movq	%rax, (%rcx)
               	movq	%rax, 364648(%rip)      # 0x47d4e8 <(anonymous namespace)::initTailNode>
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>:
               	jmp	0x413780 <sched_yield@plt>
               	nopw	%cs:(%rax,%rax)

<__clang_call_terminate>:
               	pushq	%rax
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cf13 <std::terminate()>
               	nopl	(%rax,%rax)

<void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, (%rsp)
               	movq	%rdi, %r13
               	cmpq	$0, 252651(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4244df <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2f>
               	movq	%r13, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4246b8 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x208>
               	cmpb	$0, 88(%r13)
               	je	0x424692 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	leaq	40(%r13), %r15
               	jmp	0x42452b <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x7b>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	96(%r13), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	movabsq	$9223372036854775807, %rsi # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rsi, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 104(%r13)
               	nopl	(%rax)
               	cmpb	$0, 88(%r13)
               	je	0x424692 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1e2>
               	movb	$0, 112(%r13)
               	movq	104(%r13), %r14
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	cmpq	%r14, %rax
               	jge	0x4245ef <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x13f>
               	xorl	%ecx, %ecx
               	cmpq	%rax, %r14
               	setns	%cl
               	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rdx, %rcx
               	movq	%r14, %rbp
               	subq	%rax, %rbp
               	cmovoq	%rcx, %rbp
               	movabsq	$86400000000000, %rax   # imm = 0x4E94914F0000
               	cmpq	%rax, %rbp
               	cmovgq	%rax, %rbp
               	callq	0x43db50 <std::chrono::_V2::system_clock::now()>
               	movq	%rax, %rbx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	movabsq	$1237940039285380275, %rcx # imm = 0x112E0BE826D694B3
               	imulq	%rcx
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$26, %rbp
               	addq	%rax, %rbp
               	imulq	$-1000000000, %rbp, %r12 # imm = 0xC4653600
               	addq	%rbx, %r12
               	nopl	(%rax,%rax)
               	cmpb	$0, 112(%r13)
               	jne	0x424520 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	movq	%rbp, 8(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	leaq	8(%rsp), %rdx
               	callq	0x4137a0 <pthread_cond_timedwait@plt>
               	callq	0x43db50 <std::chrono::_V2::system_clock::now()>
               	cmpq	%rbx, %rax
               	jl	0x4245b0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x100>
               	cmpb	$0, 112(%r13)
               	je	0x424534 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x84>
               	jmp	0x424520 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x70>
               	cmpq	$0, 252353(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x424601 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x151>
               	movq	%r13, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	(%rsp), %rax
               	movq	(%rax), %rbx
               	movq	16(%rbx), %rax
               	movl	(%rax), %eax
               	cmpl	$1, %eax
               	je	0x42466d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	56(%rbx), %rcx
               	movq	48(%rbx), %rdx
               	movq	24(%rdx), %rdx
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%rbp), %rsi
               	testq	%rdx, %rdx
               	cmovnsq	%rbp, %rsi
               	imulq	$1000, %rdx, %rdx       # imm = 0x3E8
               	cmovoq	%rsi, %rdx
               	xorl	%esi, %esi
               	movq	%rcx, %rdi
               	addq	%rdx, %rdi
               	setns	%sil
               	addq	%rbp, %rsi
               	addq	%rcx, %rdx
               	cmovoq	%rsi, %rdx
               	cmpq	%rdx, %rax
               	jl	0x42466d <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1bd>
               	cmpq	$0, 80(%rbx)
               	je	0x4246b3 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x203>
               	leaq	64(%rbx), %rdi
               	callq	*88(%rbx)
               	cmpq	$0, 252227(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4244f0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	%r13, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x4244f0 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	cmpq	$0, 252190(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4246a4 <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x1f4>
               	movq	%r13, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43dbc2 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpq	$0, 252118(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4246ec <void kotlin::RepeatedTimer<kotlin::steady_clock>::Run<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x23c>
               	movq	%r13, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42472a <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x2a>
               	movq	(%rdi), %r12
               	callq	0x4137c0 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x4137d0 <pthread_setname_np@plt>
               	movq	(%r15), %rdi
               	movq	(%rbx), %rax
               	addq	8(%rbx), %rdi
               	testb	$1, %al
               	je	0x424740 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)+0x40>
               	movq	(%rdi), %rcx
               	movq	-1(%rax,%rcx), %rax
               	movq	%r14, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	244053(%rip), %rax      # 0x4600b0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x424776 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x424776 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43fd30 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	244005(%rip), %rax      # 0x4600b0 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 72(%rdi)
               	je	0x4247a6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	movq	40(%rbx), %rdi
               	leaq	56(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x4247a6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43fd30 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rcx
               	leaq	24(%rdi), %rsi
               	leaq	16(%rdi), %rdx
               	movq	80(%rdi), %r9
               	movb	$0, 40(%rsp)
               	cmpb	$0, 72(%rdi)
               	je	0x42482c <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x6c>
               	leaq	24(%rsp), %r8
               	movq	%r8, 8(%rsp)
               	movq	40(%rdi), %rax
               	leaq	56(%rdi), %rbx
               	cmpq	%rbx, %rax
               	je	0x424807 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x47>
               	movq	%rax, 8(%rsp)
               	movq	56(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	jmp	0x42480e <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x4e>
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%r8)
               	movq	48(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movq	%rbx, 40(%rdi)
               	movq	$0, 48(%rdi)
               	movb	$0, 56(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%r9
               	cmpb	$0, 40(%rsp)
               	je	0x42484f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x42484f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0x8f>
               	callq	0x413730 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x424873 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x424873 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&), kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()> > >::_M_run()+0xb3>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	243693(%rip), %rax      # 0x460078 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x424ac0 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4248b1 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x31>
               	addq	$64, %rbx
               	movq	%rbx, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopl	(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	243629(%rip), %rax      # 0x460078 <vtable for kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>+0x10>
               	movq	%rax, (%rdi)
               	addq	$96, %rdi
               	callq	0x424ac0 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>
               	movq	80(%rbx), %rax
               	testq	%rax, %rax
               	je	0x4248ee <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::~GCSchedulerDataWithTimer()+0x2e>
               	leaq	64(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nop

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)>:
               	pushq	%rax
               	movq	40(%rsi), %rcx
               	lock
               	addq	%rcx, 32(%rdi)
               	movq	32(%rdi), %rcx
               	movq	40(%rdi), %rdx
               	addq	%rcx, %rdx
               	movq	24(%rdi), %rcx
               	movq	32(%rcx), %rcx
               	cmpq	%rcx, %rdx
               	jb	0x424933 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x33>
               	movq	%rdi, %rax
               	cmpq	$0, 80(%rdi)
               	je	0x424935 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateFromThreadData(kotlin::gc::GCSchedulerThreadData&)+0x35>
               	leaq	64(%rax), %rdi
               	callq	*88(%rax)
               	popq	%rax
               	retq
               	callq	0x43dbc2 <std::__throw_bad_function_call()>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	xorl	%eax, %eax
               	xchgq	%rax, 32(%rdi)
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	xchgq	%rax, 56(%rbx)
               	movq	8(%rbx), %rax
               	movq	24(%rax), %r15
               	leaq	96(%rbx), %r14
               	cmpq	$0, 251450(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x424990 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0x40>
               	movq	%r14, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424a13 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xc3>
               	movabsq	$9223372036854775807, %r12 # imm = 0x7FFFFFFFFFFFFFFF
               	leaq	1(%r12), %rax
               	testq	%r15, %r15
               	cmovnsq	%r12, %rax
               	imulq	$1000, %r15, %rcx       # imm = 0x3E8
               	cmovoq	%rax, %rcx
               	movq	%rcx, 192(%rbx)
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	192(%rbx), %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	addq	%rcx, %rsi
               	setns	%dl
               	addq	%r12, %rdx
               	addq	%rcx, %rax
               	cmovoq	%rdx, %rax
               	movq	%rax, 200(%rbx)
               	movb	$1, 208(%rbx)
               	cmpq	$0, 251337(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4249f9 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::OnPerformFullGC()+0xa9>
               	movq	%r14, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	addq	$136, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x43d7e8 <std::condition_variable::notify_all()>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)>:
               	movq	%rsi, %rax
               	xchgq	%rax, 40(%rdi)
               	movq	24(%rdi), %rax
               	movb	16(%rax), %al
               	testb	$1, %al
               	je	0x424ab8 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	%rsi, %xmm1
               	punpckldq	126945(%rip), %xmm1 # xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
                                                # 0x443a30 <_IO_stdin_used+0x30>
               	subpd	126953(%rip), %xmm1     # 0x443a40 <_IO_stdin_used+0x40>
               	movapd	%xmm1, %xmm0
               	unpckhpd	%xmm1, %xmm0            # xmm0 = xmm0[1],xmm1[1]
               	addsd	%xmm1, %xmm0
               	movq	24(%rdi), %rax
               	movsd	40(%rax), %xmm1         # xmm1 = mem[0],zero
               	divsd	%xmm1, %xmm0
               	movapd	126936(%rip), %xmm1     # 0x443a50 <_IO_stdin_used+0x50>
               	andpd	%xmm0, %xmm1
               	ucomisd	127116(%rip), %xmm1     # 0x443b10 <_IO_stdin_used+0x110>
               	je	0x424ab8 <kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::UpdateAliveSetBytes(unsigned long)+0x88>
               	movq	24(%rdi), %rax
               	movq	48(%rax), %rax
               	xorps	%xmm1, %xmm1
               	cvtsi2sd	%rax, %xmm1
               	movq	24(%rdi), %rax
               	movq	56(%rax), %rax
               	cvtsi2sd	%rax, %xmm2
               	maxsd	%xmm0, %xmm1
               	minsd	%xmm1, %xmm2
               	cvttsd2si	%xmm2, %rax
               	movq	24(%rdi), %rcx
               	xchgq	%rax, 32(%rcx)
               	retq
               	nopl	(%rax)

<kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	cmpq	$0, 251112(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x424ade <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x1e>
               	movq	%r15, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x424b3d <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x7d>
               	movb	$0, 88(%r15)
               	movb	$1, 112(%r15)
               	testq	%r15, %r15
               	je	0x424aff <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	cmpq	$0, 251075(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x424aff <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x3f>
               	movq	%r15, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	leaq	40(%r15), %r14
               	movq	%r14, %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	leaq	120(%r15), %rbx
               	movq	%rbx, %rdi
               	callq	0x43fd44 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	je	0x424b2b <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x6b>
               	movq	%rbx, %rdi
               	callq	0x43fd44 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x424b38 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x78>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x43d7ba <std::condition_variable::~condition_variable()>
               	callq	0x43cf13 <std::terminate()>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	jmp	0x424b59 <kotlin::RepeatedTimer<kotlin::steady_clock>::~RepeatedTimer()+0x99>
               	movq	%rax, %r14
               	movq	(%rbx), %rdi
               	callq	0x424b80 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbx
               	leaq	120(%r15), %rdi
               	callq	0x424b90 <kotlin::ScopedThread::~ScopedThread()>
               	addq	$40, %r15
               	movq	%r15, %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopl	(%rax)

<std::thread::~thread()>:
               	testq	%rdi, %rdi
               	jne	0x424b86 <std::thread::~thread()+0x6>
               	retq
               	pushq	%rax
               	callq	0x43cf13 <std::terminate()>
               	nopl	(%rax)

<kotlin::ScopedThread::~ScopedThread()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, (%rdi)
               	je	0x424ba8 <kotlin::ScopedThread::~ScopedThread()+0x18>
               	movq	%rdi, %rbx
               	callq	0x43fd44 <std::thread::join()>
               	cmpq	$0, (%rbx)
               	jne	0x424bb0 <kotlin::ScopedThread::~ScopedThread()+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	callq	0x43cf13 <std::terminate()>
               	movq	%rax, %r14
               	movq	(%rbx), %rdi
               	callq	0x424b80 <std::thread::~thread()>
               	movq	%r14, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopl	(%rax,%rax)
               	nopl	(%rax)
		...

<void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%rsi, %rbx
               	subq	%rdi, %rbx
               	cmpq	$257, %rbx              # imm = 0x101
               	jl	0x4250af <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movq	%rdx, %r12
               	movq	%rsi, %r14
               	movq	%rdi, %rbp
               	leaq	16(%rdi), %rax
               	movq	%rax, 32(%rsp)
               	movq	%rdi, 64(%rsp)
               	nopl	(%rax,%rax)
               	testq	%r12, %r12
               	movq	%r14, 8(%rsp)
               	je	0x425006 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x426>
               	shrq	%rbx
               	andq	$-16, %rbx
               	leaq	(%rbx,%rbp), %rax
               	movq	%rax, 56(%rsp)
               	leaq	-16(%r14), %rax
               	movq	%rax, 48(%rsp)
               	movq	16(%rbp), %r15
               	movq	24(%rbp), %rdi
               	movq	(%rbp,%rbx), %r13
               	movq	8(%rbp,%rbx), %rax
               	movq	%rax, 40(%rsp)
               	movq	%r15, %rbx
               	subq	%r13, %rbx
               	movq	%r15, %rdx
               	cmovaq	%r13, %rdx
               	testq	%rdx, %rdx
               	movq	%r12, 80(%rsp)
               	je	0x424ca0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	movq	%r13, 72(%rsp)
               	movq	%rdi, %r13
               	movq	40(%rsp), %rsi
               	callq	0x4137e0 <memcmp@plt>
               	movq	%r13, %rdi
               	movq	72(%rsp), %r13
               	testl	%eax, %eax
               	je	0x424ca0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xc0>
               	testl	%eax, %eax
               	jns	0x424cc2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	jmp	0x424da0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x424cc2 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x424da0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1c0>
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x424d00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x424d00 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x120>
               	testl	%eax, %eax
               	jns	0x424d22 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	jmp	0x424dda <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x424d22 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x142>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x424dda <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1fa>
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x424d60 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x424d60 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x180>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x424d8c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	jmp	0x424e9b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	nop
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x424d8c <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x1ac>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x424e9b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	jmp	0x424ea9 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2c9>
               	nop
               	movq	-16(%r14), %r12
               	movq	-8(%r14), %r14
               	movq	%r13, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r13
               	testq	%r13, %r13
               	je	0x424e05 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	movq	%r13, %rdx
               	movq	%rdi, %r13
               	movq	40(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x4137e0 <memcmp@plt>
               	movq	%r13, %rdi
               	testl	%eax, %eax
               	je	0x424e05 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x225>
               	testl	%eax, %eax
               	jns	0x424e27 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	jmp	0x424fdf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	movq	8(%rsp), %r15
               	jmp	0x424edf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x424e27 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x247>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	js	0x424fdf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3ff>
               	movq	%r15, %rbx
               	subq	%r12, %rbx
               	cmovaq	%r12, %r15
               	testq	%r15, %r15
               	je	0x424e50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	movq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x424e50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x270>
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	jns	0x424e78 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	jmp	0x424e9b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	movq	8(%rsp), %r15
               	jg	0x424e78 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x298>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	movq	8(%rsp), %r15
               	js	0x424e9b <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2bb>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	32(%rsp), %r13
               	movups	(%r13), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r13)
               	jmp	0x424edf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	48(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	32(%rsp), %r13
               	jmp	0x424edf <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2ff>
               	nop
               	movups	(%r14), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movups	(%r15), %xmm0
               	movups	%xmm0, (%r14)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	movq	64(%rsp), %rbp
               	movq	(%rbp), %rbx
               	movq	8(%rbp), %r12
               	jmp	0x424f12 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x332>
               	nopl	(%rax)
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x424f40 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x360>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	16(%r14), %r13
               	testl	%eax, %eax
               	jns	0x424f44 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x364>
               	movq	%r13, %r14
               	movq	(%r13), %rdx
               	movq	%rdx, %rbp
               	subq	%rbx, %rbp
               	cmovaq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x424ef0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	movq	8(%r14), %rdi
               	movq	%r12, %rsi
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x424f0a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x32a>
               	jmp	0x424ef0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x310>
               	nopl	(%rax)
               	leaq	16(%r14), %r13
               	addq	$-16, %r15
               	movq	%r15, %rcx
               	jmp	0x424f72 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x392>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x424fa0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	movl	$2147483648, %eax       # imm = 0x80000000
               	cmovlel	%eax, %ebp
               	movl	%ebp, %eax
               	leaq	-16(%r15), %rcx
               	testl	%eax, %eax
               	jns	0x424fa0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x3c0>
               	movq	%rcx, %r15
               	movq	(%rcx), %rdx
               	movq	%rbx, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%rbx, %rdx
               	testq	%rdx, %rdx
               	je	0x424f50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	movq	8(%r15), %rsi
               	movq	%r12, %rdi
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x424f6a <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x38a>
               	jmp	0x424f50 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x370>
               	cmpq	%r15, %r14
               	jb	0x424ec0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2e0>
               	movq	80(%rsp), %r12
               	addq	$-1, %r12
               	movq	%r14, %rdi
               	movq	8(%rsp), %rsi
               	movq	%r12, %rdx
               	callq	0x424be0 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)>
               	movq	%r14, %rbx
               	movq	64(%rsp), %rbp
               	subq	%rbp, %rbx
               	cmpq	$256, %rbx              # imm = 0x100
               	jg	0x424c20 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
               	jmp	0x4250af <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4cf>
               	movups	(%rbp), %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movq	56(%rsp), %rax
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	movaps	16(%rsp), %xmm0
               	movups	%xmm0, (%rax)
               	movq	8(%rsp), %r15
               	jmp	0x424eb8 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x2d8>
               	shrq	$4, %rbx
               	leaq	-2(%rbx), %rax
               	shrq	$63, %rax
               	leaq	(%rbx,%rax), %r14
               	addq	$-2, %r14
               	sarq	%r14
               	movq	%r14, %r15
               	shlq	$4, %r15
               	movq	(%rbp,%r15), %rcx
               	movq	8(%rbp,%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x425140 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	%rbp, %r15
               	addq	$-8, %r15
               	cmpq	$-1, %r14
               	je	0x425073 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x493>
               	nopl	(%rax)
               	movq	-8(%r15), %rcx
               	movq	(%r15), %r8
               	movq	%rbp, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x425140 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-1, %r14
               	addq	$-16, %r15
               	cmpq	$-1, %r14
               	jne	0x425050 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x470>
               	movq	8(%rsp), %rbx
               	addq	$-16, %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	8(%rbx), %r8
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%rbx)
               	movq	%rbx, %r14
               	subq	%rbp, %r14
               	movq	%r14, %rdx
               	sarq	$4, %rdx
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x425140 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>
               	addq	$-16, %rbx
               	cmpq	$16, %r14
               	jg	0x425080 <void std::__introsort_loop<std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, std::basic_string_view<char, std::char_traits<char> >*, long, __gnu_cxx::__ops::_Iter_less_iter)+0x4a0>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %r15
               	movq	8(%rdi), %r14
               	movl	$2147483648, %r12d      # imm = 0x80000000
               	nopl	(%rax,%rax)
               	movq	-16(%rbx), %rdx
               	movq	%r15, %rbp
               	subq	%rdx, %rbp
               	cmovbeq	%r15, %rdx
               	testq	%rdx, %rdx
               	je	0x425103 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x43>
               	movq	-8(%rbx), %rsi
               	movq	%r14, %rdi
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x425119 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x59>
               	cmpq	$2147483647, %rbp       # imm = 0x7FFFFFFF
               	jg	0x42512a <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	cmpq	$-2147483648, %rbp      # imm = 0x80000000
               	cmovlel	%r12d, %ebp
               	movl	%ebp, %eax
               	testl	%eax, %eax
               	jns	0x42512a <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x6a>
               	movups	-16(%rbx), %xmm0
               	movups	%xmm0, (%rbx)
               	addq	$-16, %rbx
               	jmp	0x4250e0 <void std::__unguarded_linear_insert<std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, __gnu_cxx::__ops::_Val_less_iter)+0x20>
               	movq	%r15, (%rbx)
               	movq	%r14, 8(%rbx)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, 16(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%rdi, %r14
               	leaq	-1(%rdx), %rax
               	shrq	$63, %rax
               	movq	%rdx, 32(%rsp)
               	leaq	(%rdx,%rax), %rbx
               	addq	$-1, %rbx
               	sarq	%rbx
               	movq	%rsi, %r12
               	movq	%rsi, 8(%rsp)
               	cmpq	%rsi, %rbx
               	jle	0x42523f <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	movq	8(%rsp), %rbp
               	jmp	0x4251b4 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x74>
               	nop
               	movq	%r13, %r12
               	movq	%r12, %rax
               	shlq	$4, %rax
               	shlq	$4, %rbp
               	movups	(%r14,%rax), %xmm0
               	movups	%xmm0, (%r14,%rbp)
               	movq	%r12, %rbp
               	cmpq	%rbx, %r12
               	jge	0x42523f <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xff>
               	leaq	2(,%rbp), %r12
               	addq	%rbp, %r12
               	leaq	1(,%rbp), %r13
               	addq	%rbp, %r13
               	movq	%r12, %rax
               	shlq	$4, %rax
               	movq	(%r14,%rax), %rdx
               	movq	%r13, %rcx
               	shlq	$4, %rcx
               	movq	(%r14,%rcx), %rsi
               	movq	%rdx, %r15
               	subq	%rsi, %r15
               	cmovaq	%rsi, %rdx
               	testq	%rdx, %rdx
               	je	0x425210 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	movq	8(%r14,%rcx), %rsi
               	movq	8(%r14,%rax), %rdi
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	je	0x425210 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
               	testl	%eax, %eax
               	js	0x425190 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	jmp	0x425237 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xf7>
               	nop
               	cmpq	$2147483647, %r15       # imm = 0x7FFFFFFF
               	jg	0x425193 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x53>
               	cmpq	$-2147483648, %r15      # imm = 0x80000000
               	jg	0x42522c <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0xec>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	movl	%r15d, %eax
               	testl	%eax, %eax
               	js	0x425190 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	%r12, %r13
               	jmp	0x425190 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x50>
               	movq	32(%rsp), %rcx
               	testb	$1, %cl
               	jne	0x425280 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	-2(%rcx), %rax
               	shrq	$63, %rax
               	addq	%rcx, %rax
               	addq	$-2, %rax
               	sarq	%rax
               	cmpq	%rax, %r12
               	jne	0x425280 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x140>
               	leaq	(%r12,%r12), %rax
               	addq	$1, %rax
               	movq	%rax, %rcx
               	shlq	$4, %rcx
               	shlq	$4, %r12
               	movups	(%r14,%rcx), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%rax, %r12
               	cmpq	8(%rsp), %r12
               	jle	0x42531c <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	movl	$2147483648, %r15d      # imm = 0x80000000
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leaq	-1(%r12), %rax
               	shrq	$63, %rax
               	leaq	(%r12,%rax), %r13
               	addq	$-1, %r13
               	sarq	%r13
               	movq	%r13, %rbp
               	shlq	$4, %rbp
               	movq	(%r14,%rbp), %rdx
               	movq	%rdx, %rbx
               	movq	24(%rsp), %rax
               	subq	%rax, %rbx
               	cmovaq	%rax, %rdx
               	testq	%rdx, %rdx
               	je	0x4252e6 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1a6>
               	movq	8(%r14,%rbp), %rdi
               	movq	16(%rsp), %rsi
               	callq	0x4137e0 <memcmp@plt>
               	testl	%eax, %eax
               	jne	0x4252fc <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1bc>
               	cmpq	$2147483647, %rbx       # imm = 0x7FFFFFFF
               	jg	0x42531c <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	cmpq	$-2147483648, %rbx      # imm = 0x80000000
               	cmovlel	%r15d, %ebx
               	movl	%ebx, %eax
               	testl	%eax, %eax
               	jns	0x42531c <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1dc>
               	addq	%r14, %rbp
               	shlq	$4, %r12
               	movups	(%rbp), %xmm0
               	movups	%xmm0, (%r14,%r12)
               	movq	%r13, %r12
               	cmpq	8(%rsp), %r13
               	jg	0x4252a0 <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x160>
               	jmp	0x42531f <void std::__adjust_heap<std::basic_string_view<char, std::char_traits<char> >*, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter>(std::basic_string_view<char, std::char_traits<char> >*, long, long, std::basic_string_view<char, std::char_traits<char> >, __gnu_cxx::__ops::_Iter_less_iter)+0x1df>
               	movq	%r12, %r13
               	shlq	$4, %r13
               	movq	24(%rsp), %rax
               	movq	%rax, (%r14,%r13)
               	movq	16(%rsp), %rax
               	movq	%rax, 8(%r14,%r13)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	352(%rdi), %r14
               	testq	%r14, %r14
               	je	0x425373 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)+0x23>
               	movq	%r14, %rdi
               	callq	0x425350 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	addq	$8, %rbx
               	movq	%rbx, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x4253a0 <kotlin::mm::ThreadData::~ThreadData()>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadData::~ThreadData()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %r15
               	movq	296(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4253b9 <kotlin::mm::ThreadData::~ThreadData()+0x19>
               	callq	0x413730 <free@plt>
               	leaq	288(%r15), %rdi
               	callq	0x428e70 <kotlin::gc::GC::ThreadData::~ThreadData()>
               	leaq	224(%r15), %rdi
               	callq	0x425550 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	leaq	256(%r15), %r14
               	movq	256(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x425400 <kotlin::mm::ThreadData::~ThreadData()+0x60>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x431460 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x4253f0 <kotlin::mm::ThreadData::~ThreadData()+0x50>
               	leaq	232(%r15), %r14
               	movq	232(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x425430 <kotlin::mm::ThreadData::~ThreadData()+0x90>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x431460 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x425420 <kotlin::mm::ThreadData::~ThreadData()+0x80>
               	leaq	168(%r15), %rdi
               	callq	0x425610 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	200(%r15), %r14
               	movq	200(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x425460 <kotlin::mm::ThreadData::~ThreadData()+0xc0>
               	nop
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x425450 <kotlin::mm::ThreadData::~ThreadData()+0xb0>
               	leaq	176(%r15), %r14
               	movq	176(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x425490 <kotlin::mm::ThreadData::~ThreadData()+0xf0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x425480 <kotlin::mm::ThreadData::~ThreadData()+0xe0>
               	leaq	104(%r15), %r14
               	movq	104(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x4254b0 <kotlin::mm::ThreadData::~ThreadData()+0x110>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x4254a0 <kotlin::mm::ThreadData::~ThreadData()+0x100>
               	movq	88(%r15), %rdi
               	movq	96(%r15), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	88(%r15), %rdi
               	leaq	136(%r15), %rax
               	cmpq	%rdi, %rax
               	je	0x4254df <kotlin::mm::ThreadData::~ThreadData()+0x13f>
               	callq	0x413730 <free@plt>
               	movq	64(%r15), %rdi
               	testq	%rdi, %rdi
               	je	0x4254ed <kotlin::mm::ThreadData::~ThreadData()+0x14d>
               	callq	0x413730 <free@plt>
               	leaq	8(%r15), %rdi
               	callq	0x4256d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	40(%r15), %r14
               	movq	40(%r15), %rdi
               	cmpq	%r14, %rdi
               	je	0x425520 <kotlin::mm::ThreadData::~ThreadData()+0x180>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x425510 <kotlin::mm::ThreadData::~ThreadData()+0x170>
               	movq	16(%r15), %rdi
               	addq	$16, %r15
               	cmpq	%r15, %rdi
               	je	0x425540 <kotlin::mm::ThreadData::~ThreadData()+0x1a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r15, %rbx
               	jne	0x425530 <kotlin::mm::ThreadData::~ThreadData()+0x190>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42557e <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 48(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x425570 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x4255a0 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x50>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x425590 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x4255ca <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0x7a>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x4255f0 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()+0xa0>
               	leaq	24(%r15), %rdi
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x42563e <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x425630 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x425660 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x50>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x425650 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42568a <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0x7a>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x4256b0 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()+0xa0>
               	leaq	24(%r15), %rdi
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	leaq	8(%rdi), %rbx
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rbx
               	je	0x4256fe <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x2e>
               	nopl	(%rax)
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 24(%rax)
               	movq	(%rax), %rax
               	cmpq	%rax, %rbx
               	jne	0x4256f0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x20>
               	movq	(%r14), %r12
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	je	0x425720 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x50>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 48(%r12)
               	testb	%al, %al
               	jne	0x425710 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x40>
               	movq	(%r14), %r15
               	movq	8(%r14), %rsi
               	cmpq	%rbx, %rsi
               	je	0x42574a <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0x7a>
               	movq	%r15, %rdi
               	movq	%rbx, %rdx
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	24(%r14), %rax
               	addq	%rax, 16(%r15)
               	movq	$0, 24(%r14)
               	movq	(%r14), %r15
               	leaq	32(%r14), %rdx
               	movq	32(%r14), %rsi
               	cmpq	%rdx, %rsi
               	je	0x425770 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()+0xa0>
               	leaq	24(%r15), %rdi
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	movq	48(%r14), %rax
               	addq	%rax, 40(%r15)
               	movq	$0, 48(%r14)
               	movb	$0, 48(%r12)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movb	259504(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x425874 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	%rdi, %r14
               	movq	8(%rdi), %rax
               	movq	288(%rax), %rdi
               	addq	$72, %rdi
               	callq	0x426110 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>
               	leaq	259426(%rip), %rax      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	movq	%rax, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 247776(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4257ee <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0x5e>
               	leaq	259399(%rip), %rdi      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42587f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xef>
               	movb	$1, 16(%rsp)
               	callq	0x4367f0 <konan::gettid()>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movb	16(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 16(%r14)
               	andb	$1, %bpl
               	movb	259391(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x425846 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xb6>
               	leaq	255456(%rip), %r15      # 0x463e00 <(anonymous namespace)::gSuspensionCondVar>
               	leaq	8(%rsp), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43d7c0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	259342(%rip), %eax      # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x425830 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xa0>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	xchgb	%bpl, 16(%r14)
               	cmpb	$0, 16(%rsp)
               	je	0x425874 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x425874 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xe4>
               	cmpq	$0, 247632(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x42586f <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()+0xdf>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nop

<kotlin::mm::RequestThreadsSuspension()>:
               	pushq	%rbx
               	cmpq	$0, 247583(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4258ab <kotlin::mm::RequestThreadsSuspension()+0x1b>
               	leaq	259206(%rip), %rdi      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4258d4 <kotlin::mm::RequestThreadsSuspension()+0x44>
               	movb	$1, %cl
               	xorl	%eax, %eax
               	lock
               	cmpxchgb	%cl, 259225(%rip)       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	sete	%bl
               	cmpq	$0, 247542(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4258d0 <kotlin::mm::RequestThreadsSuspension()+0x40>
               	leaq	259165(%rip), %rdi      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	168(%rdi), %rax
               	movq	8(%rsi), %rcx
               	cmpq	%rcx, %rax
               	je	0x42593e <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)+0x4e>
               	leaq	200(%rbx), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43d1c4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 216(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%r14), %r14
               	addq	$-1, 192(%rbx)
               	movq	%r14, %rdi
               	callq	0x43d1dc <std::__detail::_List_node_base::_M_unhook()>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413730 <free@plt>
               	nop

<kotlin::mm::SuspendIfRequestedSlowPath()>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	movl	$328, %edi              # imm = 0x148
               	addq	-64(%rax), %rdi
               	popq	%rax
               	jmp	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nop

<ExceptionObjHolder::Throw(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movl	$16, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	movq	%rax, %rdi
               	movq	%r14, %rsi
               	callq	0x4259c0 <(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>
               	leaq	241354(%rip), %rsi      # 0x460870 <typeinfo for (anonymous namespace)::ExceptionObjHolderImpl>
               	leaq	163(%rip), %rdx         # 0x425a50 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::ExceptionObjHolderImpl(ObjHeader*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r12
               	leaq	241346(%rip), %rax      # 0x460898 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	176(%rbx), %r13
               	leaq	184(%rbx), %r15
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%r14, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43d1c4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 200(%rbx)
               	movq	192(%rbx), %rax
               	leaq	16(%rax), %rcx
               	movq	%rax, 32(%rax)
               	movq	%rcx, 8(%r12)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	241209(%rip), %rax      # 0x460898 <vtable for (anonymous namespace)::ExceptionObjHolderImpl+0x10>
               	movq	%rax, (%rdi)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	leaq	176(%r14), %rax
               	movq	8(%rbx), %rbx
               	movq	8(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x425abc <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()+0x6c>
               	leaq	208(%r14), %r15
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rbx, 16(%rax)
               	movq	%rax, %rdi
               	movq	%r15, %rsi
               	callq	0x43d1c4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 224(%r14)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	16(%rbx), %rbx
               	addq	$-1, 200(%r14)
               	movq	%rbx, %rdi
               	callq	0x43d1dc <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413730 <free@plt>
               	nopl	(%rax)

<(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x425a50 <(anonymous namespace)::ExceptionObjHolderImpl::~ExceptionObjHolderImpl()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>
               	nopw	%cs:(%rax,%rax)

<InitAndRegisterGlobal>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	16(%rbx), %r13
               	leaq	24(%rbx), %r12
               	movl	$1, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%r15, 16(%rax)
               	movq	%r13, 24(%rax)
               	movq	%rax, %rdi
               	movq	%r12, %rsi
               	callq	0x43d1c4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 40(%rbx)
               	movq	32(%rbx), %rax
               	movq	%rax, 32(%rax)
               	testq	%r14, %r14
               	je	0x425b61 <InitAndRegisterGlobal+0x61>
               	movq	%r14, (%r15)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<AddTLSRecord>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, (%rsp)
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	104(%rdi), %rbp
               	movq	%rsi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x425baf <AddTLSRecord+0x3f>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rbx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x425bc5 <AddTLSRecord+0x55>
               	jmp	0x425c24 <AddTLSRecord+0xb4>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ebx
               	movq	96(%r15), %r14
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x425c24 <AddTLSRecord+0xb4>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x425c1b <AddTLSRecord+0xab>
               	nop
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x425c24 <AddTLSRecord+0xb4>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x425c00 <AddTLSRecord+0x90>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x425c0b <AddTLSRecord+0x9b>
               	jmp	0x425c24 <AddTLSRecord+0xb4>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x425c24 <AddTLSRecord+0xb4>
               	cmpq	%rcx, %r13
               	jne	0x425bd0 <AddTLSRecord+0x60>
               	testq	%rdi, %rdi
               	jne	0x425eac <AddTLSRecord+0x33c>
               	jmp	0x425c24 <AddTLSRecord+0xb4>
               	testq	%rsi, %rsi
               	jne	0x425eac <AddTLSRecord+0x33c>
               	movl	156(%r15), %r12d
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rcx
               	movq	%r13, 8(%rax)
               	movq	(%rsp), %rax
               	shlq	$32, %rax
               	orq	%r12, %rax
               	movq	%rcx, %r12
               	movq	%rax, 16(%rcx)
               	movq	(%r14,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x425cb9 <AddTLSRecord+0x149>
               	movq	(%rax), %rsi
               	cmpq	%r13, 8(%rsi)
               	je	0x425dba <AddTLSRecord+0x24a>
               	nopl	(%rax)
               	movq	%rsi, %rdi
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	je	0x425cb9 <AddTLSRecord+0x149>
               	movq	8(%rsi), %rcx
               	movq	%rcx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x425ca0 <AddTLSRecord+0x130>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	cmpq	%rbx, %rdx
               	je	0x425cab <AddTLSRecord+0x13b>
               	jmp	0x425cb9 <AddTLSRecord+0x149>
               	nopl	(%rax)
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	cmpq	%rbx, %rdx
               	jne	0x425cb9 <AddTLSRecord+0x149>
               	cmpq	%rcx, %r13
               	jne	0x425c70 <AddTLSRecord+0x100>
               	testq	%rdi, %rdi
               	jne	0x425dc3 <AddTLSRecord+0x253>
               	leaq	128(%r15), %rdi
               	movq	120(%r15), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rsi
               	callq	0x43dcfa <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x425cec <AddTLSRecord+0x17c>
               	movq	96(%r15), %rbp
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x425e35 <AddTLSRecord+0x2c5>
               	jmp	0x425e5a <AddTLSRecord+0x2ea>
               	movq	%rdx, %r14
               	cmpq	$1, %rdx
               	je	0x425dd0 <AddTLSRecord+0x260>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	je	0x425df7 <AddTLSRecord+0x287>
               	leaq	112(%r15), %rsi
               	xorl	%edi, %edi
               	jmp	0x425d5d <AddTLSRecord+0x1ed>
               	nopl	(%rax,%rax)
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x425df7 <AddTLSRecord+0x287>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x425d90 <AddTLSRecord+0x220>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x425d40 <AddTLSRecord+0x1d0>
               	jmp	0x425d9f <AddTLSRecord+0x22f>
               	nop
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x425d40 <AddTLSRecord+0x1d0>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x425d51 <AddTLSRecord+0x1e1>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x425d51 <AddTLSRecord+0x1e1>
               	testq	%rsi, %rsi
               	je	0x425cb9 <AddTLSRecord+0x149>
               	movq	%r12, %rdi
               	callq	0x413730 <free@plt>
               	jmp	0x425ea1 <AddTLSRecord+0x331>
               	leaq	144(%r15), %rbp
               	movq	$0, 144(%r15)
               	movq	112(%r15), %rbx
               	movq	$0, 112(%r15)
               	testq	%rbx, %rbx
               	jne	0x425d30 <AddTLSRecord+0x1c0>
               	movq	96(%r15), %rdi
               	leaq	144(%r15), %rax
               	cmpq	%rax, %rdi
               	je	0x425e0c <AddTLSRecord+0x29c>
               	callq	0x413730 <free@plt>
               	movq	%r14, 104(%r15)
               	movq	%rbp, 96(%r15)
               	movq	%r13, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x425e46 <AddTLSRecord+0x2d6>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x425e5a <AddTLSRecord+0x2ea>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rbx,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x425e9c <AddTLSRecord+0x32c>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movq	(%rbp,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x425e35 <AddTLSRecord+0x2c5>
               	leaq	112(%r15), %rcx
               	movq	112(%r15), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 112(%r15)
               	testq	%rax, %rax
               	je	0x425e97 <AddTLSRecord+0x327>
               	movq	104(%r15), %rsi
               	movq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x425e8a <AddTLSRecord+0x31a>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x425e8e <AddTLSRecord+0x31e>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	96(%r15), %rbp
               	movq	%rcx, (%rbp,%rbx,8)
               	addq	$1, 120(%r15)
               	movq	(%rsp), %rax
               	addl	%eax, 156(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<LookupTLS>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	%edi, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r9
               	leaq	252887(%rip), %r8       # 0x463ac8 <__KonanTlsKey>
               	cmpq	%r8, 160(%r9)
               	je	0x425f2b <LookupTLS+0x5b>
               	movq	104(%r9), %rbx
               	movq	%r8, %rax
               	orq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x425f37 <LookupTLS+0x67>
               	leaq	252855(%rip), %rax      # 0x463ac8 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rdx, %rcx
               	movq	96(%r9), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x425f51 <LookupTLS+0x81>
               	jmp	0x425fac <LookupTLS+0xdc>
               	addl	168(%r9), %r14d
               	jmp	0x425fc8 <LookupTLS+0xf8>
               	leaq	252810(%rip), %rax      # 0x463ac8 <__KonanTlsKey>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%edx, %ecx
               	movq	96(%r9), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x425fac <LookupTLS+0xdc>
               	movq	(%rax), %rbp
               	cmpq	%r8, 8(%rbp)
               	je	0x425fa7 <LookupTLS+0xd7>
               	nop
               	movq	%rbp, %rdi
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x425fac <LookupTLS+0xdc>
               	movq	8(%rbp), %rsi
               	movq	%rsi, %rax
               	orq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x425f90 <LookupTLS+0xc0>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rbx
               	cmpq	%rcx, %rdx
               	je	0x425f9b <LookupTLS+0xcb>
               	jmp	0x425fac <LookupTLS+0xdc>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ebx
               	cmpq	%rcx, %rdx
               	jne	0x425fac <LookupTLS+0xdc>
               	cmpq	%r8, %rsi
               	jne	0x425f60 <LookupTLS+0x90>
               	testq	%rdi, %rdi
               	jne	0x425fae <LookupTLS+0xde>
               	jmp	0x425fac <LookupTLS+0xdc>
               	testq	%rbp, %rbp
               	jne	0x425fae <LookupTLS+0xde>
               	xorl	%ebp, %ebp
               	movq	8(%rbp), %rax
               	movq	%rax, 160(%r9)
               	movq	16(%rbp), %rax
               	movq	%rax, 168(%r9)
               	addl	16(%rbp), %r14d
               	movslq	%r14d, %rax
               	shlq	$3, %rax
               	addq	72(%r9), %rax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<Kotlin_processObjectInMark>:
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %r8
               	movl	40(%r8), %r9d
               	testl	%r9d, %r9d
               	jle	0x42603e <Kotlin_processObjectInMark+0x5e>
               	xorl	%edx, %edx
               	jmp	0x426010 <Kotlin_processObjectInMark+0x30>
               	nop
               	movl	40(%r8), %r9d
               	addq	$1, %rdx
               	movslq	%r9d, %rax
               	cmpq	%rax, %rdx
               	jge	0x42603e <Kotlin_processObjectInMark+0x5e>
               	movq	32(%r8), %rcx
               	movslq	(%rcx,%rdx,4), %rcx
               	movq	(%rcx,%rsi), %rcx
               	testq	%rcx, %rcx
               	je	0x426004 <Kotlin_processObjectInMark+0x24>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x426004 <Kotlin_processObjectInMark+0x24>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x426000 <Kotlin_processObjectInMark+0x20>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	jmp	0x426000 <Kotlin_processObjectInMark+0x20>
               	retq
               	nop

<Kotlin_processArrayInMark>:
               	movslq	8(%rsi), %rdx
               	testq	%rdx, %rdx
               	je	0x4260f6 <Kotlin_processArrayInMark+0xb6>
               	leaq	16(%rsi), %rcx
               	leaq	-8(,%rdx,8), %r8
               	testb	$8, %r8b
               	jne	0x426086 <Kotlin_processArrayInMark+0x46>
               	movq	(%rcx), %rcx
               	testq	%rcx, %rcx
               	je	0x426082 <Kotlin_processArrayInMark+0x42>
               	movq	(%rcx), %rax
               	testb	$3, %al
               	jne	0x426082 <Kotlin_processArrayInMark+0x42>
               	movq	(%rdi), %r9
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%r9, -8(%rcx)
               	jne	0x426082 <Kotlin_processArrayInMark+0x42>
               	addq	$-8, %rcx
               	movq	%rcx, (%rdi)
               	leaq	24(%rsi), %rcx
               	testq	%r8, %r8
               	je	0x4260f6 <Kotlin_processArrayInMark+0xb6>
               	leaq	(%rsi,%rdx,8), %r8
               	addq	$16, %r8
               	jmp	0x4260a9 <Kotlin_processArrayInMark+0x69>
               	nopl	(%rax)
               	addq	$16, %rcx
               	cmpq	%r8, %rcx
               	je	0x4260f6 <Kotlin_processArrayInMark+0xb6>
               	movq	(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x4260d0 <Kotlin_processArrayInMark+0x90>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x4260d0 <Kotlin_processArrayInMark+0x90>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x4260d0 <Kotlin_processArrayInMark+0x90>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movq	8(%rcx), %rsi
               	testq	%rsi, %rsi
               	je	0x4260a0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rsi), %rax
               	testb	$3, %al
               	jne	0x4260a0 <Kotlin_processArrayInMark+0x60>
               	movq	(%rdi), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, -8(%rsi)
               	jne	0x4260a0 <Kotlin_processArrayInMark+0x60>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	jmp	0x4260a0 <Kotlin_processArrayInMark+0x60>
               	retq
               	nopw	(%rax,%rax)

<Kotlin_processEmptyObjectInMark>:
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdi, %r14
               	leaq	257124(%rip), %rax      # 0x464d88 <(anonymous namespace)::markingMutex>
               	movq	%rax, (%rsp)
               	movb	$0, 8(%rsp)
               	cmpq	$0, 245379(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x42614b <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x3b>
               	leaq	257098(%rip), %rdi      # 0x464d88 <(anonymous namespace)::markingMutex>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426267 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x157>
               	movb	$1, 8(%rsp)
               	movb	257114(%rip), %al       # 0x464db0 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x426238 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x128>
               	movb	24(%r14), %bpl
               	movb	$1, %al
               	xchgb	%al, 24(%r14)
               	movq	8(%r14), %rbx
               	leaq	8(%rbx), %rdi
               	callq	0x4256d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	168(%rbx), %rdi
               	callq	0x425610 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	224(%rbx), %rdi
               	callq	0x425550 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	288(%rbx), %rdi
               	addq	$112, %rdi
               	callq	0x426bd0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movb	257037(%rip), %al       # 0x464db0 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	je	0x4261d6 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xc6>
               	leaq	256934(%rip), %r15      # 0x464d58 <(anonymous namespace)::markingCondVar>
               	movq	%rsp, %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x43d7c0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movzbl	256990(%rip), %eax      # 0x464db0 <(anonymous namespace)::markingRequested (.0.0)>
               	testb	$1, %al
               	jne	0x4261c0 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xb0>
               	andb	$1, %bpl
               	cmpb	$0, 8(%rsp)
               	je	0x42626e <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x15e>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x426202 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xf2>
               	cmpq	$0, 245186(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4261fd <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0xed>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	256951(%rip), %rbx      # 0x464dc0 <(anonymous namespace)::markingEpoch (.0)>
               	leaq	256936(%rip), %rax      # 0x464db8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 16(%rsp)
               	movq	8(%r14), %rdx
               	leaq	16(%rsp), %r15
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x4267f0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x426ca0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	xchgb	%bpl, 24(%r14)
               	cmpb	$0, 8(%rsp)
               	je	0x42625c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x42625c <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x14c>
               	cmpq	$0, 245096(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x426257 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x147>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movl	$1, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	xchgb	%bpl, 24(%r14)
               	movq	%rax, %rbx
               	cmpb	$0, 8(%rsp)
               	je	0x4262a3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4262a3 <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x193>
               	cmpq	$0, 245025(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x42629e <kotlin::gc::ConcurrentMarkAndSweep::ThreadData::OnSuspendForGC()+0x18e>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 8(%rsp)
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	cmpq	$0, 244956(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4262f2 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x32>
               	leaq	256675(%rip), %rdi      # 0x464d88 <(anonymous namespace)::markingMutex>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4267c1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x501>
               	xorl	%eax, %eax
               	xchgb	%al, 256694(%rip)       # 0x464db0 <(anonymous namespace)::markingRequested (.0.0)>
               	leaq	256695(%rip), %rax      # 0x464db8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	movq	%rax, 336(%r15)
               	cmpq	$0, 244904(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x426326 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x66>
               	leaq	252415(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x4267c8 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x508>
               	addq	$336, %r15              # imm = 0x150
               	movq	252372(%rip), %rbp      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	jmp	0x426347 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x87>
               	nopl	(%rax)
               	movq	352(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x4263a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xe0>
               	movq	296(%rbp), %rax
               	movzbl	96(%rax), %eax
               	testb	$1, %al
               	jne	0x426340 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	leaq	8(%rbp), %rbx
               	leaq	16(%rbp), %rdi
               	callq	0x4256d0 <kotlin::MultiSourceQueue<ObjHeader**, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader**> >::Producer::Publish()>
               	leaq	176(%rbp), %rdi
               	callq	0x425610 <kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Producer::Publish()>
               	leaq	232(%rbp), %rdi
               	callq	0x425550 <kotlin::MultiSourceQueue<kotlin::mm::ExtraObjectData, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::ObjectPoolAllocator<kotlin::mm::ExtraObjectData> >::Producer::Publish()>
               	movq	296(%rbp), %rdi
               	addq	$112, %rdi
               	callq	0x426bd0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	callq	0x4267f0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>
               	jmp	0x426340 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x80>
               	cmpq	$0, 244752(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4263b6 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0xf6>
               	leaq	252263(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movb	$1, %al
               	xchgb	%al, 252405(%rip)       # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	je	0x4263e1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x121>
               	nopl	(%rax,%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 252379(%rip)       # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x4263d0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x110>
               	leaq	8(%rsp), %r12
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	movq	252320(%rip), %rbp      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	leaq	252313(%rip), %r13      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rbp
               	je	0x4264a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1e0>
               	movq	%rbp, %rsi
               	jmp	0x426444 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x184>
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rbx
               	addq	$-1, 252268(%rip)       # 0x463d98 <kotlin::mm::GlobalData::instance_+0xa8>
               	movq	%rbx, %rdi
               	callq	0x43d1dc <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rsi
               	cmpq	%r13, %rbp
               	je	0x42647a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1ba>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x426420 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x160>
               	cmpq	%rsi, %r12
               	je	0x42643c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
               	movq	(%rsi), %rdx
               	cmpq	%r12, %rdx
               	je	0x42643c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
               	movq	%r12, %rdi
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	addq	$1, 24(%rsp)
               	addq	$-1, 252216(%rip)       # 0x463db0 <kotlin::mm::GlobalData::instance_+0xc0>
               	jmp	0x42643c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
               	movq	252191(%rip), %rdi      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	cmpq	%r13, %rdi
               	je	0x4264a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1e0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	cmpq	%r13, %rbx
               	jne	0x426490 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1d0>
               	movq	8(%rsp), %rax
               	cmpq	%r12, %rax
               	je	0x4264e5 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x225>
               	movq	%rax, 252143(%rip)      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	16(%rsp), %rax
               	movq	%rax, 252139(%rip)      # 0x463da8 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, (%rax)
               	movq	252121(%rip), %rax      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	movq	%r13, 8(%rax)
               	movq	24(%rsp), %rax
               	movq	%r12, 16(%rsp)
               	movq	%r12, 8(%rsp)
               	movq	$0, 24(%rsp)
               	jmp	0x4264f5 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x235>
               	movq	%r13, 252092(%rip)      # 0x463da8 <kotlin::mm::GlobalData::instance_+0xb8>
               	movq	%r13, 252077(%rip)      # 0x463da0 <kotlin::mm::GlobalData::instance_+0xb0>
               	xorl	%eax, %eax
               	movq	%rax, 252084(%rip)      # 0x463db0 <kotlin::mm::GlobalData::instance_+0xc0>
               	movb	$0, 252085(%rip)        # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$1, %bl
               	movb	$1, %al
               	xchgb	%al, 252019(%rip)       # 0x463d80 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	je	0x426531 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x271>
               	nopw	%cs:(%rax,%rax)
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 251987(%rip)       # 0x463d80 <kotlin::mm::GlobalData::instance_+0x90>
               	testb	%al, %al
               	jne	0x426520 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x260>
               	xchgb	%bl, 252033(%rip)       # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%bl, %bl
               	je	0x426551 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x291>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 252011(%rip)       # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	testb	%al, %al
               	jne	0x426540 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x280>
               	movq	251896(%rip), %rsi      # 0x463d50 <kotlin::mm::GlobalData::instance_+0x60>
               	xorl	%eax, %eax
               	movq	251943(%rip), %rdx      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	251936(%rip), %r12      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	leaq	251873(%rip), %r13      # 0x463d50 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rsi, %rbx
               	movl	%eax, %ecx
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %ecx
               	je	0x4265b2 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2f2>
               	cmpl	$1, %ecx
               	je	0x426590 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2d0>
               	testl	%ecx, %ecx
               	jne	0x426580 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2c0>
               	jmp	0x4265a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2e0>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x426580 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2c0>
               	jmp	0x426694 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3d4>
               	nop
               	movl	$1, %eax
               	movq	%rdx, %rsi
               	cmpq	%r13, %rbx
               	je	0x42656f <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2af>
               	jmp	0x426696 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3d6>
               	xorpd	%xmm0, %xmm0
               	movapd	%xmm0, 32(%rsp)
               	movb	$0, 251893(%rip)        # 0x463db8 <kotlin::mm::GlobalData::instance_+0xc8>
               	movb	$0, 251830(%rip)        # 0x463d80 <kotlin::mm::GlobalData::instance_+0x90>
               	movb	$1, %al
               	xchgb	%al, 251160(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4265f1 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x331>
               	nopw	(%rax,%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 251133(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4265e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x320>
               	cmpb	$0, 251136(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x42661a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x35a>
               	cmpq	%r14, 251119(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	jne	0x42661a <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x35a>
               	leaq	251110(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpb	$0, 128(%rax)
               	je	0x42663c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x37c>
               	movupd	112(%rax), %xmm0
               	jmp	0x426651 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x391>
               	cmpb	$0, 251351(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x42665c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	cmpq	%r14, 251334(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x42665c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x39c>
               	leaq	251325(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	cmpb	$0, 128(%rax)
               	jne	0x426613 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x353>
               	xorpd	%xmm0, %xmm0
               	movupd	%xmm0, 112(%rax)
               	movupd	%xmm0, 96(%rax)
               	movb	$1, 128(%rax)
               	paddq	32(%rsp), %xmm0
               	movdqu	%xmm0, 112(%rax)
               	movb	$0, 251015(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	leaq	255726(%rip), %rdi      # 0x464d58 <(anonymous namespace)::markingCondVar>
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	cmpq	$0, 244033(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x426685 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3c5>
               	leaq	255752(%rip), %rdi      # 0x464d88 <(anonymous namespace)::markingMutex>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	%eax, %ecx
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 32(%rsp)
               	testl	%ecx, %ecx
               	je	0x426730 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x470>
               	cmpl	$1, %ecx
               	jne	0x4267cf <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x50f>
               	movq	16(%rbx), %rsi
               	movq	%r15, %rdi
               	callq	0x426b80 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4266e4 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x424>
               	movdqa	32(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, 32(%rsp)
               	movq	(%rbx), %rdx
               	movq	251546(%rip), %rax      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rdx, %rbx
               	movl	$1, %ecx
               	nopw	%cs:(%rax,%rax)
               	cmpl	$2, %ecx
               	je	0x4265bc <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2fc>
               	cmpl	$1, %ecx
               	je	0x426714 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x454>
               	testl	%ecx, %ecx
               	jne	0x426700 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x440>
               	jmp	0x426723 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x463>
               	movl	$2, %ecx
               	cmpq	%r12, %rbx
               	je	0x426700 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x440>
               	jmp	0x4267b7 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4f7>
               	movq	%rax, %rdx
               	cmpq	%r13, %rbx
               	je	0x4266ee <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x42e>
               	jmp	0x4266a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movq	16(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	%r15, %rdi
               	callq	0x426b80 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x426761 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4a1>
               	movdqa	32(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, 32(%rsp)
               	movq	(%rbx), %rsi
               	xorl	%ecx, %ecx
               	movq	251419(%rip), %rax      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rsi, %rbx
               	movl	%ecx, %edx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpl	$2, %edx
               	je	0x4265bc <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x2fc>
               	cmpl	$1, %edx
               	je	0x426794 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4d4>
               	testl	%edx, %edx
               	jne	0x426780 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c0>
               	jmp	0x4267a3 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4e3>
               	movl	$2, %edx
               	cmpq	%r12, %rbx
               	je	0x426780 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4c0>
               	jmp	0x4266a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movl	$1, %ecx
               	movq	%rax, %rsi
               	cmpq	%r13, %rbx
               	je	0x42676d <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x4ad>
               	movl	%edx, %ecx
               	jmp	0x4266a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movl	$1, %ecx
               	jmp	0x4266a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x3e0>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	leaq	125272(%rip), %rdx      # 0x44512e <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x4368d0 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nop

<void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r12
               	movq	%rsi, %r15
               	movq	%rdi, %r14
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	288(%r12), %rax
               	movq	$0, 40(%rax)
               	movq	$0, 56(%rax)
               	movq	(%rax), %rcx
               	movq	8(%rcx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%rax), %rcx
               	movl	(%rcx), %ecx
               	movslq	%ecx, %rcx
               	movq	%rcx, 64(%rax)
               	movq	280(%r12), %rdx
               	xorl	%ecx, %ecx
               	testq	%rdx, %rdx
               	je	0x4268b7 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xc7>
               	movslq	16(%rdx), %rax
               	leaq	(%rdx,%rax,8), %rsi
               	leaq	(,%rax,8), %rdi
               	movslq	20(%rdx), %rbp
               	leaq	(%rsi,%rbp,8), %rbx
               	addq	$24, %rbx
               	subq	%rdi, %rbx
               	addq	$-24, %rbx
               	leaq	(%rdx,%rax,8), %r13
               	addq	$24, %r13
               	testq	%rdx, %rdx
               	je	0x4268c5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	nop
               	cmpq	%rbx, %r13
               	jb	0x4268c5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	movq	8(%rdx), %rdx
               	testq	%rdx, %rdx
               	je	0x4268be <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xce>
               	movslq	16(%rdx), %rax
               	leaq	(%rdx,%rax,8), %r13
               	addq	$24, %r13
               	shlq	$3, %rax
               	movslq	20(%rdx), %rsi
               	leaq	-24(,%rsi,8), %rbx
               	addq	%r13, %rbx
               	subq	%rax, %rbx
               	cmpq	%rbx, %r13
               	jae	0x426885 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x95>
               	jmp	0x4268c5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	jmp	0x4268c5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
               	xorl	%ebx, %ebx
               	xorl	%r13d, %r13d
               	xorl	%edx, %edx
               	movq	64(%r12), %rsi
               	movq	72(%r12), %rdi
               	movl	%ecx, %eax
               	movq	%rdx, %rbp
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x426ab5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2c5>
               	cmpl	$1, %eax
               	je	0x426910 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x120>
               	testl	%eax, %eax
               	jne	0x4268e0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf0>
               	testq	%rbp, %rbp
               	jne	0x42691d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x12d>
               	movl	$1, %ecx
               	movq	%rsi, %rdx
               	testq	%r13, %r13
               	je	0x4268cf <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xdf>
               	jmp	0x42691d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x12d>
               	nopl	(%rax)
               	movl	$2, %ecx
               	movq	%rbp, %rdx
               	cmpq	%rbp, %rdi
               	je	0x4268cf <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xdf>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	testl	%eax, %eax
               	je	0x4269cc <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1dc>
               	cmpl	$1, %eax
               	jne	0x426b61 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x371>
               	movq	(%rbp), %rsi
               	movq	%r15, %rdi
               	callq	0x426b80 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x426968 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x178>
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movdqa	%xmm1, (%rsp)
               	addq	$8, %rbp
               	movq	64(%r12), %rcx
               	movq	72(%r12), %rdx
               	movq	%rbp, %rdi
               	movq	%rbp, %rsi
               	movq	%rdi, %rbp
               	movl	$1, %eax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x426ac5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
               	cmpl	$1, %eax
               	je	0x4269a4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1b4>
               	testl	%eax, %eax
               	jne	0x426990 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1a0>
               	jmp	0x4269b3 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1c3>
               	movl	$2, %eax
               	cmpq	%rdx, %rsi
               	je	0x426990 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1a0>
               	jmp	0x426aab <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2bb>
               	testq	%rbp, %rbp
               	jne	0x426926 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movq	%rcx, %rdi
               	movq	%rcx, %rsi
               	testq	%r13, %r13
               	je	0x42697c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x18c>
               	jmp	0x426926 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movq	(%r13), %rsi
               	movq	%r15, %rdi
               	callq	0x426b80 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>
               	testb	%al, %al
               	je	0x4269f8 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x208>
               	movdqa	(%rsp), %xmm1
               	movq	%xmm1, %rax
               	addq	$1, %rax
               	movq	%rax, %xmm0
               	movsd	%xmm0, %xmm1            # xmm1 = xmm0[0],xmm1[1]
               	movapd	%xmm1, (%rsp)
               	addq	$8, %r13
               	testq	%rbp, %rbp
               	je	0x426a51 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rbx, %r13
               	jb	0x426a51 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x426a4a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x25a>
               	movslq	16(%rbp), %rax
               	leaq	24(,%rax,8), %r13
               	addq	%rbp, %r13
               	shlq	$3, %rax
               	movslq	20(%rbp), %rcx
               	leaq	-24(,%rcx,8), %rbx
               	addq	%r13, %rbx
               	subq	%rax, %rbx
               	cmpq	%rbx, %r13
               	jae	0x426a15 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x225>
               	jmp	0x426a51 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
               	xorl	%r13d, %r13d
               	xorl	%ebx, %ebx
               	xorl	%ebp, %ebp
               	movq	64(%r12), %rcx
               	movq	72(%r12), %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	movl	%esi, %eax
               	movq	%rdi, %rbp
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpl	$2, %eax
               	je	0x426ac5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
               	cmpl	$1, %eax
               	je	0x426a99 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2a9>
               	testl	%eax, %eax
               	jne	0x426a70 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x280>
               	testq	%rbp, %rbp
               	jne	0x426926 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movl	$1, %esi
               	movq	%rcx, %rdi
               	testq	%r13, %r13
               	je	0x426a60 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	jmp	0x426926 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movl	$2, %esi
               	movq	%rbp, %rdi
               	cmpq	%rbp, %rdx
               	je	0x426a60 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
               	jmp	0x426926 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	movl	$1, %eax
               	jmp	0x426926 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, (%rsp)
               	jmp	0x426ac5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 249885(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426ac0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d0>
               	cmpb	$0, 249888(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x426b03 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x313>
               	cmpq	%r14, 249871(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	jne	0x426b03 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x313>
               	leaq	249862(%rip), %rcx      # 0x463af0 <(anonymous namespace)::current>
               	pshufd	$78, (%rsp), %xmm0      # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	je	0x426b2f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x33f>
               	movdqu	(%rax), %xmm1
               	jmp	0x426b43 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x353>
               	cmpb	$0, 250094(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x426b4b <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x35b>
               	cmpq	%r14, 250077(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x426b4b <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x35b>
               	leaq	250068(%rip), %rcx      # 0x463bf0 <(anonymous namespace)::last>
               	pshufd	$78, (%rsp), %xmm0      # xmm0 = mem[2,3,0,1]
               	leaq	96(%rcx), %rax
               	cmpb	$0, 128(%rcx)
               	jne	0x426afd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x30d>
               	pxor	%xmm1, %xmm1
               	movdqu	%xmm1, 16(%rax)
               	movdqu	%xmm1, (%rax)
               	movb	$1, 128(%rcx)
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, (%rax)
               	movb	$0, 249752(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	124358(%rip), %rdx      # 0x44512e <typeinfo name for kotlin::gc::GCSchedulerData+0xff5>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x4368d0 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)>:
               	pushq	%rbx
               	cmpq	$2, %rsi
               	jae	0x426b8d <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0xd>
               	xorl	%ebx, %ebx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	(%rsi), %rax
               	testb	$3, %al
               	je	0x426ba5 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x25>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movb	$1, %bl
               	callq	*104(%rax)
               	jmp	0x426b89 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	movq	(%rdi), %rcx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	movb	$1, %bl
               	jne	0x426b89 <bool kotlin::gc::internal::collectRoot<kotlin::gc::internal::MarkTraits>(kotlin::gc::internal::MarkTraits::MarkQueue&, ObjHeader*)+0x9>
               	addq	$-8, %rsi
               	movq	%rsi, (%rdi)
               	movl	%ebx, %eax
               	popq	%rbx
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	cmpq	$0, 24(%rdi)
               	je	0x426c67 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x97>
               	movq	%rdi, %r15
               	movq	(%rdi), %rbx
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	je	0x426bfe <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x2e>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 32(%rbx)
               	testb	%al, %al
               	jne	0x426bf0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x20>
               	movq	(%r15), %rax
               	cmpq	$0, (%rax)
               	je	0x426c0b <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x3b>
               	movq	8(%rax), %rax
               	movq	24(%r15), %rcx
               	movq	$0, 24(%r15)
               	movq	(%rax), %r14
               	movq	%rcx, (%rax)
               	testq	%r14, %r14
               	je	0x426c32 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()+0x62>
               	movq	%r14, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%r14, %rdi
               	callq	0x431460 <mi_free>
               	movq	(%r15), %rax
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%rax)
               	movq	$0, 32(%r15)
               	movdqu	40(%r15), %xmm0
               	movdqu	16(%rax), %xmm1
               	paddq	%xmm0, %xmm1
               	movdqu	%xmm1, 16(%rax)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 40(%r15)
               	movb	$0, 32(%rbx)
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x426c8f <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()+0x1f>
               	movq	%rbx, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r15
               	movq	%rdi, 16(%rsp)
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	(%r15), %rax
               	leaq	254195(%rip), %r12      # 0x464db8 <kotlin::intrusive_forward_list<kotlin::gc::ConcurrentMarkAndSweep::ObjectData, kotlin::DefaultIntrusiveForwardListTraits<kotlin::gc::ConcurrentMarkAndSweep::ObjectData> >::tailStorage_>
               	pxor	%xmm1, %xmm1
               	jmp	0x426d13 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
               	movl	%ebx, %ebx
               	addq	$15, %rbx
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	callq	*104(%rax)
               	andq	$-8, %rbx
               	addq	$15, %rbx
               	andq	$-8, %rbx
               	addq	%rbx, %r14
               	movq	%r14, %xmm0
               	addq	$2, %r13
               	movq	%r13, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	(%r15), %rax
               	cmpq	%r12, %rax
               	je	0x426e15 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x175>
               	movq	(%rax), %rcx
               	movq	%rcx, (%r15)
               	testq	%rax, %rax
               	je	0x426e15 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x175>
               	leaq	8(%rax), %rbx
               	movq	8(%rax), %rcx
               	andq	$-4, %rcx
               	movq	(%rcx), %rcx
               	movslq	20(%rcx), %rbp
               	testq	%rbp, %rbp
               	movdqa	%xmm1, (%rsp)
               	js	0x426d50 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
               	movl	%ebp, %ebp
               	addq	$15, %rbp
               	jmp	0x426d62 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc2>
               	addq	$-8, %rax
               	movl	24(%rax), %eax
               	negq	%rbp
               	imulq	%rax, %rbp
               	addq	$31, %rbp
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	*104(%rax)
               	andq	$-8, %rbp
               	addq	$15, %rbp
               	andq	$-8, %rbp
               	movdqa	(%rsp), %xmm1
               	pshufd	$78, %xmm1, %xmm0       # xmm0 = xmm1[2,3,0,1]
               	movq	%xmm0, %r14
               	addq	%rbp, %r14
               	movq	%r14, %xmm0
               	movq	%xmm1, %r13
               	leaq	1(%r13), %rax
               	movq	%rax, %xmm1
               	punpcklqdq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0]
               	movq	(%rbx), %rax
               	andq	$-4, %rax
               	je	0x426d10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	cmpq	%rax, (%rax)
               	je	0x426d10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	16(%rax), %rsi
               	testb	$1, %sil
               	je	0x426d10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	andq	$-2, %rsi
               	je	0x426d10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	xorl	%eax, %eax
               	movl	$1, %ecx
               	lock
               	cmpxchgq	%rcx, -8(%rsi)
               	jne	0x426d10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x70>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movslq	20(%rax), %rbx
               	testq	%rbx, %rbx
               	jns	0x426ccb <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
               	movl	8(%rsi), %eax
               	negq	%rbx
               	imulq	%rax, %rbx
               	addq	$31, %rbx
               	jmp	0x426cd1 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x31>
               	movdqa	%xmm1, (%rsp)
               	movb	$1, %al
               	xchgb	%al, 249032(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x426e41 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
               	nopw	(%rax,%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 249005(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426e30 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x190>
               	cmpb	$0, 249008(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	movq	16(%rsp), %rax
               	je	0x426e7a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	cmpq	%rax, 248986(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	jne	0x426e7a <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1da>
               	leaq	248977(%rip), %rcx      # 0x463af0 <(anonymous namespace)::current>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	je	0x426ea8 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x208>
               	movdqu	(%rax), %xmm0
               	jmp	0x426eb7 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x217>
               	cmpb	$0, 249207(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x426ebf <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	cmpq	%rax, 249190(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x426ebf <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x21f>
               	leaq	249181(%rip), %rcx      # 0x463bf0 <(anonymous namespace)::last>
               	leaq	136(%rcx), %rax
               	cmpb	$0, 152(%rcx)
               	movdqa	(%rsp), %xmm1
               	jne	0x426e74 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1d4>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$1, 152(%rcx)
               	paddq	%xmm1, %xmm0
               	movdqu	%xmm0, (%rax)
               	movb	$0, 248868(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<GCStateHolder::schedule()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	cmpq	$0, 241849(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x426f0d <GCStateHolder::schedule()+0x1d>
               	movq	%rbx, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x426f58 <GCStateHolder::schedule()+0x68>
               	movq	40(%rbx), %rax
               	movq	168(%rbx), %r14
               	cmpq	%rax, %r14
               	jg	0x426f3b <GCStateHolder::schedule()+0x4b>
               	addq	$1, %rax
               	movq	%rax, 168(%rbx)
               	leaq	184(%rbx), %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	movq	168(%rbx), %r14
               	cmpq	$0, 241781(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x426f4d <GCStateHolder::schedule()+0x5d>
               	movq	%rbx, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	nop

<kotlin::ThreadStateGuard::~ThreadStateGuard()>:
               	testq	%rdi, %rdi
               	je	0x426f80 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
               	movl	%esi, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%esi, %esi
               	jne	0x426f80 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
               	cmpl	$1, %eax
               	jne	0x426f80 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
               	movb	253396(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x426f81 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x21>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x426fa7 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x426fb0 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x426fad <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	235923(%rip), %rax      # 0x460938 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>
               	jmp	0x426faa <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)>:
               	pushq	%rbx
               	movq	(%rsi), %rbx
               	movl	$248, %eax
               	addq	(%rdi), %rax
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	callq	0x428510 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 248587(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x427001 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
               	nopw	(%rax,%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 248557(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x426ff0 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x30>
               	cmpb	$0, 248560(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x42701c <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	cmpq	%rbx, 248543(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	jne	0x42701c <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x5c>
               	leaq	248534(%rip), %rbx      # 0x463af0 <(anonymous namespace)::current>
               	jmp	0x427035 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x75>
               	cmpb	$0, 248789(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x427042 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	cmpq	%rbx, 248772(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x427042 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x82>
               	leaq	248763(%rip), %rbx      # 0x463bf0 <(anonymous namespace)::last>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 80(%rbx)
               	movb	$1, 88(%rbx)
               	movb	$0, 248481(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	popq	%rbx
               	retq
               	nopl	(%rax,%rax)

<std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>:
               	movq	(%rdi), %rdi
               	jmp	0x428c70 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
               	nopl	(%rax,%rax)

<std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x427077 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x427080 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x42707d <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	235699(%rip), %rax      # 0x460928 <typeinfo for kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>
               	jmp	0x42707a <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$248, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x4270bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x4137c0 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x4137d0 <pthread_setname_np@plt>
               	movq	(%rbx), %rbx
               	leaq	16(%rbx), %rsi
               	leaq	184(%rbx), %rdi
               	movq	%rdi, 224(%rsp)
               	movq	%rsi, 232(%rsp)
               	callq	0x428460 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	cmpb	$1, 312(%rbx)
               	jne	0x4270fb <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b>
               	addq	$248, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	56(%rbx), %rcx
               	movq	%rcx, 216(%rsp)
               	leaq	336(%rbx), %rcx
               	movq	%rcx, 208(%rsp)
               	leaq	120(%rbx), %rcx
               	movq	%rcx, 200(%rsp)
               	movq	241295(%rip), %r12      # 0x461fb8 <write+0x461fb8>
               	movq	%rbx, 72(%rsp)
               	jmp	0x427175 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe5>
               	movq	%r15, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	224(%rsp), %rdi
               	movq	232(%rsp), %rsi
               	callq	0x428460 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>
               	movq	72(%rsp), %rbx
               	cmpb	$1, 312(%rbx)
               	je	0x4270e9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
               	movq	(%rax), %r13
               	movb	$1, %al
               	xchgb	%al, 248170(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4271a1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x111>
               	nopl	(%rax,%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 248141(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x427190 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x100>
               	cmpb	$0, 248144(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x427239 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1a9>
               	movl	$256, %edx              # imm = 0x100
               	leaq	248374(%rip), %rdi      # 0x463bf0 <(anonymous namespace)::last>
               	leaq	248111(%rip), %rsi      # 0x463af0 <(anonymous namespace)::current>
               	callq	0x413720 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 248096(%rip)     # 0x463af0 <(anonymous namespace)::current>
               	movups	%xmm0, 248105(%rip)     # 0x463b00 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 248114(%rip)     # 0x463b10 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 248123(%rip)     # 0x463b20 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 248132(%rip)     # 0x463b30 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 248141(%rip)     # 0x463b40 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 248150(%rip)     # 0x463b50 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 248159(%rip)     # 0x463b60 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 248168(%rip)     # 0x463b70 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 248177(%rip)     # 0x463b80 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 248186(%rip)     # 0x463b90 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 248195(%rip)     # 0x463ba0 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 248204(%rip)     # 0x463bb0 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 248213(%rip)     # 0x463bc0 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 248222(%rip)     # 0x463bd0 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 248231(%rip)     # 0x463be0 <(anonymous namespace)::current+0xf0>
               	movq	%r13, 247984(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	movb	$1, 247985(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 247981(%rip)      # 0x463b00 <(anonymous namespace)::current+0x10>
               	movb	$1, 247982(%rip)        # 0x463b08 <(anonymous namespace)::current+0x18>
               	movb	$0, 247945(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	cmpl	$0, 344(%rbx)
               	sete	%al
               	xchgb	%al, 252735(%rip)       # 0x464db0 <(anonymous namespace)::markingRequested (.0.0)>
               	movq	%r13, %rax
               	xchgq	%rax, 252741(%rip)      # 0x464dc0 <(anonymous namespace)::markingEpoch (.0)>
               	callq	0x425890 <kotlin::mm::RequestThreadsSuspension()>
               	movb	$1, %al
               	xchgb	%al, 247906(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4272a1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x211>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247885(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x427290 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x200>
               	cmpb	$0, 247888(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x4272ba <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x22a>
               	leaq	247871(%rip), %rbx      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 247864(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x4272d3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x243>
               	cmpb	$0, 248119(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x4272e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x250>
               	leaq	248102(%rip), %rbx      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%r13, 248095(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x4272e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x250>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 48(%rbx)
               	movb	$1, 56(%rbx)
               	movb	$0, 247811(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	nopw	(%rax,%rax)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	leaq	8(%rax), %rbp
               	testq	%rax, %rax
               	cmoveq	%rax, %rbp
               	testq	%r12, %r12
               	je	0x42732a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x29a>
               	leaq	248315(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42815c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10cc>
               	movq	248279(%rip), %rax      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bl
               	jmp	0x427347 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b7>
               	nopl	(%rax,%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x427380 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2f0>
               	leaq	8(%rax), %rcx
               	cmpq	%rbp, %rcx
               	je	0x427340 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x427340 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x427340 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	movq	296(%rax), %rcx
               	movzbl	96(%rcx), %ecx
               	testb	$1, %cl
               	jne	0x427340 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x2b0>
               	xorl	%ebx, %ebx
               	nop
               	testq	%r12, %r12
               	je	0x427391 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x301>
               	leaq	248204(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testb	%bl, %bl
               	jne	0x4273a5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x315>
               	callq	0x413780 <sched_yield@plt>
               	jmp	0x4272f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247613(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4273a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x310>
               	cmpb	$0, 247616(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	movq	72(%rsp), %rbx
               	je	0x4273cf <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x33f>
               	leaq	247594(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 247587(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x4273e8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x358>
               	cmpb	$0, 247842(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x4273f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
               	leaq	247825(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%r13, 247818(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x4273f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
               	cmpb	$0, 56(%rax)
               	je	0x4273f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movb	$0, 247536(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movq	8(%rbx), %r15
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*24(%rax)
               	movq	216(%rsp), %rdi
               	movq	%r13, %rsi
               	callq	0x428510 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x4262c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
               	movq	%r13, %rdi
               	movq	208(%rsp), %rsi
               	callq	0x426ca0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	leaq	8(%rax), %rbx
               	testq	%rax, %rax
               	cmoveq	%rax, %rbx
               	testq	%r12, %r12
               	je	0x42746e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3de>
               	leaq	247991(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428163 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10d3>
               	movq	247955(%rip), %rax      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	movb	$1, %bpl
               	jmp	0x427487 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f7>
               	nopl	(%rax)
               	movq	352(%rax), %rax
               	testq	%rax, %rax
               	je	0x4274b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x420>
               	leaq	8(%rax), %rcx
               	cmpq	%rbx, %rcx
               	je	0x427480 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f0>
               	movzbl	344(%rax), %ecx
               	testb	$1, %cl
               	jne	0x427480 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f0>
               	movl	328(%rax), %ecx
               	cmpl	$1, %ecx
               	je	0x427480 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3f0>
               	xorl	%ebp, %ebp
               	nop
               	testq	%r12, %r12
               	je	0x4274c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x431>
               	leaq	247900(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testb	%bpl, %bpl
               	jne	0x4274d5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x445>
               	callq	0x413780 <sched_yield@plt>
               	jmp	0x427440 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x3b0>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247309(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4274d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x440>
               	cmpb	$0, 247312(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	leaq	248041(%rip), %r14      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	je	0x427501 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x471>
               	leaq	247288(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 247281(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x42751f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x48f>
               	cmpb	$0, 247536(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x427540 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b0>
               	leaq	247519(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	movl	$0, %esi
               	cmpq	%r13, 247507(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x427542 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b2>
               	cmpb	$0, 152(%rax)
               	je	0x427540 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b0>
               	movq	144(%rax), %rsi
               	jmp	0x427542 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b2>
               	nopl	(%rax,%rax)
               	xorl	%esi, %esi
               	movb	$0, 247201(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movq	64(%r15), %rdi
               	movq	(%rdi), %rax
               	callq	*32(%rax)
               	movb	$1, %al
               	xchgb	%al, 247957(%rip)       # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x427571 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4e1>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247939(%rip)       # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x427560 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4d0>
               	leaq	16(%rsp), %r15
               	movq	%r15, 24(%rsp)
               	movq	%r15, 16(%rsp)
               	movq	$0, 32(%rsp)
               	movq	247880(%rip), %rbp      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rbp
               	je	0x427620 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x590>
               	movq	%rbp, %rsi
               	jmp	0x4275c4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x534>
               	nop
               	movq	40(%rax), %rbx
               	addq	$-1, 247844(%rip)       # 0x463dd0 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43d1dc <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	movq	%rbp, %rsi
               	cmpq	%r14, %rbp
               	je	0x427600 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x570>
               	movq	16(%rbp), %rax
               	movq	(%rbp), %rbp
               	movq	32(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x4275a0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x510>
               	cmpq	%rsi, %r15
               	je	0x4275bc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
               	movq	(%rsi), %rdx
               	cmpq	%r15, %rdx
               	je	0x4275bc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
               	movq	%r15, %rdi
               	callq	0x43d17e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
               	addq	$1, 32(%rsp)
               	addq	$-1, 247792(%rip)       # 0x463de8 <kotlin::mm::GlobalData::instance_+0xf8>
               	jmp	0x4275bc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
               	nopl	(%rax)
               	movq	247761(%rip), %rdi      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	cmpq	%r14, %rdi
               	je	0x427620 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x590>
               	movq	(%rdi), %rbx
               	callq	0x431460 <mi_free>
               	movq	%rbx, %rdi
               	cmpq	%r14, %rbx
               	jne	0x427610 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x580>
               	movq	16(%rsp), %rax
               	cmpq	%r15, %rax
               	je	0x427670 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5e0>
               	movq	%rax, 247715(%rip)      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	24(%rsp), %rax
               	movq	%rax, 247711(%rip)      # 0x463de0 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, (%rax)
               	movq	247693(%rip), %rax      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	movq	%r14, 8(%rax)
               	movq	32(%rsp), %rax
               	movq	%r15, 24(%rsp)
               	movq	%r15, 16(%rsp)
               	movq	$0, 32(%rsp)
               	jmp	0x427680 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5f0>
               	nopl	(%rax)
               	movq	%r14, 247657(%rip)      # 0x463de0 <kotlin::mm::GlobalData::instance_+0xf0>
               	movq	%r14, 247642(%rip)      # 0x463dd8 <kotlin::mm::GlobalData::instance_+0xe8>
               	xorl	%eax, %eax
               	movq	%rax, 247649(%rip)      # 0x463de8 <kotlin::mm::GlobalData::instance_+0xf8>
               	movb	$0, 247650(%rip)        # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	247606(%rip), %rbx      # 0x463dd0 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 246856(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x4276c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x631>
               	nopw	(%rax,%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 246829(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4276b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
               	cmpb	$0, 246832(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x4276da <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x64a>
               	leaq	246815(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 246808(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x4276f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x663>
               	cmpb	$0, 247063(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x42771d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
               	leaq	247046(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%r13, 247039(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x42771d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 200(%rax)
               	movq	%rbx, 184(%rax)
               	movq	%rcx, 192(%rax)
               	jne	0x42771d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
               	movb	$1, 200(%rax)
               	movb	$0, 246726(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movb	$1, %al
               	xchgb	%al, 247492(%rip)       # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	je	0x427741 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b1>
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 247475(%rip)       # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	testb	%al, %al
               	jne	0x427730 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6a0>
               	movq	247416(%rip), %rbx      # 0x463dc0 <kotlin::mm::GlobalData::instance_+0xd0>
               	leaq	247409(%rip), %rdx      # 0x463dc0 <kotlin::mm::GlobalData::instance_+0xd0>
               	jmp	0x427763 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d3>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rbx), %rbx
               	cmpq	%rdx, %rbx
               	je	0x427830 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7a0>
               	movl	32(%rbx), %eax
               	testb	$4, %al
               	jne	0x427760 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x427783 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6f3>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%rax), %rcx
               	testb	$3, %cl
               	jne	0x427760 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	-8(%rax), %rax
               	testq	%rax, %rax
               	jne	0x427760 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6d0>
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x4277f4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x764>
               	movq	40(%rbx), %rcx
               	testb	$1, %cl
               	je	0x4277ad <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x71d>
               	andq	$-2, %rcx
               	movq	8(%rcx), %rcx
               	movl	$1, %esi
               	movq	40(%rbx), %rax
               	movl	%eax, %edx
               	andl	$1, %edx
               	negq	%rdx
               	andq	%rax, %rdx
               	andq	$-2, %rdx
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	cmpl	$1, %eax
               	je	0x4277d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x740>
               	movq	$0, 8(%rdx)
               	movl	$1, %eax
               	xorl	%esi, %esi
               	lock
               	cmpxchgl	%esi, 16(%rdx)
               	xchgq	%rcx, 40(%rbx)
               	movq	40(%rbx), %rax
               	testb	$1, %al
               	je	0x427804 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x774>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	24(%rbx), %rcx
               	movq	%rcx, (%rax)
               	movq	(%rbx), %rbp
               	addq	$-1, 247226(%rip)       # 0x463dd0 <kotlin::mm::GlobalData::instance_+0xe0>
               	movq	%rbx, %rdi
               	callq	0x43d1dc <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	movq	%rbp, %rbx
               	jmp	0x427748 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b8>
               	nop
               	movb	$0, 247225(%rip)        # 0x463df0 <kotlin::mm::GlobalData::instance_+0x100>
               	movq	247186(%rip), %rbx      # 0x463dd0 <kotlin::mm::GlobalData::instance_+0xe0>
               	movb	$1, %al
               	xchgb	%al, 246436(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x427861 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7d1>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 246413(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x427850 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7c0>
               	cmpb	$0, 246416(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x42787a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7ea>
               	leaq	246399(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 246392(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x427893 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x803>
               	cmpb	$0, 246647(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x4278bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
               	leaq	246630(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%r13, 246623(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x4278bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
               	leaq	(,%rbx,8), %rcx
               	leaq	(%rcx,%rcx,2), %rcx
               	cmpb	$0, 248(%rax)
               	movq	%rbx, 232(%rax)
               	movq	%rcx, 240(%rax)
               	jne	0x4278bd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
               	movb	$1, 248(%rax)
               	movb	$0, 246310(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movq	72(%rsp), %rax
               	movq	(%rax), %rbx
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	je	0x4278ee <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x85e>
               	nopl	(%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 40(%rbx)
               	testb	%al, %al
               	jne	0x4278e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x850>
               	testq	%r12, %r12
               	je	0x427930 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8a0>
               	leaq	250922(%rip), %rdi      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x42816a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10da>
               	xorl	%eax, %eax
               	xchgb	%al, 250941(%rip)       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testq	%r12, %r12
               	je	0x427938 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8a8>
               	leaq	250885(%rip), %rdi      # 0x464d28 <(anonymous namespace)::gSuspensionMutex>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	jmp	0x427938 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8a8>
               	nopl	(%rax)
               	xorl	%eax, %eax
               	xchgb	%al, 250904(%rip)       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	movq	%rbx, 128(%rsp)
               	leaq	246969(%rip), %rdi      # 0x463e00 <(anonymous namespace)::gSuspensionCondVar>
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	movb	$1, %al
               	xchgb	%al, 246166(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x427971 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8e1>
               	nopl	(%rax)
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 246141(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x427960 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8d0>
               	cmpb	$0, 246144(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x42798a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8fa>
               	leaq	246127(%rip), %rbx      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 246120(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x4279a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x913>
               	cmpb	$0, 246375(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x4279b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x920>
               	leaq	246358(%rip), %rbx      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%r13, 246351(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x4279b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x920>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 64(%rbx)
               	movb	$1, 72(%rbx)
               	movb	$0, 246067(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	xorps	%xmm0, %xmm0
               	leaq	104(%rsp), %rax
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	246818(%rip), %rax      # 0x463df8 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 246020(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x427a01 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x971>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 245997(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x4279f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
               	movq	128(%rsp), %rax
               	leaq	8(%rax), %r14
               	cmpb	$0, 245988(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	je	0x427a26 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x996>
               	leaq	245971(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%r13, 245964(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x427a3f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9af>
               	cmpb	$0, 246219(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x427a5d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
               	leaq	246202(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%r13, 246195(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x427a5d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
               	cmpb	$0, 176(%rax)
               	movq	%rbx, 160(%rax)
               	movq	%rbp, 168(%rax)
               	jne	0x427a5d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
               	movb	$1, 176(%rax)
               	movq	%r13, 136(%rsp)
               	movb	$0, 245886(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x427c10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
               	xorl	%r13d, %r13d
               	jmp	0x427a97 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
               	movq	$0, 8(%rbx)
               	movq	%rbx, %r13
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x427c10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
               	movq	8(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x427a80 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9f0>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	je	0x427aaf <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa1f>
               	cmpq	%rax, (%rax)
               	jne	0x427af0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa60>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	testb	$64, 88(%rax)
               	jne	0x427af0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa60>
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movslq	20(%rax), %rcx
               	testq	%rcx, %rcx
               	js	0x427bc6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb36>
               	movl	%ecx, %ecx
               	addq	$15, %rcx
               	jmp	0x427bd4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb44>
               	nopw	(%rax,%rax)
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movslq	20(%rax), %rcx
               	testq	%rcx, %rcx
               	js	0x427b0c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa7c>
               	movl	%ecx, %ecx
               	addq	$15, %rcx
               	jmp	0x427b1a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa8a>
               	movl	24(%rbx), %eax
               	negq	%rcx
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x428bd0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	16(%rsp), %r15
               	movq	24(%rsp), %rbx
               	movq	$0, 16(%rsp)
               	movq	%r15, 160(%rsp)
               	cmpq	$0, 104(%rsp)
               	je	0x427b85 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaf5>
               	movq	112(%rsp), %rax
               	movq	$0, 160(%rsp)
               	movq	(%rax), %rbp
               	movq	%r15, (%rax)
               	testq	%rbp, %rbp
               	je	0x427b96 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb06>
               	movq	%rbp, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x427b96 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb06>
               	movq	$0, 160(%rsp)
               	movq	%r15, 104(%rsp)
               	movq	%r15, 112(%rsp)
               	addq	$1, 120(%rsp)
               	leaq	160(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x427a97 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
               	jmp	0x427c10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
               	movl	24(%rbx), %eax
               	negq	%rcx
               	imulq	%rax, %rcx
               	addq	$31, %rcx
               	andq	$-8, %rcx
               	addq	$15, %rcx
               	andq	$-8, %rcx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movq	%r13, %rdx
               	callq	0x428bd0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
               	movq	24(%rsp), %rbx
               	movq	%r15, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	testq	%rbx, %rbx
               	jne	0x427a97 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	246241(%rip), %rax      # 0x463df8 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	32(%rax), %rbx
               	movq	40(%rax), %rbp
               	movb	$1, %al
               	xchgb	%al, 245443(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	je	0x427c41 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbb1>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 245421(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x427c30 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba0>
               	cmpb	$0, 245424(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	movq	136(%rsp), %rsi
               	je	0x427c62 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbd2>
               	leaq	245399(%rip), %rax      # 0x463af0 <(anonymous namespace)::current>
               	cmpq	%rsi, 245392(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	je	0x427c7b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbeb>
               	cmpb	$0, 245647(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x427c99 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
               	leaq	245630(%rip), %rax      # 0x463bf0 <(anonymous namespace)::last>
               	cmpq	%rsi, 245623(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x427c99 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
               	cmpb	$0, 224(%rax)
               	movq	%rbx, 208(%rax)
               	movq	%rbp, 216(%rax)
               	jne	0x427c99 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
               	movb	$1, 224(%rax)
               	movb	$0, 245322(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movq	200(%rsp), %rdi
               	callq	0x428510 <GCStateHolder::ValueWithCondVar<long>::set(long)>
               	movb	$1, %al
               	xchgb	%al, 245301(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	movq	72(%rsp), %rbx
               	je	0x427cd1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc41>
               	nop
               	callq	0x424490 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
               	movb	$1, %al
               	xchgb	%al, 245277(%rip)       # 0x463aea <(anonymous namespace)::lock>
               	testb	%al, %al
               	jne	0x427cc0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc30>
               	cmpb	$0, 245280(%rip)        # 0x463af8 <(anonymous namespace)::current+0x8>
               	movq	136(%rsp), %r13
               	je	0x427da0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd10>
               	cmpq	%r13, 245251(%rip)      # 0x463af0 <(anonymous namespace)::current>
               	jne	0x427da0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd10>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 245265(%rip)      # 0x463b10 <(anonymous namespace)::current+0x20>
               	movb	$1, 245266(%rip)        # 0x463b18 <(anonymous namespace)::current+0x28>
               	movl	$256, %edx              # imm = 0x100
               	leaq	245470(%rip), %rdi      # 0x463bf0 <(anonymous namespace)::last>
               	leaq	245207(%rip), %rsi      # 0x463af0 <(anonymous namespace)::current>
               	callq	0x413720 <memcpy@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 245192(%rip)     # 0x463af0 <(anonymous namespace)::current>
               	movups	%xmm0, 245201(%rip)     # 0x463b00 <(anonymous namespace)::current+0x10>
               	movups	%xmm0, 245210(%rip)     # 0x463b10 <(anonymous namespace)::current+0x20>
               	movups	%xmm0, 245219(%rip)     # 0x463b20 <(anonymous namespace)::current+0x30>
               	movups	%xmm0, 245228(%rip)     # 0x463b30 <(anonymous namespace)::current+0x40>
               	movups	%xmm0, 245237(%rip)     # 0x463b40 <(anonymous namespace)::current+0x50>
               	movups	%xmm0, 245246(%rip)     # 0x463b50 <(anonymous namespace)::current+0x60>
               	movups	%xmm0, 245255(%rip)     # 0x463b60 <(anonymous namespace)::current+0x70>
               	movups	%xmm0, 245264(%rip)     # 0x463b70 <(anonymous namespace)::current+0x80>
               	movups	%xmm0, 245273(%rip)     # 0x463b80 <(anonymous namespace)::current+0x90>
               	movups	%xmm0, 245282(%rip)     # 0x463b90 <(anonymous namespace)::current+0xa0>
               	movups	%xmm0, 245291(%rip)     # 0x463ba0 <(anonymous namespace)::current+0xb0>
               	movups	%xmm0, 245300(%rip)     # 0x463bb0 <(anonymous namespace)::current+0xc0>
               	movups	%xmm0, 245309(%rip)     # 0x463bc0 <(anonymous namespace)::current+0xd0>
               	movups	%xmm0, 245318(%rip)     # 0x463bd0 <(anonymous namespace)::current+0xe0>
               	movups	%xmm0, 245327(%rip)     # 0x463be0 <(anonymous namespace)::current+0xf0>
               	jmp	0x427dc5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
               	nopw	%cs:(%rax,%rax)
               	cmpb	$0, 245329(%rip)        # 0x463bf8 <(anonymous namespace)::last+0x8>
               	je	0x427dc5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
               	cmpq	%r13, 245312(%rip)      # 0x463bf0 <(anonymous namespace)::last>
               	jne	0x427dc5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
               	callq	0x43db70 <std::chrono::_V2::steady_clock::now()>
               	movq	%rax, 245330(%rip)      # 0x463c10 <(anonymous namespace)::last+0x20>
               	movb	$1, 245331(%rip)        # 0x463c18 <(anonymous namespace)::last+0x28>
               	movb	$0, 245022(%rip)        # 0x463aea <(anonymous namespace)::lock>
               	movq	328(%rbx), %rbp
               	leaq	88(%rbp), %rdi
               	movq	%rdi, 80(%rsp)
               	movb	$0, 88(%rsp)
               	testq	%r12, %r12
               	je	0x427df3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd63>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428171 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10e1>
               	movb	$1, 88(%rsp)
               	movq	120(%rsp), %rax
               	testq	%rax, %rax
               	leaq	80(%rsp), %rbx
               	jne	0x427e12 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd82>
               	cmpq	$0, (%rbp)
               	je	0x428138 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a8>
               	movq	%rax, 240(%rsp)
               	leaq	40(%rbp), %r14
               	cmpb	$0, 169(%rbp)
               	jne	0x427e44 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdb4>
               	nopl	(%rax,%rax)
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x43d7c0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpb	$0, 169(%rbp)
               	je	0x427e30 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda0>
               	leaq	272(%rbp), %rbx
               	testq	%r12, %r12
               	je	0x427e60 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd0>
               	movq	%rbx, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428178 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10e8>
               	cmpq	$0, (%rbp)
               	je	0x427ec0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe30>
               	testq	%r12, %r12
               	je	0x427e74 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xde4>
               	movq	%rbx, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	104(%rsp), %rax
               	testq	%rax, %rax
               	je	0x4280be <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x102e>
               	cmpq	$0, 16(%rbp)
               	je	0x428090 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1000>
               	movq	24(%rbp), %rcx
               	movq	$0, 104(%rsp)
               	movq	(%rcx), %rbx
               	movq	%rax, (%rcx)
               	testq	%rbx, %rbx
               	je	0x42809d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x100d>
               	movq	%rbx, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x42809d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x100d>
               	nop
               	movq	%rbx, 152(%rsp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 184(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 160(%rsp)
               	movq	$22, 176(%rsp)
               	movups	119374(%rip), %xmm0     # 0x44514b <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movabsq	$8245936382198116210, %r13 # imm = 0x726F737365636F72
               	movq	%r13, 14(%rax)
               	movq	$22, 168(%rsp)
               	movb	$1, 192(%rsp)
               	movq	$0, 144(%rsp)
               	movq	%rbp, 16(%rsp)
               	movl	$23, %edi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 24(%rsp)
               	movq	$22, 40(%rsp)
               	movups	119281(%rip), %xmm0     # 0x44514b <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
               	movups	%xmm0, (%rax)
               	movq	%r13, 14(%rax)
               	movq	$22, 32(%rsp)
               	movb	$1, 56(%rsp)
               	leaq	1530(%rip), %r13        # 0x428570 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
               	movq	%r13, 64(%rsp)
               	movl	$64, %edi
               	callq	0x43cb69 <operator new(unsigned long)>
               	leaq	231788(%rip), %rcx      # 0x4608f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rcx, (%rax)
               	movq	%rbp, 8(%rax)
               	movb	$0, 48(%rax)
               	movq	%rbx, 16(%rax)
               	movq	$22, 32(%rax)
               	movq	$22, 24(%rax)
               	leaq	40(%rsp), %rcx
               	movq	%rcx, 24(%rsp)
               	movq	$0, 32(%rsp)
               	movb	$0, 40(%rsp)
               	movb	$1, 48(%rax)
               	movq	%r13, 56(%rax)
               	movq	%rax, 8(%rsp)
               	leaq	144(%rsp), %rdi
               	leaq	8(%rsp), %rsi
               	movq	237532(%rip), %rdx      # 0x461fc0 <write+0x461fc0>
               	callq	0x43fd9e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	movq	136(%rsp), %r13
               	movq	152(%rsp), %rbx
               	je	0x428009 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf79>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 8(%rsp)
               	cmpb	$0, 56(%rsp)
               	je	0x42802d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf9d>
               	movq	24(%rsp), %rdi
               	leaq	40(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x42802d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf9d>
               	callq	0x413730 <free@plt>
               	cmpq	$0, (%rbp)
               	jne	0x42817f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10ef>
               	movq	144(%rsp), %rax
               	movq	%rax, (%rbp)
               	movq	$0, 144(%rsp)
               	cmpb	$0, 192(%rsp)
               	je	0x427e67 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x427e67 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
               	callq	0x413730 <free@plt>
               	jmp	0x427e67 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	$0, 104(%rsp)
               	movq	%rax, 16(%rbp)
               	movq	112(%rsp), %rax
               	movq	%rax, 24(%rbp)
               	movq	240(%rsp), %rax
               	addq	%rax, 32(%rbp)
               	xorps	%xmm0, %xmm0
               	leaq	104(%rsp), %rax
               	movups	%xmm0, 8(%rax)
               	movq	%r13, 160(%rbp)
               	movq	%r14, %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	cmpb	$0, 88(%rsp)
               	je	0x4280ed <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x105d>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4280ed <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x105d>
               	testq	%r12, %r12
               	je	0x4280e8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1058>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	104(%rsp), %rbp
               	movq	$0, 104(%rsp)
               	movq	%rbp, 16(%rsp)
               	testq	%rbp, %rbp
               	je	0x427130 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0>
               	movq	%rbp, %rax
               	movq	(%rbp), %rbp
               	movq	$0, (%rax)
               	movq	16(%rsp), %rbx
               	movq	%rbp, 16(%rsp)
               	testq	%rbx, %rbx
               	je	0x428100 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1070>
               	movq	%rbx, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x428100 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1070>
               	movq	%r13, 16(%rsp)
               	cmpq	$0, 144(%rbp)
               	je	0x428184 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10f4>
               	leaq	128(%rbp), %rdi
               	movq	%r15, %rsi
               	callq	*152(%rbp)
               	jmp	0x4280cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x103d>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	callq	0x43cf13 <std::terminate()>
               	callq	0x43dbc2 <std::__throw_bad_function_call()>
               	jmp	0x4281ad <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x111d>
               	jmp	0x4282dc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x124c>
               	movq	%rax, %rbx
               	jmp	0x4281c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1131>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbx
               	cmpb	$0, 88(%rsp)
               	je	0x4281c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1131>
               	movq	80(%rsp), %rdi
               	testq	%rdi, %rdi
               	jne	0x4281c9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1139>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	cmpq	$0, 237031(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4281d8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1148>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 88(%rsp)
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4281f8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1168>
               	movq	(%rdi), %rax
               	callq	*8(%rax)
               	movq	$0, 8(%rsp)
               	cmpb	$0, 56(%rsp)
               	je	0x428224 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1194>
               	movq	24(%rsp), %rbx
               	leaq	40(%rsp), %rax
               	cmpq	%rax, %rbx
               	jne	0x42821c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x118c>
               	jmp	0x428224 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1194>
               	movq	%rax, %r14
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	cmpb	$0, 192(%rsp)
               	je	0x428248 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11b8>
               	movq	160(%rsp), %rdi
               	leaq	176(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x428248 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11b8>
               	callq	0x413730 <free@plt>
               	cmpq	$0, 236904(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4282df <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x124f>
               	movq	152(%rsp), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	104(%rsp), %rbx
               	movq	$0, 104(%rsp)
               	movq	%rbx, 16(%rsp)
               	testq	%rbx, %rbx
               	je	0x4282b4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1224>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	16(%rsp), %rbp
               	movq	%rbx, 16(%rsp)
               	testq	%rbp, %rbp
               	je	0x428281 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f1>
               	movq	%rbp, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x428281 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11f1>
               	leaq	16(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	104(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	128(%rsp), %rax
               	movb	$0, 40(%rax)
               	movq	%r14, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %r14
               	movq	%r14, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<GCStateHolder::~GCStateHolder()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	addq	$248, %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	leaq	184(%rbx), %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	leaq	120(%rbx), %rdi
               	callq	0x43d7ba <std::condition_variable::~condition_variable()>
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43d7ba <std::condition_variable::~condition_variable()>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	230781(%rip), %rax      # 0x4608b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x428356 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x428356 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43fd30 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	230733(%rip), %rax      # 0x4608b8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x428386 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x428386 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43fd30 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x428403 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x4283df <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x4283e5 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x428425 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x428425 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0x85>
               	callq	0x413730 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x428449 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x428449 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&), kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3> > >::_M_run()+0xa9>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	8(%rdi), %r15
               	movq	%r15, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 236337(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428495 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x35>
               	movq	%r15, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428508 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0xa8>
               	movb	$1, 16(%rsp)
               	movq	168(%rbx), %rax
               	cmpq	104(%rbx), %rax
               	jg	0x4284dd <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x7d>
               	leaq	16(%r14), %r15
               	leaq	8(%rsp), %r12
               	cmpb	$0, 296(%rbx)
               	jne	0x4284d1 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x71>
               	movq	%r15, %rdi
               	movq	%r12, %rsi
               	callq	0x43d7c0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	168(%rbx), %rax
               	cmpq	104(%rbx), %rax
               	jle	0x4284b0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
               	cmpb	$0, 16(%rsp)
               	je	0x4284f9 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x99>
               	movq	8(%rsp), %r15
               	testq	%r15, %r15
               	je	0x4284f9 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x99>
               	cmpq	$0, 236238(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4284f4 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x94>
               	movq	%r15, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	nop

<GCStateHolder::ValueWithCondVar<long>::set(long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	movq	8(%rdi), %r14
               	cmpq	$0, 236177(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428535 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x25>
               	movq	%r14, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428566 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x56>
               	movq	%r15, (%rbx)
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	testq	%r14, %r14
               	je	0x428560 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	cmpq	$0, 236135(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428560 <GCStateHolder::ValueWithCondVar<long>::set(long)+0x50>
               	movq	%r14, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x4137b0 <pthread_mutex_unlock@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	nopl	(%rax)

<std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$152, %rsp
               	movq	%rsi, %rbx
               	cmpb	$0, 32(%rdi)
               	je	0x42859d <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2d>
               	movq	(%rdi), %rbp
               	callq	0x4137c0 <pthread_self@plt>
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x4137d0 <pthread_setname_np@plt>
               	movq	(%rbx), %r13
               	callq	0x439280 <Kotlin_initRuntimeIfNeeded>
               	leaq	176(%r13), %rax
               	movq	%rax, 32(%rsp)
               	cmpq	$0, 236031(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4285cd <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x5d>
               	movq	32(%rsp), %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428a00 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x490>
               	movb	$1, 264(%r13)
               	cmpq	$0, 235995(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4285e9 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x79>
               	movq	32(%rsp), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	leaq	216(%r13), %rdi
               	movq	%rdi, 96(%rsp)
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	leaq	88(%r13), %r14
               	leaq	40(%r13), %r15
               	leaq	24(%r13), %rax
               	movq	%rax, 128(%rsp)
               	leaq	128(%r13), %rax
               	movq	%rax, 120(%rsp)
               	xorl	%eax, %eax
               	movq	%rax, 40(%rsp)
               	leaq	8(%rsp), %rbp
               	movq	%r14, 112(%rsp)
               	movq	%r15, 104(%rsp)
               	jmp	0x428645 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movb	$0, 16(%rsp)
               	movq	%r14, 8(%rsp)
               	movb	$0, 16(%rsp)
               	cmpq	$0, 235873(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428669 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xf9>
               	movq	%r14, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428a00 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x490>
               	movb	$1, 16(%rsp)
               	movq	32(%r13), %rbx
               	movb	$1, %al
               	testq	%rbx, %rbx
               	jne	0x4286b8 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x148>
               	nopl	(%rax)
               	movq	40(%rsp), %rax
               	cmpq	%rax, 160(%r13)
               	jne	0x4286b2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x142>
               	cmpb	$0, 168(%r13)
               	jne	0x42896a <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3fa>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	callq	0x43d7c0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	movq	32(%r13), %rbx
               	testq	%rbx, %rbx
               	je	0x428680 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x110>
               	jmp	0x4286b4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x144>
               	xorl	%ebx, %ebx
               	movb	16(%rsp), %al
               	movq	16(%r13), %rcx
               	movq	$0, 16(%r13)
               	movq	%rcx, 72(%rsp)
               	movq	24(%r13), %rcx
               	movq	160(%r13), %rdx
               	movq	%rdx, 40(%rsp)
               	movq	%rbx, 88(%rsp)
               	movq	%rcx, 80(%rsp)
               	movq	128(%rsp), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	testb	%al, %al
               	je	0x4289f1 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x481>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x428717 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1a7>
               	cmpq	$0, 235693(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428712 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1a2>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	testq	%rbx, %rbx
               	je	0x4288a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	movq	%fs:0, %rax
               	movq	%rax, %r15
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rbx
               	xorl	%eax, %eax
               	movq	%rcx, 136(%rsp)
               	xchgl	%eax, 328(%rcx)
               	movl	%eax, 60(%rsp)
               	cmpl	$1, %eax
               	jne	0x428768 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1f8>
               	movb	247284(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x428768 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x1f8>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 144(%rsp)
               	movq	72(%rsp), %rbx
               	testq	%rbx, %rbx
               	jne	0x4287b4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x244>
               	jmp	0x428860 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	nop
               	leaq	264(%r14), %rbp
               	movl	$24, %edi
               	callq	0x429160 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%r12, 16(%rax)
               	movq	%rax, %rdi
               	movq	%rbp, %rsi
               	callq	0x43d1c4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
               	addq	$1, 280(%r14)
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x428860 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
               	leaq	16(%rbx), %rbp
               	movq	16(%rbx), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rsi
               	testb	$64, 88(%rsi)
               	je	0x4287d1 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x261>
               	movq	%rbp, %rdi
               	callq	0x438a70 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	je	0x4287a8 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x238>
               	cmpq	%rax, (%rax)
               	je	0x4287a8 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x238>
               	movq	(%rbp), %rax
               	andq	$-4, %rax
               	cmpq	%rax, (%rax)
               	movl	$0, %r12d
               	cmovneq	%rax, %r12
               	movq	16(%r12), %rax
               	testb	$1, %al
               	je	0x428806 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x296>
               	andq	$-2, %rax
               	movq	8(%rax), %rax
               	movq	(%r12), %rcx
               	movq	%rcx, (%rax)
               	movq	%r15, %rax
               	movq	-64(%r15), %r14
               	leaq	232(%r14), %rax
               	movq	24(%r12), %rcx
               	addq	$-8, %r12
               	cmpq	%rcx, %rax
               	jne	0x428780 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x210>
               	movq	40(%r12), %rbp
               	addq	$-1, 256(%r14)
               	movq	%rbp, %rdi
               	callq	0x43d1dc <std::__detail::_List_node_base::_M_unhook()>
               	movq	%rbp, %rdi
               	callq	0x431460 <mi_free>
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x4287b4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x244>
               	nopl	(%rax)
               	cmpq	$0, 136(%rsp)
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %r15
               	movq	144(%rsp), %rdi
               	je	0x4288a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	movl	60(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x4288a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	cmpl	$1, %eax
               	jne	0x4288a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	movb	246972(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4288a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)
               	movq	40(%rsp), %rax
               	movq	%rax, 24(%rsp)
               	cmpq	$0, 144(%r13)
               	je	0x4289fb <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x48b>
               	movq	120(%rsp), %rdi
               	leaq	24(%rsp), %rsi
               	callq	*152(%r13)
               	movq	72(%rsp), %rbx
               	movq	$0, 72(%rsp)
               	movq	%rbx, 24(%rsp)
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	je	0x428920 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x3b0>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	24(%rsp), %rbp
               	movq	%rbx, 24(%rsp)
               	testq	%rbp, %rbp
               	je	0x4288e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x370>
               	movq	%rbp, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x4288e0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x370>
               	nop
               	leaq	24(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	72(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	leaq	8(%rsp), %rbp
               	je	0x428645 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x428645 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
               	cmpq	$0, 235102(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428640 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd0>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	jmp	0x428640 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd0>
               	movb	$0, 169(%r13)
               	cmpb	$0, 16(%rsp)
               	je	0x428997 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x427>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x428997 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x427>
               	cmpq	$0, 235053(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428992 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x422>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	cmpq	$0, 235033(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4289cd <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x45d>
               	movq	32(%rsp), %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x428a00 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x490>
               	movb	$0, 264(%r13)
               	cmpq	$0, 235001(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4289d5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x465>
               	movq	32(%rsp), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	jmp	0x4289d5 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x465>
               	movb	$0, 264(%r13)
               	movq	96(%rsp), %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	callq	0x43dbc2 <std::__throw_bad_function_call()>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	jmp	0x428a09 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x499>
               	movq	%rax, %r14
               	movq	72(%rsp), %rbx
               	movq	$0, 72(%rsp)
               	movq	%rbx, 48(%rsp)
               	testq	%rbx, %rbx
               	je	0x428a52 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4e2>
               	movq	%rbx, %rax
               	movq	(%rbx), %rbx
               	movq	$0, (%rax)
               	movq	48(%rsp), %rbp
               	movq	%rbx, 48(%rsp)
               	testq	%rbp, %rbp
               	je	0x428a1f <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4af>
               	movq	%rbp, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x428a1f <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x4af>
               	leaq	48(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	leaq	72(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	cmpb	$0, 16(%rsp)
               	je	0x428a8b <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x51b>
               	movq	8(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x428a8b <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x51b>
               	cmpq	$0, 234809(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428a86 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x516>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 16(%rsp)
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	228941(%rip), %rax      # 0x4608f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x428ac6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x428ac6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43fd30 <std::thread::_State::~_State()>
               	nop

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	228893(%rip), %rax      # 0x4608f8 <vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >+0x10>
               	movq	%rax, (%rdi)
               	cmpb	$0, 48(%rdi)
               	je	0x428af6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	movq	16(%rbx), %rdi
               	leaq	32(%rbx), %rax
               	cmpq	%rax, %rdi
               	je	0x428af6 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::~_State_impl()+0x26>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x43fd30 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>
               	nopw	(%rax,%rax)

<std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()>:
               	pushq	%rbx
               	subq	$48, %rsp
               	leaq	8(%rdi), %rsi
               	movq	56(%rdi), %rax
               	movb	$0, 40(%rsp)
               	cmpb	$0, 48(%rdi)
               	je	0x428b73 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x63>
               	leaq	24(%rsp), %rdx
               	movq	%rdx, 8(%rsp)
               	movq	16(%rdi), %rbx
               	leaq	32(%rdi), %rcx
               	cmpq	%rcx, %rbx
               	je	0x428b4f <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x3f>
               	movq	%rbx, 8(%rsp)
               	movq	32(%rdi), %rdx
               	movq	%rdx, 24(%rsp)
               	jmp	0x428b55 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x45>
               	movups	(%rbx), %xmm0
               	movups	%xmm0, (%rdx)
               	movq	24(%rdi), %rdx
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 16(%rdi)
               	movq	$0, 24(%rdi)
               	movb	$0, 32(%rdi)
               	movb	$1, 40(%rsp)
               	leaq	8(%rsp), %rdi
               	callq	*%rax
               	cmpb	$0, 40(%rsp)
               	je	0x428b95 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x428b95 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0x85>
               	callq	0x413730 <free@plt>
               	addq	$48, %rsp
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	cmpb	$0, 40(%rsp)
               	je	0x428bb9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	movq	8(%rsp), %rdi
               	leaq	24(%rsp), %rax
               	cmpq	%rax, %rdi
               	je	0x428bb9 <std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&), kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0> > >::_M_run()+0xa9>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rcx, %r14
               	movq	%rdx, %r12
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	movq	%rdx, %rbp
               	cmoveq	%rsi, %rbp
               	movq	(%rbp), %rcx
               	movq	$0, (%rbp)
               	movq	%rcx, (%rsp)
               	movq	(%rcx), %rax
               	movq	$0, (%rcx)
               	movq	(%rbp), %rbx
               	movq	%rax, (%rbp)
               	testq	%rbx, %rbx
               	je	0x428c2c <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
               	movq	%rbx, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	movq	(%rbp), %rax
               	testq	%rax, %rax
               	jne	0x428c39 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x69>
               	movq	%r12, 8(%r13)
               	movq	(%rbp), %rax
               	addq	$-1, 16(%r13)
               	subq	%r14, 24(%r13)
               	movq	(%rsp), %rcx
               	movq	$0, (%rsp)
               	movq	%rcx, (%r15)
               	movq	%rax, 8(%r15)
               	movq	%rsp, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	testq	%r15, %r15
               	je	0x428ca0 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x30>
               	xchgl	%ebp, 328(%r15)
               	jmp	0x428ca3 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x33>
               	xorl	%r15d, %r15d
               	addq	$16, %rbx
               	movq	%rbx, %rdi
               	callq	0x426ef0 <GCStateHolder::schedule()>
               	testq	%r15, %r15
               	je	0x428cd0 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x428cd0 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	cmpl	$1, %eax
               	jne	0x428cd0 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x60>
               	movb	245892(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x428cdb <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0x6b>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%r15, %r15
               	je	0x428d27 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%r15)
               	testl	%ebp, %ebp
               	jne	0x428d27 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	cmpl	$1, %eax
               	jne	0x428d27 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	movb	245820(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x428d27 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const+0xb7>
               	addq	$328, %r15              # imm = 0x148
               	movq	%r15, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	movl	$1, %edi
               	movl	$168, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movq	(%r12), %rax
               	leaq	56(%rax), %rcx
               	movq	%rcx, (%rsp)
               	movq	%rcx, (%rbx)
               	movaps	(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movups	8(%rbx), %xmm1
               	movaps	%xmm1, (%rsp)
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 16(%rsp)
               	leaq	166(%rip), %rcx         # 0x428e30 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
               	movq	%rcx, 24(%rbx)
               	movq	$0, 24(%rsp)
               	leaq	194(%rip), %rcx         # 0x428e60 <std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>
               	movq	%rcx, 32(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 40(%rbx)
               	movups	%xmm0, 56(%rbx)
               	movq	64(%rax), %rax
               	movq	%rax, 48(%rbx)
               	movq	(%rbx), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbx)
               	movq	16(%rsp), %rax
               	testq	%rax, %rax
               	je	0x428dd7 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)+0xa7>
               	movq	%rsp, %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rax
               	addq	$72, %rax
               	movq	(%r12), %rcx
               	leaq	160(%rcx), %rdx
               	movq	%rdx, 72(%rbx)
               	movq	%r15, 80(%rbx)
               	movq	%rbx, 88(%rbx)
               	addq	$16, %rcx
               	movq	%rcx, 112(%rbx)
               	movq	%rax, 128(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 136(%rbx)
               	movups	%xmm0, 152(%rbx)
               	movq	%rbx, (%r14)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopl	(%rax)

<std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
               	cmpl	$2, %edx
               	je	0x428e47 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x17>
               	cmpl	$1, %edx
               	je	0x428e50 <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
               	testl	%edx, %edx
               	jne	0x428e4d <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1d>
               	leaq	228099(%rip), %rax      # 0x460948 <typeinfo for kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>
               	jmp	0x428e4a <std::_Function_base::_Base_manager<kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movq	%rsi, (%rdi)
               	xorl	%eax, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<std::_Function_handler<void (kotlin::gc::GCSchedulerThreadData&), kotlin::gc::GCScheduler::NewThreadData()::'lambda'(auto&)>::_M_invoke(std::_Any_data const&, kotlin::gc::GCSchedulerThreadData&)>:
               	movq	(%rdi), %rax
               	movq	64(%rax), %rdi
               	movq	(%rdi), %rax
               	movq	16(%rax), %rax
               	jmpq	*%rax

<kotlin::gc::GC::ThreadData::~ThreadData()>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r14
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x428eb3 <kotlin::gc::GC::ThreadData::~ThreadData()+0x43>
               	leaq	112(%rbx), %rdi
               	callq	0x426bd0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Publish()>
               	leaq	136(%rbx), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x428eab <kotlin::gc::GC::ThreadData::~ThreadData()+0x3b>
               	leaq	8(%rbx), %rdi
               	movq	%rdi, %rsi
               	movl	$3, %edx
               	callq	*%rax
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, (%r14)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	(%rax,%rax)

<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r12
               	movq	%rdi, %r14
               	addq	$15, %r12
               	andq	$-8, %r12
               	movq	16(%rdi), %rax
               	movq	16(%rax), %rbp
               	movq	40(%rbp), %rax
               	addq	%r12, %rax
               	movq	%rax, 40(%rbp)
               	cmpq	48(%rbp), %rax
               	jb	0x428f42 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x72>
               	cmpq	$0, 24(%rbp)
               	je	0x4290e8 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x218>
               	leaq	8(%rbp), %rdi
               	movq	%rbp, %rsi
               	callq	*32(%rbp)
               	movq	$0, 40(%rbp)
               	movq	$0, 56(%rbp)
               	movq	(%rbp), %rax
               	movq	8(%rax), %rax
               	movq	%rax, 48(%rbp)
               	movq	(%rbp), %rax
               	movl	(%rax), %eax
               	cltq
               	movq	%rax, 64(%rbp)
               	movb	245256(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x428f51 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x81>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x429160 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%rax, %rbp
               	testq	%rax, %rax
               	jne	0x429074 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1a4>
               	movq	16(%r14), %rbx
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movl	$1, %ecx
               	movq	%rax, 32(%rsp)
               	xchgl	%ecx, 328(%rax)
               	movl	%ecx, 12(%rsp)
               	movq	(%rbx), %rdi
               	addq	$16, %rdi
               	callq	0x426ef0 <GCStateHolder::schedule()>
               	movq	%rax, %rbp
               	movq	(%rbx), %r15
               	movq	128(%r15), %r13
               	movq	%r13, 16(%rsp)
               	movb	$0, 24(%rsp)
               	cmpq	$0, 233469(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x428fcd <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfd>
               	movq	%r13, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x429103 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x233>
               	movb	$1, 24(%rsp)
               	cmpq	%rbp, 120(%r15)
               	jge	0x429017 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x147>
               	leaq	136(%r15), %rbx
               	leaq	16(%rsp), %r13
               	nopl	(%rax,%rax)
               	cmpb	$0, 312(%r15)
               	jne	0x42900b <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13b>
               	movq	%rbx, %rdi
               	movq	%r13, %rsi
               	callq	0x43d7c0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
               	cmpq	%rbp, 120(%r15)
               	jl	0x428ff0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
               	cmpb	$0, 24(%rsp)
               	je	0x429033 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x163>
               	movq	16(%rsp), %r13
               	testq	%r13, %r13
               	je	0x429033 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x163>
               	cmpq	$0, 233364(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x42902e <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15e>
               	movq	%r13, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	$0, 24(%rsp)
               	movq	32(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x429064 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	addq	$328, %rdi              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%rdi)
               	testl	%ecx, %ecx
               	jne	0x429064 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	cmpl	$1, %eax
               	jne	0x429064 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	movb	244981(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x429064 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r12, %rdi
               	callq	0x429160 <kotlin::allocateInObjectPool(unsigned long)>
               	movq	%rax, %rbp
               	testq	%rax, %rax
               	je	0x4290ed <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x21d>
               	movq	$0, (%rbp)
               	movq	%rbp, 16(%rsp)
               	cmpq	$0, 24(%r14)
               	je	0x4290b2 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1e2>
               	movq	32(%r14), %rax
               	movq	$0, 16(%rsp)
               	movq	(%rax), %rbx
               	movq	%rbp, (%rax)
               	testq	%rbx, %rbx
               	je	0x4290bf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1ef>
               	movq	%rbx, %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbx, %rdi
               	callq	0x431460 <mi_free>
               	jmp	0x4290bf <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1ef>
               	movq	$0, 16(%rsp)
               	movq	%rbp, 24(%r14)
               	movq	%rbp, 32(%r14)
               	addq	$1, 40(%r14)
               	addq	%r12, 48(%r14)
               	leaq	16(%rsp), %rdi
               	callq	0x426c70 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
               	movq	%rbp, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x43dbc2 <std::__throw_bad_function_call()>
               	leaq	114798(%rip), %rdi      # 0x445162 <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x436720 <konan::consoleErrorf(char const*, ...)>
               	callq	0x436a00 <konan::abort()>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbx
               	movq	32(%rsp), %rdi
               	movl	12(%rsp), %esi
               	callq	0x426f60 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>:
               	movq	$1, 239469(%rip)        # 0x4638b8 <options+0x78>
               	movl	$2, 239467(%rip)        # 0x4638c0 <options+0x80>
               	retq
               	nopw	%cs:(%rax,%rax)

<kotlin::allocateInObjectPool(unsigned long)>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	js	0x429242 <kotlin::allocateInObjectPool(unsigned long)+0xe2>
               	movq	%rdi, %rsi
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x4291df <kotlin::allocateInObjectPool(unsigned long)+0x7f>
               	leaq	7(%rsi), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x4291df <kotlin::allocateInObjectPool(unsigned long)+0x7f>
               	movl	%ebx, %ecx
               	andl	$7, %ecx
               	testq	%rcx, %rcx
               	jne	0x4291df <kotlin::allocateInObjectPool(unsigned long)+0x7f>
               	addl	$1, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	cmpq	$9, %rsi
               	jb	0x4291c5 <kotlin::allocateInObjectPool(unsigned long)+0x65>
               	movb	7(%rax), %al
               	andb	$1, %al
               	je	0x4291c5 <kotlin::allocateInObjectPool(unsigned long)+0x65>
               	movq	$0, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rbx, %rdi
               	callq	0x436400 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413750 <memset@plt>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	leaq	-8(%rsi), %rax
               	cmpq	$131064, %rax           # imm = 0x1FFF8
               	ja	0x4291fb <kotlin::allocateInObjectPool(unsigned long)+0x9b>
               	movl	%esi, %eax
               	andl	$7, %eax
               	testq	%rax, %rax
               	jne	0x4291fb <kotlin::allocateInObjectPool(unsigned long)+0x9b>
               	popq	%rbx
               	jmp	0x436670 <_mi_heap_malloc_zero>
               	addq	$7, %rsi
               	callq	0x436670 <_mi_heap_malloc_zero>
               	testq	%rax, %rax
               	je	0x429242 <kotlin::allocateInObjectPool(unsigned long)+0xe2>
               	movq	%rax, %rbx
               	andq	$-8, %rbx
               	addq	$8, %rbx
               	testb	$7, %al
               	cmoveq	%rax, %rbx
               	cmpq	%rax, %rbx
               	je	0x429249 <kotlin::allocateInObjectPool(unsigned long)+0xe9>
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movb	96(%rdx), %cl
               	shrq	%cl, %rax
               	shlq	$6, %rax
               	orb	$2, 126(%rdx,%rax)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	movq	%rax, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_process_init>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 238084(%rip)        # 0x463470 <_mi_heap_main+0xb28>
               	jne	0x4292c2 <_mi_process_init+0x62>
               	movq	%fs:0, %rax
               	movq	%rax, 238058(%rip)      # 0x463468 <_mi_heap_main+0xb20>
               	leaq	235203(%rip), %rbx      # 0x462948 <_mi_heap_main>
               	leaq	868(%rip), %rdi         # 0x4295f0 <mi_heap_main_init>
               	callq	0x429660 <_os_random_weak>
               	movq	%rax, 238040(%rip)      # 0x463470 <_mi_heap_main+0xb28>
               	leaq	238057(%rip), %rdi      # 0x463488 <_mi_heap_main+0xb40>
               	callq	0x429770 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 238021(%rip)      # 0x463478 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 238014(%rip)      # 0x463480 <_mi_heap_main+0xb38>
               	movb	$1, 245111(%rip)        # 0x465040 <os_preloading>
               	leaq	2832(%rip), %rdi        # 0x429de0 <mi_process_done>
               	callq	0x443990 <atexit>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 245749(%rip)      # 0x4652d8 <out_len>
               	cmpq	$32768, %rax            # imm = 0x8000
               	movl	$32768, %ebx            # imm = 0x8000
               	cmovbq	%rax, %rbx
               	leaq	245735(%rip), %r14      # 0x4652e0 <out_buf>
               	movb	$0, (%rbx,%r14)
               	movq	232643(%rip), %rax      # 0x461fc8 <write+0x461fc8>
               	movq	(%rax), %rsi
               	movq	%r14, %rdi
               	callq	0x4137f0 <fputs@plt>
               	movb	$10, (%rbx,%r14)
               	leaq	34164(%rip), %rax       # 0x431890 <mi_out_buf_stderr>
               	movq	%rax, 245677(%rip)      # 0x4652d0 <mi_out_default>
               	xorl	%edi, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238879(%rip), %rsi      # 0x463850 <options+0x10>
               	movq	238856(%rip), %rdx      # 0x463840 <options>
               	leaq	115739(%rip), %rbx      # 0x44575a <typeinfo name for kotlin::gc::GCSchedulerData+0x1621>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$1, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238862(%rip), %rsi      # 0x463868 <options+0x28>
               	movq	238839(%rip), %rdx      # 0x463858 <options+0x18>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$2, %edi
               	callq	0x42bc30 <mi_option_get>
               	movl	$3, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238866(%rip), %rsi      # 0x463898 <options+0x58>
               	movq	238843(%rip), %rdx      # 0x463888 <options+0x48>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$4, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238856(%rip), %rsi      # 0x4638b0 <options+0x70>
               	movq	238833(%rip), %rdx      # 0x4638a0 <options+0x60>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$5, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238846(%rip), %rsi      # 0x4638c8 <options+0x88>
               	movq	238823(%rip), %rdx      # 0x4638b8 <options+0x78>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$6, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238836(%rip), %rsi      # 0x4638e0 <options+0xa0>
               	movq	238813(%rip), %rdx      # 0x4638d0 <options+0x90>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$7, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238826(%rip), %rsi      # 0x4638f8 <options+0xb8>
               	movq	238803(%rip), %rdx      # 0x4638e8 <options+0xa8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$8, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238816(%rip), %rsi      # 0x463910 <options+0xd0>
               	movq	238793(%rip), %rdx      # 0x463900 <options+0xc0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$9, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238806(%rip), %rsi      # 0x463928 <options+0xe8>
               	movq	238783(%rip), %rdx      # 0x463918 <options+0xd8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238796(%rip), %rsi      # 0x463940 <options+0x100>
               	movq	238773(%rip), %rdx      # 0x463930 <options+0xf0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$11, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238786(%rip), %rsi      # 0x463958 <options+0x118>
               	movq	238763(%rip), %rdx      # 0x463948 <options+0x108>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$12, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238776(%rip), %rsi      # 0x463970 <options+0x130>
               	movq	238753(%rip), %rdx      # 0x463960 <options+0x120>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$13, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238766(%rip), %rsi      # 0x463988 <options+0x148>
               	movq	238743(%rip), %rdx      # 0x463978 <options+0x138>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$14, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238756(%rip), %rsi      # 0x4639a0 <options+0x160>
               	movq	238733(%rip), %rdx      # 0x463990 <options+0x150>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$15, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238746(%rip), %rsi      # 0x4639b8 <options+0x178>
               	movq	238723(%rip), %rdx      # 0x4639a8 <options+0x168>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$16, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238736(%rip), %rsi      # 0x4639d0 <options+0x190>
               	movq	238713(%rip), %rdx      # 0x4639c0 <options+0x180>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$17, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238726(%rip), %rsi      # 0x4639e8 <options+0x1a8>
               	movq	238703(%rip), %rdx      # 0x4639d8 <options+0x198>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238716(%rip), %rsi      # 0x463a00 <options+0x1c0>
               	movq	238693(%rip), %rdx      # 0x4639f0 <options+0x1b0>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$19, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	238706(%rip), %rsi      # 0x463a18 <options+0x1d8>
               	movq	238683(%rip), %rdx      # 0x463a08 <options+0x1c8>
               	movq	%rbx, %rdi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$18, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	%rax, 238680(%rip)      # 0x463a20 <mi_max_error_count>
               	movl	$19, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	%rax, 238175(%rip)      # 0x463838 <mi_max_warning_count>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	jmp	0x42a520 <mi_process_init>
               	nopw	%cs:(%rax,%rax)

<mi_heap_main_init>:
               	pushq	%rbx
               	cmpq	$0, 237175(%rip)        # 0x463470 <_mi_heap_main+0xb28>
               	je	0x4295fd <mi_heap_main_init+0xd>
               	popq	%rbx
               	retq
               	movq	%fs:0, %rax
               	movq	%rax, 237147(%rip)      # 0x463468 <_mi_heap_main+0xb20>
               	leaq	234292(%rip), %rbx      # 0x462948 <_mi_heap_main>
               	leaq	-43(%rip), %rdi         # 0x4295f0 <mi_heap_main_init>
               	callq	0x429660 <_os_random_weak>
               	movq	%rax, 237129(%rip)      # 0x463470 <_mi_heap_main+0xb28>
               	leaq	237146(%rip), %rdi      # 0x463488 <_mi_heap_main+0xb40>
               	callq	0x429770 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 237110(%rip)      # 0x463478 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 237103(%rip)      # 0x463480 <_mi_heap_main+0xb38>
               	popq	%rbx
               	retq
               	nopw	%cs:(%rax,%rax)

<_os_random_weak>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movabsq	$-4658895280553007687, %r15 # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r14 # imm = 0x94D049BB133111EB
               	leaq	-36(%rip), %rbx         # 0x429660 <_os_random_weak>
               	xorq	%rdi, %rbx
               	movq	%rsp, %rsi
               	movl	$1, %edi
               	callq	0x413800 <clock_gettime@plt>
               	xorq	(%rsp), %rbx
               	xorq	8(%rsp), %rbx
               	movl	%ebx, %ecx
               	shrl	$17, %ecx
               	xorl	%ebx, %ecx
               	andl	$15, %ecx
               	leaq	1(%rcx), %rax
               	testq	%rcx, %rcx
               	je	0x42972b <_os_random_weak+0xcb>
               	movl	%eax, %ecx
               	andl	$-2, %ecx
               	negq	%rcx
               	jmp	0x4296ec <_os_random_weak+0x8c>
               	nopl	(%rax)
               	movq	%rdx, %rsi
               	shrq	$30, %rsi
               	xorq	%rdx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rdx
               	shrq	$27, %rdx
               	xorq	%rsi, %rdx
               	imulq	%r14, %rdx
               	movq	%rdx, %rbx
               	shrq	$31, %rbx
               	xorq	%rdx, %rbx
               	addq	$2, %rcx
               	je	0x42972b <_os_random_weak+0xcb>
               	movl	$17, %edx
               	movl	$17, %esi
               	testq	%rbx, %rbx
               	je	0x4296fe <_os_random_weak+0x9e>
               	movq	%rbx, %rsi
               	movq	%rsi, %rdi
               	shrq	$30, %rdi
               	xorq	%rsi, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rsi
               	shrq	$27, %rsi
               	xorq	%rdi, %rsi
               	imulq	%r14, %rsi
               	movq	%rsi, %rdi
               	shrq	$31, %rdi
               	xorq	%rsi, %rdi
               	je	0x4296c0 <_os_random_weak+0x60>
               	movq	%rdi, %rdx
               	jmp	0x4296c0 <_os_random_weak+0x60>
               	testb	$1, %al
               	je	0x429761 <_os_random_weak+0x101>
               	testq	%rbx, %rbx
               	movl	$17, %eax
               	cmovneq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r14, %rax
               	movq	%rax, %rbx
               	shrq	$31, %rbx
               	xorq	%rax, %rbx
               	movq	%rbx, %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<_mi_random_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%rdi, %r14
               	movq	%rsp, %rsi
               	movl	$318, %edi              # imm = 0x13E
               	movl	$32, %edx
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x413810 <syscall@plt>
               	cmpq	$32, %rax
               	jne	0x429856 <_mi_random_init+0xe6>
               	movb	(%rsp), %r8b
               	movb	1(%rsp), %r15b
               	movb	2(%rsp), %dil
               	movb	3(%rsp), %al
               	movl	%eax, 44(%rsp)
               	movb	4(%rsp), %cl
               	movb	5(%rsp), %al
               	movl	%eax, 52(%rsp)
               	movb	6(%rsp), %al
               	movl	%eax, 48(%rsp)
               	movb	7(%rsp), %al
               	movl	%eax, 64(%rsp)
               	movb	8(%rsp), %dl
               	movb	9(%rsp), %al
               	movl	%eax, 76(%rsp)
               	movb	10(%rsp), %al
               	movl	%eax, 92(%rsp)
               	movb	11(%rsp), %al
               	movl	%eax, 100(%rsp)
               	movb	12(%rsp), %sil
               	movb	13(%rsp), %al
               	movl	%eax, 60(%rsp)
               	movb	14(%rsp), %al
               	movl	%eax, 80(%rsp)
               	movb	15(%rsp), %al
               	movl	%eax, 96(%rsp)
               	movb	16(%rsp), %r10b
               	movb	17(%rsp), %r13b
               	movb	18(%rsp), %al
               	movl	%eax, 56(%rsp)
               	movb	19(%rsp), %al
               	movl	%eax, 88(%rsp)
               	movb	20(%rsp), %r11b
               	movb	21(%rsp), %bpl
               	movb	22(%rsp), %r12b
               	movb	23(%rsp), %al
               	movl	%eax, 68(%rsp)
               	movb	24(%rsp), %r9b
               	movb	25(%rsp), %al
               	movl	%eax, 72(%rsp)
               	movb	26(%rsp), %al
               	jmp	0x429b97 <_mi_random_init+0x427>
               	movabsq	$-4658895280553007687, %rbx # imm = 0xBF58476D1CE4E5B9
               	movabsq	$-7723592293110705685, %r15 # imm = 0x94D049BB133111EB
               	leaq	114886(%rip), %rdi      # 0x445937 <typeinfo name for kotlin::gc::GCSchedulerData+0x17fe>
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	leaq	104(%rsp), %rsi
               	movl	$1, %edi
               	callq	0x413800 <clock_gettime@plt>
               	leaq	-558(%rip), %rcx        # 0x429660 <_os_random_weak>
               	xorq	104(%rsp), %rcx
               	xorq	112(%rsp), %rcx
               	movl	%ecx, %edx
               	shrl	$17, %edx
               	xorl	%ecx, %edx
               	andl	$15, %edx
               	leaq	1(%rdx), %rax
               	testq	%rdx, %rdx
               	je	0x42992b <_mi_random_init+0x1bb>
               	movl	%eax, %edx
               	andl	$-2, %edx
               	negq	%rdx
               	jmp	0x4298ec <_mi_random_init+0x17c>
               	nopl	(%rax)
               	movq	%rsi, %rcx
               	shrq	$30, %rcx
               	xorq	%rsi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rsi
               	shrq	$27, %rsi
               	xorq	%rcx, %rsi
               	imulq	%r15, %rsi
               	movq	%rsi, %rcx
               	shrq	$31, %rcx
               	xorq	%rsi, %rcx
               	addq	$2, %rdx
               	je	0x42992b <_mi_random_init+0x1bb>
               	movl	$17, %esi
               	movl	$17, %edi
               	testq	%rcx, %rcx
               	je	0x4298fe <_mi_random_init+0x18e>
               	movq	%rcx, %rdi
               	movq	%rdi, %rcx
               	shrq	$30, %rcx
               	xorq	%rdi, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rdi
               	shrq	$27, %rdi
               	xorq	%rcx, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rcx
               	shrq	$31, %rcx
               	xorq	%rdi, %rcx
               	je	0x4298c0 <_mi_random_init+0x150>
               	movq	%rcx, %rsi
               	jmp	0x4298c0 <_mi_random_init+0x150>
               	testb	$1, %al
               	je	0x429961 <_mi_random_init+0x1f1>
               	testq	%rcx, %rcx
               	movl	$17, %eax
               	cmovneq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	testq	%rcx, %rcx
               	movl	$17, %ebp
               	cmoveq	%rbp, %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rcx
               	shrq	$27, %rcx
               	xorq	%rax, %rcx
               	imulq	%r15, %rcx
               	movq	%rcx, %r8
               	shrq	$31, %r8
               	xorq	%rcx, %r8
               	movq	%r8, %rax
               	cmoveq	%rbp, %rax
               	movl	%r8d, (%rsp)
               	movq	%rax, %rcx
               	shrq	$30, %rcx
               	xorq	%rax, %rcx
               	imulq	%rbx, %rcx
               	movq	%rcx, %rax
               	shrq	$27, %rax
               	xorq	%rcx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rcx
               	shrq	$31, %rcx
               	xorq	%rax, %rcx
               	movl	%ecx, 4(%rsp)
               	movq	%rcx, %rax
               	cmoveq	%rbp, %rax
               	movq	%rax, %rdx
               	shrq	$30, %rdx
               	xorq	%rax, %rdx
               	imulq	%rbx, %rdx
               	movq	%rdx, %rax
               	shrq	$27, %rax
               	xorq	%rdx, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$31, %rdx
               	xorq	%rax, %rdx
               	movl	%edx, 8(%rsp)
               	movq	%rdx, %rax
               	cmoveq	%rbp, %rax
               	movq	%rax, %rsi
               	shrq	$30, %rsi
               	xorq	%rax, %rsi
               	imulq	%rbx, %rsi
               	movq	%rsi, %rax
               	shrq	$27, %rax
               	xorq	%rsi, %rax
               	imulq	%r15, %rax
               	movq	%rax, %rsi
               	shrq	$31, %rsi
               	xorq	%rax, %rsi
               	movl	%esi, 12(%rsp)
               	movq	%rsi, %rax
               	cmoveq	%rbp, %rax
               	movq	%rax, %rdi
               	shrq	$30, %rdi
               	xorq	%rax, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rax
               	shrq	$27, %rax
               	xorq	%rdi, %rax
               	imulq	%r15, %rax
               	movq	%rax, %r10
               	shrq	$31, %r10
               	xorq	%rax, %r10
               	movq	%r10, %rax
               	cmoveq	%rbp, %rax
               	movl	%r10d, 16(%rsp)
               	movq	%rax, %rdi
               	shrq	$30, %rdi
               	xorq	%rax, %rdi
               	imulq	%rbx, %rdi
               	movq	%rdi, %rax
               	shrq	$27, %rax
               	xorq	%rdi, %rax
               	imulq	%r15, %rax
               	movq	%rax, %r11
               	shrq	$31, %r11
               	xorq	%rax, %r11
               	movl	%r11d, 20(%rsp)
               	movq	%r11, %rdi
               	cmoveq	%rbp, %rdi
               	movq	%rdi, %rax
               	shrq	$30, %rax
               	xorq	%rdi, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rdi
               	shrq	$27, %rdi
               	xorq	%rax, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %r9
               	shrq	$31, %r9
               	xorq	%rdi, %r9
               	movl	%r9d, 24(%rsp)
               	cmovneq	%r9, %rbp
               	movq	%rbp, %rax
               	shrq	$30, %rax
               	xorq	%rbp, %rax
               	imulq	%rbx, %rax
               	movq	%rax, %rdi
               	shrq	$27, %rdi
               	xorq	%rax, %rdi
               	imulq	%r15, %rdi
               	movq	%rdi, %rax
               	shrq	$31, %rax
               	xorl	%edi, %eax
               	movl	%eax, 28(%rsp)
               	movl	%r8d, %r15d
               	shrl	$8, %r15d
               	movl	%r8d, %edi
               	shrl	$16, %edi
               	movl	%r8d, %eax
               	shrl	$24, %eax
               	movl	%eax, 44(%rsp)
               	movl	%ecx, %eax
               	shrl	$8, %eax
               	movl	%eax, 52(%rsp)
               	movl	%ecx, %eax
               	shrl	$16, %eax
               	movl	%eax, 48(%rsp)
               	movl	%ecx, %eax
               	shrl	$24, %eax
               	movl	%eax, 64(%rsp)
               	movl	%edx, %eax
               	shrl	$8, %eax
               	movl	%eax, 76(%rsp)
               	movl	%edx, %eax
               	shrl	$16, %eax
               	movl	%eax, 92(%rsp)
               	movl	%edx, %eax
               	shrl	$24, %eax
               	movl	%eax, 100(%rsp)
               	movl	%esi, %eax
               	shrl	$8, %eax
               	movl	%eax, 60(%rsp)
               	movl	%esi, %eax
               	shrl	$16, %eax
               	movl	%eax, 80(%rsp)
               	movl	%esi, %eax
               	shrl	$24, %eax
               	movl	%eax, 96(%rsp)
               	movl	%r10d, %r13d
               	shrl	$8, %r13d
               	movl	%r10d, %eax
               	shrl	$16, %eax
               	movl	%eax, 56(%rsp)
               	movl	%r10d, %eax
               	shrl	$24, %eax
               	movl	%eax, 88(%rsp)
               	movl	%r11d, %ebp
               	shrl	$8, %ebp
               	movl	%r11d, %r12d
               	shrl	$16, %r12d
               	movl	%r11d, %eax
               	shrl	$24, %eax
               	movl	%eax, 68(%rsp)
               	movl	%r9d, %eax
               	shrl	$8, %eax
               	movl	%eax, 72(%rsp)
               	movl	%r9d, %eax
               	shrl	$16, %eax
               	movl	%eax, 84(%rsp)
               	movzbl	%r8b, %ebx
               	movzbl	%r15b, %eax
               	shll	$8, %eax
               	orl	%ebx, %eax
               	movzbl	%dil, %edi
               	shll	$16, %edi
               	orl	%eax, %edi
               	movzbl	44(%rsp), %eax
               	shll	$24, %eax
               	orl	%edi, %eax
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 116(%r14)
               	movdqu	%xmm0, 104(%r14)
               	movdqu	%xmm0, 88(%r14)
               	movdqu	%xmm0, 72(%r14)
               	movdqu	%xmm0, 56(%r14)
               	movaps	106140(%rip), %xmm1     # 0x443a80 <_IO_stdin_used+0x80>
               	movups	%xmm1, (%r14)
               	movl	%eax, 16(%r14)
               	movzbl	%cl, %eax
               	movzbl	52(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	48(%rsp), %edi
               	shll	$16, %edi
               	orl	%ecx, %edi
               	movzbl	%r10b, %eax
               	movzbl	%r11b, %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	movzbl	%dl, %eax
               	movzbl	%sil, %edx
               	shll	$8, %edx
               	orl	%eax, %edx
               	movd	%edx, %xmm1
               	pinsrw	$1, %ecx, %xmm1
               	movzbl	64(%rsp), %eax
               	shll	$24, %eax
               	orl	%edi, %eax
               	movzbl	%r13b, %ecx
               	movzbl	%bpl, %edx
               	shll	$8, %edx
               	orl	%ecx, %edx
               	movzbl	76(%rsp), %ecx
               	movzbl	60(%rsp), %esi
               	shll	$8, %esi
               	orl	%ecx, %esi
               	movd	%esi, %xmm2
               	pinsrw	$1, %edx, %xmm2
               	movzbl	56(%rsp), %ecx
               	movzbl	%r12b, %edx
               	shll	$8, %edx
               	orl	%ecx, %edx
               	movzbl	92(%rsp), %ecx
               	movzbl	80(%rsp), %esi
               	shll	$8, %esi
               	orl	%ecx, %esi
               	movd	%esi, %xmm3
               	pinsrw	$1, %edx, %xmm3
               	movzbl	100(%rsp), %ecx
               	movd	%ecx, %xmm4
               	movzbl	96(%rsp), %ecx
               	pinsrw	$2, %ecx, %xmm4
               	movl	%eax, 20(%r14)
               	movzbl	88(%rsp), %eax
               	pinsrw	$4, %eax, %xmm4
               	movzbl	68(%rsp), %eax
               	pinsrw	$6, %eax, %xmm4
               	movzbl	%r9b, %eax
               	movzbl	72(%rsp), %ecx
               	shll	$8, %ecx
               	orl	%eax, %ecx
               	punpcklbw	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3],xmm1[4],xmm0[4],xmm1[5],xmm0[5],xmm1[6],xmm0[6],xmm1[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1],xmm1[2],xmm0[2],xmm1[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
               	punpcklwd	%xmm0, %xmm2    # xmm2 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
               	punpcklbw	%xmm0, %xmm3    # xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3],xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
               	punpcklwd	%xmm3, %xmm0    # xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1],xmm0[2],xmm3[2],xmm0[3],xmm3[3]
               	pslld	$8, %xmm2
               	por	%xmm1, %xmm0
               	por	%xmm2, %xmm0
               	pslld	$24, %xmm4
               	por	%xmm0, %xmm4
               	movdqu	%xmm4, 24(%r14)
               	movzbl	84(%rsp), %eax
               	shll	$16, %eax
               	orl	%ecx, %eax
               	movzbl	27(%rsp), %ecx
               	shll	$24, %ecx
               	orl	%eax, %ecx
               	movl	%ecx, 40(%r14)
               	movl	28(%rsp), %eax
               	movl	%eax, 44(%r14)
               	movq	$0, 48(%r14)
               	movl	%r14d, 56(%r14)
               	movq	%r14, %rax
               	shrq	$32, %rax
               	movl	%eax, 60(%r14)
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<_mi_heap_random_next>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	leaq	2880(%rdi), %r14
               	movl	3008(%rdi), %eax
               	testl	%eax, %eax
               	jg	0x429d62 <_mi_heap_random_next+0x32>
               	movq	%r14, %rdi
               	callq	0x4329c0 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	movl	$16, %ebp
               	movl	$16, %ecx
               	subl	%eax, %ecx
               	movslq	%ecx, %rax
               	movl	2944(%rbx,%rax,4), %r15d
               	movl	$0, 2944(%rbx,%rax,4)
               	movl	3008(%rbx), %ecx
               	leal	-1(%rcx), %eax
               	movl	%eax, 3008(%rbx)
               	cmpl	$1, %ecx
               	jg	0x429daf <_mi_heap_random_next+0x7f>
               	movq	%r14, %rdi
               	callq	0x4329c0 <chacha_block>
               	movl	$16, 3008(%rbx)
               	movl	$16, %eax
               	shlq	$32, %r15
               	subl	%eax, %ebp
               	movslq	%ebp, %rcx
               	movl	2944(%rbx,%rcx,4), %eax
               	orq	%r15, %rax
               	movl	$0, 2944(%rbx,%rcx,4)
               	addl	$-1, 3008(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_process_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$472, %rsp              # imm = 0x1D8
               	cmpb	$1, 241620(%rip)        # 0x464dcc <_mi_process_is_initialized>
               	jne	0x42a4fb <mi_process_done+0x71b>
               	cmpb	$0, 341651(%rip)        # 0x47d498 <mi_process_done.process_done>
               	jne	0x42a4fb <mi_process_done+0x71b>
               	movb	$1, 341638(%rip)        # 0x47d498 <mi_process_done.process_done>
               	movq	$-80, %rbx
               	movq	%fs:(%rbx), %rdi
               	movl	$1, %esi
               	callq	0x42d6e0 <mi_heap_collect_ex>
               	movl	$1, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x429e49 <mi_process_done+0x69>
               	movl	$2, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42a4df <mi_process_done+0x6ff>
               	callq	0x42ba30 <mi_thread_init>
               	movq	%fs:(%rbx), %rax
               	movl	$176, %edi
               	addq	(%rax), %rdi
               	callq	0x42d1f0 <mi_stats_merge_from>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	105506(%rip), %xmm0     # 0x443a90 <_IO_stdin_used+0x90>
               	movups	%xmm0, 40(%rsp)
               	leaq	208(%rsp), %rax
               	movq	%rax, 32(%rsp)
               	leaq	112978(%rip), %rdi      # 0x4457d9 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a0>
               	leaq	112964(%rip), %rbp      # 0x4457d2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1699>
               	leaq	112947(%rip), %r10      # 0x4457c8 <typeinfo name for kotlin::gc::GCSchedulerData+0x168f>
               	leaq	112932(%rip), %r11      # 0x4457c0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1687>
               	leaq	112862(%rip), %rdx      # 0x445781 <typeinfo name for kotlin::gc::GCSchedulerData+0x1648>
               	leaq	112892(%rip), %rcx      # 0x4457a6 <typeinfo name for kotlin::gc::GCSchedulerData+0x166d>
               	leaq	112896(%rip), %r8       # 0x4457b1 <typeinfo name for kotlin::gc::GCSchedulerData+0x1678>
               	leaq	112896(%rip), %r9       # 0x4457b8 <typeinfo name for kotlin::gc::GCSchedulerData+0x167f>
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %rbx
               	movq	%rbx, %rsi
               	movl	$0, %eax
               	pushq	%rdi
               	pushq	%rbp
               	pushq	%r10
               	pushq	%r11
               	callq	0x431a80 <_mi_fprintf>
               	addq	$32, %rsp
               	leaq	241506(%rip), %rdi      # 0x464e40 <_mi_stats_main+0x40>
               	leaq	112892(%rip), %rsi      # 0x4457e1 <typeinfo name for kotlin::gc::GCSchedulerData+0x16a8>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241415(%rip), %rbp      # 0x464e00 <_mi_stats_main>
               	leaq	241504(%rip), %rdi      # 0x464e60 <_mi_stats_main+0x60>
               	leaq	112867(%rip), %rsi      # 0x4457ea <typeinfo name for kotlin::gc::GCSchedulerData+0x16b1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241509(%rip), %rdi      # 0x464e80 <_mi_stats_main+0x80>
               	leaq	112850(%rip), %rsi      # 0x4457f4 <typeinfo name for kotlin::gc::GCSchedulerData+0x16bb>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241514(%rip), %rdi      # 0x464ea0 <_mi_stats_main+0xa0>
               	leaq	112829(%rip), %rsi      # 0x4457fa <typeinfo name for kotlin::gc::GCSchedulerData+0x16c1>
               	movl	$1, %edx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	112817(%rip), %rsi      # 0x445802 <typeinfo name for kotlin::gc::GCSchedulerData+0x16c9>
               	movq	%rbp, %rdi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241494(%rip), %rdi      # 0x464ec0 <_mi_stats_main+0xc0>
               	leaq	112794(%rip), %rbp      # 0x44580b <typeinfo name for kotlin::gc::GCSchedulerData+0x16d2>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241686(%rip), %rdi      # 0x464fa0 <_mi_stats_main+0x1a0>
               	leaq	112773(%rip), %rsi      # 0x445816 <typeinfo name for kotlin::gc::GCSchedulerData+0x16dd>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241273(%rip), %rdi      # 0x464e20 <_mi_stats_main+0x20>
               	leaq	112752(%rip), %rsi      # 0x44581e <typeinfo name for kotlin::gc::GCSchedulerData+0x16e5>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241436(%rip), %rdi      # 0x464ee0 <_mi_stats_main+0xe0>
               	movq	%rbp, %rsi
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	leaq	241635(%rip), %rdi      # 0x464fc0 <_mi_stats_main+0x1c0>
               	leaq	112704(%rip), %rsi      # 0x445824 <typeinfo name for kotlin::gc::GCSchedulerData+0x16eb>
               	movq	%rbx, %rdx
               	callq	0x432870 <mi_stat_counter_print>
               	leaq	241661(%rip), %rdi      # 0x464ff0 <_mi_stats_main+0x1f0>
               	leaq	112692(%rip), %rsi      # 0x44582e <typeinfo name for kotlin::gc::GCSchedulerData+0x16f5>
               	movq	%rbx, %rdx
               	callq	0x432870 <mi_stat_counter_print>
               	leaq	241607(%rip), %rdi      # 0x464fd0 <_mi_stats_main+0x1d0>
               	leaq	112680(%rip), %rsi      # 0x445838 <typeinfo name for kotlin::gc::GCSchedulerData+0x16ff>
               	movq	%rbx, %rdx
               	callq	0x432870 <mi_stat_counter_print>
               	leaq	241601(%rip), %rdi      # 0x464fe0 <_mi_stats_main+0x1e0>
               	leaq	112664(%rip), %rsi      # 0x44583e <typeinfo name for kotlin::gc::GCSchedulerData+0x1705>
               	movq	%rbx, %rdx
               	callq	0x432870 <mi_stat_counter_print>
               	leaq	241355(%rip), %rdi      # 0x464f00 <_mi_stats_main+0x100>
               	leaq	112650(%rip), %rsi      # 0x445846 <typeinfo name for kotlin::gc::GCSchedulerData+0x170d>
               	movq	$-1, %rdx
               	movq	%rbx, %rcx
               	callq	0x431ba0 <mi_stat_print>
               	movq	241590(%rip), %rcx      # 0x465008 <_mi_stats_main+0x208>
               	testq	%rcx, %rcx
               	je	0x42a082 <mi_process_done+0x2a2>
               	movq	241570(%rip), %rax      # 0x465000 <_mi_stats_main+0x200>
               	addq	%rax, %rax
               	leaq	(%rax,%rax,4), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x42a07b <mi_process_done+0x29b>
               	cqto
               	idivq	%rcx
               	movq	%rax, %r14
               	jmp	0x42a082 <mi_process_done+0x2a2>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %r14d
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%r14, %rax
               	imulq	%rcx
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %r8
               	addq	%rax, %r8
               	leaq	(%r8,%r8), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %r14
               	leaq	112537(%rip), %rdx      # 0x44584e <typeinfo name for kotlin::gc::GCSchedulerData+0x1715>
               	leaq	112550(%rip), %rcx      # 0x445862 <typeinfo name for kotlin::gc::GCSchedulerData+0x1729>
               	leaq	16(%rsp), %rsi
               	movq	%r14, %r9
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	275014(%rip), %r8       # 0x46d318 <_mi_numa_node_count>
               	testq	%r8, %r8
               	je	0x42a50d <mi_process_done+0x72d>
               	leaq	112521(%rip), %rdx      # 0x44586b <typeinfo name for kotlin::gc::GCSchedulerData+0x1732>
               	leaq	112525(%rip), %rcx      # 0x445876 <typeinfo name for kotlin::gc::GCSchedulerData+0x173d>
               	leaq	16(%rsp), %r15
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	275025(%rip), %rbx      # 0x46d350 <mi_process_start>
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	72(%rsp)
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	addq	274954(%rip), %rbx      # 0x46d348 <mi_clock_diff>
               	subq	%rbx, %rbp
               	leaq	64(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413820 <getrusage@plt>
               	imulq	$1000, 64(%rsp), %rcx   # imm = 0x3E8
               	movabsq	$2361183241434822607, %r14 # imm = 0x20C49BA5E353F7CF
               	movq	%r14, %rax
               	imulq	72(%rsp)
               	movq	%rdx, %r13
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r13
               	addq	%rax, %r13
               	imulq	$1000, 80(%rsp), %rsi   # imm = 0x3E8
               	addq	%rcx, %r13
               	movq	%r14, %rax
               	imulq	88(%rsp)
               	movq	%rdx, %rbx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rbx
               	addq	%rax, %rbx
               	addq	%rsi, %rbx
               	movq	136(%rsp), %rax
               	movq	%rax, 56(%rsp)
               	movq	240827(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	movq	%rax, 8(%rsp)
               	movq	240823(%rip), %rax      # 0x464e78 <_mi_stats_main+0x78>
               	movq	96(%rsp), %r12
               	shlq	$10, %r12
               	movq	%rbp, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %rbp
               	leaq	112271(%rip), %rdx      # 0x445881 <typeinfo name for kotlin::gc::GCSchedulerData+0x1748>
               	leaq	112284(%rip), %rcx      # 0x445895 <typeinfo name for kotlin::gc::GCSchedulerData+0x175c>
               	movq	%r15, %rsi
               	movq	%rbp, %r9
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	%r13, %rax
               	imulq	%r14
               	movq	%rdx, %r8
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %r8
               	addq	%rax, %r8
               	imulq	$1000, %r8, %rax        # imm = 0x3E8
               	subq	%rax, %r13
               	movq	%rbx, %rax
               	imulq	%r14
               	movq	%rdx, %rdi
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$7, %rdi
               	addq	%rax, %rdi
               	imulq	$1000, %rdi, %rax       # imm = 0x3E8
               	subq	%rax, %rbx
               	subq	$8, %rsp
               	leaq	112202(%rip), %rdx      # 0x44589d <typeinfo name for kotlin::gc::GCSchedulerData+0x1764>
               	leaq	112260(%rip), %rcx      # 0x4458de <typeinfo name for kotlin::gc::GCSchedulerData+0x17a5>
               	movq	%r15, %rsi
               	movq	%r13, %r9
               	movl	$0, %eax
               	pushq	64(%rsp)
               	pushq	%rbx
               	pushq	%rdi
               	callq	0x431a80 <_mi_fprintf>
               	addq	$32, %rsp
               	movq	%r12, %rax
               	negq	%rax
               	cmovlq	%r12, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x42a2b2 <mi_process_done+0x4d2>
               	leaq	112217(%rip), %rdx      # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	112217(%rip), %r8       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%r12d, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	movq	8(%rsp), %rbx
               	jmp	0x42a380 <mi_process_done+0x5a0>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	112176(%rip), %rcx      # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	112171(%rip), %rdx      # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	112138(%rip), %r9       # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%r12, %rax
               	shrq	$32, %rax
               	je	0x42a314 <mi_process_done+0x534>
               	movq	%r12, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x42a31d <mi_process_done+0x53d>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	8(%rsp), %rbx
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	112010(%rip), %rbp      # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	112011(%rip), %rdx      # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x413830 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	112325(%rip), %rdx      # 0x445a4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	testq	%rbx, %rbx
               	je	0x42a4cc <mi_process_done+0x6ec>
               	leaq	111962(%rip), %rdx      # 0x445902 <typeinfo name for kotlin::gc::GCSchedulerData+0x17c9>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	%rbx, %rax
               	negq	%rax
               	cmovlq	%rbx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x42a3ec <mi_process_done+0x60c>
               	leaq	111897(%rip), %rdx      # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	111897(%rip), %r8       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	64(%rsp), %rdi
               	movl	$32, %esi
               	movl	%ebx, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x42a4b4 <mi_process_done+0x6d4>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	111862(%rip), %rcx      # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	111857(%rip), %rdx      # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rcx, %rdx
               	movl	$1024, %ecx             # imm = 0x400
               	movl	$1048576, %esi          # imm = 0x100000
               	cmovlq	%rcx, %rsi
               	movq	%rsi, %rdi
               	shlq	$10, %rdi
               	cmpq	%rdi, %rax
               	leaq	111824(%rip), %r9       # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rdx, %r9
               	cmovlq	%rsi, %rdi
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdi, %rcx
               	shrq	$35, %rcx
               	movq	%rbx, %rax
               	shrq	$32, %rax
               	je	0x42a44e <mi_process_done+0x66e>
               	movq	%rbx, %rax
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x42a456 <mi_process_done+0x676>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movq	%rsi, %rax
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	subq	$8, %rsp
               	leaq	111702(%rip), %rbp      # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	111703(%rip), %rdx      # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	72(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	pushq	%rbp
               	callq	0x413830 <snprintf@plt>
               	addq	$16, %rsp
               	leaq	112017(%rip), %rdx      # 0x445a4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	leaq	16(%rsp), %rsi
               	leaq	64(%rsp), %rcx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	112154(%rip), %rdx      # 0x445aed <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	leaq	16(%rsp), %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	233346(%rip), %rsi      # 0x463468 <_mi_heap_main+0xb20>
               	leaq	111231(%rip), %rdi      # 0x44576c <typeinfo name for kotlin::gc::GCSchedulerData+0x1633>
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movb	$0, 240453(%rip)        # 0x465040 <os_preloading>
               	addq	$472, %rsp              # imm = 0x1D8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42cfe0 <_mi_os_numa_node_count_get>
               	movq	%rax, %r8
               	jmp	0x42a0db <mi_process_done+0x2fb>
               	nopw	(%rax,%rax)

<mi_process_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	cmpb	$0, 239767(%rip)        # 0x464dcc <_mi_process_is_initialized>
               	jne	0x42b2ec <mi_process_init+0xdcc>
               	movb	$1, 239754(%rip)        # 0x464dcc <_mi_process_is_initialized>
               	cmpb	$0, 240376(%rip)        # 0x465041 <mi_process_setup_auto_thread_done.tls_initialized>
               	jne	0x42a58e <mi_process_init+0x6e>
               	movb	$1, 240367(%rip)        # 0x465041 <mi_process_setup_auto_thread_done.tls_initialized>
               	leaq	234191(%rip), %rdi      # 0x463828 <_mi_heap_default_key>
               	leaq	3504(%rip), %rsi        # 0x42b310 <mi_pthread_done>
               	callq	0x413840 <pthread_key_create@plt>
               	leaq	230364(%rip), %rax      # 0x462948 <_mi_heap_main>
               	movq	$-80, %rcx
               	movq	%rax, %fs:(%rcx)
               	movl	234155(%rip), %edi      # 0x463828 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42a58e <mi_process_init+0x6e>
               	leaq	230335(%rip), %rsi      # 0x462948 <_mi_heap_main>
               	callq	0x413850 <pthread_setspecific@plt>
               	movq	%fs:0, %rsi
               	leaq	109563(%rip), %rdi      # 0x445199 <typeinfo name for kotlin::gc::GCSchedulerData+0x1060>
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movl	$30, %edi
               	callq	0x413860 <sysconf@plt>
               	testq	%rax, %rax
               	jle	0x42a5bb <mi_process_init+0x9b>
               	movq	%rax, 234101(%rip)      # 0x463830 <os_page_size>
               	movb	$1, 273702(%rip)        # 0x46d2e8 <large_os_page_size>
               	cmpq	$0, 233126(%rip)        # 0x463470 <_mi_heap_main+0xb28>
               	jne	0x42a620 <mi_process_init+0x100>
               	movq	%fs:0, %rax
               	movq	%rax, 233100(%rip)      # 0x463468 <_mi_heap_main+0xb20>
               	leaq	230245(%rip), %rbx      # 0x462948 <_mi_heap_main>
               	leaq	-4090(%rip), %rdi       # 0x4295f0 <mi_heap_main_init>
               	callq	0x429660 <_os_random_weak>
               	movq	%rax, 233082(%rip)      # 0x463470 <_mi_heap_main+0xb28>
               	leaq	233099(%rip), %rdi      # 0x463488 <_mi_heap_main+0xb40>
               	callq	0x429770 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 233063(%rip)      # 0x463478 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 233056(%rip)      # 0x463480 <_mi_heap_main+0xb38>
               	leaq	109447(%rip), %rdi      # 0x4451ae <typeinfo name for kotlin::gc::GCSchedulerData+0x1075>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	callq	0x42ba30 <mi_thread_init>
               	callq	0x42ba30 <mi_thread_init>
               	movq	$-80, %r15
               	movq	%fs:(%r15), %rax
               	movl	$176, %edi
               	addq	(%rax), %rdi
               	leaq	239532(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x42a665 <mi_process_init+0x145>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	leaq	239508(%rip), %rdi      # 0x464e00 <_mi_stats_main>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	cmpq	$0, 273616(%rip)        # 0x46d350 <mi_process_start>
               	jne	0x42a742 <mi_process_init+0x222>
               	cmpq	$0, 273594(%rip)        # 0x46d348 <mi_clock_diff>
               	jne	0x42a706 <mi_process_init+0x1e6>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	movabsq	$-4835703278458516699, %rax # imm = 0xBCE4217D2849CB25
               	imulq	16(%rsp)
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 273474(%rip)      # 0x46d348 <mi_clock_diff>
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rdx
               	addq	%rax, %rdx
               	addq	%rcx, %rdx
               	movq	%rdx, 273422(%rip)      # 0x46d350 <mi_process_start>
               	movl	$7, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b0db <mi_process_init+0xbbb>
               	movl	$7, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b0db <mi_process_init+0xbbb>
               	movq	%rax, %rbx
               	movq	273318(%rip), %rax      # 0x46d318 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x42b2fb <mi_process_init+0xddb>
               	imulq	$500, %rbx, %rcx        # imm = 0x1F4
               	testq	%rax, %rax
               	movl	$1, %esi
               	cmovneq	%rax, %rsi
               	movq	%rbx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42a7c7 <mi_process_init+0x2a7>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	je	0x42a7dc <mi_process_init+0x2bc>
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42a7e0 <mi_process_init+0x2c0>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42a7e6 <mi_process_init+0x2c6>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rdx, 56(%rsp)
               	movq	%rax, 48(%rsp)
               	testq	%rcx, %rcx
               	jne	0x42a7b1 <mi_process_init+0x291>
               	xorl	%eax, %eax
               	jmp	0x42a7ea <mi_process_init+0x2ca>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	addq	$50, %rax
               	leaq	(%rax,%rax), %rcx
               	movq	%rcx, 88(%rsp)
               	movq	%rax, 32(%rsp)
               	addq	$1, %rax
               	movq	%rax, 80(%rsp)
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	xorl	%ecx, %ecx
               	movq	%rsi, 40(%rsp)
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	xorl	%r12d, %r12d
               	cmpq	56(%rsp), %rcx
               	setb	%r12b
               	addq	48(%rsp), %r12
               	je	0x42af7b <mi_process_init+0xa5b>
               	testl	%ecx, %ecx
               	movq	%rbx, 72(%rsp)
               	movq	%rcx, 64(%rsp)
               	js	0x42a870 <mi_process_init+0x350>
               	movl	%ecx, %ebp
               	movq	273098(%rip), %rcx      # 0x46d318 <_mi_numa_node_count>
               	testq	%rcx, %rcx
               	je	0x42afc7 <mi_process_init+0xaa7>
               	cmpq	%rcx, %rbp
               	jb	0x42a864 <mi_process_init+0x344>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %ebp
               	movq	%rbp, 24(%rsp)
               	jmp	0x42a87a <mi_process_init+0x35a>
               	nop
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movq	%rax, 24(%rsp)
               	movq	%r12, %rbp
               	shlq	$30, %rbp
               	movq	273080(%rip), %rbx      # 0x46d340 <mi_huge_start>
               	jmp	0x42a8a5 <mi_process_init+0x385>
               	nopl	(%rax)
               	leaq	(%r14,%rbp), %rcx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rcx, 273056(%rip)      # 0x46d340 <mi_huge_start>
               	movq	%rax, %rbx
               	je	0x42a8d0 <mi_process_init+0x3b0>
               	movq	%rbx, %r14
               	testq	%rbx, %rbx
               	jne	0x42a890 <mi_process_init+0x370>
               	movq	%fs:(%r15), %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, %r14
               	andl	$536739840, %r14d       # imm = 0x1FFE0000
               	shlq	$13, %r14
               	orq	%r13, %r14
               	jmp	0x42a890 <mi_process_init+0x370>
               	cmpq	$0, 273008(%rip)        # 0x46d348 <mi_clock_diff>
               	jne	0x42a951 <mi_process_init+0x431>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %r15
               	movq	%r15, %rsi
               	callq	0x413800 <clock_gettime@plt>
               	movabsq	$-4835703278458516699, %rax # imm = 0xBCE4217D2849CB25
               	imulq	16(%rsp)
               	movq	%rdx, %rbx
               	movq	8(%rsp), %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbx
               	addq	%rax, %rbx
               	xorl	%edi, %edi
               	movq	%r15, %rsi
               	callq	0x413800 <clock_gettime@plt>
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	8(%rsp), %rax
               	subq	%rbp, %rax
               	movq	%rdx, %rcx
               	shrq	$63, %rcx
               	sarq	$18, %rdx
               	addq	%rcx, %rdx
               	addq	%rbx, %rdx
               	imulq	$1000, %rax, %rax       # imm = 0x3E8
               	addq	%rdx, %rax
               	movq	%rax, 272887(%rip)      # 0x46d348 <mi_clock_diff>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rcx    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rbp
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rbp
               	addq	%rax, %rbp
               	addq	%rcx, %rbp
               	movl	$1, %eax
               	movq	24(%rsp), %rcx
               	shlq	%cl, %rax
               	movq	%rax, 96(%rsp)
               	xorl	%r13d, %r13d
               	cmpl	$64, %ecx
               	jb	0x42a9d3 <mi_process_init+0x4b3>
               	jmp	0x42abef <mi_process_init+0x6cf>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x42afa2 <mi_process_init+0xa82>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x42ae90 <mi_process_init+0x970>
               	movq	%r13, %r15
               	shlq	$30, %r15
               	addq	%r14, %r15
               	movq	272676(%rip), %rax      # 0x46d308 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 272677(%rip)        # 0x46d310 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x42aa6e <mi_process_init+0x54e>
               	movb	$1, 272617(%rip)        # 0x46d310 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	108672(%rip), %rdi      # 0x4452b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jb	0x42aaca <mi_process_init+0x5aa>
               	movq	%rax, %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movl	$0, (%rsp)
               	movl	$237, %edi
               	movl	$1073741824, %edx       # imm = 0x40000000
               	movl	$1, %ecx
               	movl	$64, %r9d
               	movq	%rbx, %rsi
               	leaq	8(%rsp), %r8
               	xorl	%eax, %eax
               	callq	0x413810 <syscall@plt>
               	testq	%rax, %rax
               	je	0x42aaca <mi_process_init+0x5aa>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	leaq	108726(%rip), %rdi      # 0x445371 <typeinfo name for kotlin::gc::GCSchedulerData+0x1238>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	cmpq	%r15, %rbx
               	jne	0x42ada0 <mi_process_init+0x880>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 238487(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	238465(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42ab00 <mi_process_init+0x5e0>
               	lock
               	cmpxchgq	%rcx, 238450(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42aaf0 <mi_process_init+0x5d0>
               	lock
               	addq	$1073741824, 238420(%rip) # imm = 0x40000000
                                                # 0x464e60 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 238398(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	238376(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42ab40 <mi_process_init+0x620>
               	lock
               	cmpxchgq	%rcx, 238354(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42ab30 <mi_process_init+0x610>
               	lock
               	addq	$1073741824, 238324(%rip) # imm = 0x40000000
                                                # 0x464e40 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x42a9c6 <mi_process_init+0x4a6>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	272308(%rip), %rax      # 0x46d348 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x42a9bd <mi_process_init+0x49d>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42a9a8 <mi_process_init+0x488>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42a9ae <mi_process_init+0x48e>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	imulq	%r12, %rax
               	cmpq	88(%rsp), %rax
               	cmovgq	80(%rsp), %rcx
               	cmpq	%rbx, %rcx
               	jg	0x42afa2 <mi_process_init+0xa82>
               	addq	$1, %r13
               	cmpq	%r12, %r13
               	je	0x42ae90 <mi_process_init+0x970>
               	movq	%r13, %r15
               	shlq	$30, %r15
               	addq	%r14, %r15
               	movq	272136(%rip), %rax      # 0x46d308 <mi_unix_mmap.large_page_try_ok>
               	cmpb	$0, 272137(%rip)        # 0x46d310 <mi_unix_mmap.mi_huge_pages_available>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	movl	$1409548322, %eax       # imm = 0x54040022
               	cmovnel	%eax, %ecx
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	movq	%rax, %rbx
               	addq	$1, %rax
               	cmpq	$1, %rax
               	ja	0x42ac8b <mi_process_init+0x76b>
               	movb	$1, 272077(%rip)        # 0x46d310 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	108132(%rip), %rdi      # 0x4452b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r15, %rdi
               	movl	$3, %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	leaq	1(%rax), %rcx
               	movl	$0, %ebx
               	cmpq	$2, %rcx
               	jae	0x42ad90 <mi_process_init+0x870>
               	cmpq	%r15, %rbx
               	jne	0x42ada0 <mi_process_init+0x880>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 238038(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	238016(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x42acc0 <mi_process_init+0x7a0>
               	lock
               	cmpxchgq	%rcx, 238002(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42acb0 <mi_process_init+0x790>
               	lock
               	addq	$1073741824, 237972(%rip) # imm = 0x40000000
                                                # 0x464e60 <_mi_stats_main+0x60>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	lock
               	xaddq	%rcx, 237950(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	$1073741824, %rcx       # imm = 0x40000000
               	movq	237928(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	movq	32(%rsp), %rbx
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42ad00 <mi_process_init+0x7e0>
               	lock
               	cmpxchgq	%rcx, 237906(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42acf0 <mi_process_init+0x7d0>
               	lock
               	addq	$1073741824, 237876(%rip) # imm = 0x40000000
                                                # 0x464e40 <_mi_stats_main+0x40>
               	testq	%rbx, %rbx
               	jle	0x42abe2 <mi_process_init+0x6c2>
               	xorl	%edi, %edi
               	leaq	8(%rsp), %rsi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000, 8(%rsp), %rsi    # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	16(%rsp)
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$18, %rcx
               	addq	%rax, %rcx
               	addq	%rsi, %rcx
               	movq	271860(%rip), %rax      # 0x46d348 <mi_clock_diff>
               	addq	%rbp, %rax
               	subq	%rax, %rcx
               	testq	%r13, %r13
               	je	0x42abd9 <mi_process_init+0x6b9>
               	leaq	1(%r13), %rsi
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42abc4 <mi_process_init+0x6a4>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42abca <mi_process_init+0x6aa>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rbx
               	cmpq	%r15, %rbx
               	je	0x42ac94 <mi_process_init+0x774>
               	nopl	(%rax)
               	testq	%rbx, %rbx
               	movq	24(%rsp), %rbp
               	je	0x42ae98 <mi_process_init+0x978>
               	leaq	108017(%rip), %rdi      # 0x4453a6 <typeinfo name for kotlin::gc::GCSchedulerData+0x126d>
               	movq	%r13, %rsi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%rbx, %rdi
               	callq	0x4138a0 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 237721(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	237697(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42ae00 <mi_process_init+0x8e0>
               	lock
               	cmpxchgq	%rdx, 237682(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42adf0 <mi_process_init+0x8d0>
               	lock
               	addq	$1073741824, 237660(%rip) # imm = 0x40000000
                                                # 0x464e68 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 237628(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	237606(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42ae40 <mi_process_init+0x920>
               	lock
               	cmpxchgq	%rdx, 237586(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42ae30 <mi_process_init+0x910>
               	lock
               	addq	$1073741824, 237564(%rip) # imm = 0x40000000
                                                # 0x464e48 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42ae98 <mi_process_init+0x978>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	leaq	107426(%rip), %rdi      # 0x44520f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r14
               	testq	%r14, %r14
               	jne	0x42aea8 <mi_process_init+0x988>
               	jmp	0x42afdd <mi_process_init+0xabd>
               	nop
               	movq	%r12, %r13
               	movq	24(%rsp), %rbp
               	testq	%r13, %r13
               	cmoveq	%r13, %r14
               	testq	%r14, %r14
               	je	0x42afdd <mi_process_init+0xabd>
               	testq	%r13, %r13
               	je	0x42afdd <mi_process_init+0xabd>
               	leaq	107637(%rip), %rdi      # 0x44532d <typeinfo name for kotlin::gc::GCSchedulerData+0x11f4>
               	movl	%ebp, %esi
               	movq	%r13, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	movabsq	$1099511627712, %rax    # imm = 0xFFFFFFFFC0
               	andq	%rax, %rbx
               	movq	%rbx, %rdi
               	shrq	$2, %rdi
               	addq	$64, %rdi
               	callq	0x42c8a0 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x42aff3 <mi_process_init+0xad3>
               	movq	%rbx, 8(%rax)
               	shrq	$6, %rbx
               	movq	%rbx, 16(%rax)
               	xchgq	%r14, (%rax)
               	movl	%ebp, 24(%rax)
               	movb	$1, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	movl	$0, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	56(%rax,%rbx,8), %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 237896(%rip)      # 0x465080 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x42af50 <mi_process_init+0xa30>
               	lock
               	subq	$1, 237877(%rip)        # 0x465080 <mi_arena_count>
               	jmp	0x42af5b <mi_process_init+0xa3b>
               	leaq	237929(%rip), %rdx      # 0x4650c0 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	movq	$-80, %r15
               	movq	72(%rsp), %rbx
               	movq	40(%rsp), %rsi
               	movabsq	$35184372088832, %r13   # imm = 0x200000000000
               	movq	64(%rsp), %rcx
               	movq	%rbx, %rax
               	movl	$0, %ebx
               	subq	%r12, %rax
               	cmovaeq	%rax, %rbx
               	jbe	0x42b0db <mi_process_init+0xbbb>
               	addq	$1, %rcx
               	cmpq	%rsi, %rcx
               	jb	0x42a820 <mi_process_init+0x300>
               	jmp	0x42b0db <mi_process_init+0xbbb>
               	movq	24(%rsp), %rbp
               	leaq	107563(%rip), %rdi      # 0x4453d9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12a0>
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	testq	%r13, %r13
               	cmoveq	%r13, %r14
               	testq	%r14, %r14
               	jne	0x42aea8 <mi_process_init+0x988>
               	jmp	0x42afdd <mi_process_init+0xabd>
               	callq	0x42cfe0 <_mi_os_numa_node_count_get>
               	movq	%rax, %rcx
               	cmpq	%rcx, %rbp
               	jae	0x42a85c <mi_process_init+0x33c>
               	jmp	0x42a864 <mi_process_init+0x344>
               	leaq	107300(%rip), %rdi      # 0x445308 <typeinfo name for kotlin::gc::GCSchedulerData+0x11cf>
               	movq	%r12, %rsi
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	jmp	0x42b0db <mi_process_init+0xbbb>
               	shlq	$30, %r13
               	je	0x42b0db <mi_process_init+0xbbb>
               	leaq	107019(%rip), %rbx      # 0x44520f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	jmp	0x42b01d <mi_process_init+0xafd>
               	nopl	(%rax)
               	addq	$-1073741824, %r13      # imm = 0xC0000000
               	je	0x42b0db <mi_process_init+0xbbb>
               	movl	$1073741824, %esi       # imm = 0x40000000
               	movq	%r14, %rdi
               	callq	0x4138a0 <munmap@plt>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 237118(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	movl	%eax, %ecx
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	237094(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42b060 <mi_process_init+0xb40>
               	lock
               	cmpxchgq	%rdx, 237074(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42b050 <mi_process_init+0xb30>
               	lock
               	addq	$1073741824, 237052(%rip) # imm = 0x40000000
                                                # 0x464e68 <_mi_stats_main+0x68>
               	movq	$-1073741824, %rdx      # imm = 0xC0000000
               	lock
               	xaddq	%rdx, 237020(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	$-1073741824, %rdx      # imm = 0xC0000000
               	movq	236998(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	nopw	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x42b0a0 <mi_process_init+0xb80>
               	lock
               	cmpxchgq	%rdx, 236978(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42b090 <mi_process_init+0xb70>
               	lock
               	addq	$1073741824, 236956(%rip) # imm = 0x40000000
                                                # 0x464e48 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42b010 <mi_process_init+0xaf0>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	movl	$1073741824, %ecx       # imm = 0x40000000
               	movq	%rbx, %rdi
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	jmp	0x42b010 <mi_process_init+0xaf0>
               	movl	$8, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42b2ec <mi_process_init+0xdcc>
               	movl	$8, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	jle	0x42b2ec <mi_process_init+0xdcc>
               	movq	%rax, %rbx
               	shlq	$10, %rbx
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42b11a <mi_process_init+0xbfa>
               	movq	231192(%rip), %rcx      # 0x463830 <os_page_size>
               	jmp	0x42b14b <mi_process_init+0xc2b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42b14b <mi_process_init+0xc2b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42b14b <mi_process_init+0xc2b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rax, %rbx
               	jae	0x42b18d <mi_process_init+0xc6d>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42b16e <mi_process_init+0xc4e>
               	negq	%rcx
               	andq	%rcx, %rbx
               	jmp	0x42b18d <mi_process_init+0xc6d>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42b184 <mi_process_init+0xc64>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42b18a <mi_process_init+0xc6a>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	movb	$1, 8(%rsp)
               	leaq	8(%rsp), %rdx
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42c050 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x42b2ec <mi_process_init+0xdcc>
               	movq	%rax, %r13
               	movb	8(%rsp), %al
               	movb	%al, 32(%rsp)
               	leaq	16777215(%rbx), %r12
               	movq	%r12, %r15
               	shrq	$24, %r15
               	leaq	63(%r15), %r14
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	movq	%rbp, %rdi
               	shlq	$4, %rdi
               	addq	$64, %rdi
               	callq	0x42c8a0 <_mi_os_alloc>
               	testq	%rax, %rax
               	je	0x42b280 <mi_process_init+0xd60>
               	movq	%r15, 8(%rax)
               	movq	%rbp, 16(%rax)
               	xchgq	%r13, (%rax)
               	movl	$4294967295, 24(%rax)   # imm = 0xFFFFFFFF
               	movb	32(%rsp), %cl
               	movb	%cl, 30(%rax)
               	movw	$257, 28(%rax)          # imm = 0x101
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 32(%rax)
               	leaq	(%rax,%rbp,8), %rcx
               	addq	$56, %rcx
               	movq	%rcx, 40(%rax)
               	movq	$0, 48(%rax)
               	andq	$-64, %r14
               	subq	%r15, %r14
               	jle	0x42b261 <mi_process_init+0xd41>
               	movq	%rax, %rdx
               	addq	$56, %rdx
               	shrq	$30, %r12
               	movq	$-1, %rsi
               	movq	$-1, %rdi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%r15d, %ecx
               	shlq	%cl, %rdi
               	cmpq	$63, %r14
               	cmovaq	%rsi, %rdi
               	lock
               	orq	%rdi, (%rdx,%r12,8)
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 237073(%rip)      # 0x465080 <mi_arena_count>
               	cmpq	$64, %rcx
               	jb	0x42b2ae <mi_process_init+0xd8e>
               	lock
               	subq	$1, 237058(%rip)        # 0x465080 <mi_arena_count>
               	jmp	0x42b2b9 <mi_process_init+0xd99>
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42ca70 <_mi_os_free_ex>
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	leaq	106270(%rip), %rdi      # 0x4451c0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1087>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	jmp	0x42b2ec <mi_process_init+0xdcc>
               	leaq	237067(%rip), %rdx      # 0x4650c0 <mi_arenas>
               	movq	%rax, (%rdx,%rcx,8)
               	addq	$1023, %rbx             # imm = 0x3FF
               	shrq	$10, %rbx
               	cmpb	$0, 8(%rsp)
               	leaq	108411(%rip), %rax      # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	leaq	106249(%rip), %rdx      # 0x4451e0 <typeinfo name for kotlin::gc::GCSchedulerData+0x10a7>
               	cmoveq	%rax, %rdx
               	leaq	106259(%rip), %rdi      # 0x4451f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x10bc>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x42cfe0 <_mi_os_numa_node_count_get>
               	jmp	0x42a77b <mi_process_init+0x25b>
               	nopw	%cs:(%rax,%rax)

<mi_pthread_done>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	testq	%rdi, %rdi
               	je	0x42b3e8 <mi_pthread_done+0xd8>
               	movq	%rdi, %rbx
               	movq	$-1, %rcx
               	lock
               	xaddq	%rcx, 236510(%rip)      # 0x464f18 <_mi_stats_main+0x118>
               	addq	$-1, %rcx
               	movq	236491(%rip), %rax      # 0x464f10 <_mi_stats_main+0x110>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42b360 <mi_pthread_done+0x50>
               	lock
               	cmpxchgq	%rcx, 236466(%rip)      # 0x464f10 <_mi_stats_main+0x110>
               	jne	0x42b350 <mi_pthread_done+0x40>
               	lock
               	addq	$1, 236447(%rip)        # 0x464f08 <_mi_stats_main+0x108>
               	movq	2848(%rbx), %rax
               	movq	%fs:0, %rcx
               	leaq	218624(%rip), %r13      # 0x460980 <_mi_heap_empty>
               	cmpq	%r13, %rbx
               	je	0x42b3e8 <mi_pthread_done+0xd8>
               	cmpq	%rcx, %rax
               	jne	0x42b3e8 <mi_pthread_done+0xd8>
               	leaq	226743(%rip), %rdx      # 0x462948 <_mi_heap_main>
               	movq	229584(%rip), %rcx      # 0x463468 <_mi_heap_main+0xb20>
               	cmpq	%rax, %rcx
               	movq	%r13, %rsi
               	cmoveq	%rdx, %rsi
               	testq	%rcx, %rcx
               	cmoveq	%rdx, %rsi
               	movq	$-80, %r12
               	movq	%rsi, %fs:(%r12)
               	movl	230509(%rip), %edi      # 0x463828 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42b3c5 <mi_pthread_done+0xb5>
               	callq	0x413850 <pthread_setspecific@plt>
               	movq	(%rbx), %rax
               	movq	16(%rax), %r15
               	cmpq	%r13, %r15
               	je	0x42b3e8 <mi_pthread_done+0xd8>
               	movq	(%r15), %rax
               	movq	24(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x42b8ad <mi_pthread_done+0x59d>
               	movq	%r15, 8(%rsp)
               	jmp	0x42b409 <mi_pthread_done+0xf9>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r14, %rdi
               	callq	0x431460 <mi_free>
               	nop
               	testq	%rbx, %rbx
               	je	0x42b8ad <mi_pthread_done+0x59d>
               	movq	%rbx, %r14
               	movq	3040(%rbx), %rbx
               	cmpq	%r15, %r14
               	je	0x42b400 <mi_pthread_done+0xf0>
               	testq	%r14, %r14
               	je	0x42b400 <mi_pthread_done+0xf0>
               	cmpq	%r13, %r14
               	je	0x42b400 <mi_pthread_done+0xf0>
               	movq	%rbx, 32(%rsp)
               	movq	(%r14), %rax
               	movq	16(%rax), %rbp
               	cmpq	%r14, %rbp
               	je	0x42b81e <mi_pthread_done+0x50e>
               	cmpq	$0, 3016(%r14)
               	je	0x42b82b <mi_pthread_done+0x51b>
               	movq	2840(%r14), %rax
               	testq	%rax, %rax
               	je	0x42b480 <mi_pthread_done+0x170>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42b450 <mi_pthread_done+0x140>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x430510 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42b470 <mi_pthread_done+0x160>
               	leaq	1040(%rbp), %r10
               	leaq	1016(%rbp), %r12
               	leaq	120(%rbp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	24(%rbp), %rax
               	movq	%rax, 24(%rsp)
               	xorl	%edi, %edi
               	jmp	0x42b4d2 <mi_pthread_done+0x1c2>
               	nopw	(%rax,%rax)
               	xorl	%edx, %edx
               	addq	%rdx, 3016(%rbp)
               	subq	%rdx, 3016(%r14)
               	addq	$1, %rdi
               	addq	$24, %r12
               	cmpq	$75, %rdi
               	je	0x42b793 <mi_pthread_done+0x483>
               	leaq	(,%rdi,8), %rax
               	leaq	(%rax,%rax,2), %rcx
               	movq	1040(%r14,%rcx), %rbx
               	testq	%rbx, %rbx
               	je	0x42b4b0 <mi_pthread_done+0x1a0>
               	leaq	(%rcx,%rbp), %r8
               	addq	$1040, %r8              # imm = 0x410
               	leaq	(%r14,%rcx), %r9
               	addq	$1040, %r9              # imm = 0x410
               	xorl	%edx, %edx
               	jmp	0x42b51d <mi_pthread_done+0x20d>
               	nopl	(%rax)
               	addq	$1, %rdx
               	movq	48(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x42b550 <mi_pthread_done+0x240>
               	movq	%rbp, 40(%rbx)
               	movq	32(%rbx), %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	je	0x42b510 <mi_pthread_done+0x200>
               	cmpl	$3, %esi
               	je	0x42b510 <mi_pthread_done+0x200>
               	cmpl	$1, %esi
               	je	0x42b547 <mi_pthread_done+0x237>
               	movq	%rax, %rsi
               	andq	$-4, %rsi
               	lock
               	cmpxchgq	%rsi, 32(%rbx)
               	jne	0x42b521 <mi_pthread_done+0x211>
               	jmp	0x42b510 <mi_pthread_done+0x200>
               	pause
               	jmp	0x42b521 <mi_pthread_done+0x211>
               	nop
               	leaq	(%rdi,%rdi,2), %rbx
               	leaq	1048(,%rbx,8), %rax
               	addq	%rbp, %rax
               	movq	1048(%rbp,%rbx,8), %rsi
               	movq	(%r9), %r15
               	testq	%rsi, %rsi
               	je	0x42b590 <mi_pthread_done+0x280>
               	movq	%r15, 48(%rsi)
               	movq	%rsi, 56(%r15)
               	movq	1048(%r14,%rbx,8), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x42b4b2 <mi_pthread_done+0x1a2>
               	nopl	(%rax,%rax)
               	movq	%r15, (%r8)
               	movq	1048(%r14,%rcx), %rsi
               	movq	%rsi, (%rax)
               	movq	1056(%rbp,%rcx), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42b4b2 <mi_pthread_done+0x1a2>
               	testq	%r15, %r15
               	leaq	110084(%rip), %rcx      # 0x4463c0 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r15, 8(%rbp,%r11,8)
               	je	0x42b4b2 <mi_pthread_done+0x1a2>
               	cmpq	$9, %rax
               	jae	0x42b5e0 <mi_pthread_done+0x2d0>
               	xorl	%ecx, %ecx
               	jmp	0x42b692 <mi_pthread_done+0x382>
               	cmpq	$64, %rax
               	ja	0x42b5f0 <mi_pthread_done+0x2e0>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42b60b <mi_pthread_done+0x2fb>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	movq	%r12, %rsi
               	nop
               	movq	16(%rsi), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42b670 <mi_pthread_done+0x360>
               	cmpq	$71, %rax
               	ja	0x42b640 <mi_pthread_done+0x330>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x42b670 <mi_pthread_done+0x360>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42b670 <mi_pthread_done+0x360>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r9
               	movl	%r9d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r9,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%r10, %rsi
               	jbe	0x42b67e <mi_pthread_done+0x36e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r8b
               	je	0x42b610 <mi_pthread_done+0x300>
               	leaq	1(%rbx), %rcx
               	cmpq	%r11, %rbx
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42b4b2 <mi_pthread_done+0x1a2>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42b780 <mi_pthread_done+0x470>
               	movq	%r8, %r9
               	andq	$-4, %r9
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r9), %rbx
               	movq	%rbx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %esi
               	andl	$3, %esi
               	cmpq	$12, %rbx
               	jae	0x42b6d5 <mi_pthread_done+0x3c5>
               	xorl	%ebx, %ebx
               	jmp	0x42b732 <mi_pthread_done+0x422>
               	movq	16(%rsp), %rbx
               	leaq	(%rbx,%rcx,8), %r13
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbx,8)
               	movdqu	%xmm0, -96(%r13,%rbx,8)
               	movdqu	%xmm0, -80(%r13,%rbx,8)
               	movdqu	%xmm0, -64(%r13,%rbx,8)
               	movdqu	%xmm0, -48(%r13,%rbx,8)
               	movdqu	%xmm0, -32(%r13,%rbx,8)
               	movdqu	%xmm0, -16(%r13,%rbx,8)
               	movdqu	%xmm0, (%r13,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42b6f0 <mi_pthread_done+0x3e0>
               	testq	%rsi, %rsi
               	je	0x42b762 <mi_pthread_done+0x452>
               	addq	%rcx, %rbx
               	movq	24(%rsp), %rax
               	leaq	(%rax,%rbx,8), %rax
               	negq	%rsi
               	nopw	(%rax,%rax)
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rsi
               	jne	0x42b750 <mi_pthread_done+0x440>
               	cmpq	%r9, %r8
               	leaq	217620(%rip), %r13      # 0x460980 <_mi_heap_empty>
               	je	0x42b4b2 <mi_pthread_done+0x1a2>
               	addq	%r9, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r15, 8(%rbp,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42b780 <mi_pthread_done+0x470>
               	jmp	0x42b4b2 <mi_pthread_done+0x1a2>
               	movq	2840(%r14), %rax
               	movq	8(%rsp), %r15
               	movq	$-80, %r12
               	nopw	%cs:(%rax,%rax)
               	testq	%rax, %rax
               	je	0x42b7e0 <mi_pthread_done+0x4d0>
               	movq	%rax, %rdi
               	xorl	%ecx, %ecx
               	lock
               	cmpxchgq	%rcx, 2840(%r14)
               	jne	0x42b7b0 <mi_pthread_done+0x4a0>
               	nopl	(%rax)
               	movq	(%rdi), %rbx
               	callq	0x430510 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42b7d0 <mi_pthread_done+0x4c0>
               	leaq	8(%r14), %rdi
               	movl	$1032, %edx             # imm = 0x408
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	leaq	1040(%r14), %rdi
               	movl	$1800, %edx             # imm = 0x708
               	leaq	218509(%rip), %rsi      # 0x460d90 <_mi_heap_empty+0x410>
               	callq	0x413720 <memcpy@plt>
               	xorl	%eax, %eax
               	xchgq	%rax, 2840(%r14)
               	movq	$0, 3016(%r14)
               	jmp	0x42b82b <mi_pthread_done+0x51b>
               	movq	%r14, %rdi
               	movl	$2, %esi
               	callq	0x42d6e0 <mi_heap_collect_ex>
               	movq	(%r14), %rax
               	movq	16(%rax), %rsi
               	cmpq	%r14, %rsi
               	movq	32(%rsp), %rbx
               	je	0x42b400 <mi_pthread_done+0xf0>
               	cmpq	%r14, %fs:(%r12)
               	jne	0x42b85f <mi_pthread_done+0x54f>
               	movq	%rsi, %fs:(%r12)
               	movl	229334(%rip), %edi      # 0x463828 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42b85c <mi_pthread_done+0x54c>
               	callq	0x413850 <pthread_setspecific@plt>
               	movq	(%r14), %rax
               	addq	$24, %rax
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	nopl	(%rax,%rax)
               	movq	%rdx, %rcx
               	movq	(%rsi), %rdx
               	cmpq	%r14, %rdx
               	je	0x42b887 <mi_pthread_done+0x577>
               	leaq	3040(%rdx), %rsi
               	testq	%rdx, %rdx
               	jne	0x42b870 <mi_pthread_done+0x560>
               	cmpq	%r14, %rdx
               	jne	0x42b3f7 <mi_pthread_done+0xe7>
               	leaq	3040(%rcx), %rdx
               	testq	%rcx, %rcx
               	movq	3040(%r14), %rcx
               	cmoveq	%rax, %rdx
               	movq	%rcx, (%rdx)
               	jmp	0x42b3f7 <mi_pthread_done+0xe7>
               	leaq	225428(%rip), %rax      # 0x462948 <_mi_heap_main>
               	cmpq	%rax, %r15
               	je	0x42b8f3 <mi_pthread_done+0x5e3>
               	movq	%r15, %rdi
               	movl	$2, %esi
               	callq	0x42d6e0 <mi_heap_collect_ex>
               	movl	$176, %edi
               	addq	(%r15), %rdi
               	callq	0x42d1f0 <mi_stats_merge_from>
               	movl	$3808, %esi             # imm = 0xEE0
               	movq	%r15, %rdi
               	movl	$1, %edx
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ca70 <_mi_os_free_ex>
               	movl	$176, %edi
               	addq	(%r15), %rdi
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42d1f0 <mi_stats_merge_from>
               	nop

<_mi_verbose_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42b95c <_mi_verbose_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	movl	$2, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42ba1a <_mi_verbose_message+0x10a>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42ba1a <_mi_verbose_message+0x10a>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42ba1a <_mi_verbose_message+0x10a>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x4138b0 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	235740(%rip), %r12      # 0x4652c8 <mi_out_arg>
               	movq	235741(%rip), %rax      # 0x4652d0 <mi_out_default>
               	testq	%rax, %rax
               	leaq	5075(%rip), %rbx        # 0x42cdd0 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	105461(%rip), %rdi      # 0x4455fd <typeinfo name for kotlin::gc::GCSchedulerData+0x14c4>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<mi_thread_init>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	callq	0x42a520 <mi_process_init>
               	movq	$-80, %r14
               	leaq	216888(%rip), %rax      # 0x460980 <_mi_heap_empty>
               	cmpq	%rax, %fs:(%r14)
               	je	0x42ba54 <mi_thread_init+0x24>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	227853(%rip), %rax      # 0x463468 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42ba72 <mi_thread_init+0x42>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42baf6 <mi_thread_init+0xc6>
               	cmpq	$0, 227830(%rip)        # 0x463470 <_mi_heap_main+0xb28>
               	jne	0x42bad0 <mi_thread_init+0xa0>
               	movq	%fs:0, %rax
               	movq	%rax, 227804(%rip)      # 0x463468 <_mi_heap_main+0xb20>
               	leaq	224949(%rip), %rbx      # 0x462948 <_mi_heap_main>
               	leaq	-9386(%rip), %rdi       # 0x4295f0 <mi_heap_main_init>
               	callq	0x429660 <_os_random_weak>
               	movq	%rax, 227786(%rip)      # 0x463470 <_mi_heap_main+0xb28>
               	leaq	227803(%rip), %rdi      # 0x463488 <_mi_heap_main+0xb40>
               	callq	0x429770 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 227767(%rip)      # 0x463478 <_mi_heap_main+0xb30>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 227760(%rip)      # 0x463480 <_mi_heap_main+0xb38>
               	leaq	224881(%rip), %rax      # 0x462948 <_mi_heap_main>
               	movq	%rax, %fs:(%r14)
               	movl	228679(%rip), %edi      # 0x463828 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42bbd1 <mi_thread_init+0x1a1>
               	leaq	224855(%rip), %rsi      # 0x462948 <_mi_heap_main>
               	jmp	0x42bbcc <mi_thread_init+0x19c>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42c8a0 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42bb1e <mi_thread_init+0xee>
               	movl	$3808, %edi             # imm = 0xEE0
               	callq	0x42c8a0 <_mi_os_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x42bc0f <mi_thread_init+0x1df>
               	leaq	3056(%rbx), %r15
               	leaq	216660(%rip), %rsi      # 0x460980 <_mi_heap_empty>
               	movl	$3056, %edx             # imm = 0xBF0
               	movq	%rbx, %rdi
               	callq	0x413720 <memcpy@plt>
               	movq	%fs:0, %rax
               	movq	%rax, 2848(%rbx)
               	leaq	2880(%rbx), %rdi
               	callq	0x429770 <_mi_random_init>
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	orq	$1, %rax
               	movq	%rax, 2856(%rbx)
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 2864(%rbx)
               	movq	%rbx, %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	movq	%rax, 2872(%rbx)
               	movq	%r15, (%rbx)
               	movq	%rbx, 3072(%rbx)
               	movq	%rbx, 3080(%rbx)
               	leaq	3232(%rbx), %rax
               	movq	%rax, 3200(%rbx)
               	leaq	3216(%rbx), %rcx
               	movq	%rcx, 3208(%rbx)
               	movq	%rax, 3224(%rbx)
               	movq	%rbx, %fs:(%r14)
               	movl	228452(%rip), %edi      # 0x463828 <_mi_heap_default_key>
               	cmpl	$-1, %edi
               	je	0x42bbd1 <mi_thread_init+0x1a1>
               	movq	%rbx, %rsi
               	callq	0x413850 <pthread_setspecific@plt>
               	movl	$1, %ecx
               	lock
               	xaddq	%rcx, 234297(%rip)      # 0x464f18 <_mi_stats_main+0x118>
               	leaq	1(%rcx), %rdx
               	movq	234278(%rip), %rax      # 0x464f10 <_mi_stats_main+0x110>
               	nopw	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jg	0x42bc00 <mi_thread_init+0x1d0>
               	lock
               	cmpxchgq	%rdx, 234258(%rip)      # 0x464f10 <_mi_stats_main+0x110>
               	jne	0x42bbf0 <mi_thread_init+0x1c0>
               	lock
               	addq	$1, 234231(%rip)        # 0x464f00 <_mi_stats_main+0x100>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	104858(%rip), %rsi      # 0x4455b0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1477>
               	movl	$3808, %edx             # imm = 0xEE0
               	movl	$12, %edi
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	jmp	0x42bbd1 <mi_thread_init+0x1a1>
               	nopl	(%rax)

<mi_option_get>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$232, %rsp
               	movl	%edi, %eax
               	leaq	(%rax,%rax,2), %rbx
               	leaq	228338(%rip), %r13      # 0x463840 <options>
               	leaq	(,%rbx,8), %r12
               	addq	%r13, %r12
               	cmpl	$0, 8(%r13,%rbx,8)
               	je	0x42bc77 <mi_option_get+0x47>
               	movq	(%r12), %rax
               	addq	$232, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	8(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 24(%rsp)
               	movb	$0, 80(%rsp)
               	leaq	104350(%rip), %rsi      # 0x445431 <typeinfo name for kotlin::gc::GCSchedulerData+0x12f8>
               	leaq	80(%rsp), %r14
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x4138c0 <strncpy@plt>
               	movb	$0, 144(%rsp)
               	movq	16(%r13,%rbx,8), %rsi
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x4138d0 <strncat@plt>
               	movb	$0, 144(%rsp)
               	movq	%r14, %rdi
               	callq	0x413710 <strlen@plt>
               	movq	%rax, %rcx
               	movq	%rax, 32(%rsp)
               	testq	%rax, %rax
               	je	0x42be90 <mi_option_get+0x260>
               	movq	221929(%rip), %rax      # 0x461fd0 <write+0x461fd0>
               	movq	(%rax), %rax
               	movq	%rax, 40(%rsp)
               	testq	%rax, %rax
               	je	0x42be90 <mi_option_get+0x260>
               	movb	80(%rsp), %al
               	movb	%al, 15(%rsp)
               	testb	%al, %al
               	je	0x42bdd0 <mi_option_get+0x1a0>
               	xorl	%ecx, %ecx
               	jmp	0x42bd31 <mi_option_get+0x101>
               	movq	32(%rsp), %rax
               	cmpb	$61, (%rdx,%rax)
               	je	0x42be25 <mi_option_get+0x1f5>
               	movq	56(%rsp), %rcx
               	addq	$1, %rcx
               	cmpq	$256, %rcx              # imm = 0x100
               	je	0x42be90 <mi_option_get+0x260>
               	movq	40(%rsp), %rax
               	movq	(%rax,%rcx,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42be90 <mi_option_get+0x260>
               	movq	%rcx, 56(%rsp)
               	xorl	%r14d, %r14d
               	movb	15(%rsp), %al
               	movl	%eax, %esi
               	movq	32(%rsp), %r15
               	movq	%rdx, 64(%rsp)
               	testq	%r15, %r15
               	je	0x42bdb3 <mi_option_get+0x183>
               	movzbl	(%rdx,%r14), %ebp
               	testb	%bpl, %bpl
               	je	0x42bdb3 <mi_option_get+0x183>
               	movsbq	%bpl, %rax
               	movq	%rax, 72(%rsp)
               	movl	%esi, 52(%rsp)
               	callq	0x4138e0 <__ctype_toupper_loc@plt>
               	movl	52(%rsp), %esi
               	movq	64(%rsp), %rdx
               	movq	(%rax), %rax
               	movsbq	%sil, %rcx
               	movl	(%rax,%rcx,4), %ecx
               	movq	72(%rsp), %rdi
               	cmpl	(%rax,%rdi,4), %ecx
               	jne	0x42bdc2 <mi_option_get+0x192>
               	addq	$-1, %r15
               	movzbl	81(%rsp,%r14), %esi
               	addq	$1, %r14
               	testb	%sil, %sil
               	jne	0x42bd5b <mi_option_get+0x12b>
               	addq	%rdx, %r14
               	xorl	%esi, %esi
               	jmp	0x42bdb6 <mi_option_get+0x186>
               	addq	%rdx, %r14
               	testq	%r15, %r15
               	je	0x42bd0c <mi_option_get+0xdc>
               	movb	(%r14), %bpl
               	cmpb	%bpl, %sil
               	je	0x42bd0c <mi_option_get+0xdc>
               	jmp	0x42bd1b <mi_option_get+0xeb>
               	xorl	%eax, %eax
               	jmp	0x42bde4 <mi_option_get+0x1b4>
               	addq	$2, %rax
               	cmpq	$256, %rax              # imm = 0x100
               	je	0x42be90 <mi_option_get+0x260>
               	movq	40(%rsp), %rcx
               	movq	(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42be90 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42be06 <mi_option_get+0x1d6>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	je	0x42be25 <mi_option_get+0x1f5>
               	movq	40(%rsp), %rcx
               	movq	8(%rcx,%rax,8), %rdx
               	testq	%rdx, %rdx
               	je	0x42be90 <mi_option_get+0x260>
               	cmpb	$0, (%rdx)
               	jne	0x42bdd4 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rcx
               	cmpb	$61, (%rdx,%rcx)
               	jne	0x42bdd4 <mi_option_get+0x1a4>
               	movq	32(%rsp), %rax
               	leaq	(%rdx,%rax), %rsi
               	addq	$1, %rsi
               	movb	$0, 160(%rsp)
               	leaq	160(%rsp), %r14
               	movl	$64, %r15d
               	movl	$64, %edx
               	movq	%r14, %rdi
               	callq	0x4138c0 <strncpy@plt>
               	movb	$0, 224(%rsp)
               	movq	%r14, %rdi
               	callq	0x413710 <strlen@plt>
               	cmpq	$64, %rax
               	cmovbq	%rax, %r15
               	testq	%r15, %r15
               	je	0x42bf40 <mi_option_get+0x310>
               	callq	0x4138e0 <__ctype_toupper_loc@plt>
               	leaq	-1(%r15), %rdx
               	movl	%r15d, %r8d
               	andl	$3, %r8d
               	cmpq	$3, %rdx
               	jae	0x42bead <mi_option_get+0x27d>
               	xorl	%edx, %edx
               	jmp	0x42bf0e <mi_option_get+0x2de>
               	cmpb	$1, 233897(%rip)        # 0x465040 <os_preloading>
               	jne	0x42bc61 <mi_option_get+0x31>
               	movq	24(%rsp), %rax
               	movl	$1, (%rax)
               	jmp	0x42bc61 <mi_option_get+0x31>
               	movl	%r15d, %esi
               	andl	$124, %esi
               	xorl	%edx, %edx
               	movq	(%rax), %rcx
               	movsbq	160(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 80(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	161(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 81(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	162(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 82(%rsp,%rdx)
               	movq	(%rax), %rcx
               	movsbq	163(%rsp,%rdx), %rdi
               	movzbl	(%rcx,%rdi,4), %ecx
               	movb	%cl, 83(%rsp,%rdx)
               	addq	$4, %rdx
               	cmpq	%rdx, %rsi
               	jne	0x42beb5 <mi_option_get+0x285>
               	testq	%r8, %r8
               	je	0x42bf40 <mi_option_get+0x310>
               	leaq	(%rsp,%rdx), %rsi
               	addq	$80, %rsi
               	addq	%rsp, %rdx
               	addq	$160, %rdx
               	xorl	%edi, %edi
               	movq	(%rax), %rbp
               	movsbq	(%rdx,%rdi), %rcx
               	movzbl	(%rbp,%rcx,4), %ecx
               	movb	%cl, (%rsi,%rdi)
               	addq	$1, %rdi
               	cmpq	%rdi, %r8
               	jne	0x42bf27 <mi_option_get+0x2f7>
               	movb	$0, 80(%rsp,%r15)
               	cmpb	$0, 80(%rsp)
               	je	0x42bf63 <mi_option_get+0x333>
               	leaq	103655(%rip), %rdi      # 0x44543b <typeinfo name for kotlin::gc::GCSchedulerData+0x1302>
               	leaq	80(%rsp), %rsi
               	callq	0x4138f0 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42bf7b <mi_option_get+0x34b>
               	movq	$1, (%r12)
               	movq	24(%rsp), %rax
               	movl	$2, (%rax)
               	jmp	0x42bc61 <mi_option_get+0x31>
               	leaq	103623(%rip), %rdi      # 0x445449 <typeinfo name for kotlin::gc::GCSchedulerData+0x1310>
               	leaq	80(%rsp), %r14
               	movq	%r14, %rsi
               	callq	0x4138f0 <strstr@plt>
               	testq	%rax, %rax
               	je	0x42bf9e <mi_option_get+0x36e>
               	movq	$0, (%r12)
               	jmp	0x42bf6b <mi_option_get+0x33b>
               	movq	%r14, 16(%rsp)
               	leaq	16(%rsp), %rsi
               	movq	%r14, %rdi
               	movl	$10, %edx
               	callq	0x413900 <strtol@plt>
               	cmpl	$8, 12(%r13,%rbx,8)
               	movq	16(%rsp), %rcx
               	jne	0x42c002 <mi_option_get+0x3d2>
               	movb	(%rcx), %dl
               	cmpb	$71, %dl
               	je	0x42bfdf <mi_option_get+0x3af>
               	cmpb	$77, %dl
               	je	0x42bfe5 <mi_option_get+0x3b5>
               	cmpb	$75, %dl
               	je	0x42bfe9 <mi_option_get+0x3b9>
               	addq	$1023, %rax             # imm = 0x3FF
               	shrq	$10, %rax
               	jmp	0x42bff4 <mi_option_get+0x3c4>
               	shlq	$20, %rax
               	jmp	0x42bfe9 <mi_option_get+0x3b9>
               	shlq	$10, %rax
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	movb	(%rcx), %dl
               	cmpb	$66, %dl
               	jne	0x42c002 <mi_option_get+0x3d2>
               	addq	$1, %rcx
               	movq	%rcx, 16(%rsp)
               	cmpb	$0, (%rcx)
               	je	0x42c02f <mi_option_get+0x3ff>
               	leaq	16(,%rbx,8), %rax
               	addq	%r13, %rax
               	movq	(%rax), %rsi
               	leaq	103484(%rip), %rdi      # 0x445458 <typeinfo name for kotlin::gc::GCSchedulerData+0x131f>
               	leaq	80(%rsp), %rdx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movl	$1, %eax
               	jmp	0x42c038 <mi_option_get+0x408>
               	movq	%rax, (%r12)
               	movl	$2, %eax
               	movq	24(%rsp), %rcx
               	movl	%eax, (%rcx)
               	jmp	0x42bc61 <mi_option_get+0x31>
               	nopw	%cs:(%rax,%rax)

<_mi_os_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42c576 <_mi_os_alloc_aligned+0x526>
               	movq	%rdx, %r15
               	movl	%esi, %r14d
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42c07c <_mi_os_alloc_aligned+0x2c>
               	movq	227254(%rip), %rcx      # 0x463830 <os_page_size>
               	jmp	0x42c0ad <_mi_os_alloc_aligned+0x5d>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rdi          # imm = 0x200000
               	jb	0x42c0ad <_mi_os_alloc_aligned+0x5d>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x42c0ad <_mi_os_alloc_aligned+0x5d>
               	cmpq	$33554432, %rdi         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rdi, %rax
               	jbe	0x42c0ef <_mi_os_alloc_aligned+0x9f>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rdi
               	addq	$-1, %rdi
               	testq	%rax, %rcx
               	jne	0x42c0d0 <_mi_os_alloc_aligned+0x80>
               	negq	%rcx
               	andq	%rcx, %rdi
               	jmp	0x42c0ef <_mi_os_alloc_aligned+0x9f>
               	movq	%rdi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42c0e6 <_mi_os_alloc_aligned+0x96>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42c0ec <_mi_os_alloc_aligned+0x9c>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rdi
               	movq	227130(%rip), %rcx      # 0x463830 <os_page_size>
               	movq	%rcx, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %r8 # imm = 0x5555555555555555
               	andq	%r8, %rax
               	movq	%rcx, %rdx
               	subq	%rax, %rdx
               	movabsq	$3689348814741910323, %rbp # imm = 0x3333333333333333
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rsi
               	shrq	$4, %rsi
               	addq	%rdx, %rsi
               	movabsq	$1085102592571150095, %r9 # imm = 0xF0F0F0F0F0F0F0F
               	andq	%r9, %rsi
               	movabsq	$72340172838076673, %r10 # imm = 0x101010101010101
               	imulq	%r10, %rsi
               	shrq	$56, %rsi
               	leaq	4194303(%rcx), %r13
               	cmpq	$1, %rsi
               	ja	0x42c17f <_mi_os_alloc_aligned+0x12f>
               	movq	%rcx, %rax
               	negq	%rax
               	andq	%rax, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	je	0x42c1b6 <_mi_os_alloc_aligned+0x166>
               	movb	(%r15), %al
               	movb	%al, 3(%rsp)
               	movb	$0, (%r15)
               	jmp	0x42c1bd <_mi_os_alloc_aligned+0x16d>
               	movq	%r13, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42c1a2 <_mi_os_alloc_aligned+0x152>
               	movq	%r13, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42c172 <_mi_os_alloc_aligned+0x122>
               	jmp	0x42c1b6 <_mi_os_alloc_aligned+0x166>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %r13
               	movb	$0, 3(%rsp)
               	testq	%r15, %r15
               	jne	0x42c172 <_mi_os_alloc_aligned+0x122>
               	leaq	3(%rsp), %r15
               	xorl	%eax, %eax
               	testb	%al, %al
               	setne	%r12b
               	xorl	%ebx, %ebx
               	cmpq	%r13, %rcx
               	ja	0x42c578 <_mi_os_alloc_aligned+0x528>
               	movq	%r13, %rax
               	shrq	%rax
               	andq	%r8, %rax
               	movq	%r13, %rdx
               	subq	%rax, %rdx
               	movq	%rdx, %rax
               	andq	%rbp, %rax
               	shrq	$2, %rdx
               	andq	%rbp, %rdx
               	addq	%rax, %rdx
               	movq	%rdx, %rax
               	shrq	$4, %rax
               	addq	%rdx, %rax
               	andq	%r9, %rax
               	imulq	%r10, %rax
               	shrq	$56, %rax
               	cmpl	$1, %eax
               	ja	0x42c578 <_mi_os_alloc_aligned+0x528>
               	leaq	-1(%rcx), %rbp
               	addq	%rdi, %rbp
               	cmpl	$1, %esi
               	ja	0x42c227 <_mi_os_alloc_aligned+0x1d7>
               	negq	%rcx
               	andq	%rcx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42c25a <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42c576 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42c248 <_mi_os_alloc_aligned+0x1f8>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	jne	0x42c25a <_mi_os_alloc_aligned+0x20a>
               	jmp	0x42c576 <_mi_os_alloc_aligned+0x526>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	testq	%rbp, %rbp
               	je	0x42c576 <_mi_os_alloc_aligned+0x526>
               	andb	%r14b, %r12b
               	movzbl	%r14b, %eax
               	leal	(%rax,%rax,2), %ebx
               	cmpb	$1, 266365(%rip)        # 0x46d2e8 <large_os_page_size>
               	movl	%ebx, 4(%rsp)
               	jne	0x42c2b0 <_mi_os_alloc_aligned+0x260>
               	movl	$6, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42c2b0 <_mi_os_alloc_aligned+0x260>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42c2b0 <_mi_os_alloc_aligned+0x260>
               	movl	%r12d, %eax
               	xorb	$1, %al
               	jne	0x42c2b0 <_mi_os_alloc_aligned+0x260>
               	movq	266350(%rip), %rax      # 0x46d308 <mi_unix_mmap.large_page_try_ok>
               	testq	%rax, %rax
               	je	0x42c5a0 <_mi_os_alloc_aligned+0x550>
               	leaq	-1(%rax), %rcx
               	lock
               	cmpxchgq	%rcx, 266328(%rip)      # 0x46d308 <mi_unix_mmap.large_page_try_ok>
               	movb	$0, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42cec0 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testb	%r12b, %r12b
               	je	0x42c30a <_mi_os_alloc_aligned+0x2ba>
               	cmpb	$1, 266259(%rip)        # 0x46d2e8 <large_os_page_size>
               	jne	0x42c30a <_mi_os_alloc_aligned+0x2ba>
               	movl	$6, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42c30a <_mi_os_alloc_aligned+0x2ba>
               	movl	%r13d, %eax
               	orl	%ebp, %eax
               	testl	$2097151, %eax          # imm = 0x1FFFFF
               	jne	0x42c30a <_mi_os_alloc_aligned+0x2ba>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	$14, %edx
               	callq	0x413910 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42c30a <_mi_os_alloc_aligned+0x2ba>
               	movb	$1, (%r15)
               	testq	%rbx, %rbx
               	je	0x42c378 <_mi_os_alloc_aligned+0x328>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 232253(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	%rbp, %rcx
               	movq	232235(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42c340 <_mi_os_alloc_aligned+0x2f0>
               	lock
               	cmpxchgq	%rcx, 232210(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42c330 <_mi_os_alloc_aligned+0x2e0>
               	testq	%rbp, %rbp
               	jle	0x42c3a0 <_mi_os_alloc_aligned+0x350>
               	lock
               	addq	%rbp, 232179(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	testb	%r14b, %r14b
               	jne	0x42c3b3 <_mi_os_alloc_aligned+0x363>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	je	0x42c3fd <_mi_os_alloc_aligned+0x3ad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r13
               	testq	%rdx, %rdx
               	jne	0x42c40d <_mi_os_alloc_aligned+0x3bd>
               	jmp	0x42c578 <_mi_os_alloc_aligned+0x528>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edx
               	movzbl	%r12b, %r9d
               	leaq	102083(%rip), %rdi      # 0x44524d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%rbp, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	jmp	0x42c578 <_mi_os_alloc_aligned+0x528>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 232090(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42c352 <_mi_os_alloc_aligned+0x302>
               	movq	%rbp, %rcx
               	lock
               	xaddq	%rcx, 232121(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	addq	%rbp, %rcx
               	movq	232103(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42c3e0 <_mi_os_alloc_aligned+0x390>
               	lock
               	cmpxchgq	%rcx, 232082(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42c3d0 <_mi_os_alloc_aligned+0x380>
               	testq	%rbp, %rbp
               	jle	0x42c45f <_mi_os_alloc_aligned+0x40f>
               	lock
               	addq	%rbp, 232051(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42c362 <_mi_os_alloc_aligned+0x312>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r13d
               	testq	%rdx, %rdx
               	je	0x42c578 <_mi_os_alloc_aligned+0x528>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x4138a0 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbp, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42c48a <_mi_os_alloc_aligned+0x43a>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 232003(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	subq	%rbp, %rsi
               	movq	231985(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nop
               	cmpq	%rsi, %rax
               	jge	0x42c450 <_mi_os_alloc_aligned+0x400>
               	lock
               	cmpxchgq	%rsi, 231970(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42c440 <_mi_os_alloc_aligned+0x3f0>
               	testq	%rbp, %rbp
               	js	0x42c482 <_mi_os_alloc_aligned+0x432>
               	lock
               	addq	%rbp, 231947(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	jmp	0x42c48a <_mi_os_alloc_aligned+0x43a>
               	movq	%rbp, %rax
               	negq	%rax
               	lock
               	addq	%rax, 231931(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	movq	%rbx, %rax
               	orq	%r13, %rax
               	shrq	$32, %rax
               	jne	0x42c362 <_mi_os_alloc_aligned+0x312>
               	jmp	0x42c3fd <_mi_os_alloc_aligned+0x3ad>
               	lock
               	addq	%rdx, 231894(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 231874(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	subq	%rbp, %rsi
               	movq	231856(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42c4b0 <_mi_os_alloc_aligned+0x460>
               	lock
               	cmpxchgq	%rsi, 231842(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42c4a0 <_mi_os_alloc_aligned+0x450>
               	testq	%rbp, %rbp
               	js	0x42c58a <_mi_os_alloc_aligned+0x53a>
               	lock
               	addq	%rbp, 231815(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	jne	0x42c4e9 <_mi_os_alloc_aligned+0x499>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	leaq	101686(%rip), %rdi      # 0x44520f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbx, %rdx
               	movq	%rbp, %rcx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movq	%r13, %rax
               	notq	%rax
               	cmpq	%rax, %rbp
               	jae	0x42c576 <_mi_os_alloc_aligned+0x526>
               	movq	%rbp, %r12
               	addq	%r13, %r12
               	je	0x42c576 <_mi_os_alloc_aligned+0x526>
               	cmpb	$1, 265697(%rip)        # 0x46d2e8 <large_os_page_size>
               	jne	0x42c513 <_mi_os_alloc_aligned+0x4c3>
               	movl	$6, %edi
               	callq	0x42bc30 <mi_option_get>
               	movb	$0, (%r15)
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	callq	0x42cec0 <mi_unix_mmapx>
               	testq	%rax, %rax
               	je	0x42c628 <_mi_os_alloc_aligned+0x5d8>
               	movq	%rax, %r15
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 231701(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	%r12, %rcx
               	movq	231683(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42c560 <_mi_os_alloc_aligned+0x510>
               	lock
               	cmpxchgq	%rcx, 231666(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42c550 <_mi_os_alloc_aligned+0x500>
               	testq	%r12, %r12
               	jle	0x42c648 <_mi_os_alloc_aligned+0x5f8>
               	lock
               	addq	%r12, 231631(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	jmp	0x42c656 <_mi_os_alloc_aligned+0x606>
               	xorl	%ebx, %ebx
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 231598(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42c4e9 <_mi_os_alloc_aligned+0x499>
               	jmp	0x42c4c6 <_mi_os_alloc_aligned+0x476>
               	testl	$1073741823, %ebp       # imm = 0x3FFFFFFF
               	jne	0x42c5b6 <_mi_os_alloc_aligned+0x566>
               	movl	$2013528098, %ecx       # imm = 0x78040022
               	cmpb	$1, 265564(%rip)        # 0x46d310 <mi_unix_mmap.mi_huge_pages_available>
               	jne	0x42c5bb <_mi_os_alloc_aligned+0x56b>
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	movb	$1, (%r15)
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	%ebx, %edx
               	callq	0x42cec0 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42c30f <_mi_os_alloc_aligned+0x2bf>
               	movb	$1, 265521(%rip)        # 0x46d310 <mi_unix_mmap.mi_huge_pages_available>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %esi
               	leaq	101576(%rip), %rdi      # 0x4452b5 <typeinfo name for kotlin::gc::GCSchedulerData+0x117c>
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movq	%rbp, %rdi
               	movq	%r13, %rsi
               	movl	4(%rsp), %edx
               	movl	$1409548322, %ecx       # imm = 0x54040022
               	callq	0x42cec0 <mi_unix_mmapx>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jne	0x42c30f <_mi_os_alloc_aligned+0x2bf>
               	movq	$10, 265449(%rip)       # 0x46d308 <mi_unix_mmap.large_page_try_ok>
               	movl	4(%rsp), %ebx
               	jmp	0x42c2b0 <_mi_os_alloc_aligned+0x260>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	101399(%rip), %rdi      # 0x44524d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%ebx, %ebx
               	movq	%r12, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	jmp	0x42c394 <_mi_os_alloc_aligned+0x344>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 231410(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	testb	%r14b, %r14b
               	je	0x42c69e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 231441(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	addq	%r12, %rcx
               	movq	231423(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	cmpq	%rcx, %rax
               	jge	0x42c681 <_mi_os_alloc_aligned+0x631>
               	lock
               	cmpxchgq	%rcx, 231409(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42c671 <_mi_os_alloc_aligned+0x621>
               	testq	%r12, %r12
               	jle	0x42c690 <_mi_os_alloc_aligned+0x640>
               	lock
               	addq	%r12, 231378(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	jmp	0x42c69e <_mi_os_alloc_aligned+0x64e>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 231370(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	leaq	(%r15,%r13), %rax
               	addq	$-1, %rax
               	negq	%r13
               	andq	%rax, %r13
               	movq	%r13, %rbx
               	subq	%r15, %rbx
               	movq	225655(%rip), %rcx      # 0x463830 <os_page_size>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x42c6d1 <_mi_os_alloc_aligned+0x681>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x42c6f0 <_mi_os_alloc_aligned+0x6a0>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42c6e7 <_mi_os_alloc_aligned+0x697>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x42c6ed <_mi_os_alloc_aligned+0x69d>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	subq	%rbx, %r12
               	subq	%rbp, %r12
               	testq	%rbx, %rbx
               	je	0x42c7b9 <_mi_os_alloc_aligned+0x769>
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	callq	0x4138a0 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42c754 <_mi_os_alloc_aligned+0x704>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 231253(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	231235(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42c73d <_mi_os_alloc_aligned+0x6ed>
               	lock
               	cmpxchgq	%rsi, 231221(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42c72d <_mi_os_alloc_aligned+0x6dd>
               	testq	%rbx, %rbx
               	js	0x42c74c <_mi_os_alloc_aligned+0x6fc>
               	lock
               	addq	%rbx, 231198(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	jmp	0x42c754 <_mi_os_alloc_aligned+0x704>
               	lock
               	addq	%rdx, 231180(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 231160(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	231142(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42c77a <_mi_os_alloc_aligned+0x72a>
               	lock
               	cmpxchgq	%rsi, 231128(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42c76a <_mi_os_alloc_aligned+0x71a>
               	testq	%rbx, %rbx
               	js	0x42c789 <_mi_os_alloc_aligned+0x739>
               	lock
               	addq	%rbx, 231105(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	jmp	0x42c791 <_mi_os_alloc_aligned+0x741>
               	lock
               	addq	%rdx, 231087(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42c7b9 <_mi_os_alloc_aligned+0x769>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	leaq	100966(%rip), %rdi      # 0x44520f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r15, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	testq	%r12, %r12
               	je	0x42c88f <_mi_os_alloc_aligned+0x83f>
               	testq	%r13, %r13
               	je	0x42c88f <_mi_os_alloc_aligned+0x83f>
               	addq	%r13, %rbp
               	movq	%rbp, %rdi
               	movq	%r12, %rsi
               	callq	0x4138a0 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%r12, %rdx
               	negq	%rdx
               	testb	%r14b, %r14b
               	je	0x42c823 <_mi_os_alloc_aligned+0x7d3>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 231046(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	subq	%r12, %rsi
               	movq	231028(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	cmpq	%rsi, %rax
               	jge	0x42c80c <_mi_os_alloc_aligned+0x7bc>
               	lock
               	cmpxchgq	%rsi, 231014(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42c7fc <_mi_os_alloc_aligned+0x7ac>
               	testq	%r12, %r12
               	js	0x42c81b <_mi_os_alloc_aligned+0x7cb>
               	lock
               	addq	%r12, 230991(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	jmp	0x42c823 <_mi_os_alloc_aligned+0x7d3>
               	lock
               	addq	%rdx, 230973(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 230953(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	subq	%r12, %rsi
               	movq	230935(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	cmpq	%rsi, %rax
               	jge	0x42c849 <_mi_os_alloc_aligned+0x7f9>
               	lock
               	cmpxchgq	%rsi, 230921(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42c839 <_mi_os_alloc_aligned+0x7e9>
               	testq	%r12, %r12
               	js	0x42c858 <_mi_os_alloc_aligned+0x808>
               	lock
               	addq	%r12, 230898(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	jmp	0x42c860 <_mi_os_alloc_aligned+0x810>
               	lock
               	addq	%rdx, 230880(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	movq	%r13, %rbx
               	cmpl	$-1, %ecx
               	jne	0x42c578 <_mi_os_alloc_aligned+0x528>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	leaq	100752(%rip), %rdi      # 0x44520f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%rbp, %rdx
               	movq	%r12, %rcx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movq	%r13, %rbx
               	jmp	0x42c578 <_mi_os_alloc_aligned+0x528>
               	nopw	(%rax,%rax)

<_mi_os_alloc>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdi, %rbx
               	cmpq	$524287, %rdi           # imm = 0x7FFFF
               	ja	0x42c8ba <_mi_os_alloc+0x1a>
               	movq	225144(%rip), %rcx      # 0x463830 <os_page_size>
               	jmp	0x42c8eb <_mi_os_alloc+0x4b>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42c8eb <_mi_os_alloc+0x4b>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42c8eb <_mi_os_alloc+0x4b>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42c919 <_mi_os_alloc+0x79>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42c99f <_mi_os_alloc+0xff>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	je	0x42c9f8 <_mi_os_alloc+0x158>
               	cmpb	$1, 264648(%rip)        # 0x46d2e8 <large_os_page_size>
               	jne	0x42c92c <_mi_os_alloc+0x8c>
               	movl	$6, %edi
               	callq	0x42bc30 <mi_option_get>
               	xorl	%r15d, %r15d
               	movl	$0, %edi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	movl	$16418, %ecx            # imm = 0x4022
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	movq	%rax, %r14
               	cmpq	$-1, %rax
               	cmoveq	%r15, %r14
               	testq	%r14, %r14
               	je	0x42c9c1 <_mi_os_alloc+0x121>
               	testq	%rbx, %rbx
               	je	0x42ca5a <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 230628(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	addq	%rbx, %rcx
               	movq	230610(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	nop
               	cmpq	%rcx, %rax
               	jge	0x42c990 <_mi_os_alloc+0xf0>
               	lock
               	cmpxchgq	%rcx, 230594(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42c980 <_mi_os_alloc+0xe0>
               	testq	%rbx, %rbx
               	jle	0x42c9fd <_mi_os_alloc+0x15d>
               	lock
               	addq	%rbx, 230563(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	jmp	0x42ca0b <_mi_os_alloc+0x16b>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42c9e6 <_mi_os_alloc+0x146>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42c919 <_mi_os_alloc+0x79>
               	jmp	0x42c9f8 <_mi_os_alloc+0x158>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edx
               	leaq	100478(%rip), %rdi      # 0x44524d <typeinfo name for kotlin::gc::GCSchedulerData+0x1114>
               	xorl	%r14d, %r14d
               	movq	%rbx, %rsi
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	xorl	%r9d, %r9d
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	jmp	0x42ca5a <_mi_os_alloc+0x1ba>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42c919 <_mi_os_alloc+0x79>
               	xorl	%r14d, %r14d
               	jmp	0x42ca5a <_mi_os_alloc+0x1ba>
               	movq	%rbx, %rax
               	negq	%rax
               	lock
               	addq	%rax, 230461(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	movq	%rbx, %rcx
               	lock
               	xaddq	%rcx, 230497(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	addq	%rbx, %rcx
               	movq	230479(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rcx, %rax
               	jge	0x42ca40 <_mi_os_alloc+0x1a0>
               	lock
               	cmpxchgq	%rcx, 230450(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42ca30 <_mi_os_alloc+0x190>
               	testq	%rbx, %rbx
               	jle	0x42ca4f <_mi_os_alloc+0x1af>
               	lock
               	addq	%rbx, 230419(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	jmp	0x42ca5a <_mi_os_alloc+0x1ba>
               	negq	%rbx
               	lock
               	addq	%rbx, 230414(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	movq	%r14, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_os_free_ex>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42cbd2 <_mi_os_free_ex+0x162>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x42cbd2 <_mi_os_free_ex+0x162>
               	movl	%edx, %ebp
               	movq	%rdi, %r14
               	cmpq	$524287, %rbx           # imm = 0x7FFFF
               	ja	0x42caa0 <_mi_os_free_ex+0x30>
               	movq	224658(%rip), %rcx      # 0x463830 <os_page_size>
               	jmp	0x42cad1 <_mi_os_free_ex+0x61>
               	movl	$65536, %ecx            # imm = 0x10000
               	cmpq	$2097152, %rbx          # imm = 0x200000
               	jb	0x42cad1 <_mi_os_free_ex+0x61>
               	movl	$262144, %ecx           # imm = 0x40000
               	cmpq	$8388608, %rbx          # imm = 0x800000
               	jb	0x42cad1 <_mi_os_free_ex+0x61>
               	cmpq	$33554432, %rbx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	movq	%rcx, %rax
               	notq	%rax
               	cmpq	%rbx, %rax
               	jbe	0x42cb2f <_mi_os_free_ex+0xbf>
               	leaq	-1(%rcx), %rax
               	addq	%rcx, %rbx
               	addq	$-1, %rbx
               	testq	%rax, %rcx
               	jne	0x42cafc <_mi_os_free_ex+0x8c>
               	negq	%rcx
               	andq	%rcx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42cb2f <_mi_os_free_ex+0xbf>
               	jmp	0x42cbd2 <_mi_os_free_ex+0x162>
               	movq	%rbx, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x42cb1d <_mi_os_free_ex+0xad>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	jne	0x42cb2f <_mi_os_free_ex+0xbf>
               	jmp	0x42cbd2 <_mi_os_free_ex+0x162>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbx
               	testq	%rbx, %rbx
               	je	0x42cbd2 <_mi_os_free_ex+0x162>
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x4138a0 <munmap@plt>
               	movl	%eax, %ecx
               	movq	%rbx, %rdx
               	negq	%rdx
               	testb	%bpl, %bpl
               	je	0x42cb8c <_mi_os_free_ex+0x11c>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 230181(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	subq	%rbx, %rsi
               	movq	230163(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42cb70 <_mi_os_free_ex+0x100>
               	lock
               	cmpxchgq	%rsi, 230146(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42cb60 <_mi_os_free_ex+0xf0>
               	testq	%rbx, %rbx
               	js	0x42cb84 <_mi_os_free_ex+0x114>
               	lock
               	addq	%rbx, 230123(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	testq	%rbx, %rbx
               	jne	0x42cb8c <_mi_os_free_ex+0x11c>
               	jmp	0x42cbcd <_mi_os_free_ex+0x15d>
               	lock
               	addq	%rdx, 230100(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	%rdx, %rsi
               	lock
               	xaddq	%rsi, 230080(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	subq	%rbx, %rsi
               	movq	230062(%rip), %rax      # 0x464e50 <_mi_stats_main+0x50>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jge	0x42cbc0 <_mi_os_free_ex+0x150>
               	lock
               	cmpxchgq	%rsi, 230034(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	jne	0x42cbb0 <_mi_os_free_ex+0x140>
               	testq	%rbx, %rbx
               	js	0x42cbd7 <_mi_os_free_ex+0x167>
               	lock
               	addq	%rbx, 230011(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	cmpl	$-1, %ecx
               	je	0x42cbe4 <_mi_os_free_ex+0x174>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	lock
               	addq	%rdx, 229985(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	cmpl	$-1, %ecx
               	jne	0x42cbd2 <_mi_os_free_ex+0x162>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %edi
               	callq	0x413890 <strerror@plt>
               	leaq	99864(%rip), %rdi       # 0x44520f <typeinfo name for kotlin::gc::GCSchedulerData+0x10d6>
               	movq	%rax, %rsi
               	movq	%r14, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	jmp	0x42cc90 <_mi_warning_message>
               	nopl	(%rax,%rax)

<_mi_stat_decrease>:
               	testq	%rsi, %rsi
               	je	0x42cc86 <_mi_stat_decrease+0x76>
               	leaq	229856(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42cc68 <_mi_stat_decrease+0x58>
               	leaq	230416(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42cc68 <_mi_stat_decrease+0x58>
               	movq	%rsi, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 24(%rdi)
               	subq	%rsi, %rdx
               	movq	16(%rdi), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42cc5d <_mi_stat_decrease+0x4d>
               	lock
               	cmpxchgq	%rdx, 16(%rdi)
               	jne	0x42cc50 <_mi_stat_decrease+0x40>
               	testq	%rsi, %rsi
               	js	0x42cc87 <_mi_stat_decrease+0x77>
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	movq	24(%rdi), %rax
               	subq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42cc7d <_mi_stat_decrease+0x6d>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	js	0x42cc8c <_mi_stat_decrease+0x7c>
               	addq	%rsi, 8(%rdi)
               	retq
               	lock
               	addq	%rcx, (%rdi)
               	retq
               	subq	%rsi, (%rdi)
               	retq

<_mi_warning_message>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rdi, %rbx
               	testb	%al, %al
               	je	0x42ccdc <_mi_warning_message+0x4c>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	xorl	%edi, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42cd14 <_mi_warning_message+0x84>
               	movl	$2, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42cdc1 <_mi_warning_message+0x131>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 230814(%rip)      # 0x4652c0 <warning_count>
               	cmpq	224015(%rip), %rax      # 0x463838 <mi_max_warning_count>
               	ja	0x42cdc1 <_mi_warning_message+0x131>
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x42cdc1 <_mi_warning_message+0x131>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42cdc1 <_mi_warning_message+0x131>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x4138b0 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	230709(%rip), %r12      # 0x4652c8 <mi_out_arg>
               	movq	230710(%rip), %rax      # 0x4652d0 <mi_out_default>
               	testq	%rax, %rax
               	leaq	44(%rip), %rbx          # 0x42cdd0 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	99466(%rip), %rdi       # 0x445239 <typeinfo name for kotlin::gc::GCSchedulerData+0x1100>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq

<mi_out_buf>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x42ce07 <mi_out_buf+0x37>
               	movq	230651(%rip), %rax      # 0x4652d8 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x42ce07 <mi_out_buf+0x37>
               	movq	%rdi, %rbx
               	callq	0x413710 <strlen@plt>
               	testq	%rax, %rax
               	je	0x42ce07 <mi_out_buf+0x37>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 230618(%rip)      # 0x4652d8 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x42ce09 <mi_out_buf+0x39>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	230585(%rip), %rdi      # 0x4652e0 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x413720 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<_mi_stat_increase>:
               	testq	%rsi, %rsi
               	je	0x42ceb2 <_mi_stat_increase+0x72>
               	leaq	229300(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	jb	0x42ce87 <_mi_stat_increase+0x47>
               	leaq	229864(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rdi
               	jae	0x42ce87 <_mi_stat_increase+0x47>
               	movq	%rsi, %rcx
               	lock
               	xaddq	%rcx, 24(%rdi)
               	addq	%rsi, %rcx
               	movq	16(%rdi), %rax
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42ce7d <_mi_stat_increase+0x3d>
               	lock
               	cmpxchgq	%rcx, 16(%rdi)
               	jne	0x42ce70 <_mi_stat_increase+0x30>
               	testq	%rsi, %rsi
               	jle	0x42cea5 <_mi_stat_increase+0x65>
               	lock
               	addq	%rsi, (%rdi)
               	retq
               	movq	24(%rdi), %rax
               	addq	%rsi, %rax
               	movq	%rax, 24(%rdi)
               	cmpq	16(%rdi), %rax
               	jle	0x42ce9c <_mi_stat_increase+0x5c>
               	movq	%rax, 16(%rdi)
               	testq	%rsi, %rsi
               	jle	0x42ceae <_mi_stat_increase+0x6e>
               	addq	%rsi, (%rdi)
               	retq
               	negq	%rsi
               	lock
               	addq	%rsi, 8(%rdi)
               	retq
               	subq	%rsi, 8(%rdi)
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_unix_mmapx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%ecx, %r14d
               	movl	%edx, %r15d
               	movq	%rdi, %rbp
               	cmpq	$1073741824, %rdi       # imm = 0x40000000
               	ja	0x42cfb3 <mi_unix_mmapx+0xf3>
               	movl	%ebp, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	testq	%rax, %rax
               	jne	0x42cfb3 <mi_unix_mmapx+0xf3>
               	movq	%rsi, %r12
               	leaq	-1(%rsi), %rax
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42cfb3 <mi_unix_mmapx+0xf3>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 263155(%rip)      # 0x46d300 <aligned_base>
               	leaq	-1(%rbx), %rax
               	shrq	$41, %rax
               	cmpl	$15, %eax
               	jb	0x42cf63 <mi_unix_mmapx+0xa3>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rdi
               	callq	0x429d30 <_mi_heap_random_next>
               	shlq	$5, %rax
               	movabsq	$4398042316800, %rcx    # imm = 0x3FFFFC00000
               	andq	%rax, %rcx
               	movabsq	$2199023255552, %rdx    # imm = 0x20000000000
               	addq	%rcx, %rdx
               	addq	%rbp, %rbx
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rdx, 263081(%rip)      # 0x46d300 <aligned_base>
               	movq	%rbp, %rbx
               	lock
               	xaddq	%rbx, 263069(%rip)      # 0x46d300 <aligned_base>
               	movq	%rbx, %rax
               	orq	%r12, %rax
               	shrq	$32, %rax
               	je	0x42cf7e <mi_unix_mmapx+0xbe>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r12
               	testq	%rbx, %rbx
               	jne	0x42cf8a <mi_unix_mmapx+0xca>
               	jmp	0x42cfb3 <mi_unix_mmapx+0xf3>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r12d
               	testq	%rbx, %rbx
               	je	0x42cfb3 <mi_unix_mmapx+0xf3>
               	testq	%rdx, %rdx
               	jne	0x42cfb3 <mi_unix_mmapx+0xf3>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	leaq	1(%rax), %rcx
               	cmpq	$1, %rcx
               	ja	0x42cfd6 <mi_unix_mmapx+0x116>
               	xorl	%ebx, %ebx
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	movl	%r15d, %edx
               	movl	%r14d, %ecx
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	cmpq	$-1, %rax
               	cmoveq	%rbx, %rax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<_mi_os_numa_node_count_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$128, %rsp
               	movq	262949(%rip), %rbx      # 0x46d318 <_mi_numa_node_count>
               	testq	%rbx, %rbx
               	jne	0x42d073 <_mi_os_numa_node_count_get+0x93>
               	movl	$15, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	jg	0x42d05b <_mi_os_numa_node_count_get+0x7b>
               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
               	leaq	99295(%rip), %r14       # 0x4453f9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	movq	%rsp, %r15
               	nopl	(%rax)
               	cmpl	$255, %ebx
               	je	0x42d053 <_mi_os_numa_node_count_get+0x73>
               	leal	2(%rbx), %ecx
               	movl	$127, %esi
               	movq	%r15, %rdi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	movq	%r15, %rdi
               	movl	$4, %esi
               	callq	0x413920 <access@plt>
               	addl	$1, %ebx
               	testl	%eax, %eax
               	je	0x42d020 <_mi_os_numa_node_count_get+0x40>
               	jmp	0x42d058 <_mi_os_numa_node_count_get+0x78>
               	movl	$256, %ebx              # imm = 0x100
               	addl	$1, %ebx
               	movq	%rbx, 262838(%rip)      # 0x46d318 <_mi_numa_node_count>
               	leaq	99248(%rip), %rdi       # 0x445419 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%rbx, %rsi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	movq	%rbx, %rax
               	addq	$128, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_error_message>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$720, %rsp              # imm = 0x2D0
               	movq	%rsi, %rbx
               	movl	%edi, %ebp
               	testb	%al, %al
               	je	0x42d0df <_mi_error_message+0x4f>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	768(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430224, %rax     # imm = 0x3000000010
               	movq	%rax, (%rsp)
               	xorl	%edi, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	jne	0x42d137 <_mi_error_message+0xa7>
               	movl	$2, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42d1bb <_mi_error_message+0x12b>
               	movl	$1, %eax
               	lock
               	xaddq	%rax, 262675(%rip)      # 0x46d358 <error_count>
               	cmpq	223444(%rip), %rax      # 0x463a20 <mi_max_error_count>
               	ja	0x42d1bb <_mi_error_message+0x12b>
               	testq	%rbx, %rbx
               	je	0x42d1bb <_mi_error_message+0x12b>
               	movq	$-56, %r15
               	cmpb	$0, %fs:(%r15)
               	jne	0x42d1bb <_mi_error_message+0x12b>
               	movb	$1, %fs:(%r15)
               	leaq	208(%rsp), %r14
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	movq	%r14, %rdi
               	movq	%rbx, %rdx
               	callq	0x4138b0 <vsnprintf@plt>
               	movb	$1, %fs:(%r15)
               	movq	229691(%rip), %r12      # 0x4652c8 <mi_out_arg>
               	movq	229692(%rip), %rax      # 0x4652d0 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-974(%rip), %rbx        # 0x42cdd0 <mi_out_buf>
               	cmovneq	%rax, %rbx
               	leaq	99394(%rip), %rdi       # 0x4455eb <typeinfo name for kotlin::gc::GCSchedulerData+0x14b2>
               	movq	%r12, %rsi
               	callq	*%rbx
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	callq	*%rbx
               	movb	$0, %fs:(%r15)
               	cmpq	$0, 262557(%rip)        # 0x46d360 <mi_error_handler>
               	je	0x42d1d7 <_mi_error_message+0x147>
               	movq	262548(%rip), %rax      # 0x46d360 <mi_error_handler>
               	movq	262549(%rip), %rsi      # 0x46d368 <mi_error_arg>
               	movl	%ebp, %edi
               	callq	*%rax
               	addq	$720, %rsp              # imm = 0x2D0
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	(%rax,%rax)

<mi_stats_merge_from>:
               	leaq	228361(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdi
               	je	0x42d6d9 <mi_stats_merge_from+0x4e9>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d20f <mi_stats_merge_from+0x1f>
               	cmpq	$0, 8(%rdi)
               	je	0x42d23b <mi_stats_merge_from+0x4b>
               	lock
               	addq	%rax, 228329(%rip)      # 0x464e00 <_mi_stats_main>
               	movq	24(%rdi), %rax
               	lock
               	addq	%rax, 228341(%rip)      # 0x464e18 <_mi_stats_main+0x18>
               	movq	8(%rdi), %rax
               	lock
               	addq	%rax, 228313(%rip)      # 0x464e08 <_mi_stats_main+0x8>
               	movq	16(%rdi), %rax
               	lock
               	addq	%rax, 228309(%rip)      # 0x464e10 <_mi_stats_main+0x10>
               	movq	32(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d24b <mi_stats_merge_from+0x5b>
               	cmpq	$0, 40(%rdi)
               	je	0x42d277 <mi_stats_merge_from+0x87>
               	lock
               	addq	%rax, 228301(%rip)      # 0x464e20 <_mi_stats_main+0x20>
               	movq	56(%rdi), %rax
               	lock
               	addq	%rax, 228313(%rip)      # 0x464e38 <_mi_stats_main+0x38>
               	movq	40(%rdi), %rax
               	lock
               	addq	%rax, 228285(%rip)      # 0x464e28 <_mi_stats_main+0x28>
               	movq	48(%rdi), %rax
               	lock
               	addq	%rax, 228281(%rip)      # 0x464e30 <_mi_stats_main+0x30>
               	movq	64(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d287 <mi_stats_merge_from+0x97>
               	cmpq	$0, 72(%rdi)
               	je	0x42d2b3 <mi_stats_merge_from+0xc3>
               	lock
               	addq	%rax, 228273(%rip)      # 0x464e40 <_mi_stats_main+0x40>
               	movq	88(%rdi), %rax
               	lock
               	addq	%rax, 228285(%rip)      # 0x464e58 <_mi_stats_main+0x58>
               	movq	72(%rdi), %rax
               	lock
               	addq	%rax, 228257(%rip)      # 0x464e48 <_mi_stats_main+0x48>
               	movq	80(%rdi), %rax
               	lock
               	addq	%rax, 228253(%rip)      # 0x464e50 <_mi_stats_main+0x50>
               	movq	96(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d2c3 <mi_stats_merge_from+0xd3>
               	cmpq	$0, 104(%rdi)
               	je	0x42d2ef <mi_stats_merge_from+0xff>
               	lock
               	addq	%rax, 228245(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	120(%rdi), %rax
               	lock
               	addq	%rax, 228257(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	movq	104(%rdi), %rax
               	lock
               	addq	%rax, 228229(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	movq	112(%rdi), %rax
               	lock
               	addq	%rax, 228225(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	movq	128(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d305 <mi_stats_merge_from+0x115>
               	cmpq	$0, 136(%rdi)
               	je	0x42d33a <mi_stats_merge_from+0x14a>
               	lock
               	addq	%rax, 228211(%rip)      # 0x464e80 <_mi_stats_main+0x80>
               	movq	152(%rdi), %rax
               	lock
               	addq	%rax, 228220(%rip)      # 0x464e98 <_mi_stats_main+0x98>
               	movq	136(%rdi), %rax
               	lock
               	addq	%rax, 228189(%rip)      # 0x464e88 <_mi_stats_main+0x88>
               	movq	144(%rdi), %rax
               	lock
               	addq	%rax, 228182(%rip)      # 0x464e90 <_mi_stats_main+0x90>
               	movq	160(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d350 <mi_stats_merge_from+0x160>
               	cmpq	$0, 168(%rdi)
               	je	0x42d385 <mi_stats_merge_from+0x195>
               	lock
               	addq	%rax, 228168(%rip)      # 0x464ea0 <_mi_stats_main+0xa0>
               	movq	184(%rdi), %rax
               	lock
               	addq	%rax, 228177(%rip)      # 0x464eb8 <_mi_stats_main+0xb8>
               	movq	168(%rdi), %rax
               	lock
               	addq	%rax, 228146(%rip)      # 0x464ea8 <_mi_stats_main+0xa8>
               	movq	176(%rdi), %rax
               	lock
               	addq	%rax, 228139(%rip)      # 0x464eb0 <_mi_stats_main+0xb0>
               	movq	224(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d39b <mi_stats_merge_from+0x1ab>
               	cmpq	$0, 232(%rdi)
               	je	0x42d3d0 <mi_stats_merge_from+0x1e0>
               	lock
               	addq	%rax, 228157(%rip)      # 0x464ee0 <_mi_stats_main+0xe0>
               	movq	248(%rdi), %rax
               	lock
               	addq	%rax, 228166(%rip)      # 0x464ef8 <_mi_stats_main+0xf8>
               	movq	232(%rdi), %rax
               	lock
               	addq	%rax, 228135(%rip)      # 0x464ee8 <_mi_stats_main+0xe8>
               	movq	240(%rdi), %rax
               	lock
               	addq	%rax, 228128(%rip)      # 0x464ef0 <_mi_stats_main+0xf0>
               	movq	192(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d3e6 <mi_stats_merge_from+0x1f6>
               	cmpq	$0, 200(%rdi)
               	je	0x42d41b <mi_stats_merge_from+0x22b>
               	lock
               	addq	%rax, 228050(%rip)      # 0x464ec0 <_mi_stats_main+0xc0>
               	movq	216(%rdi), %rax
               	lock
               	addq	%rax, 228059(%rip)      # 0x464ed8 <_mi_stats_main+0xd8>
               	movq	200(%rdi), %rax
               	lock
               	addq	%rax, 228028(%rip)      # 0x464ec8 <_mi_stats_main+0xc8>
               	movq	208(%rdi), %rax
               	lock
               	addq	%rax, 228021(%rip)      # 0x464ed0 <_mi_stats_main+0xd0>
               	movq	256(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d431 <mi_stats_merge_from+0x241>
               	cmpq	$0, 264(%rdi)
               	je	0x42d466 <mi_stats_merge_from+0x276>
               	lock
               	addq	%rax, 228039(%rip)      # 0x464f00 <_mi_stats_main+0x100>
               	movq	280(%rdi), %rax
               	lock
               	addq	%rax, 228048(%rip)      # 0x464f18 <_mi_stats_main+0x118>
               	movq	264(%rdi), %rax
               	lock
               	addq	%rax, 228017(%rip)      # 0x464f08 <_mi_stats_main+0x108>
               	movq	272(%rdi), %rax
               	lock
               	addq	%rax, 228010(%rip)      # 0x464f10 <_mi_stats_main+0x110>
               	movq	384(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d47c <mi_stats_merge_from+0x28c>
               	cmpq	$0, 392(%rdi)
               	je	0x42d4b1 <mi_stats_merge_from+0x2c1>
               	lock
               	addq	%rax, 228092(%rip)      # 0x464f80 <_mi_stats_main+0x180>
               	movq	408(%rdi), %rax
               	lock
               	addq	%rax, 228101(%rip)      # 0x464f98 <_mi_stats_main+0x198>
               	movq	392(%rdi), %rax
               	lock
               	addq	%rax, 228070(%rip)      # 0x464f88 <_mi_stats_main+0x188>
               	movq	400(%rdi), %rax
               	lock
               	addq	%rax, 228063(%rip)      # 0x464f90 <_mi_stats_main+0x190>
               	movq	416(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d4c7 <mi_stats_merge_from+0x2d7>
               	cmpq	$0, 424(%rdi)
               	je	0x42d4fc <mi_stats_merge_from+0x30c>
               	lock
               	addq	%rax, 228049(%rip)      # 0x464fa0 <_mi_stats_main+0x1a0>
               	movq	440(%rdi), %rax
               	lock
               	addq	%rax, 228058(%rip)      # 0x464fb8 <_mi_stats_main+0x1b8>
               	movq	424(%rdi), %rax
               	lock
               	addq	%rax, 228027(%rip)      # 0x464fa8 <_mi_stats_main+0x1a8>
               	movq	432(%rdi), %rax
               	lock
               	addq	%rax, 228020(%rip)      # 0x464fb0 <_mi_stats_main+0x1b0>
               	movq	288(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d512 <mi_stats_merge_from+0x322>
               	cmpq	$0, 296(%rdi)
               	je	0x42d547 <mi_stats_merge_from+0x357>
               	lock
               	addq	%rax, 227846(%rip)      # 0x464f20 <_mi_stats_main+0x120>
               	movq	312(%rdi), %rax
               	lock
               	addq	%rax, 227855(%rip)      # 0x464f38 <_mi_stats_main+0x138>
               	movq	296(%rdi), %rax
               	lock
               	addq	%rax, 227824(%rip)      # 0x464f28 <_mi_stats_main+0x128>
               	movq	304(%rdi), %rax
               	lock
               	addq	%rax, 227817(%rip)      # 0x464f30 <_mi_stats_main+0x130>
               	movq	320(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d55d <mi_stats_merge_from+0x36d>
               	cmpq	$0, 328(%rdi)
               	je	0x42d592 <mi_stats_merge_from+0x3a2>
               	lock
               	addq	%rax, 227803(%rip)      # 0x464f40 <_mi_stats_main+0x140>
               	movq	344(%rdi), %rax
               	lock
               	addq	%rax, 227812(%rip)      # 0x464f58 <_mi_stats_main+0x158>
               	movq	328(%rdi), %rax
               	lock
               	addq	%rax, 227781(%rip)      # 0x464f48 <_mi_stats_main+0x148>
               	movq	336(%rdi), %rax
               	lock
               	addq	%rax, 227774(%rip)      # 0x464f50 <_mi_stats_main+0x150>
               	movq	352(%rdi), %rax
               	testq	%rax, %rax
               	jne	0x42d5a8 <mi_stats_merge_from+0x3b8>
               	cmpq	$0, 360(%rdi)
               	je	0x42d5dd <mi_stats_merge_from+0x3ed>
               	lock
               	addq	%rax, 227760(%rip)      # 0x464f60 <_mi_stats_main+0x160>
               	movq	376(%rdi), %rax
               	lock
               	addq	%rax, 227769(%rip)      # 0x464f78 <_mi_stats_main+0x178>
               	movq	360(%rdi), %rax
               	lock
               	addq	%rax, 227738(%rip)      # 0x464f68 <_mi_stats_main+0x168>
               	movq	368(%rdi), %rax
               	lock
               	addq	%rax, 227731(%rip)      # 0x464f70 <_mi_stats_main+0x170>
               	movq	448(%rdi), %rax
               	lock
               	addq	%rax, 227796(%rip)      # 0x464fc0 <_mi_stats_main+0x1c0>
               	movq	456(%rdi), %rax
               	lock
               	addq	%rax, 227789(%rip)      # 0x464fc8 <_mi_stats_main+0x1c8>
               	movq	464(%rdi), %rax
               	lock
               	addq	%rax, 227782(%rip)      # 0x464fd0 <_mi_stats_main+0x1d0>
               	movq	472(%rdi), %rax
               	lock
               	addq	%rax, 227775(%rip)      # 0x464fd8 <_mi_stats_main+0x1d8>
               	movq	480(%rdi), %rax
               	lock
               	addq	%rax, 227768(%rip)      # 0x464fe0 <_mi_stats_main+0x1e0>
               	movq	488(%rdi), %rax
               	lock
               	addq	%rax, 227761(%rip)      # 0x464fe8 <_mi_stats_main+0x1e8>
               	movq	496(%rdi), %rax
               	lock
               	addq	%rax, 227754(%rip)      # 0x464ff0 <_mi_stats_main+0x1f0>
               	movq	504(%rdi), %rax
               	lock
               	addq	%rax, 227747(%rip)      # 0x464ff8 <_mi_stats_main+0x1f8>
               	movq	512(%rdi), %rax
               	lock
               	addq	%rax, 227740(%rip)      # 0x465000 <_mi_stats_main+0x200>
               	movq	520(%rdi), %rax
               	lock
               	addq	%rax, 227733(%rip)      # 0x465008 <_mi_stats_main+0x208>
               	movq	528(%rdi), %rax
               	lock
               	addq	%rax, 227726(%rip)      # 0x465010 <_mi_stats_main+0x210>
               	movq	536(%rdi), %rax
               	lock
               	addq	%rax, 227719(%rip)      # 0x465018 <_mi_stats_main+0x218>
               	movq	544(%rdi), %rax
               	lock
               	addq	%rax, 227712(%rip)      # 0x465020 <_mi_stats_main+0x220>
               	movq	552(%rdi), %rax
               	lock
               	addq	%rax, 227705(%rip)      # 0x465028 <_mi_stats_main+0x228>
               	movq	560(%rdi), %rax
               	lock
               	addq	%rax, 227698(%rip)      # 0x465030 <_mi_stats_main+0x230>
               	movq	568(%rdi), %rax
               	lock
               	addq	%rax, 227691(%rip)      # 0x465038 <_mi_stats_main+0x238>
               	movl	$576, %edx              # imm = 0x240
               	xorl	%esi, %esi
               	jmp	0x413750 <memset@plt>
               	retq
               	nopw	(%rax,%rax)

<mi_heap_collect_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	testq	%rdi, %rdi
               	je	0x42e19c <mi_heap_collect_ex+0xabc>
               	movq	%rdi, %r15
               	leaq	209535(%rip), %rax      # 0x460980 <_mi_heap_empty>
               	cmpq	%rax, %rdi
               	je	0x42e19c <mi_heap_collect_ex+0xabc>
               	movl	%esi, %ebp
               	movq	(%r15), %rbx
               	movq	(%rbx), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rbx)
               	cmpq	$0, 327015(%rip)        # 0x47d488 <deferred_free>
               	je	0x42d72d <mi_heap_collect_ex+0x4d>
               	cmpb	$0, 8(%rbx)
               	je	0x42d8c9 <mi_heap_collect_ex+0x1e9>
               	cmpl	$2, %ebp
               	je	0x42d8f2 <mi_heap_collect_ex+0x212>
               	cmpl	$1, %ebp
               	jne	0x42d96d <mi_heap_collect_ex+0x28d>
               	movq	220450(%rip), %rax      # 0x463468 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	je	0x42d75d <mi_heap_collect_ex+0x7d>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42d96d <mi_heap_collect_ex+0x28d>
               	cmpq	%r15, 16(%rbx)
               	jne	0x42d96d <mi_heap_collect_ex+0x28d>
               	cmpb	$0, 3048(%r15)
               	jne	0x42d96d <mi_heap_collect_ex+0x28d>
               	addq	$32, %rbx
               	movq	326720(%rip), %rax      # 0x47d3c0 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42d84c <mi_heap_collect_ex+0x16c>
               	movq	326829(%rip), %rax      # 0x47d440 <abandoned_visited>
               	xorl	%r14d, %r14d
               	testq	%rax, %rax
               	je	0x42d970 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 326808(%rip)      # 0x47d440 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x42d970 <mi_heap_collect_ex+0x290>
               	movq	326664(%rip), %rax      # 0x47d3c0 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x42d7de <mi_heap_collect_ex+0xfe>
               	movq	326841(%rip), %rdx      # 0x47d480 <abandoned_visited_count>
               	leal	1(%rax), %esi
               	andl	$4194303, %esi          # imm = 0x3FFFFF
               	orq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, 326628(%rip)      # 0x47d3c0 <abandoned>
               	je	0x42d83c <mi_heap_collect_ex+0x15c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x42d7f0 <mi_heap_collect_ex+0x110>
               	movq	326585(%rip), %rax      # 0x47d3c0 <abandoned>
               	nopw	(%rax,%rax)
               	movq	326761(%rip), %rdx      # 0x47d480 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rsi)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 326534(%rip)      # 0x47d3c0 <abandoned>
               	jne	0x42d810 <mi_heap_collect_ex+0x130>
               	lock
               	addq	%rdx, 326588(%rip)      # 0x47d400 <abandoned_count>
               	lock
               	subq	%rdx, 326708(%rip)      # 0x47d480 <abandoned_visited_count>
               	lock
               	addq	$1, 326443(%rip)        # 0x47d380 <abandoned_readers>
               	movq	326500(%rip), %rax      # 0x47d3c0 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x42d964 <mi_heap_collect_ex+0x284>
               	movq	16(%rdi), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 326455(%rip)      # 0x47d3c0 <abandoned>
               	jne	0x42d860 <mi_heap_collect_ex+0x180>
               	lock
               	subq	$1, 326380(%rip)        # 0x47d380 <abandoned_readers>
               	movq	$0, 16(%rdi)
               	lock
               	subq	$1, 326491(%rip)        # 0x47d400 <abandoned_count>
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%rbx, %r8
               	callq	0x430be0 <mi_segment_reclaim>
               	movq	326405(%rip), %rax      # 0x47d3c0 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	jbe	0x42d78c <mi_heap_collect_ex+0xac>
               	jmp	0x42d84c <mi_heap_collect_ex+0x16c>
               	movb	$1, 8(%rbx)
               	movq	326580(%rip), %rax      # 0x47d488 <deferred_free>
               	movq	326581(%rip), %rdx      # 0x47d490 <deferred_arg>
               	movl	$1, %edi
               	callq	*%rax
               	movq	(%r15), %rbx
               	movb	$0, 8(%rbx)
               	cmpl	$2, %ebp
               	jne	0x42d736 <mi_heap_collect_ex+0x56>
               	movb	$1, %r14b
               	cmpq	$0, 3016(%r15)
               	je	0x42d970 <mi_heap_collect_ex+0x290>
               	xorl	%ecx, %ecx
               	jmp	0x42d91a <mi_heap_collect_ex+0x23a>
               	nopw	(%rax,%rax)
               	addq	$1, %rcx
               	cmpq	$75, %rcx
               	je	0x42d970 <mi_heap_collect_ex+0x290>
               	leaq	(%rcx,%rcx,2), %rax
               	movq	1040(%r15,%rax,8), %rdx
               	nopw	%cs:(%rax,%rax)
               	testq	%rdx, %rdx
               	je	0x42d910 <mi_heap_collect_ex+0x230>
               	movq	%rdx, %rsi
               	movq	48(%rdx), %rdx
               	movq	32(%rsi), %rax
               	movl	%eax, %edi
               	andl	$3, %edi
               	cmpl	$3, %edi
               	je	0x42d930 <mi_heap_collect_ex+0x250>
               	cmpl	$1, %edi
               	je	0x42d960 <mi_heap_collect_ex+0x280>
               	movq	%rax, %rdi
               	orq	$3, %rdi
               	lock
               	cmpxchgq	%rdi, 32(%rsi)
               	jne	0x42d93c <mi_heap_collect_ex+0x25c>
               	jmp	0x42d930 <mi_heap_collect_ex+0x250>
               	pause
               	jmp	0x42d93c <mi_heap_collect_ex+0x25c>
               	lock
               	subq	$1, 326163(%rip)        # 0x47d380 <abandoned_readers>
               	xorl	%r14d, %r14d
               	movq	2840(%r15), %rax
               	xorl	%ecx, %ecx
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x42d9b0 <mi_heap_collect_ex+0x2d0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%rcx, 2840(%r15)
               	jne	0x42d980 <mi_heap_collect_ex+0x2a0>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbx
               	callq	0x430510 <_mi_free_delayed_block>
               	movq	%rbx, %rdi
               	testq	%rbx, %rbx
               	jne	0x42d9a0 <mi_heap_collect_ex+0x2c0>
               	movq	3024(%r15), %rbp
               	cmpq	3032(%r15), %rbp
               	jbe	0x42ddc1 <mi_heap_collect_ex+0x6e1>
               	movq	$74, 3024(%r15)
               	movq	$0, 3032(%r15)
               	cmpq	$0, 3016(%r15)
               	movq	%r15, (%rsp)
               	je	0x42de91 <mi_heap_collect_ex+0x7b1>
               	testb	%r14b, %r14b
               	je	0x42de24 <mi_heap_collect_ex+0x744>
               	leaq	1016(%r15), %rax
               	movq	%rax, 8(%rsp)
               	xorl	%eax, %eax
               	leaq	226294(%rip), %r13      # 0x464e00 <_mi_stats_main>
               	jmp	0x42da2d <mi_heap_collect_ex+0x34d>
               	nop
               	movq	16(%rsp), %rax
               	addq	$1, %rax
               	addq	$24, 8(%rsp)
               	cmpq	$75, %rax
               	movq	(%rsp), %r15
               	je	0x42de91 <mi_heap_collect_ex+0x7b1>
               	movq	%rax, 16(%rsp)
               	leaq	(%rax,%rax,2), %rax
               	movq	1040(%r15,%rax,8), %r14
               	testq	%r14, %r14
               	je	0x42da10 <mi_heap_collect_ex+0x330>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42da75 <mi_heap_collect_ex+0x395>
               	nopl	(%rax,%rax)
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42e350 <_mi_page_free>
               	testq	%r14, %r14
               	je	0x42da10 <mi_heap_collect_ex+0x330>
               	movq	%r14, %rbx
               	movq	48(%r14), %r14
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42e280 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbx)
               	je	0x42da60 <mi_heap_collect_ex+0x380>
               	leaq	48(%rbx), %r10
               	movq	40(%rbx), %rax
               	movq	(%rax), %rsi
               	movq	40(%rbx), %r12
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42daae <mi_heap_collect_ex+0x3ce>
               	movq	(%r10), %rcx
               	movq	%rcx, 48(%rax)
               	movq	(%r10), %r9
               	testq	%r9, %r9
               	je	0x42daba <mi_heap_collect_ex+0x3da>
               	movq	%rax, 56(%r9)
               	cmpq	%rbx, 8(%r15)
               	je	0x42dad0 <mi_heap_collect_ex+0x3f0>
               	cmpq	%rbx, (%r15)
               	jne	0x42dce0 <mi_heap_collect_ex+0x600>
               	jmp	0x42dae1 <mi_heap_collect_ex+0x401>
               	nop
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r15)
               	cmpq	%rbx, (%r15)
               	jne	0x42dce0 <mi_heap_collect_ex+0x600>
               	movq	%r9, (%r15)
               	movq	16(%r15), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x42dce0 <mi_heap_collect_ex+0x600>
               	testq	%r9, %r9
               	leaq	100546(%rip), %rcx      # 0x4463c0 <_mi_page_empty>
               	cmoveq	%rcx, %r9
               	leaq	7(%rax), %r11
               	shrq	$3, %r11
               	cmpq	%r9, 8(%r12,%r11,8)
               	je	0x42dce0 <mi_heap_collect_ex+0x600>
               	cmpq	$9, %rax
               	jae	0x42db22 <mi_heap_collect_ex+0x442>
               	xorl	%ecx, %ecx
               	jmp	0x42dbe2 <mi_heap_collect_ex+0x502>
               	cmpq	$64, %rax
               	ja	0x42db32 <mi_heap_collect_ex+0x452>
               	leal	1(%r11), %r8d
               	andb	$-2, %r8b
               	jmp	0x42db4d <mi_heap_collect_ex+0x46d>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r12), %rbp
               	movq	8(%rsp), %rdx
               	nopw	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x42dbc0 <mi_heap_collect_ex+0x4e0>
               	cmpq	$71, %rax
               	ja	0x42db90 <mi_heap_collect_ex+0x4b0>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x42dbc0 <mi_heap_collect_ex+0x4e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x42dbc0 <mi_heap_collect_ex+0x4e0>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r13
               	movl	%r13d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r13,4), %ecx
               	leaq	225859(%rip), %r13      # 0x464e00 <_mi_stats_main>
               	addb	$-3, %cl
               	cmpq	%rbp, %rdx
               	jbe	0x42dbce <mi_heap_collect_ex+0x4ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r8b
               	je	0x42db60 <mi_heap_collect_ex+0x480>
               	leaq	1(%rdi), %rcx
               	cmpq	%r11, %rdi
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42dce0 <mi_heap_collect_ex+0x600>
               	addq	$1, %r11
               	movq	%r11, %r8
               	subq	%rcx, %r8
               	cmpq	$4, %r8
               	jb	0x42dcd0 <mi_heap_collect_ex+0x5f0>
               	movq	%r8, %rdi
               	andq	$-4, %rdi
               	movq	%r9, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%rdi), %rbp
               	movq	%rbp, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rbp
               	jae	0x42dc25 <mi_heap_collect_ex+0x545>
               	xorl	%ebp, %ebp
               	jmp	0x42dc82 <mi_heap_collect_ex+0x5a2>
               	leaq	(%r12,%rcx,8), %r13
               	addq	$120, %r13
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%r13,%rbp,8)
               	movdqu	%xmm0, -96(%r13,%rbp,8)
               	movdqu	%xmm0, -80(%r13,%rbp,8)
               	movdqu	%xmm0, -64(%r13,%rbp,8)
               	movdqu	%xmm0, -48(%r13,%rbp,8)
               	movdqu	%xmm0, -32(%r13,%rbp,8)
               	movdqu	%xmm0, -16(%r13,%rbp,8)
               	movdqu	%xmm0, (%r13,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdx
               	jne	0x42dc40 <mi_heap_collect_ex+0x560>
               	testq	%rax, %rax
               	je	0x42dcb2 <mi_heap_collect_ex+0x5d2>
               	addq	%rcx, %rbp
               	leaq	(%r12,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	nopl	(%rax)
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x42dca0 <mi_heap_collect_ex+0x5c0>
               	cmpq	%rdi, %r8
               	leaq	225604(%rip), %r13      # 0x464e00 <_mi_stats_main>
               	je	0x42dce0 <mi_heap_collect_ex+0x600>
               	addq	%rdi, %rcx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%r9, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42dcd0 <mi_heap_collect_ex+0x5f0>
               	nop
               	addq	$-1, 3016(%r12)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r10)
               	andb	$-2, 6(%rbx)
               	movq	$0, 40(%rbx)
               	andq	$-4194304, %rbx         # imm = 0xFFC00000
               	movq	40(%rbx), %rax
               	addq	$1, %rax
               	movq	%rax, 40(%rbx)
               	movq	144(%rsi), %rdx
               	leaq	224(%rdx), %rcx
               	cmpq	%r13, %rcx
               	jb	0x42dd80 <mi_heap_collect_ex+0x6a0>
               	leaq	226069(%rip), %rdi      # 0x465040 <os_preloading>
               	cmpq	%rdi, %rcx
               	jae	0x42dd80 <mi_heap_collect_ex+0x6a0>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 248(%rdx)
               	leaq	1(%rdi), %rbp
               	movq	240(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rdi, %rax
               	jg	0x42dd60 <mi_heap_collect_ex+0x680>
               	lock
               	cmpxchgq	%rbp, 240(%rdx)
               	jne	0x42dd50 <mi_heap_collect_ex+0x670>
               	lock
               	addq	$1, (%rcx)
               	movq	40(%rbx), %rax
               	cmpq	%rax, 56(%rbx)
               	jne	0x42da70 <mi_heap_collect_ex+0x390>
               	jmp	0x42ddb0 <mi_heap_collect_ex+0x6d0>
               	nopl	(%rax,%rax)
               	movq	248(%rdx), %rbp
               	leaq	1(%rbp), %rdi
               	movq	%rdi, 248(%rdx)
               	cmpq	240(%rdx), %rbp
               	jl	0x42dda2 <mi_heap_collect_ex+0x6c2>
               	movq	%rdi, 240(%rdx)
               	addq	$1, (%rcx)
               	cmpq	%rax, 56(%rbx)
               	jne	0x42da70 <mi_heap_collect_ex+0x390>
               	addq	$32, %rsi
               	movq	%rbx, %rdi
               	callq	0x42ffa0 <mi_segment_abandon>
               	jmp	0x42da70 <mi_heap_collect_ex+0x390>
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	leaq	(%r15,%rax,8), %rbx
               	addq	$1040, %rbx             # imm = 0x410
               	jmp	0x42ddf5 <mi_heap_collect_ex+0x715>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r15), %rbp
               	ja	0x42d9c4 <mi_heap_collect_ex+0x2e4>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42dde0 <mi_heap_collect_ex+0x700>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x42dde0 <mi_heap_collect_ex+0x700>
               	cmpl	$0, 16(%rax)
               	jne	0x42ddd9 <mi_heap_collect_ex+0x6f9>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	callq	0x42e350 <_mi_page_free>
               	jmp	0x42dde0 <mi_heap_collect_ex+0x700>
               	xorl	%r14d, %r14d
               	jmp	0x42de3e <mi_heap_collect_ex+0x75e>
               	nopl	(%rax)
               	addq	$1, %r14
               	cmpq	$75, %r14
               	movq	(%rsp), %r15
               	je	0x42de91 <mi_heap_collect_ex+0x7b1>
               	leaq	(%r14,%r14,2), %rax
               	movq	1040(%r15,%rax,8), %rbp
               	testq	%rbp, %rbp
               	je	0x42de30 <mi_heap_collect_ex+0x750>
               	movq	(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %r15
               	addq	$1040, %r15             # imm = 0x410
               	jmp	0x42de68 <mi_heap_collect_ex+0x788>
               	movq	%rbx, %rbp
               	testq	%rbx, %rbx
               	je	0x42de30 <mi_heap_collect_ex+0x750>
               	movq	48(%rbp), %rbx
               	movq	%rbp, %rdi
               	movl	$1, %esi
               	callq	0x42e280 <_mi_page_free_collect>
               	cmpl	$0, 16(%rbp)
               	jne	0x42de60 <mi_heap_collect_ex+0x780>
               	movq	%rbp, %rdi
               	movq	%r15, %rsi
               	movl	$1, %edx
               	callq	0x42e350 <_mi_page_free>
               	jmp	0x42de60 <mi_heap_collect_ex+0x780>
               	movq	(%r15), %r15
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42e175 <mi_heap_collect_ex+0xa95>
               	leaq	225109(%rip), %rbx      # 0x464e00 <_mi_stats_main>
               	movl	$1, %r13d
               	jmp	0x42deec <mi_heap_collect_ex+0x80c>
               	nopw	%cs:(%rax,%rax)
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	movq	(%r14), %rdx
               	andb	$1, %r12b
               	movzbl	%al, %r8d
               	movzbl	%r12b, %ecx
               	movq	%r14, %rdi
               	callq	0x42ed70 <_mi_mem_free>
               	movq	136(%r15), %r14
               	testq	%r14, %r14
               	je	0x42e175 <mi_heap_collect_ex+0xa95>
               	addq	$-1, 120(%r15)
               	movq	24(%r14), %rax
               	movq	%rax, 136(%r15)
               	movq	$0, 24(%r14)
               	movq	144(%r15), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rbx, %rax
               	jb	0x42df60 <mi_heap_collect_ex+0x880>
               	leaq	225570(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42df60 <mi_heap_collect_ex+0x880>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42df50 <mi_heap_collect_ex+0x870>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42df40 <mi_heap_collect_ex+0x860>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42df8a <mi_heap_collect_ex+0x8aa>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42df82 <mi_heap_collect_ex+0x8a2>
               	movq	%rax, 432(%rcx)
               	addq	$1, 424(%rcx)
               	movq	72(%r14), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r14)
               	movq	144(%r15), %rcx
               	cmpq	%rbx, %rcx
               	setae	%dl
               	leaq	225432(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42dff0 <mi_heap_collect_ex+0x910>
               	testb	%al, %al
               	je	0x42e030 <mi_heap_collect_ex+0x950>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42dfdd <mi_heap_collect_ex+0x8fd>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42dfd0 <mi_heap_collect_ex+0x8f0>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42e04b <mi_heap_collect_ex+0x96b>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42e13f <mi_heap_collect_ex+0xa5f>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42e01d <mi_heap_collect_ex+0x93d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42e010 <mi_heap_collect_ex+0x930>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42e159 <mi_heap_collect_ex+0xa79>
               	nopw	(%rax,%rax)
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42e046 <mi_heap_collect_ex+0x966>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	jbe	0x42e064 <mi_heap_collect_ex+0x984>
               	movq	%rax, 96(%r15)
               	movq	104(%r15), %rax
               	subq	%rsi, %rax
               	movq	%rax, 104(%r15)
               	cmpq	112(%r15), %rax
               	jbe	0x42e079 <mi_heap_collect_ex+0x999>
               	movq	%rax, 112(%r15)
               	movq	64(%r14), %r10
               	testq	%r10, %r10
               	je	0x42dec0 <mi_heap_collect_ex+0x7e0>
               	cmpq	$1, %r10
               	jne	0x42e0a0 <mi_heap_collect_ex+0x9c0>
               	movb	$1, %r12b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42e0f4 <mi_heap_collect_ex+0xa14>
               	nopl	(%rax)
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r14), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r12b
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r12b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42e0c0 <mi_heap_collect_ex+0x9e0>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42e110 <mi_heap_collect_ex+0xa30>
               	shlq	$6, %r8
               	movb	121(%r14,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r13d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r12b
               	testb	$1, %al
               	je	0x42dec3 <mi_heap_collect_ex+0x7e3>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42bc30 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r12b, %r12d
               	movl	$0, %eax
               	cmovnel	%eax, %r12d
               	movb	$1, %al
               	jmp	0x42dec5 <mi_heap_collect_ex+0x7e5>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42e155 <mi_heap_collect_ex+0xa75>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	88(%r15), %rax
               	movq	%rax, 88(%r15)
               	cmpq	96(%r15), %rax
               	ja	0x42e060 <mi_heap_collect_ex+0x980>
               	jmp	0x42e064 <mi_heap_collect_ex+0x984>
               	movq	217836(%rip), %rax      # 0x463468 <_mi_heap_main+0xb20>
               	testq	%rax, %rax
               	movq	(%rsp), %rdx
               	je	0x42e193 <mi_heap_collect_ex+0xab3>
               	movq	%fs:0, %rcx
               	cmpq	%rcx, %rax
               	jne	0x42e19c <mi_heap_collect_ex+0xabc>
               	movq	(%rdx), %rax
               	cmpq	%rdx, 16(%rax)
               	je	0x42e1ab <mi_heap_collect_ex+0xacb>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	258494(%rip), %r14      # 0x46d370 <regions_count>
               	testq	%r14, %r14
               	je	0x42e19c <mi_heap_collect_ex+0xabc>
               	xorl	%ebp, %ebp
               	leaq	258496(%rip), %r15      # 0x46d380 <regions>
               	movq	$-1, %rbx
               	jmp	0x42e1e9 <mi_heap_collect_ex+0xb09>
               	xorl	%ecx, %ecx
               	cmpq	$-1, %rax
               	sete	%cl
               	movl	$268435456, %esi        # imm = 0x10000000
               	callq	0x42e5d0 <_mi_arena_free>
               	nopl	(%rax)
               	addq	$1, %rbp
               	cmpq	%r14, %rbp
               	je	0x42e19c <mi_heap_collect_ex+0xabc>
               	movq	%rbp, %rcx
               	shlq	$6, %rcx
               	movq	(%rcx,%r15), %rax
               	testq	%rax, %rax
               	je	0x42e1e0 <mi_heap_collect_ex+0xb00>
               	leaq	(%r15,%rcx), %rsi
               	leaq	(%rcx,%r15), %rdx
               	addq	$16, %rdx
               	movq	16(%rcx,%r15), %rax
               	nop
               	testq	%rax, %rax
               	jne	0x42e1e0 <mi_heap_collect_ex+0xb00>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, (%rdx)
               	jne	0x42e210 <mi_heap_collect_ex+0xb30>
               	movq	8(%rcx,%r15), %rdi
               	movq	48(%rcx,%r15), %rdx
               	movq	32(%rcx,%r15), %rax
               	pxor	%xmm0, %xmm0
               	movdqa	%xmm0, 48(%rsi)
               	movdqa	%xmm0, 32(%rsi)
               	movdqa	%xmm0, 16(%rsi)
               	movdqa	%xmm0, (%rsi)
               	movq	$0, (%rsi)
               	testq	%rdi, %rdi
               	je	0x42e1e0 <mi_heap_collect_ex+0xb00>
               	movq	323881(%rip), %rcx      # 0x47d380 <abandoned_readers>
               	testq	%rcx, %rcx
               	je	0x42e1c9 <mi_heap_collect_ex+0xae9>
               	pause
               	movq	323863(%rip), %rcx      # 0x47d380 <abandoned_readers>
               	testq	%rcx, %rcx
               	jne	0x42e260 <mi_heap_collect_ex+0xb80>
               	jmp	0x42e1c9 <mi_heap_collect_ex+0xae9>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free_collect>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movl	%esi, %ebp
               	movq	%rdi, %rbx
               	testl	%esi, %esi
               	jne	0x42e296 <_mi_page_free_collect+0x16>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x42e2e9 <_mi_page_free_collect+0x69>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x42e2a0 <_mi_page_free_collect+0x20>
               	andq	$-4, %rcx
               	je	0x42e2e9 <_mi_page_free_collect+0x69>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x42e2d2 <_mi_page_free_collect+0x52>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x42e2c0 <_mi_page_free_collect+0x40>
               	cmpl	%edx, %eax
               	jbe	0x42e312 <_mi_page_free_collect+0x92>
               	leaq	95329(%rip), %rsi       # 0x44573e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42e30b <_mi_page_free_collect+0x8b>
               	movq	8(%rbx), %rcx
               	testq	%rcx, %rcx
               	jne	0x42e32b <_mi_page_free_collect+0xab>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x42e2f2 <_mi_page_free_collect+0x72>
               	jmp	0x42e30b <_mi_page_free_collect+0x8b>
               	testb	%bpl, %bpl
               	je	0x42e30b <_mi_page_free_collect+0x8b>
               	movq	%rax, %rsi
               	movq	%rsi, %rdx
               	movq	(%rsi), %rsi
               	testq	%rsi, %rsi
               	jne	0x42e333 <_mi_page_free_collect+0xb3>
               	movq	%rcx, (%rdx)
               	jmp	0x42e2fb <_mi_page_free_collect+0x7b>
               	nopw	%cs:(%rax,%rax)

<_mi_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	andb	$-3, 6(%rdi)
               	movq	40(%rdi), %rax
               	movq	(%rax), %r8
               	movq	40(%rdi), %r14
               	movq	56(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x42e378 <_mi_page_free+0x28>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rcx)
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x42e385 <_mi_page_free+0x35>
               	movq	%rcx, 56(%rax)
               	cmpq	%rdi, 8(%rsi)
               	je	0x42e39a <_mi_page_free+0x4a>
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42e58e <_mi_page_free+0x23e>
               	jmp	0x42e3af <_mi_page_free+0x5f>
               	movq	56(%rdi), %rcx
               	movq	%rcx, 8(%rsi)
               	leaq	48(%rdi), %r9
               	cmpq	%rdi, (%rsi)
               	jne	0x42e58e <_mi_page_free+0x23e>
               	movq	%rax, (%rsi)
               	movq	16(%rsi), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x42e58e <_mi_page_free+0x23e>
               	testq	%rax, %rax
               	leaq	98291(%rip), %r10       # 0x4463c0 <_mi_page_empty>
               	cmovneq	%rax, %r10
               	leaq	7(%rcx), %r11
               	shrq	$3, %r11
               	cmpq	%r10, 8(%r14,%r11,8)
               	je	0x42e58e <_mi_page_free+0x23e>
               	cmpq	$9, %rcx
               	jae	0x42e3f1 <_mi_page_free+0xa1>
               	xorl	%ecx, %ecx
               	jmp	0x42e4b2 <_mi_page_free+0x162>
               	cmpq	$64, %rcx
               	ja	0x42e401 <_mi_page_free+0xb1>
               	leal	1(%r11), %r15d
               	andb	$-2, %r15b
               	jmp	0x42e41c <_mi_page_free+0xcc>
               	leaq	-1(%r11), %rax
               	bsrq	%rax, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rbx,4), %r15d
               	addb	$-3, %r15b
               	leaq	1040(%r14), %rax
               	addq	$-24, %rsi
               	nopw	(%rax,%rax)
               	movq	16(%rsi), %rbx
               	addq	$7, %rbx
               	movq	%rbx, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rbx
               	jb	0x42e490 <_mi_page_free+0x140>
               	cmpq	$71, %rbx
               	ja	0x42e460 <_mi_page_free+0x110>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x42e490 <_mi_page_free+0x140>
               	movb	$73, %cl
               	cmpq	$2097159, %rbx          # imm = 0x200007
               	ja	0x42e490 <_mi_page_free+0x140>
               	leaq	-1(%rbp), %rbx
               	bsrq	%rbx, %r12
               	movl	%r12d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rbx
               	andl	$3, %ebx
               	leal	(%rbx,%r12,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rsi
               	jbe	0x42e49e <_mi_page_free+0x14e>
               	addq	$-24, %rsi
               	cmpb	%cl, %r15b
               	je	0x42e430 <_mi_page_free+0xe0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r11, %rbp
               	cmovaeq	%r11, %rcx
               	cmpq	%r11, %rcx
               	ja	0x42e58e <_mi_page_free+0x23e>
               	addq	$1, %r11
               	movq	%r11, %r12
               	subq	%rcx, %r12
               	cmpq	$4, %r12
               	jb	0x42e580 <_mi_page_free+0x230>
               	movq	%r12, %r15
               	andq	$-4, %r15
               	movq	%r10, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r15), %rsi
               	movq	%rsi, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x42e4f5 <_mi_page_free+0x1a5>
               	xorl	%ebx, %ebx
               	jmp	0x42e549 <_mi_page_free+0x1f9>
               	leaq	(%r14,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rax
               	jne	0x42e510 <_mi_page_free+0x1c0>
               	testq	%rbp, %rbp
               	je	0x42e572 <_mi_page_free+0x222>
               	addq	%rcx, %rbx
               	leaq	(%r14,%rbx,8), %rax
               	addq	$24, %rax
               	negq	%rbp
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbp
               	jne	0x42e560 <_mi_page_free+0x210>
               	cmpq	%r15, %r12
               	je	0x42e58e <_mi_page_free+0x23e>
               	addq	%r15, %rcx
               	nop
               	movq	%r10, 8(%r14,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r11
               	jne	0x42e580 <_mi_page_free+0x230>
               	addq	$-1, 3016(%r14)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, (%r9)
               	andb	$-2, 6(%rdi)
               	addq	$32, %r8
               	movq	$0, 40(%rdi)
               	movzbl	%dl, %esi
               	movq	%r8, %rdx
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f1b0 <_mi_segment_page_free>
               	nopw	%cs:(%rax,%rax)

<_mi_arena_free>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x42e686 <_mi_arena_free+0xb6>
               	movq	%rsi, %r14
               	testq	%rsi, %rsi
               	je	0x42e686 <_mi_arena_free+0xb6>
               	movq	%rdx, %rbx
               	movq	%rdi, %r15
               	testq	%rdx, %rdx
               	je	0x42e694 <_mi_arena_free+0xc4>
               	movzbl	%bl, %eax
               	leaq	223925(%rip), %rcx      # 0x4650c0 <mi_arenas>
               	movq	-8(%rcx,%rax,8), %r12
               	testq	%r12, %r12
               	je	0x42e6af <_mi_arena_free+0xdf>
               	movq	%rbx, %rax
               	shrq	$14, %rax
               	cmpq	%rax, 16(%r12)
               	jbe	0x42e6b8 <_mi_arena_free+0xe8>
               	shrq	$8, %rbx
               	leaq	16777215(%r14), %rsi
               	movq	%rsi, %r13
               	shrq	$24, %r13
               	cmpb	$0, 29(%r12)
               	jne	0x42e670 <_mi_arena_free+0xa0>
               	andq	$-16777216, %rsi        # imm = 0xFF000000
               	leaq	15(%rsp), %r8
               	movq	%r15, %rdi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42ea80 <mi_os_commitx>
               	movq	48(%r12), %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42e710 <_mi_bitmap_unclaim_across>
               	addq	$56, %r12
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	movq	%rbx, %rdx
               	callq	0x42e710 <_mi_bitmap_unclaim_across>
               	testb	%al, %al
               	je	0x42e6e1 <_mi_arena_free+0x111>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movzbl	%cl, %edx
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42ca70 <_mi_os_free_ex>
               	leaq	94034(%rip), %rsi       # 0x445608 <typeinfo name for kotlin::gc::GCSchedulerData+0x14cf>
               	jmp	0x42e6bf <_mi_arena_free+0xef>
               	leaq	94093(%rip), %rsi       # 0x44564c <typeinfo name for kotlin::gc::GCSchedulerData+0x1513>
               	movl	$22, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	movq	%rbx, %r8
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42d090 <_mi_error_message>
               	leaq	94126(%rip), %rsi       # 0x445696 <typeinfo name for kotlin::gc::GCSchedulerData+0x155d>
               	movl	$11, %edi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	xorl	%eax, %eax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x42d090 <_mi_error_message>
               	nopw	(%rax,%rax)

<_mi_bitmap_unclaim_across>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x42ea13 <_mi_bitmap_unclaim_across+0x303>
               	cmpq	$63, %rsi
               	jbe	0x42e73b <_mi_bitmap_unclaim_across+0x2b>
               	movq	$-1, %rbp
               	jmp	0x42e758 <_mi_bitmap_unclaim_across+0x48>
               	testq	%rsi, %rsi
               	je	0x42ea09 <_mi_bitmap_unclaim_across+0x2f9>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r9d, %r9d
               	xorl	%r8d, %r8d
               	xorl	%ebx, %ebx
               	leaq	(%rdi,%rax,8), %r11
               	movq	%rbp, %rcx
               	notq	%rcx
               	movq	(%rdi,%rax,8), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42e770 <_mi_bitmap_unclaim_across+0x60>
               	andq	%rbp, %rax
               	cmpq	%rbp, %rax
               	sete	%r10b
               	addq	$8, %r11
               	testq	%rbx, %rbx
               	je	0x42e9cf <_mi_bitmap_unclaim_across+0x2bf>
               	movq	%r9, %rcx
               	notq	%rcx
               	leaq	-1(%rbx), %rdx
               	movq	%rbx, %rsi
               	andq	$3, %rsi
               	je	0x42e7e9 <_mi_bitmap_unclaim_across+0xd9>
               	xorl	%edi, %edi
               	nopl	(%rax)
               	movq	(%r11), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rbp
               	andq	%rcx, %rbp
               	lock
               	cmpxchgq	%rbp, (%r11)
               	jne	0x42e7c0 <_mi_bitmap_unclaim_across+0xb0>
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edi, %r10d
               	addq	$8, %r11
               	addq	$-1, %rsi
               	jne	0x42e7b0 <_mi_bitmap_unclaim_across+0xa0>
               	andq	$-4, %rbx
               	cmpq	$3, %rdx
               	jb	0x42e9cf <_mi_bitmap_unclaim_across+0x2bf>
               	leaq	-4(%rbx), %rdi
               	testb	$4, %dil
               	jne	0x42e898 <_mi_bitmap_unclaim_across+0x188>
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42e810 <_mi_bitmap_unclaim_across+0x100>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rbx
               	andq	%rcx, %rbx
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rbx, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42e830 <_mi_bitmap_unclaim_across+0x120>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rbx
               	andq	%rcx, %rbx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rbx, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42e850 <_mi_bitmap_unclaim_across+0x140>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rax
               	nop
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 24(%r11)
               	jne	0x42e870 <_mi_bitmap_unclaim_across+0x160>
               	andq	%rsi, %rax
               	andq	%r9, %rax
               	xorl	%edx, %edx
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%edx, %r10d
               	addq	$32, %r11
               	movq	%rdi, %rbx
               	cmpq	$4, %rdi
               	jb	0x42e9cf <_mi_bitmap_unclaim_across+0x2bf>
               	xorl	%r14d, %r14d
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%r11), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	andq	%rcx, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%r11)
               	movq	%rax, %rsi
               	jne	0x42e8c0 <_mi_bitmap_unclaim_across+0x1b0>
               	movq	8(%r11), %rdx
               	nopl	(%rax,%rax)
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 8(%r11)
               	movq	%rax, %rdx
               	jne	0x42e8e0 <_mi_bitmap_unclaim_across+0x1d0>
               	andq	%rsi, %rdx
               	movq	16(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 16(%r11)
               	movq	%rax, %rsi
               	jne	0x42e900 <_mi_bitmap_unclaim_across+0x1f0>
               	andq	%rdx, %rsi
               	movq	24(%r11), %rdx
               	nop
               	movq	%rdx, %rdi
               	andq	%rcx, %rdi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rdi, 24(%r11)
               	movq	%rax, %rdx
               	jne	0x42e920 <_mi_bitmap_unclaim_across+0x210>
               	andq	%rsi, %rdx
               	movq	32(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 32(%r11)
               	movq	%rax, %rsi
               	jne	0x42e940 <_mi_bitmap_unclaim_across+0x230>
               	movq	40(%r11), %rbp
               	nopl	(%rax)
               	movq	%rbp, %rdi
               	andq	%rcx, %rdi
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdi, 40(%r11)
               	movq	%rax, %rbp
               	jne	0x42e960 <_mi_bitmap_unclaim_across+0x250>
               	andq	%rsi, %rbp
               	movq	48(%r11), %rsi
               	nop
               	movq	%rsi, %rdi
               	andq	%rcx, %rdi
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdi, 48(%r11)
               	movq	%rax, %rsi
               	jne	0x42e980 <_mi_bitmap_unclaim_across+0x270>
               	andq	%rbp, %rsi
               	addq	$-8, %rbx
               	movq	56(%r11), %rax
               	nop
               	movq	%rax, %rdi
               	andq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 56(%r11)
               	jne	0x42e9a0 <_mi_bitmap_unclaim_across+0x290>
               	andq	%rsi, %rax
               	andq	%rdx, %rax
               	andq	%r9, %rax
               	cmpq	%r9, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%r14d, %r10d
               	addq	$64, %r11
               	testq	%rbx, %rbx
               	jne	0x42e8b0 <_mi_bitmap_unclaim_across+0x1a0>
               	testq	%r8, %r8
               	je	0x42e9fd <_mi_bitmap_unclaim_across+0x2ed>
               	movq	%r8, %rcx
               	notq	%rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	movq	%rax, %rdx
               	andq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, (%r11)
               	jne	0x42e9e0 <_mi_bitmap_unclaim_across+0x2d0>
               	andq	%r8, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	movzbl	%r10b, %r10d
               	cmovnel	%ecx, %r10d
               	andb	$1, %r10b
               	movl	%r10d, %eax
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	xorl	%r9d, %r9d
               	xorl	%ebp, %ebp
               	jmp	0x42e75b <_mi_bitmap_unclaim_across+0x4b>
               	movl	$64, %r10d
               	subq	%rdx, %r10
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r9
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r8d, %r8d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r10, %rsi
               	movq	%rsi, %rbx
               	shrq	$6, %rbx
               	andq	$63, %rsi
               	je	0x42e760 <_mi_bitmap_unclaim_across+0x50>
               	movq	$-1, %r9
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x42e760 <_mi_bitmap_unclaim_across+0x50>
               	nopl	(%rax)

<mi_os_commitx>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movl	%edx, %r14d
               	testq	%r8, %r8
               	je	0x42ea94 <mi_os_commitx+0x14>
               	movb	$0, (%r8)
               	movb	$1, %r15b
               	testq	%rdi, %rdi
               	je	0x42ed64 <mi_os_commitx+0x2e4>
               	testq	%rsi, %rsi
               	je	0x42ed64 <mi_os_commitx+0x2e4>
               	movq	216448(%rip), %rbp      # 0x463830 <os_page_size>
               	movq	%rbp, %rax
               	shrq	%rax
               	movabsq	$6148914691236517205, %rdx # imm = 0x5555555555555555
               	andq	%rax, %rdx
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	movabsq	$3689348814741910323, %rdx # imm = 0x3333333333333333
               	movq	%rax, %rbx
               	andq	%rdx, %rbx
               	shrq	$2, %rax
               	andq	%rdx, %rax
               	addq	%rbx, %rax
               	movq	%rax, %rdx
               	shrq	$4, %rdx
               	addq	%rax, %rdx
               	movabsq	$1085102592571150095, %rbx # imm = 0xF0F0F0F0F0F0F0F
               	andq	%rdx, %rbx
               	movabsq	$72340172838076673, %rax # imm = 0x101010101010101
               	imulq	%rbx, %rax
               	shrq	$56, %rax
               	testb	%cl, %cl
               	je	0x42eb3d <mi_os_commitx+0xbd>
               	leaq	(%rdi,%rbp), %r12
               	addq	$-1, %r12
               	cmpl	$2, %eax
               	jae	0x42eb6d <mi_os_commitx+0xed>
               	negq	%rbp
               	andq	%rbp, %r12
               	addq	%rsi, %rdi
               	andq	%rbp, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42ec1d <mi_os_commitx+0x19d>
               	jmp	0x42ed64 <mi_os_commitx+0x2e4>
               	cmpl	$2, %eax
               	jae	0x42eb83 <mi_os_commitx+0x103>
               	movq	%rbp, %rax
               	negq	%rax
               	movq	%rax, %r12
               	andq	%rdi, %r12
               	addq	%rsi, %rdi
               	leaq	(%rdi,%rbp), %rbx
               	addq	$-1, %rbx
               	andq	%rax, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42ec1d <mi_os_commitx+0x19d>
               	jmp	0x42ed64 <mi_os_commitx+0x2e4>
               	movq	%r12, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42eb9c <mi_os_commitx+0x11c>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42eba3 <mi_os_commitx+0x123>
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42ebbf <mi_os_commitx+0x13f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	movq	%rdx, %rcx
               	jmp	0x42ebc7 <mi_os_commitx+0x147>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %r12
               	addq	%rsi, %rdi
               	movq	%rdi, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42ebe9 <mi_os_commitx+0x169>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42ebef <mi_os_commitx+0x16f>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movl	%edx, %ecx
               	leaq	(%rdi,%rsi), %rax
               	leaq	(%rax,%rbp), %rbx
               	addq	$-1, %rbx
               	movq	%rbx, %rax
               	orq	%rbp, %rax
               	shrq	$32, %rax
               	je	0x42ec02 <mi_os_commitx+0x182>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x42ec08 <mi_os_commitx+0x188>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rdx, %rdi
               	movq	%rdi, %rbx
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jg	0x42ec1d <mi_os_commitx+0x19d>
               	jmp	0x42ed64 <mi_os_commitx+0x2e4>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	subq	%rcx, %rdi
               	subq	%rdx, %rbx
               	movq	%rdi, %r12
               	subq	%r12, %rbx
               	testq	%rbx, %rbx
               	jle	0x42ed64 <mi_os_commitx+0x2e4>
               	movq	%rsi, %rcx
               	testb	%r14b, %r14b
               	je	0x42ec84 <mi_os_commitx+0x204>
               	lock
               	xaddq	%rcx, 221766(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	addq	%rsi, %rcx
               	movq	221748(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42ec50 <mi_os_commitx+0x1d0>
               	lock
               	cmpxchgq	%rcx, 221730(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42ec40 <mi_os_commitx+0x1c0>
               	testq	%rsi, %rsi
               	jle	0x42ecbf <mi_os_commitx+0x23f>
               	lock
               	addq	%rsi, 221699(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	leaq	221596(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	leaq	222069(%rip), %rcx      # 0x464fe0 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jb	0x42ecdd <mi_os_commitx+0x25d>
               	lock
               	addq	$1, 222063(%rip)        # 0x464fe8 <_mi_stats_main+0x1e8>
               	lock
               	addq	$1, 222046(%rip)        # 0x464fe0 <_mi_stats_main+0x1e0>
               	jmp	0x42eced <mi_os_commitx+0x26d>
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 221669(%rip)      # 0x464e78 <_mi_stats_main+0x78>
               	subq	%rsi, %rdx
               	movq	221651(%rip), %rax      # 0x464e70 <_mi_stats_main+0x70>
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42ecb0 <mi_os_commitx+0x230>
               	lock
               	cmpxchgq	%rdx, 221634(%rip)      # 0x464e70 <_mi_stats_main+0x70>
               	jne	0x42eca0 <mi_os_commitx+0x220>
               	testq	%rsi, %rsi
               	js	0x42ed03 <mi_os_commitx+0x283>
               	lock
               	addq	%rsi, 221611(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	jmp	0x42ed0b <mi_os_commitx+0x28b>
               	negq	%rsi
               	lock
               	addq	%rsi, 221598(%rip)      # 0x464e68 <_mi_stats_main+0x68>
               	leaq	221487(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	leaq	221960(%rip), %rcx      # 0x464fe0 <_mi_stats_main+0x1e0>
               	cmpq	%rax, %rcx
               	jae	0x42ec70 <mi_os_commitx+0x1f0>
               	addq	$1, 221955(%rip)        # 0x464fe8 <_mi_stats_main+0x1e8>
               	addq	$1, 221939(%rip)        # 0x464fe0 <_mi_stats_main+0x1e0>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	movl	$3, %edx
               	callq	0x413930 <mprotect@plt>
               	testl	%eax, %eax
               	jne	0x42ed2b <mi_os_commitx+0x2ab>
               	jmp	0x42ed64 <mi_os_commitx+0x2e4>
               	lock
               	addq	%rcx, 221525(%rip)      # 0x464e60 <_mi_stats_main+0x60>
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	movl	$16434, %ecx            # imm = 0x4032
               	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	cmpq	%r12, %rax
               	je	0x42ed64 <mi_os_commitx+0x2e4>
               	callq	0x413880 <__errno_location@plt>
               	movl	(%rax), %r8d
               	testl	%r8d, %r8d
               	je	0x42ed64 <mi_os_commitx+0x2e4>
               	leaq	92556(%rip), %rax       # 0x4456cb <typeinfo name for kotlin::gc::GCSchedulerData+0x1592>
               	leaq	92556(%rip), %rsi       # 0x4456d2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1599>
               	testb	%r14b, %r14b
               	cmovneq	%rax, %rsi
               	leaq	92551(%rip), %rdi       # 0x4456db <typeinfo name for kotlin::gc::GCSchedulerData+0x15a2>
               	xorl	%r15d, %r15d
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movl	%r15d, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq

<_mi_mem_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x42eee7 <_mi_mem_free+0x177>
               	testq	%rsi, %rsi
               	je	0x42eee7 <_mi_mem_free+0x177>
               	movq	%rdx, %rbx
               	movq	%rdi, %r14
               	movq	215702(%rip), %rdi      # 0x463830 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%rsi,%rdi), %r15
               	addq	$-1, %r15
               	testq	%rax, %rdi
               	jne	0x42eddb <_mi_mem_free+0x6b>
               	negq	%rdi
               	andq	%rdi, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	je	0x42ee06 <_mi_mem_free+0x96>
               	movzbl	%cl, %ecx
               	movq	%r14, %rdi
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42e5d0 <_mi_arena_free>
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x42edf1 <_mi_mem_free+0x81>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x42edf8 <_mi_mem_free+0x88>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rdx, %r15
               	movq	%rbx, %r12
               	shrq	%r12
               	testb	$1, %bl
               	jne	0x42edbc <_mi_mem_free+0x4c>
               	cmpq	$67108864, %r15         # imm = 0x4000000
               	ja	0x42eee7 <_mi_mem_free+0x177>
               	shrq	$7, %rbx
               	andl	$63, %r12d
               	leaq	4194303(%r15), %rbp
               	movq	%rbp, %r13
               	shrq	$22, %r13
               	shlq	$6, %rbx
               	leaq	255308(%rip), %rdi      # 0x46d380 <regions>
               	movq	(%rbx,%rdi), %rax
               	movq	8(%rbx,%rdi), %rdx
               	leaq	(%r12,%r13), %rsi
               	cmpq	$64, %rsi
               	ja	0x42eee7 <_mi_mem_free+0x177>
               	movq	%r12, %rsi
               	shlq	$22, %rsi
               	addq	%rsi, %rdx
               	cmpq	%r14, %rdx
               	jne	0x42eee7 <_mi_mem_free+0x177>
               	testl	$4194303, %r15d         # imm = 0x3FFFFF
               	jne	0x42ee8e <_mi_mem_free+0x11e>
               	testb	%cl, %cl
               	je	0x42ee8e <_mi_mem_free+0x11e>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 32(%rbx,%rdi)
               	testb	%r8b, %r8b
               	je	0x42eeb6 <_mi_mem_free+0x146>
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	lock
               	orq	%rdx, 40(%rbx,%rdi)
               	testl	$768, %eax              # imm = 0x300
               	je	0x42eef6 <_mi_mem_free+0x186>
               	leaq	(%rbx,%rdi), %rax
               	addq	$16, %rax
               	movq	$-1, %rdx
               	testq	%r13, %r13
               	je	0x42eee3 <_mi_mem_free+0x173>
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	lock
               	andq	%rdx, (%rax)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$12, %edi
               	callq	0x42bc30 <mi_option_get>
               	leaq	255097(%rip), %rdi      # 0x46d380 <regions>
               	testq	%rax, %rax
               	je	0x42eebd <_mi_mem_free+0x14d>
               	movl	$3, %edi
               	callq	0x42bc30 <mi_option_get>
               	leaq	255075(%rip), %rdi      # 0x46d380 <regions>
               	testq	%rax, %rax
               	jne	0x42ef38 <_mi_mem_free+0x1c8>
               	movl	$5, %edi
               	callq	0x42bc30 <mi_option_get>
               	leaq	255053(%rip), %rdi      # 0x46d380 <regions>
               	testq	%rax, %rax
               	je	0x42eebd <_mi_mem_free+0x14d>
               	leaq	(%rbx,%rdi), %rsi
               	addq	$40, %rsi
               	movq	$-1, %rdx
               	movl	%r13d, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r12d, %ecx
               	shlq	%cl, %rdx
               	testq	%r13, %r13
               	cmoveq	%r13, %rdx
               	movq	40(%rbx,%rdi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdx, %rcx
               	lock
               	cmpxchgq	%rcx, (%rsi)
               	jne	0x42ef70 <_mi_mem_free+0x200>
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	je	0x42eebd <_mi_mem_free+0x14d>
               	movq	320496(%rip), %rax      # 0x47d380 <abandoned_readers>
               	testq	%rax, %rax
               	je	0x42efa3 <_mi_mem_free+0x233>
               	pause
               	movq	320482(%rip), %rax      # 0x47d380 <abandoned_readers>
               	testq	%rax, %rax
               	jne	0x42ef95 <_mi_mem_free+0x225>
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%r14, %rdi
               	movq	%rbp, %rsi
               	callq	0x42efe0 <_mi_os_reset>
               	leaq	254916(%rip), %rax      # 0x46d380 <regions>
               	addq	%rbx, %rax
               	addq	$16, %rax
               	cmpq	$264241152, %r15        # imm = 0xFC00000
               	jbe	0x42eec5 <_mi_mem_free+0x155>
               	xorl	%edx, %edx
               	jmp	0x42eee3 <_mi_mem_free+0x173>
               	nopw	(%rax,%rax)

<_mi_os_reset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %r12
               	movl	$5, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f020 <_mi_os_reset+0x40>
               	leaq	7(%rsp), %r8
               	movq	%r12, %rdi
               	movq	%r15, %rsi
               	xorl	%edx, %edx
               	movl	$1, %ecx
               	callq	0x42ea80 <mi_os_commitx>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	testq	%r12, %r12
               	je	0x42f014 <_mi_os_reset+0x34>
               	testq	%r15, %r15
               	je	0x42f014 <_mi_os_reset+0x34>
               	movq	215039(%rip), %rsi      # 0x463830 <os_page_size>
               	leaq	-1(%rsi), %rax
               	leaq	(%r12,%rsi), %r14
               	addq	$-1, %r14
               	testq	%rax, %rsi
               	jne	0x42f058 <_mi_os_reset+0x78>
               	negq	%rsi
               	andq	%rsi, %r14
               	addq	%r15, %r12
               	andq	%rsi, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jg	0x42f0ac <_mi_os_reset+0xcc>
               	jmp	0x42f014 <_mi_os_reset+0x34>
               	movq	%r14, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42f071 <_mi_os_reset+0x91>
               	movq	%r14, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rcx
               	jmp	0x42f07a <_mi_os_reset+0x9a>
               	movl	%r14d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ecx
               	addq	%r15, %r12
               	movq	%r12, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x42f093 <_mi_os_reset+0xb3>
               	movq	%r12, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42f09a <_mi_os_reset+0xba>
               	movl	%r12d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	subq	%rcx, %r14
               	subq	%rdx, %r12
               	subq	%r14, %r12
               	testq	%r12, %r12
               	jle	0x42f014 <_mi_os_reset+0x34>
               	movq	%r12, %rcx
               	lock
               	xaddq	%rcx, 220640(%rip)      # 0x464e98 <_mi_stats_main+0x98>
               	addq	%r12, %rcx
               	movq	220622(%rip), %rax      # 0x464e90 <_mi_stats_main+0x90>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	cmpq	%rcx, %rax
               	jge	0x42f0e0 <_mi_os_reset+0x100>
               	lock
               	cmpxchgq	%rcx, 220594(%rip)      # 0x464e90 <_mi_stats_main+0x90>
               	jne	0x42f0d0 <_mi_os_reset+0xf0>
               	testq	%r12, %r12
               	jle	0x42f0ef <_mi_os_reset+0x10f>
               	lock
               	addq	%r12, 220563(%rip)      # 0x464e80 <_mi_stats_main+0x80>
               	jmp	0x42f0fd <_mi_os_reset+0x11d>
               	movq	%r12, %rax
               	negq	%rax
               	lock
               	addq	%rax, 220555(%rip)      # 0x464e88 <_mi_stats_main+0x88>
               	movq	215332(%rip), %r15      # 0x463a28 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x413910 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42f014 <_mi_os_reset+0x34>
               	callq	0x413880 <__errno_location@plt>
               	movq	%rax, %rbx
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movl	(%rbx), %ecx
               	cmpl	$11, %ecx
               	jne	0x42f154 <_mi_os_reset+0x174>
               	movl	$0, (%rbx)
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	%r15d, %edx
               	callq	0x413910 <madvise@plt>
               	testl	%eax, %eax
               	jne	0x42f130 <_mi_os_reset+0x150>
               	jmp	0x42f014 <_mi_os_reset+0x34>
               	cmpl	$8, %r15d
               	jne	0x42f184 <_mi_os_reset+0x1a4>
               	cmpl	$22, %ecx
               	jne	0x42f184 <_mi_os_reset+0x1a4>
               	movq	$4, 215230(%rip)        # 0x463a28 <mi_os_resetx.advice>
               	movq	%r14, %rdi
               	movq	%r12, %rsi
               	movl	$4, %edx
               	callq	0x413910 <madvise@plt>
               	testl	%eax, %eax
               	je	0x42f014 <_mi_os_reset+0x34>
               	movl	(%rbx), %ecx
               	leaq	91515(%rip), %rdi       # 0x445706 <typeinfo name for kotlin::gc::GCSchedulerData+0x15cd>
               	movq	%r14, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x42cc90 <_mi_warning_message>
               	nopw	%cs:(%rax,%rax)

<_mi_segment_page_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rdx, %r14
               	movl	%esi, %ebx
               	movq	%rdi, %r12
               	movq	%rdi, %r13
               	andq	$-4194304, %r13         # imm = 0xFFC00000
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f2ec <_mi_segment_page_free+0x13c>
               	movl	%ebx, 4(%rsp)
               	leaq	8(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	movq	40(%r14), %r15
               	testq	%r15, %r15
               	je	0x42f2d2 <_mi_segment_page_free+0x122>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x42f247 <_mi_segment_page_free+0x97>
               	nop
               	movl	$0, 16(%rbp)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbp)
               	testq	%r15, %r15
               	je	0x42f2d2 <_mi_segment_page_free+0x122>
               	movq	%r15, %rbp
               	cmpl	%ebx, 16(%r15)
               	jg	0x42f2dc <_mi_segment_page_free+0x12c>
               	movq	56(%rbp), %r15
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f230 <_mi_segment_page_free+0x80>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x42f230 <_mi_segment_page_free+0x80>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f230 <_mi_segment_page_free+0x80>
               	cmpl	$3, 112(%rdx)
               	jne	0x42f291 <_mi_segment_page_free+0xe1>
               	movq	72(%rdx), %rsi
               	jmp	0x42f29d <_mi_segment_page_free+0xed>
               	movzbl	96(%rdx), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%rdx, %rdi
               	testq	%rcx, %rcx
               	jne	0x42f2ba <_mi_segment_page_free+0x10a>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x42f230 <_mi_segment_page_free+0x80>
               	callq	0x42efe0 <_mi_os_reset>
               	jmp	0x42f230 <_mi_segment_page_free+0x80>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	jmp	0x42f2e8 <_mi_segment_page_free+0x138>
               	movq	%rbp, 40(%r14)
               	movq	$0, 48(%rbp)
               	movl	4(%rsp), %ebx
               	movq	%r13, %rdi
               	movq	%r12, %rsi
               	movq	%r14, %rdx
               	callq	0x42f390 <mi_segment_page_clear>
               	movq	56(%r13), %rax
               	testq	%rax, %rax
               	je	0x42f322 <_mi_segment_page_free+0x172>
               	cmpq	40(%r13), %rax
               	jne	0x42f33e <_mi_segment_page_free+0x18e>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ffa0 <mi_segment_abandon>
               	movzbl	%bl, %esi
               	movq	%r13, %rdi
               	movq	%r14, %rdx
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42f5e0 <mi_segment_free>
               	addq	$1, %rax
               	cmpq	64(%r13), %rax
               	jne	0x42f380 <_mi_segment_page_free+0x1d0>
               	movl	112(%r13), %eax
               	cmpl	$1, %eax
               	je	0x42f35a <_mi_segment_page_free+0x1aa>
               	testl	%eax, %eax
               	je	0x42f35e <_mi_segment_page_free+0x1ae>
               	xorl	%r14d, %r14d
               	jmp	0x42f35e <_mi_segment_page_free+0x1ae>
               	addq	$16, %r14
               	movq	$0, 24(%r13)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r13)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r13, (%rcx)
               	movq	%r13, 8(%r14)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nop

<mi_segment_page_clear>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdx, %r15
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movzwl	2(%rsi), %edi
               	movl	20(%rsi), %esi
               	cmpq	$67108864, %rsi         # imm = 0x4000000
               	jae	0x42f56c <mi_segment_page_clear+0x1dc>
               	imulq	%rdi, %rsi
               	movl	$160, %edi
               	addq	112(%r15), %rdi
               	callq	0x42cc10 <_mi_stat_decrease>
               	movq	112(%r15), %rcx
               	leaq	32(%rcx), %rax
               	leaq	219689(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x42f415 <mi_segment_page_clear+0x85>
               	leaq	220253(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42f415 <mi_segment_page_clear+0x85>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 56(%rcx)
               	addq	$-1, %rdx
               	movq	48(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42f40d <mi_segment_page_clear+0x7d>
               	lock
               	cmpxchgq	%rdx, 48(%rcx)
               	jne	0x42f400 <mi_segment_page_clear+0x70>
               	lock
               	addq	$1, 40(%rcx)
               	jmp	0x42f430 <mi_segment_page_clear+0xa0>
               	movq	56(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 56(%rcx)
               	cmpq	48(%rcx), %rax
               	jle	0x42f42b <mi_segment_page_clear+0x9b>
               	movq	%rax, 48(%rcx)
               	addq	$1, 40(%rcx)
               	andb	$-10, 1(%rbx)
               	movl	20(%rbx), %eax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 6(%rbx)
               	movups	%xmm0, 22(%rbx)
               	movups	%xmm0, 38(%rbx)
               	movups	%xmm0, 48(%rbx)
               	movl	%eax, 20(%rbx)
               	addq	$-1, 56(%r14)
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f4f2 <mi_segment_page_clear+0x162>
               	cmpb	$0, 8(%r14)
               	jne	0x42f4f2 <mi_segment_page_clear+0x162>
               	movb	1(%rbx), %al
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42f4f2 <mi_segment_page_clear+0x162>
               	movl	$14, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f503 <mi_segment_page_clear+0x173>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	imull	$1000, (%rsp), %ecx     # imm = 0x3E8
               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
               	imulq	8(%rsp)
               	movq	%rdx, %r14
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %r14
               	addl	%eax, %r14d
               	addl	%ecx, %r14d
               	movl	$14, %edi
               	callq	0x42bc30 <mi_option_get>
               	addl	%r14d, %eax
               	movl	%eax, 16(%rbx)
               	movq	32(%r15), %rax
               	movq	%rax, 48(%rbx)
               	movq	$0, 56(%rbx)
               	leaq	56(%rax), %rcx
               	leaq	40(%r15), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%rbx, (%rcx)
               	movq	%rbx, 32(%r15)
               	movl	$0, 2(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f4f2 <mi_segment_page_clear+0x162>
               	cmpb	$0, 8(%r14)
               	jne	0x42f4f2 <mi_segment_page_clear+0x162>
               	movb	1(%rbx), %al
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f4f2 <mi_segment_page_clear+0x162>
               	cmpl	$3, 112(%r14)
               	jne	0x42f533 <mi_segment_page_clear+0x1a3>
               	movq	72(%r14), %rsi
               	jmp	0x42f53f <mi_segment_page_clear+0x1af>
               	movb	96(%r14), %cl
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%r14, %rdi
               	testq	%rcx, %rcx
               	jne	0x42f55b <mi_segment_page_clear+0x1cb>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f4f2 <mi_segment_page_clear+0x162>
               	callq	0x42efe0 <_mi_os_reset>
               	jmp	0x42f4f2 <mi_segment_page_clear+0x162>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x42f583 <mi_segment_page_clear+0x1f3>
               	movq	72(%rax), %r8
               	jmp	0x42f58f <mi_segment_page_clear+0x1ff>
               	movb	96(%rax), %cl
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	cmpb	$0, (%rbx)
               	jne	0x42f5c9 <mi_segment_page_clear+0x239>
               	movq	80(%rax), %rcx
               	subq	%rcx, %r8
               	cmpl	$1, %edx
               	ja	0x42f5c9 <mi_segment_page_clear+0x239>
               	addq	%rcx, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x42f5b3 <mi_segment_page_clear+0x223>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x42f5b7 <mi_segment_page_clear+0x227>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rsi
               	jmp	0x42f3b6 <mi_segment_page_clear+0x26>
               	nopw	%cs:(%rax,%rax)

<mi_segment_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%sil, %sil
               	movq	%rdi, (%rsp)
               	je	0x42f62a <mi_segment_free+0x4a>
               	movl	$11, %edi
               	callq	0x42bc30 <mi_option_get>
               	cmpb	$0, 8(%r14)
               	je	0x42f654 <mi_segment_free+0x74>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42f808 <mi_segment_free+0x228>
               	cmpl	$1, %eax
               	jne	0x42f87e <mi_segment_free+0x29e>
               	leaq	16(%r12), %rax
               	jmp	0x42f810 <mi_segment_free+0x230>
               	cmpb	$0, 8(%r14)
               	je	0x42f76e <mi_segment_free+0x18e>
               	movl	112(%r14), %eax
               	testl	%eax, %eax
               	je	0x42f828 <mi_segment_free+0x248>
               	cmpl	$1, %eax
               	jne	0x42f8c8 <mi_segment_free+0x2e8>
               	leaq	16(%r12), %rax
               	jmp	0x42f834 <mi_segment_free+0x254>
               	movq	64(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x42f60b <mi_segment_free+0x2b>
               	testq	%rax, %rax
               	je	0x42feba <mi_segment_free+0x8da>
               	leaq	120(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x42f681 <mi_segment_free+0xa1>
               	nop
               	movq	64(%r14), %rcx
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	%rcx, %rbp
               	jae	0x42f60b <mi_segment_free+0x2b>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x42f674 <mi_segment_free+0x94>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x42f69f <mi_segment_free+0xbf>
               	testq	%rcx, %rcx
               	jne	0x42f6a4 <mi_segment_free+0xc4>
               	jmp	0x42f6b1 <mi_segment_free+0xd1>
               	testq	%rcx, %rcx
               	je	0x42f71d <mi_segment_free+0x13d>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x42f6b5 <mi_segment_free+0xd5>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r12), %rbx
               	je	0x42f706 <mi_segment_free+0x126>
               	cmpq	32(%r12), %rbx
               	je	0x42f716 <mi_segment_free+0x136>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x42f670 <mi_segment_free+0x90>
               	cmpb	$0, 8(%r14)
               	jne	0x42f670 <mi_segment_free+0x90>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x42f670 <mi_segment_free+0x90>
               	cmpl	$3, 112(%r14)
               	jne	0x42f72d <mi_segment_free+0x14d>
               	movq	72(%r14), %rsi
               	jmp	0x42f73a <mi_segment_free+0x15a>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r12)
               	cmpq	32(%r12), %rbx
               	jne	0x42f6c3 <mi_segment_free+0xe3>
               	movq	%rax, 32(%r12)
               	jmp	0x42f6c3 <mi_segment_free+0xe3>
               	cmpq	32(%r12), %rbx
               	je	0x42f6b5 <mi_segment_free+0xd5>
               	cmpq	40(%r12), %rbx
               	jne	0x42f6d1 <mi_segment_free+0xf1>
               	jmp	0x42f6b5 <mi_segment_free+0xd5>
               	movzbl	96(%r14), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%r14, %rdi
               	testq	%rcx, %rcx
               	jne	0x42f756 <mi_segment_free+0x176>
               	movq	80(%r14), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x42f670 <mi_segment_free+0x90>
               	callq	0x42efe0 <_mi_os_reset>
               	jmp	0x42f670 <mi_segment_free+0x90>
               	movq	64(%r14), %rax
               	testq	%rax, %rax
               	je	0x42f635 <mi_segment_free+0x55>
               	leaq	120(%r14), %rcx
               	xorps	%xmm0, %xmm0
               	jmp	0x42f7ad <mi_segment_free+0x1cd>
               	movq	56(%rcx), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rcx
               	je	0x42f7f1 <mi_segment_free+0x211>
               	movl	$0, 16(%rcx)
               	movups	%xmm0, 48(%rcx)
               	addq	$64, %rcx
               	addq	$-1, %rax
               	je	0x42f635 <mi_segment_free+0x55>
               	movzbl	1(%rcx), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42f79f <mi_segment_free+0x1bf>
               	movq	48(%rcx), %rdx
               	movq	56(%rcx), %rsi
               	testq	%rdx, %rdx
               	je	0x42f7cd <mi_segment_free+0x1ed>
               	testq	%rsi, %rsi
               	jne	0x42f7d2 <mi_segment_free+0x1f2>
               	jmp	0x42f7df <mi_segment_free+0x1ff>
               	testq	%rsi, %rsi
               	je	0x42f7f8 <mi_segment_free+0x218>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42f7e3 <mi_segment_free+0x203>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rcx
               	je	0x42f784 <mi_segment_free+0x1a4>
               	cmpq	32(%r12), %rcx
               	jne	0x42f794 <mi_segment_free+0x1b4>
               	movq	%rdx, 32(%r12)
               	jmp	0x42f794 <mi_segment_free+0x1b4>
               	cmpq	32(%r12), %rcx
               	je	0x42f7e3 <mi_segment_free+0x203>
               	cmpq	40(%r12), %rcx
               	jne	0x42f79f <mi_segment_free+0x1bf>
               	jmp	0x42f7e3 <mi_segment_free+0x203>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42f87e <mi_segment_free+0x29e>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42f84c <mi_segment_free+0x26c>
               	testq	%rsi, %rsi
               	jne	0x42f855 <mi_segment_free+0x275>
               	jmp	0x42f861 <mi_segment_free+0x281>
               	movq	%r12, %rax
               	testq	%r12, %r12
               	je	0x42f8c8 <mi_segment_free+0x2e8>
               	leaq	24(%r14), %rcx
               	movq	24(%r14), %rdx
               	movq	32(%r14), %rsi
               	testq	%rdx, %rdx
               	je	0x42f896 <mi_segment_free+0x2b6>
               	testq	%rsi, %rsi
               	jne	0x42f89f <mi_segment_free+0x2bf>
               	jmp	0x42f8ab <mi_segment_free+0x2cb>
               	testq	%rsi, %rsi
               	je	0x42ff47 <mi_segment_free+0x967>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42f865 <mi_segment_free+0x285>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42fe01 <mi_segment_free+0x821>
               	cmpq	%r14, 8(%rax)
               	je	0x42fe0e <mi_segment_free+0x82e>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movl	$160, %edi
               	addq	112(%r12), %rdi
               	movq	80(%r14), %rsi
               	callq	0x42cc10 <_mi_stat_decrease>
               	jmp	0x42fbf8 <mi_segment_free+0x618>
               	testq	%rsi, %rsi
               	je	0x42ff55 <mi_segment_free+0x975>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x42f8af <mi_segment_free+0x2cf>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r14, (%rax)
               	je	0x42fe1b <mi_segment_free+0x83b>
               	cmpq	%r14, 8(%rax)
               	je	0x42fe28 <mi_segment_free+0x848>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movl	$160, %edi
               	addq	112(%r12), %rdi
               	movq	80(%r14), %rsi
               	callq	0x42cc10 <_mi_stat_decrease>
               	cmpq	$4194304, 72(%r14)      # imm = 0x400000
               	jne	0x42fbf8 <mi_segment_free+0x618>
               	movl	$9, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	%rax, %rbx
               	movq	88(%r12), %rax
               	cmpq	%rbx, %rax
               	jae	0x42f912 <mi_segment_free+0x332>
               	movq	64(%r12), %rcx
               	shrq	$3, %rcx
               	cmpq	%rcx, %rax
               	jbe	0x42fe35 <mi_segment_free+0x855>
               	cmpq	%rbx, %rax
               	jbe	0x42fbf8 <mi_segment_free+0x618>
               	leaq	218334(%rip), %rdi      # 0x464e00 <_mi_stats_main>
               	movl	$1, %r14d
               	jmp	0x42f962 <mi_segment_free+0x382>
               	nopl	(%rax)
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	movq	(%r13), %rdx
               	andb	$1, %r15b
               	movzbl	%al, %r8d
               	movzbl	%r15b, %ecx
               	movq	%r13, %rdi
               	callq	0x42ed70 <_mi_mem_free>
               	movq	88(%r12), %rax
               	leaq	218279(%rip), %rdi      # 0x464e00 <_mi_stats_main>
               	cmpq	%rbx, %rax
               	jbe	0x42fbf8 <mi_segment_free+0x618>
               	movq	104(%r12), %r13
               	testq	%r13, %r13
               	je	0x42f959 <mi_segment_free+0x379>
               	addq	$-1, %rax
               	movq	%rax, 88(%r12)
               	movq	24(%r13), %rax
               	movq	%rax, 104(%r12)
               	movq	$0, 24(%r13)
               	movq	112(%r12), %rcx
               	leaq	416(%rcx), %rax
               	cmpq	%rdi, %rax
               	jb	0x42f9e0 <mi_segment_free+0x400>
               	leaq	218786(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x42f9e0 <mi_segment_free+0x400>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x42f9d0 <mi_segment_free+0x3f0>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x42f9c0 <mi_segment_free+0x3e0>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x42fa0a <mi_segment_free+0x42a>
               	nop
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x42fa02 <mi_segment_free+0x422>
               	movq	%rax, 432(%rcx)
               	addq	$1, 424(%rcx)
               	movq	72(%r13), %rsi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	cmpq	%rdi, %rcx
               	setae	%dl
               	leaq	218650(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rsi, %rsi
               	jle	0x42fa70 <mi_segment_free+0x490>
               	testb	%al, %al
               	je	0x42faa7 <mi_segment_free+0x4c7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jge	0x42fa5d <mi_segment_free+0x47d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42fa50 <mi_segment_free+0x470>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42fac2 <mi_segment_free+0x4e2>
               	nopl	(%rax,%rax)
               	testb	%al, %al
               	je	0x42fbbf <mi_segment_free+0x5df>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rdi
               	movq	16(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jg	0x42fa9d <mi_segment_free+0x4bd>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x42fa90 <mi_segment_free+0x4b0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42fbd9 <mi_segment_free+0x5f9>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42fabd <mi_segment_free+0x4dd>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42fadf <mi_segment_free+0x4ff>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%rsi, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42faf8 <mi_segment_free+0x518>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r10
               	testq	%r10, %r10
               	je	0x42f930 <mi_segment_free+0x350>
               	cmpq	$1, %r10
               	jne	0x42fb15 <mi_segment_free+0x535>
               	movb	$1, %r15b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42fb74 <mi_segment_free+0x594>
               	movq	%rbx, %r9
               	movq	%r10, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rbp
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r15b
               	xorl	%eax, %eax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movzbl	-64(%rbp), %ecx
               	movzbl	(%rbp), %edx
               	movl	%edx, %ebx
               	andb	%cl, %bl
               	shlb	$5, %bl
               	sarb	$7, %bl
               	andb	%bl, %r15b
               	orb	%cl, %dl
               	testb	$2, %dl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	subq	$-128, %rbp
               	addq	$2, %rdi
               	jne	0x42fb40 <mi_segment_free+0x560>
               	testb	$1, %r10b
               	movq	%r9, %rbx
               	je	0x42fb90 <mi_segment_free+0x5b0>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %eax
               	cmovnel	%r14d, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r15b
               	testb	$1, %al
               	je	0x42f933 <mi_segment_free+0x353>
               	movl	$5, %edi
               	movq	%rsi, %rbp
               	callq	0x42bc30 <mi_option_get>
               	movq	%rbp, %rsi
               	testq	%rax, %rax
               	movzbl	%r15b, %r15d
               	movl	$0, %eax
               	cmovnel	%eax, %r15d
               	movb	$1, %al
               	jmp	0x42f935 <mi_segment_free+0x355>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42fbd5 <mi_segment_free+0x5f5>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42fada <mi_segment_free+0x4fa>
               	jmp	0x42fadf <mi_segment_free+0x4ff>
               	movq	(%rsp), %r13
               	movq	72(%r13), %r15
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r13)
               	movq	112(%r12), %rcx
               	leaq	217582(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	218145(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%r15, %r15
               	jle	0x42fc65 <mi_segment_free+0x685>
               	testb	%al, %al
               	je	0x42fc97 <mi_segment_free+0x6b7>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x42fc5d <mi_segment_free+0x67d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x42fc50 <mi_segment_free+0x670>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x42fcb2 <mi_segment_free+0x6d2>
               	testb	%al, %al
               	je	0x42fdc8 <mi_segment_free+0x7e8>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rdx, %rax
               	jg	0x42fc8d <mi_segment_free+0x6ad>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x42fc80 <mi_segment_free+0x6a0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42fde2 <mi_segment_free+0x802>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x42fcad <mi_segment_free+0x6cd>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	jbe	0x42fccf <mi_segment_free+0x6ef>
               	movq	%rax, 64(%r12)
               	movq	72(%r12), %rax
               	subq	%r15, %rax
               	movq	%rax, 72(%r12)
               	cmpq	80(%r12), %rax
               	jbe	0x42fce8 <mi_segment_free+0x708>
               	movq	%rax, 80(%r12)
               	movq	64(%r13), %r9
               	testq	%r9, %r9
               	je	0x42fd01 <mi_segment_free+0x721>
               	cmpq	$1, %r9
               	jne	0x42fd0b <mi_segment_free+0x72b>
               	movb	$1, %r14b
               	xorl	%r8d, %r8d
               	xorl	%eax, %eax
               	jmp	0x42fd5f <mi_segment_free+0x77f>
               	movb	$1, %r14b
               	xorl	%ebp, %ebp
               	jmp	0x42fd9f <mi_segment_free+0x7bf>
               	movq	%r9, %r8
               	andq	$-2, %r8
               	leaq	185(%r13), %rsi
               	movq	%r8, %rdi
               	negq	%rdi
               	movb	$1, %r14b
               	xorl	%eax, %eax
               	movl	$1, %ebp
               	nopl	(%rax)
               	movzbl	-64(%rsi), %ecx
               	movzbl	(%rsi), %ebx
               	movl	%ebx, %edx
               	andb	%cl, %dl
               	shlb	$5, %dl
               	sarb	$7, %dl
               	andb	%dl, %r14b
               	orb	%cl, %bl
               	testb	$2, %bl
               	movzbl	%al, %eax
               	cmovnel	%ebp, %eax
               	subq	$-128, %rsi
               	addq	$2, %rdi
               	jne	0x42fd30 <mi_segment_free+0x750>
               	testb	$1, %r9b
               	je	0x42fd7f <mi_segment_free+0x79f>
               	shlq	$6, %r8
               	movb	121(%r13,%r8), %cl
               	testb	$2, %cl
               	movzbl	%al, %edx
               	movl	$1, %eax
               	cmovel	%edx, %eax
               	shlb	$5, %cl
               	sarb	$7, %cl
               	andb	%cl, %r14b
               	xorl	%ebp, %ebp
               	testb	$1, %al
               	je	0x42fd9f <mi_segment_free+0x7bf>
               	movl	$5, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	movzbl	%r14b, %eax
               	cmovel	%eax, %ebp
               	movl	%ebp, %r14d
               	movb	$1, %bpl
               	movq	(%r13), %rdx
               	andb	$1, %r14b
               	movzbl	%bpl, %r8d
               	movzbl	%r14b, %ecx
               	movq	%r13, %rdi
               	movq	%r15, %rsi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x42ed70 <_mi_mem_free>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x42fdde <mi_segment_free+0x7fe>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	56(%r12), %rax
               	movq	%rax, 56(%r12)
               	cmpq	64(%r12), %rax
               	ja	0x42fcca <mi_segment_free+0x6ea>
               	jmp	0x42fccf <mi_segment_free+0x6ef>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42f878 <mi_segment_free+0x298>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42f878 <mi_segment_free+0x298>
               	movq	%rdx, (%rax)
               	cmpq	%r14, 8(%rax)
               	jne	0x42f8c2 <mi_segment_free+0x2e2>
               	movq	32(%r14), %rdx
               	movq	%rdx, 8(%rax)
               	jmp	0x42f8c2 <mi_segment_free+0x2e2>
               	movq	104(%r12), %rcx
               	movq	(%rsp), %rdx
               	movq	%rcx, 24(%rdx)
               	movq	%rdx, 104(%r12)
               	addq	$1, %rax
               	movq	%rax, 88(%r12)
               	movq	112(%r12), %rdx
               	leaq	416(%rdx), %rcx
               	leaq	216989(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x42ff63 <mi_segment_free+0x983>
               	leaq	217549(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x42ff63 <mi_segment_free+0x983>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 440(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	432(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rsi, %rax
               	jg	0x42feb0 <mi_segment_free+0x8d0>
               	lock
               	cmpxchgq	%rdi, 432(%rdx)
               	jne	0x42fea0 <mi_segment_free+0x8c0>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x42ff89 <mi_segment_free+0x9a9>
               	leaq	120(%r14), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x42feec <mi_segment_free+0x90c>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r12)
               	cmpq	32(%r12), %rax
               	je	0x42ff30 <mi_segment_free+0x950>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x42f60b <mi_segment_free+0x2b>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x42fede <mi_segment_free+0x8fe>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x42ff0c <mi_segment_free+0x92c>
               	testq	%rsi, %rsi
               	jne	0x42ff11 <mi_segment_free+0x931>
               	jmp	0x42ff1e <mi_segment_free+0x93e>
               	testq	%rsi, %rsi
               	je	0x42ff37 <mi_segment_free+0x957>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x42ff22 <mi_segment_free+0x942>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r12), %rax
               	je	0x42fec3 <mi_segment_free+0x8e3>
               	cmpq	32(%r12), %rax
               	jne	0x42fed3 <mi_segment_free+0x8f3>
               	movq	%rdx, 32(%r12)
               	jmp	0x42fed3 <mi_segment_free+0x8f3>
               	cmpq	32(%r12), %rax
               	je	0x42ff22 <mi_segment_free+0x942>
               	cmpq	40(%r12), %rax
               	jne	0x42fede <mi_segment_free+0x8fe>
               	jmp	0x42ff22 <mi_segment_free+0x942>
               	cmpq	%r14, (%rax)
               	jne	0x42f87e <mi_segment_free+0x29e>
               	jmp	0x42f865 <mi_segment_free+0x285>
               	cmpq	%r14, (%rax)
               	jne	0x42f8c8 <mi_segment_free+0x2e8>
               	jmp	0x42f8af <mi_segment_free+0x2cf>
               	movq	440(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 440(%rdx)
               	cmpq	432(%rdx), %rsi
               	jl	0x42ff85 <mi_segment_free+0x9a5>
               	movq	%rax, 432(%rdx)
               	addq	$1, (%rcx)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<mi_segment_abandon>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4300b9 <mi_segment_abandon+0x119>
               	movq	%rsp, %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	movq	40(%r14), %rbp
               	testq	%rbp, %rbp
               	je	0x4300b1 <mi_segment_abandon+0x111>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %r12d      # imm = 0x3E8
               	addl	%edx, %r12d
               	jmp	0x430027 <mi_segment_abandon+0x87>
               	nop
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	testq	%rbp, %rbp
               	je	0x4300b1 <mi_segment_abandon+0x111>
               	movq	%rbp, %rbx
               	cmpl	%r12d, 16(%rbp)
               	jg	0x4302eb <mi_segment_abandon+0x34b>
               	movq	56(%rbx), %rbp
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x430010 <mi_segment_abandon+0x70>
               	movq	%rbx, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x430010 <mi_segment_abandon+0x70>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x430010 <mi_segment_abandon+0x70>
               	cmpl	$3, 112(%rdx)
               	jne	0x430071 <mi_segment_abandon+0xd1>
               	movq	72(%rdx), %rsi
               	jmp	0x43007d <mi_segment_abandon+0xdd>
               	movzbl	96(%rdx), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%rdx, %rdi
               	testq	%rcx, %rcx
               	jne	0x430099 <mi_segment_abandon+0xf9>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x430010 <mi_segment_abandon+0x70>
               	callq	0x42efe0 <_mi_os_reset>
               	jmp	0x430010 <mi_segment_abandon+0x70>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 32(%r14)
               	movl	$11, %edi
               	callq	0x42bc30 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	je	0x43030c <mi_segment_abandon+0x36c>
               	movl	112(%r15), %eax
               	testl	%eax, %eax
               	je	0x4300e1 <mi_segment_abandon+0x141>
               	cmpl	$1, %eax
               	jne	0x430137 <mi_segment_abandon+0x197>
               	leaq	16(%r14), %rax
               	jmp	0x4300e9 <mi_segment_abandon+0x149>
               	movq	%r14, %rax
               	testq	%r14, %r14
               	je	0x430137 <mi_segment_abandon+0x197>
               	leaq	24(%r15), %rcx
               	movq	24(%r15), %rdx
               	movq	32(%r15), %rsi
               	testq	%rdx, %rdx
               	je	0x430101 <mi_segment_abandon+0x161>
               	testq	%rsi, %rsi
               	jne	0x43010a <mi_segment_abandon+0x16a>
               	jmp	0x430116 <mi_segment_abandon+0x176>
               	testq	%rsi, %rsi
               	je	0x4304f9 <mi_segment_abandon+0x559>
               	movq	%rdx, 24(%rsi)
               	movq	(%rcx), %rdx
               	testq	%rdx, %rdx
               	je	0x43011a <mi_segment_abandon+0x17a>
               	movq	%rsi, 32(%rdx)
               	cmpq	%r15, (%rax)
               	je	0x43042b <mi_segment_abandon+0x48b>
               	cmpq	%r15, 8(%rax)
               	jne	0x430131 <mi_segment_abandon+0x191>
               	movq	32(%r15), %rdx
               	movq	%rdx, 8(%rax)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rcx)
               	movq	112(%r14), %rcx
               	leaq	192(%rcx), %rdx
               	leaq	216247(%rip), %rsi      # 0x464e00 <_mi_stats_main>
               	cmpq	%rsi, %rdx
               	jb	0x43019b <mi_segment_abandon+0x1fb>
               	leaq	216807(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rdx
               	jae	0x43019b <mi_segment_abandon+0x1fb>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 216(%rcx)
               	leaq	1(%rdi), %rbp
               	movq	208(%rcx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdi, %rax
               	jg	0x430190 <mi_segment_abandon+0x1f0>
               	lock
               	cmpxchgq	%rbp, 208(%rcx)
               	jne	0x430180 <mi_segment_abandon+0x1e0>
               	lock
               	addq	$1, (%rdx)
               	movq	112(%r14), %rcx
               	jmp	0x4301c1 <mi_segment_abandon+0x221>
               	movq	216(%rcx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 216(%rcx)
               	cmpq	208(%rcx), %rdi
               	jl	0x4301bd <mi_segment_abandon+0x21d>
               	movq	%rax, 208(%rcx)
               	addq	$1, (%rdx)
               	movq	72(%r15), %rdx
               	cmpq	%rsi, %rcx
               	setae	%bl
               	leaq	216686(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%bl, %al
               	testq	%rdx, %rdx
               	jle	0x430215 <mi_segment_abandon+0x275>
               	testb	%al, %al
               	je	0x430247 <mi_segment_abandon+0x2a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	addq	$-1, %rsi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jge	0x43020d <mi_segment_abandon+0x26d>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x430200 <mi_segment_abandon+0x260>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x430262 <mi_segment_abandon+0x2c2>
               	testb	%al, %al
               	je	0x43043d <mi_segment_abandon+0x49d>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rcx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rcx), %rax
               	cmpq	%rsi, %rax
               	jg	0x43023d <mi_segment_abandon+0x29d>
               	lock
               	cmpxchgq	%rdi, 16(%rcx)
               	jne	0x430230 <mi_segment_abandon+0x290>
               	lock
               	addq	$1, (%rcx)
               	jmp	0x430457 <mi_segment_abandon+0x4b7>
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x43025d <mi_segment_abandon+0x2bd>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x43027b <mi_segment_abandon+0x2db>
               	movq	%rax, 64(%r14)
               	movq	72(%r14), %rax
               	subq	%rdx, %rax
               	movq	%rax, 72(%r14)
               	cmpq	80(%r14), %rax
               	jbe	0x430290 <mi_segment_abandon+0x2f0>
               	movq	%rax, 80(%r14)
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	$0, 16(%r15)
               	movq	315667(%rip), %rax      # 0x47d3c0 <abandoned>
               	nopl	(%rax)
               	leal	1(%rax), %ecx
               	movq	%rax, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	movq	%rdx, 16(%r15)
               	andl	$4194303, %ecx          # imm = 0x3FFFFF
               	orq	%r15, %rcx
               	lock
               	cmpxchgq	%rcx, 315629(%rip)      # 0x47d3c0 <abandoned>
               	jne	0x4302b0 <mi_segment_abandon+0x310>
               	lock
               	addq	$1, 315682(%rip)        # 0x47d400 <abandoned_count>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, 40(%r14)
               	movq	$0, 48(%rbx)
               	movl	$11, %edi
               	callq	0x42bc30 <mi_option_get>
               	cmpb	$0, 8(%r15)
               	jne	0x4300ce <mi_segment_abandon+0x12e>
               	movq	64(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x4300ce <mi_segment_abandon+0x12e>
               	testq	%rax, %rax
               	je	0x430473 <mi_segment_abandon+0x4d3>
               	leaq	120(%r15), %rbx
               	xorl	%r12d, %r12d
               	jmp	0x430345 <mi_segment_abandon+0x3a5>
               	nop
               	movq	64(%r15), %rcx
               	addq	$1, %r12
               	addq	$64, %rbx
               	cmpq	%rcx, %r12
               	jae	0x4300ce <mi_segment_abandon+0x12e>
               	movzbl	1(%rbx), %eax
               	andb	$7, %al
               	cmpb	$4, %al
               	jne	0x430334 <mi_segment_abandon+0x394>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rcx
               	testq	%rax, %rax
               	je	0x430363 <mi_segment_abandon+0x3c3>
               	testq	%rcx, %rcx
               	jne	0x430368 <mi_segment_abandon+0x3c8>
               	jmp	0x430375 <mi_segment_abandon+0x3d5>
               	testq	%rcx, %rcx
               	je	0x4303dc <mi_segment_abandon+0x43c>
               	movq	%rax, 48(%rcx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x430379 <mi_segment_abandon+0x3d9>
               	movq	%rcx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x4303c8 <mi_segment_abandon+0x428>
               	cmpq	32(%r14), %rbx
               	je	0x4303d6 <mi_segment_abandon+0x436>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x430330 <mi_segment_abandon+0x390>
               	cmpb	$0, 8(%r15)
               	jne	0x430330 <mi_segment_abandon+0x390>
               	movzbl	1(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x430330 <mi_segment_abandon+0x390>
               	cmpl	$3, 112(%r15)
               	jne	0x4303ea <mi_segment_abandon+0x44a>
               	movq	72(%r15), %rsi
               	jmp	0x4303f7 <mi_segment_abandon+0x457>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x430385 <mi_segment_abandon+0x3e5>
               	movq	%rax, 32(%r14)
               	jmp	0x430385 <mi_segment_abandon+0x3e5>
               	cmpq	32(%r14), %rbx
               	je	0x430379 <mi_segment_abandon+0x3d9>
               	cmpq	40(%r14), %rbx
               	jne	0x430393 <mi_segment_abandon+0x3f3>
               	jmp	0x430379 <mi_segment_abandon+0x3d9>
               	movzbl	96(%r15), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%r15, %rdi
               	testq	%rcx, %rcx
               	jne	0x430413 <mi_segment_abandon+0x473>
               	movq	80(%r15), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbx)
               	testq	%rsi, %rsi
               	je	0x430330 <mi_segment_abandon+0x390>
               	callq	0x42efe0 <_mi_os_reset>
               	jmp	0x430330 <mi_segment_abandon+0x390>
               	movq	%rdx, (%rax)
               	cmpq	%r15, 8(%rax)
               	jne	0x430131 <mi_segment_abandon+0x191>
               	jmp	0x430129 <mi_segment_abandon+0x189>
               	movq	24(%rcx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rsi
               	jl	0x430453 <mi_segment_abandon+0x4b3>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	ja	0x430277 <mi_segment_abandon+0x2d7>
               	jmp	0x43027b <mi_segment_abandon+0x2db>
               	leaq	120(%r15), %rax
               	xorps	%xmm0, %xmm0
               	jmp	0x4304a3 <mi_segment_abandon+0x503>
               	movq	56(%rax), %rsi
               	movq	%rsi, 40(%r14)
               	cmpq	32(%r14), %rax
               	je	0x4304e5 <mi_segment_abandon+0x545>
               	movl	$0, 16(%rax)
               	movups	%xmm0, 48(%rax)
               	addq	$64, %rax
               	addq	$-1, %rcx
               	je	0x4300ce <mi_segment_abandon+0x12e>
               	movzbl	1(%rax), %edx
               	andb	$7, %dl
               	cmpb	$4, %dl
               	jne	0x430495 <mi_segment_abandon+0x4f5>
               	movq	48(%rax), %rdx
               	movq	56(%rax), %rsi
               	testq	%rdx, %rdx
               	je	0x4304c3 <mi_segment_abandon+0x523>
               	testq	%rsi, %rsi
               	jne	0x4304c8 <mi_segment_abandon+0x528>
               	jmp	0x4304d5 <mi_segment_abandon+0x535>
               	testq	%rsi, %rsi
               	je	0x4304eb <mi_segment_abandon+0x54b>
               	movq	%rdx, 48(%rsi)
               	movq	48(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x4304d9 <mi_segment_abandon+0x539>
               	movq	%rsi, 56(%rdx)
               	cmpq	40(%r14), %rax
               	je	0x43047c <mi_segment_abandon+0x4dc>
               	cmpq	32(%r14), %rax
               	jne	0x43048a <mi_segment_abandon+0x4ea>
               	movq	%rdx, 32(%r14)
               	jmp	0x43048a <mi_segment_abandon+0x4ea>
               	cmpq	32(%r14), %rax
               	je	0x4304d9 <mi_segment_abandon+0x539>
               	cmpq	40(%r14), %rax
               	jne	0x430495 <mi_segment_abandon+0x4f5>
               	jmp	0x4304d9 <mi_segment_abandon+0x539>
               	cmpq	%r15, (%rax)
               	jne	0x430137 <mi_segment_abandon+0x197>
               	jmp	0x43011a <mi_segment_abandon+0x17a>
               	nopw	(%rax,%rax)

<_mi_free_delayed_block>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %r15
               	movq	%rdi, %r12
               	andq	$-4194304, %r12         # imm = 0xFFC00000
               	movl	%r15d, %ebx
               	andl	$4194303, %ebx          # imm = 0x3FFFFF
               	movb	96(%r12), %cl
               	shrq	%cl, %rbx
               	shlq	$6, %rbx
               	leaq	(%r12,%rbx), %r14
               	addq	$120, %r14
               	movq	32(%r14), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x43056c <_mi_free_delayed_block+0x5c>
               	cmpl	$3, %ecx
               	je	0x43056c <_mi_free_delayed_block+0x5c>
               	cmpl	$1, %ecx
               	je	0x430568 <_mi_free_delayed_block+0x58>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x430542 <_mi_free_delayed_block+0x32>
               	jmp	0x43056c <_mi_free_delayed_block+0x5c>
               	pause
               	jmp	0x430542 <_mi_free_delayed_block+0x32>
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42e280 <_mi_page_free_collect>
               	movq	144(%r12,%rbx), %rax
               	movq	%rax, (%r15)
               	movq	%r15, 144(%r12,%rbx)
               	addl	$-1, 136(%r12,%rbx)
               	je	0x4305a8 <_mi_free_delayed_block+0x98>
               	testb	$1, 126(%r12,%rbx)
               	jne	0x4305bb <_mi_free_delayed_block+0xab>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x4305d0 <_mi_page_retire>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	jmp	0x4306e0 <_mi_page_unfull>
               	nop

<_mi_page_retire>:
               	movb	6(%rdi), %dl
               	movl	%edx, %eax
               	andb	$-3, %al
               	movb	%al, 6(%rdi)
               	movl	20(%rdi), %r8d
               	movl	$74, %eax
               	testb	$1, %dl
               	jne	0x43063c <_mi_page_retire+0x6c>
               	movl	$1, %ecx
               	cmpl	$9, %r8d
               	jb	0x430639 <_mi_page_retire+0x69>
               	leaq	7(%r8), %rsi
               	shrq	$3, %rsi
               	cmpl	$64, %r8d
               	ja	0x43060f <_mi_page_retire+0x3f>
               	addl	$1, %esi
               	andl	$254, %esi
               	movq	%rsi, %rcx
               	jmp	0x430639 <_mi_page_retire+0x69>
               	movl	$73, %ecx
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x430639 <_mi_page_retire+0x69>
               	addq	$-1, %rsi
               	bsrq	%rsi, %rax
               	movl	%eax, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%rax,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	movq	40(%rdi), %rcx
               	leaq	(%rax,%rax,2), %rax
               	leaq	(%rcx,%rax,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	testb	$1, %dl
               	jne	0x43066c <_mi_page_retire+0x9c>
               	cmpl	$2097152, %r8d          # imm = 0x200000
               	ja	0x43066c <_mi_page_retire+0x9c>
               	cmpq	%rdi, 1048(%rcx,%rax,8)
               	jne	0x43066c <_mi_page_retire+0x9c>
               	cmpq	%rdi, (%rsi)
               	je	0x430673 <_mi_page_retire+0xa3>
               	xorl	%edx, %edx
               	jmp	0x42e350 <_mi_page_free>
               	cmpl	$16385, %r8d            # imm = 0x4001
               	movl	$16, %eax
               	movl	$4, %ecx
               	cmovbl	%eax, %ecx
               	movb	7(%rdi), %al
               	andb	$1, %al
               	orb	%cl, %al
               	movb	%al, 7(%rdi)
               	movq	40(%rdi), %rax
               	subq	%rax, %rsi
               	addq	$-1040, %rsi            # imm = 0xFBF0
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rsi, %rcx
               	cmpq	3024(%rax), %rcx
               	jb	0x4306c4 <_mi_page_retire+0xf4>
               	cmpq	3032(%rax), %rcx
               	ja	0x4306d4 <_mi_page_retire+0x104>
               	retq
               	movq	%rcx, 3024(%rax)
               	cmpq	3032(%rax), %rcx
               	jbe	0x4306c3 <_mi_page_retire+0xf3>
               	movq	%rcx, 3032(%rax)
               	retq
               	nopl	(%rax)

<_mi_page_unfull>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	movb	6(%rdi), %al
               	testb	$1, %al
               	je	0x430bd3 <_mi_page_unfull+0x4f3>
               	movq	40(%rdi), %r12
               	movl	%eax, %ecx
               	andb	$-2, %cl
               	movb	%cl, 6(%rdi)
               	movl	20(%rdi), %esi
               	movl	$1, %ecx
               	cmpq	$9, %rsi
               	jb	0x430753 <_mi_page_unfull+0x73>
               	movq	%rsi, %rdx
               	addq	$7, %rdx
               	shrq	$3, %rdx
               	cmpl	$64, %esi
               	ja	0x43072a <_mi_page_unfull+0x4a>
               	addl	$1, %edx
               	andl	$254, %edx
               	movq	%rdx, %rcx
               	jmp	0x430753 <_mi_page_unfull+0x73>
               	movl	$73, %ecx
               	cmpl	$2097152, %esi          # imm = 0x200000
               	ja	0x430753 <_mi_page_unfull+0x73>
               	addq	$-1, %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %ecx
               	addl	$253, %ecx
               	orb	$1, %al
               	movb	%al, 6(%rdi)
               	movq	40(%rdi), %r9
               	movq	56(%rdi), %rdx
               	testq	%rdx, %rdx
               	je	0x43076d <_mi_page_unfull+0x8d>
               	movq	48(%rdi), %rax
               	movq	%rax, 48(%rdx)
               	movzbl	%cl, %ecx
               	movq	48(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43077d <_mi_page_unfull+0x9d>
               	movq	%rdx, 56(%rax)
               	cmpq	%rdi, 2824(%r12)
               	je	0x43079b <_mi_page_unfull+0xbb>
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x43099e <_mi_page_unfull+0x2be>
               	jmp	0x4307b9 <_mi_page_unfull+0xd9>
               	movq	56(%rdi), %rdx
               	movq	%rdx, 2824(%r12)
               	leaq	(%rcx,%rcx,2), %r15
               	cmpq	%rdi, 2816(%r12)
               	jne	0x43099e <_mi_page_unfull+0x2be>
               	movq	%rax, 2816(%r12)
               	movq	2832(%r12), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43099e <_mi_page_unfull+0x2be>
               	testq	%rax, %rax
               	leaq	89056(%rip), %r8        # 0x4463c0 <_mi_page_empty>
               	cmovneq	%rax, %r8
               	leaq	7(%rcx), %r14
               	shrq	$3, %r14
               	cmpq	%r8, 8(%r9,%r14,8)
               	je	0x43099e <_mi_page_unfull+0x2be>
               	cmpq	$9, %rcx
               	jae	0x430804 <_mi_page_unfull+0x124>
               	xorl	%ecx, %ecx
               	jmp	0x4308c2 <_mi_page_unfull+0x1e2>
               	cmpq	$64, %rcx
               	ja	0x430814 <_mi_page_unfull+0x134>
               	leal	1(%r14), %r10d
               	andb	$-2, %r10b
               	jmp	0x43082f <_mi_page_unfull+0x14f>
               	leaq	-1(%r14), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r10d
               	addb	$-3, %r10b
               	leaq	1040(%r9), %rbx
               	leaq	2792(%r12), %rsi
               	nop
               	movq	16(%rsi), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rax
               	shrq	$3, %rax
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x4308a0 <_mi_page_unfull+0x1c0>
               	cmpq	$71, %rdx
               	ja	0x430870 <_mi_page_unfull+0x190>
               	leal	1(%rax), %ecx
               	andb	$-2, %cl
               	jmp	0x4308a0 <_mi_page_unfull+0x1c0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x4308a0 <_mi_page_unfull+0x1c0>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rbx, %rsi
               	jbe	0x4308ae <_mi_page_unfull+0x1ce>
               	addq	$-24, %rsi
               	cmpb	%cl, %r10b
               	je	0x430840 <_mi_page_unfull+0x160>
               	leaq	1(%rax), %rcx
               	cmpq	%r14, %rax
               	cmovaeq	%r14, %rcx
               	cmpq	%r14, %rcx
               	ja	0x43099e <_mi_page_unfull+0x2be>
               	addq	$1, %r14
               	movq	%r14, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x430990 <_mi_page_unfull+0x2b0>
               	movq	%r10, %r11
               	andq	$-4, %r11
               	movq	%r8, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rsi
               	movq	%rsi, %rdx
               	shrq	$2, %rdx
               	addq	$1, %rdx
               	movl	%edx, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x430905 <_mi_page_unfull+0x225>
               	xorl	%esi, %esi
               	jmp	0x430959 <_mi_page_unfull+0x279>
               	leaq	(%r9,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rdx
               	negq	%rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rsi,8)
               	movdqu	%xmm0, -96(%rbx,%rsi,8)
               	movdqu	%xmm0, -80(%rbx,%rsi,8)
               	movdqu	%xmm0, -64(%rbx,%rsi,8)
               	movdqu	%xmm0, -48(%rbx,%rsi,8)
               	movdqu	%xmm0, -32(%rbx,%rsi,8)
               	movdqu	%xmm0, -16(%rbx,%rsi,8)
               	movdqu	%xmm0, (%rbx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rdx
               	jne	0x430920 <_mi_page_unfull+0x240>
               	testq	%rax, %rax
               	je	0x430982 <_mi_page_unfull+0x2a2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x430970 <_mi_page_unfull+0x290>
               	cmpq	%r11, %r10
               	je	0x43099e <_mi_page_unfull+0x2be>
               	addq	%r11, %rcx
               	nop
               	movq	%r8, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r14
               	jne	0x430990 <_mi_page_unfull+0x2b0>
               	leaq	(%r12,%r15,8), %rax
               	addq	$1048, %rax             # imm = 0x418
               	movq	1048(%r12,%r15,8), %rcx
               	movq	%rcx, 56(%rdi)
               	movq	$0, 48(%rdi)
               	testq	%rcx, %rcx
               	je	0x4309d5 <_mi_page_unfull+0x2f5>
               	movq	%rdi, 48(%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	jmp	0x430bbe <_mi_page_unfull+0x4de>
               	leaq	(%r12,%r15,8), %rcx
               	addq	$1040, %rcx             # imm = 0x410
               	movq	%rdi, (%rcx)
               	movq	%rdi, (%rax)
               	movq	1056(%r12,%r15,8), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x430bbe <_mi_page_unfull+0x4de>
               	leaq	7(%r8), %r10
               	shrq	$3, %r10
               	cmpq	%rdi, 8(%r9,%r10,8)
               	je	0x430bbe <_mi_page_unfull+0x4de>
               	cmpq	$9, %r8
               	jae	0x430a1b <_mi_page_unfull+0x33b>
               	xorl	%ecx, %ecx
               	jmp	0x430ae2 <_mi_page_unfull+0x402>
               	cmpq	$64, %r8
               	ja	0x430a2b <_mi_page_unfull+0x34b>
               	leal	1(%r10), %r11d
               	andb	$-2, %r11b
               	jmp	0x430a46 <_mi_page_unfull+0x366>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %r11d
               	addb	$-3, %r11b
               	leaq	1040(%r9), %rsi
               	leaq	(%r12,%r15,8), %rdx
               	addq	$1016, %rdx             # imm = 0x3F8
               	nopl	(%rax,%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x430ac0 <_mi_page_unfull+0x3e0>
               	cmpq	$71, %rax
               	ja	0x430a90 <_mi_page_unfull+0x3b0>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x430ac0 <_mi_page_unfull+0x3e0>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x430ac0 <_mi_page_unfull+0x3e0>
               	leaq	-1(%rbx), %rax
               	bsrq	%rax, %r14
               	movl	%r14d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r14,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x430ace <_mi_page_unfull+0x3ee>
               	addq	$-24, %rdx
               	cmpb	%cl, %r11b
               	je	0x430a60 <_mi_page_unfull+0x380>
               	leaq	1(%rbx), %rcx
               	cmpq	%r10, %rbx
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x430bbe <_mi_page_unfull+0x4de>
               	addq	$1, %r10
               	movq	%r10, %r14
               	subq	%rcx, %r14
               	cmpq	$4, %r14
               	jb	0x430bb0 <_mi_page_unfull+0x4d0>
               	movq	%r14, %r11
               	andq	$-4, %r11
               	movq	%rdi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r11), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x430b25 <_mi_page_unfull+0x445>
               	xorl	%esi, %esi
               	jmp	0x430b79 <_mi_page_unfull+0x499>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rsi,8)
               	movdqu	%xmm0, -96(%rdx,%rsi,8)
               	movdqu	%xmm0, -80(%rdx,%rsi,8)
               	movdqu	%xmm0, -64(%rdx,%rsi,8)
               	movdqu	%xmm0, -48(%rdx,%rsi,8)
               	movdqu	%xmm0, -32(%rdx,%rsi,8)
               	movdqu	%xmm0, -16(%rdx,%rsi,8)
               	movdqu	%xmm0, (%rdx,%rsi,8)
               	addq	$16, %rsi
               	addq	$4, %rax
               	jne	0x430b40 <_mi_page_unfull+0x460>
               	testq	%rbx, %rbx
               	je	0x430ba2 <_mi_page_unfull+0x4c2>
               	addq	%rcx, %rsi
               	leaq	(%r9,%rsi,8), %rax
               	addq	$24, %rax
               	negq	%rbx
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%rbx
               	jne	0x430b90 <_mi_page_unfull+0x4b0>
               	cmpq	%r11, %r14
               	je	0x430bbe <_mi_page_unfull+0x4de>
               	addq	%r11, %rcx
               	nop
               	movq	%rdi, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x430bb0 <_mi_page_unfull+0x4d0>
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rdi), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax,%rax)

<mi_segment_reclaim>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r8, %r14
               	movq	%rdx, 8(%rsp)
               	movq	%rsi, %r12
               	movq	%rdi, %r15
               	testq	%rcx, %rcx
               	je	0x430c04 <mi_segment_reclaim+0x24>
               	movb	$0, (%rcx)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r15)
               	movq	$0, 48(%r15)
               	movq	72(%r15), %rbp
               	movq	112(%r14), %rdx
               	leaq	213464(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	214027(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rbp, %rbp
               	js	0x430c74 <mi_segment_reclaim+0x94>
               	testb	%al, %al
               	je	0x430cb8 <mi_segment_reclaim+0xd8>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	16(%rdx), %rax
               	nopl	(%rax)
               	cmpq	%rsi, %rax
               	jg	0x430c6d <mi_segment_reclaim+0x8d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x430c60 <mi_segment_reclaim+0x80>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x430cd2 <mi_segment_reclaim+0xf2>
               	testb	%al, %al
               	je	0x4310c8 <mi_segment_reclaim+0x4e8>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jge	0x430cad <mi_segment_reclaim+0xcd>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x430ca0 <mi_segment_reclaim+0xc0>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x4310e3 <mi_segment_reclaim+0x503>
               	movq	24(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rsi
               	jl	0x430cce <mi_segment_reclaim+0xee>
               	movq	%rax, 16(%rdx)
               	addq	$1, (%rdx)
               	movl	$1, %eax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x430ce9 <mi_segment_reclaim+0x109>
               	movq	%rax, 64(%r14)
               	addq	72(%r14), %rbp
               	movq	%rbp, 72(%r14)
               	cmpq	80(%r14), %rbp
               	jbe	0x430cfb <mi_segment_reclaim+0x11b>
               	movq	%rbp, 80(%r14)
               	movq	112(%r14), %rsi
               	leaq	192(%rsi), %rax
               	leaq	213235(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x430ef6 <mi_segment_reclaim+0x316>
               	leaq	213795(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x430ef6 <mi_segment_reclaim+0x316>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 216(%rsi)
               	addq	$-1, %rdx
               	movq	208(%rsi), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x430d60 <mi_segment_reclaim+0x180>
               	lock
               	cmpxchgq	%rdx, 208(%rsi)
               	jne	0x430d50 <mi_segment_reclaim+0x170>
               	lock
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	je	0x430f2b <mi_segment_reclaim+0x34b>
               	testq	%rcx, %rcx
               	je	0x430f7a <mi_segment_reclaim+0x39a>
               	movq	%rcx, 16(%rsp)
               	xorl	%r13d, %r13d
               	jmp	0x430db1 <mi_segment_reclaim+0x1d1>
               	movq	%r15, %rdi
               	movq	%rbp, %rsi
               	movq	%r14, %rdx
               	callq	0x42f390 <mi_segment_page_clear>
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %r13
               	movq	64(%r15), %rax
               	cmpq	%rax, %r13
               	jae	0x430f2d <mi_segment_reclaim+0x34d>
               	movq	%r13, %rbx
               	shlq	$6, %rbx
               	testb	$1, 121(%r15,%rbx)
               	je	0x430da0 <mi_segment_reclaim+0x1c0>
               	addq	$-1, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	213029(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x430e30 <mi_segment_reclaim+0x250>
               	leaq	213589(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x430e30 <mi_segment_reclaim+0x250>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x430e20 <mi_segment_reclaim+0x240>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x430e10 <mi_segment_reclaim+0x230>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x430e5a <mi_segment_reclaim+0x27a>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x430e52 <mi_segment_reclaim+0x272>
               	movq	%rax, 240(%rcx)
               	addq	$1, 232(%rcx)
               	leaq	(%r15,%rbx), %rbp
               	addq	$120, %rbp
               	movq	%r12, 160(%r15,%rbx)
               	movq	32(%rbp), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x430e90 <mi_segment_reclaim+0x2b0>
               	cmpl	$1, %ecx
               	je	0x430e8b <mi_segment_reclaim+0x2ab>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%rbp)
               	jne	0x430e6a <mi_segment_reclaim+0x28a>
               	jmp	0x430e90 <mi_segment_reclaim+0x2b0>
               	pause
               	jmp	0x430e6a <mi_segment_reclaim+0x28a>
               	nop
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	callq	0x42e280 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbx)
               	je	0x430d87 <mi_segment_reclaim+0x1a7>
               	movq	%r12, %rdi
               	movq	%rbp, %rsi
               	callq	0x431140 <_mi_page_reclaim>
               	movl	140(%r15,%rbx), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x430da0 <mi_segment_reclaim+0x1c0>
               	leaq	(%r15,%rbx), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbx), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x430ee9 <mi_segment_reclaim+0x309>
               	movq	32(%rbp), %rax
               	cmpq	$4, %rax
               	jb	0x430da0 <mi_segment_reclaim+0x1c0>
               	movq	16(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x430da0 <mi_segment_reclaim+0x1c0>
               	movq	216(%rsi), %rax
               	addq	$-1, %rax
               	movq	%rax, 216(%rsi)
               	cmpq	208(%rsi), %rax
               	jle	0x430f18 <mi_segment_reclaim+0x338>
               	movq	%rax, 208(%rsi)
               	addq	$1, 200(%rsi)
               	cmpq	$0, 64(%r15)
               	jne	0x430d74 <mi_segment_reclaim+0x194>
               	xorl	%eax, %eax
               	movq	56(%r15), %rcx
               	testq	%rcx, %rcx
               	je	0x430f65 <mi_segment_reclaim+0x385>
               	cmpq	%rax, %rcx
               	jae	0x431127 <mi_segment_reclaim+0x547>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x431127 <mi_segment_reclaim+0x547>
               	cmpl	$1, %eax
               	je	0x431101 <mi_segment_reclaim+0x521>
               	testl	%eax, %eax
               	je	0x431105 <mi_segment_reclaim+0x525>
               	xorl	%r14d, %r14d
               	jmp	0x431105 <mi_segment_reclaim+0x525>
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x42f5e0 <mi_segment_free>
               	xorl	%r15d, %r15d
               	jmp	0x431127 <mi_segment_reclaim+0x547>
               	xorl	%ebx, %ebx
               	jmp	0x430f9d <mi_segment_reclaim+0x3bd>
               	movq	%r15, %rdi
               	movq	%r13, %rsi
               	movq	%r14, %rdx
               	callq	0x42f390 <mi_segment_page_clear>
               	nopl	(%rax)
               	addq	$1, %rbx
               	movq	64(%r15), %rax
               	cmpq	%rax, %rbx
               	jae	0x430f2d <mi_segment_reclaim+0x34d>
               	movq	%rbx, %rbp
               	shlq	$6, %rbp
               	testb	$1, 121(%r15,%rbp)
               	je	0x430f90 <mi_segment_reclaim+0x3b0>
               	addq	$-1, 40(%r15)
               	movq	112(%r14), %rcx
               	leaq	224(%rcx), %rax
               	leaq	212541(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x431010 <mi_segment_reclaim+0x430>
               	leaq	213105(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x431010 <mi_segment_reclaim+0x430>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 248(%rcx)
               	addq	$-1, %rdx
               	movq	240(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x431000 <mi_segment_reclaim+0x420>
               	lock
               	cmpxchgq	%rdx, 240(%rcx)
               	jne	0x430ff0 <mi_segment_reclaim+0x410>
               	lock
               	addq	$1, 232(%rcx)
               	jmp	0x43103a <mi_segment_reclaim+0x45a>
               	nop
               	movq	248(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 248(%rcx)
               	cmpq	240(%rcx), %rax
               	jle	0x431032 <mi_segment_reclaim+0x452>
               	movq	%rax, 240(%rcx)
               	addq	$1, 232(%rcx)
               	leaq	(%r15,%rbp), %r13
               	addq	$120, %r13
               	movq	%r12, 160(%r15,%rbp)
               	movq	32(%r13), %rax
               	movl	%eax, %ecx
               	andl	$3, %ecx
               	je	0x431070 <mi_segment_reclaim+0x490>
               	cmpl	$1, %ecx
               	je	0x43106b <mi_segment_reclaim+0x48b>
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r13)
               	jne	0x43104a <mi_segment_reclaim+0x46a>
               	jmp	0x431070 <mi_segment_reclaim+0x490>
               	pause
               	jmp	0x43104a <mi_segment_reclaim+0x46a>
               	nop
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x42e280 <_mi_page_free_collect>
               	cmpl	$0, 136(%r15,%rbp)
               	je	0x430f7e <mi_segment_reclaim+0x39e>
               	movq	%r12, %rdi
               	movq	%r13, %rsi
               	callq	0x431140 <_mi_page_reclaim>
               	movl	140(%r15,%rbp), %eax
               	cmpq	8(%rsp), %rax
               	jne	0x430f90 <mi_segment_reclaim+0x3b0>
               	leaq	(%r15,%rbp), %rax
               	addq	$136, %rax
               	movzwl	124(%r15,%rbp), %ecx
               	cmpl	%ecx, (%rax)
               	jb	0x430f90 <mi_segment_reclaim+0x3b0>
               	movq	32(%r13), %rax
               	jmp	0x430f90 <mi_segment_reclaim+0x3b0>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x4310de <mi_segment_reclaim+0x4fe>
               	movq	%rax, 16(%rdx)
               	addq	$1, 8(%rdx)
               	movq	$-1, %rax
               	addq	56(%r14), %rax
               	movq	%rax, 56(%r14)
               	cmpq	64(%r14), %rax
               	jbe	0x430ce9 <mi_segment_reclaim+0x109>
               	jmp	0x430ce5 <mi_segment_reclaim+0x105>
               	addq	$16, %r14
               	movq	$0, 24(%r15)
               	movq	8(%r14), %rax
               	movq	%rax, 32(%r15)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%r14, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, 8(%r14)
               	movq	%r15, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<_mi_page_reclaim>:
               	pushq	%rbx
               	movl	20(%rsi), %r8d
               	cmpq	$67108864, %r8          # imm = 0x4000000
               	jae	0x4313d8 <_mi_page_reclaim+0x298>
               	addq	$7, %r8
               	movl	$1, %ecx
               	cmpq	$16, %r8
               	jb	0x4311a5 <_mi_page_reclaim+0x65>
               	movq	%r8, %rax
               	shrq	$3, %rax
               	cmpq	$71, %r8
               	ja	0x43117b <_mi_page_reclaim+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	movq	%rax, %rcx
               	jmp	0x4311a5 <_mi_page_reclaim+0x65>
               	movl	$73, %ecx
               	cmpq	$2097159, %r8           # imm = 0x200007
               	ja	0x4311a5 <_mi_page_reclaim+0x65>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %ecx
               	addl	$253, %ecx
               	movzbl	%cl, %eax
               	leaq	(%rax,%rax,2), %rax
               	cmpq	$2097168, 1056(%rdi,%rax,8) # imm = 0x200010
               	sete	%cl
               	movb	6(%rsi), %dl
               	andb	$-2, %dl
               	orb	%cl, %dl
               	movb	%dl, 6(%rsi)
               	movq	1040(%rdi,%rax,8), %rcx
               	movq	%rcx, 48(%rsi)
               	movq	$0, 56(%rsi)
               	leaq	56(%rcx), %rdx
               	testq	%rcx, %rcx
               	leaq	1048(%rdi,%rax,8), %rcx
               	cmovneq	%rdx, %rcx
               	movq	%rsi, (%rcx)
               	movq	%rsi, 1040(%rdi,%rax,8)
               	movq	1056(%rdi,%rax,8), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x4313ce <_mi_page_reclaim+0x28e>
               	leaq	7(%rcx), %r9
               	shrq	$3, %r9
               	cmpq	%rsi, 8(%rdi,%r9,8)
               	je	0x4313ce <_mi_page_reclaim+0x28e>
               	cmpq	$9, %rcx
               	jae	0x43122d <_mi_page_reclaim+0xed>
               	xorl	%ecx, %ecx
               	jmp	0x4312f2 <_mi_page_reclaim+0x1b2>
               	cmpq	$64, %rcx
               	ja	0x43123d <_mi_page_reclaim+0xfd>
               	leal	1(%r9), %r8d
               	andb	$-2, %r8b
               	jmp	0x431258 <_mi_page_reclaim+0x118>
               	leaq	-1(%r9), %rdx
               	bsrq	%rdx, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rbx,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%rdi), %r10
               	leaq	(%rdi,%rax,8), %rax
               	addq	$1016, %rax             # imm = 0x3F8
               	nopl	(%rax)
               	movq	16(%rax), %rdx
               	addq	$7, %rdx
               	movq	%rdx, %rbx
               	shrq	$3, %rbx
               	movb	$1, %cl
               	cmpq	$16, %rdx
               	jb	0x4312d0 <_mi_page_reclaim+0x190>
               	cmpq	$71, %rdx
               	ja	0x4312a0 <_mi_page_reclaim+0x160>
               	leal	1(%rbx), %ecx
               	andb	$-2, %cl
               	jmp	0x4312d0 <_mi_page_reclaim+0x190>
               	movb	$73, %cl
               	cmpq	$2097159, %rdx          # imm = 0x200007
               	ja	0x4312d0 <_mi_page_reclaim+0x190>
               	leaq	-1(%rbx), %rdx
               	bsrq	%rdx, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%r10, %rax
               	jbe	0x4312de <_mi_page_reclaim+0x19e>
               	addq	$-24, %rax
               	cmpb	%cl, %r8b
               	je	0x431270 <_mi_page_reclaim+0x130>
               	leaq	1(%rbx), %rcx
               	cmpq	%r9, %rbx
               	cmovaeq	%r9, %rcx
               	cmpq	%r9, %rcx
               	ja	0x4313ce <_mi_page_reclaim+0x28e>
               	addq	$1, %r9
               	movq	%r9, %r10
               	subq	%rcx, %r10
               	cmpq	$4, %r10
               	jb	0x4313c0 <_mi_page_reclaim+0x280>
               	movq	%r10, %r8
               	andq	$-4, %r8
               	movq	%rsi, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rax
               	shrq	$2, %rax
               	addq	$1, %rax
               	movl	%eax, %r11d
               	andl	$3, %r11d
               	cmpq	$12, %rdx
               	jae	0x431337 <_mi_page_reclaim+0x1f7>
               	xorl	%edx, %edx
               	jmp	0x431389 <_mi_page_reclaim+0x249>
               	leaq	(%rdi,%rcx,8), %rbx
               	addq	$120, %rbx
               	andq	$-4, %rax
               	negq	%rax
               	xorl	%edx, %edx
               	nopl	(%rax,%rax)
               	movdqu	%xmm0, -112(%rbx,%rdx,8)
               	movdqu	%xmm0, -96(%rbx,%rdx,8)
               	movdqu	%xmm0, -80(%rbx,%rdx,8)
               	movdqu	%xmm0, -64(%rbx,%rdx,8)
               	movdqu	%xmm0, -48(%rbx,%rdx,8)
               	movdqu	%xmm0, -32(%rbx,%rdx,8)
               	movdqu	%xmm0, -16(%rbx,%rdx,8)
               	movdqu	%xmm0, (%rbx,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rax
               	jne	0x431350 <_mi_page_reclaim+0x210>
               	testq	%r11, %r11
               	je	0x4313b2 <_mi_page_reclaim+0x272>
               	addq	%rcx, %rdx
               	leaq	(%rdi,%rdx,8), %rax
               	addq	$24, %rax
               	negq	%r11
               	movdqu	%xmm0, -16(%rax)
               	movdqu	%xmm0, (%rax)
               	addq	$32, %rax
               	incq	%r11
               	jne	0x4313a0 <_mi_page_reclaim+0x260>
               	cmpq	%r8, %r10
               	je	0x4313ce <_mi_page_reclaim+0x28e>
               	addq	%r8, %rcx
               	nop
               	movq	%rsi, 8(%rdi,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r9
               	jne	0x4313c0 <_mi_page_reclaim+0x280>
               	addq	$1, 3016(%rdi)
               	popq	%rbx
               	retq
               	movq	%rsi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebx
               	cmpl	$3, %ebx
               	jne	0x4313ef <_mi_page_reclaim+0x2af>
               	movq	72(%rax), %rdx
               	jmp	0x4313fa <_mi_page_reclaim+0x2ba>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movzbl	(%rsi), %ecx
               	testq	%rcx, %rcx
               	je	0x43140a <_mi_page_reclaim+0x2ca>
               	movq	%rdx, %r8
               	jmp	0x431152 <_mi_page_reclaim+0x12>
               	movq	80(%rax), %r10
               	movq	%rdx, %r9
               	subq	%r10, %r9
               	cmpl	$1, %ebx
               	ja	0x43144f <_mi_page_reclaim+0x30f>
               	testl	%r8d, %r8d
               	je	0x43144f <_mi_page_reclaim+0x30f>
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r10, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x431438 <_mi_page_reclaim+0x2f8>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x43143d <_mi_page_reclaim+0x2fd>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %r8
               	jmp	0x431152 <_mi_page_reclaim+0x12>
               	nopw	(%rax,%rax)

<mi_free>:
               	movq	%rdi, %rdx
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	je	0x4314b3 <mi_free+0x53>
               	movq	%fs:0, %r8
               	movl	%edx, %eax
               	andl	$4194303, %eax          # imm = 0x3FFFFF
               	movb	96(%rdi), %cl
               	shrq	%cl, %rax
               	movq	104(%rdi), %rcx
               	cmpq	%r8, %rcx
               	jne	0x4314b4 <mi_free+0x54>
               	shlq	$6, %rax
               	cmpb	$0, 126(%rdi,%rax)
               	jne	0x4314b4 <mi_free+0x54>
               	movq	144(%rdi,%rax), %rcx
               	movq	%rcx, (%rdx)
               	movq	%rdx, 144(%rdi,%rax)
               	addl	$-1, 136(%rdi,%rax)
               	je	0x4314c6 <mi_free+0x66>
               	retq
               	movq	104(%rdi), %rax
               	xorl	%esi, %esi
               	cmpq	%r8, %rax
               	sete	%sil
               	jmp	0x4314e0 <mi_free_generic>
               	addq	%rax, %rdi
               	addq	$120, %rdi
               	jmp	0x4305d0 <_mi_page_retire>
               	nopw	%cs:(%rax,%rax)

<mi_free_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %r8
               	movq	%rdx, %r11
               	subq	%rdi, %r11
               	movq	96(%rdi), %rcx
               	shrq	%cl, %r11
               	shlq	$6, %r11
               	leaq	(%rdi,%r11), %r9
               	addq	$120, %r9
               	testb	$2, 126(%rdi,%r11)
               	je	0x4315a5 <mi_free_generic+0xc5>
               	movl	140(%rdi,%r11), %r14d
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x431524 <mi_free_generic+0x44>
               	movq	72(%rdi), %r10
               	jmp	0x43152d <mi_free_generic+0x4d>
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	movzbl	(%r9), %ebx
               	imulq	%rbx, %r10
               	addq	%rdi, %r10
               	testq	%rbx, %rbx
               	jne	0x431577 <mi_free_generic+0x97>
               	addq	80(%rdi), %r10
               	cmpl	$1, %eax
               	ja	0x431577 <mi_free_generic+0x97>
               	testl	%r14d, %r14d
               	je	0x431577 <mi_free_generic+0x97>
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x43155e <mi_free_generic+0x7e>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x431566 <mi_free_generic+0x86>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	leaq	(%r10,%rax), %rcx
               	cmpq	%r14, %rax
               	cmovbq	%rcx, %r10
               	cmpl	$67108864, %r14d        # imm = 0x4000000
               	jae	0x431609 <mi_free_generic+0x129>
               	movq	%r8, %rax
               	subq	%r10, %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x43159d <mi_free_generic+0xbd>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x4315a2 <mi_free_generic+0xc2>
               	xorl	%edx, %edx
               	divl	%r14d
               	subq	%rdx, %r8
               	testb	%sil, %sil
               	je	0x4315dc <mi_free_generic+0xfc>
               	movq	144(%rdi,%r11), %rax
               	movq	%rax, (%r8)
               	movq	%r8, 144(%rdi,%r11)
               	addl	$-1, 136(%rdi,%r11)
               	je	0x4315ed <mi_free_generic+0x10d>
               	leaq	(%rdi,%r11), %rax
               	addq	$126, %rax
               	testb	$1, (%rax)
               	jne	0x4315fb <mi_free_generic+0x11b>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x431690 <_mi_free_block_mt>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4305d0 <_mi_page_retire>
               	movq	%r9, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x4306e0 <_mi_page_unfull>
               	movq	%r9, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %ebp
               	cmpl	$3, %ebp
               	jne	0x431620 <mi_free_generic+0x140>
               	movq	72(%rax), %rdx
               	jmp	0x43162b <mi_free_generic+0x14b>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	testb	%bl, %bl
               	je	0x431637 <mi_free_generic+0x157>
               	movq	%rdx, %r14
               	jmp	0x431584 <mi_free_generic+0xa4>
               	movq	80(%rax), %r15
               	movq	%rdx, %rcx
               	subq	%r15, %rcx
               	cmpl	$1, %ebp
               	ja	0x43167c <mi_free_generic+0x19c>
               	testl	%r14d, %r14d
               	je	0x43167c <mi_free_generic+0x19c>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r15, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431665 <mi_free_generic+0x185>
               	xorl	%edx, %edx
               	divq	%r14
               	jmp	0x43166a <mi_free_generic+0x18a>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	%r14, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%r14, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r14
               	jmp	0x431584 <mi_free_generic+0xa4>
               	nopw	%cs:(%rax,%rax)

<_mi_free_block_mt>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	movq	%rdi, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	cmpl	$3, 112(%r15)
               	jne	0x431757 <_mi_free_block_mt+0xc7>
               	callq	0x42ba30 <mi_thread_init>
               	movq	$-80, %rax
               	movq	%fs:(%rax), %rcx
               	movq	2848(%rcx), %rdx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, 104(%r15)
               	jne	0x4317c1 <_mi_free_block_mt+0x131>
               	movq	8(%r14), %rax
               	movq	%rax, (%rbx)
               	movq	%rbx, 8(%r14)
               	addl	$-1, 16(%r14)
               	andb	$-2, 7(%r14)
               	movq	(%rcx), %rcx
               	movq	72(%r15), %rsi
               	movq	144(%rcx), %rdx
               	leaq	210689(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%bl
               	leaq	211252(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%bl, %al
               	testq	%rsi, %rsi
               	js	0x4317c7 <_mi_free_block_mt+0x137>
               	testb	%al, %al
               	je	0x431805 <_mi_free_block_mt+0x175>
               	movl	$1, %edi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	leaq	1(%rdi), %rbx
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rdi, %rax
               	jg	0x43174d <_mi_free_block_mt+0xbd>
               	lock
               	cmpxchgq	%rbx, 16(%rdx)
               	jne	0x431740 <_mi_free_block_mt+0xb0>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x43181f <_mi_free_block_mt+0x18f>
               	movq	32(%r14), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	movq	%rax, %rdx
               	andq	$3, %rdx
               	je	0x431780 <_mi_free_block_mt+0xf0>
               	movq	%rcx, (%rbx)
               	orq	%rbx, %rdx
               	lock
               	cmpxchgq	%rdx, 32(%r14)
               	jne	0x431760 <_mi_free_block_mt+0xd0>
               	jmp	0x4317c1 <_mi_free_block_mt+0x131>
               	orq	$1, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x431760 <_mi_free_block_mt+0xd0>
               	movq	40(%r14), %rcx
               	testq	%rcx, %rcx
               	je	0x4317aa <_mi_free_block_mt+0x11a>
               	movq	2840(%rcx), %rax
               	movq	%rax, (%rbx)
               	lock
               	cmpxchgq	%rbx, 2840(%rcx)
               	jne	0x43179c <_mi_free_block_mt+0x10c>
               	movq	32(%r14), %rax
               	movq	%rax, %rcx
               	andq	$-4, %rcx
               	orq	$2, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r14)
               	jne	0x4317ae <_mi_free_block_mt+0x11e>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	testb	%al, %al
               	je	0x43185e <_mi_free_block_mt+0x1ce>
               	movq	$-1, %rdi
               	lock
               	xaddq	%rdi, 24(%rdx)
               	addq	$-1, %rdi
               	movq	16(%rdx), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	cmpq	%rdi, %rax
               	jge	0x4317fd <_mi_free_block_mt+0x16d>
               	lock
               	cmpxchgq	%rdi, 16(%rdx)
               	jne	0x4317f0 <_mi_free_block_mt+0x160>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x431879 <_mi_free_block_mt+0x1e9>
               	movq	24(%rdx), %rdi
               	leaq	1(%rdi), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rdi
               	jl	0x43181b <_mi_free_block_mt+0x18b>
               	movq	%rax, 16(%rdx)
               	addq	$1, (%rdx)
               	movl	$1, %eax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x431836 <_mi_free_block_mt+0x1a6>
               	movq	%rax, 96(%rcx)
               	addq	104(%rcx), %rsi
               	leaq	32(%rcx), %rdx
               	movq	%rsi, 104(%rcx)
               	cmpq	112(%rcx), %rsi
               	jbe	0x43184c <_mi_free_block_mt+0x1bc>
               	movq	%rsi, 112(%rcx)
               	movq	%r14, %rdi
               	movl	$1, %esi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42f1b0 <_mi_segment_page_free>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x431874 <_mi_free_block_mt+0x1e4>
               	movq	%rax, 16(%rdx)
               	addq	$1, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%rcx), %rax
               	movq	%rax, 88(%rcx)
               	cmpq	96(%rcx), %rax
               	jbe	0x431836 <_mi_free_block_mt+0x1a6>
               	jmp	0x431832 <_mi_free_block_mt+0x1a2>

<mi_out_buf_stderr>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	198445(%rip), %rax      # 0x461fc8 <write+0x461fc8>
               	movq	(%rax), %rsi
               	callq	0x4137f0 <fputs@plt>
               	testq	%rbx, %rbx
               	je	0x4318d9 <mi_out_buf_stderr+0x49>
               	movq	211497(%rip), %rax      # 0x4652d8 <out_len>
               	cmpq	$32767, %rax            # imm = 0x7FFF
               	ja	0x4318d9 <mi_out_buf_stderr+0x49>
               	movq	%rbx, %rdi
               	callq	0x413710 <strlen@plt>
               	testq	%rax, %rax
               	je	0x4318d9 <mi_out_buf_stderr+0x49>
               	movq	%rax, %rcx
               	lock
               	xaddq	%rcx, 211464(%rip)      # 0x4652d8 <out_len>
               	cmpq	$32767, %rcx            # imm = 0x7FFF
               	jbe	0x4318db <mi_out_buf_stderr+0x4b>
               	popq	%rbx
               	retq
               	leaq	(%rcx,%rax), %rsi
               	movl	$32767, %edx            # imm = 0x7FFF
               	subq	%rcx, %rdx
               	cmpq	$32767, %rsi            # imm = 0x7FFF
               	cmovbeq	%rax, %rdx
               	leaq	211431(%rip), %rdi      # 0x4652e0 <out_buf>
               	addq	%rcx, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	jmp	0x413720 <memcpy@plt>
               	nopw	%cs:(%rax,%rax)

<mi_buffered_out>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x431a63 <mi_buffered_out+0x153>
               	movq	%rsi, %rbx
               	testq	%rsi, %rsi
               	je	0x431a63 <mi_buffered_out+0x153>
               	movq	%rdi, %r14
               	movb	(%rdi), %r12b
               	testb	%r12b, %r12b
               	je	0x431a63 <mi_buffered_out+0x153>
               	addq	$1, %r14
               	movq	$-56, %r15
               	movq	198279(%rip), %r13      # 0x461fd8 <write+0x461fd8>
               	movq	198256(%rip), %rbp      # 0x461fc8 <write+0x461fc8>
               	jmp	0x431979 <mi_buffered_out+0x69>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	movq	$0, 24(%rbx)
               	movzbl	(%r14), %r12d
               	addq	$1, %r14
               	testb	%r12b, %r12b
               	je	0x431a63 <mi_buffered_out+0x153>
               	movq	24(%rbx), %rax
               	cmpq	32(%rbx), %rax
               	jb	0x4319e9 <mi_buffered_out+0xd9>
               	movq	16(%rbx), %rcx
               	movb	$0, (%rcx,%rax)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x4319b0 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%r13)
               	je	0x4319b0 <mi_buffered_out+0xa0>
               	cmpq	%rax, (%rbp)
               	je	0x4319b0 <mi_buffered_out+0xa0>
               	movq	8(%rbx), %rsi
               	callq	*%rax
               	jmp	0x4319df <mi_buffered_out+0xcf>
               	nop
               	cmpb	$0, %fs:(%r15)
               	jne	0x4319df <mi_buffered_out+0xcf>
               	movb	$1, %fs:(%r15)
               	movq	211205(%rip), %rsi      # 0x4652c8 <mi_out_arg>
               	movq	211206(%rip), %rax      # 0x4652d0 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19460(%rip), %rcx      # 0x42cdd0 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	movq	$0, 24(%rbx)
               	xorl	%eax, %eax
               	movq	16(%rbx), %rcx
               	leaq	1(%rax), %rdx
               	movq	%rdx, 24(%rbx)
               	movb	%r12b, (%rcx,%rax)
               	cmpb	$10, %r12b
               	jne	0x431968 <mi_buffered_out+0x58>
               	movq	16(%rbx), %rax
               	movq	24(%rbx), %rcx
               	movb	$0, (%rax,%rcx)
               	movq	(%rbx), %rax
               	movq	16(%rbx), %rdi
               	testq	%rax, %rax
               	je	0x431a2b <mi_buffered_out+0x11b>
               	cmpq	%rax, (%r13)
               	je	0x431a2b <mi_buffered_out+0x11b>
               	cmpq	%rax, (%rbp)
               	jne	0x43195a <mi_buffered_out+0x4a>
               	cmpb	$0, %fs:(%r15)
               	jne	0x431960 <mi_buffered_out+0x50>
               	movb	$1, %fs:(%r15)
               	movq	211078(%rip), %rsi      # 0x4652c8 <mi_out_arg>
               	movq	211079(%rip), %rax      # 0x4652d0 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19587(%rip), %rcx      # 0x42cdd0 <mi_out_buf>
               	cmoveq	%rcx, %rax
               	callq	*%rax
               	movb	$0, %fs:(%r15)
               	jmp	0x431960 <mi_buffered_out+0x50>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_fprintf>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$728, %rsp              # imm = 0x2D8
               	movq	%rsi, %r14
               	testb	%al, %al
               	je	0x431ac8 <_mi_fprintf+0x48>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	752(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rdx, %rdx
               	je	0x431b5a <_mi_fprintf+0xda>
               	movq	$-56, %rbx
               	cmpb	$0, %fs:(%rbx)
               	jne	0x431b5a <_mi_fprintf+0xda>
               	movb	$1, %fs:(%rbx)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$511, %esi              # imm = 0x1FF
               	callq	0x4138b0 <vsnprintf@plt>
               	movb	$0, %fs:(%rbx)
               	movq	197798(%rip), %rcx      # 0x461fd8 <write+0x461fd8>
               	leaq	-553(%rip), %rax        # 0x431910 <mi_buffered_out>
               	cmpq	%rax, (%rcx)
               	je	0x431b65 <_mi_fprintf+0xe5>
               	movq	197763(%rip), %rcx      # 0x461fc8 <write+0x461fc8>
               	cmpq	%rax, (%rcx)
               	je	0x431b65 <_mi_fprintf+0xe5>
               	leaq	208(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x431910 <mi_buffered_out>
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	movb	$1, %fs:(%rbx)
               	movq	210776(%rip), %rsi      # 0x4652c8 <mi_out_arg>
               	movq	210777(%rip), %rax      # 0x4652d0 <mi_out_default>
               	testq	%rax, %rax
               	leaq	-19889(%rip), %rcx      # 0x42cdd0 <mi_out_buf>
               	cmovneq	%rax, %rcx
               	leaq	208(%rsp), %rdi
               	callq	*%rcx
               	movb	$0, %fs:(%rbx)
               	addq	$728, %rsp              # imm = 0x2D8
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<mi_stat_print>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rcx, %r15
               	movq	%rdx, %rbx
               	movq	%rsi, %rcx
               	movq	%rdi, %r14
               	leaq	81231(%rip), %rdx       # 0x44590d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	testq	%rbx, %rbx
               	jle	0x431c0a <mi_stat_print+0x6a>
               	movq	16(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431c51 <mi_stat_print+0xb1>
               	leaq	81147(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81147(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x431db0 <mi_stat_print+0x210>
               	movq	16(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	testq	%rbx, %rbx
               	js	0x431cb8 <mi_stat_print+0x118>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x431ce8 <mi_stat_print+0x148>
               	leaq	81074(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	81074(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x43222f <mi_stat_print+0x68f>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	81040(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	81035(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	81002(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431d51 <mi_stat_print+0x1b1>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431d57 <mi_stat_print+0x1b7>
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x432165 <mi_stat_print+0x5c5>
               	leaq	80923(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80961(%rip), %r8        # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x4324fd <mi_stat_print+0x95d>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	80890(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80885(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	80852(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4321ce <mi_stat_print+0x62e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4321d6 <mi_stat_print+0x636>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80729(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80726(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	80734(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431e02 <mi_stat_print+0x262>
               	leaq	80643(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80643(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x431ec1 <mi_stat_print+0x321>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80607(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80602(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80569(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431e62 <mi_stat_print+0x2c2>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431e68 <mi_stat_print+0x2c8>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80456(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80453(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	80461(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	8(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x431f14 <mi_stat_print+0x374>
               	leaq	80369(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80369(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x431fd3 <mi_stat_print+0x433>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80333(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80328(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80295(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x431f74 <mi_stat_print+0x3d4>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x431f7a <mi_stat_print+0x3da>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	80182(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	80179(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	80187(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x432026 <mi_stat_print+0x486>
               	leaq	80095(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	80095(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x4320e5 <mi_stat_print+0x545>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	80059(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	80054(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	80021(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x432086 <mi_stat_print+0x4e6>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x43208c <mi_stat_print+0x4ec>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79908(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79905(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	79913(%rip), %r12       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rbx
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	79838(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79838(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movl	$32, %esi
               	movq	%rbx, %rdi
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	movq	%rbx, %rcx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	79833(%rip), %rcx       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%r12, %rdx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	(%r14), %rax
               	cmpq	8(%r14), %rax
               	leaq	79813(%rip), %rax       # 0x44591a <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
               	leaq	79824(%rip), %rdx       # 0x44592c <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>
               	cmovgq	%rax, %rdx
               	jmp	0x432486 <mi_stat_print+0x8e6>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	79741(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79736(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	79703(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43249c <mi_stat_print+0x8fc>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4324a4 <mi_stat_print+0x904>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79578(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79575(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	79583(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x432281 <mi_stat_print+0x6e1>
               	leaq	79492(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79492(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x432340 <mi_stat_print+0x7a0>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	79456(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79451(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	79418(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x4322e1 <mi_stat_print+0x741>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x4322e7 <mi_stat_print+0x747>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79305(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79302(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	79310(%rip), %rbx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	79283(%rip), %rcx       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%r15, %rsi
               	movq	%rbx, %rdx
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	24(%r14), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x4323aa <mi_stat_print+0x80a>
               	leaq	79195(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	79195(%rip), %r8        # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x432469 <mi_stat_print+0x8c9>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	79159(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	79154(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	79121(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x43240a <mi_stat_print+0x86a>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x432410 <mi_stat_print+0x870>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	79008(%rip), %rax       # 0x4458ed <typeinfo name for kotlin::gc::GCSchedulerData+0x17b4>
               	movq	%rax, (%rsp)
               	leaq	79005(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	79013(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	79463(%rip), %rdx       # 0x445aed <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	retq
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78898(%rip), %rax       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78857(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	78865(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43254c <mi_stat_print+0x9ac>
               	leaq	78775(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78813(%rip), %r8        # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x43260f <mi_stat_print+0xa6f>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	78742(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	78737(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	78704(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4325ae <mi_stat_print+0xa0e>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4325b6 <mi_stat_print+0xa16>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78624(%rip), %rax       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78583(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	78591(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	8(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x43265f <mi_stat_print+0xabf>
               	leaq	78500(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78538(%rip), %r8        # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x432722 <mi_stat_print+0xb82>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	78467(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	78462(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	78429(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4326c1 <mi_stat_print+0xb21>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4326c9 <mi_stat_print+0xb29>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78349(%rip), %rax       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78308(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	78316(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	24(%r14), %rcx
               	movq	%rcx, %rax
               	negq	%rax
               	cmovlq	%rcx, %rax
               	cmpq	$1023, %rax             # imm = 0x3FF
               	jg	0x432772 <mi_stat_print+0xbd2>
               	leaq	78225(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	78263(%rip), %r8        # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x432835 <mi_stat_print+0xc95>
               	cmpq	$1048576, %rax          # imm = 0x100000
               	leaq	78192(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	78187(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rax
               	leaq	78154(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %esi       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rsi
               	shrq	$35, %rsi
               	movq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x4327d4 <mi_stat_print+0xc34>
               	movq	%rcx, %rax
               	cqto
               	idivq	%rsi
               	movq	%rax, %rsi
               	jmp	0x4327dc <mi_stat_print+0xc3c>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	78074(%rip), %rax       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	78033(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	78041(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r15, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	78048(%rip), %rdx       # 0x445932 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f9>
               	leaq	78322(%rip), %rcx       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	movq	%r15, %rsi
               	jmp	0x432140 <mi_stat_print+0x5a0>
               	nopw	%cs:(%rax,%rax)

<mi_stat_counter_print>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdx, %r14
               	movq	%rsi, %rcx
               	movq	%rdi, %rbx
               	leaq	77958(%rip), %rdx       # 0x44590d <typeinfo name for kotlin::gc::GCSchedulerData+0x17d4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	movq	(%rbx), %rax
               	movq	%rax, %rcx
               	negq	%rcx
               	cmovlq	%rax, %rcx
               	cmpq	$1023, %rcx             # imm = 0x3FF
               	jg	0x4328cd <mi_stat_counter_print+0x5d>
               	leaq	77880(%rip), %rdx       # 0x4458e6 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ad>
               	leaq	77918(%rip), %r8        # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	movl	%eax, %ecx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	jmp	0x43298c <mi_stat_counter_print+0x11c>
               	cmpq	$1048576, %rcx          # imm = 0x100000
               	leaq	77844(%rip), %rdx       # 0x4458ef <typeinfo name for kotlin::gc::GCSchedulerData+0x17b6>
               	leaq	77839(%rip), %rsi       # 0x4458f1 <typeinfo name for kotlin::gc::GCSchedulerData+0x17b8>
               	cmovlq	%rdx, %rsi
               	movl	$1024, %edx             # imm = 0x400
               	movl	$1048576, %edi          # imm = 0x100000
               	cmovlq	%rdx, %rdi
               	movq	%rdi, %rdx
               	shlq	$10, %rdx
               	cmpq	%rdx, %rcx
               	leaq	77806(%rip), %r9        # 0x4458f3 <typeinfo name for kotlin::gc::GCSchedulerData+0x17ba>
               	cmovlq	%rsi, %r9
               	cmovlq	%rdi, %rdx
               	movl	$3435973837, %ecx       # imm = 0xCCCCCCCD
               	imulq	%rdx, %rcx
               	shrq	$35, %rcx
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x43292d <mi_stat_counter_print+0xbd>
               	cqto
               	idivq	%rcx
               	movq	%rax, %rsi
               	jmp	0x432933 <mi_stat_counter_print+0xc3>
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%eax, %esi
               	movabsq	$7378697629483820647, %rcx # imm = 0x6666666666666667
               	movq	%rsi, %rax
               	imulq	%rcx
               	movq	%rdx, %rcx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	sarq	$2, %rcx
               	addq	%rax, %rcx
               	leaq	(%rcx,%rcx), %rax
               	leaq	(%rax,%rax,4), %rax
               	subq	%rax, %rsi
               	movq	%rsi, %r8
               	negq	%r8
               	cmovlq	%rsi, %r8
               	leaq	77731(%rip), %rax       # 0x445913 <typeinfo name for kotlin::gc::GCSchedulerData+0x17da>
               	movq	%rax, (%rsp)
               	leaq	77690(%rip), %rdx       # 0x4458f5 <typeinfo name for kotlin::gc::GCSchedulerData+0x17bc>
               	leaq	16(%rsp), %rdi
               	movl	$32, %esi
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	leaq	77698(%rip), %rdx       # 0x445915 <typeinfo name for kotlin::gc::GCSchedulerData+0x17dc>
               	leaq	16(%rsp), %rcx
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	leaq	78148(%rip), %rdx       # 0x445aed <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x431a80 <_mi_fprintf>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax,%rax)

<chacha_block>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movl	(%rdi), %r13d
               	movl	4(%rdi), %eax
               	movl	%eax, -24(%rsp)
               	movl	8(%rdi), %r12d
               	movl	12(%rdi), %r8d
               	movl	16(%rdi), %r9d
               	movl	20(%rdi), %eax
               	movl	24(%rdi), %ebx
               	movl	28(%rdi), %ebp
               	movl	32(%rdi), %ecx
               	movl	%ecx, -32(%rsp)
               	movl	36(%rdi), %ecx
               	movl	%ecx, -28(%rsp)
               	movl	40(%rdi), %ecx
               	movl	%ecx, -20(%rsp)
               	movl	44(%rdi), %r14d
               	movl	48(%rdi), %esi
               	movl	52(%rdi), %edx
               	movl	56(%rdi), %r15d
               	movq	%rdi, -8(%rsp)
               	movl	60(%rdi), %r11d
               	movq	$-2, -16(%rsp)
               	nop
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$16, %esi
               	movl	-32(%rsp), %ecx
               	addl	%esi, %ecx
               	xorl	%ecx, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r13d
               	xorl	%r13d, %esi
               	roll	$8, %esi
               	addl	%esi, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %r9d
               	roll	$7, %r9d
               	movl	-24(%rsp), %edi
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$16, %edx
               	movl	-28(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %eax
               	roll	$12, %eax
               	addl	%eax, %edi
               	xorl	%edi, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -28(%rsp)
               	xorl	%ecx, %eax
               	roll	$7, %eax
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$16, %r15d
               	movl	-20(%rsp), %r10d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %r12d
               	xorl	%r12d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %r10d
               	xorl	%r10d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r8d
               	xorl	%r8d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r14d
               	xorl	%r14d, %ebp
               	roll	$7, %ebp
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$16, %r11d
               	addl	%r11d, %r10d
               	xorl	%r10d, %eax
               	roll	$12, %eax
               	addl	%eax, %r13d
               	xorl	%r13d, %r11d
               	roll	$8, %r11d
               	addl	%r11d, %r10d
               	movl	%r10d, -20(%rsp)
               	xorl	%r10d, %eax
               	roll	$7, %eax
               	addl	%ebx, %edi
               	xorl	%edi, %esi
               	roll	$16, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$12, %ebx
               	addl	%ebx, %edi
               	movl	%edi, -24(%rsp)
               	xorl	%edi, %esi
               	roll	$8, %esi
               	addl	%esi, %r14d
               	xorl	%r14d, %ebx
               	roll	$7, %ebx
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$16, %edx
               	movl	-32(%rsp), %ecx
               	addl	%edx, %ecx
               	xorl	%ecx, %ebp
               	roll	$12, %ebp
               	addl	%ebp, %r12d
               	xorl	%r12d, %edx
               	roll	$8, %edx
               	addl	%edx, %ecx
               	movl	%ecx, -32(%rsp)
               	xorl	%ecx, %ebp
               	roll	$7, %ebp
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$16, %r15d
               	movl	-28(%rsp), %edi
               	addl	%r15d, %edi
               	xorl	%edi, %r9d
               	roll	$12, %r9d
               	addl	%r9d, %r8d
               	xorl	%r8d, %r15d
               	roll	$8, %r15d
               	addl	%r15d, %edi
               	movl	%edi, -28(%rsp)
               	xorl	%edi, %r9d
               	roll	$7, %r9d
               	movq	-16(%rsp), %r10
               	addq	$2, %r10
               	movq	%r10, -16(%rsp)
               	cmpq	$18, %r10
               	jb	0x432a20 <chacha_block+0x60>
               	movq	-8(%rsp), %rdi
               	addl	(%rdi), %r13d
               	movl	%r13d, 64(%rdi)
               	movd	%r9d, %xmm0
               	movd	%r8d, %xmm1
               	movd	%r12d, %xmm2
               	movd	-24(%rsp), %xmm3        # xmm3 = mem[0],zero,zero,zero
               	movd	-32(%rsp), %xmm4        # xmm4 = mem[0],zero,zero,zero
               	movd	%ebp, %xmm5
               	movd	%ebx, %xmm6
               	movd	%eax, %xmm7
               	punpckldq	%xmm0, %xmm1    # xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
               	punpckldq	%xmm2, %xmm3    # xmm3 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
               	punpcklqdq	%xmm1, %xmm3    # xmm3 = xmm3[0],xmm1[0]
               	movdqu	4(%rdi), %xmm0
               	paddd	%xmm3, %xmm0
               	movdqu	20(%rdi), %xmm1
               	movdqu	%xmm0, 68(%rdi)
               	punpckldq	%xmm4, %xmm5    # xmm5 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
               	punpckldq	%xmm6, %xmm7    # xmm7 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
               	punpcklqdq	%xmm5, %xmm7    # xmm7 = xmm7[0],xmm5[0]
               	paddd	%xmm1, %xmm7
               	movdqu	%xmm7, 84(%rdi)
               	movl	-28(%rsp), %r10d
               	addl	36(%rdi), %r10d
               	movl	%r10d, 100(%rdi)
               	movl	-20(%rsp), %eax
               	addl	40(%rdi), %eax
               	movl	%eax, 104(%rdi)
               	addl	44(%rdi), %r14d
               	movl	%r14d, 108(%rdi)
               	movl	48(%rdi), %ebp
               	addl	%ebp, %esi
               	movl	%esi, 112(%rdi)
               	movl	52(%rdi), %esi
               	addl	%esi, %edx
               	movl	%edx, 116(%rdi)
               	movl	56(%rdi), %eax
               	addl	%eax, %r15d
               	movl	%r15d, 120(%rdi)
               	addl	60(%rdi), %r11d
               	movl	%r11d, 124(%rdi)
               	movl	$16, 128(%rdi)
               	incl	%ebp
               	movl	%ebp, 48(%rdi)
               	jne	0x432c4a <chacha_block+0x28a>
               	incl	%esi
               	movl	%esi, 52(%rdi)
               	jne	0x432c4a <chacha_block+0x28a>
               	addl	$1, %eax
               	movl	%eax, 56(%rdi)
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<_mi_malloc_generic>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	leaq	187656(%rip), %r12      # 0x460980 <_mi_heap_empty>
               	movq	$-80, %r13
               	xorl	%r15d, %r15d
               	cmpq	%r12, %rbx
               	je	0x432d1e <_mi_malloc_generic+0xbe>
               	movq	(%rbx), %rax
               	movq	(%rax), %rsi
               	addq	$1, %rsi
               	movq	%rsi, (%rax)
               	cmpq	$0, 305128(%rip)        # 0x47d488 <deferred_free>
               	je	0x432cc5 <_mi_malloc_generic+0x65>
               	cmpb	$0, 8(%rax)
               	jne	0x432cc5 <_mi_malloc_generic+0x65>
               	movb	$1, 8(%rax)
               	movq	305109(%rip), %rax      # 0x47d488 <deferred_free>
               	movq	305110(%rip), %rdx      # 0x47d490 <deferred_arg>
               	xorl	%edi, %edi
               	callq	*%rax
               	movq	(%rbx), %rax
               	movb	$0, 8(%rax)
               	movq	2840(%rbx), %rax
               	nopl	(%rax)
               	testq	%rax, %rax
               	je	0x432d00 <_mi_malloc_generic+0xa0>
               	movq	%rax, %rdi
               	lock
               	cmpxchgq	%r15, 2840(%rbx)
               	jne	0x432cd0 <_mi_malloc_generic+0x70>
               	nopl	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x430510 <_mi_free_delayed_block>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x432cf0 <_mi_malloc_generic+0x90>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x432d90 <mi_find_page>
               	testq	%rax, %rax
               	je	0x432d33 <_mi_malloc_generic+0xd3>
               	movq	8(%rax), %rcx
               	testq	%rcx, %rcx
               	jne	0x432d6b <_mi_malloc_generic+0x10b>
               	jmp	0x432c82 <_mi_malloc_generic+0x22>
               	callq	0x42ba30 <mi_thread_init>
               	movq	%fs:(%r13), %rbx
               	cmpq	%r12, %rbx
               	jne	0x432c8b <_mi_malloc_generic+0x2b>
               	jmp	0x432d79 <_mi_malloc_generic+0x119>
               	movq	%rbx, %rdi
               	movl	$1, %esi
               	callq	0x42d6e0 <mi_heap_collect_ex>
               	movq	%rbx, %rdi
               	movq	%r14, %rsi
               	callq	0x432d90 <mi_find_page>
               	testq	%rax, %rax
               	jne	0x432d10 <_mi_malloc_generic+0xb0>
               	leaq	76801(%rip), %rsi       # 0x445958 <typeinfo name for kotlin::gc::GCSchedulerData+0x181f>
               	xorl	%r15d, %r15d
               	movl	$12, %edi
               	movq	%r14, %rdx
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	jmp	0x432d79 <_mi_malloc_generic+0x119>
               	addl	$1, 16(%rax)
               	movq	(%rcx), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, %r15
               	movq	%r15, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax,%rax)

<mi_find_page>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %r15
               	cmpq	$2097153, %rsi          # imm = 0x200001
               	jae	0x432ec7 <mi_find_page+0x137>
               	movl	$1, %eax
               	cmpq	$9, %rdx
               	jb	0x432de6 <mi_find_page+0x56>
               	leaq	7(%rdx), %rax
               	shrq	$3, %rax
               	cmpq	$64, %rdx
               	ja	0x432dcb <mi_find_page+0x3b>
               	addl	$1, %eax
               	andl	$254, %eax
               	jmp	0x432de6 <mi_find_page+0x56>
               	addq	$-1, %rax
               	bsrq	%rax, %rdx
               	movl	%edx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rdx,4), %eax
               	addl	$253, %eax
               	movzbl	%al, %eax
               	leaq	(%rax,%rax,2), %r14
               	movq	1040(%r15,%r14,8), %rbx
               	testq	%rbx, %rbx
               	je	0x432eaa <mi_find_page+0x11a>
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x432e59 <mi_find_page+0xc9>
               	movq	32(%rbx), %rax
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x432e10 <mi_find_page+0x80>
               	andq	$-4, %rcx
               	je	0x432e59 <mi_find_page+0xc9>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x432e42 <mi_find_page+0xb2>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x432e30 <mi_find_page+0xa0>
               	cmpl	%edx, %eax
               	jbe	0x432e7d <mi_find_page+0xed>
               	leaq	76017(%rip), %rsi       # 0x44573e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	movl	$14, %edi
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	movq	8(%rbx), %rcx
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x432e98 <mi_find_page+0x108>
               	testq	%rcx, %rcx
               	jne	0x432e9d <mi_find_page+0x10d>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	jmp	0x432e9d <mi_find_page+0x10d>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	movq	8(%rbx), %rcx
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x432e66 <mi_find_page+0xd6>
               	testq	%rcx, %rcx
               	je	0x432eaa <mi_find_page+0x11a>
               	andb	$1, 7(%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	leaq	(%r15,%r14,8), %rsi
               	addq	$1040, %rsi             # imm = 0x410
               	movq	%r15, %rdi
               	movl	$1, %edx
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x433870 <mi_page_queue_find_free_ex>
               	testq	%rdx, %rdx
               	js	0x433001 <mi_find_page+0x271>
               	cmpq	$33554432, %rdx         # imm = 0x2000000
               	movl	$1048576, %eax          # imm = 0x100000
               	movl	$4194304, %ecx          # imm = 0x400000
               	cmovbq	%rax, %rcx
               	cmpq	$8388608, %rdx          # imm = 0x800000
               	movl	$262144, %eax           # imm = 0x40000
               	cmovaeq	%rcx, %rax
               	movq	%rax, %rcx
               	notq	%rcx
               	cmpq	%rdx, %rcx
               	seta	%cl
               	testb	$1, %cl
               	je	0x432f17 <mi_find_page+0x187>
               	leaq	(%rdx,%rax), %rcx
               	addq	$-1, %rcx
               	negq	%rax
               	andq	%rcx, %rax
               	movq	%rax, %rdx
               	xorl	%ebx, %ebx
               	movq	%r15, %rdi
               	xorl	%esi, %esi
               	callq	0x4330a0 <mi_page_fresh_alloc>
               	testq	%rax, %rax
               	je	0x432ea1 <mi_find_page+0x111>
               	movq	%rax, %r14
               	movl	20(%rax), %esi
               	cmpq	$67108864, %rsi         # imm = 0x4000000
               	jae	0x43301b <mi_find_page+0x28b>
               	movq	$0, 40(%r14)
               	movq	(%r15), %rdi
               	cmpq	$67108865, %rsi         # imm = 0x4000001
               	jb	0x432f95 <mi_find_page+0x205>
               	addq	$528, %rdi              # imm = 0x210
               	callq	0x42ce40 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	736(%rax), %rcx
               	leaq	204432(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x432fd7 <mi_find_page+0x247>
               	leaq	204996(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x432fd7 <mi_find_page+0x247>
               	lock
               	addq	$1, 744(%rax)
               	lock
               	addq	$1, 736(%rax)
               	jmp	0x432ff9 <mi_find_page+0x269>
               	addq	$496, %rdi              # imm = 0x1F0
               	callq	0x42ce40 <_mi_stat_increase>
               	movq	(%r15), %rax
               	leaq	720(%rax), %rcx
               	leaq	204366(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rcx
               	jb	0x432fe9 <mi_find_page+0x259>
               	leaq	204930(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rcx
               	jae	0x432fe9 <mi_find_page+0x259>
               	lock
               	addq	$1, 728(%rax)
               	lock
               	addq	$1, 720(%rax)
               	jmp	0x432ff9 <mi_find_page+0x269>
               	addq	$1, 744(%rax)
               	addq	$1, 736(%rax)
               	jmp	0x432ff9 <mi_find_page+0x269>
               	addq	$1, 728(%rax)
               	addq	$1, 720(%rax)
               	movq	%r14, %rbx
               	jmp	0x432ea1 <mi_find_page+0x111>
               	leaq	76151(%rip), %rsi       # 0x44597f <typeinfo name for kotlin::gc::GCSchedulerData+0x1846>
               	xorl	%ebx, %ebx
               	movl	$75, %edi
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	jmp	0x432ea1 <mi_find_page+0x111>
               	movq	%r14, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x433032 <mi_find_page+0x2a2>
               	movq	72(%rax), %rdx
               	jmp	0x43303d <mi_find_page+0x2ad>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movzbl	(%r14), %ebx
               	testq	%rbx, %rbx
               	je	0x43304e <mi_find_page+0x2be>
               	movq	%rdx, %rsi
               	jmp	0x432f3f <mi_find_page+0x1af>
               	movq	80(%rax), %r8
               	movq	%rdx, %rcx
               	subq	%r8, %rcx
               	cmpl	$1, %edi
               	ja	0x433091 <mi_find_page+0x301>
               	testl	%esi, %esi
               	je	0x433091 <mi_find_page+0x301>
               	imulq	%rbx, %rdx
               	addq	%rdx, %rax
               	addq	%r8, %rax
               	movq	%rax, %rdx
               	shrq	$32, %rdx
               	je	0x43307b <mi_find_page+0x2eb>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x43307f <mi_find_page+0x2ef>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	jmp	0x432f3f <mi_find_page+0x1af>
               	nopl	(%rax)

<mi_page_fresh_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r13
               	movq	%rdi, %r12
               	movq	(%rdi), %r14
               	leaq	32(%r14), %rbx
               	leaq	160(%r14), %r9
               	cmpq	$16384, %rdx            # imm = 0x4000
               	movq	%rdx, 16(%rsp)
               	ja	0x433105 <mi_page_fresh_alloc+0x65>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	jne	0x433290 <mi_page_fresh_alloc+0x1f0>
               	xorl	%r15d, %r15d
               	movl	$16, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %r8
               	callq	0x434130 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x43329b <mi_page_fresh_alloc+0x1fb>
               	movq	(%rbx), %rdi
               	jmp	0x433290 <mi_page_fresh_alloc+0x1f0>
               	cmpq	$131072, %rdx           # imm = 0x20000
               	ja	0x433145 <mi_page_fresh_alloc+0xa5>
               	movq	48(%r14), %rdi
               	testq	%rdi, %rdi
               	jne	0x433290 <mi_page_fresh_alloc+0x1f0>
               	movl	$19, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$1, %edx
               	movq	%rbx, %r8
               	callq	0x434130 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x433205 <mi_page_fresh_alloc+0x165>
               	movq	48(%r14), %rdi
               	jmp	0x433290 <mi_page_fresh_alloc+0x1f0>
               	cmpq	$2097152, %rdx          # imm = 0x200000
               	ja	0x433177 <mi_page_fresh_alloc+0xd7>
               	movl	$22, %ecx
               	movq	%r12, %rdi
               	movq	%rdx, %rsi
               	movl	$2, %edx
               	movq	%rbx, %r8
               	callq	0x434130 <mi_segment_reclaim_or_alloc>
               	testq	%rax, %rax
               	je	0x433205 <mi_page_fresh_alloc+0x165>
               	movq	%rax, %rdi
               	jmp	0x433290 <mi_page_fresh_alloc+0x1f0>
               	xorl	%r15d, %r15d
               	movl	$22, %ecx
               	xorl	%edi, %edi
               	movq	%rdx, %rsi
               	movl	$3, %edx
               	movq	%rbx, %r8
               	callq	0x434760 <mi_segment_init>
               	testq	%rax, %rax
               	je	0x43329b <mi_page_fresh_alloc+0x1fb>
               	movq	%rax, %rdi
               	xorl	%eax, %eax
               	xchgq	%rax, 104(%rdi)
               	movq	72(%rdi), %r8
               	movq	144(%r14), %rdx
               	leaq	203851(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rdx
               	setae	%cl
               	leaq	204414(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rdx
               	setb	%al
               	andb	%cl, %al
               	testq	%r8, %r8
               	jle	0x43320d <mi_page_fresh_alloc+0x16d>
               	testb	%al, %al
               	je	0x433247 <mi_page_fresh_alloc+0x1a7>
               	movq	$-1, %rsi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	addq	$-1, %rsi
               	movq	16(%rdx), %rax
               	cmpq	%rsi, %rax
               	jge	0x4331fd <mi_page_fresh_alloc+0x15d>
               	lock
               	cmpxchgq	%rsi, 16(%rdx)
               	jne	0x4331f0 <mi_page_fresh_alloc+0x150>
               	lock
               	addq	$1, 8(%rdx)
               	jmp	0x433262 <mi_page_fresh_alloc+0x1c2>
               	xorl	%r15d, %r15d
               	jmp	0x43329b <mi_page_fresh_alloc+0x1fb>
               	testb	%al, %al
               	je	0x433520 <mi_page_fresh_alloc+0x480>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 24(%rdx)
               	leaq	1(%rsi), %rbp
               	movq	16(%rdx), %rax
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %rax
               	jg	0x43323d <mi_page_fresh_alloc+0x19d>
               	lock
               	cmpxchgq	%rbp, 16(%rdx)
               	jne	0x433230 <mi_page_fresh_alloc+0x190>
               	lock
               	addq	$1, (%rdx)
               	jmp	0x43353a <mi_page_fresh_alloc+0x49a>
               	movq	24(%rdx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rax
               	jle	0x43325d <mi_page_fresh_alloc+0x1bd>
               	movq	%rax, 16(%rdx)
               	addq	$1, 8(%rdx)
               	movq	$-1, %rax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	jbe	0x43327b <mi_page_fresh_alloc+0x1db>
               	movq	%rax, 96(%r14)
               	movq	104(%r14), %rax
               	subq	%r8, %rax
               	movq	%rax, 104(%r14)
               	cmpq	112(%r14), %rax
               	jbe	0x433290 <mi_page_fresh_alloc+0x1f0>
               	movq	%rax, 112(%r14)
               	movq	%rbx, %rsi
               	callq	0x4344f0 <mi_segment_find_free>
               	movq	%rax, %r15
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4333c2 <mi_page_fresh_alloc+0x322>
               	movq	%r12, 8(%rsp)
               	leaq	24(%rsp), %rsi
               	xorl	%edi, %edi
               	callq	0x413800 <clock_gettime@plt>
               	movq	72(%r14), %r12
               	testq	%r12, %r12
               	je	0x4333a5 <mi_page_fresh_alloc+0x305>
               	movq	24(%rsp), %rcx
               	movq	32(%rsp), %rax
               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
               	imulq	%rdx
               	movq	%rdx, %rax
               	shrq	$63, %rax
               	shrq	$18, %rdx
               	addl	%eax, %edx
               	imull	$1000, %ecx, %ebx       # imm = 0x3E8
               	addl	%edx, %ebx
               	jmp	0x433319 <mi_page_fresh_alloc+0x279>
               	nopl	(%rax)
               	movl	$0, 16(%rbp)
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 48(%rbp)
               	testq	%r12, %r12
               	je	0x4333a5 <mi_page_fresh_alloc+0x305>
               	movq	%r12, %rbp
               	cmpl	%ebx, 16(%r12)
               	jg	0x4333b1 <mi_page_fresh_alloc+0x311>
               	movq	56(%rbp), %r12
               	movl	$10, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x433300 <mi_page_fresh_alloc+0x260>
               	movq	%rbp, %rdx
               	andq	$-4194304, %rdx         # imm = 0xFFC00000
               	cmpb	$0, 8(%rdx)
               	jne	0x433300 <mi_page_fresh_alloc+0x260>
               	movzbl	1(%rbp), %eax
               	movl	%eax, %ecx
               	andb	$7, %cl
               	cmpb	$4, %cl
               	jne	0x433300 <mi_page_fresh_alloc+0x260>
               	cmpl	$3, 112(%rdx)
               	jne	0x433364 <mi_page_fresh_alloc+0x2c4>
               	movq	72(%rdx), %rsi
               	jmp	0x433370 <mi_page_fresh_alloc+0x2d0>
               	movzbl	96(%rdx), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbp), %ecx
               	movq	%rsi, %rdi
               	imulq	%rcx, %rdi
               	addq	%rdx, %rdi
               	testq	%rcx, %rcx
               	jne	0x43338d <mi_page_fresh_alloc+0x2ed>
               	movq	80(%rdx), %rcx
               	addq	%rcx, %rdi
               	subq	%rcx, %rsi
               	orb	$2, %al
               	movb	%al, 1(%rbp)
               	testq	%rsi, %rsi
               	je	0x433300 <mi_page_fresh_alloc+0x260>
               	callq	0x42efe0 <_mi_os_reset>
               	jmp	0x433300 <mi_page_fresh_alloc+0x260>
               	pxor	%xmm0, %xmm0
               	movdqu	%xmm0, 64(%r14)
               	jmp	0x4333bd <mi_page_fresh_alloc+0x31d>
               	movq	%rbp, 72(%r14)
               	movq	$0, 48(%rbp)
               	movq	8(%rsp), %r12
               	testq	%r15, %r15
               	je	0x433857 <mi_page_fresh_alloc+0x7b7>
               	movq	%r15, %rdi
               	andq	$-4194304, %rdi         # imm = 0xFFC00000
               	movq	%r12, 40(%r15)
               	movl	112(%rdi), %edx
               	cmpl	$3, %edx
               	jne	0x4333f5 <mi_page_fresh_alloc+0x355>
               	movq	72(%rdi), %rax
               	movq	16(%rsp), %rbx
               	movzbl	(%r15), %r9d
               	testq	%r9, %r9
               	jne	0x433458 <mi_page_fresh_alloc+0x3b8>
               	jmp	0x43340e <mi_page_fresh_alloc+0x36e>
               	movb	96(%rdi), %cl
               	movl	$1, %eax
               	shlq	%cl, %rax
               	movq	16(%rsp), %rbx
               	movzbl	(%r15), %r9d
               	testq	%r9, %r9
               	jne	0x433458 <mi_page_fresh_alloc+0x3b8>
               	movq	80(%rdi), %rsi
               	movq	%rax, %rcx
               	subq	%rsi, %rcx
               	cmpl	$1, %edx
               	ja	0x433455 <mi_page_fresh_alloc+0x3b5>
               	testq	%rbx, %rbx
               	je	0x433455 <mi_page_fresh_alloc+0x3b5>
               	imulq	%r9, %rax
               	addq	%rdi, %rax
               	addq	%rsi, %rax
               	movq	%rax, %rdx
               	orq	%rbx, %rdx
               	shrq	$32, %rdx
               	je	0x43343f <mi_page_fresh_alloc+0x39f>
               	xorl	%edx, %edx
               	divq	%rbx
               	jmp	0x433443 <mi_page_fresh_alloc+0x3a3>
               	xorl	%edx, %edx
               	divl	%ebx
               	movq	%rbx, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbx, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rax
               	cmpq	$67108864, %rbx         # imm = 0x4000000
               	movl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbx, %rbp
               	movl	%ebp, 20(%r15)
               	movq	%rax, %rcx
               	orq	%rbx, %rcx
               	shrq	$32, %rcx
               	je	0x433482 <mi_page_fresh_alloc+0x3e2>
               	xorl	%edx, %edx
               	divq	%rbx
               	movq	%rax, %r8
               	jmp	0x433489 <mi_page_fresh_alloc+0x3e9>
               	xorl	%edx, %edx
               	divl	%ebx
               	movl	%eax, %r8d
               	movw	%r8w, 4(%r15)
               	movb	1(%r15), %al
               	movb	7(%r15), %cl
               	shrb	$3, %al
               	andb	$1, %al
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 7(%r15)
               	cmpq	$0, 8(%r15)
               	jne	0x4335c2 <mi_page_fresh_alloc+0x522>
               	movzwl	2(%r15), %r10d
               	cmpw	%r8w, %r10w
               	jae	0x4335c2 <mi_page_fresh_alloc+0x522>
               	movl	112(%rdi), %eax
               	cmpl	$3, %eax
               	jne	0x4334d7 <mi_page_fresh_alloc+0x437>
               	movq	72(%rdi), %rsi
               	testb	%r9b, %r9b
               	je	0x4334e7 <mi_page_fresh_alloc+0x447>
               	movq	%r12, %rbx
               	jmp	0x433571 <mi_page_fresh_alloc+0x4d1>
               	movb	96(%rdi), %cl
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	testb	%r9b, %r9b
               	jne	0x4334cf <mi_page_fresh_alloc+0x42f>
               	movq	80(%rdi), %rdx
               	movq	%rsi, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x43351b <mi_page_fresh_alloc+0x47b>
               	testq	%rbp, %rbp
               	je	0x43351b <mi_page_fresh_alloc+0x47b>
               	imulq	%r9, %rsi
               	addq	%rsi, %rdi
               	addq	%rdx, %rdi
               	movq	%rdi, %rax
               	movq	%r12, %rbx
               	shrq	$32, %rax
               	je	0x433556 <mi_page_fresh_alloc+0x4b6>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rbp
               	jmp	0x43355c <mi_page_fresh_alloc+0x4bc>
               	movq	%r12, %rbx
               	jmp	0x43356e <mi_page_fresh_alloc+0x4ce>
               	movq	24(%rdx), %rcx
               	leaq	1(%rcx), %rax
               	movq	%rax, 24(%rdx)
               	cmpq	16(%rdx), %rcx
               	jl	0x433536 <mi_page_fresh_alloc+0x496>
               	movq	%rax, 16(%rdx)
               	addq	$1, (%rdx)
               	movl	$1, %eax
               	addq	88(%r14), %rax
               	movq	%rax, 88(%r14)
               	cmpq	96(%r14), %rax
               	ja	0x433277 <mi_page_fresh_alloc+0x1d7>
               	jmp	0x43327b <mi_page_fresh_alloc+0x1db>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%ebp
               	movq	%rbp, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	cmpl	$67108864, %ebp         # imm = 0x4000000
               	cmovbq	%rbp, %rsi
               	movzwl	%r8w, %r12d
               	subq	%r10, %r12
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x43359c <mi_page_fresh_alloc+0x4fc>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %r12
               	cmovaq	%rax, %r12
               	movq	%r15, %rdi
               	movq	%r12, %rdx
               	callq	0x434060 <mi_page_free_list_extend>
               	addw	%r12w, 2(%r15)
               	testb	$8, 1(%r15)
               	movq	%rbx, %r12
               	jne	0x4335c2 <mi_page_fresh_alloc+0x522>
               	andb	$-2, 7(%r15)
               	movq	(%r12), %rdx
               	leaq	208(%rdx), %rcx
               	leaq	202796(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	jb	0x43361f <mi_page_fresh_alloc+0x57f>
               	leaq	203360(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	jae	0x43361f <mi_page_fresh_alloc+0x57f>
               	movl	$1, %esi
               	lock
               	xaddq	%rsi, 232(%rdx)
               	leaq	1(%rsi), %rdi
               	movq	224(%rdx), %rax
               	nop
               	cmpq	%rsi, %rax
               	jg	0x433610 <mi_page_fresh_alloc+0x570>
               	lock
               	cmpxchgq	%rdi, 224(%rdx)
               	jne	0x433600 <mi_page_fresh_alloc+0x560>
               	lock
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	jne	0x43364e <mi_page_fresh_alloc+0x5ae>
               	jmp	0x433857 <mi_page_fresh_alloc+0x7b7>
               	movq	232(%rdx), %rsi
               	leaq	1(%rsi), %rax
               	movq	%rax, 232(%rdx)
               	cmpq	224(%rdx), %rsi
               	jl	0x433641 <mi_page_fresh_alloc+0x5a1>
               	movq	%rax, 224(%rdx)
               	addq	$1, (%rcx)
               	testq	%r13, %r13
               	je	0x433857 <mi_page_fresh_alloc+0x7b7>
               	cmpq	$2097168, 16(%r13)      # imm = 0x200010
               	sete	%al
               	movb	6(%r15), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%r15)
               	movq	(%r13), %rax
               	movq	%rax, 48(%r15)
               	movq	$0, 56(%r15)
               	leaq	56(%rax), %rcx
               	leaq	8(%r13), %rdx
               	testq	%rax, %rax
               	cmoveq	%rdx, %rcx
               	movq	%r15, (%rcx)
               	movq	%r15, (%r13)
               	movq	16(%r13), %rcx
               	cmpq	$1024, %rcx             # imm = 0x400
               	ja	0x43384e <mi_page_fresh_alloc+0x7ae>
               	leaq	7(%rcx), %rax
               	shrq	$3, %rax
               	cmpq	%r15, 8(%r12,%rax,8)
               	je	0x43384e <mi_page_fresh_alloc+0x7ae>
               	cmpq	$9, %rcx
               	jae	0x4336bd <mi_page_fresh_alloc+0x61d>
               	xorl	%ecx, %ecx
               	jmp	0x433771 <mi_page_fresh_alloc+0x6d1>
               	cmpq	$64, %rcx
               	ja	0x4336cb <mi_page_fresh_alloc+0x62b>
               	leal	1(%rax), %edx
               	andb	$-2, %dl
               	jmp	0x4336e4 <mi_page_fresh_alloc+0x644>
               	leaq	-1(%rax), %rdx
               	bsrq	%rdx, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdx
               	andl	$3, %edx
               	leal	(%rdx,%rsi,4), %edx
               	addb	$-3, %dl
               	leaq	1040(%r12), %rsi
               	addq	$-24, %r13
               	movq	16(%r13), %rdi
               	addq	$7, %rdi
               	movq	%rdi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rdi
               	jb	0x433750 <mi_page_fresh_alloc+0x6b0>
               	cmpq	$71, %rdi
               	ja	0x433720 <mi_page_fresh_alloc+0x680>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x433750 <mi_page_fresh_alloc+0x6b0>
               	movb	$73, %cl
               	cmpq	$2097159, %rdi          # imm = 0x200007
               	ja	0x433750 <mi_page_fresh_alloc+0x6b0>
               	leaq	-1(%rbp), %rdi
               	bsrq	%rdi, %rbx
               	movl	%ebx, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rdi
               	andl	$3, %edi
               	leal	(%rdi,%rbx,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax,%rax)
               	cmpq	%rsi, %r13
               	jbe	0x43375d <mi_page_fresh_alloc+0x6bd>
               	addq	$-24, %r13
               	cmpb	%cl, %dl
               	je	0x4336f0 <mi_page_fresh_alloc+0x650>
               	leaq	1(%rbp), %rcx
               	cmpq	%rax, %rbp
               	cmovaeq	%rax, %rcx
               	cmpq	%rax, %rcx
               	ja	0x43384e <mi_page_fresh_alloc+0x7ae>
               	addq	$1, %rax
               	movq	%rax, %rdx
               	subq	%rcx, %rdx
               	cmpq	$4, %rdx
               	jb	0x433840 <mi_page_fresh_alloc+0x7a0>
               	movq	%rdx, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %ebp
               	andl	$3, %ebp
               	cmpq	$12, %rsi
               	jae	0x4337b4 <mi_page_fresh_alloc+0x714>
               	xorl	%ebx, %ebx
               	jmp	0x433809 <mi_page_fresh_alloc+0x769>
               	leaq	(%r12,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebx, %ebx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movdqu	%xmm0, -112(%rsi,%rbx,8)
               	movdqu	%xmm0, -96(%rsi,%rbx,8)
               	movdqu	%xmm0, -80(%rsi,%rbx,8)
               	movdqu	%xmm0, -64(%rsi,%rbx,8)
               	movdqu	%xmm0, -48(%rsi,%rbx,8)
               	movdqu	%xmm0, -32(%rsi,%rbx,8)
               	movdqu	%xmm0, -16(%rsi,%rbx,8)
               	movdqu	%xmm0, (%rsi,%rbx,8)
               	addq	$16, %rbx
               	addq	$4, %rdi
               	jne	0x4337d0 <mi_page_fresh_alloc+0x730>
               	testq	%rbp, %rbp
               	je	0x433832 <mi_page_fresh_alloc+0x792>
               	addq	%rcx, %rbx
               	leaq	(%r12,%rbx,8), %rsi
               	addq	$24, %rsi
               	negq	%rbp
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rbp
               	jne	0x433820 <mi_page_fresh_alloc+0x780>
               	cmpq	%r8, %rdx
               	je	0x43384e <mi_page_fresh_alloc+0x7ae>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r12,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %rax
               	jne	0x433840 <mi_page_fresh_alloc+0x7a0>
               	addq	$1, 3016(%r12)
               	movq	%r15, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopl	(%rax)

<mi_page_queue_find_free_ex>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%rsi, %r14
               	movq	%rdi, %r13
               	xorb	$1, %dl
               	leaq	-24(%rsi), %rax
               	movq	%rax, 8(%rsp)
               	leaq	1040(%rdi), %rax
               	movq	%rax, 16(%rsp)
               	movl	%edx, 4(%rsp)
               	movq	(%r14), %r12
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	testq	%r12, %r12
               	je	0x433e90 <mi_page_queue_find_free_ex+0x620>
               	movq	%r12, %rbx
               	movq	48(%r12), %r12
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x433920 <mi_page_queue_find_free_ex+0xb0>
               	movq	32(%rbx), %rax
               	nop
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x4338d0 <mi_page_queue_find_free_ex+0x60>
               	andq	$-4, %rcx
               	je	0x433920 <mi_page_queue_find_free_ex+0xb0>
               	movzwl	2(%rbx), %edx
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rsi
               	addl	$1, %eax
               	cmpl	%edx, %eax
               	ja	0x433902 <mi_page_queue_find_free_ex+0x92>
               	movq	(%rsi), %rdi
               	testq	%rdi, %rdi
               	jne	0x4338f0 <mi_page_queue_find_free_ex+0x80>
               	cmpl	%edx, %eax
               	jbe	0x4339ef <mi_page_queue_find_free_ex+0x17f>
               	movl	$14, %edi
               	leaq	73256(%rip), %rsi       # 0x44573e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	je	0x433940 <mi_page_queue_find_free_ex+0xd0>
               	cmpq	$0, 8(%rbx)
               	jne	0x433940 <mi_page_queue_find_free_ex+0xd0>
               	movq	%rax, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	cmpq	$0, 8(%rbx)
               	jne	0x43403c <mi_page_queue_find_free_ex+0x7cc>
               	movzwl	2(%rbx), %edi
               	movzwl	4(%rbx), %ebp
               	cmpw	%bp, %di
               	jb	0x433f76 <mi_page_queue_find_free_ex+0x706>
               	testb	$1, 6(%rbx)
               	jne	0x4338b0 <mi_page_queue_find_free_ex+0x40>
               	movq	40(%rbx), %rdx
               	movq	40(%rbx), %r9
               	movq	56(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43397f <mi_page_queue_find_free_ex+0x10f>
               	movq	48(%rbx), %rcx
               	movq	%rcx, 48(%rax)
               	movq	48(%rbx), %r15
               	testq	%r15, %r15
               	je	0x43398c <mi_page_queue_find_free_ex+0x11c>
               	movq	%rax, 56(%r15)
               	cmpq	%rbx, 8(%r14)
               	je	0x43399d <mi_page_queue_find_free_ex+0x12d>
               	cmpq	%rbx, (%r14)
               	jne	0x433bb0 <mi_page_queue_find_free_ex+0x340>
               	jmp	0x4339ae <mi_page_queue_find_free_ex+0x13e>
               	movq	56(%rbx), %rax
               	movq	%rax, 8(%r14)
               	cmpq	%rbx, (%r14)
               	jne	0x433bb0 <mi_page_queue_find_free_ex+0x340>
               	movq	%r15, (%r14)
               	movq	16(%r14), %rax
               	cmpq	$1024, %rax             # imm = 0x400
               	ja	0x433bb0 <mi_page_queue_find_free_ex+0x340>
               	testq	%r15, %r15
               	leaq	76277(%rip), %rcx       # 0x4463c0 <_mi_page_empty>
               	cmoveq	%rcx, %r15
               	leaq	7(%rax), %r10
               	shrq	$3, %r10
               	cmpq	%r15, 8(%r9,%r10,8)
               	je	0x433bb0 <mi_page_queue_find_free_ex+0x340>
               	cmpq	$9, %rax
               	jae	0x433a0f <mi_page_queue_find_free_ex+0x19f>
               	xorl	%ecx, %ecx
               	jmp	0x433ad2 <mi_page_queue_find_free_ex+0x262>
               	movq	24(%rbx), %rdx
               	movq	%rdx, (%rsi)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	movq	24(%rbx), %rax
               	testq	%rax, %rax
               	jne	0x433929 <mi_page_queue_find_free_ex+0xb9>
               	jmp	0x433940 <mi_page_queue_find_free_ex+0xd0>
               	cmpq	$64, %rax
               	ja	0x433a1f <mi_page_queue_find_free_ex+0x1af>
               	leal	1(%r10), %r8d
               	andb	$-2, %r8b
               	jmp	0x433a3a <mi_page_queue_find_free_ex+0x1ca>
               	leaq	-1(%r10), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %r8d
               	addb	$-3, %r8b
               	leaq	1040(%r9), %rax
               	movq	8(%rsp), %rdi
               	nopw	%cs:(%rax,%rax)
               	movq	16(%rdi), %rsi
               	addq	$7, %rsi
               	movq	%rsi, %rbp
               	shrq	$3, %rbp
               	movb	$1, %cl
               	cmpq	$16, %rsi
               	jb	0x433ab0 <mi_page_queue_find_free_ex+0x240>
               	cmpq	$71, %rsi
               	ja	0x433a80 <mi_page_queue_find_free_ex+0x210>
               	leal	1(%rbp), %ecx
               	andb	$-2, %cl
               	jmp	0x433ab0 <mi_page_queue_find_free_ex+0x240>
               	movb	$73, %cl
               	cmpq	$2097159, %rsi          # imm = 0x200007
               	ja	0x433ab0 <mi_page_queue_find_free_ex+0x240>
               	leaq	-1(%rbp), %rsi
               	bsrq	%rsi, %r11
               	movl	%r11d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rsi
               	andl	$3, %esi
               	leal	(%rsi,%r11,4), %ecx
               	addb	$-3, %cl
               	nopw	(%rax,%rax)
               	cmpq	%rax, %rdi
               	jbe	0x433abe <mi_page_queue_find_free_ex+0x24e>
               	addq	$-24, %rdi
               	cmpb	%cl, %r8b
               	je	0x433a50 <mi_page_queue_find_free_ex+0x1e0>
               	leaq	1(%rbp), %rcx
               	cmpq	%r10, %rbp
               	cmovaeq	%r10, %rcx
               	cmpq	%r10, %rcx
               	ja	0x433bb0 <mi_page_queue_find_free_ex+0x340>
               	addq	$1, %r10
               	movq	%r10, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x433ba0 <mi_page_queue_find_free_ex+0x330>
               	movq	%r11, %r8
               	andq	$-4, %r8
               	movq	%r15, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r8), %rsi
               	movq	%rsi, %rdi
               	shrq	$2, %rdi
               	addq	$1, %rdi
               	movl	%edi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rsi
               	jae	0x433b15 <mi_page_queue_find_free_ex+0x2a5>
               	xorl	%ebp, %ebp
               	jmp	0x433b69 <mi_page_queue_find_free_ex+0x2f9>
               	leaq	(%r9,%rcx,8), %rsi
               	addq	$120, %rsi
               	andq	$-4, %rdi
               	negq	%rdi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rsi,%rbp,8)
               	movdqu	%xmm0, -96(%rsi,%rbp,8)
               	movdqu	%xmm0, -80(%rsi,%rbp,8)
               	movdqu	%xmm0, -64(%rsi,%rbp,8)
               	movdqu	%xmm0, -48(%rsi,%rbp,8)
               	movdqu	%xmm0, -32(%rsi,%rbp,8)
               	movdqu	%xmm0, -16(%rsi,%rbp,8)
               	movdqu	%xmm0, (%rsi,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rdi
               	jne	0x433b30 <mi_page_queue_find_free_ex+0x2c0>
               	testq	%rax, %rax
               	je	0x433b92 <mi_page_queue_find_free_ex+0x322>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rsi
               	addq	$24, %rsi
               	negq	%rax
               	movdqu	%xmm0, -16(%rsi)
               	movdqu	%xmm0, (%rsi)
               	addq	$32, %rsi
               	incq	%rax
               	jne	0x433b80 <mi_page_queue_find_free_ex+0x310>
               	cmpq	%r8, %r11
               	je	0x433bb0 <mi_page_queue_find_free_ex+0x340>
               	addq	%r8, %rcx
               	nop
               	movq	%r15, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r10
               	jne	0x433ba0 <mi_page_queue_find_free_ex+0x330>
               	nop
               	movq	2824(%rdx), %rax
               	movq	%rax, 56(%rbx)
               	movq	$0, 48(%rbx)
               	testq	%rax, %rax
               	je	0x433bdf <mi_page_queue_find_free_ex+0x36f>
               	movq	%rbx, 48(%rax)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	jmp	0x433dc0 <mi_page_queue_find_free_ex+0x550>
               	movq	%rbx, 2816(%rdx)
               	movq	%rbx, 2824(%rdx)
               	movq	2832(%rdx), %r8
               	cmpq	$1024, %r8              # imm = 0x400
               	ja	0x433dc0 <mi_page_queue_find_free_ex+0x550>
               	leaq	7(%r8), %r15
               	shrq	$3, %r15
               	cmpq	%rbx, 8(%r9,%r15,8)
               	je	0x433dc0 <mi_page_queue_find_free_ex+0x550>
               	cmpq	$9, %r8
               	jae	0x433c21 <mi_page_queue_find_free_ex+0x3b1>
               	xorl	%ecx, %ecx
               	jmp	0x433ce2 <mi_page_queue_find_free_ex+0x472>
               	cmpq	$64, %r8
               	ja	0x433c31 <mi_page_queue_find_free_ex+0x3c1>
               	leal	1(%r15), %ebp
               	andb	$-2, %bpl
               	jmp	0x433c4b <mi_page_queue_find_free_ex+0x3db>
               	leaq	-1(%r15), %rax
               	bsrq	%rax, %rsi
               	movl	%esi, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%rsi,4), %ebp
               	addb	$-3, %bpl
               	leaq	1040(%r9), %rsi
               	addq	$2792, %rdx             # imm = 0xAE8
               	nopl	(%rax)
               	movq	16(%rdx), %rax
               	addq	$7, %rax
               	movq	%rax, %rdi
               	shrq	$3, %rdi
               	movb	$1, %cl
               	cmpq	$16, %rax
               	jb	0x433cc0 <mi_page_queue_find_free_ex+0x450>
               	cmpq	$71, %rax
               	ja	0x433c90 <mi_page_queue_find_free_ex+0x420>
               	leal	1(%rdi), %ecx
               	andb	$-2, %cl
               	jmp	0x433cc0 <mi_page_queue_find_free_ex+0x450>
               	movb	$73, %cl
               	cmpq	$2097159, %rax          # imm = 0x200007
               	ja	0x433cc0 <mi_page_queue_find_free_ex+0x450>
               	leaq	-1(%rdi), %rax
               	bsrq	%rax, %r10
               	movl	%r10d, %ecx
               	addb	$-2, %cl
               	shrq	%cl, %rax
               	andl	$3, %eax
               	leal	(%rax,%r10,4), %ecx
               	addb	$-3, %cl
               	nopl	(%rax)
               	cmpq	%rsi, %rdx
               	jbe	0x433cce <mi_page_queue_find_free_ex+0x45e>
               	addq	$-24, %rdx
               	cmpb	%cl, %bpl
               	je	0x433c60 <mi_page_queue_find_free_ex+0x3f0>
               	leaq	1(%rdi), %rcx
               	cmpq	%r15, %rdi
               	cmovaeq	%r15, %rcx
               	cmpq	%r15, %rcx
               	ja	0x433dc0 <mi_page_queue_find_free_ex+0x550>
               	addq	$1, %r15
               	movq	%r15, %r11
               	subq	%rcx, %r11
               	cmpq	$4, %r11
               	jb	0x433db0 <mi_page_queue_find_free_ex+0x540>
               	movq	%r11, %r10
               	andq	$-4, %r10
               	movq	%rbx, %xmm0
               	pshufd	$68, %xmm0, %xmm0       # xmm0 = xmm0[0,1,0,1]
               	leaq	-4(%r10), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %eax
               	andl	$3, %eax
               	cmpq	$12, %rdx
               	jae	0x433d25 <mi_page_queue_find_free_ex+0x4b5>
               	xorl	%ebp, %ebp
               	jmp	0x433d79 <mi_page_queue_find_free_ex+0x509>
               	leaq	(%r9,%rcx,8), %rdx
               	addq	$120, %rdx
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%ebp, %ebp
               	nopw	%cs:(%rax,%rax)
               	movdqu	%xmm0, -112(%rdx,%rbp,8)
               	movdqu	%xmm0, -96(%rdx,%rbp,8)
               	movdqu	%xmm0, -80(%rdx,%rbp,8)
               	movdqu	%xmm0, -64(%rdx,%rbp,8)
               	movdqu	%xmm0, -48(%rdx,%rbp,8)
               	movdqu	%xmm0, -32(%rdx,%rbp,8)
               	movdqu	%xmm0, -16(%rdx,%rbp,8)
               	movdqu	%xmm0, (%rdx,%rbp,8)
               	addq	$16, %rbp
               	addq	$4, %rsi
               	jne	0x433d40 <mi_page_queue_find_free_ex+0x4d0>
               	testq	%rax, %rax
               	je	0x433da2 <mi_page_queue_find_free_ex+0x532>
               	addq	%rcx, %rbp
               	leaq	(%r9,%rbp,8), %rdx
               	addq	$24, %rdx
               	negq	%rax
               	movdqu	%xmm0, -16(%rdx)
               	movdqu	%xmm0, (%rdx)
               	addq	$32, %rdx
               	incq	%rax
               	jne	0x433d90 <mi_page_queue_find_free_ex+0x520>
               	cmpq	%r10, %r11
               	je	0x433dc0 <mi_page_queue_find_free_ex+0x550>
               	addq	%r10, %rcx
               	nop
               	movq	%rbx, 8(%r9,%rcx,8)
               	addq	$1, %rcx
               	cmpq	%rcx, %r15
               	jne	0x433db0 <mi_page_queue_find_free_ex+0x540>
               	nop
               	cmpq	$2097168, %r8           # imm = 0x200010
               	sete	%al
               	movb	6(%rbx), %cl
               	andb	$-2, %cl
               	orb	%al, %cl
               	movb	%cl, 6(%rbx)
               	movq	32(%rbx), %rax
               	cmpq	$4, %rax
               	jb	0x433e40 <mi_page_queue_find_free_ex+0x5d0>
               	movq	32(%rbx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rcx
               	movl	%ecx, %edx
               	andl	$3, %edx
               	lock
               	cmpxchgq	%rdx, 32(%rbx)
               	jne	0x433df0 <mi_page_queue_find_free_ex+0x580>
               	andq	$-4, %rcx
               	je	0x433e40 <mi_page_queue_find_free_ex+0x5d0>
               	movzwl	2(%rbx), %esi
               	xorl	%eax, %eax
               	movq	%rcx, %rdi
               	nop
               	movq	%rdi, %rdx
               	addl	$1, %eax
               	cmpl	%esi, %eax
               	ja	0x433e22 <mi_page_queue_find_free_ex+0x5b2>
               	movq	(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x433e10 <mi_page_queue_find_free_ex+0x5a0>
               	cmpl	%esi, %eax
               	jbe	0x433e6d <mi_page_queue_find_free_ex+0x5fd>
               	movl	$14, %edi
               	leaq	71944(%rip), %rsi       # 0x44573e <typeinfo name for kotlin::gc::GCSchedulerData+0x1605>
               	xorl	%eax, %eax
               	callq	0x42d090 <_mi_error_message>
               	nopl	(%rax)
               	movq	24(%rbx), %rcx
               	testq	%rcx, %rcx
               	je	0x4338b0 <mi_page_queue_find_free_ex+0x40>
               	cmpq	$0, 8(%rbx)
               	jne	0x4338b0 <mi_page_queue_find_free_ex+0x40>
               	movq	%rcx, 8(%rbx)
               	movq	$0, 24(%rbx)
               	andb	$-2, 7(%rbx)
               	jmp	0x4338b0 <mi_page_queue_find_free_ex+0x40>
               	movq	24(%rbx), %rsi
               	movq	%rsi, (%rdx)
               	movq	%rcx, 24(%rbx)
               	subl	%eax, 16(%rbx)
               	testq	%rcx, %rcx
               	jne	0x433e4d <mi_page_queue_find_free_ex+0x5dd>
               	jmp	0x4338b0 <mi_page_queue_find_free_ex+0x40>
               	nopl	(%rax)
               	movq	3024(%r13), %rbp
               	cmpq	3032(%r13), %rbp
               	jbe	0x433ef0 <mi_page_queue_find_free_ex+0x680>
               	movl	$74, %r12d
               	xorl	%r15d, %r15d
               	movq	%r12, 3024(%r13)
               	movq	%r15, 3032(%r13)
               	movq	16(%r14), %rdx
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	callq	0x4330a0 <mi_page_fresh_alloc>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	setne	%al
               	orb	4(%rsp), %al
               	movb	$1, %dl
               	testb	$1, %al
               	je	0x43389c <mi_page_queue_find_free_ex+0x2c>
               	jmp	0x434040 <mi_page_queue_find_free_ex+0x7d0>
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	leaq	(,%rbp,2), %rax
               	addq	%rbp, %rax
               	movq	16(%rsp), %rcx
               	leaq	(%rcx,%rax,8), %rbx
               	movl	$74, %r12d
               	xorl	%r15d, %r15d
               	jmp	0x433f35 <mi_page_queue_find_free_ex+0x6c5>
               	andb	$1, %cl
               	movb	%cl, 7(%rax)
               	nopw	%cs:(%rax,%rax)
               	nop
               	addq	$1, %rbp
               	addq	$24, %rbx
               	cmpq	3032(%r13), %rbp
               	ja	0x433ea9 <mi_page_queue_find_free_ex+0x639>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x433f20 <mi_page_queue_find_free_ex+0x6b0>
               	movzbl	7(%rax), %ecx
               	cmpb	$2, %cl
               	jb	0x433f20 <mi_page_queue_find_free_ex+0x6b0>
               	cmpl	$0, 16(%rax)
               	jne	0x433f0f <mi_page_queue_find_free_ex+0x69f>
               	addb	$-2, %cl
               	movb	%cl, 7(%rax)
               	cmpb	$1, %cl
               	ja	0x433f66 <mi_page_queue_find_free_ex+0x6f6>
               	movq	(%rbx), %rdi
               	movq	%rbx, %rsi
               	xorl	%edx, %edx
               	callq	0x42e350 <_mi_page_free>
               	jmp	0x433f20 <mi_page_queue_find_free_ex+0x6b0>
               	cmpq	%r12, %rbp
               	cmovbq	%rbp, %r12
               	cmpq	%r15, %rbp
               	cmovaq	%rbp, %r15
               	jmp	0x433f20 <mi_page_queue_find_free_ex+0x6b0>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rbx), %r8d
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x433f99 <mi_page_queue_find_free_ex+0x729>
               	movq	72(%rax), %rsi
               	movzbl	(%rbx), %ecx
               	testq	%rcx, %rcx
               	jne	0x433ff4 <mi_page_queue_find_free_ex+0x784>
               	jmp	0x433fac <mi_page_queue_find_free_ex+0x73c>
               	movb	96(%rax), %cl
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %ecx
               	testq	%rcx, %rcx
               	jne	0x433ff4 <mi_page_queue_find_free_ex+0x784>
               	movq	80(%rax), %r10
               	movq	%rsi, %r9
               	subq	%r10, %r9
               	cmpl	$1, %edx
               	ja	0x433ff1 <mi_page_queue_find_free_ex+0x781>
               	testl	%r8d, %r8d
               	je	0x433ff1 <mi_page_queue_find_free_ex+0x781>
               	imulq	%rcx, %rsi
               	addq	%rsi, %rax
               	addq	%r10, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x433fda <mi_page_queue_find_free_ex+0x76a>
               	xorl	%edx, %edx
               	divq	%r8
               	jmp	0x433fdf <mi_page_queue_find_free_ex+0x76f>
               	xorl	%edx, %edx
               	divl	%r8d
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%r8, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r9
               	movq	%r9, %rsi
               	cmpl	$67108864, %r8d         # imm = 0x4000000
               	cmovbq	%r8, %rsi
               	subq	%rdi, %rbp
               	movl	$1, %eax
               	cmpq	$4095, %rsi             # imm = 0xFFF
               	ja	0x43401c <mi_page_queue_find_free_ex+0x7ac>
               	movw	$4096, %ax              # imm = 0x1000
               	xorl	%edx, %edx
               	divw	%si
               	movzwl	%ax, %eax
               	cmpq	%rax, %rbp
               	cmovaq	%rax, %rbp
               	movq	%rbx, %rdi
               	movq	%rbp, %rdx
               	callq	0x434060 <mi_page_free_list_extend>
               	addw	%bp, 2(%rbx)
               	testb	$8, 1(%rbx)
               	jne	0x43403c <mi_page_queue_find_free_ex+0x7cc>
               	andb	$-2, 7(%rbx)
               	andb	$1, 7(%rbx)
               	movq	%rbx, %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<mi_page_free_list_extend>:
               	movq	%rdx, %r9
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	20(%rdi), %r10d
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x43407e <mi_page_free_list_extend+0x1e>
               	movq	72(%rax), %r8
               	jmp	0x43408a <mi_page_free_list_extend+0x2a>
               	movb	96(%rax), %cl
               	movl	$1, %r8d
               	shlq	%cl, %r8
               	movzbl	(%rdi), %ecx
               	imulq	%rcx, %r8
               	addq	%rax, %r8
               	testq	%rcx, %rcx
               	jne	0x4340d3 <mi_page_free_list_extend+0x73>
               	addq	80(%rax), %r8
               	cmpl	$1, %edx
               	ja	0x4340d3 <mi_page_free_list_extend+0x73>
               	testl	%r10d, %r10d
               	je	0x4340d3 <mi_page_free_list_extend+0x73>
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x4340ba <mi_page_free_list_extend+0x5a>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	jmp	0x4340c2 <mi_page_free_list_extend+0x62>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movq	%r10, %rax
               	subq	%rdx, %rax
               	leaq	(%r8,%rax), %rcx
               	cmpq	%r10, %rax
               	cmovbq	%rcx, %r8
               	movzwl	2(%rdi), %r11d
               	movq	%r11, %rdx
               	imulq	%rsi, %rdx
               	leaq	(%r8,%rdx), %r10
               	leaq	(%r9,%r11), %rax
               	addq	$-1, %rax
               	imulq	%rsi, %rax
               	leaq	(%r8,%rax), %rcx
               	cmpq	%rax, %rdx
               	jg	0x43411e <mi_page_free_list_extend+0xbe>
               	addq	$1, %r11
               	imulq	%rsi, %r11
               	addq	%r11, %r8
               	movq	%r10, %rdx
               	nopw	(%rax,%rax)
               	movq	%r8, (%rdx)
               	addq	%rsi, %rdx
               	addq	%rsi, %r8
               	cmpq	%rcx, %rdx
               	jbe	0x434110 <mi_page_free_list_extend+0xb0>
               	movq	8(%rdi), %rax
               	movq	%rax, (%rcx)
               	movq	%r10, 8(%rdi)
               	retq
               	nopw	(%rax,%rax)

<mi_segment_reclaim_or_alloc>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%r8, %r14
               	movq	%rcx, %r12
               	movl	%edx, %r13d
               	movq	104(%r8), %rbp
               	testq	%rbp, %rbp
               	je	0x4341ce <mi_segment_reclaim_or_alloc+0x9e>
               	addq	$-1, 88(%r14)
               	movq	24(%rbp), %rax
               	movq	%rax, 104(%r14)
               	movq	$0, 24(%rbp)
               	movq	112(%r14), %rcx
               	leaq	416(%rcx), %rax
               	leaq	199813(%rip), %rdx      # 0x464e00 <_mi_stats_main>
               	cmpq	%rdx, %rax
               	jb	0x434455 <mi_segment_reclaim_or_alloc+0x325>
               	leaq	200373(%rip), %rdx      # 0x465040 <os_preloading>
               	cmpq	%rdx, %rax
               	jae	0x434455 <mi_segment_reclaim_or_alloc+0x325>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 440(%rcx)
               	addq	$-1, %rdx
               	movq	432(%rcx), %rax
               	nop
               	cmpq	%rdx, %rax
               	jge	0x4341c0 <mi_segment_reclaim_or_alloc+0x90>
               	lock
               	cmpxchgq	%rdx, 432(%rcx)
               	jne	0x4341b0 <mi_segment_reclaim_or_alloc+0x80>
               	lock
               	addq	$1, 424(%rcx)
               	jmp	0x43447f <mi_segment_reclaim_or_alloc+0x34f>
               	movq	%rdi, %r15
               	movb	$0, 3(%rsp)
               	movl	$7, %eax
               	xorl	%ebp, %ebp
               	movl	%r13d, 4(%rsp)
               	movq	%rsi, 24(%rsp)
               	movq	%rdi, 8(%rsp)
               	movl	%eax, 20(%rsp)
               	movq	299465(%rip), %rax      # 0x47d3c0 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x4342bc <mi_segment_reclaim_or_alloc+0x18c>
               	movq	299574(%rip), %rax      # 0x47d440 <abandoned_visited>
               	testq	%rax, %rax
               	je	0x43444a <mi_segment_reclaim_or_alloc+0x31a>
               	xorl	%ecx, %ecx
               	xchgq	%rcx, 299556(%rip)      # 0x47d440 <abandoned_visited>
               	testq	%rcx, %rcx
               	je	0x43444a <mi_segment_reclaim_or_alloc+0x31a>
               	movq	299412(%rip), %rax      # 0x47d3c0 <abandoned>
               	cmpq	$4194303, %rax          # imm = 0x3FFFFF
               	ja	0x434252 <mi_segment_reclaim_or_alloc+0x122>
               	movq	299589(%rip), %rdx      # 0x47d480 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 299376(%rip)      # 0x47d3c0 <abandoned>
               	je	0x4342ac <mi_segment_reclaim_or_alloc+0x17c>
               	movq	%rcx, %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rax, %rbx
               	movq	16(%rax), %rax
               	testq	%rax, %rax
               	jne	0x434260 <mi_segment_reclaim_or_alloc+0x130>
               	movq	299337(%rip), %rax      # 0x47d3c0 <abandoned>
               	nopw	(%rax,%rax)
               	movq	299513(%rip), %rdx      # 0x47d480 <abandoned_visited_count>
               	leal	1(%rax), %edi
               	movq	%rax, %rbp
               	andq	$-4194304, %rbp         # imm = 0xFFC00000
               	movq	%rbp, 16(%rbx)
               	andl	$4194303, %edi          # imm = 0x3FFFFF
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, 299286(%rip)      # 0x47d3c0 <abandoned>
               	jne	0x434280 <mi_segment_reclaim_or_alloc+0x150>
               	lock
               	addq	%rdx, 299340(%rip)      # 0x47d400 <abandoned_count>
               	lock
               	subq	%rdx, 299460(%rip)      # 0x47d480 <abandoned_visited_count>
               	lock
               	addq	$1, 299195(%rip)        # 0x47d380 <abandoned_readers>
               	movq	299252(%rip), %rax      # 0x47d3c0 <abandoned>
               	nopl	(%rax)
               	movq	%rax, %r15
               	andq	$-4194304, %r15         # imm = 0xFFC00000
               	je	0x43443a <mi_segment_reclaim_or_alloc+0x30a>
               	movq	16(%r15), %rcx
               	leal	1(%rax), %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	orq	%rcx, %rdx
               	lock
               	cmpxchgq	%rdx, 299207(%rip)      # 0x47d3c0 <abandoned>
               	jne	0x4342d0 <mi_segment_reclaim_or_alloc+0x1a0>
               	lock
               	subq	$1, 299132(%rip)        # 0x47d380 <abandoned_readers>
               	movq	$0, 16(%r15)
               	lock
               	subq	$1, 299243(%rip)        # 0x47d400 <abandoned_count>
               	addq	$1, 48(%r15)
               	cmpq	$0, 64(%r15)
               	je	0x4343aa <mi_segment_reclaim_or_alloc+0x27a>
               	movq	%r12, 32(%rsp)
               	movq	%r14, 40(%rsp)
               	movq	%r9, 48(%rsp)
               	leaq	120(%r15), %r14
               	xorl	%ebp, %ebp
               	xorl	%r13d, %r13d
               	xorl	%r12d, %r12d
               	xorl	%ebx, %ebx
               	jmp	0x434359 <mi_segment_reclaim_or_alloc+0x229>
               	addq	$1, %r12
               	movb	$1, %bpl
               	addq	$1, %r13
               	addq	$64, %r14
               	cmpq	64(%r15), %r13
               	jae	0x434396 <mi_segment_reclaim_or_alloc+0x266>
               	testb	$1, 1(%r14)
               	je	0x434348 <mi_segment_reclaim_or_alloc+0x218>
               	addq	$1, %rbx
               	movq	%r14, %rdi
               	xorl	%esi, %esi
               	callq	0x42e280 <_mi_page_free_collect>
               	movl	16(%r14), %eax
               	testl	%eax, %eax
               	je	0x434344 <mi_segment_reclaim_or_alloc+0x214>
               	movl	20(%r14), %ecx
               	cmpq	24(%rsp), %rcx
               	jne	0x43434b <mi_segment_reclaim_or_alloc+0x21b>
               	movzwl	4(%r14), %ecx
               	cmpl	%ecx, %eax
               	jb	0x434348 <mi_segment_reclaim_or_alloc+0x218>
               	movq	32(%r14), %rax
               	cmpq	$4, %rax
               	jae	0x434348 <mi_segment_reclaim_or_alloc+0x218>
               	jmp	0x43434b <mi_segment_reclaim_or_alloc+0x21b>
               	cmpq	%r12, %rbx
               	movq	48(%rsp), %r9
               	movq	40(%rsp), %r14
               	movq	32(%rsp), %r12
               	jne	0x4343dd <mi_segment_reclaim_or_alloc+0x2ad>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%r14, %r8
               	movq	%r9, %rbx
               	callq	0x430be0 <mi_segment_reclaim>
               	movq	%rbx, %r9
               	movl	4(%rsp), %r13d
               	movl	20(%rsp), %eax
               	subl	$1, %eax
               	movl	$0, %ebp
               	jae	0x4341ec <mi_segment_reclaim_or_alloc+0xbc>
               	jmp	0x43444a <mi_segment_reclaim_or_alloc+0x31a>
               	testb	$1, %bpl
               	movl	4(%rsp), %r13d
               	je	0x4343f2 <mi_segment_reclaim_or_alloc+0x2c2>
               	cmpl	%r13d, 112(%r15)
               	je	0x4344a4 <mi_segment_reclaim_or_alloc+0x374>
               	cmpq	$3, 48(%r15)
               	jb	0x434415 <mi_segment_reclaim_or_alloc+0x2e5>
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	movq	%r14, %r8
               	movq	%r9, %rbx
               	callq	0x430be0 <mi_segment_reclaim>
               	movq	%rbx, %r9
               	jmp	0x4343c9 <mi_segment_reclaim_or_alloc+0x299>
               	movq	299044(%rip), %rax      # 0x47d440 <abandoned_visited>
               	nopl	(%rax)
               	movq	%rax, 16(%r15)
               	lock
               	cmpxchgq	%r15, 299027(%rip)      # 0x47d440 <abandoned_visited>
               	jne	0x434420 <mi_segment_reclaim_or_alloc+0x2f0>
               	lock
               	addq	$1, 299080(%rip)        # 0x47d480 <abandoned_visited_count>
               	jmp	0x4343c9 <mi_segment_reclaim_or_alloc+0x299>
               	lock
               	subq	$1, 298813(%rip)        # 0x47d380 <abandoned_readers>
               	xorl	%ebp, %ebp
               	movl	4(%rsp), %r13d
               	cmpb	$0, 3(%rsp)
               	je	0x4344ce <mi_segment_reclaim_or_alloc+0x39e>
               	xorl	%ebp, %ebp
               	jmp	0x434492 <mi_segment_reclaim_or_alloc+0x362>
               	movq	440(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 440(%rcx)
               	cmpq	432(%rcx), %rax
               	jle	0x434477 <mi_segment_reclaim_or_alloc+0x347>
               	movq	%rax, 432(%rcx)
               	addq	$1, 424(%rcx)
               	movq	%rbp, %rdi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%r14, %r8
               	callq	0x434760 <mi_segment_init>
               	movq	%rbp, %rax
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	3(%rsp), %rcx
               	movq	%r15, %rdi
               	movq	8(%rsp), %rsi
               	movq	24(%rsp), %rdx
               	movq	%r14, %r8
               	movq	%r9, %rbx
               	callq	0x430be0 <mi_segment_reclaim>
               	movq	%rbx, %r9
               	movq	%rax, %rbp
               	cmpb	$0, 3(%rsp)
               	jne	0x434451 <mi_segment_reclaim_or_alloc+0x321>
               	testq	%rbp, %rbp
               	jne	0x434492 <mi_segment_reclaim_or_alloc+0x362>
               	xorl	%edi, %edi
               	xorl	%esi, %esi
               	movl	%r13d, %edx
               	movq	%r12, %rcx
               	movq	%r14, %r8
               	callq	0x434760 <mi_segment_init>
               	movq	%rax, %rbp
               	jmp	0x434492 <mi_segment_reclaim_or_alloc+0x362>
               	nopw	(%rax,%rax)

<mi_segment_find_free>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	cmpq	$0, 64(%rdi)
               	je	0x4346d4 <mi_segment_find_free+0x1e4>
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	120(%rdi), %rbx
               	leaq	6(%rsp), %r12
               	leaq	7(%rsp), %r13
               	xorl	%ebp, %ebp
               	jmp	0x43454f <mi_segment_find_free+0x5f>
               	nop
               	movzbl	1(%rbx), %ecx
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	testb	%al, %al
               	jne	0x4346d8 <mi_segment_find_free+0x1e8>
               	andb	$-2, %cl
               	movb	%cl, 1(%rbx)
               	addq	$-1, 56(%r15)
               	addq	$1, %rbp
               	addq	$64, %rbx
               	cmpq	64(%r15), %rbp
               	jae	0x4346d4 <mi_segment_find_free+0x1e4>
               	movzbl	1(%rbx), %ecx
               	testb	$1, %cl
               	jne	0x43453d <mi_segment_find_free+0x4d>
               	movq	48(%rbx), %rax
               	movq	56(%rbx), %rdx
               	testq	%rax, %rax
               	je	0x43456c <mi_segment_find_free+0x7c>
               	testq	%rdx, %rdx
               	jne	0x434575 <mi_segment_find_free+0x85>
               	jmp	0x434582 <mi_segment_find_free+0x92>
               	testq	%rdx, %rdx
               	je	0x4346bb <mi_segment_find_free+0x1cb>
               	movq	%rax, 48(%rdx)
               	movq	48(%rbx), %rax
               	testq	%rax, %rax
               	je	0x434586 <mi_segment_find_free+0x96>
               	movq	%rdx, 56(%rax)
               	cmpq	40(%r14), %rbx
               	je	0x4345b6 <mi_segment_find_free+0xc6>
               	cmpq	32(%r14), %rbx
               	je	0x4345c4 <mi_segment_find_free+0xd4>
               	movl	$0, 16(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 48(%rbx)
               	movzbl	1(%rbx), %ecx
               	testb	$4, %cl
               	jne	0x434626 <mi_segment_find_free+0x136>
               	cmpl	$3, 112(%r15)
               	jne	0x4345ca <mi_segment_find_free+0xda>
               	movq	72(%r15), %rsi
               	jmp	0x4345d7 <mi_segment_find_free+0xe7>
               	movq	56(%rbx), %rcx
               	movq	%rcx, 40(%r14)
               	cmpq	32(%r14), %rbx
               	jne	0x434592 <mi_segment_find_free+0xa2>
               	movq	%rax, 32(%r14)
               	jmp	0x434592 <mi_segment_find_free+0xa2>
               	movzbl	96(%r15), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movq	%rsi, %rdi
               	imulq	%rax, %rdi
               	addq	%r15, %rdi
               	testq	%rax, %rax
               	jne	0x4345f3 <mi_segment_find_free+0x103>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 6(%rsp)
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r12, %r8
               	callq	0x42ea80 <mi_os_commitx>
               	testb	%al, %al
               	je	0x43453d <mi_segment_find_free+0x4d>
               	cmpb	$0, 6(%rsp)
               	movzbl	1(%rbx), %ecx
               	je	0x434620 <mi_segment_find_free+0x130>
               	orb	$8, %cl
               	movb	%cl, 1(%rbx)
               	orb	$4, %cl
               	movb	%cl, 1(%rbx)
               	orb	$1, %cl
               	movb	%cl, 1(%rbx)
               	addq	$1, 56(%r15)
               	movzbl	1(%rbx), %eax
               	testb	$2, %al
               	je	0x4346d8 <mi_segment_find_free+0x1e8>
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x4346d8 <mi_segment_find_free+0x1e8>
               	cmpb	$0, 8(%r15)
               	jne	0x4346d8 <mi_segment_find_free+0x1e8>
               	andb	$-3, %al
               	movb	%al, 1(%rbx)
               	cmpl	$3, 112(%r15)
               	jne	0x434668 <mi_segment_find_free+0x178>
               	movq	72(%r15), %rsi
               	jmp	0x434675 <mi_segment_find_free+0x185>
               	movzbl	96(%r15), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	(%rbx), %eax
               	movq	%rsi, %rdi
               	imulq	%rax, %rdi
               	addq	%r15, %rdi
               	testq	%rax, %rax
               	jne	0x434691 <mi_segment_find_free+0x1a1>
               	movq	80(%r15), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 7(%rsp)
               	testq	%rsi, %rsi
               	je	0x4346d8 <mi_segment_find_free+0x1e8>
               	movq	%r13, %rdx
               	callq	0x4357f0 <_mi_os_unreset>
               	cmpb	$0, 7(%rsp)
               	jne	0x434520 <mi_segment_find_free+0x30>
               	testb	%al, %al
               	jne	0x4346d8 <mi_segment_find_free+0x1e8>
               	movzbl	1(%rbx), %ecx
               	jmp	0x434532 <mi_segment_find_free+0x42>
               	cmpq	32(%r14), %rbx
               	je	0x434586 <mi_segment_find_free+0x96>
               	cmpq	40(%r14), %rbx
               	jne	0x4345a4 <mi_segment_find_free+0xb4>
               	jmp	0x434586 <mi_segment_find_free+0x96>
               	xorl	%ebx, %ebx
               	jmp	0x434741 <mi_segment_find_free+0x251>
               	movq	56(%r15), %rax
               	cmpq	64(%r15), %rax
               	jne	0x434741 <mi_segment_find_free+0x251>
               	movl	112(%r15), %eax
               	cmpl	$1, %eax
               	ja	0x434741 <mi_segment_find_free+0x251>
               	testl	%eax, %eax
               	je	0x4346f8 <mi_segment_find_free+0x208>
               	cmpl	$1, %eax
               	jne	0x434741 <mi_segment_find_free+0x251>
               	addq	$16, %r14
               	leaq	24(%r15), %rax
               	movq	24(%r15), %rcx
               	movq	32(%r15), %rdx
               	testq	%rcx, %rcx
               	je	0x434710 <mi_segment_find_free+0x220>
               	testq	%rdx, %rdx
               	jne	0x434715 <mi_segment_find_free+0x225>
               	jmp	0x434721 <mi_segment_find_free+0x231>
               	testq	%rdx, %rdx
               	je	0x434753 <mi_segment_find_free+0x263>
               	movq	%rcx, 24(%rdx)
               	movq	(%rax), %rcx
               	testq	%rcx, %rcx
               	je	0x434725 <mi_segment_find_free+0x235>
               	movq	%rdx, 32(%rcx)
               	cmpq	%r15, (%r14)
               	jne	0x43472d <mi_segment_find_free+0x23d>
               	movq	%rcx, (%r14)
               	cmpq	%r15, 8(%r14)
               	jne	0x43473b <mi_segment_find_free+0x24b>
               	movq	32(%r15), %rcx
               	movq	%rcx, 8(%r14)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpq	%r15, (%r14)
               	jne	0x434741 <mi_segment_find_free+0x251>
               	jmp	0x434725 <mi_segment_find_free+0x235>
               	nopw	(%rax,%rax)

<mi_segment_init>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$120, %rsp
               	movq	%r9, 32(%rsp)
               	movq	%r8, %rbp
               	movl	%edx, %r12d
               	movq	%rdi, %r14
               	movl	$4194304, %eax          # imm = 0x400000
               	movl	$4194304, %edx          # imm = 0x400000
               	movq	%rcx, 112(%rsp)
               	shrq	%cl, %rdx
               	cmpl	$3, %r12d
               	movl	$1, %r15d
               	cmovneq	%rdx, %r15
               	movl	%r15d, %ecx
               	shll	$6, %ecx
               	addl	$391, %ecx              # imm = 0x187
               	andl	$1073741568, %ecx       # imm = 0x3FFFFF00
               	movq	%rcx, 64(%rsp)
               	leaq	(%rsi,%rcx), %rbx
               	addq	$262143, %rbx           # imm = 0x3FFFF
               	andq	$-262144, %rbx          # imm = 0xFFFC0000
               	testq	%rsi, %rsi
               	cmoveq	%rax, %rbx
               	cmpl	$1, %r12d
               	movq	%rbx, 72(%rsp)
               	ja	0x4347fd <mi_segment_init+0x9d>
               	movq	56(%rbp), %rbx
               	movl	$13, %edi
               	callq	0x42bc30 <mi_option_get>
               	xorl	%r11d, %r11d
               	movl	$0, %ecx
               	movl	$0, %r13d
               	cmpq	%rax, %rbx
               	movq	72(%rsp), %rbx
               	jb	0x434813 <mi_segment_init+0xb3>
               	movl	$3, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	setne	%r13b
               	movb	$1, %r11b
               	movb	$1, %cl
               	movb	%r13b, 9(%rsp)
               	movb	$0, 8(%rsp)
               	testq	%r14, %r14
               	je	0x434945 <mi_segment_init+0x1e5>
               	cmpl	$1, %r12d
               	ja	0x43486f <mi_segment_init+0x10f>
               	cmpl	%r12d, 112(%r14)
               	jne	0x43486f <mi_segment_init+0x10f>
               	cmpq	%rbx, 72(%r14)
               	jne	0x43486f <mi_segment_init+0x10f>
               	movq	$0, 16(%r14)
               	leaq	24(%r14), %rbx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%r14)
               	movups	%xmm0, 88(%r14)
               	movups	%xmm0, 72(%r14)
               	movups	%xmm0, 56(%r14)
               	movups	%xmm0, 40(%r14)
               	movups	%xmm0, 24(%r14)
               	movq	64(%rsp), %r13
               	jmp	0x434a56 <mi_segment_init+0x2f6>
               	movl	%r12d, 52(%rsp)
               	movq	%rbp, %r12
               	cmpq	$0, 64(%r14)
               	je	0x434988 <mi_segment_init+0x228>
               	leaq	121(%r14), %rbx
               	xorl	%ebp, %ebp
               	jmp	0x4348c5 <mi_segment_init+0x165>
               	nopl	(%rax)
               	movl	$5, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x4348cf <mi_segment_init+0x16f>
               	andb	$-3, (%rbx)
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbp
               	movq	64(%r14), %rax
               	addq	$64, %rbx
               	cmpq	%rax, %rbp
               	jae	0x43498a <mi_segment_init+0x22a>
               	testb	$2, (%rbx)
               	je	0x4348b0 <mi_segment_init+0x150>
               	testb	%r13b, %r13b
               	je	0x434890 <mi_segment_init+0x130>
               	cmpb	$0, 8(%r14)
               	jne	0x4348b0 <mi_segment_init+0x150>
               	movzbl	(%rbx), %eax
               	movl	%eax, %ecx
               	andb	$6, %cl
               	cmpb	$6, %cl
               	jne	0x4348b0 <mi_segment_init+0x150>
               	andb	$-3, %al
               	movb	%al, (%rbx)
               	cmpl	$3, 112(%r14)
               	jne	0x4348f4 <mi_segment_init+0x194>
               	movq	72(%r14), %rsi
               	jmp	0x434901 <mi_segment_init+0x1a1>
               	movzbl	96(%r14), %ecx
               	movl	$1, %esi
               	shlq	%cl, %rsi
               	movzbl	-1(%rbx), %eax
               	movq	%rsi, %rdi
               	imulq	%rax, %rdi
               	addq	%r14, %rdi
               	testq	%rax, %rax
               	jne	0x43491e <mi_segment_init+0x1be>
               	movq	80(%r14), %rax
               	addq	%rax, %rdi
               	subq	%rax, %rsi
               	movb	$0, 16(%rsp)
               	testq	%rsi, %rsi
               	je	0x4348b0 <mi_segment_init+0x150>
               	leaq	16(%rsp), %rdx
               	callq	0x4357f0 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x4348b0 <mi_segment_init+0x150>
               	orb	$8, (%rbx)
               	jmp	0x4348b0 <mi_segment_init+0x150>
               	movb	%cl, 10(%rsp)
               	movb	$0, 8(%rsp)
               	movb	$0, 11(%rsp)
               	testq	%rbx, %rbx
               	je	0x4353ab <mi_segment_init+0xc4b>
               	movq	%rbp, 104(%rsp)
               	movq	192200(%rip), %rcx      # 0x463830 <os_page_size>
               	leaq	-1(%rcx), %rax
               	leaq	(%rbx,%rcx), %rbp
               	addq	$-1, %rbp
               	testq	%rax, %rcx
               	jne	0x434aaa <mi_segment_init+0x34a>
               	negq	%rcx
               	andq	%rcx, %rbp
               	jmp	0x434af3 <mi_segment_init+0x393>
               	xorl	%eax, %eax
               	cmpq	%r15, %rax
               	jae	0x4349c8 <mi_segment_init+0x268>
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%r14, %rdi
               	movq	64(%rsp), %r13
               	movq	%r13, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42ea80 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	movq	%r12, %rbp
               	je	0x4349bf <mi_segment_init+0x25f>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	jne	0x4349d0 <mi_segment_init+0x270>
               	jmp	0x4353ab <mi_segment_init+0xc4b>
               	movq	%r12, %rbp
               	movq	64(%rsp), %r13
               	movq	%rbp, %r12
               	movq	$0, 16(%r14)
               	leaq	24(%r14), %rbx
               	leaq	-24(%r13), %rdx
               	xorl	%ebp, %ebp
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movb	$1, %al
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	leal	-1(%rax), %ecx
               	shlq	$6, %rbp
               	movb	%cl, 120(%r14,%rbp)
               	movzbl	121(%r14,%rbp), %ecx
               	movl	%ecx, %edx
               	andb	$-3, %dl
               	movb	%dl, 121(%r14,%rbp)
               	movzbl	9(%rsp), %edx
               	shlb	$2, %dl
               	andb	$-7, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%r14,%rbp)
               	movzbl	8(%rsp), %edx
               	shlb	$3, %dl
               	andb	$-11, %cl
               	orb	%dl, %cl
               	movb	%cl, 121(%r14,%rbp)
               	movzbl	%al, %ebp
               	movl	%ebp, %eax
               	addb	$1, %al
               	cmpq	%rbp, %r15
               	ja	0x434a00 <mi_segment_init+0x2a0>
               	movl	52(%rsp), %eax
               	movq	%r12, %rbp
               	movl	%eax, %r12d
               	movl	%r12d, 112(%r14)
               	movq	%r15, 64(%r14)
               	movq	112(%rsp), %rax
               	movq	%rax, 96(%r14)
               	movq	72(%rsp), %rax
               	movq	%rax, 72(%r14)
               	movq	%r13, 80(%r14)
               	movq	%fs:0, %rax
               	xchgq	%rax, 104(%r14)
               	movq	190952(%rip), %rax      # 0x463470 <_mi_heap_main+0xb28>
               	xorq	%r14, %rax
               	movq	%rax, 88(%r14)
               	cmpl	$1, %r12d
               	ja	0x4353ae <mi_segment_init+0xc4e>
               	movl	112(%r14), %eax
               	cmpl	$1, %eax
               	je	0x434ac0 <mi_segment_init+0x360>
               	testl	%eax, %eax
               	je	0x434ac4 <mi_segment_init+0x364>
               	xorl	%ebp, %ebp
               	jmp	0x434ac4 <mi_segment_init+0x364>
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x434aea <mi_segment_init+0x38a>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	jmp	0x434af0 <mi_segment_init+0x390>
               	addq	$16, %rbp
               	movq	$0, (%rbx)
               	movq	8(%rbp), %rax
               	movq	%rax, 32(%r14)
               	leaq	24(%rax), %rcx
               	testq	%rax, %rax
               	cmoveq	%rbp, %rcx
               	movq	%r14, (%rcx)
               	movq	%r14, 8(%rbp)
               	jmp	0x4353ae <mi_segment_init+0xc4e>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	subq	%rdx, %rbp
               	leaq	4194303(%rbp), %rax
               	movq	%rax, 80(%rsp)
               	cmpq	$71303167, %rax         # imm = 0x43FFFFF
               	movl	%r12d, 52(%rsp)
               	ja	0x435239 <mi_segment_init+0xad9>
               	movq	231425(%rip), %rax      # 0x46d318 <_mi_numa_node_count>
               	testq	%rax, %rax
               	je	0x434d27 <mi_segment_init+0x5c7>
               	movq	80(%rsp), %rsi
               	shrq	$22, %rsi
               	cmpq	$2, %rax
               	movq	%rsi, 24(%rsp)
               	movq	%rbp, 96(%rsp)
               	jae	0x434b56 <mi_segment_init+0x3f6>
               	movq	231472(%rip), %r9       # 0x46d370 <regions_count>
               	testq	%r9, %r9
               	je	0x434d5a <mi_segment_init+0x5fa>
               	movq	32(%rsp), %rax
               	movq	(%rax), %rbp
               	jmp	0x434c2e <mi_segment_init+0x4ce>
               	movq	231355(%rip), %rax      # 0x46d318 <_mi_numa_node_count>
               	xorl	%r10d, %r10d
               	cmpq	$1, %rax
               	jne	0x434d37 <mi_segment_init+0x5d7>
               	movq	231423(%rip), %r9       # 0x46d370 <regions_count>
               	testq	%r9, %r9
               	je	0x434d5a <mi_segment_init+0x5fa>
               	movq	32(%rsp), %rax
               	movq	(%rax), %rbp
               	testl	%r10d, %r10d
               	js	0x434c2e <mi_segment_init+0x4ce>
               	xorl	%edi, %edi
               	leaq	231404(%rip), %r8       # 0x46d380 <regions>
               	notb	%r11b
               	movq	%r9, %r14
               	movl	%r11d, 92(%rsp)
               	movq	%r9, 56(%rsp)
               	movl	%r10d, 88(%rsp)
               	jmp	0x434bbe <mi_segment_init+0x45e>
               	nop
               	addq	$1, %rbp
               	addq	$-1, %r14
               	je	0x434d5a <mi_segment_init+0x5fa>
               	cmpq	%r9, %rbp
               	cmovaeq	%rdi, %rbp
               	movq	%rbp, %rbx
               	shlq	$6, %rbx
               	movq	(%rbx,%r8), %rax
               	testq	%rax, %rax
               	je	0x434bb0 <mi_segment_init+0x450>
               	movl	%eax, %edx
               	shrl	$8, %edx
               	andl	$1, %edx
               	testl	%eax, %eax
               	sets	%cl
               	sarl	$16, %eax
               	cmpl	%r10d, %eax
               	sete	%al
               	testb	%dl, %r11b
               	jne	0x434bb0 <mi_segment_init+0x450>
               	orb	%al, %cl
               	je	0x434bb0 <mi_segment_init+0x450>
               	leaq	(%rbx,%r8), %rdi
               	addq	$16, %rdi
               	leaq	40(%rsp), %rdx
               	movq	%r8, %r12
               	callq	0x435550 <_mi_bitmap_try_find_claim_field>
               	xorl	%edi, %edi
               	movl	88(%rsp), %r10d
               	movq	56(%rsp), %r9
               	movl	92(%rsp), %r11d
               	movq	%r12, %r8
               	movq	24(%rsp), %rsi
               	testb	%al, %al
               	je	0x434bb0 <mi_segment_init+0x450>
               	addq	%rbx, %r8
               	jmp	0x434d1a <mi_segment_init+0x5ba>
               	testb	%r11b, %r11b
               	movq	%r9, 56(%rsp)
               	je	0x434ca5 <mi_segment_init+0x545>
               	leaq	231229(%rip), %r8       # 0x46d380 <regions>
               	movq	%r9, %r12
               	jmp	0x434c5e <mi_segment_init+0x4fe>
               	nopl	(%rax,%rax)
               	addq	$1, %rbp
               	addq	$-1, %r12
               	je	0x434d5a <mi_segment_init+0x5fa>
               	cmpq	%r9, %rbp
               	movl	$0, %eax
               	cmovaeq	%rax, %rbp
               	movq	%rbp, %r14
               	shlq	$6, %r14
               	movq	(%r14,%r8), %rax
               	testq	%rax, %rax
               	je	0x434c50 <mi_segment_init+0x4f0>
               	leaq	(%r14,%r8), %rdi
               	addq	$16, %rdi
               	leaq	40(%rsp), %rdx
               	movq	%r8, %rbx
               	callq	0x435550 <_mi_bitmap_try_find_claim_field>
               	movq	56(%rsp), %r9
               	movq	%rbx, %r8
               	movq	24(%rsp), %rsi
               	testb	%al, %al
               	je	0x434c50 <mi_segment_init+0x4f0>
               	addq	%r14, %r8
               	jmp	0x434d1a <mi_segment_init+0x5ba>
               	xorl	%ecx, %ecx
               	leaq	231122(%rip), %r8       # 0x46d380 <regions>
               	movq	%r9, %rbx
               	jmp	0x434cce <mi_segment_init+0x56e>
               	nopw	%cs:(%rax,%rax)
               	addq	$1, %rbp
               	addq	$-1, %rbx
               	je	0x434d5a <mi_segment_init+0x5fa>
               	cmpq	%r9, %rbp
               	cmovaeq	%rcx, %rbp
               	movq	%rbp, %r12
               	shlq	$6, %r12
               	movq	(%r12,%r8), %rax
               	testq	%rax, %rax
               	je	0x434cc0 <mi_segment_init+0x560>
               	andl	$256, %eax              # imm = 0x100
               	testq	%rax, %rax
               	jne	0x434cc0 <mi_segment_init+0x560>
               	leaq	(%r12,%r8), %rdi
               	addq	$16, %rdi
               	leaq	40(%rsp), %rdx
               	movq	%r8, %r14
               	callq	0x435550 <_mi_bitmap_try_find_claim_field>
               	xorl	%ecx, %ecx
               	movq	56(%rsp), %r9
               	movq	%r14, %r8
               	movq	24(%rsp), %rsi
               	testb	%al, %al
               	je	0x434cc0 <mi_segment_init+0x560>
               	addq	%r12, %r8
               	movq	32(%rsp), %rax
               	movq	%rbp, (%rax)
               	jmp	0x434f04 <mi_segment_init+0x7a4>
               	movl	%r11d, %ebx
               	callq	0x42cfe0 <_mi_os_numa_node_count_get>
               	movl	%ebx, %r11d
               	jmp	0x434b20 <mi_segment_init+0x3c0>
               	movl	%r11d, %ebx
               	callq	0x435430 <_mi_os_numa_node_get>
               	movl	%ebx, %r11d
               	movq	24(%rsp), %rsi
               	movl	%eax, %r10d
               	movq	230943(%rip), %r9       # 0x46d370 <regions_count>
               	testq	%r9, %r9
               	jne	0x434b7a <mi_segment_init+0x41a>
               	movb	10(%rsp), %bl
               	movq	230923(%rip), %rax      # 0x46d370 <regions_count>
               	cmpq	$1022, %rax             # imm = 0x3FE
               	ja	0x43521e <mi_segment_init+0xabe>
               	testb	%r13b, %r13b
               	je	0x434d88 <mi_segment_init+0x628>
               	movl	$4, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	setne	%al
               	jmp	0x434d8a <mi_segment_init+0x62a>
               	xorl	%eax, %eax
               	testb	%bl, %bl
               	setne	%cl
               	movb	%al, 12(%rsp)
               	andb	%cl, %r13b
               	movb	%r13b, 15(%rsp)
               	movb	$0, 14(%rsp)
               	movb	$0, 13(%rsp)
               	movq	$0, 16(%rsp)
               	leaq	12(%rsp), %rsi
               	leaq	15(%rsp), %rdx
               	leaq	13(%rsp), %rcx
               	leaq	14(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movl	$268435456, %edi        # imm = 0x10000000
               	callq	0x435610 <_mi_arena_alloc_aligned>
               	testq	%rax, %rax
               	je	0x434e2c <mi_segment_init+0x6cc>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 230796(%rip)      # 0x46d370 <regions_count>
               	cmpq	$1024, %rdx             # imm = 0x400
               	jb	0x434e38 <mi_segment_init+0x6d8>
               	lock
               	subq	$1, 230778(%rip)        # 0x46d370 <regions_count>
               	movq	16(%rsp), %rdx
               	movzbl	12(%rsp), %ecx
               	movl	$268435456, %esi        # imm = 0x10000000
               	movq	%rax, %rdi
               	callq	0x42e5d0 <_mi_arena_free>
               	leaq	68504(%rip), %rdi       # 0x4459ac <typeinfo name for kotlin::gc::GCSchedulerData+0x1873>
               	xorl	%ebx, %ebx
               	movl	$256, %esi              # imm = 0x100
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movq	24(%rsp), %rsi
               	jmp	0x434efc <mi_segment_init+0x79c>
               	xorl	%ebx, %ebx
               	movq	24(%rsp), %rsi
               	jmp	0x434efc <mi_segment_init+0x79c>
               	shlq	$6, %rdx
               	leaq	230717(%rip), %rbx      # 0x46d380 <regions>
               	movq	16(%rsp), %rcx
               	xchgq	%rcx, 48(%rdx,%rbx)
               	leaq	(%rdx,%rbx), %rdi
               	addq	$16, %rdi
               	movq	$0, 16(%rdx,%rbx)
               	movzbl	14(%rsp), %ecx
               	addq	$-1, %rcx
               	movq	%rcx, 24(%rdx,%rbx)
               	xorl	%ecx, %ecx
               	subb	12(%rsp), %cl
               	movsbq	%cl, %rcx
               	movq	%rcx, 32(%rdx,%rbx)
               	movq	$0, 40(%rdx,%rbx)
               	movq	$0, 40(%rsp)
               	movq	$-1, %rbp
               	cmpq	$268435455, 80(%rsp)    # imm = 0xFFFFFFF
               	movq	24(%rsp), %rsi
               	ja	0x434ebc <mi_segment_init+0x75c>
               	testq	%rsi, %rsi
               	je	0x434eba <mi_segment_init+0x75a>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	jmp	0x434ebc <mi_segment_init+0x75c>
               	xorl	%ebp, %ebp
               	lock
               	orq	%rbp, (%rdi)
               	leaq	(%rbx,%rdx), %r8
               	movq	%rax, 8(%rdx,%rbx)
               	movzbl	15(%rsp), %eax
               	movzbl	13(%rsp), %ebx
               	addq	%rbx, %rbx
               	orq	%rax, %rbx
               	movq	230456(%rip), %rax      # 0x46d318 <_mi_numa_node_count>
               	cmpq	$1, %rax
               	jne	0x435412 <mi_segment_init+0xcb2>
               	xorl	%eax, %eax
               	shlq	$8, %rbx
               	orq	%rax, %rbx
               	orq	$1, %rbx
               	movq	%rbx, (%r8)
               	movb	$1, %bl
               	testb	%bl, %bl
               	je	0x43521e <mi_segment_init+0xabe>
               	movq	(%r8), %rdx
               	movq	8(%r8), %r9
               	movq	40(%rsp), %rax
               	movq	%rax, %rbp
               	shrq	$6, %rbp
               	movq	$-1, %rdi
               	movq	80(%rsp), %r10
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	ja	0x434f4c <mi_segment_init+0x7ec>
               	testq	%rsi, %rsi
               	je	0x434f4a <mi_segment_init+0x7ea>
               	andl	$63, %eax
               	movq	$-1, %rdi
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x434f4c <mi_segment_init+0x7ec>
               	xorl	%edi, %edi
               	movq	24(%r8,%rbp,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 24(%r8,%rbp,8)
               	jne	0x434f60 <mi_segment_init+0x800>
               	testq	%rdi, %rax
               	sete	8(%rsp)
               	movq	%rdx, %rax
               	shrq	$8, %rax
               	andb	$1, %al
               	movb	%al, 10(%rsp)
               	shrq	$9, %rdx
               	andb	$1, %dl
               	movb	%dl, 11(%rsp)
               	movq	40(%rsp), %rbx
               	movl	%ebx, %r14d
               	andl	$63, %r14d
               	shlq	$22, %r14
               	addq	%r9, %r14
               	cmpb	$0, 9(%rsp)
               	je	0x434fe0 <mi_segment_init+0x880>
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	movq	$-1, %rdi
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	ja	0x43501d <mi_segment_init+0x8bd>
               	testq	%rsi, %rsi
               	je	0x43501b <mi_segment_init+0x8bb>
               	movl	%ebx, %eax
               	andl	$63, %eax
               	movq	$-1, %rdi
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	jmp	0x43501d <mi_segment_init+0x8bd>
               	movq	$-1, %rdx
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	ja	0x4350e5 <mi_segment_init+0x985>
               	testq	%rsi, %rsi
               	je	0x4350e3 <mi_segment_init+0x983>
               	movl	%ebx, %eax
               	andl	$63, %eax
               	movq	$-1, %rdx
               	movl	%esi, %ecx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%eax, %ecx
               	shlq	%cl, %rdx
               	jmp	0x4350e5 <mi_segment_init+0x985>
               	xorl	%edi, %edi
               	movq	32(%r8,%rdx,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	lock
               	cmpxchgq	%rcx, 32(%r8,%rdx,8)
               	jne	0x435030 <mi_segment_init+0x8d0>
               	andq	%rdi, %rax
               	cmpq	%rdi, %rax
               	je	0x4350fc <mi_segment_init+0x99c>
               	movq	%r9, 32(%rsp)
               	movq	%r8, %r13
               	movb	$0, 16(%rsp)
               	movq	%r10, %rsi
               	andq	$-4194304, %rsi         # imm = 0xFFC00000
               	leaq	16(%rsp), %r8
               	movq	%r14, %rdi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	movq	%r10, %rbp
               	callq	0x42ea80 <mi_os_commitx>
               	testb	%al, %al
               	je	0x43509b <mi_segment_init+0x93b>
               	movq	%rbp, %r10
               	cmpb	$0, 16(%rsp)
               	je	0x43508c <mi_segment_init+0x92c>
               	movb	$1, 8(%rsp)
               	movq	24(%rsp), %rsi
               	movq	%r13, %r8
               	movq	32(%rsp), %r9
               	jmp	0x4350fc <mi_segment_init+0x99c>
               	movq	40(%rsp), %rdx
               	cmpq	$268435455, %rbp        # imm = 0xFFFFFFF
               	jbe	0x4350b3 <mi_segment_init+0x953>
               	xorl	%esi, %esi
               	movq	%r13, %rbp
               	jmp	0x435214 <mi_segment_init+0xab4>
               	movq	24(%rsp), %rcx
               	testq	%rcx, %rcx
               	movq	%r13, %rbp
               	je	0x43520d <mi_segment_init+0xaad>
               	movl	%edx, %eax
               	andl	$63, %eax
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%eax, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	jmp	0x435214 <mi_segment_init+0xab4>
               	xorl	%edx, %edx
               	movq	%rbx, %rax
               	shrq	$6, %rax
               	movq	32(%r8,%rax,8), %rax
               	andq	%rdx, %rax
               	cmpq	%rdx, %rax
               	sete	9(%rsp)
               	leaq	40(%r8), %rdx
               	movq	40(%rsp), %rbp
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	jbe	0x435127 <mi_segment_init+0x9c7>
               	shrq	$6, %rbp
               	movq	(%rdx,%rbp,8), %rax
               	testq	%rax, %rax
               	je	0x4351f1 <mi_segment_init+0xa91>
               	leaq	(%rdx,%rbp,8), %rdx
               	xorl	%edi, %edi
               	jmp	0x435185 <mi_segment_init+0xa25>
               	movl	%ebp, %eax
               	andl	$63, %eax
               	movq	$-1, %rdi
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	testq	%rsi, %rsi
               	cmoveq	%rsi, %rdi
               	shrq	$6, %rbp
               	movq	(%rdx,%rbp,8), %rcx
               	testq	%rdi, %rcx
               	je	0x4351f1 <mi_segment_init+0xa91>
               	leaq	(%rdx,%rbp,8), %rdx
               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
               	jbe	0x435169 <mi_segment_init+0xa09>
               	xorl	%edi, %edi
               	jmp	0x435185 <mi_segment_init+0xa25>
               	movq	$-1, %rdi
               	testq	%rsi, %rsi
               	je	0x435185 <mi_segment_init+0xa25>
               	movl	%esi, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	movl	%eax, %ecx
               	shlq	%cl, %rdi
               	notq	%rdi
               	lock
               	andq	%rdi, (%rdx)
               	cmpb	$0, 9(%rsp)
               	je	0x4351c6 <mi_segment_init+0xa66>
               	movq	%r9, %r13
               	movq	%r8, %rbp
               	movb	$0, 16(%rsp)
               	andq	$-4194304, %r10         # imm = 0xFFC00000
               	leaq	16(%rsp), %rdx
               	movq	%r14, %rdi
               	movq	%r10, %rsi
               	callq	0x4357f0 <_mi_os_unreset>
               	cmpb	$0, 16(%rsp)
               	je	0x4351be <mi_segment_init+0xa5e>
               	movb	$1, 8(%rsp)
               	movq	%rbp, %r8
               	movq	%r13, %r9
               	jmp	0x4351f1 <mi_segment_init+0xa91>
               	movl	$5, %edi
               	movq	%rbx, 32(%rsp)
               	movq	%r8, %r13
               	movq	%r9, %rbp
               	movq	%r10, %rbx
               	callq	0x42bc30 <mi_option_get>
               	movq	%rbx, %r10
               	movq	%rbp, %r9
               	movq	%r13, %r8
               	movq	32(%rsp), %rbx
               	testq	%rax, %rax
               	je	0x435190 <mi_segment_init+0xa30>
               	testq	%r9, %r9
               	je	0x43521e <mi_segment_init+0xabe>
               	leaq	229763(%rip), %rax      # 0x46d380 <regions>
               	subq	%rax, %r8
               	addq	%rbx, %r8
               	addq	%r8, %r8
               	movq	72(%rsp), %rbx
               	jmp	0x43526a <mi_segment_init+0xb0a>
               	movq	$-1, %rsi
               	shrq	$6, %rdx
               	lock
               	andq	%rsi, 16(%rbp,%rdx,8)
               	leaq	67563(%rip), %rdi       # 0x445a10 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
               	movq	96(%rsp), %rbp
               	movq	%rbp, %rsi
               	xorl	%eax, %eax
               	callq	0x42cc90 <_mi_warning_message>
               	movq	72(%rsp), %rbx
               	leaq	9(%rsp), %rsi
               	leaq	10(%rsp), %rdx
               	leaq	11(%rsp), %rcx
               	leaq	8(%rsp), %r8
               	leaq	16(%rsp), %r9
               	movq	%rbp, %rdi
               	callq	0x435610 <_mi_arena_alloc_aligned>
               	movq	%rax, %r14
               	movq	16(%rsp), %rax
               	leaq	(%rax,%rax), %r8
               	addq	$1, %r8
               	testq	%r14, %r14
               	movq	104(%rsp), %rbp
               	je	0x4353ab <mi_segment_init+0xc4b>
               	movb	$1, %al
               	cmpb	$0, 9(%rsp)
               	movq	64(%rsp), %r13
               	jne	0x4352c2 <mi_segment_init+0xb62>
               	movq	%r8, 32(%rsp)
               	movb	$0, 16(%rsp)
               	leaq	16(%rsp), %r8
               	movq	%r14, %rdi
               	movq	%r13, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42ea80 <mi_os_commitx>
               	cmpb	$0, 16(%rsp)
               	je	0x4352b3 <mi_segment_init+0xb53>
               	movb	$1, 8(%rsp)
               	testb	%al, %al
               	movq	32(%rsp), %r8
               	je	0x435396 <mi_segment_init+0xc36>
               	xorl	%eax, %eax
               	movq	%r8, (%r14)
               	movb	11(%rsp), %cl
               	andb	$1, %cl
               	orb	10(%rsp), %cl
               	movb	%cl, 8(%r14)
               	movb	%al, 9(%r14)
               	movq	112(%rbp), %rcx
               	leaq	195357(%rip), %rax      # 0x464e00 <_mi_stats_main>
               	cmpq	%rax, %rcx
               	setae	%dl
               	leaq	195920(%rip), %rax      # 0x465040 <os_preloading>
               	cmpq	%rax, %rcx
               	setb	%al
               	andb	%dl, %al
               	testq	%rbx, %rbx
               	js	0x43533c <mi_segment_init+0xbdc>
               	testb	%al, %al
               	je	0x435375 <mi_segment_init+0xc15>
               	movl	$1, %edx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	leaq	1(%rdx), %rsi
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jg	0x43532d <mi_segment_init+0xbcd>
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	jne	0x435320 <mi_segment_init+0xbc0>
               	lock
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x4353e2 <mi_segment_init+0xc82>
               	testb	%al, %al
               	je	0x4353c0 <mi_segment_init+0xc60>
               	movq	$-1, %rdx
               	lock
               	xaddq	%rdx, 24(%rcx)
               	addq	$-1, %rdx
               	movq	16(%rcx), %rax
               	nopl	(%rax)
               	cmpq	%rdx, %rax
               	jge	0x43536d <mi_segment_init+0xc0d>
               	lock
               	cmpxchgq	%rdx, 16(%rcx)
               	jne	0x435360 <mi_segment_init+0xc00>
               	lock
               	addq	$1, 8(%rcx)
               	jmp	0x4353db <mi_segment_init+0xc7b>
               	movq	24(%rcx), %rdx
               	leaq	1(%rdx), %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rdx
               	jl	0x43538b <mi_segment_init+0xc2b>
               	movq	%rax, 16(%rcx)
               	addq	$1, (%rcx)
               	movl	$1, %eax
               	jmp	0x4353e2 <mi_segment_init+0xc82>
               	movl	$4194304, %esi          # imm = 0x400000
               	movq	%r14, %rdi
               	movq	%r8, %rdx
               	xorl	%ecx, %ecx
               	xorl	%r8d, %r8d
               	callq	0x42ed70 <_mi_mem_free>
               	xorl	%r14d, %r14d
               	movq	%r14, %rax
               	addq	$120, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	24(%rcx), %rax
               	addq	$-1, %rax
               	movq	%rax, 24(%rcx)
               	cmpq	16(%rcx), %rax
               	jle	0x4353d6 <mi_segment_init+0xc76>
               	movq	%rax, 16(%rcx)
               	addq	$1, 8(%rcx)
               	movq	$-1, %rax
               	addq	56(%rbp), %rax
               	movq	%rax, 56(%rbp)
               	cmpq	64(%rbp), %rax
               	jbe	0x4353f4 <mi_segment_init+0xc94>
               	movq	%rax, 64(%rbp)
               	movq	72(%rbp), %rax
               	addq	%rbx, %rax
               	movq	%rax, 72(%rbp)
               	cmpq	80(%rbp), %rax
               	jbe	0x4349d0 <mi_segment_init+0x270>
               	movq	%rax, 80(%rbp)
               	jmp	0x4349d0 <mi_segment_init+0x270>
               	movq	%r8, %rbp
               	callq	0x435430 <_mi_os_numa_node_get>
               	movq	%rbp, %r8
               	movq	24(%rsp), %rsi
               	shll	$16, %eax
               	jmp	0x434eec <mi_segment_init+0x78c>
               	nopw	(%rax,%rax)

<_mi_os_numa_node_get>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$144, %rsp
               	movq	229077(%rip), %r14      # 0x46d318 <_mi_numa_node_count>
               	testq	%r14, %r14
               	je	0x4354bc <_mi_os_numa_node_get+0x8c>
               	xorl	%ebx, %ebx
               	cmpq	$2, %r14
               	jb	0x4354ad <_mi_os_numa_node_get+0x7d>
               	movq	$0, 16(%rsp)
               	movq	$0, 8(%rsp)
               	xorl	%ebx, %ebx
               	leaq	8(%rsp), %rsi
               	leaq	16(%rsp), %rdx
               	movl	$309, %edi              # imm = 0x135
               	xorl	%ecx, %ecx
               	xorl	%eax, %eax
               	callq	0x413810 <syscall@plt>
               	testq	%rax, %rax
               	jne	0x435486 <_mi_os_numa_node_get+0x56>
               	movq	16(%rsp), %rbx
               	cmpq	%r14, %rbx
               	jb	0x4354ad <_mi_os_numa_node_get+0x7d>
               	movq	%rbx, %rax
               	orq	%r14, %rax
               	shrq	$32, %rax
               	je	0x4354a4 <_mi_os_numa_node_get+0x74>
               	movq	%rbx, %rax
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rbx
               	jmp	0x4354ad <_mi_os_numa_node_get+0x7d>
               	movl	%ebx, %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %ebx
               	movl	%ebx, %eax
               	addq	$144, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	228949(%rip), %r14      # 0x46d318 <_mi_numa_node_count>
               	testq	%r14, %r14
               	jne	0x435448 <_mi_os_numa_node_get+0x18>
               	movl	$15, %edi
               	callq	0x42bc30 <mi_option_get>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	jg	0x43552c <_mi_os_numa_node_get+0xfc>
               	movl	$4294967295, %r14d      # imm = 0xFFFFFFFF
               	leaq	65298(%rip), %r15       # 0x4453f9 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
               	leaq	16(%rsp), %rbx
               	cmpl	$255, %r14d
               	je	0x435522 <_mi_os_numa_node_get+0xf2>
               	leal	2(%r14), %ecx
               	movl	$127, %esi
               	movq	%rbx, %rdi
               	movq	%r15, %rdx
               	xorl	%eax, %eax
               	callq	0x413830 <snprintf@plt>
               	movq	%rbx, %rdi
               	movl	$4, %esi
               	callq	0x413920 <access@plt>
               	addl	$1, %r14d
               	testl	%eax, %eax
               	je	0x4354ec <_mi_os_numa_node_get+0xbc>
               	jmp	0x435528 <_mi_os_numa_node_get+0xf8>
               	movl	$256, %r14d             # imm = 0x100
               	addl	$1, %r14d
               	movq	%r14, 228837(%rip)      # 0x46d318 <_mi_numa_node_count>
               	leaq	65247(%rip), %rdi       # 0x445419 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
               	movq	%r14, %rsi
               	xorl	%eax, %eax
               	callq	0x42b910 <_mi_verbose_message>
               	jmp	0x435448 <_mi_os_numa_node_get+0x18>
               	nopl	(%rax)

<_mi_bitmap_try_find_claim_field>:
               	movq	(%rdi), %rax
               	cmpq	$-1, %rax
               	je	0x4355a5 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	$-1, %r8
               	cmpq	$63, %rsi
               	ja	0x43557f <_mi_bitmap_try_find_claim_field+0x2f>
               	testq	%rsi, %rsi
               	je	0x43557c <_mi_bitmap_try_find_claim_field+0x2c>
               	movq	$-1, %r8
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x43557f <_mi_bitmap_try_find_claim_field+0x2f>
               	xorl	%r8d, %r8d
               	movl	$64, %ecx
               	movl	$64, %r9d
               	subq	%rsi, %r9
               	cmpq	$-1, %rax
               	je	0x43559d <_mi_bitmap_try_find_claim_field+0x4d>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %rcx
               	shlq	%cl, %r8
               	cmpq	%r9, %rcx
               	jbe	0x4355a8 <_mi_bitmap_try_find_claim_field+0x58>
               	xorl	%eax, %eax
               	retq
               	cmpq	$1, %rsi
               	jne	0x4355ee <_mi_bitmap_try_find_claim_field+0x9e>
               	jmp	0x4355bc <_mi_bitmap_try_find_claim_field+0x6c>
               	addq	$1, %rcx
               	addq	%r8, %r8
               	cmpq	%r9, %rcx
               	ja	0x4355a5 <_mi_bitmap_try_find_claim_field+0x55>
               	testq	%r8, %rax
               	jne	0x4355b0 <_mi_bitmap_try_find_claim_field+0x60>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x4355b7 <_mi_bitmap_try_find_claim_field+0x67>
               	jmp	0x435603 <_mi_bitmap_try_find_claim_field+0xb3>
               	bsrq	%rsi, %r10
               	movl	%r10d, %esi
               	subl	%ecx, %esi
               	addq	$1, %r10
               	addb	$1, %sil
               	movl	%esi, %ecx
               	shlq	%cl, %r8
               	movq	%r10, %rcx
               	cmpq	%r9, %rcx
               	ja	0x4355a5 <_mi_bitmap_try_find_claim_field+0x55>
               	movq	%rax, %rsi
               	andq	%r8, %rsi
               	jne	0x4355d0 <_mi_bitmap_try_find_claim_field+0x80>
               	movq	%rax, %rsi
               	orq	%r8, %rsi
               	lock
               	cmpxchgq	%rsi, (%rdi)
               	jne	0x4355e9 <_mi_bitmap_try_find_claim_field+0x99>
               	movq	%rcx, (%rdx)
               	movb	$1, %al
               	retq
               	nopl	(%rax)

<_mi_arena_alloc_aligned>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%r8, %r13
               	movq	%rcx, %r12
               	movq	%rdx, %r15
               	movq	%rsi, (%rsp)
               	movq	%r9, 8(%rsp)
               	movq	$0, (%r9)
               	movb	$0, (%r8)
               	movb	$0, (%rcx)
               	movq	%rdi, 16(%rsp)
               	cmpq	$8388608, %rdi          # imm = 0x800000
               	jb	0x435776 <_mi_arena_alloc_aligned+0x166>
               	movq	195113(%rip), %rax      # 0x465080 <mi_arena_count>
               	testq	%rax, %rax
               	je	0x435776 <_mi_arena_alloc_aligned+0x166>
               	movq	%r12, 24(%rsp)
               	movq	16(%rsp), %rax
               	leaq	16777215(%rax), %rbx
               	movq	228512(%rip), %rax      # 0x46d318 <_mi_numa_node_count>
               	xorl	%r14d, %r14d
               	cmpq	$1, %rax
               	jne	0x4357d4 <_mi_arena_alloc_aligned+0x1c4>
               	shrq	$24, %rbx
               	leaq	195120(%rip), %rbp      # 0x4650c0 <mi_arenas>
               	xorl	%r12d, %r12d
               	jmp	0x4356de <_mi_arena_alloc_aligned+0xce>
               	nopl	(%rax,%rax)
               	cmpb	$0, (%r15)
               	je	0x4356f5 <_mi_arena_alloc_aligned+0xe5>
               	movq	%r12, %rsi
               	movq	%rbx, %rdx
               	movq	(%rsp), %rcx
               	movq	%r15, %r8
               	movq	24(%rsp), %r9
               	pushq	8(%rsp)
               	pushq	%r13
               	callq	0x435910 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x4357c5 <_mi_arena_alloc_aligned+0x1b5>
               	addq	$1, %r12
               	addq	$8, %rbp
               	cmpq	$64, %r12
               	je	0x4356fd <_mi_arena_alloc_aligned+0xed>
               	movq	(%rbp), %rdi
               	testq	%rdi, %rdi
               	je	0x4356fd <_mi_arena_alloc_aligned+0xed>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x4356a0 <_mi_arena_alloc_aligned+0x90>
               	cmpl	%r14d, %eax
               	jne	0x4356d0 <_mi_arena_alloc_aligned+0xc0>
               	jmp	0x4356a0 <_mi_arena_alloc_aligned+0x90>
               	cmpb	$0, 30(%rdi)
               	jne	0x4356d0 <_mi_arena_alloc_aligned+0xc0>
               	jmp	0x4356a6 <_mi_arena_alloc_aligned+0x96>
               	movq	%rbx, 32(%rsp)
               	leaq	194999(%rip), %rbx      # 0x4650c0 <mi_arenas>
               	xorl	%ebp, %ebp
               	movq	24(%rsp), %r12
               	jmp	0x435754 <_mi_arena_alloc_aligned+0x144>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbp, %rsi
               	movq	32(%rsp), %rdx
               	movq	(%rsp), %rcx
               	movq	%r15, %r8
               	movq	%r12, %r9
               	pushq	8(%rsp)
               	pushq	%r13
               	callq	0x435910 <mi_arena_alloc_from>
               	addq	$16, %rsp
               	testq	%rax, %rax
               	jne	0x4357c5 <_mi_arena_alloc_aligned+0x1b5>
               	addq	$1, %rbp
               	addq	$8, %rbx
               	cmpq	$64, %rbp
               	je	0x435776 <_mi_arena_alloc_aligned+0x166>
               	movq	(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x435776 <_mi_arena_alloc_aligned+0x166>
               	movl	24(%rdi), %eax
               	testl	%eax, %eax
               	js	0x435746 <_mi_arena_alloc_aligned+0x136>
               	cmpl	%r14d, %eax
               	je	0x435746 <_mi_arena_alloc_aligned+0x136>
               	cmpb	$0, (%r15)
               	jne	0x435720 <_mi_arena_alloc_aligned+0x110>
               	cmpb	$0, 30(%rdi)
               	jne	0x435746 <_mi_arena_alloc_aligned+0x136>
               	jmp	0x435720 <_mi_arena_alloc_aligned+0x110>
               	movl	$16, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x435794 <_mi_arena_alloc_aligned+0x184>
               	callq	0x413880 <__errno_location@plt>
               	movl	$12, (%rax)
               	xorl	%eax, %eax
               	jmp	0x4357c5 <_mi_arena_alloc_aligned+0x1b5>
               	movb	$1, (%r13)
               	movq	8(%rsp), %rax
               	movq	$0, (%rax)
               	movq	(%rsp), %rax
               	movzbl	(%rax), %esi
               	movq	16(%rsp), %rdi
               	movq	%r15, %rdx
               	callq	0x42c050 <_mi_os_alloc_aligned>
               	testq	%rax, %rax
               	je	0x435790 <_mi_arena_alloc_aligned+0x180>
               	movb	(%r15), %cl
               	movb	%cl, (%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x435430 <_mi_os_numa_node_get>
               	movl	%eax, %r14d
               	jmp	0x435685 <_mi_arena_alloc_aligned+0x75>
               	nopw	%cs:(%rax,%rax)

<_mi_os_unreset>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	movl	$5, %edi
               	callq	0x42bc30 <mi_option_get>
               	testq	%rax, %rax
               	je	0x43582a <_mi_os_unreset+0x3a>
               	movq	%r15, %rdi
               	movq	%r14, %rsi
               	movl	$1, %edx
               	movl	$1, %ecx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x42ea80 <mi_os_commitx>
               	movb	$0, (%rbx)
               	testq	%r15, %r15
               	je	0x435907 <_mi_os_unreset+0x117>
               	testq	%r14, %r14
               	je	0x435907 <_mi_os_unreset+0x117>
               	movq	188394(%rip), %rdi      # 0x463830 <os_page_size>
               	leaq	-1(%rdi), %rax
               	leaq	(%r15,%rdi), %rcx
               	addq	$-1, %rcx
               	testq	%rax, %rdi
               	jne	0x435870 <_mi_os_unreset+0x80>
               	negq	%rdi
               	andq	%rdi, %rcx
               	addq	%r14, %r15
               	andq	%rdi, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jg	0x4358bf <_mi_os_unreset+0xcf>
               	jmp	0x435907 <_mi_os_unreset+0x117>
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x435889 <_mi_os_unreset+0x99>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rsi
               	jmp	0x435891 <_mi_os_unreset+0xa1>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %esi
               	addq	%r14, %r15
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x4358aa <_mi_os_unreset+0xba>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	jmp	0x4358b1 <_mi_os_unreset+0xc1>
               	movl	%r15d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	subq	%rsi, %rcx
               	subq	%rdx, %r15
               	subq	%rcx, %r15
               	testq	%r15, %r15
               	jle	0x435907 <_mi_os_unreset+0x117>
               	movq	%r15, %rcx
               	negq	%rcx
               	movq	%rcx, %rdx
               	lock
               	xaddq	%rdx, 193991(%rip)      # 0x464e98 <_mi_stats_main+0x98>
               	subq	%r15, %rdx
               	movq	193973(%rip), %rax      # 0x464e90 <_mi_stats_main+0x90>
               	nopl	(%rax,%rax)
               	cmpq	%rdx, %rax
               	jge	0x4358f0 <_mi_os_unreset+0x100>
               	lock
               	cmpxchgq	%rdx, 193954(%rip)      # 0x464e90 <_mi_stats_main+0x90>
               	jne	0x4358e0 <_mi_os_unreset+0xf0>
               	testq	%r15, %r15
               	js	0x4358ff <_mi_os_unreset+0x10f>
               	lock
               	addq	%r15, 193931(%rip)      # 0x464e88 <_mi_stats_main+0x88>
               	jmp	0x435907 <_mi_os_unreset+0x117>
               	lock
               	addq	%rcx, 193913(%rip)      # 0x464e80 <_mi_stats_main+0x80>
               	movb	$1, %al
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<mi_arena_alloc_from>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$136, %rsp
               	movq	%rcx, %rbp
               	movq	%rdx, %rbx
               	movq	%rdi, %r12
               	movq	32(%rdi), %rax
               	movq	16(%rdi), %r10
               	cmpq	$1, %rdx
               	jne	0x4359f7 <mi_arena_alloc_from+0xe7>
               	testq	%r10, %r10
               	je	0x435e89 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r9, 64(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%esi, %esi
               	movq	%rax, 48(%rsp)
               	movq	%rax, %rdx
               	jmp	0x435971 <mi_arena_alloc_from+0x61>
               	nop
               	addq	$1, %rsi
               	addq	$1, %rdx
               	cmpq	%r10, %rsi
               	je	0x435e8c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %rdx
               	cmovaeq	%r15, %rdx
               	movq	56(%r12,%rdx,8), %rax
               	cmpq	$-1, %rax
               	je	0x435960 <mi_arena_alloc_from+0x50>
               	je	0x4359a0 <mi_arena_alloc_from+0x90>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpl	$63, %r14d
               	ja	0x435960 <mi_arena_alloc_from+0x50>
               	jmp	0x4359ac <mi_arena_alloc_from+0x9c>
               	nop
               	movl	$64, %r14d
               	cmpl	$63, %r14d
               	ja	0x435960 <mi_arena_alloc_from+0x50>
               	movl	$1, %edi
               	movl	%r14d, %ecx
               	shlq	%cl, %rdi
               	jmp	0x4359cd <mi_arena_alloc_from+0xbd>
               	nopl	(%rax)
               	addq	$1, %r14
               	addq	%rdi, %rdi
               	cmpq	$64, %r14
               	jae	0x435960 <mi_arena_alloc_from+0x50>
               	testq	%rax, %rdi
               	jne	0x4359c0 <mi_arena_alloc_from+0xb0>
               	movq	%rdi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%rdx,8)
               	jne	0x4359c7 <mi_arena_alloc_from+0xb7>
               	movq	%rbp, 40(%rsp)
               	movq	%r8, 32(%rsp)
               	shlq	$6, %rdx
               	addq	%rdx, %r14
               	jmp	0x435dfd <mi_arena_alloc_from+0x4ed>
               	testq	%r10, %r10
               	je	0x435e89 <mi_arena_alloc_from+0x579>
               	movq	%rsi, 56(%rsp)
               	movq	%r8, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movq	%rbp, 40(%rsp)
               	movq	$-1, %rdx
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	movl	$64, %r13d
               	movl	$64, %ecx
               	subq	%rbx, %rcx
               	leaq	63(%rbx), %rdi
               	movq	%rdi, 120(%rsp)
               	testq	%rbx, %rbx
               	notq	%rsi
               	cmoveq	%rbx, %rsi
               	cmpq	$63, %rbx
               	cmovaq	%rdx, %rsi
               	movq	%rcx, %rbp
               	movq	%rsi, 24(%rsp)
               	leaq	48(%r12), %rcx
               	movq	%rcx, 88(%rsp)
               	leaq	64(%r12), %rcx
               	movq	%rcx, 80(%rsp)
               	xorl	%r15d, %r15d
               	xorl	%edx, %edx
               	movq	%rax, 48(%rsp)
               	movq	%rax, %r8
               	movq	%r10, 72(%rsp)
               	movq	%rbp, 16(%rsp)
               	jmp	0x435ab9 <mi_arena_alloc_from+0x1a9>
               	nopl	(%rax,%rax)
               	movq	128(%rsp), %rdx
               	addq	$1, %rdx
               	addq	$1, %r8
               	movq	72(%rsp), %r10
               	cmpq	%r10, %rdx
               	movl	$0, %r15d
               	movq	16(%rsp), %rbp
               	je	0x435e8c <mi_arena_alloc_from+0x57c>
               	cmpq	%r10, %r8
               	cmovaeq	%r15, %r8
               	cmpq	$64, %rbx
               	ja	0x435b00 <mi_arena_alloc_from+0x1f0>
               	movq	56(%r12,%r8,8), %rax
               	cmpq	$-1, %rax
               	je	0x435b00 <mi_arena_alloc_from+0x1f0>
               	je	0x435ae7 <mi_arena_alloc_from+0x1d7>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	%rbp, %r14
               	ja	0x435b00 <mi_arena_alloc_from+0x1f0>
               	jmp	0x435d2c <mi_arena_alloc_from+0x41c>
               	movl	$64, %r14d
               	cmpq	%rbp, %r14
               	jbe	0x435d2c <mi_arena_alloc_from+0x41c>
               	nopw	%cs:(%rax,%rax)
               	movq	%rdx, 128(%rsp)
               	movq	56(%r12,%r8,8), %r10
               	testq	%r10, %r10
               	je	0x435b30 <mi_arena_alloc_from+0x220>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	testq	%rbp, %rbp
               	jne	0x435b3e <mi_arena_alloc_from+0x22e>
               	jmp	0x435a90 <mi_arena_alloc_from+0x180>
               	nopl	(%rax)
               	movl	$64, %ebp
               	testq	%rbp, %rbp
               	je	0x435a90 <mi_arena_alloc_from+0x180>
               	leaq	(%r12,%r8,8), %r11
               	addq	$56, %r11
               	movq	72(%rsp), %r15
               	subq	%r8, %r15
               	movq	88(%rsp), %rax
               	leaq	(%rax,%r8,8), %r14
               	movq	80(%rsp), %rax
               	leaq	(%rax,%r8,8), %rax
               	movq	%rax, 96(%rsp)
               	xorl	%edx, %edx
               	cmpq	%rbx, %rbp
               	jae	0x435d78 <mi_arena_alloc_from+0x468>
               	movq	120(%rsp), %rax
               	subq	%rbp, %rax
               	shrq	$6, %rax
               	cmpq	%r15, %rax
               	jae	0x435a90 <mi_arena_alloc_from+0x180>
               	movq	%r14, %r9
               	movq	%rbp, %rax
               	nopl	(%rax,%rax)
               	leaq	64(%rax), %rsi
               	movq	%rbx, %rcx
               	subq	%rax, %rcx
               	cmpq	%rbx, %rsi
               	cmovbeq	%r13, %rcx
               	movq	16(%r9), %rdi
               	movq	$-1, %rsi
               	cmpq	$63, %rcx
               	ja	0x435bc4 <mi_arena_alloc_from+0x2b4>
               	testq	%rcx, %rcx
               	je	0x435bdb <mi_arena_alloc_from+0x2cb>
               	movq	$-1, %rsi
               	shlq	%cl, %rsi
               	notq	%rsi
               	testq	%rdi, %rsi
               	jne	0x435a90 <mi_arena_alloc_from+0x180>
               	addq	%rcx, %rax
               	addq	$8, %r9
               	cmpq	%rbx, %rax
               	jb	0x435b90 <mi_arena_alloc_from+0x280>
               	jmp	0x435bf0 <mi_arena_alloc_from+0x2e0>
               	xorl	%esi, %esi
               	testq	%rdi, %rsi
               	je	0x435bcd <mi_arena_alloc_from+0x2bd>
               	jmp	0x435a90 <mi_arena_alloc_from+0x180>
               	nopl	(%rax,%rax)
               	movq	%rdx, 104(%rsp)
               	movq	%r14, 112(%rsp)
               	movl	$64, %r14d
               	subq	%rbp, %r14
               	movq	$-1, %rax
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	notq	%rax
               	negq	%rbp
               	movl	%ebp, %ecx
               	shlq	%cl, %rax
               	cmpq	$1, %r10
               	movl	$0, %ecx
               	sbbq	%rcx, %rcx
               	orq	%rax, %rcx
               	movq	(%r11), %rax
               	nopl	(%rax)
               	testq	%rcx, %rax
               	jne	0x435c70 <mi_arena_alloc_from+0x360>
               	movq	%rax, %rdi
               	orq	%rcx, %rdi
               	lock
               	cmpxchgq	%rdi, (%r11)
               	jne	0x435c30 <mi_arena_alloc_from+0x320>
               	movq	96(%rsp), %rdi
               	movq	$-1, %rdx
               	nop
               	movq	%rdi, %rbp
               	leaq	-8(%rdi), %rax
               	cmpq	%r9, %rax
               	jae	0x435d00 <mi_arena_alloc_from+0x3f0>
               	leaq	8(%rbp), %rdi
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rdx, (%rbp)
               	je	0x435c50 <mi_arena_alloc_from+0x340>
               	jmp	0x435c73 <mi_arena_alloc_from+0x363>
               	movq	%r11, %rbp
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	movq	112(%rsp), %r14
               	movq	104(%rsp), %rdx
               	jbe	0x435ca1 <mi_arena_alloc_from+0x391>
               	nopw	(%rax,%rax)
               	movq	$0, (%rbp)
               	addq	$-8, %rbp
               	cmpq	%r11, %rbp
               	ja	0x435c90 <mi_arena_alloc_from+0x380>
               	cmpq	%r11, %rbp
               	jne	0x435cbd <mi_arena_alloc_from+0x3ad>
               	movq	(%r11), %rax
               	notq	%rcx
               	movq	%rax, %rsi
               	andq	%rcx, %rsi
               	lock
               	cmpxchgq	%rsi, (%r11)
               	jne	0x435cb0 <mi_arena_alloc_from+0x3a0>
               	cmpq	$4, %rdx
               	je	0x435a90 <mi_arena_alloc_from+0x180>
               	movq	(%r11), %r10
               	testq	%r10, %r10
               	je	0x435ce9 <mi_arena_alloc_from+0x3d9>
               	bsrq	%r10, %rbp
               	xorq	$63, %rbp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x435b67 <mi_arena_alloc_from+0x257>
               	jmp	0x435a90 <mi_arena_alloc_from+0x180>
               	movl	$64, %ebp
               	addq	$1, %rdx
               	testq	%rbp, %rbp
               	jne	0x435b67 <mi_arena_alloc_from+0x257>
               	jmp	0x435a90 <mi_arena_alloc_from+0x180>
               	movq	(%rbp), %rax
               	nopw	%cs:(%rax,%rax)
               	nop
               	testq	%rsi, %rax
               	jne	0x435c73 <mi_arena_alloc_from+0x363>
               	movq	%rax, %rdi
               	orq	%rsi, %rdi
               	lock
               	cmpxchgq	%rdi, (%rbp)
               	jne	0x435d10 <mi_arena_alloc_from+0x400>
               	jmp	0x435df6 <mi_arena_alloc_from+0x4e6>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x435d5f <mi_arena_alloc_from+0x44f>
               	nopl	(%rax)
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	%rbp, %r14
               	ja	0x435b00 <mi_arena_alloc_from+0x1f0>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x435d40 <mi_arena_alloc_from+0x430>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, 56(%r12,%r8,8)
               	jne	0x435d56 <mi_arena_alloc_from+0x446>
               	jmp	0x435df6 <mi_arena_alloc_from+0x4e6>
               	movq	(%r11), %rax
               	cmpq	$-1, %rax
               	je	0x435a90 <mi_arena_alloc_from+0x180>
               	je	0x435d9e <mi_arena_alloc_from+0x48e>
               	movq	%rax, %rcx
               	notq	%rcx
               	bsfq	%rcx, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x435a90 <mi_arena_alloc_from+0x180>
               	jmp	0x435daf <mi_arena_alloc_from+0x49f>
               	movl	$64, %r14d
               	cmpq	16(%rsp), %r14
               	ja	0x435a90 <mi_arena_alloc_from+0x180>
               	movq	24(%rsp), %rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	jmp	0x435de1 <mi_arena_alloc_from+0x4d1>
               	nop
               	bsrq	%rcx, %rdi
               	movl	%edi, %ecx
               	subl	%r14d, %ecx
               	addq	$1, %rdi
               	addb	$1, %cl
               	shlq	%cl, %rsi
               	movq	%rdi, %r14
               	cmpq	16(%rsp), %r14
               	ja	0x435a90 <mi_arena_alloc_from+0x180>
               	movq	%rsi, %rcx
               	andq	%rax, %rcx
               	jne	0x435dc0 <mi_arena_alloc_from+0x4b0>
               	movq	%rsi, %rcx
               	orq	%rax, %rcx
               	lock
               	cmpxchgq	%rcx, (%r11)
               	jne	0x435dd6 <mi_arena_alloc_from+0x4c6>
               	shlq	$6, %r8
               	addq	%r8, %r14
               	movq	200(%rsp), %rax
               	movq	192(%rsp), %r13
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%r12)
               	movq	(%r12), %r15
               	movq	%r14, %rbp
               	shlq	$24, %rbp
               	movq	%r14, %rcx
               	shlq	$8, %rcx
               	movq	56(%rsp), %rdx
               	addl	$1, %edx
               	movzbl	%dl, %edx
               	orq	%rcx, %rdx
               	movq	%rdx, (%rax)
               	movq	40(%r12), %rdi
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	xorl	%ecx, %ecx
               	callq	0x4360e0 <_mi_bitmap_claim_across>
               	movb	%al, (%r13)
               	movb	30(%r12), %al
               	movq	32(%rsp), %rcx
               	movb	%al, (%rcx)
               	movb	$1, %al
               	cmpb	$0, 30(%r12)
               	jne	0x435e6b <mi_arena_alloc_from+0x55b>
               	movb	29(%r12), %al
               	addq	%rbp, %r15
               	movq	64(%rsp), %rcx
               	movb	%al, (%rcx)
               	cmpb	$0, 29(%r12)
               	movq	40(%rsp), %r13
               	je	0x435ea1 <mi_arena_alloc_from+0x591>
               	movb	$1, (%r13)
               	jmp	0x435e8c <mi_arena_alloc_from+0x57c>
               	xorl	%r15d, %r15d
               	movq	%r15, %rax
               	addq	$136, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	cmpb	$0, (%r13)
               	je	0x435ef3 <mi_arena_alloc_from+0x5e3>
               	movq	48(%r12), %rdi
               	leaq	15(%rsp), %rcx
               	movq	%rbx, %rsi
               	movq	%r14, %rdx
               	callq	0x4360e0 <_mi_bitmap_claim_across>
               	cmpb	$0, 15(%rsp)
               	je	0x435e8c <mi_arena_alloc_from+0x57c>
               	shlq	$24, %rbx
               	leaq	14(%rsp), %r8
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	callq	0x42ea80 <mi_os_commitx>
               	cmpb	$0, 14(%rsp)
               	je	0x435e8c <mi_arena_alloc_from+0x57c>
               	movq	192(%rsp), %rax
               	movb	$1, (%rax)
               	jmp	0x435e8c <mi_arena_alloc_from+0x57c>
               	movq	%r15, %r11
               	movq	48(%r12), %rdi
               	movq	%r14, %rbp
               	shrq	$6, %rbp
               	andl	$63, %r14d
               	leaq	(%r14,%rbx), %rax
               	cmpq	$64, %rax
               	ja	0x43606a <mi_arena_alloc_from+0x75a>
               	cmpq	$63, %rbx
               	jbe	0x435f23 <mi_arena_alloc_from+0x613>
               	movq	$-1, %rsi
               	jmp	0x435f41 <mi_arena_alloc_from+0x631>
               	testq	%rbx, %rbx
               	je	0x436060 <mi_arena_alloc_from+0x750>
               	movq	$-1, %rsi
               	movl	%ebx, %ecx
               	shlq	%cl, %rsi
               	notq	%rsi
               	movl	%r14d, %ecx
               	shlq	%cl, %rsi
               	xorl	%r10d, %r10d
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	(%rdi,%rbp,8), %rcx
               	andq	%rsi, %rcx
               	cmpq	%rsi, %rcx
               	sete	%cl
               	leaq	(%rdi,%rbp,8), %rdi
               	addq	$8, %rdi
               	testq	%rdx, %rdx
               	je	0x43603b <mi_arena_alloc_from+0x72b>
               	leaq	-1(%rdx), %r9
               	movq	%rdx, %rsi
               	andq	$3, %rsi
               	je	0x435f9d <mi_arena_alloc_from+0x68d>
               	xorl	%ebx, %ebx
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	andq	%r10, %rbp
               	cmpq	%r10, %rbp
               	movzbl	%cl, %ecx
               	cmovnel	%ebx, %ecx
               	addq	$8, %rdi
               	addq	$-1, %rsi
               	jne	0x435f80 <mi_arena_alloc_from+0x670>
               	andq	$-4, %rdx
               	cmpq	$3, %r9
               	movq	%r11, %r15
               	jb	0x43603e <mi_arena_alloc_from+0x72e>
               	leaq	-4(%rdx), %rsi
               	testb	$4, %sil
               	jne	0x435fe4 <mi_arena_alloc_from+0x6d4>
               	movq	(%rdi), %rdx
               	movq	8(%rdi), %rbp
               	andq	%rdx, %rbp
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rbx
               	andq	%rdx, %rbx
               	andq	%rbp, %rbx
               	movq	%r11, %r15
               	andq	%r10, %rbx
               	xorl	%edx, %edx
               	cmpq	%r10, %rbx
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	addq	$32, %rdi
               	movq	%rsi, %rdx
               	cmpq	$4, %rsi
               	jb	0x43603e <mi_arena_alloc_from+0x72e>
               	xorl	%r9d, %r9d
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	movq	8(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	16(%rdi), %rbp
               	movq	24(%rdi), %rsi
               	andq	%rbp, %rsi
               	andq	%rbx, %rsi
               	movq	32(%rdi), %rbp
               	movq	40(%rdi), %rbx
               	andq	%rbp, %rbx
               	movq	48(%rdi), %rbp
               	movq	56(%rdi), %rax
               	andq	%rbp, %rax
               	andq	%rbx, %rax
               	andq	%rsi, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%r9d, %ecx
               	addq	$64, %rdi
               	addq	$-8, %rdx
               	jne	0x435ff0 <mi_arena_alloc_from+0x6e0>
               	movq	%r11, %r15
               	testq	%r8, %r8
               	je	0x436054 <mi_arena_alloc_from+0x744>
               	movq	(%rdi), %rax
               	andq	%r8, %rax
               	xorl	%edx, %edx
               	cmpq	%r8, %rax
               	movzbl	%cl, %ecx
               	cmovnel	%edx, %ecx
               	andb	$1, %cl
               	movb	%cl, (%r13)
               	jmp	0x435e8c <mi_arena_alloc_from+0x57c>
               	xorl	%r10d, %r10d
               	xorl	%esi, %esi
               	jmp	0x435f44 <mi_arena_alloc_from+0x634>
               	movl	$64, %r9d
               	subq	%r14, %r9
               	movq	%r14, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rdx
               	shlq	%cl, %rdx
               	notq	%rdx
               	movl	%r14d, %ecx
               	shlq	%cl, %rdx
               	xorl	%r8d, %r8d
               	cmpq	$1, %r14
               	movl	$0, %esi
               	sbbq	%rsi, %rsi
               	orq	%rdx, %rsi
               	subq	%r9, %rbx
               	movq	%rbx, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rbx
               	je	0x435f49 <mi_arena_alloc_from+0x639>
               	movq	$-1, %r10
               	movq	$-1, %r8
               	movl	%ebx, %ecx
               	shlq	%cl, %r8
               	notq	%r8
               	jmp	0x435f49 <mi_arena_alloc_from+0x639>
               	nopw	%cs:(%rax,%rax)

<_mi_bitmap_claim_across>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	movq	%rcx, %r8
               	movq	%rdx, %rax
               	shrq	$6, %rax
               	andl	$63, %edx
               	leaq	(%rdx,%rsi), %rcx
               	cmpq	$64, %rcx
               	ja	0x436397 <_mi_bitmap_claim_across+0x2b7>
               	cmpq	$63, %rsi
               	jbe	0x436114 <_mi_bitmap_claim_across+0x34>
               	movq	$-1, %rbp
               	jmp	0x436131 <_mi_bitmap_claim_across+0x51>
               	testq	%rsi, %rsi
               	je	0x43625c <_mi_bitmap_claim_across+0x17c>
               	movq	$-1, %rbp
               	movl	%esi, %ecx
               	shlq	%cl, %rbp
               	notq	%rbp
               	movl	%edx, %ecx
               	shlq	%cl, %rbp
               	xorl	%r10d, %r10d
               	xorl	%r9d, %r9d
               	xorl	%edx, %edx
               	leaq	(%rdi,%rax,8), %rcx
               	movq	(%rdi,%rax,8), %rax
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%rbp, %rsi
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	jne	0x436150 <_mi_bitmap_claim_across+0x70>
               	xorl	%edi, %edi
               	andq	%rbp, %rax
               	sete	%r15b
               	xorl	%esi, %esi
               	cmpq	%rbp, %rax
               	setne	%r11b
               	addq	$8, %rcx
               	testq	%rdx, %rdx
               	je	0x43618b <_mi_bitmap_claim_across+0xab>
               	testb	$1, %dl
               	jne	0x436193 <_mi_bitmap_claim_across+0xb3>
               	movq	%rdx, %r13
               	cmpq	$1, %rdx
               	jne	0x4361d9 <_mi_bitmap_claim_across+0xf9>
               	jmp	0x436343 <_mi_bitmap_claim_across+0x263>
               	movl	%r15d, %edi
               	jmp	0x436343 <_mi_bitmap_claim_across+0x263>
               	leaq	-1(%rdx), %r13
               	movq	(%rcx), %rax
               	nopw	(%rax,%rax)
               	movq	%rax, %rbp
               	orq	%r10, %rbp
               	lock
               	cmpxchgq	%rbp, (%rcx)
               	jne	0x4361a0 <_mi_bitmap_claim_across+0xc0>
               	xorl	%ebp, %ebp
               	andq	%r10, %rax
               	movb	%r15b, %dil
               	cmovnel	%ebp, %edi
               	cmpq	%r10, %rax
               	movb	%r11b, %sil
               	movl	$1, %r11d
               	cmovel	%esi, %r11d
               	addq	$8, %rcx
               	movl	%edi, %r15d
               	cmpq	$1, %rdx
               	je	0x436343 <_mi_bitmap_claim_across+0x263>
               	leaq	-2(%r13), %rbp
               	testb	$2, %bpl
               	jne	0x436266 <_mi_bitmap_claim_across+0x186>
               	movq	(%rcx), %rdx
               	nopw	(%rax,%rax)
               	movq	%rdx, %rsi
               	orq	%r10, %rsi
               	movq	%rdx, %rax
               	lock
               	cmpxchgq	%rsi, (%rcx)
               	movq	%rax, %rdx
               	jne	0x4361f0 <_mi_bitmap_claim_across+0x110>
               	movq	8(%rcx), %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 8(%rcx)
               	jne	0x436210 <_mi_bitmap_claim_across+0x130>
               	movq	%rax, %rsi
               	orq	%rdx, %rsi
               	xorl	%ebx, %ebx
               	testq	%rsi, %r10
               	movzbl	%r15b, %edi
               	cmovnel	%ebx, %edi
               	andq	%rdx, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	addq	$16, %rcx
               	movq	%rbp, %r13
               	movl	%edi, %r15d
               	cmpq	$2, %rbp
               	jae	0x436270 <_mi_bitmap_claim_across+0x190>
               	jmp	0x436343 <_mi_bitmap_claim_across+0x263>
               	xorl	%r10d, %r10d
               	xorl	%ebp, %ebp
               	jmp	0x436134 <_mi_bitmap_claim_across+0x54>
               	cmpq	$2, %rbp
               	jb	0x436343 <_mi_bitmap_claim_across+0x263>
               	xorl	%r14d, %r14d
               	movl	$1, %r12d
               	movl	%r15d, %edi
               	nopl	(%rax)
               	movq	(%rcx), %rsi
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rdx
               	orq	%r10, %rdx
               	movq	%rsi, %rax
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	movq	%rax, %rsi
               	jne	0x436290 <_mi_bitmap_claim_across+0x1b0>
               	movq	8(%rcx), %rbp
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdx
               	orq	%r10, %rdx
               	movq	%rbp, %rax
               	lock
               	cmpxchgq	%rdx, 8(%rcx)
               	movq	%rax, %rbp
               	jne	0x4362b0 <_mi_bitmap_claim_across+0x1d0>
               	movq	%rbp, %rdx
               	orq	%rsi, %rdx
               	andq	%rsi, %rbp
               	movq	16(%rcx), %rbx
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	%rbx, %rsi
               	orq	%r10, %rsi
               	movq	%rbx, %rax
               	lock
               	cmpxchgq	%rsi, 16(%rcx)
               	movq	%rax, %rbx
               	jne	0x4362e0 <_mi_bitmap_claim_across+0x200>
               	addq	$-4, %r13
               	movq	24(%rcx), %rax
               	movq	%rax, %rsi
               	orq	%r10, %rsi
               	lock
               	cmpxchgq	%rsi, 24(%rcx)
               	jne	0x436300 <_mi_bitmap_claim_across+0x220>
               	movq	%rax, %rsi
               	orq	%rbx, %rsi
               	orq	%rdx, %rsi
               	testq	%rsi, %r10
               	movzbl	%dil, %edi
               	cmovnel	%r14d, %edi
               	andq	%rbx, %rax
               	andq	%rbp, %rax
               	andq	%r10, %rax
               	cmpq	%r10, %rax
               	movzbl	%r11b, %r11d
               	cmovnel	%r12d, %r11d
               	addq	$32, %rcx
               	testq	%r13, %r13
               	jne	0x436280 <_mi_bitmap_claim_across+0x1a0>
               	testq	%r9, %r9
               	je	0x43637a <_mi_bitmap_claim_across+0x29a>
               	movq	(%rcx), %rax
               	nop
               	movq	%rax, %rdx
               	orq	%r9, %rdx
               	lock
               	cmpxchgq	%rdx, (%rcx)
               	jne	0x436350 <_mi_bitmap_claim_across+0x270>
               	xorl	%ecx, %ecx
               	andq	%r9, %rax
               	movzbl	%dil, %edi
               	cmovnel	%ecx, %edi
               	cmpq	%r9, %rax
               	movzbl	%r11b, %eax
               	movl	$1, %r11d
               	cmovel	%eax, %r11d
               	testq	%r8, %r8
               	je	0x436386 <_mi_bitmap_claim_across+0x2a6>
               	andb	$1, %r11b
               	movb	%r11b, (%r8)
               	andb	$1, %dil
               	movl	%edi, %eax
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$64, %r11d
               	subq	%rdx, %r11
               	movq	%rdx, %rcx
               	negq	%rcx
               	movq	$-1, %r10
               	movq	$-1, %rbx
               	shlq	%cl, %rbx
               	notq	%rbx
               	movl	%edx, %ecx
               	shlq	%cl, %rbx
               	xorl	%r9d, %r9d
               	cmpq	$1, %rdx
               	movl	$0, %ebp
               	sbbq	%rbp, %rbp
               	orq	%rbx, %rbp
               	subq	%r11, %rsi
               	movq	%rsi, %rdx
               	shrq	$6, %rdx
               	andq	$63, %rsi
               	je	0x436139 <_mi_bitmap_claim_across+0x59>
               	movq	$-1, %r10
               	movq	$-1, %r9
               	movl	%esi, %ecx
               	shlq	%cl, %r9
               	notq	%r9
               	jmp	0x436139 <_mi_bitmap_claim_across+0x59>

<_mi_usable_size>:
               	movq	%rdi, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	je	0x436440 <_mi_usable_size+0x40>
               	movl	%edi, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movq	96(%rax), %rcx
               	shrq	%cl, %rdx
               	shlq	$6, %rdx
               	leaq	(%rax,%rdx), %r8
               	addq	$120, %r8
               	testb	$2, 126(%rax,%rdx)
               	movl	140(%rax,%rdx), %esi
               	jne	0x436446 <_mi_usable_size+0x46>
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x436454 <_mi_usable_size+0x54>
               	movq	%rsi, %rax
               	retq
               	xorl	%esi, %esi
               	movq	%rsi, %rax
               	retq
               	movl	112(%rax), %edx
               	cmpl	$3, %edx
               	jne	0x43646b <_mi_usable_size+0x6b>
               	movq	72(%rax), %r9
               	jmp	0x436474 <_mi_usable_size+0x74>
               	movq	%r8, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	112(%rax), %edi
               	cmpl	$3, %edi
               	jne	0x4364a8 <_mi_usable_size+0xa8>
               	movq	72(%rax), %rdx
               	jmp	0x4364b3 <_mi_usable_size+0xb3>
               	movl	$1, %r9d
               	shlq	%cl, %r9
               	movzbl	(%r8), %r11d
               	imulq	%r11, %r9
               	addq	%rax, %r9
               	testq	%r11, %r11
               	jne	0x436509 <_mi_usable_size+0x109>
               	addq	80(%rax), %r9
               	cmpl	$1, %edx
               	ja	0x436509 <_mi_usable_size+0x109>
               	testl	%esi, %esi
               	je	0x436509 <_mi_usable_size+0x109>
               	movq	%r9, %rax
               	shrq	$32, %rax
               	je	0x4364f1 <_mi_usable_size+0xf1>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4364f8 <_mi_usable_size+0xf8>
               	movb	96(%rax), %cl
               	movl	$1, %edx
               	shlq	%cl, %rdx
               	movzbl	(%r8), %ecx
               	testq	%rcx, %rcx
               	je	0x4364c0 <_mi_usable_size+0xc0>
               	movq	%rdx, %rax
               	retq
               	movq	80(%rax), %r9
               	movq	%rdx, %r8
               	subq	%r9, %r8
               	cmpl	$1, %edi
               	ja	0x4364ed <_mi_usable_size+0xed>
               	testl	%esi, %esi
               	je	0x4364ed <_mi_usable_size+0xed>
               	imulq	%rcx, %rdx
               	addq	%rdx, %rax
               	addq	%r9, %rax
               	movq	%rax, %rcx
               	shrq	$32, %rcx
               	je	0x43653e <_mi_usable_size+0x13e>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x436542 <_mi_usable_size+0x142>
               	movq	%r8, %rax
               	retq
               	movl	%r9d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	leaq	(%r9,%rax), %rcx
               	cmpq	%rsi, %rax
               	cmovbq	%rcx, %r9
               	cmpl	$67108864, %esi         # imm = 0x4000000
               	jae	0x436558 <_mi_usable_size+0x158>
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43652f <_mi_usable_size+0x12f>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rdi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %edi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%ecx, %ecx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rcx
               	subq	%rcx, %r8
               	movq	%r8, %rax
               	retq
               	andq	$-4194304, %r8          # imm = 0xFFC00000
               	movl	112(%r8), %eax
               	cmpl	$3, %eax
               	jne	0x43656e <_mi_usable_size+0x16e>
               	movq	72(%r8), %r10
               	jmp	0x43657b <_mi_usable_size+0x17b>
               	movb	96(%r8), %cl
               	movl	$1, %r10d
               	shlq	%cl, %r10
               	testb	%r11b, %r11b
               	jne	0x4365cc <_mi_usable_size+0x1cc>
               	movq	80(%r8), %rdx
               	movq	%r10, %rcx
               	subq	%rdx, %rcx
               	cmpl	$1, %eax
               	ja	0x4365c9 <_mi_usable_size+0x1c9>
               	testl	%esi, %esi
               	je	0x4365c9 <_mi_usable_size+0x1c9>
               	imulq	%r11, %r10
               	addq	%r8, %r10
               	addq	%rdx, %r10
               	movq	%r10, %rax
               	shrq	$32, %rax
               	je	0x4365b0 <_mi_usable_size+0x1b0>
               	movq	%r10, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x4365b7 <_mi_usable_size+0x1b7>
               	movl	%r10d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %r10
               	subq	%r9, %rdi
               	movq	%rdi, %rax
               	orq	%r10, %rax
               	shrq	$32, %rax
               	je	0x4365e8 <_mi_usable_size+0x1e8>
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	divq	%r10
               	movq	%rdx, %rdi
               	jmp	0x4365f1 <_mi_usable_size+0x1f1>
               	movl	%edi, %eax
               	xorl	%edx, %edx
               	divl	%r10d
               	movl	%edx, %edi
               	movl	112(%r8), %edx
               	cmpl	$3, %edx
               	jne	0x436600 <_mi_usable_size+0x200>
               	movq	72(%r8), %rax
               	jmp	0x43660c <_mi_usable_size+0x20c>
               	movb	96(%r8), %cl
               	movl	$1, %eax
               	shlq	%cl, %rax
               	testb	%r11b, %r11b
               	je	0x43661b <_mi_usable_size+0x21b>
               	movq	%rax, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	movq	80(%r8), %r9
               	movq	%rax, %rcx
               	subq	%r9, %rcx
               	cmpl	$1, %edx
               	ja	0x436664 <_mi_usable_size+0x264>
               	testl	%esi, %esi
               	je	0x436664 <_mi_usable_size+0x264>
               	imulq	%r11, %rax
               	addq	%rax, %r8
               	addq	%r9, %r8
               	movq	%r8, %rax
               	shrq	$32, %rax
               	je	0x43664b <_mi_usable_size+0x24b>
               	movq	%r8, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x436652 <_mi_usable_size+0x252>
               	movl	%r8d, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%rsi, %rax
               	subq	%rdx, %rax
               	xorl	%edx, %edx
               	cmpq	%rsi, %rax
               	cmovbq	%rax, %rdx
               	subq	%rdx, %rcx
               	movq	%rcx, %rsi
               	subq	%rdi, %rsi
               	movq	%rsi, %rax
               	retq
               	nop

<_mi_heap_malloc_zero>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r14
               	cmpq	$1024, %rsi             # imm = 0x400
               	ja	0x4366f8 <_mi_heap_malloc_zero+0x88>
               	leaq	7(%r14), %rax
               	andq	$-8, %rax
               	movq	8(%rdi,%rax), %rax
               	movq	8(%rax), %rbx
               	testq	%rbx, %rbx
               	je	0x4366f8 <_mi_heap_malloc_zero+0x88>
               	addl	$1, 16(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, 8(%rax)
               	testq	%rbx, %rbx
               	je	0x4366ed <_mi_heap_malloc_zero+0x7d>
               	movq	%rbx, %rax
               	andq	$-4194304, %rax         # imm = 0xFFC00000
               	movl	%ebx, %edx
               	andl	$4194303, %edx          # imm = 0x3FFFFF
               	movb	96(%rax), %cl
               	shrq	%cl, %rdx
               	cmpq	$9, %r14
               	jb	0x4366d8 <_mi_heap_malloc_zero+0x68>
               	shlq	$6, %rdx
               	movb	127(%rax,%rdx), %al
               	andb	$1, %al
               	je	0x4366d8 <_mi_heap_malloc_zero+0x68>
               	movq	$0, (%rbx)
               	jmp	0x4366ed <_mi_heap_malloc_zero+0x7d>
               	movq	%rbx, %rdi
               	callq	0x436400 <_mi_usable_size>
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	movq	%rax, %rdx
               	callq	0x413750 <memset@plt>
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%r14, %rsi
               	callq	0x432c60 <_mi_malloc_generic>
               	movq	%rax, %rbx
               	testq	%rbx, %rbx
               	jne	0x4366a6 <_mi_heap_malloc_zero+0x36>
               	jmp	0x4366ed <_mi_heap_malloc_zero+0x7d>
               	nopw	(%rax,%rax)

<__cxa_demangle>:
               	movl	$4294967294, (%rcx)     # imm = 0xFFFFFFFE
               	xorl	%eax, %eax
               	retq
               	nopl	(%rax)

<konan::consoleErrorf(char const*, ...)>:
               	subq	$1240, %rsp             # imm = 0x4D8
               	movq	%rdi, %r10
               	testb	%al, %al
               	je	0x436765 <konan::consoleErrorf(char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rsi, 40(%rsp)
               	movq	%rdx, 48(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	1248(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430216, %rax     # imm = 0x3000000008
               	movq	%rax, (%rsp)
               	leaq	208(%rsp), %rdi
               	movq	%rsp, %rcx
               	movl	$1024, %esi             # imm = 0x400
               	movq	%r10, %rdx
               	callq	0x4138b0 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x4367de <konan::consoleErrorf(char const*, ...)+0xbe>
               	cmpl	$1023, %eax             # imm = 0x3FF
               	movl	$1023, %edx             # imm = 0x3FF
               	cmovbl	%eax, %edx
               	leaq	208(%rsp), %rsi
               	movl	$2, %edi
               	callq	0x413940 <write@plt>
               	addq	$1240, %rsp             # imm = 0x4D8
               	retq
               	nopw	%cs:(%rax,%rax)

<konan::gettid()>:
               	movl	$186, %edi
               	xorl	%eax, %eax
               	jmp	0x413810 <syscall@plt>
               	nopl	(%rax)

<kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$216, %rsp
               	movq	%rsi, %rbx
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x43684b <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x4b>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	240(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	testq	%rbx, %rbx
               	je	0x436895 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x95>
               	cmpq	$1, %rbx
               	jne	0x436899 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0x99>
               	movb	$0, (%r14)
               	movl	$1, %ebx
               	jmp	0x4368be <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	xorl	%ebx, %ebx
               	jmp	0x4368be <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movq	%rsp, %rcx
               	movq	%r14, %rdi
               	movq	%rbx, %rsi
               	callq	0x4138b0 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x4368be <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)+0xbe>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	addq	%rax, %r14
               	subq	%rax, %rbx
               	movq	%r14, %rax
               	movq	%rbx, %rdx
               	addq	$216, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nop

<kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>:
               	subq	$216, %rsp
               	movq	%rdx, %rdi
               	testb	%al, %al
               	je	0x436915 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)+0x45>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rsi
               	callq	0x436960 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>
               	callq	0x436a00 <konan::abort()>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$1024, %rsp             # imm = 0x400
               	movq	%rsi, %r14
               	movq	%rdi, %r15
               	leaq	61633(%rip), %rdx       # 0x445a3a <typeinfo name for kotlin::gc::GCSchedulerData+0x1901>
               	movq	%rsp, %rdi
               	movl	$1024, %esi             # imm = 0x400
               	xorl	%eax, %eax
               	callq	0x436800 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	testq	%rdx, %rdx
               	je	0x4369a0 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x40>
               	movq	%rdx, %rbx
               	cmpq	$1, %rdx
               	jne	0x4369a4 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x44>
               	movb	$0, (%rax)
               	movl	$1, %ebx
               	jmp	0x4369c9 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	xorl	%ebx, %ebx
               	jmp	0x4369c9 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movq	%rax, %rdi
               	movq	%rbx, %rsi
               	movq	%r15, %rdx
               	movq	%r14, %rcx
               	callq	0x4138b0 <vsnprintf@plt>
               	testl	%eax, %eax
               	js	0x4369c9 <(anonymous namespace)::PrintAssert(bool, char const*, char const*, __va_list_tag*)+0x69>
               	movl	%eax, %eax
               	leaq	-1(%rbx), %rcx
               	cmpq	%rax, %rcx
               	cmovbq	%rcx, %rax
               	subq	%rax, %rbx
               	movl	$1024, %edx             # imm = 0x400
               	subl	%ebx, %edx
               	movq	%rsp, %rsi
               	movl	$2, %edi
               	callq	0x413940 <write@plt>
               	leaq	61705(%rip), %rdi       # 0x445aed <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	xorl	%eax, %eax
               	callq	0x436720 <konan::consoleErrorf(char const*, ...)>
               	addq	$1024, %rsp             # imm = 0x400
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>

<konan::abort()>:
               	pushq	%rax
               	callq	0x413950 <abort@plt>
               	nopw	%cs:(%rax,%rax)

<kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, %r14
               	leaq	8(%rsp), %rdi
               	callq	0x4372d0 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
               	movq	8(%rsp), %rbx
               	movq	16(%rsp), %r12
               	movq	%r12, %r13
               	subq	%rbx, %r13
               	movq	%r13, %r15
               	sarq	$3, %r15
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r14)
               	movq	$0, 16(%r14)
               	testq	%r13, %r13
               	je	0x436a64 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x54>
               	movl	$8, %esi
               	movq	%r15, %rdi
               	callq	0x413700 <calloc@plt>
               	jmp	0x436a66 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x56>
               	xorl	%eax, %eax
               	movq	%rax, (%r14)
               	movq	%rax, 8(%r14)
               	leaq	(%rax,%r15,8), %rcx
               	movq	%rcx, 16(%r14)
               	cmpq	%r12, %rbx
               	je	0x436b98 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	addq	$-8, %r13
               	cmpq	$24, %r13
               	jb	0x436b80 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	shrq	$3, %r13
               	addq	$1, %r13
               	leaq	(%rbx,%r13,8), %rcx
               	cmpq	%rcx, %rax
               	jae	0x436aaa <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x9a>
               	leaq	(%rax,%r13,8), %rcx
               	cmpq	%rcx, %rbx
               	jb	0x436b80 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	%r13, %rcx
               	andq	$-4, %rcx
               	leaq	-4(%rcx), %rdi
               	movq	%rdi, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %edx
               	andl	$3, %edx
               	cmpq	$12, %rdi
               	jae	0x436acf <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xbf>
               	xorl	%edi, %edi
               	jmp	0x436b38 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x128>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edi, %edi
               	nopl	(%rax,%rax)
               	movups	(%rbx,%rdi,8), %xmm0
               	movups	16(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, (%rax,%rdi,8)
               	movups	%xmm1, 16(%rax,%rdi,8)
               	movups	32(%rbx,%rdi,8), %xmm0
               	movups	48(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 32(%rax,%rdi,8)
               	movups	%xmm1, 48(%rax,%rdi,8)
               	movups	64(%rbx,%rdi,8), %xmm0
               	movups	80(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 64(%rax,%rdi,8)
               	movups	%xmm1, 80(%rax,%rdi,8)
               	movups	96(%rbx,%rdi,8), %xmm0
               	movups	112(%rbx,%rdi,8), %xmm1
               	movups	%xmm0, 96(%rax,%rdi,8)
               	movups	%xmm1, 112(%rax,%rdi,8)
               	addq	$16, %rdi
               	addq	$4, %rsi
               	jne	0x436ae0 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0xd0>
               	testq	%rdx, %rdx
               	je	0x436b6b <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x15b>
               	leaq	16(,%rdi,8), %rsi
               	negq	%rdx
               	nopl	(%rax)
               	movups	-16(%rbx,%rsi), %xmm0
               	movups	(%rbx,%rsi), %xmm1
               	movups	%xmm0, -16(%rax,%rsi)
               	movups	%xmm1, (%rax,%rsi)
               	addq	$32, %rsi
               	incq	%rdx
               	jne	0x436b50 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x140>
               	leaq	(%rax,%rcx,8), %rax
               	cmpq	%rcx, %r13
               	je	0x436b98 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x188>
               	leaq	(%rbx,%rcx,8), %rbx
               	nopl	(%rax)
               	movq	(%rbx), %rcx
               	movq	%rcx, (%rax)
               	addq	$8, %rbx
               	addq	$8, %rax
               	cmpq	%rbx, %r12
               	jne	0x436b80 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x170>
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r14)
               	testq	%rbx, %rbx
               	je	0x436ba9 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)+0x199>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$1016, %rsp             # imm = 0x3F8
               	movq	%r9, %r13
               	movl	%r8d, %r15d
               	movq	%rcx, %rbx
               	movq	%rdx, %r12
               	movq	%rdi, %r14
               	testb	%al, %al
               	je	0x436c24 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x64>
               	movaps	%xmm0, 224(%rsp)
               	movaps	%xmm1, 240(%rsp)
               	movaps	%xmm2, 256(%rsp)
               	movaps	%xmm3, 272(%rsp)
               	movaps	%xmm4, 288(%rsp)
               	movaps	%xmm5, 304(%rsp)
               	movaps	%xmm6, 320(%rsp)
               	movaps	%xmm7, 336(%rsp)
               	movl	$3176496, 496(%rsp)     # imm = 0x307830
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 128(%rsp)
               	movaps	%xmm0, 112(%rsp)
               	leaq	112(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413960 <dladdr@plt>
               	movq	112(%rsp), %rbp
               	testq	%rbp, %rbp
               	je	0x436d3e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x17e>
               	movq	%rbp, %rdi
               	movl	$47, %esi
               	callq	0x413970 <strrchr@plt>
               	leaq	1(%rax), %r8
               	testq	%rax, %rax
               	cmoveq	%rbp, %r8
               	testq	%rbx, %rbx
               	je	0x436d4e <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x18e>
               	movq	%r8, 64(%rsp)
               	leaq	144(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413960 <dladdr@plt>
               	testl	%eax, %eax
               	je	0x436cae <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	160(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x436cae <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xee>
               	movq	%rbx, %rbp
               	subq	168(%rsp), %rbp
               	jmp	0x436d22 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x162>
               	cmpq	$0, 288754(%rip)        # 0x47d4a8 <(anonymous namespace)::symbols>
               	je	0x436e0f <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x24f>
               	movq	288741(%rip), %rcx      # 0x47d4a8 <(anonymous namespace)::symbols>
               	movq	(%rcx), %rax
               	movq	8(%rcx), %rcx
               	jmp	0x436cd4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x114>
               	nop
               	addq	$24, %rax
               	cmpq	%rcx, %rax
               	je	0x436d53 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x193>
               	movq	(%rax), %rdx
               	movq	8(%rax), %rsi
               	jmp	0x436cf4 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x134>
               	nopl	(%rax)
               	addq	$24, %rdx
               	cmpq	%rsi, %rdx
               	jae	0x436cd0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x110>
               	movq	8(%rdx), %rdi
               	cmpq	%rbx, %rdi
               	ja	0x436cf0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rdx), %rbp
               	addq	%rdi, %rbp
               	cmpq	%rbx, %rbp
               	jbe	0x436cf0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x130>
               	movq	16(%rax), %rsi
               	movq	%rbx, %rbp
               	subq	%rdi, %rbp
               	testq	%rsi, %rsi
               	je	0x436d56 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	movl	(%rdx), %eax
               	addq	%rax, %rsi
               	leaq	496(%rsp), %rdi
               	movl	$512, %edx              # imm = 0x200
               	callq	0x4138c0 <strncpy@plt>
               	movb	$0, 1007(%rsp)
               	jmp	0x436d56 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x196>
               	leaq	60682(%rip), %r8        # 0x445a4f <typeinfo name for kotlin::gc::GCSchedulerData+0x1916>
               	testq	%rbx, %rbx
               	jne	0x436c7b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xbb>
               	movq	%rbx, %rbp
               	jmp	0x436d5b <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x19b>
               	movq	%rbx, %rbp
               	movq	64(%rsp), %r8
               	leaq	496(%rsp), %r10
               	leaq	60649(%rip), %rdx       # 0x445a53 <typeinfo name for kotlin::gc::GCSchedulerData+0x191a>
               	movl	$1023, %esi             # imm = 0x3FF
               	movq	%r14, %rdi
               	movq	%r12, %rcx
               	movq	%rbx, %r9
               	movl	$0, %eax
               	pushq	%rbp
               	pushq	%r10
               	callq	0x436800 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	addq	$16, %rsp
               	testb	%r15b, %r15b
               	je	0x436da5 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x1e5>
               	leaq	60633(%rip), %rcx       # 0x445a6e <typeinfo name for kotlin::gc::GCSchedulerData+0x1935>
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	xorl	%eax, %eax
               	callq	0x436800 <kotlin::FormatToSpan(kotlin::std_support::span<char, 18446744073709551615ul>, char const*, ...)>
               	leaq	176(%rsp), %rcx
               	movq	%rcx, 368(%rsp)
               	leaq	1072(%rsp), %rcx
               	movq	%rcx, 360(%rsp)
               	movabsq	$206158430256, %rcx     # imm = 0x3000000030
               	movq	%rcx, 352(%rsp)
               	testq	%rdx, %rdx
               	je	0x436dfd <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	cmpq	$1, %rdx
               	jne	0x436de7 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x227>
               	movb	$0, (%rax)
               	jmp	0x436dfd <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x23d>
               	leaq	352(%rsp), %rcx
               	movq	%rax, %rdi
               	movq	%rdx, %rsi
               	movq	%r13, %rdx
               	callq	0x4138b0 <vsnprintf@plt>
               	addq	$1016, %rsp             # imm = 0x3F8
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x436e33 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x273>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	jmp	0x436e35 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x275>
               	xorl	%eax, %eax
               	movq	%rax, 288364(%rip)      # 0x47d4a8 <(anonymous namespace)::symbols>
               	leaq	60470(%rip), %rdi       # 0x445a79 <typeinfo name for kotlin::gc::GCSchedulerData+0x1940>
               	xorl	%esi, %esi
               	xorl	%eax, %eax
               	callq	0x413980 <open@plt>
               	testl	%eax, %eax
               	js	0x436cbc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movl	%eax, %ebp
               	leaq	352(%rsp), %rdx
               	movl	$1, %edi
               	movl	%eax, %esi
               	callq	0x413990 <__fxstat@plt>
               	testl	%eax, %eax
               	js	0x436cbc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	400(%rsp), %rsi
               	xorl	%edi, %edi
               	movl	$1, %edx
               	movl	$2, %ecx
               	movl	%ebp, %r8d
               	xorl	%r9d, %r9d
               	callq	0x413870 <mmap@plt>
               	cmpq	$-1, %rax
               	je	0x436cbc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	testq	%rax, %rax
               	je	0x436cbc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	cmpw	$0, 60(%rax)
               	je	0x436cbc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	40(%rax), %rsi
               	addq	%rax, %rsi
               	xorl	%edx, %edx
               	movq	%r13, 48(%rsp)
               	movl	%r15d, 12(%rsp)
               	movq	%r12, 16(%rsp)
               	movq	%rax, 80(%rsp)
               	movq	%rsi, 72(%rsp)
               	movq	%r14, 104(%rsp)
               	jmp	0x436f17 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x357>
               	addq	$8, %r15
               	movq	%rbp, (%r12)
               	movq	%r9, 8(%r12)
               	movq	%r14, 16(%r12)
               	movq	(%r15), %rcx
               	addq	$24, %rcx
               	movq	%r15, %rdi
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	%rcx, (%rdi)
               	addq	$1, %rdx
               	movzwl	60(%rax), %ecx
               	cmpq	%rcx, %rdx
               	movq	104(%rsp), %r14
               	jae	0x436cbc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0xfc>
               	movq	%rdx, %r14
               	shlq	$6, %r14
               	movl	4(%rsi,%r14), %ecx
               	cmpl	$2, %ecx
               	jne	0x4370c7 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x507>
               	leaq	(%rsi,%r14), %r8
               	addq	$4, %r8
               	movq	24(%rsi,%r14), %r15
               	addq	%rax, %r15
               	movq	32(%rsi,%r14), %r10
               	addq	%r15, %r10
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %rbp
               	addq	%rax, %rbp
               	movq	288076(%rip), %r12      # 0x47d4a8 <(anonymous namespace)::symbols>
               	movq	8(%r12), %r13
               	cmpq	16(%r12), %r13
               	je	0x436f97 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x3d7>
               	addq	$8, %r12
               	movq	%r15, (%r13)
               	movq	%r10, 8(%r13)
               	movq	%rbp, 16(%r13)
               	movq	(%r12), %rcx
               	addq	$24, %rcx
               	movq	%r12, %rdi
               	movq	48(%rsp), %r13
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	jmp	0x4370c1 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x501>
               	movq	(%r12), %r9
               	movq	%r13, %rax
               	subq	%r9, %rax
               	movq	%rax, %rsi
               	sarq	$3, %rsi
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %rsi
               	testq	%rax, %rax
               	movq	%rsi, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%rsi), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%rsi, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%r8, 40(%rsp)
               	movq	%rdi, 32(%rsp)
               	je	0x437022 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x462>
               	movq	%rsi, 88(%rsp)
               	movl	$24, %esi
               	movq	%r9, 24(%rsp)
               	movq	%r10, 96(%rsp)
               	callq	0x413700 <calloc@plt>
               	movq	88(%rsp), %rsi
               	movq	96(%rsp), %r10
               	movq	24(%rsp), %r9
               	movq	%rax, %rdx
               	jmp	0x437024 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x464>
               	xorl	%edx, %edx
               	leaq	(%rsi,%rsi,2), %rax
               	movq	%r15, (%rdx,%rax,8)
               	movq	%r10, 8(%rdx,%rax,8)
               	movq	%rbp, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r9, %r13
               	je	0x43706c <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4ac>
               	movq	%rdx, %rbp
               	movq	%r9, %rax
               	nopl	(%rax,%rax)
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r13
               	jne	0x437050 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x490>
               	addq	$24, %rbp
               	testq	%r9, %r9
               	movl	12(%rsp), %r15d
               	je	0x437088 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x4c8>
               	movq	%r9, %rdi
               	movq	%rdx, %r13
               	callq	0x413730 <free@plt>
               	movq	%r13, %rdx
               	leaq	16(%r12), %rdi
               	movq	%rdx, (%r12)
               	movq	%rbp, 8(%r12)
               	movq	32(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movq	48(%rsp), %r13
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	movq	40(%rsp), %r8
               	movq	%rcx, (%rdi)
               	movl	(%r8), %ecx
               	cmpl	$11, %ecx
               	jne	0x436f01 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x341>
               	movq	24(%rsi,%r14), %rbp
               	addq	%rax, %rbp
               	movq	32(%rsi,%r14), %r9
               	addq	%rbp, %r9
               	movl	40(%rsi,%r14), %ecx
               	shlq	$6, %rcx
               	movq	24(%rsi,%rcx), %r14
               	addq	%rax, %r14
               	movq	287664(%rip), %r15      # 0x47d4a8 <(anonymous namespace)::symbols>
               	movq	8(%r15), %r12
               	cmpq	16(%r15), %r12
               	jne	0x436ed8 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x318>
               	movq	(%r15), %r8
               	movq	%r12, %rax
               	subq	%r8, %rax
               	movq	%rax, %r13
               	sarq	$3, %r13
               	movabsq	$-6148914691236517205, %rcx # imm = 0xAAAAAAAAAAAAAAAB
               	imulq	%rcx, %r13
               	testq	%rax, %rax
               	movq	%r13, %rax
               	movl	$1, %ecx
               	cmoveq	%rcx, %rax
               	leaq	(%rax,%r13), %rdi
               	movabsq	$768614336404564650, %rcx # imm = 0xAAAAAAAAAAAAAAA
               	cmpq	%rcx, %rdi
               	cmovaq	%rcx, %rdi
               	addq	%r13, %rax
               	cmovbq	%rcx, %rdi
               	testq	%rdi, %rdi
               	movq	%rdx, 56(%rsp)
               	movq	%rdi, 40(%rsp)
               	je	0x437181 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c1>
               	movl	$24, %esi
               	movq	%r8, 32(%rsp)
               	movq	%r9, 24(%rsp)
               	callq	0x413700 <calloc@plt>
               	movq	24(%rsp), %r9
               	movq	32(%rsp), %r8
               	movq	%rax, %rdx
               	jmp	0x437183 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5c3>
               	xorl	%edx, %edx
               	leaq	(,%r13,2), %rax
               	addq	%r13, %rax
               	movq	%rbp, (%rdx,%rax,8)
               	movq	%r9, 8(%rdx,%rax,8)
               	movq	%r14, 16(%rdx,%rax,8)
               	movq	%rdx, %rbp
               	cmpq	%r8, %r12
               	je	0x4371cc <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x60c>
               	movq	%rdx, %rbp
               	movq	%r8, %rax
               	nop
               	movq	16(%rax), %rcx
               	movq	%rcx, 16(%rbp)
               	movups	(%rax), %xmm0
               	movups	%xmm0, (%rbp)
               	addq	$24, %rax
               	addq	$24, %rbp
               	cmpq	%rax, %r12
               	jne	0x4371b0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x5f0>
               	addq	$24, %rbp
               	testq	%r8, %r8
               	movq	48(%rsp), %r13
               	je	0x4371e8 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x628>
               	movq	%r8, %rdi
               	movq	%rdx, %r14
               	callq	0x413730 <free@plt>
               	movq	%r14, %rdx
               	leaq	16(%r15), %rdi
               	movq	%rdx, (%r15)
               	movq	%rbp, 8(%r15)
               	movq	40(%rsp), %rax
               	leaq	(%rax,%rax,2), %rcx
               	leaq	(%rdx,%rcx,8), %rcx
               	movl	12(%rsp), %r15d
               	movq	16(%rsp), %r12
               	movq	80(%rsp), %rax
               	movq	72(%rsp), %rsi
               	movq	56(%rsp), %rdx
               	jmp	0x436efe <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)+0x33e>
               	nop

<std::__throw_length_error(char const*)>:
               	pushq	%rax
               	movq	%rdi, %rcx
               	leaq	59425(%rip), %rdx       # 0x445a4c <typeinfo name for kotlin::gc::GCSchedulerData+0x1913>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x4368d0 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	nopw	%cs:(%rax,%rax)

<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	8(%rdi), %r15
               	cmpq	%r15, %rbx
               	je	0x43727f <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3f>
               	movq	%rdi, %r14
               	jmp	0x437269 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x29>
               	nopl	(%rax)
               	addq	$16, %rbx
               	cmpq	%r15, %rbx
               	je	0x43727c <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x3c>
               	movq	(%rbx), %rdi
               	addq	$16, %rbx
               	cmpq	%rbx, %rdi
               	je	0x437260 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	callq	0x413730 <free@plt>
               	jmp	0x437260 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x20>
               	movq	(%r14), %rbx
               	testq	%rbx, %rbx
               	je	0x437291 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()+0x51>
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	jmp	0x413730 <free@plt>
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	retq
               	nopw	(%rax,%rax)

<kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>:
               	testq	%rdi, %rdi
               	je	0x4372c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
               	movl	%esi, %eax
               	xchgl	%eax, 328(%rdi)
               	testl	%esi, %esi
               	jne	0x4372c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
               	cmpl	$1, %eax
               	jne	0x4372c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
               	movb	187028(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x4372c1 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x21>
               	retq
               	addq	$328, %rdi              # imm = 0x148
               	jmp	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopl	(%rax)

<kotlin::internal::GetCurrentStackTrace(unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r12
               	movl	$1, %r14d
               	testq	%r12, %r12
               	je	0x437309 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x39>
               	xchgl	%r14d, 328(%r12)
               	jmp	0x43730c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c>
               	xorl	%r12d, %r12d
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	$0, 16(%rsp)
               	leaq	317(%rip), %rdi         # 0x437460 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
               	leaq	16(%rsp), %rsi
               	callq	0x4139a0 <_Unwind_Backtrace@plt>
               	movq	16(%rsp), %rbx
               	cmpq	$4, %rbx
               	jbe	0x4373cc <kotlin::internal::GetCurrentStackTrace(unsigned long)+0xfc>
               	addq	$-4, %rbx
               	movq	%rbx, %rax
               	shrq	$61, %rax
               	jne	0x43742b <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x15b>
               	movl	$8, %esi
               	movq	%rbx, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	leaq	(,%rbx,8), %rbp
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	movq	%rbp, %rdx
               	callq	0x413750 <memset@plt>
               	movq	%r13, (%rsp)
               	leaq	(,%rbx,8), %rbx
               	addq	%r13, %rbx
               	movq	%rbx, 8(%rsp)
               	sarq	$3, %rbp
               	movq	$0, 24(%rsp)
               	movq	$4, 32(%rsp)
               	movq	%r13, 40(%rsp)
               	movq	%rbp, 48(%rsp)
               	leaq	195(%rip), %rdi         # 0x437470 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
               	leaq	24(%rsp), %rsi
               	callq	0x4139a0 <_Unwind_Backtrace@plt>
               	movaps	(%rsp), %xmm0
               	movups	%xmm0, (%r15)
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, (%rsp)
               	movq	%rbx, 16(%r15)
               	jmp	0x4373e9 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x119>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	$0, 16(%r15)
               	movq	(%rsp), %rdi
               	testq	%rdi, %rdi
               	je	0x4373e9 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x119>
               	callq	0x413730 <free@plt>
               	testq	%r12, %r12
               	je	0x43741c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	movl	%r14d, %eax
               	xchgl	%eax, 328(%r12)
               	testl	%r14d, %r14d
               	jne	0x43741c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	cmpl	$1, %eax
               	jne	0x43741c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	movb	186695(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43741c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
               	addq	$328, %r12              # imm = 0x148
               	movq	%r12, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	58966(%rip), %rdi       # 0x445a88 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x437220 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	jmp	0x437442 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x172>
               	movq	%rax, %rbx
               	xorl	%r13d, %r13d
               	movq	%r13, %rdi
               	callq	0x4374b0 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
               	movq	%r12, %rdi
               	movl	%r14d, %esi
               	callq	0x4372a0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>:
               	addq	$1, (%rsi)
               	xorl	%eax, %eax
               	retq
               	nopw	(%rax,%rax)

<(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>:
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	8(%rsi), %rax
               	testq	%rax, %rax
               	je	0x437489 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x19>
               	addq	$-1, %rax
               	movq	%rax, 8(%rbx)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	movq	(%rbx), %rax
               	cmpq	24(%rbx), %rax
               	jae	0x437485 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
               	callq	0x4139b0 <_Unwind_GetIP@plt>
               	movq	(%rbx), %rcx
               	movq	16(%rbx), %rdx
               	leaq	1(%rcx), %rsi
               	movq	%rsi, (%rbx)
               	movq	%rax, (%rdx,%rcx,8)
               	xorl	%eax, %eax
               	popq	%rbx
               	retq
               	nopl	(%rax)

<std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>:
               	testq	%rdi, %rdi
               	je	0x4374ba <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()+0xa>
               	jmp	0x413730 <free@plt>
               	retq
               	nopl	(%rax,%rax)

<CreateStringFromCString>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rsi, %r15
               	testq	%rdi, %rdi
               	je	0x4375c2 <CreateStringFromCString+0x102>
               	movq	%rdi, %r12
               	callq	0x413710 <strlen@plt>
               	movq	%rax, %r13
               	leaq	(%r12,%rax), %rbx
               	movq	%r12, (%rsp)
               	testq	%rax, %rax
               	movq	%r15, 24(%rsp)
               	jle	0x4375c9 <CreateStringFromCString+0x109>
               	movq	%r13, 32(%rsp)
               	movq	%r12, 16(%rsp)
               	xorl	%r14d, %r14d
               	movq	%rsp, %r13
               	leaq	12(%rsp), %rbp
               	movl	$52, %r12d
               	movl	$10, %r15d
               	jmp	0x437539 <CreateStringFromCString+0x79>
               	nop
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	movq	%rax, (%rsp)
               	movl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jae	0x4375a9 <CreateStringFromCString+0xe9>
               	movl	$0, 12(%rsp)
               	movq	%r13, %rdi
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	callq	0x437730 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r12d
               	jb	0x437520 <CreateStringFromCString+0x60>
               	btl	%eax, %r15d
               	jae	0x43758d <CreateStringFromCString+0xcd>
               	movq	(%rsp), %rcx
               	addq	$1, %rcx
               	nopl	(%rax,%rax)
               	movq	%rcx, %rax
               	movq	%rcx, (%rsp)
               	cmpq	%rbx, %rcx
               	jae	0x43752c <CreateStringFromCString+0x6c>
               	movzbl	(%rax), %edx
               	andb	$-64, %dl
               	leaq	1(%rax), %rcx
               	cmpb	$-128, %dl
               	je	0x437570 <CreateStringFromCString+0xb0>
               	jmp	0x43752c <CreateStringFromCString+0x6c>
               	xorl	%ecx, %ecx
               	cmpl	$65535, 12(%rsp)        # imm = 0xFFFF
               	movq	(%rsp), %rax
               	seta	%cl
               	addl	$1, %ecx
               	addl	%ecx, %r14d
               	cmpq	%rbx, %rax
               	jb	0x437539 <CreateStringFromCString+0x79>
               	testl	%r14d, %r14d
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %r12
               	movq	32(%rsp), %r13
               	jns	0x4375cc <CreateStringFromCString+0x10c>
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	xorl	%eax, %eax
               	jmp	0x43770f <CreateStringFromCString+0x24f>
               	xorl	%r14d, %r14d
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%r14d, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbp
               	leaq	16(%rax), %rcx
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	136741(%rip), %rax      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbp)
               	movl	%r14d, 24(%rbp)
               	movq	%rcx, 16(%rsp)
               	movq	%rcx, (%r15)
               	movq	%r12, (%rsp)
               	testq	%r13, %r13
               	je	0x437705 <CreateStringFromCString+0x245>
               	addq	$32, %rbp
               	movq	%rsp, %r15
               	leaq	12(%rsp), %r12
               	movl	$52, %r14d
               	movl	$10, %r13d
               	jmp	0x437680 <CreateStringFromCString+0x1c0>
               	movl	%eax, %ecx
               	shrl	$10, %ecx
               	addl	$4294956992, %ecx       # imm = 0xFFFFD7C0
               	movw	%cx, (%rbp)
               	andl	$1023, %eax             # imm = 0x3FF
               	orl	$56320, %eax            # imm = 0xDC00
               	movw	%ax, 2(%rbp)
               	addq	$4, %rbp
               	cmpq	%rbx, (%rsp)
               	je	0x437705 <CreateStringFromCString+0x245>
               	nopl	(%rax)
               	movl	$0, 12(%rsp)
               	movq	%r15, %rdi
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x437730 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>
               	btl	%eax, %r14d
               	jae	0x4376b0 <CreateStringFromCString+0x1f0>
               	addq	$1, (%rsp)
               	jmp	0x4376e0 <CreateStringFromCString+0x220>
               	nopw	(%rax,%rax)
               	btl	%eax, %r13d
               	jae	0x4376f5 <CreateStringFromCString+0x235>
               	movq	(%rsp), %rax
               	addq	$1, %rax
               	nop
               	movq	%rax, (%rsp)
               	cmpq	%rbx, %rax
               	jae	0x4376e0 <CreateStringFromCString+0x220>
               	movzbl	(%rax), %ecx
               	andb	$-64, %cl
               	addq	$1, %rax
               	cmpb	$-128, %cl
               	je	0x4376c0 <CreateStringFromCString+0x200>
               	movl	$65533, %eax            # imm = 0xFFFD
               	movw	%ax, (%rbp)
               	addq	$2, %rbp
               	cmpq	%rbx, (%rsp)
               	jne	0x437680 <CreateStringFromCString+0x1c0>
               	jmp	0x437705 <CreateStringFromCString+0x245>
               	movl	12(%rsp), %eax
               	cmpl	$65536, %eax            # imm = 0x10000
               	jb	0x4376e5 <CreateStringFromCString+0x225>
               	jmp	0x437652 <CreateStringFromCString+0x192>
               	movq	24(%rsp), %r15
               	movq	16(%rsp), %rax
               	movq	%rax, (%r15)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)>:
               	movq	(%rdi), %r8
               	movzbl	(%r8), %ecx
               	testb	%cl, %cl
               	js	0x437753 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x23>
               	movq	%r8, %r9
               	cmpq	%rsi, %r8
               	je	0x437938 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	movl	%ecx, (%rdx)
               	addq	$1, %r9
               	movq	%r9, (%rdi)
               	xorl	%eax, %eax
               	retq
               	movl	%ecx, %eax
               	andl	$-32, %eax
               	cmpl	$192, %eax
               	jne	0x4377b4 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x84>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %esi
               	movl	%esi, %r10d
               	andb	$-64, %r10b
               	movl	$3, %eax
               	cmpb	$-128, %r10b
               	jne	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	andl	$31, %ecx
               	shll	$6, %ecx
               	andl	$63, %esi
               	orl	%esi, %ecx
               	movl	$4, %eax
               	cmpl	$128, %ecx
               	jae	0x437747 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
               	jmp	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movl	%ecx, %eax
               	andl	$-16, %eax
               	cmpl	$224, %eax
               	jne	0x43786f <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x13f>
               	movl	$1, %eax
               	cmpq	%rsi, %r8
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	leaq	1(%r8), %r9
               	movq	%r9, (%rdi)
               	cmpq	%rsi, %r9
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %r10d
               	movl	%r10d, %r9d
               	andb	$-64, %r9b
               	movl	$3, %eax
               	cmpb	$-128, %r9b
               	jne	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	shll	$12, %ecx
               	movzwl	%cx, %eax
               	andl	$63, %r10d
               	shll	$6, %r10d
               	orl	%eax, %r10d
               	movl	%r10d, %ecx
               	andl	$63488, %ecx            # imm = 0xF800
               	movl	$5, %eax
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movl	$4, %eax
               	cmpl	$2048, %r10d            # imm = 0x800
               	jb	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	leaq	2(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %esi
               	movl	%esi, %ecx
               	andb	$-64, %cl
               	movl	$3, %eax
               	cmpb	$-128, %cl
               	jne	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	andl	$63, %esi
               	orl	%esi, %r10d
               	movl	%r10d, %ecx
               	jmp	0x437747 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
               	movl	%ecx, %r9d
               	andl	$-8, %r9d
               	movl	$2, %eax
               	cmpl	$240, %r9d
               	jne	0x437752 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x22>
               	cmpq	%rsi, %r8
               	je	0x437938 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	leaq	1(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x437938 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	movzbl	(%rax), %r10d
               	movl	%r10d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x437941 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x211>
               	andl	$7, %ecx
               	shll	$18, %ecx
               	andl	$63, %r10d
               	shll	$12, %r10d
               	orl	%ecx, %r10d
               	movl	$5, %eax
               	cmpl	$1114111, %r10d         # imm = 0x10FFFF
               	ja	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movl	$4, %eax
               	cmpl	$65536, %r10d           # imm = 0x10000
               	jae	0x4378e3 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1b3>
               	movq	%r8, (%rdi)
               	retq
               	leaq	2(%r8), %rax
               	movq	%rax, (%rdi)
               	cmpq	%rsi, %rax
               	je	0x437938 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
               	movzbl	(%rax), %r11d
               	movl	%r11d, %eax
               	andb	$-64, %al
               	cmpb	$-128, %al
               	jne	0x437941 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x211>
               	leaq	3(%r8), %r9
               	movq	%r9, (%rdi)
               	movl	$1, %eax
               	cmpq	%rsi, %r9
               	je	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	movzbl	(%r9), %ecx
               	movl	%ecx, %esi
               	andb	$-64, %sil
               	movl	$3, %eax
               	cmpb	$-128, %sil
               	jne	0x4378df <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
               	andl	$63, %r11d
               	shll	$6, %r11d
               	orl	%r10d, %r11d
               	andl	$63, %ecx
               	orl	%r11d, %ecx
               	jmp	0x437747 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
               	movl	$1, %eax
               	movq	%r8, (%rdi)
               	retq
               	movl	$3, %eax
               	movq	%r8, (%rdi)
               	retq
               	nopw	(%rax,%rax)

<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movl	%edi, %r14d
               	cmpl	$127, %edi
               	ja	0x437987 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	leaq	16(%rbx), %rcx
               	cmpq	%rcx, %rax
               	je	0x437a83 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x133>
               	movq	16(%rbx), %rcx
               	jmp	0x437a93 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	%r14d, %ebp
               	cmpl	$2047, %r14d            # imm = 0x7FF
               	ja	0x4379fb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xab>
               	shrl	$6, %ebp
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x437b3f <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ef>
               	movq	16(%rbx), %rcx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x4379c9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x437bc0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	andb	$63, %r14b
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rbp
               	leaq	1(%rbp), %r15
               	cmpq	%r12, %rax
               	je	0x437a8a <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13a>
               	movq	16(%rbx), %rcx
               	jmp	0x437a8f <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x13f>
               	cmpl	$65535, %r14d           # imm = 0xFFFF
               	ja	0x437ac8 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x178>
               	shrl	$12, %ebp
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x437b6d <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x21d>
               	movq	16(%rbx), %rcx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x437a3e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x437bc0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$6, %ebp
               	andb	$63, %bpl
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	cmpq	%r12, %rax
               	je	0x437b56 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x206>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x4379bb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x4379c9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	jmp	0x437a93 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x143>
               	movl	$15, %ecx
               	orb	$-128, %r14b
               	cmpq	%rcx, %r15
               	jbe	0x437aa6 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x156>
               	movq	%rbx, %rdi
               	movq	%rbp, %rsi
               	callq	0x437bc0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r14b, (%rax,%rbp)
               	movq	%r15, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, (%rax,%r15)
               	movq	%rbx, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	shrl	$18, %ebp
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	leaq	16(%rbx), %r12
               	cmpq	%r12, %rax
               	je	0x437b84 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x234>
               	movq	16(%rbx), %rcx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	jbe	0x437afe <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movq	%rbx, %rdi
               	movq	%r15, %rsi
               	callq	0x437bc0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%bpl, (%rax,%r15)
               	movq	%r13, 8(%rbx)
               	movq	(%rbx), %rax
               	movb	$0, 1(%rax,%r15)
               	movl	%r14d, %ebp
               	shrl	$12, %ebp
               	andb	$63, %bpl
               	movq	(%rbx), %rax
               	movq	8(%rbx), %r15
               	leaq	1(%r15), %r13
               	cmpq	%r12, %rax
               	je	0x437b9b <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x24b>
               	movq	16(%rbx), %rcx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x437a30 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x437a3e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-64, %bpl
               	cmpq	%rcx, %r13
               	ja	0x4379bb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x4379c9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x4379bb <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x6b>
               	jmp	0x4379c9 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x79>
               	movl	$15, %ecx
               	orb	$-32, %bpl
               	cmpq	%rcx, %r13
               	ja	0x437a30 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x437a3e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	movl	$15, %ecx
               	orb	$-16, %bpl
               	cmpq	%rcx, %r13
               	ja	0x437af0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1a0>
               	jmp	0x437afe <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x1ae>
               	movl	$15, %ecx
               	orb	$-128, %bpl
               	cmpq	%rcx, %r13
               	ja	0x437a30 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xe0>
               	jmp	0x437a3e <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0xee>
               	nopw	%cs:(%rax,%rax)

<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %rbx
               	movq	%rdi, %r15
               	movq	(%rdi), %r14
               	movq	8(%rdi), %r12
               	leaq	1(%r12), %rbp
               	leaq	16(%rdi), %rcx
               	cmpq	%rcx, %r14
               	je	0x437c3e <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x7e>
               	movq	16(%r15), %rax
               	testq	%rbp, %rbp
               	js	0x437c48 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x88>
               	cmpq	%rax, %rbp
               	movq	%rcx, (%rsp)
               	jbe	0x437c11 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	addq	%rax, %rax
               	cmpq	%rax, %rbp
               	jae	0x437c11 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x51>
               	movabsq	$9223372036854775807, %rbp # imm = 0x7FFFFFFFFFFFFFFF
               	cmpq	%rbp, %rax
               	cmovbq	%rax, %rbp
               	subq	%rbx, %r12
               	leaq	1(%rbp), %rdi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	testq	%rbx, %rbx
               	je	0x437c37 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x77>
               	cmpq	$1, %rbx
               	jne	0x437c54 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x94>
               	movb	(%r14), %al
               	movb	%al, (%r13)
               	testq	%r12, %r12
               	jne	0x437c67 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xa7>
               	jmp	0x437c7c <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	movl	$15, %eax
               	testq	%rbp, %rbp
               	jns	0x437bef <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x2f>
               	leaq	56961(%rip), %rdi       # 0x445ad0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x437220 <std::__throw_length_error(char const*)>
               	movq	%r13, %rdi
               	movq	%r14, %rsi
               	movq	%rbx, %rdx
               	callq	0x413720 <memcpy@plt>
               	testq	%r12, %r12
               	je	0x437c7c <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xbc>
               	leaq	(%rbx,%r13), %rdi
               	addq	$1, %rdi
               	addq	%r14, %rbx
               	cmpq	$1, %r12
               	jne	0x437ca0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xe0>
               	movb	(%rbx), %al
               	movb	%al, (%rdi)
               	cmpq	(%rsp), %r14
               	je	0x437c8a <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r13, (%r15)
               	movq	%rbp, 16(%r15)
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rbx, %rsi
               	movq	%r12, %rdx
               	callq	0x413720 <memcpy@plt>
               	cmpq	(%rsp), %r14
               	jne	0x437c82 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xc2>
               	jmp	0x437c8a <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xca>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_plusImpl>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movl	8(%rsi), %ebp
               	addl	8(%rdi), %ebp
               	js	0x437d80 <Kotlin_String_plusImpl+0xc0>
               	movq	%rdx, %r14
               	movq	%rsi, %r13
               	movq	%rdi, %r15
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	134930(%rip), %rax      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	movq	%rax, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%r12, (%r14)
               	leaq	32(%rbx), %rdi
               	leaq	16(%r15), %rsi
               	movl	8(%r15), %edx
               	addq	%rdx, %rdx
               	callq	0x413720 <memcpy@plt>
               	movslq	8(%r15), %rax
               	leaq	(%rbx,%rax,2), %rdi
               	addq	$32, %rdi
               	movl	8(%r13), %edx
               	addq	$16, %r13
               	addq	%rdx, %rdx
               	movq	%r13, %rsi
               	callq	0x413720 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_subSequence>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r12
               	pushq	%rbx
               	subq	$32, %rsp
               	testl	%esi, %esi
               	js	0x437ec1 <Kotlin_String_subSequence+0x131>
               	movl	%edx, %ebp
               	movl	%esi, %ebx
               	cmpl	%esi, %edx
               	jl	0x437ec1 <Kotlin_String_subSequence+0x131>
               	movq	%rdi, %r15
               	cmpl	%ebp, 8(%rdi)
               	jb	0x437ec1 <Kotlin_String_subSequence+0x131>
               	movq	%rcx, %r14
               	subl	%ebx, %ebp
               	jne	0x437e3a <Kotlin_String_subSequence+0xaa>
               	movq	$0, 8(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbx
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 16(%rsp)
               	leaq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$12884901888, %rax      # imm = 0x300000000
               	movq	%rax, 24(%rsp)
               	movb	184129(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x437e18 <Kotlin_String_subSequence+0x88>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	leaq	157073(%rip), %r12      # 0x45e3b0 <__unnamed_6>
               	movq	%r12, (%r14)
               	movq	%rbx, %rax
               	movq	-64(%rbx), %rax
               	movq	16(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	jmp	0x437eb1 <Kotlin_String_subSequence+0x121>
               	js	0x437ec6 <Kotlin_String_subSequence+0x136>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rax
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	(%rax,%rax), %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	134581(%rip), %rcx      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	movq	%rcx, 16(%rax)
               	movl	%ebp, 24(%rax)
               	movq	%r12, (%r14)
               	leaq	32(%rax), %rdi
               	movl	%ebx, %eax
               	leaq	(%r15,%rax,2), %rsi
               	addq	$16, %rsi
               	movslq	%ebp, %rdx
               	addq	%rdx, %rdx
               	callq	0x413720 <memcpy@plt>
               	movq	%r12, (%r14)
               	movq	%r12, %rax
               	addq	$32, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	nopl	(%rax,%rax)

<Kotlin_String_get>:
               	pushq	%rax
               	cmpl	%esi, 8(%rdi)
               	jbe	0x437ee0 <Kotlin_String_get+0x10>
               	movslq	%esi, %rax
               	movzwl	16(%rdi,%rax,2), %eax
               	popq	%rcx
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	nopw	%cs:(%rax,%rax)

<konan::snprintf(char*, unsigned long, char const*, ...)>:
               	subq	$216, %rsp
               	testb	%al, %al
               	je	0x437f32 <konan::snprintf(char*, unsigned long, char const*, ...)+0x42>
               	movaps	%xmm0, 80(%rsp)
               	movaps	%xmm1, 96(%rsp)
               	movaps	%xmm2, 112(%rsp)
               	movaps	%xmm3, 128(%rsp)
               	movaps	%xmm4, 144(%rsp)
               	movaps	%xmm5, 160(%rsp)
               	movaps	%xmm6, 176(%rsp)
               	movaps	%xmm7, 192(%rsp)
               	movq	%rcx, 56(%rsp)
               	movq	%r8, 64(%rsp)
               	movq	%r9, 72(%rsp)
               	leaq	32(%rsp), %rax
               	movq	%rax, 16(%rsp)
               	leaq	224(%rsp), %rax
               	movq	%rax, 8(%rsp)
               	movabsq	$206158430232, %rax     # imm = 0x3000000018
               	movq	%rax, (%rsp)
               	movq	%rsp, %rcx
               	callq	0x4138b0 <vsnprintf@plt>
               	addq	$216, %rsp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_String_equals>:
               	pushq	%rax
               	testq	%rsi, %rsi
               	je	0x437f9c <Kotlin_String_equals+0x1c>
               	movq	(%rsi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	leaq	134313(%rip), %rcx      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, %rax
               	je	0x437fa0 <Kotlin_String_equals+0x20>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq
               	cmpq	%rdi, %rsi
               	je	0x437fc4 <Kotlin_String_equals+0x44>
               	movl	8(%rdi), %edx
               	cmpl	8(%rsi), %edx
               	jne	0x437f9c <Kotlin_String_equals+0x1c>
               	addq	$16, %rdi
               	addq	$16, %rsi
               	addq	%rdx, %rdx
               	callq	0x413760 <bcmp@plt>
               	testl	%eax, %eax
               	sete	%al
               	popq	%rcx
               	retq
               	movb	$1, %al
               	popq	%rcx
               	retq
               	nopl	(%rax,%rax)

<Kotlin_String_hashCode>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	8(%rdi), %r14d
               	cmpb	$0, 283854(%rip)        # 0x47d4b0 <(anonymous namespace)::initialized>
               	jne	0x438007 <Kotlin_String_hashCode+0x37>
               	movb	$1, 283845(%rip)        # 0x47d4b0 <(anonymous namespace)::initialized>
               	movl	284059(%rip), %eax      # 0x47d58c <__cpu_model+0xc>
               	movl	%eax, %ecx
               	shrb	$7, %cl
               	movb	%cl, 283829(%rip)       # 0x47d4b1 <(anonymous namespace)::sseSupported>
               	shrl	$10, %eax
               	andb	$1, %al
               	movb	%al, 283819(%rip)       # 0x47d4b2 <(anonymous namespace)::avx2Supported>
               	cmpl	$16, %r14d
               	jge	0x438019 <Kotlin_String_hashCode+0x49>
               	testl	%r14d, %r14d
               	jg	0x438047 <Kotlin_String_hashCode+0x77>
               	xorl	%eax, %eax
               	jmp	0x4381b1 <Kotlin_String_hashCode+0x1e1>
               	movb	283795(%rip), %al       # 0x47d4b2 <(anonymous namespace)::avx2Supported>
               	movb	283788(%rip), %cl       # 0x47d4b1 <(anonymous namespace)::sseSupported>
               	orb	%al, %cl
               	je	0x438047 <Kotlin_String_hashCode+0x77>
               	leaq	16(%rbx), %rsi
               	movl	%r14d, %edi
               	shrl	$2, %edi
               	cmpl	$31, %r14d
               	jg	0x4380eb <Kotlin_String_hashCode+0x11b>
               	callq	0x4381c0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
               	jmp	0x438118 <Kotlin_String_hashCode+0x148>
               	movq	%r14, %rax
               	addq	$-1, %rax
               	movl	%r14d, %ecx
               	andl	$3, %ecx
               	cmpq	$3, %rax
               	jae	0x438061 <Kotlin_String_hashCode+0x91>
               	xorl	%r14d, %r14d
               	xorl	%eax, %eax
               	jmp	0x4380b1 <Kotlin_String_hashCode+0xe1>
               	andl	$-4, %r14d
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	16(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	18(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	20(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	22(%rbx,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$4, %rdx
               	cmpq	%rdx, %r14
               	jne	0x438070 <Kotlin_String_hashCode+0xa0>
               	testq	%rcx, %rcx
               	je	0x4381b1 <Kotlin_String_hashCode+0x1e1>
               	leaq	(%rbx,%r14,2), %rdx
               	addq	$16, %rdx
               	xorl	%esi, %esi
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%eax, %edi
               	shll	$5, %edi
               	subl	%eax, %edi
               	movzwl	(%rdx,%rsi,2), %eax
               	addl	%edi, %eax
               	addq	$1, %rsi
               	cmpq	%rsi, %rcx
               	jne	0x4380d0 <Kotlin_String_hashCode+0x100>
               	jmp	0x4381b1 <Kotlin_String_hashCode+0x1e1>
               	testb	%al, %al
               	je	0x4380fc <Kotlin_String_hashCode+0x12c>
               	cmpl	$127, %r14d
               	jg	0x438103 <Kotlin_String_hashCode+0x133>
               	callq	0x4383f0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x438118 <Kotlin_String_hashCode+0x148>
               	callq	0x438270 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>
               	jmp	0x438118 <Kotlin_String_hashCode+0x148>
               	cmpl	$575, %r14d             # imm = 0x23F
               	jg	0x438113 <Kotlin_String_hashCode+0x143>
               	callq	0x4384f0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>
               	jmp	0x438118 <Kotlin_String_hashCode+0x148>
               	callq	0x4386e0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>
               	movl	%r14d, %ecx
               	andl	$-4, %ecx
               	cmpl	%r14d, %ecx
               	jge	0x4381b1 <Kotlin_String_hashCode+0x1e1>
               	movq	%rcx, %r8
               	notq	%r8
               	addq	%r14, %r8
               	movq	%r14, %r9
               	andq	$3, %r9
               	je	0x438169 <Kotlin_String_hashCode+0x199>
               	movl	%r14d, %edx
               	andl	$-4, %edx
               	leaq	(%rbx,%rdx,2), %rdi
               	addq	$16, %rdi
               	xorl	%edx, %edx
               	nopl	(%rax)
               	movl	%eax, %esi
               	shll	$5, %esi
               	subl	%eax, %esi
               	movzwl	(%rdi,%rdx,2), %eax
               	addl	%esi, %eax
               	addq	$1, %rdx
               	cmpq	%rdx, %r9
               	jne	0x438150 <Kotlin_String_hashCode+0x180>
               	orq	%r9, %rcx
               	cmpq	$3, %r8
               	jb	0x4381b1 <Kotlin_String_hashCode+0x1e1>
               	nop
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	16(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	18(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	20(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	movl	%eax, %edx
               	shll	$5, %edx
               	subl	%eax, %edx
               	movzwl	22(%rbx,%rcx,2), %eax
               	addl	%edx, %eax
               	addq	$4, %rcx
               	cmpq	%rcx, %r14
               	jne	0x438170 <Kotlin_String_hashCode+0x1a0>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopl	(%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>:
               	addl	$2, %edi
               	pxor	%xmm1, %xmm1
               	movdqa	47313(%rip), %xmm2      # 0x443aa0 <_IO_stdin_used+0xa0>
               	movdqa	47321(%rip), %xmm3      # 0x443ab0 <_IO_stdin_used+0xb0>
               	movdqa	47329(%rip), %xmm4      # 0x443ac0 <_IO_stdin_used+0xc0>
               	pxor	%xmm0, %xmm0
               	nopw	%cs:(%rax,%rax)
               	nopl	(%rax)
               	movq	%rsi, %rax
               	pmovzxwd	(%rsi), %xmm5           # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm5
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm4, %xmm6
               	pmulld	%xmm2, %xmm0
               	paddd	%xmm5, %xmm0
               	pmulld	%xmm2, %xmm1
               	paddd	%xmm6, %xmm1
               	addl	$-2, %edi
               	addq	$16, %rsi
               	cmpl	$3, %edi
               	jg	0x4381f0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0x30>
               	phaddd	%xmm1, %xmm0
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	cmpl	$3, %edi
               	jne	0x438260 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)+0xa0>
               	pmovzxwd	16(%rax), %xmm1         # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	47239(%rip), %xmm0      # 0x443ad0 <_IO_stdin_used+0xd0>
               	pmulld	47214(%rip), %xmm1      # 0x443ac0 <_IO_stdin_used+0xc0>
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm0
               	movd	%xmm0, %eax
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	pxor	%xmm5, %xmm5
               	movdqa	47203(%rip), %xmm12     # 0x443ae0 <_IO_stdin_used+0xe0>
               	movdqa	47210(%rip), %xmm10     # 0x443af0 <_IO_stdin_used+0xf0>
               	movdqa	47217(%rip), %xmm11     # 0x443b00 <_IO_stdin_used+0x100>
               	movdqa	47128(%rip), %xmm8      # 0x443ab0 <_IO_stdin_used+0xb0>
               	movdqa	47135(%rip), %xmm9      # 0x443ac0 <_IO_stdin_used+0xc0>
               	pxor	%xmm7, %xmm7
               	pxor	%xmm1, %xmm1
               	pxor	%xmm3, %xmm3
               	nopl	(%rax)
               	movl	%edi, %eax
               	pmovzxwd	(%rsi), %xmm2           # xmm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm10, %xmm2
               	pmovzxwd	8(%rsi), %xmm6          # xmm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm7, %xmm0
               	pmovzxwd	16(%rsi), %xmm7         # xmm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm11, %xmm6
               	movdqa	%xmm5, %xmm4
               	pmovzxwd	24(%rsi), %xmm5         # xmm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm12, %xmm3
               	paddd	%xmm2, %xmm3
               	pmulld	%xmm12, %xmm1
               	paddd	%xmm6, %xmm1
               	pmulld	%xmm12, %xmm0
               	pmulld	%xmm12, %xmm4
               	pmulld	%xmm8, %xmm7
               	paddd	%xmm0, %xmm7
               	pmulld	%xmm9, %xmm5
               	paddd	%xmm4, %xmm5
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x4382b0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x40>
               	phaddd	%xmm1, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm3, %xmm3
               	phaddd	%xmm5, %xmm7
               	phaddd	%xmm7, %xmm7
               	phaddd	%xmm7, %xmm7
               	paddd	%xmm3, %xmm7
               	leal	4(%rdi), %eax
               	cmpl	$6, %eax
               	jl	0x4383bf <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x14f>
               	pxor	%xmm4, %xmm4
               	movdqa	46917(%rip), %xmm3      # 0x443aa0 <_IO_stdin_used+0xa0>
               	pxor	%xmm1, %xmm1
               	nop
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	movdqa	%xmm1, %xmm2
               	movl	%edi, %eax
               	movdqa	%xmm4, %xmm5
               	pmovzxwd	8(%rsi), %xmm4          # xmm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	%xmm3, %xmm2
               	pmulld	%xmm3, %xmm5
               	pmulld	%xmm8, %xmm0
               	movdqa	%xmm0, %xmm1
               	paddd	%xmm2, %xmm1
               	pmulld	%xmm9, %xmm4
               	paddd	%xmm5, %xmm4
               	addq	$16, %rsi
               	leal	-2(%rax), %edi
               	cmpl	$3, %eax
               	jg	0x438360 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf0>
               	pmulld	46836(%rip), %xmm7      # 0x443aa0 <_IO_stdin_used+0xa0>
               	phaddd	%xmm4, %xmm1
               	phaddd	%xmm1, %xmm1
               	phaddd	%xmm1, %xmm1
               	paddd	%xmm1, %xmm7
               	testl	%edi, %edi
               	jle	0x4383e8 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x178>
               	pmovzxwd	(%rsi), %xmm0           # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	pmulld	46847(%rip), %xmm7      # 0x443ad0 <_IO_stdin_used+0xd0>
               	pmulld	46822(%rip), %xmm0      # 0x443ac0 <_IO_stdin_used+0xc0>
               	phaddd	%xmm0, %xmm0
               	phaddd	%xmm0, %xmm0
               	paddd	%xmm0, %xmm7
               	movd	%xmm7, %eax
               	retq
               	nopl	(%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)>:
               	addl	$-2, %edi
               	vpbroadcastd	46600(%rip), %ymm1 # 0x443a04 <_IO_stdin_used+0x4>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vmovdqa	46904(%rip), %ymm2      # 0x443b40 <_IO_stdin_used+0x140>
               	vmovdqa	46928(%rip), %ymm3      # 0x443b60 <_IO_stdin_used+0x160>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nopw	%cs:(%rax,%rax)
               	nop
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm5   # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm2, %ymm5, %ymm5
               	vpmovzxwd	16(%rsi), %ymm6 # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm1, %ymm4, %ymm4
               	vpaddd	%ymm4, %ymm5, %ymm4
               	vpmulld	%ymm1, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm6, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	addl	$2, %eax
               	cmpl	$7, %eax
               	jg	0x438420 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x30>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	leal	6(%rdi), %eax
               	cmpl	$6, %eax
               	jge	0x438482 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0x92>
               	addl	$2, %edi
               	testl	%edi, %edi
               	jg	0x4384be <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xce>
               	jmp	0x4384e8 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	46456(%rip), %xmm2 # 0x443a08 <_IO_stdin_used+0x8>
               	vpmulld	46791(%rip), %ymm1, %ymm1 # 0x443b60 <_IO_stdin_used+0x160>
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	addq	$16, %rsi
               	testl	%edi, %edi
               	jle	0x4384e8 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo16(int, unsigned short const*)+0xf8>
               	vpmovzxwd	(%rsi), %xmm1   # xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46400(%rip), %xmm2 # 0x443a0c <_IO_stdin_used+0xc>
               	vpmulld	46571(%rip), %xmm1, %xmm1 # 0x443ac0 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm2, %xmm0, %xmm0
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vphaddd	%xmm1, %xmm1, %xmm1
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vmovd	%xmm0, %eax
               	vzeroupper
               	retq

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)>:
               	vpbroadcastd	46359(%rip), %ymm3 # 0x443a10 <_IO_stdin_used+0x10>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46715(%rip), %ymm4      # 0x443b80 <_IO_stdin_used+0x180>
               	vmovdqa	46739(%rip), %ymm5      # 0x443ba0 <_IO_stdin_used+0x1a0>
               	vmovdqa	46635(%rip), %ymm0      # 0x443b40 <_IO_stdin_used+0x140>
               	vmovdqa	46659(%rip), %ymm1      # 0x443b60 <_IO_stdin_used+0x160>
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	nopw	(%rax,%rax)
               	movl	%edi, %eax
               	vpmovzxwd	(%rsi), %ymm9   # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm9, %ymm9
               	vpmovzxwd	16(%rsi), %ymm10 # ymm10 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm11 # ymm11 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm5, %ymm10, %ymm10
               	vpmovzxwd	48(%rsi), %ymm12 # ymm12 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm8, %ymm8
               	vpaddd	%ymm8, %ymm9, %ymm8
               	vpmulld	%ymm3, %ymm7, %ymm7
               	vpaddd	%ymm7, %ymm10, %ymm7
               	vpmulld	%ymm3, %ymm6, %ymm6
               	vpmulld	%ymm3, %ymm2, %ymm2
               	vpmulld	%ymm0, %ymm11, %ymm9
               	vpaddd	%ymm6, %ymm9, %ymm6
               	vpmulld	%ymm1, %ymm12, %ymm9
               	vpaddd	%ymm2, %ymm9, %ymm2
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x438530 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x40>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm6, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm3, %xmm4
               	vextracti128	$1, %ymm2, %xmm5
               	vpaddd	%xmm2, %xmm3, %xmm2
               	vpaddd	%xmm2, %xmm4, %xmm2
               	vpaddd	%xmm5, %xmm2, %xmm2
               	leal	8(%rdi), %eax
               	cmpl	$12, %eax
               	jge	0x43860b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x11b>
               	cmpl	$2, %edi
               	jge	0x438689 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x199>
               	testl	%edi, %edi
               	jle	0x438603 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	46117(%rip), %xmm1 # 0x443a0c <_IO_stdin_used+0xc>
               	vpmulld	46288(%rip), %xmm0, %xmm0 # 0x443ac0 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpxor	%xmm3, %xmm3, %xmm3
               	vpbroadcastd	46060(%rip), %ymm4 # 0x443a04 <_IO_stdin_used+0x4>
               	vpxor	%xmm5, %xmm5, %xmm5
               	nopl	(%rax)
               	vpmovzxwd	(%rsi), %ymm6   # ymm6 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm7 # ymm7 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm4, %ymm5, %ymm5
               	vpmulld	%ymm4, %ymm3, %ymm3
               	vpmulld	%ymm0, %ymm6, %ymm6
               	vpaddd	%ymm5, %ymm6, %ymm5
               	vpmulld	%ymm1, %ymm7, %ymm6
               	vpaddd	%ymm3, %ymm6, %ymm3
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x438620 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x130>
               	vpbroadcastd	45990(%rip), %xmm0 # 0x443a04 <_IO_stdin_used+0x4>
               	vphaddd	%ymm3, %ymm5, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vpmulld	%xmm0, %xmm2, %xmm0
               	vextracti128	$1, %ymm1, %xmm2
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x4385d5 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe5>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45937(%rip), %xmm1 # 0x443a08 <_IO_stdin_used+0x8>
               	vpmulld	46272(%rip), %ymm0, %ymm0 # 0x443b60 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x4385d9 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0xe9>
               	jmp	0x438603 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo32(int, unsigned short const*)+0x113>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)>:
               	vpbroadcastd	45867(%rip), %ymm6 # 0x443a14 <_IO_stdin_used+0x14>
               	vpxor	%xmm2, %xmm2, %xmm2
               	vmovdqa	46283(%rip), %ymm10     # 0x443bc0 <_IO_stdin_used+0x1c0>
               	vmovdqa	46371(%rip), %ymm11     # 0x443c20 <_IO_stdin_used+0x220>
               	vmovdqa	46139(%rip), %ymm7      # 0x443b40 <_IO_stdin_used+0x140>
               	vmovdqa	46163(%rip), %ymm8      # 0x443b60 <_IO_stdin_used+0x160>
               	vpxor	%xmm5, %xmm5, %xmm5
               	vpxor	%xmm9, %xmm9, %xmm9
               	vpxor	%xmm12, %xmm12, %xmm12
               	vpxor	%xmm13, %xmm13, %xmm13
               	vpxor	%xmm14, %xmm14, %xmm14
               	vpxor	%xmm15, %xmm15, %xmm15
               	vpxor	%xmm0, %xmm0, %xmm0
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	46225(%rip), %ymm3, %ymm3 # 0x443be0 <_IO_stdin_used+0x1e0>
               	vpmulld	46248(%rip), %ymm4, %ymm4 # 0x443c00 <_IO_stdin_used+0x200>
               	vpmulld	%ymm6, %ymm0, %ymm0
               	vpaddd	%ymm0, %ymm1, %ymm0
               	vpmovzxwd	48(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm11, %ymm1, %ymm1
               	vpmulld	%ymm6, %ymm15, %ymm15
               	vpaddd	%ymm3, %ymm15, %ymm15
               	vpmovzxwd	64(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm14, %ymm14
               	vpaddd	%ymm4, %ymm14, %ymm14
               	vpmovzxwd	80(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm13, %ymm13
               	vpaddd	%ymm1, %ymm13, %ymm13
               	vpmulld	%ymm6, %ymm12, %ymm1
               	vpmulld	46047(%rip), %ymm3, %ymm3 # 0x443b80 <_IO_stdin_used+0x180>
               	vpaddd	%ymm1, %ymm3, %ymm12
               	vpmovzxwd	96(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm9, %ymm3
               	vpmulld	46055(%rip), %ymm4, %ymm4 # 0x443ba0 <_IO_stdin_used+0x1a0>
               	vpaddd	%ymm3, %ymm4, %ymm9
               	vpmulld	%ymm6, %ymm5, %ymm3
               	vpmulld	%ymm7, %ymm1, %ymm1
               	vpaddd	%ymm3, %ymm1, %ymm5
               	vpmovzxwd	112(%rsi), %ymm1 # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm6, %ymm2, %ymm2
               	vpmulld	%ymm8, %ymm1, %ymm1
               	vpaddd	%ymm2, %ymm1, %ymm2
               	movl	%edi, %eax
               	subq	$-128, %rsi
               	leal	-16(%rax), %edi
               	cmpl	$31, %eax
               	jg	0x438730 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x50>
               	vmovdqa	%ymm8, %ymm11
               	vmovdqa	%ymm7, %ymm10
               	vphaddd	%ymm15, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm13, %ymm14, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm1, %ymm1, %ymm1
               	vphaddd	%ymm9, %ymm12, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm2, %ymm5, %ymm2
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm0, %xmm4
               	vphaddd	%ymm2, %ymm2, %ymm2
               	vextracti128	$1, %ymm1, %xmm5
               	vextracti128	$1, %ymm3, %xmm6
               	vextracti128	$1, %ymm2, %xmm7
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm4, %xmm0
               	vpaddd	%xmm3, %xmm5, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm0
               	vpaddd	%xmm2, %xmm6, %xmm1
               	vpaddd	%xmm7, %xmm1, %xmm1
               	vpaddd	%xmm1, %xmm0, %xmm2
               	leal	16(%rdi), %eax
               	cmpl	$24, %eax
               	jge	0x4388ba <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1da>
               	cmpl	$4, %edi
               	jge	0x43899e <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2be>
               	cmpl	$2, %edi
               	jge	0x438a19 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x339>
               	testl	%edi, %edi
               	jle	0x4388b2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	vpmovzxwd	(%rsi), %xmm0   # xmm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero
               	vpbroadcastd	45430(%rip), %xmm1 # 0x443a0c <_IO_stdin_used+0xc>
               	vpmulld	45601(%rip), %xmm0, %xmm0 # 0x443ac0 <_IO_stdin_used+0xc0>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vphaddd	%xmm0, %xmm0, %xmm0
               	vpaddd	%xmm1, %xmm0, %xmm2
               	vmovd	%xmm2, %eax
               	vzeroupper
               	retq
               	vpbroadcastd	45389(%rip), %ymm5 # 0x443a10 <_IO_stdin_used+0x10>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpxor	%xmm6, %xmm6, %xmm6
               	vpxor	%xmm7, %xmm7, %xmm7
               	vpxor	%xmm8, %xmm8, %xmm8
               	vmovdqa	45732(%rip), %ymm12     # 0x443b80 <_IO_stdin_used+0x180>
               	vmovdqa	45756(%rip), %ymm13     # 0x443ba0 <_IO_stdin_used+0x1a0>
               	nopw	%cs:(%rax,%rax)
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	16(%rsi), %ymm3 # ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	32(%rsi), %ymm4 # ymm4 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmovzxwd	48(%rsi), %ymm9 # ymm9 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmulld	%ymm5, %ymm8, %ymm8
               	vpmulld	%ymm5, %ymm7, %ymm7
               	vpmulld	%ymm5, %ymm6, %ymm6
               	vpmulld	%ymm5, %ymm0, %ymm0
               	vpmulld	%ymm12, %ymm1, %ymm1
               	vpaddd	%ymm1, %ymm8, %ymm8
               	vpmulld	%ymm13, %ymm3, %ymm1
               	vpaddd	%ymm7, %ymm1, %ymm7
               	vpmulld	%ymm10, %ymm4, %ymm1
               	vpaddd	%ymm6, %ymm1, %ymm6
               	vpmulld	%ymm11, %ymm9, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$64, %rsi
               	leal	-8(%rax), %edi
               	cmpl	$15, %eax
               	jg	0x4388f0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x210>
               	vpbroadcastd	45242(%rip), %xmm1 # 0x443a10 <_IO_stdin_used+0x10>
               	vphaddd	%ymm7, %ymm8, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vphaddd	%ymm3, %ymm3, %ymm3
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm6, %ymm0
               	vextracti128	$1, %ymm3, %xmm2
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm4
               	vpaddd	%xmm3, %xmm1, %xmm1
               	vpaddd	%xmm2, %xmm1, %xmm1
               	vpaddd	%xmm4, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	cmpl	$4, %edi
               	jl	0x43887b <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x19b>
               	vpxor	%xmm0, %xmm0, %xmm0
               	vpbroadcastd	45145(%rip), %ymm3 # 0x443a04 <_IO_stdin_used+0x4>
               	vpxor	%xmm4, %xmm4, %xmm4
               	nop
               	vpmovzxwd	(%rsi), %ymm1   # ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	movl	%edi, %eax
               	vpmovzxwd	16(%rsi), %ymm5 # ymm5 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpmulld	%ymm3, %ymm4, %ymm4
               	vpmulld	%ymm3, %ymm0, %ymm0
               	vpmulld	%ymm10, %ymm1, %ymm1
               	vpaddd	%ymm4, %ymm1, %ymm4
               	vpmulld	%ymm11, %ymm5, %ymm1
               	vpaddd	%ymm0, %ymm1, %ymm0
               	addq	$32, %rsi
               	leal	-4(%rax), %edi
               	cmpl	$7, %eax
               	jg	0x4389b0 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x2d0>
               	vpbroadcastd	45078(%rip), %xmm1 # 0x443a04 <_IO_stdin_used+0x4>
               	vphaddd	%ymm0, %ymm4, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm0, %xmm1, %xmm0
               	vpaddd	%xmm2, %xmm0, %xmm2
               	cmpl	$2, %edi
               	jl	0x438884 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a4>
               	vpmovzxwd	(%rsi), %ymm0   # ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
               	vpbroadcastd	45025(%rip), %xmm1 # 0x443a08 <_IO_stdin_used+0x8>
               	vpmulld	45360(%rip), %ymm0, %ymm0 # 0x443b60 <_IO_stdin_used+0x160>
               	vpmulld	%xmm1, %xmm2, %xmm1
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vphaddd	%ymm0, %ymm0, %ymm0
               	vextracti128	$1, %ymm0, %xmm2
               	vpaddd	%xmm2, %xmm0, %xmm0
               	vpaddd	%xmm0, %xmm1, %xmm2
               	addq	$16, %rsi
               	addl	$-2, %edi
               	testl	%edi, %edi
               	jg	0x438888 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1a8>
               	jmp	0x4388b2 <(anonymous namespace)::AVX2Traits::polyHashUnalignedUnrollUpTo64(int, unsigned short const*)+0x1d2>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$104, %rsp
               	leaq	133675(%rip), %rax      # 0x4594b0 <ktypeglobal:kotlin.native.internal.CleanerImpl#internal>
               	cmpq	%rax, %rsi
               	je	0x438ae6 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x76>
               	leaq	133519(%rip), %rax      # 0x459420 <ktypeglobal:kotlin.native.concurrent.WorkerBoundReference#internal>
               	cmpq	%rax, %rsi
               	jne	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movq	8(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	cmpq	$0, (%rbx)
               	je	0x438ad0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x60>
               	movq	8(%rbx), %rbp
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rdi
               	addq	$8, %rdi
               	movq	%rbp, %rsi
               	callq	0x4258f0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	%rbx, %rdi
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x413730 <free@plt>
               	movl	281031(%rip), %r13d     # 0x47d4b4 <(anonymous namespace)::globalCleanerWorker>
               	cmpl	$-2, %r13d
               	je	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movslq	%r13d, %r15
               	movq	8(%rdi), %rax
               	movq	%rax, 24(%rsp)
               	callq	0x438f80 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	movq	%r12, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x438b60 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x438b60 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	cmpl	$1, %eax
               	jne	0x438b60 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movb	180732(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438b60 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0xf0>
               	movq	%rbp, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	152(%r12), %rdi
               	movq	%r15, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x438b95 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x125>
               	movq	%r15, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %rcx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	jne	0x438bb3 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x143>
               	jmp	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movl	%r13d, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %ecx
               	movq	144(%r12), %rax
               	movq	(%rax,%rcx,8), %rax
               	testq	%rax, %rax
               	je	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movq	(%rax), %rbp
               	cmpl	%r13d, 8(%rbp)
               	jne	0x438be4 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x174>
               	testq	%rbp, %rbp
               	jne	0x438c1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1af>
               	jmp	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	nop
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%rcx, %rdx
               	jne	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	cmpl	%r13d, %esi
               	je	0x438c16 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x1a6>
               	movq	%rbp, %rbx
               	movq	(%rbp), %rbp
               	testq	%rbp, %rbp
               	je	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movslq	8(%rbp), %rsi
               	movq	%rsi, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x438bd0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%rcx, %rdx
               	je	0x438bdf <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x16f>
               	jmp	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	testq	%rbx, %rbx
               	je	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movq	16(%rbp), %rbx
               	movq	96(%rsp), %rax
               	movq	%rax, 48(%rsp)
               	movups	80(%rsp), %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movq	%r14, 16(%rsp)
               	movq	%r14, %rax
               	movq	-64(%r14), %rdx
               	movl	$1, %r13d
               	movl	$1, %ecx
               	movq	%rdx, %r14
               	xchgl	%ecx, 328(%rdx)
               	movl	%ecx, 12(%rsp)
               	leaq	144(%rbx), %rdi
               	movq	-64(%rax), %rbp
               	xchgl	%r13d, 328(%rbp)
               	movq	%rdi, %r15
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testq	%rbp, %rbp
               	je	0x438ca9 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%r13d, %eax
               	xchgl	%eax, (%rbp)
               	testl	%r13d, %r13d
               	jne	0x438ca9 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	cmpl	$1, %eax
               	jne	0x438ca9 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	movb	180403(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438ca9 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x239>
               	movq	%rbp, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	56(%rbx), %rax
               	movq	72(%rbx), %rcx
               	addq	$-40, %rcx
               	cmpq	%rcx, %rax
               	je	0x438cf0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x280>
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	addq	$40, 56(%rbx)
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	jmp	0x438e9b <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x42b>
               	movq	8(%rbx), %rcx
               	movq	16(%rbx), %rax
               	movq	80(%rbx), %rdx
               	movq	%rdx, %rsi
               	subq	%rcx, %rsi
               	sarq	$3, %rsi
               	movq	%rax, %rdi
               	subq	%rsi, %rdi
               	cmpq	$1, %rdi
               	movq	%r15, %r13
               	movq	%r14, %r15
               	movq	16(%rsp), %r14
               	ja	0x438e3c <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x3cc>
               	movq	%r13, 72(%rsp)
               	movq	48(%rbx), %rsi
               	subq	%rsi, %rdx
               	movq	%rdx, %rbp
               	sarq	$3, %rbp
               	leaq	2(%rbp), %r8
               	leaq	4(,%rbp), %rdi
               	addq	%rbp, %rdi
               	cmpq	%rdi, %rax
               	jbe	0x438d71 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x301>
               	subq	%r8, %rax
               	andq	$-2, %rax
               	leaq	(%rcx,%rax,4), %r13
               	addq	$8, %rdx
               	cmpq	%rsi, %r13
               	jae	0x438de3 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x373>
               	testq	%rdx, %rdx
               	je	0x438dff <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38f>
               	movq	%r13, %rdi
               	jmp	0x438dfa <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38a>
               	movq	%rbp, 64(%rsp)
               	testq	%rax, %rax
               	movl	$1, %ecx
               	cmovneq	%rax, %rcx
               	leaq	(%rax,%rcx), %r13
               	addq	$2, %r13
               	movl	$8, %esi
               	movq	%r13, %rdi
               	movq	%r8, %rbp
               	callq	0x413700 <calloc@plt>
               	movq	%r13, 56(%rsp)
               	subq	%rbp, %r13
               	andq	$-2, %r13
               	movq	%rax, %rbp
               	leaq	(%rax,%r13,4), %r13
               	movq	48(%rbx), %rsi
               	movq	80(%rbx), %rdx
               	subq	%rsi, %rdx
               	addq	$8, %rdx
               	je	0x438dc6 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x356>
               	movq	%r13, %rdi
               	callq	0x4136f0 <memmove@plt>
               	movq	8(%rbx), %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbp, 8(%rbx)
               	movq	56(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	64(%rsp), %rbp
               	jmp	0x438dff <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38f>
               	testq	%rdx, %rdx
               	je	0x438dff <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x38f>
               	leaq	1(%rbp), %rax
               	leaq	(,%rax,8), %rdi
               	addq	%r13, %rdi
               	subq	%rdx, %rdi
               	callq	0x4136f0 <memmove@plt>
               	movq	%r13, 48(%rbx)
               	movq	(%r13), %rax
               	movq	%rax, 32(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 40(%rbx)
               	leaq	(,%rbp,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbx)
               	movq	(%r13,%rbp,8), %rax
               	movq	%rax, 64(%rbx)
               	addq	$480, %rax              # imm = 0x1E0
               	movq	%rax, 72(%rbx)
               	movq	72(%rsp), %r13
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	80(%rbx), %rcx
               	movq	%rax, 8(%rcx)
               	movq	56(%rbx), %rax
               	movl	$3, (%rax)
               	movq	24(%rsp), %rcx
               	movq	%rcx, 8(%rax)
               	movq	48(%rsp), %rcx
               	movq	%rcx, 32(%rax)
               	movaps	32(%rsp), %xmm0
               	movups	%xmm0, 16(%rax)
               	movq	80(%rbx), %rax
               	leaq	8(%rax), %rcx
               	movq	%rcx, 80(%rbx)
               	movq	8(%rax), %rax
               	movq	%rax, 64(%rbx)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 72(%rbx)
               	movq	%rax, 56(%rbx)
               	addq	$184, %rbx
               	movq	%rbx, %rdi
               	callq	0x4139c0 <pthread_cond_signal@plt>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r13, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438eef <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438eef <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	cmpl	$1, %eax
               	jne	0x438eef <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	movb	179821(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438eef <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x47f>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	testq	%r15, %r15
               	je	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	addq	$328, %r15              # imm = 0x148
               	movl	12(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ecx, %ecx
               	jne	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	cmpl	$1, %eax
               	jne	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movb	179773(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438f1f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
               	movq	%r15, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	cmpl	$1, %eax
               	jne	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movb	179704(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x438f64 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4f4>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::theState()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	279850(%rip), %r14      # 0x47d4b8 <(anonymous namespace)::theState()::state>
               	testq	%r14, %r14
               	jne	0x439267 <(anonymous namespace)::theState()+0x2e7>
               	movl	$1, %edi
               	movl	$272, %esi              # imm = 0x110
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x4390d2 <(anonymous namespace)::theState()+0x152>
               	movq	%rax, %rbx
               	addq	$136, %rax
               	movq	%rax, 88(%rbx)
               	movq	$1, 96(%rbx)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 104(%rbx)
               	movl	$1065353216, 120(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 128(%rbx)
               	leaq	192(%rbx), %rax
               	movq	%rax, 144(%rbx)
               	movq	$1, 152(%rbx)
               	movups	%xmm0, 160(%rbx)
               	movl	$1065353216, 176(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 184(%rbx)
               	leaq	248(%rbx), %rax
               	movq	%rax, 200(%rbx)
               	movq	$1, 208(%rbx)
               	movups	%xmm0, 216(%rbx)
               	movl	$1065353216, 232(%rbx)  # imm = 0x3F800000
               	movups	%xmm0, 240(%rbx)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r14)
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	callq	0x4139d0 <pthread_mutex_init@plt>
               	movq	%rbx, %rdi
               	addq	$40, %rdi
               	xorl	%esi, %esi
               	callq	0x4139e0 <pthread_cond_init@plt>
               	movabsq	$4294967297, %rax       # imm = 0x100000001
               	movq	%rax, 256(%rbx)
               	movl	$0, 264(%rbx)
               	testq	%r14, %r14
               	je	0x4390b9 <(anonymous namespace)::theState()+0x139>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebp, %ebp
               	jne	0x4390b9 <(anonymous namespace)::theState()+0x139>
               	cmpl	$1, %eax
               	jne	0x4390b9 <(anonymous namespace)::theState()+0x139>
               	movb	179363(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x4390b9 <(anonymous namespace)::theState()+0x139>
               	movq	%r14, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 279540(%rip)      # 0x47d4b8 <(anonymous namespace)::theState()::state>
               	jne	0x4390e1 <(anonymous namespace)::theState()+0x161>
               	movq	279531(%rip), %r14      # 0x47d4b8 <(anonymous namespace)::theState()::state>
               	jmp	0x439267 <(anonymous namespace)::theState()+0x2e7>
               	xorl	%ebx, %ebx
               	xorl	%eax, %eax
               	lock
               	cmpxchgq	%rbx, 279513(%rip)      # 0x47d4b8 <(anonymous namespace)::theState()::state>
               	je	0x4390c6 <(anonymous namespace)::theState()+0x146>
               	movq	%rax, %r14
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%r15)
               	movq	%rbx, %rdi
               	callq	0x4139f0 <pthread_mutex_destroy@plt>
               	leaq	40(%rbx), %rdi
               	callq	0x413a00 <pthread_cond_destroy@plt>
               	testq	%r15, %r15
               	je	0x439140 <(anonymous namespace)::theState()+0x1c0>
               	addq	$328, %r15              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x439140 <(anonymous namespace)::theState()+0x1c0>
               	cmpl	$1, %eax
               	jne	0x439140 <(anonymous namespace)::theState()+0x1c0>
               	movb	179228(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439140 <(anonymous namespace)::theState()+0x1c0>
               	movq	%r15, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	leaq	216(%rbx), %r15
               	movq	216(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x439170 <(anonymous namespace)::theState()+0x1f0>
               	nopw	(%rax,%rax)
               	movq	(%rdi), %rbp
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x439160 <(anonymous namespace)::theState()+0x1e0>
               	movq	200(%rbx), %rdi
               	movq	208(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	200(%rbx), %rdi
               	leaq	248(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x4391a8 <(anonymous namespace)::theState()+0x228>
               	callq	0x413730 <free@plt>
               	leaq	160(%rbx), %r15
               	movq	160(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x4391d0 <(anonymous namespace)::theState()+0x250>
               	nop
               	movq	(%rdi), %rbp
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x4391c0 <(anonymous namespace)::theState()+0x240>
               	movq	144(%rbx), %rdi
               	movq	152(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	144(%rbx), %rdi
               	leaq	192(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x439208 <(anonymous namespace)::theState()+0x288>
               	callq	0x413730 <free@plt>
               	leaq	104(%rbx), %r15
               	movq	104(%rbx), %rdi
               	testq	%rdi, %rdi
               	je	0x439230 <(anonymous namespace)::theState()+0x2b0>
               	nopl	(%rax)
               	movq	(%rdi), %rbp
               	callq	0x413730 <free@plt>
               	movq	%rbp, %rdi
               	testq	%rbp, %rbp
               	jne	0x439220 <(anonymous namespace)::theState()+0x2a0>
               	movq	88(%rbx), %rdi
               	movq	96(%rbx), %rdx
               	shlq	$3, %rdx
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%r15)
               	movq	88(%rbx), %rdi
               	leaq	136(%rbx), %rax
               	cmpq	%rdi, %rax
               	je	0x43925f <(anonymous namespace)::theState()+0x2df>
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rax
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	nopw	%cs:(%rax,%rax)

<Kotlin_initRuntimeIfNeeded>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movq	%fs:0, %rax
               	cmpq	$0, -48(%rax)
               	jne	0x439dee <Kotlin_initRuntimeIfNeeded+0xb6e>
               	movq	%rax, %r14
               	movb	279079(%rip), %al       # 0x47d4d8 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x439ef3 <Kotlin_initRuntimeIfNeeded+0xc73>
               	leaq	24(%rsp), %rax
               	movq	%rax, 80(%rsp)
               	movq	%fs:0, %rax
               	leaq	-8(%rax), %rax
               	leaq	80(%rsp), %rcx
               	movq	%rcx, (%rax)
               	leaq	-65954(%rip), %rbx      # 0x429140 <void std::call_once<kotlin::initObjectPool()::$_0>(std::once_flag&, kotlin::initObjectPool()::$_0&&)::'lambda0'()::__invoke()>
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	%rbx, (%rax)
               	cmpq	$0, 167099(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x439f2b <Kotlin_initRuntimeIfNeeded+0xcab>
               	leaq	178878(%rip), %rdi      # 0x464dc8 <(anonymous namespace)::initOptions>
               	leaq	19169(%rip), %rsi       # 0x43ddf2 <__once_proxy>
               	callq	0x413a10 <pthread_once@plt>
               	testl	%eax, %eax
               	jne	0x439f30 <Kotlin_initRuntimeIfNeeded+0xcb0>
               	callq	0x42ba30 <mi_thread_init>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x439d97 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movq	%rax, %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, (%rax)
               	movq	$0, 16(%rax)
               	movq	%r14, %rax
               	cmpq	$0, -48(%r14)
               	jne	0x439f37 <Kotlin_initRuntimeIfNeeded+0xcb7>
               	movq	%r12, -48(%r14)
               	lock
               	addl	$1, 278872(%rip)        # 0x47d4c4 <(anonymous namespace)::aliveRuntimesCount>
               	movl	$1, %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, 278853(%rip)      # 0x47d4c0 <(anonymous namespace)::globalRuntimeStatus>
               	sete	%r13b
               	callq	0x4367f0 <konan::gettid()>
               	movl	%eax, %ebx
               	movl	$1, %edi
               	movl	$368, %esi              # imm = 0x170
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r15
               	leaq	8(%rax), %rbp
               	movl	%ebx, 8(%rax)
               	leaq	174506(%rip), %rax      # 0x463d50 <kotlin::mm::GlobalData::instance_+0x60>
               	movq	%rax, 16(%r15)
               	leaq	24(%r15), %rax
               	movq	%rax, 32(%r15)
               	movq	%rax, 24(%r15)
               	leaq	48(%r15), %rax
               	movq	%rax, 56(%r15)
               	movq	%rax, 48(%r15)
               	leaq	144(%r15), %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 64(%r15)
               	movups	%xmm0, 80(%r15)
               	movq	%rax, 96(%r15)
               	movq	$1, 104(%r15)
               	movups	%xmm0, 112(%r15)
               	movl	$1065353216, 128(%r15)  # imm = 0x3F800000
               	movups	%xmm0, 136(%r15)
               	movups	%xmm0, 152(%r15)
               	xorps	%xmm0, %xmm0
               	movq	$0, 168(%r15)
               	leaq	174449(%rip), %rax      # 0x463d88 <kotlin::mm::GlobalData::instance_+0x98>
               	movq	%rax, 176(%r15)
               	leaq	184(%r15), %rax
               	movq	%rax, 192(%r15)
               	movq	%rax, 184(%r15)
               	leaq	208(%r15), %rax
               	movq	%rax, 216(%r15)
               	movq	%rax, 208(%r15)
               	leaq	174449(%rip), %rax      # 0x463dc0 <kotlin::mm::GlobalData::instance_+0xd0>
               	movq	%rax, 232(%r15)
               	leaq	240(%r15), %rax
               	movq	%rax, 248(%r15)
               	movq	%rax, 240(%r15)
               	leaq	264(%r15), %rax
               	movq	%rax, 272(%r15)
               	movq	%rax, 264(%r15)
               	leaq	296(%r15), %rdi
               	movups	%xmm0, 280(%r15)
               	leaq	174434(%rip), %rsi      # 0x463df8 <kotlin::mm::GlobalData::instance_+0x108>
               	movq	%rbp, %rdx
               	callq	0x428d30 <kotlin::gc::GC::ThreadData::ThreadData(kotlin::gc::GC&, kotlin::mm::ThreadData&)>
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 304(%r15)
               	movq	$0, 320(%r15)
               	movl	$1, 328(%r15)
               	movq	%rbp, 336(%r15)
               	movb	$0, 344(%r15)
               	movups	%xmm0, 352(%r15)
               	cmpq	$0, 166618(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4394f4 <Kotlin_initRuntimeIfNeeded+0x274>
               	leaq	174129(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x439f47 <Kotlin_initRuntimeIfNeeded+0xcc7>
               	leaq	352(%r15), %rax
               	movq	174086(%rip), %rcx      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x439510 <Kotlin_initRuntimeIfNeeded+0x290>
               	movq	%r15, 360(%rcx)
               	jmp	0x439519 <Kotlin_initRuntimeIfNeeded+0x299>
               	movq	%r15, 174073(%rip)      # 0x463d10 <kotlin::mm::GlobalData::instance_+0x20>
               	xorl	%ecx, %ecx
               	movq	$0, 174052(%rip)        # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	(%rax), %rbx
               	movq	%rcx, (%rax)
               	testq	%rbx, %rbx
               	je	0x4397e1 <Kotlin_initRuntimeIfNeeded+0x561>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x43954f <Kotlin_initRuntimeIfNeeded+0x2cf>
               	movq	%rbp, %rdi
               	callq	0x425350 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x4253a0 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	173974(%rip), %rbx      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	movq	%r15, 173967(%rip)      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rbx, %rbx
               	je	0x4395b6 <Kotlin_initRuntimeIfNeeded+0x336>
               	movq	352(%rbx), %rbp
               	testq	%rbp, %rbp
               	je	0x43959a <Kotlin_initRuntimeIfNeeded+0x31a>
               	movq	%rbp, %rdi
               	callq	0x425350 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%rbp, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x4253a0 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	cmpq	$0, 166394(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4395cc <Kotlin_initRuntimeIfNeeded+0x34c>
               	leaq	173905(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movb	%r13b, 15(%rsp)
               	leaq	328(%r15), %rbx
               	movq	%r14, %rax
               	movq	%r15, -64(%r14)
               	movq	%r15, (%r12)
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%r15)
               	movl	%eax, 28(%rsp)
               	cmpl	$1, %eax
               	jne	0x43960a <Kotlin_initRuntimeIfNeeded+0x38a>
               	movb	178002(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43960a <Kotlin_initRuntimeIfNeeded+0x38a>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbx, 40(%rsp)
               	movq	(%r12), %rbx
               	movq	%r14, %rax
               	movq	-40(%r14), %r13
               	movq	%rbx, %rbp
               	testq	%r13, %r13
               	movq	%r14, 48(%rsp)
               	movq	%r12, 56(%rsp)
               	jne	0x439b1d <Kotlin_initRuntimeIfNeeded+0x89d>
               	movq	%rbx, 72(%rsp)
               	callq	0x438f80 <(anonymous namespace)::theState()>
               	movq	%rax, %rdi
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%rax, 16(%rsp)
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testq	%rbx, %rbx
               	je	0x439687 <Kotlin_initRuntimeIfNeeded+0x407>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x439687 <Kotlin_initRuntimeIfNeeded+0x407>
               	cmpl	$1, %eax
               	jne	0x439687 <Kotlin_initRuntimeIfNeeded+0x407>
               	movb	177877(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439687 <Kotlin_initRuntimeIfNeeded+0x407>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$1, %edi
               	movl	$256, %esi              # imm = 0x100
               	callq	0x413700 <calloc@plt>
               	testq	%rax, %rax
               	je	0x4397fb <Kotlin_initRuntimeIfNeeded+0x57b>
               	movq	%rax, %r13
               	movq	16(%rsp), %rdx
               	movl	256(%rdx), %eax
               	leal	1(%rax), %ecx
               	movl	%ecx, 256(%rdx)
               	movl	%eax, (%r13)
               	movl	$1, 4(%r13)
               	movq	$8, 16(%r13)
               	movl	$8, %edi
               	movl	$8, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	movq	%rax, 8(%r13)
               	leaq	24(%rax), %rbp
               	movl	$12, %edi
               	movl	$40, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 24(%rbx)
               	movq	%rbp, 48(%r13)
               	movq	%rax, 32(%r13)
               	leaq	480(%rax), %rcx
               	movq	%rcx, 40(%r13)
               	movq	%rbp, 80(%r13)
               	movq	%rax, 64(%r13)
               	movq	%rcx, 72(%r13)
               	movq	%rax, 24(%r13)
               	movq	%rax, 56(%r13)
               	leaq	96(%r13), %rax
               	movq	%rax, 112(%r13)
               	movq	%rax, 120(%r13)
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 240(%r13)
               	movups	%xmm0, 128(%r13)
               	movq	-64(%r14), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r13), %rdi
               	xorl	%esi, %esi
               	callq	0x4139d0 <pthread_mutex_init@plt>
               	movq	%r13, %rdi
               	addq	$184, %rdi
               	xorl	%esi, %esi
               	callq	0x4139e0 <pthread_cond_init@plt>
               	testq	%rbp, %rbp
               	je	0x43979a <Kotlin_initRuntimeIfNeeded+0x51a>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x43979a <Kotlin_initRuntimeIfNeeded+0x51a>
               	cmpl	$1, %eax
               	jne	0x43979a <Kotlin_initRuntimeIfNeeded+0x51a>
               	movb	177602(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43979a <Kotlin_initRuntimeIfNeeded+0x51a>
               	movq	%rbp, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	(%r13), %ebp
               	movslq	%ebp, %r9
               	movq	16(%rsp), %r8
               	movq	152(%r8), %rsi
               	movq	%r9, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x439855 <Kotlin_initRuntimeIfNeeded+0x5d5>
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	movq	%rdx, %rbx
               	movq	144(%r8), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	jne	0x43986d <Kotlin_initRuntimeIfNeeded+0x5ed>
               	jmp	0x4398c6 <Kotlin_initRuntimeIfNeeded+0x646>
               	movq	%r15, 173344(%rip)      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	$0, 165832(%rip)        # 0x461fb8 <write+0x461fb8>
               	jne	0x4395c0 <Kotlin_initRuntimeIfNeeded+0x340>
               	jmp	0x4395cc <Kotlin_initRuntimeIfNeeded+0x34c>
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	16(%rsp), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x43984d <Kotlin_initRuntimeIfNeeded+0x5cd>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	xorl	%r13d, %r13d
               	testl	%ebp, %ebp
               	jne	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	cmpl	$1, %eax
               	jne	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	movb	177423(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43984d <Kotlin_initRuntimeIfNeeded+0x5cd>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	xorl	%r13d, %r13d
               	jmp	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	movl	%edx, %ebx
               	movq	144(%r8), %rax
               	movq	(%rax,%rbx,8), %rax
               	testq	%rax, %rax
               	je	0x4398c6 <Kotlin_initRuntimeIfNeeded+0x646>
               	movq	(%rax), %r12
               	cmpl	8(%r12), %ebp
               	jne	0x439891 <Kotlin_initRuntimeIfNeeded+0x611>
               	testq	%r12, %r12
               	jne	0x439ab4 <Kotlin_initRuntimeIfNeeded+0x834>
               	jmp	0x4398c6 <Kotlin_initRuntimeIfNeeded+0x646>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%esi
               	cmpq	%rbx, %rdx
               	jne	0x4398c6 <Kotlin_initRuntimeIfNeeded+0x646>
               	cmpl	%ecx, %ebp
               	je	0x4398bd <Kotlin_initRuntimeIfNeeded+0x63d>
               	movq	%r12, %rdi
               	movq	(%r12), %r12
               	testq	%r12, %r12
               	je	0x4398c6 <Kotlin_initRuntimeIfNeeded+0x646>
               	movslq	8(%r12), %rcx
               	movq	%rcx, %rax
               	orq	%rsi, %rax
               	shrq	$32, %rax
               	je	0x439882 <Kotlin_initRuntimeIfNeeded+0x602>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rsi
               	cmpq	%rbx, %rdx
               	je	0x43988d <Kotlin_initRuntimeIfNeeded+0x60d>
               	jmp	0x4398c6 <Kotlin_initRuntimeIfNeeded+0x646>
               	testq	%rdi, %rdi
               	jne	0x439ab4 <Kotlin_initRuntimeIfNeeded+0x834>
               	movq	%rbx, 32(%rsp)
               	movq	%r9, 64(%rsp)
               	movl	$1, %edi
               	movl	$24, %esi
               	movq	%r8, %rbx
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r12
               	movl	%ebp, 8(%rax)
               	leaq	176(%rbx), %rdi
               	movq	152(%rbx), %rsi
               	movq	168(%rbx), %rdx
               	movl	$1, %ecx
               	callq	0x43dcfa <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>
               	testb	$1, %al
               	jne	0x439921 <Kotlin_initRuntimeIfNeeded+0x6a1>
               	movq	16(%rsp), %r8
               	movq	144(%r8), %rbp
               	movq	32(%rsp), %rdi
               	jmp	0x439a34 <Kotlin_initRuntimeIfNeeded+0x7b4>
               	movq	%rdx, %r14
               	movl	%ebp, 32(%rsp)
               	cmpq	$1, %rdx
               	je	0x439ed7 <Kotlin_initRuntimeIfNeeded+0xc57>
               	movl	$8, %esi
               	movq	%r14, %rdi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbp
               	leaq	(,%r14,8), %rdx
               	movq	%rax, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	movq	16(%rsp), %r8
               	movq	160(%r8), %rbx
               	movq	$0, 160(%r8)
               	testq	%rbx, %rbx
               	je	0x4399e3 <Kotlin_initRuntimeIfNeeded+0x763>
               	leaq	160(%r8), %rsi
               	xorl	%edi, %edi
               	jmp	0x4399a3 <Kotlin_initRuntimeIfNeeded+0x723>
               	xorl	%edx, %edx
               	divl	%r14d
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	je	0x4399c8 <Kotlin_initRuntimeIfNeeded+0x748>
               	movq	(%rax), %rax
               	movq	%rax, (%rcx)
               	movq	(%rbp,%rdx,8), %rax
               	movq	%rcx, (%rax)
               	movq	%rdi, %rdx
               	movq	%rdx, %rdi
               	testq	%rbx, %rbx
               	je	0x4399e3 <Kotlin_initRuntimeIfNeeded+0x763>
               	movq	%rbx, %rcx
               	movq	(%rbx), %rbx
               	movslq	8(%rcx), %rax
               	movq	%rax, %rdx
               	orq	%r14, %rdx
               	shrq	$32, %rdx
               	je	0x43997b <Kotlin_initRuntimeIfNeeded+0x6fb>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	(%rbp,%rdx,8), %rax
               	testq	%rax, %rax
               	jne	0x43998a <Kotlin_initRuntimeIfNeeded+0x70a>
               	movq	(%rsi), %rax
               	movq	%rax, (%rcx)
               	movq	%rcx, (%rsi)
               	movq	%rsi, (%rbp,%rdx,8)
               	cmpq	$0, (%rcx)
               	je	0x43999b <Kotlin_initRuntimeIfNeeded+0x71b>
               	movq	%rcx, (%rbp,%rdi,8)
               	jmp	0x43999b <Kotlin_initRuntimeIfNeeded+0x71b>
               	movq	144(%r8), %rdi
               	leaq	192(%r8), %rax
               	cmpq	%rdi, %rax
               	je	0x439a00 <Kotlin_initRuntimeIfNeeded+0x780>
               	callq	0x413730 <free@plt>
               	movq	16(%rsp), %r8
               	movq	%r14, 152(%r8)
               	movq	%rbp, 144(%r8)
               	movq	64(%rsp), %rax
               	movq	%rax, %rcx
               	orq	%r14, %rcx
               	shrq	$32, %rcx
               	je	0x439a29 <Kotlin_initRuntimeIfNeeded+0x7a9>
               	xorl	%edx, %edx
               	divq	%r14
               	movq	%rdx, %rdi
               	jmp	0x439a34 <Kotlin_initRuntimeIfNeeded+0x7b4>
               	movl	32(%rsp), %eax
               	xorl	%edx, %edx
               	divl	%r14d
               	movl	%edx, %edi
               	movq	(%rbp,%rdi,8), %rax
               	testq	%rax, %rax
               	movq	48(%rsp), %r14
               	je	0x439a54 <Kotlin_initRuntimeIfNeeded+0x7d4>
               	movq	(%rax), %rax
               	movq	%rax, (%r12)
               	movq	(%rbp,%rdi,8), %rax
               	movq	%r12, (%rax)
               	jmp	0x439aac <Kotlin_initRuntimeIfNeeded+0x82c>
               	movq	%r8, %rcx
               	addq	$160, %rcx
               	movq	160(%r8), %rax
               	movq	%rax, (%r12)
               	movq	%r12, 160(%r8)
               	movq	(%r12), %rax
               	testq	%rax, %rax
               	je	0x439aa7 <Kotlin_initRuntimeIfNeeded+0x827>
               	movq	152(%r8), %rsi
               	movslq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rsi, %rdx
               	shrq	$32, %rdx
               	je	0x439a97 <Kotlin_initRuntimeIfNeeded+0x817>
               	xorl	%edx, %edx
               	divq	%rsi
               	jmp	0x439a9b <Kotlin_initRuntimeIfNeeded+0x81b>
               	xorl	%edx, %edx
               	divl	%esi
               	movq	%r12, (%rbp,%rdx,8)
               	movq	144(%r8), %rbp
               	movq	%rcx, (%rbp,%rdi,8)
               	addq	$1, 168(%r8)
               	movq	%r13, 16(%r12)
               	movq	-64(%r14), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r8, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x439b05 <Kotlin_initRuntimeIfNeeded+0x885>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	movq	56(%rsp), %r12
               	jne	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	cmpl	$1, %eax
               	jne	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	movb	176729(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x439b0a <Kotlin_initRuntimeIfNeeded+0x88a>
               	movq	56(%rsp), %r12
               	movq	%r14, %rax
               	movq	%r13, -40(%r14)
               	movq	(%r12), %rbp
               	movq	72(%rsp), %rbx
               	callq	0x4137c0 <pthread_self@plt>
               	movq	%rax, 240(%r13)
               	movq	%rbx, 248(%r13)
               	movq	%r13, 8(%r12)
               	movq	276876(%rip), %rbx      # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	testq	%rbx, %rbx
               	je	0x439b64 <Kotlin_initRuntimeIfNeeded+0x8e4>
               	nopw	%cs:(%rax,%rax)
               	nop
               	xorl	%edi, %edi
               	movq	%rbp, %rsi
               	callq	*(%rbx)
               	movq	8(%rbx), %rbx
               	testq	%rbx, %rbx
               	jne	0x439b50 <Kotlin_initRuntimeIfNeeded+0x8d0>
               	movq	(%r12), %rbp
               	movslq	156(%rbp), %rdx
               	leaq	80(%rbp), %r12
               	movq	72(%rbp), %rax
               	movq	80(%rbp), %r13
               	movq	%r13, %rbx
               	subq	%rax, %rbx
               	sarq	$3, %rbx
               	cmpq	%rdx, %rbx
               	jae	0x439bf3 <Kotlin_initRuntimeIfNeeded+0x973>
               	movq	%rdx, %r14
               	subq	%rbx, %r14
               	je	0x439ce9 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	88(%rbp), %rax
               	subq	%r13, %rax
               	sarq	$3, %rax
               	cmpq	%r14, %rax
               	jae	0x439c07 <Kotlin_initRuntimeIfNeeded+0x987>
               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
               	movq	%rbx, %rcx
               	xorq	%rax, %rcx
               	cmpq	%r14, %rcx
               	jb	0x439f4e <Kotlin_initRuntimeIfNeeded+0xcce>
               	movq	%rdx, 16(%rsp)
               	cmpq	%r14, %rbx
               	movq	%rbx, %rcx
               	cmovbq	%r14, %rcx
               	leaq	(%rcx,%rbx), %rdi
               	cmpq	%rax, %rdi
               	cmovaq	%rax, %rdi
               	addq	%rbx, %rcx
               	cmovbq	%rax, %rdi
               	testq	%rdi, %rdi
               	je	0x439c2d <Kotlin_initRuntimeIfNeeded+0x9ad>
               	movl	$8, %esi
               	movq	%rdi, %r12
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %r13
               	jmp	0x439c33 <Kotlin_initRuntimeIfNeeded+0x9b3>
               	jbe	0x439ce9 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(%rax,%rdx,8), %rax
               	cmpq	%r13, %rax
               	jne	0x439c24 <Kotlin_initRuntimeIfNeeded+0x9a4>
               	jmp	0x439ce9 <Kotlin_initRuntimeIfNeeded+0xa69>
               	leaq	(,%r14,8), %rdx
               	movq	%r13, %rdi
               	xorl	%esi, %esi
               	callq	0x413750 <memset@plt>
               	leaq	(,%r14,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%r12)
               	jmp	0x439ce9 <Kotlin_initRuntimeIfNeeded+0xa69>
               	movq	%rdi, %r12
               	xorl	%r13d, %r13d
               	leaq	(,%rbx,8), %rdi
               	addq	%r13, %rdi
               	shlq	$3, %r14
               	xorl	%esi, %esi
               	movq	%r14, %rdx
               	callq	0x413750 <memset@plt>
               	movq	72(%rbp), %rdi
               	movq	80(%rbp), %rax
               	cmpq	%rax, %rdi
               	je	0x439cb5 <Kotlin_initRuntimeIfNeeded+0xa35>
               	movq	%rax, %rcx
               	subq	%rdi, %rcx
               	addq	$-8, %rcx
               	cmpq	$24, %rcx
               	jb	0x439c92 <Kotlin_initRuntimeIfNeeded+0xa12>
               	shrq	$3, %rcx
               	addq	$1, %rcx
               	leaq	(%rdi,%rcx,8), %rdx
               	cmpq	%rdx, %r13
               	jae	0x439dfd <Kotlin_initRuntimeIfNeeded+0xb7d>
               	leaq	(,%rcx,8), %rdx
               	addq	%r13, %rdx
               	cmpq	%rdx, %rdi
               	jae	0x439dfd <Kotlin_initRuntimeIfNeeded+0xb7d>
               	movq	%r13, %rcx
               	subq	%rdi, %rax
               	xorl	%edx, %edx
               	nopw	(%rax,%rax)
               	movq	(%rdi,%rdx), %rsi
               	movq	%rsi, (%rcx,%rdx)
               	addq	$8, %rdx
               	cmpq	%rdx, %rax
               	jne	0x439ca0 <Kotlin_initRuntimeIfNeeded+0xa20>
               	movq	72(%rbp), %rdi
               	leaq	88(%rbp), %rbx
               	testq	%rdi, %rdi
               	je	0x439cc3 <Kotlin_initRuntimeIfNeeded+0xa43>
               	callq	0x413730 <free@plt>
               	movq	%r13, 72(%rbp)
               	movq	16(%rsp), %rax
               	leaq	(,%rax,8), %rax
               	addq	%r13, %rax
               	movq	%rax, 80(%rbp)
               	leaq	(,%r12,8), %rax
               	addq	%r13, %rax
               	movq	%rax, (%rbx)
               	movl	$1, 152(%rbp)
               	cmpb	$0, 15(%rsp)
               	movq	48(%rsp), %r14
               	movq	56(%rsp), %r12
               	movq	40(%rsp), %r13
               	je	0x439d34 <Kotlin_initRuntimeIfNeeded+0xab4>
               	movq	276408(%rip), %rbp      # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x439d64 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r12), %rbx
               	nopl	(%rax)
               	movl	$1, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x439d20 <Kotlin_initRuntimeIfNeeded+0xaa0>
               	movq	276365(%rip), %rbp      # 0x47d4c8 <(anonymous namespace)::initHeadNode>
               	testq	%rbp, %rbp
               	je	0x439d64 <Kotlin_initRuntimeIfNeeded+0xae4>
               	movq	(%r12), %rbx
               	nopl	(%rax,%rax)
               	movl	$2, %edi
               	movq	%rbx, %rsi
               	callq	*(%rbp)
               	movq	8(%rbp), %rbp
               	testq	%rbp, %rbp
               	jne	0x439d50 <Kotlin_initRuntimeIfNeeded+0xad0>
               	movl	$1, 16(%r12)
               	testq	%r15, %r15
               	je	0x439d97 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movl	28(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ecx, %ecx
               	jne	0x439d97 <Kotlin_initRuntimeIfNeeded+0xb17>
               	cmpl	$1, %eax
               	jne	0x439d97 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movb	176069(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439d97 <Kotlin_initRuntimeIfNeeded+0xb17>
               	movq	%r13, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	-48(%r14), %rbp
               	leaq	276219(%rip), %rdi      # 0x47d4a0 <konan::terminationKeyOnceControl>
               	leaq	2820(%rip), %rsi        # 0x43a8b0 <konan::onThreadExitInit()>
               	callq	0x413a10 <pthread_once@plt>
               	movl	$1, %edi
               	movl	$24, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, %rbx
               	leaq	598(%rip), %rax         # 0x43a020 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>
               	movq	%rax, 8(%rbx)
               	movq	%rbp, 16(%rbx)
               	movl	276164(%rip), %edi      # 0x47d49c <konan::terminationKey>
               	callq	0x413a20 <pthread_getspecific@plt>
               	movq	%rax, (%rbx)
               	movl	276150(%rip), %edi      # 0x47d49c <konan::terminationKey>
               	movq	%rbx, %rsi
               	callq	0x413850 <pthread_setspecific@plt>
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%rcx, %r8
               	andq	$-4, %r8
               	leaq	-4(%r8), %rdx
               	movq	%rdx, %rsi
               	shrq	$2, %rsi
               	addq	$1, %rsi
               	movl	%esi, %ebx
               	andl	$3, %ebx
               	cmpq	$12, %rdx
               	jae	0x439e22 <Kotlin_initRuntimeIfNeeded+0xba2>
               	xorl	%edx, %edx
               	jmp	0x439e8c <Kotlin_initRuntimeIfNeeded+0xc0c>
               	andq	$-4, %rsi
               	negq	%rsi
               	xorl	%edx, %edx
               	movups	(%rdi,%rdx,8), %xmm0
               	movups	16(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, (%r13,%rdx,8)
               	movups	%xmm1, 16(%r13,%rdx,8)
               	movups	32(%rdi,%rdx,8), %xmm0
               	movups	48(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 32(%r13,%rdx,8)
               	movups	%xmm1, 48(%r13,%rdx,8)
               	movups	64(%rdi,%rdx,8), %xmm0
               	movups	80(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 64(%r13,%rdx,8)
               	movups	%xmm1, 80(%r13,%rdx,8)
               	movups	96(%rdi,%rdx,8), %xmm0
               	movups	112(%rdi,%rdx,8), %xmm1
               	movups	%xmm0, 96(%r13,%rdx,8)
               	movups	%xmm1, 112(%r13,%rdx,8)
               	addq	$16, %rdx
               	addq	$4, %rsi
               	jne	0x439e2b <Kotlin_initRuntimeIfNeeded+0xbab>
               	testq	%rbx, %rbx
               	je	0x439eba <Kotlin_initRuntimeIfNeeded+0xc3a>
               	leaq	16(,%rdx,8), %rdx
               	negq	%rbx
               	movups	-16(%rdi,%rdx), %xmm0
               	movups	(%rdi,%rdx), %xmm1
               	movups	%xmm0, -16(%r13,%rdx)
               	movups	%xmm1, (%r13,%rdx)
               	addq	$32, %rdx
               	incq	%rbx
               	jne	0x439e9c <Kotlin_initRuntimeIfNeeded+0xc1c>
               	cmpq	%r8, %rcx
               	je	0x439cb1 <Kotlin_initRuntimeIfNeeded+0xa31>
               	leaq	(,%r8,8), %rcx
               	addq	%r13, %rcx
               	leaq	(%rdi,%r8,8), %rdi
               	jmp	0x439c95 <Kotlin_initRuntimeIfNeeded+0xa15>
               	movq	16(%rsp), %rax
               	leaq	192(%rax), %rbp
               	movq	$0, 192(%rax)
               	jmp	0x439954 <Kotlin_initRuntimeIfNeeded+0x6d4>
               	leaq	275934(%rip), %rdi      # 0x47d4d8 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43cdc1 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x4392b9 <Kotlin_initRuntimeIfNeeded+0x39>
               	leaq	3266(%rip), %rdi        # 0x43abd0 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43cefa <std::set_terminate(void (*)())>
               	movq	%rax, 275910(%rip)      # 0x47d4e0 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	275895(%rip), %rdi      # 0x47d4d8 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43ceb0 <__cxa_guard_release>
               	jmp	0x4392b9 <Kotlin_initRuntimeIfNeeded+0x39>
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	leaq	47972(%rip), %rdx       # 0x445aa2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1969>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x4368d0 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	leaq	47923(%rip), %rdi       # 0x445a88 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
               	callq	0x437220 <std::__throw_length_error(char const*)>
               	movq	%rax, %rbx
               	testq	%r15, %r15
               	je	0x439f72 <Kotlin_initRuntimeIfNeeded+0xcf2>
               	movq	%r15, %rdi
               	callq	0x425350 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x413730 <free@plt>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movq	%rax, %rbp
               	movq	48(%rsp), %rax
               	movq	-64(%rax), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r14)
               	movq	16(%rsp), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%r14, %r14
               	je	0x439fe1 <Kotlin_initRuntimeIfNeeded+0xd61>
               	addq	$328, %r14              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x439fe1 <Kotlin_initRuntimeIfNeeded+0xd61>
               	cmpl	$1, %eax
               	jne	0x439fe1 <Kotlin_initRuntimeIfNeeded+0xd61>
               	movb	175505(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439fe1 <Kotlin_initRuntimeIfNeeded+0xd61>
               	movq	%r14, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x439fe1 <Kotlin_initRuntimeIfNeeded+0xd61>
               	movq	%rax, %rbp
               	jmp	0x439fe6 <Kotlin_initRuntimeIfNeeded+0xd66>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	jmp	0x439fde <Kotlin_initRuntimeIfNeeded+0xd5e>
               	jmp	0x439fde <Kotlin_initRuntimeIfNeeded+0xd5e>
               	movq	%rax, %rbp
               	testq	%r15, %r15
               	jne	0x439fee <Kotlin_initRuntimeIfNeeded+0xd6e>
               	movq	%rbp, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	movl	28(%rsp), %edx
               	movl	%edx, %eax
               	movq	40(%rsp), %rcx
               	xchgl	%eax, (%rcx)
               	testl	%edx, %edx
               	jne	0x439fe6 <Kotlin_initRuntimeIfNeeded+0xd66>
               	cmpl	$1, %eax
               	jne	0x439fe6 <Kotlin_initRuntimeIfNeeded+0xd66>
               	movb	175430(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x439fe6 <Kotlin_initRuntimeIfNeeded+0xd66>
               	movq	40(%rsp), %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rbp, %rdi
               	callq	0x4244a0 <__clang_call_terminate>

<(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x43a057 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	movb	175369(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a057 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x37>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$2, 16(%rbx)
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	%rbx, -48(%rax)
               	lock
               	addl	$-1, 275528(%rip)       # 0x47d4c4 <(anonymous namespace)::aliveRuntimesCount>
               	movq	(%rbx), %rax
               	movq	72(%rax), %rcx
               	cmpq	%rcx, 80(%rax)
               	je	0x43a08d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6d>
               	movq	%rcx, 80(%rax)
               	movl	$2, 152(%rax)
               	movq	%rbx, 8(%rsp)
               	movq	8(%rbx), %rbx
               	movslq	(%rbx), %rax
               	movq	%rax, 16(%rsp)
               	movq	$0, -40(%r12)
               	callq	0x438f80 <(anonymous namespace)::theState()>
               	movq	%rax, %r15
               	movq	%rbx, (%rsp)
               	movq	248(%rbx), %r13
               	leaq	328(%r13), %r14
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rax, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testq	%r13, %r13
               	je	0x43a107 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x43a107 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	cmpl	$1, %eax
               	jne	0x43a107 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	movb	175189(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a107 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
               	movq	%r14, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movslq	(%rax), %rsi
               	movq	152(%r15), %rcx
               	movq	%rsi, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43a141 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x121>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	movq	%rdx, %r9
               	movq	144(%r15), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	jne	0x43a15e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x13e>
               	jmp	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	movl	%edx, %r9d
               	movq	144(%r15), %r8
               	movq	(%r8,%r9,8), %r10
               	testq	%r10, %r10
               	je	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movq	(%r10), %rdi
               	cmpl	8(%rdi), %esi
               	jne	0x43a170 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rdi, %rdi
               	jne	0x43a1cc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1ac>
               	jmp	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movslq	8(%rdi), %rbp
               	movq	%rbp, %rax
               	orq	%rcx, %rax
               	shrq	$32, %rax
               	je	0x43a1b0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x190>
               	movq	%rbp, %rax
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	je	0x43a1bf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19f>
               	jmp	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	nopl	(%rax)
               	movl	%ebp, %eax
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	jne	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	cmpl	%ebp, %esi
               	jne	0x43a170 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
               	testq	%rbx, %rbx
               	je	0x43a27f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
               	movq	%r10, %rax
               	nop
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rdi, %rax
               	jne	0x43a1d0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1b0>
               	cmpq	%rsi, %r10
               	je	0x43a208 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1e8>
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43a26c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movslq	8(%rax), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x43a22c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20c>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43a235 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
               	jmp	0x43a26c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movq	(%rdi), %rbp
               	testq	%rbp, %rbp
               	je	0x43a253 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x233>
               	movslq	8(%rbp), %rax
               	movq	%rax, %rdx
               	orq	%rcx, %rdx
               	shrq	$32, %rdx
               	je	0x43a23b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x21b>
               	xorl	%edx, %edx
               	divq	%rcx
               	cmpq	%r9, %rdx
               	jne	0x43a244 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x224>
               	jmp	0x43a26c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x43a26c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x43a26c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	xorl	%edx, %edx
               	divl	%ecx
               	cmpq	%r9, %rdx
               	je	0x43a26c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
               	movq	%r10, (%r8,%rdx,8)
               	movq	144(%r15), %r8
               	movq	(%r8,%r9,8), %r10
               	movq	%r15, %rax
               	addq	$160, %rax
               	cmpq	%r10, %rax
               	jne	0x43a264 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x244>
               	movq	%rbp, (%r10)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rdi), %rax
               	movq	%rax, (%rsi)
               	callq	0x413730 <free@plt>
               	addq	$-1, 168(%r15)
               	testq	%r13, %r13
               	movq	%r12, 24(%rsp)
               	je	0x43a29b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x27b>
               	movl	$1, %ebx
               	xchgl	%ebx, (%r14)
               	movq	%r15, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	jmp	0x43a2bc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x29c>
               	movq	-64(%r12), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%r15, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%r13, %r13
               	je	0x43a2e7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	movl	%ebx, %eax
               	xchgl	%eax, 328(%r13)
               	testl	%ebx, %ebx
               	jne	0x43a2e7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	cmpl	$1, %eax
               	jne	0x43a2e7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	movb	174716(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a2e7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
               	addq	$328, %r13              # imm = 0x148
               	movq	%r13, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	(%rsp), %rax
               	movq	24(%rax), %rbx
               	movq	56(%rax), %r13
               	cmpq	%rbx, %r13
               	je	0x43a3e5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movq	(%rsp), %rax
               	movq	40(%rax), %r14
               	movq	48(%rax), %r12
               	leaq	39217(%rip), %rbp       # 0x443c40 <_IO_stdin_used+0x240>
               	jmp	0x43a345 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	nopw	%cs:(%rax,%rax)
               	nop
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rsi
               	movq	%rax, %rdi
               	callq	0x43a930 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	addq	$40, %rbx
               	cmpq	%r14, %rbx
               	je	0x43a3a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
               	cmpq	%rbx, %r13
               	je	0x43a3e5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	movl	(%rbx), %ecx
               	cmpq	$3, %rcx
               	ja	0x43a333 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	8(%rbx), %rax
               	movslq	(%rbp,%rcx,4), %rcx
               	addq	%rbp, %rcx
               	jmpq	*%rcx
               	movq	%r12, 32(%rsp)
               	movq	%rbp, %r15
               	movq	16(%rbx), %rsi
               	movq	24(%rbx), %rbp
               	testq	%rsi, %rsi
               	movq	(%rsp), %r12
               	je	0x43a385 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x365>
               	movq	248(%r12), %rdi
               	addq	$8, %rdi
               	callq	0x4258f0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r12), %rsi
               	movq	%rbp, %rdi
               	callq	0x43a930 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
               	movq	%r15, %rbp
               	movq	32(%rsp), %r12
               	jmp	0x43a333 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	nop
               	movq	8(%r12), %rbx
               	addq	$8, %r12
               	leaq	480(%rbx), %r14
               	cmpq	%rbx, %r13
               	jne	0x43a345 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
               	jmp	0x43a3e5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
               	nop
               	testq	%rax, %rax
               	je	0x43a333 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %rcx
               	movq	248(%rcx), %rdi
               	addq	$8, %rdi
               	movq	%rax, %rsi
               	callq	0x4258f0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x43a333 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
               	movq	(%rsp), %r14
               	movq	112(%r14), %rbp
               	leaq	96(%r14), %rbx
               	cmpq	%rbx, %rbp
               	movq	8(%rsp), %r13
               	jne	0x43a5f4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d4>
               	movq	136(%r14), %rsi
               	testq	%rsi, %rsi
               	je	0x43a41b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3fb>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4258f0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	movq	248(%r14), %rbp
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%rbp)
               	leaq	144(%r14), %rdi
               	callq	0x4139f0 <pthread_mutex_destroy@plt>
               	leaq	184(%r14), %rdi
               	callq	0x413a00 <pthread_cond_destroy@plt>
               	testq	%rbp, %rbp
               	movq	24(%rsp), %r12
               	je	0x43a476 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	addq	$328, %rbp              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%rbp)
               	testl	%ebx, %ebx
               	jne	0x43a476 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	cmpl	$1, %eax
               	jne	0x43a476 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	movb	174310(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a476 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
               	movq	%rbp, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	104(%r14), %rdi
               	callq	0x43ab90 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	8(%r14), %rdi
               	testq	%rdi, %rdi
               	je	0x43a4bb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x49b>
               	movq	48(%r14), %rbx
               	movq	80(%r14), %rbp
               	leaq	8(%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x43a4b6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x496>
               	addq	$-8, %rbx
               	nopl	(%rax)
               	movq	8(%rbx), %rdi
               	addq	$8, %rbx
               	callq	0x413730 <free@plt>
               	cmpq	%rbp, %rbx
               	jb	0x43a4a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x480>
               	movq	8(%r14), %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	(%r13), %rax
               	movl	$1, %ecx
               	xchgl	%ecx, 328(%rax)
               	movq	(%r13), %rbx
               	movl	274368(%rip), %edi      # 0x47d49c <konan::terminationKey>
               	testl	%edi, %edi
               	je	0x43a4ea <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4ca>
               	callq	0x413a20 <pthread_getspecific@plt>
               	testq	%rax, %rax
               	je	0x43a4f9 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4d9>
               	movq	%r12, %rax
               	movq	$0, -64(%r12)
               	cmpq	$0, 162487(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x43a517 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x4f7>
               	leaq	169998(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	jne	0x43a895 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x875>
               	movq	169962(%rip), %rax      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	cmpq	%rbx, 169963(%rip)      # 0x463d10 <kotlin::mm::GlobalData::instance_+0x20>
               	je	0x43a60f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5ef>
               	cmpq	%rbx, %rax
               	je	0x43a626 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x606>
               	movq	360(%rbx), %rbp
               	movq	352(%rbp), %r14
               	movq	$0, 352(%rbp)
               	movq	352(%rbx), %rax
               	movq	$0, 352(%rbx)
               	movq	352(%rbp), %rbx
               	movq	%rax, 352(%rbp)
               	testq	%rbx, %rbx
               	je	0x43a5b1 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x591>
               	movq	352(%rbx), %r15
               	testq	%r15, %r15
               	je	0x43a58e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x56e>
               	movq	%r15, %rdi
               	callq	0x425350 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r15, %rdi
               	callq	0x413730 <free@plt>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x4253a0 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	352(%rbp), %rax
               	testq	%rax, %rax
               	je	0x43a5bd <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x59d>
               	movq	%rbp, 360(%rax)
               	testq	%r14, %r14
               	je	0x43a677 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
               	movq	%r14, %rdi
               	callq	0x425350 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	jmp	0x43a677 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
               	nopl	(%rax,%rax)
               	movq	%rbp, %rdi
               	callq	0x43d2e1 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
               	movq	%rax, %rbp
               	cmpq	%rbx, %rax
               	je	0x43a3ff <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3df>
               	movq	40(%rbp), %rsi
               	testq	%rsi, %rsi
               	je	0x43a5e0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5c0>
               	movq	248(%r14), %rdi
               	addq	$8, %rdi
               	callq	0x4258f0 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
               	jmp	0x43a5e0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5c0>
               	movq	360(%rbx), %rcx
               	movq	%rcx, 169715(%rip)      # 0x463d10 <kotlin::mm::GlobalData::instance_+0x20>
               	cmpq	%rbx, %rax
               	jne	0x43a534 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x514>
               	movq	352(%rbx), %rcx
               	movq	$0, 352(%rbx)
               	movq	%rcx, 169673(%rip)      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rax, %rax
               	je	0x43a667 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x647>
               	movq	$0, 352(%rbx)
               	leaq	8(%rbx), %rdi
               	callq	0x4253a0 <kotlin::mm::ThreadData::~ThreadData()>
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	169633(%rip), %rcx      # 0x463d08 <kotlin::mm::GlobalData::instance_+0x18>
               	testq	%rcx, %rcx
               	je	0x43a677 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
               	movq	$0, 360(%rcx)
               	cmpq	$0, 162105(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x43a68d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x66d>
               	leaq	169616(%rip), %rdi      # 0x463d18 <kotlin::mm::GlobalData::instance_+0x28>
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%r13, %rdi
               	callq	0x413730 <free@plt>
               	callq	0x438f80 <(anonymous namespace)::theState()>
               	movq	%rax, %r14
               	movq	%rax, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	movq	208(%r14), %rdi
               	movq	16(%rsp), %rcx
               	movq	%rcx, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43a6dd <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6bd>
               	movq	%rcx, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r8
               	movq	200(%r14), %rax
               	movq	(%rax,%r8,8), %rax
               	testq	%rax, %rax
               	jne	0x43a6fa <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6da>
               	jmp	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movl	%ecx, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r8d
               	movq	200(%r14), %rax
               	movq	(%rax,%r8,8), %rax
               	testq	%rax, %rax
               	je	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movq	(%rax), %rbx
               	cmpl	%ecx, 8(%rbx)
               	jne	0x43a710 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6f0>
               	testq	%rbx, %rbx
               	jne	0x43a76c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x74c>
               	jmp	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movq	%rbx, %rbp
               	movq	(%rbx), %rbx
               	testq	%rbx, %rbx
               	je	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movslq	8(%rbx), %rsi
               	movq	%rsi, %rax
               	orq	%rdi, %rax
               	shrq	$32, %rax
               	je	0x43a750 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x730>
               	movq	%rsi, %rax
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r8, %rdx
               	je	0x43a75f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x73f>
               	jmp	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	nopl	(%rax)
               	movl	%esi, %eax
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r8, %rdx
               	jne	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	cmpl	%ecx, %esi
               	jne	0x43a710 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6f0>
               	testq	%rbp, %rbp
               	je	0x43a862 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
               	movq	16(%rbx), %rdi
               	callq	0x413a30 <pthread_detach@plt>
               	movq	208(%r14), %rdi
               	movslq	8(%rbx), %rax
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x43a796 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x776>
               	xorl	%edx, %edx
               	divq	%rdi
               	movq	%rdx, %r9
               	jmp	0x43a79d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x77d>
               	xorl	%edx, %edx
               	divl	%edi
               	movl	%edx, %r9d
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%rcx, %rax
               	nopl	(%rax,%rax)
               	movq	%rax, %rsi
               	movq	(%rax), %rax
               	cmpq	%rbx, %rax
               	jne	0x43a7b0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x790>
               	cmpq	%rsi, %rcx
               	je	0x43a7e8 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7c8>
               	movq	(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43a84c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movslq	8(%rax), %rax
               	movq	%rax, %rcx
               	orq	%rdi, %rcx
               	shrq	$32, %rcx
               	je	0x43a80c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7ec>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x43a815 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7f5>
               	jmp	0x43a84c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movq	(%rbx), %r10
               	testq	%r10, %r10
               	je	0x43a833 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x813>
               	movslq	8(%r10), %rax
               	movq	%rax, %rdx
               	orq	%rdi, %rdx
               	shrq	$32, %rdx
               	je	0x43a81b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7fb>
               	xorl	%edx, %edx
               	divq	%rdi
               	cmpq	%r9, %rdx
               	jne	0x43a824 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x804>
               	jmp	0x43a84c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x43a84c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movq	%rsi, (%r8,%rdx,8)
               	jmp	0x43a84c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	xorl	%edx, %edx
               	divl	%edi
               	cmpq	%r9, %rdx
               	je	0x43a84c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
               	movq	%rcx, (%r8,%rdx,8)
               	movq	200(%r14), %r8
               	movq	(%r8,%r9,8), %rcx
               	movq	%r14, %rax
               	addq	$216, %rax
               	cmpq	%rcx, %rax
               	jne	0x43a844 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x824>
               	movq	%r10, (%rcx)
               	movq	$0, (%r8,%r9,8)
               	movq	(%rbx), %rax
               	movq	%rax, (%rsi)
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	addq	$-1, 224(%r14)
               	movq	%r14, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	$0, -48(%r12)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	45617(%rip), %rdx       # 0x445abd <typeinfo name for kotlin::gc::GCSchedulerData+0x1984>
               	xorl	%edi, %edi
               	xorl	%eax, %eax
               	callq	0x4368d0 <kotlin::internal::RuntimeAssertFailedPanic(bool, char const*, char const*, ...)>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	%rax, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitInit()>:
               	pushq	%rax
               	leaq	273432(%rip), %rdi      # 0x47d4d0 <konan::dummyKey>
               	xorl	%esi, %esi
               	callq	0x413840 <pthread_key_create@plt>
               	leaq	273366(%rip), %rdi      # 0x47d49c <konan::terminationKey>
               	leaq	19(%rip), %rsi          # 0x43a8e0 <konan::onThreadExitCallback(void*)>
               	popq	%rax
               	jmp	0x413840 <pthread_key_create@plt>
               	nopw	%cs:(%rax,%rax)

<konan::onThreadExitCallback(void*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	movq	%rdi, %rbx
               	movl	273327(%rip), %edi      # 0x47d49c <konan::terminationKey>
               	xorl	%esi, %esi
               	callq	0x413850 <pthread_setspecific@plt>
               	testq	%rbx, %rbx
               	je	0x43a91a <konan::onThreadExitCallback(void*)+0x3a>
               	nopl	(%rax)
               	movq	16(%rbx), %rdi
               	callq	*8(%rbx)
               	movq	(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x43a900 <konan::onThreadExitCallback(void*)+0x20>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	pushq	%rax
               	movq	%rsi, %r15
               	movq	%rdi, %rbx
               	leaq	328(%rsi), %r14
               	movl	$1, %ebp
               	movl	$1, %eax
               	xchgl	%eax, 328(%rsi)
               	movl	%eax, 4(%rsp)
               	leaq	16(%rdi), %r12
               	movl	$1, %r13d
               	xchgl	%r13d, 328(%rsi)
               	movq	%r12, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x43a9d3 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xa3>
               	movl	%r13d, %eax
               	xchgl	%eax, (%r14)
               	testl	%r13d, %r13d
               	jne	0x43a99c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	cmpl	$1, %eax
               	jne	0x43a99c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movb	172992(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43a99c <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x6c>
               	movq	%r14, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x43aa26 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0xf6>
               	jmp	0x43aa3d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movl	$3, (%rbx)
               	movq	$0, 8(%rbx)
               	addq	$56, %rbx
               	movq	%rbx, %rdi
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x43aaa4 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x174>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x43aa3d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	cmpl	$1, %eax
               	jne	0x43aa3d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movb	172831(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43aa3d <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x10d>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x438f80 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r15)
               	movq	%rax, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testq	%r15, %r15
               	je	0x43aac0 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x190>
               	movl	%ebx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ebx, %ebx
               	jne	0x43aa7e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	cmpl	$1, %eax
               	jne	0x43aa7e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movb	172766(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43aa7e <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
               	movq	%r14, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addl	$1, 264(%r12)
               	movl	$1, %ebp
               	xchgl	%ebp, (%r14)
               	movq	%r12, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	%r14, %rbx
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	je	0x43ab03 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1d3>
               	jmp	0x43ab1a <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	callq	0x438f80 <(anonymous namespace)::theState()>
               	movq	%rax, %r12
               	movl	$1, %eax
               	xchgl	%eax, 328
               	movq	%r12, %rdi
               	callq	0x413790 <pthread_mutex_lock@plt>
               	addl	$1, 264(%r12)
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movq	%r12, %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testq	%rbx, %rbx
               	je	0x43ab56 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x226>
               	addq	$328, %rbx              # imm = 0x148
               	movl	%ebp, %eax
               	xchgl	%eax, (%rbx)
               	testl	%ebp, %ebp
               	jne	0x43ab1a <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	cmpl	$1, %eax
               	jne	0x43ab1a <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	movb	172610(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ab1a <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	addq	$40, %r12
               	movq	%r12, %rdi
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	testq	%r15, %r15
               	je	0x43ab47 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x217>
               	movl	4(%rsp), %ecx
               	movl	%ecx, %eax
               	xchgl	%eax, (%r14)
               	testl	%ecx, %ecx
               	jne	0x43ab47 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x217>
               	cmpl	$1, %eax
               	jne	0x43ab47 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x217>
               	movb	172557(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43ab70 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x240>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	addq	$40, %r12
               	movq	%r12, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x413a40 <pthread_cond_broadcast@plt>
               	movq	%r14, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	nopw	%cs:(%rax,%rax)

<std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>:
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	testq	%rdi, %rdi
               	je	0x43abbd <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x2d>
               	movq	%rdi, %rbx
               	movq	24(%rbx), %rdi
               	callq	0x43ab90 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)>
               	movq	16(%rbx), %r14
               	movq	%rbx, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r14, %rbx
               	testq	%r14, %r14
               	jne	0x43aba0 <std::_Rb_tree<(anonymous namespace)::Job, (anonymous namespace)::Job, std::_Identity<(anonymous namespace)::Job>, (anonymous namespace)::JobCompare, kotlin::std_support::allocator<(anonymous namespace)::Job> >::_M_erase(std::_Rb_tree_node<(anonymous namespace)::Job>*)+0x10>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::kotlinHandler()>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rdi
               	callq	0x43c91d <std::current_exception()>
               	cmpq	$0, 8(%rsp)
               	jne	0x43ac17 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x47>
               	leaq	8(%rsp), %rdi
               	callq	0x43c89a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x43ac31 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x61>
               	xorl	%ebx, %ebx
               	jmp	0x43ac37 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x67>
               	leaq	16(%rsp), %rbx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43c85c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbx, %rdi
               	callq	0x43c972 <std::rethrow_exception(std::__exception_ptr::exception_ptr)>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43aed0 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43ac6e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43ac6e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	cmpl	$1, %eax
               	jne	0x43ac6e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	movb	172277(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ac6e <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x9e>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	movq	%rdx, %r15
               	movq	%rax, %rbx
               	leaq	16(%rsp), %rdi
               	callq	0x43c89a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%rbx, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	cmpl	$2, %r15d
               	jne	0x43acee <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x11e>
               	movq	%rax, %r14
               	callq	0x439280 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %r15
               	xorl	%ebx, %ebx
               	xchgl	%ebx, 328(%r15)
               	addq	$328, %r15              # imm = 0x148
               	cmpl	$1, %ebx
               	jne	0x43acd6 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movb	172166(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43acd6 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x106>
               	movq	%r15, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43ad90 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	8(%r14), %rax
               	movq	(%rax), %rdi
               	callq	0x43aec0 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	testq	%rbx, %rbx
               	jne	0x43ad0f <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x13f>
               	xorl	%ebx, %ebx
               	jmp	0x43ad15 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x145>
               	xchgl	%ebp, 328(%rbx)
               	callq	0x43aed0 <(anonymous namespace)::TerminateHandler::queuedHandler()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	172055(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	jmp	0x43ad67 <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x197>
               	movq	%rax, %r14
               	movl	%ebx, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebx, %ebx
               	jne	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	cmpl	$1, %eax
               	jne	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movb	172016(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43ad6c <(anonymous namespace)::TerminateHandler::kotlinHandler()+0x19c>
               	movq	%r15, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	callq	0x43cc25 <__cxa_end_catch>
               	leaq	8(%rsp), %rdi
               	callq	0x43c89a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::processUnhandledException(ObjHeader*)>:
               	pushq	%r14
               	pushq	%rbx
               	subq	$56, %rsp
               	movq	%rdi, %rbx
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 32(%rsp)
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, (%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %r14
               	movq	-64(%rax), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%rsp, %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$25769803776, %rax      # imm = 0x600000000
               	movq	%rax, 16(%rsp)
               	movb	171876(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43adf5 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x65>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	movl	167141(%rip), %eax      # 0x463ae0 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	cmpl	$2, %eax
               	je	0x43ae13 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x83>
               	leaq	167129(%rip), %rdi      # 0x463ae0 <state_global$kotlin.native.internal.UnhandledExceptionHookHolder>
               	leaq	-133950(%rip), %rsi     # 0x41a2d0 <kfun:kotlin.native.internal.UnhandledExceptionHookHolder.$init_global#internal>
               	callq	0x43b080 <CallInitGlobalPossiblyLock>
               	movq	167070(%rip), %rax      # 0x463ab8 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
               	movq	%rax, 24(%rsp)
               	movq	8(%rax), %rax
               	movq	8(%rax), %rdi
               	movq	%rdi, 32(%rsp)
               	testq	%rdi, %rdi
               	je	0x43ae73 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0xe3>
               	leaq	40(%rsp), %rdx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	movq	(%rax), %rax
               	movl	60(%rax), %ecx
               	movq	64(%rax), %rax
               	andl	$44, %ecx
               	shlq	$4, %rcx
               	movq	8(%rax,%rcx), %rax
               	movq	%rbx, %rsi
               	callq	*(%rax)
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%r14
               	retq
               	movq	%rbx, %rdi
               	callq	0x43b2a0 <ThrowException>
               	movq	%rax, %rbx
               	movq	%r14, %rax
               	movq	-64(%r14), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$2, %edx
               	jne	0x43aeb5 <(anonymous namespace)::processUnhandledException(ObjHeader*)+0x125>
               	movq	%rbx, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rdi
               	callq	0x43aec0 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	movq	%rax, %rbx
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x4244a0 <__clang_call_terminate>
               	nopl	(%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>:
               	pushq	%rax
               	callq	0x43afd0 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>
               	nopw	%cs:(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()>:
               	pushq	%rax
               	callq	0x43aee0 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>
               	nopw	%cs:(%rax,%rax)

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 166721(%rip)      # 0x463a34 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43aefa <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1a>
               	callq	0x43af80 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43af16 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x36>
               	xorl	%ebx, %ebx
               	jmp	0x43af21 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x41>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movl	166665(%rip), %edi      # 0x463a30 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a50 <sleep@plt>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	callq	0x4372a0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a60 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43af72 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43af72 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	cmpl	$1, %eax
               	jne	0x43af72 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	movb	171505(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43af72 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x92>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>:
               	pushq	%rax
               	callq	0x43af90 <(anonymous namespace)::TerminateHandler::instance()>
               	callq	*271700(%rip)           # 0x47d4e0 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	nopl	(%rax)

<(anonymous namespace)::TerminateHandler::instance()>:
               	pushq	%rax
               	movb	271681(%rip), %al       # 0x47d4d8 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	testb	%al, %al
               	je	0x43af9d <(anonymous namespace)::TerminateHandler::instance()+0xd>
               	popq	%rax
               	retq
               	leaq	271668(%rip), %rdi      # 0x47d4d8 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43cdc1 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43af9b <(anonymous namespace)::TerminateHandler::instance()+0xb>
               	leaq	-996(%rip), %rdi        # 0x43abd0 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
               	callq	0x43cefa <std::set_terminate(void (*)())>
               	movq	%rax, 271648(%rip)      # 0x47d4e0 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
               	leaq	271633(%rip), %rdi      # 0x47d4d8 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
               	callq	0x43ceb0 <__cxa_guard_release>
               	popq	%rax
               	retq
               	nop

<void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	$1, %ebp
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ebp, 166481(%rip)      # 0x463a34 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
               	jne	0x43afea <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x1a>
               	callq	0x43b070 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	testq	%rbx, %rbx
               	jne	0x43b006 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x36>
               	xorl	%ebx, %ebx
               	jmp	0x43b011 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x41>
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	movl	166425(%rip), %edi      # 0x463a30 <(anonymous namespace)::concurrentTerminateWrapper>
               	callq	0x413a50 <sleep@plt>
               	movq	%rbx, %rdi
               	movl	%ebp, %esi
               	callq	0x4372a0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
               	movl	$1, %edi
               	callq	0x413a60 <_Exit@plt>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43b062 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	movl	%ebp, %eax
               	xchgl	%eax, 328(%rbx)
               	testl	%ebp, %ebp
               	jne	0x43b062 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	cmpl	$1, %eax
               	jne	0x43b062 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	movb	171265(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b062 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x92>
               	addq	$328, %rbx              # imm = 0x148
               	movq	%rbx, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	(%rax,%rax)

<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>:
               	pushq	%rax
               	callq	0x41a220 <ReportUnhandledException>
               	callq	0x436a00 <konan::abort()>
               	nopl	(%rax,%rax)

<CallInitGlobalPossiblyLock>:
               	pushq	%rbp
               	pushq	%r14
               	pushq	%rbx
               	movl	(%rdi), %ebp
               	cmpl	$2, %ebp
               	je	0x43b162 <CallInitGlobalPossiblyLock+0xe2>
               	cmpl	$3, %ebp
               	je	0x43b167 <CallInitGlobalPossiblyLock+0xe7>
               	movq	%rsi, %r14
               	movq	%rdi, %rbx
               	callq	0x4367f0 <konan::gettid()>
               	movl	%ebp, %ecx
               	andl	$3, %ecx
               	cmpl	$1, %ecx
               	jne	0x43b0ee <CallInitGlobalPossiblyLock+0x6e>
               	andl	$-4, %ebp
               	shll	$2, %eax
               	cmpl	%eax, %ebp
               	je	0x43b162 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43b0e0 <CallInitGlobalPossiblyLock+0x60>
               	jmp	0x43b13c <CallInitGlobalPossiblyLock+0xbc>
               	leal	1(,%rax,4), %ecx
               	xorl	%eax, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	jne	0x43b108 <CallInitGlobalPossiblyLock+0x88>
               	callq	*%r14
               	movl	$2, (%rbx)
               	jmp	0x43b162 <CallInitGlobalPossiblyLock+0xe2>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rcx
               	leaq	328(%rcx), %rdi
               	movl	$1, %eax
               	xchgl	%eax, 328(%rcx)
               	nopl	(%rax)
               	movl	(%rbx), %ebp
               	movl	%ebp, %edx
               	andl	$-2, %edx
               	cmpl	$2, %edx
               	jne	0x43b130 <CallInitGlobalPossiblyLock+0xb0>
               	testq	%rcx, %rcx
               	je	0x43b15d <CallInitGlobalPossiblyLock+0xdd>
               	movl	%eax, %ecx
               	xchgl	%ecx, (%rdi)
               	testl	%eax, %eax
               	jne	0x43b15d <CallInitGlobalPossiblyLock+0xdd>
               	cmpl	$1, %ecx
               	jne	0x43b15d <CallInitGlobalPossiblyLock+0xdd>
               	movb	171004(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b15d <CallInitGlobalPossiblyLock+0xdd>
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	cmpl	$3, %ebp
               	je	0x43b167 <CallInitGlobalPossiblyLock+0xe7>
               	popq	%rbx
               	popq	%r14
               	popq	%rbp
               	retq
               	callq	0x41a150 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43cd64 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<CallInitThreadLocal>:
               	pushq	%rbx
               	cmpl	$3, (%rdi)
               	je	0x43b1a3 <CallInitThreadLocal+0x13>
               	movq	%rdi, %rbx
               	movl	$2, (%rdi)
               	callq	*%rsi
               	popq	%rbx
               	retq
               	callq	0x41a150 <ThrowFileFailedToInitializeException>
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movl	$3, (%rbx)
               	callq	0x43cd64 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax,%rax)

<Kotlin_Long_toStringRadix>:
               	subq	$72, %rsp
               	testq	%rdi, %rdi
               	je	0x43b273 <Kotlin_Long_toStringRadix+0xa3>
               	negq	%rdi
               	xorl	%r10d, %r10d
               	movl	$48, %r8d
               	movabsq	$4294967296, %r9        # imm = 0x100000000
               	xorl	%r11d, %r11d
               	nopw	%cs:(%rax,%rax)
               	leaq	15(%rdi), %rdx
               	testq	%rdi, %rdi
               	cmovnsq	%rdi, %rdx
               	sarq	$4, %rdx
               	movl	%edx, %eax
               	shll	$4, %eax
               	subl	%edi, %eax
               	cmpl	$10, %eax
               	movl	$87, %ecx
               	cmovbl	%r8d, %ecx
               	addb	%al, %cl
               	movb	%cl, (%rsp,%r11)
               	addq	$1, %r11
               	addq	%r9, %r10
               	cmpq	$-15, %rdi
               	movq	%rdx, %rdi
               	jl	0x43b200 <Kotlin_Long_toStringRadix+0x30>
               	cmpl	$1, %r11d
               	jle	0x43b283 <Kotlin_Long_toStringRadix+0xb3>
               	movl	%r11d, %r10d
               	leaq	-2(%r10), %rcx
               	xorl	%edx, %edx
               	nop
               	movzbl	(%rsp,%rdx), %edi
               	movzbl	1(%rsp,%rcx), %eax
               	movb	%al, (%rsp,%rdx)
               	movb	%dil, 1(%rsp,%rcx)
               	addq	$1, %rdx
               	leaq	-1(%rcx), %rax
               	cmpq	%rcx, %rdx
               	movq	%rax, %rcx
               	jl	0x43b250 <Kotlin_Long_toStringRadix+0x80>
               	jmp	0x43b287 <Kotlin_Long_toStringRadix+0xb7>
               	leaq	43121(%rip), %rdi       # 0x445aeb <typeinfo name for kotlin::gc::GCSchedulerData+0x19b2>
               	addq	$72, %rsp
               	jmp	0x4374c0 <CreateStringFromCString>
               	sarq	$32, %r10
               	movb	$0, (%rsp,%r10)
               	movq	%rsp, %rdi
               	callq	0x4374c0 <CreateStringFromCString>
               	addq	$72, %rsp
               	retq
               	nopl	(%rax)

<ThrowException>:
               	pushq	%rax
               	callq	0x425980 <ExceptionObjHolder::Throw(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_terminateWithUnhandledException>:
               	pushq	%rax
               	callq	0x43aec0 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)>
               	nopw	%cs:(%rax,%rax)

<Kotlin_Any_equals>:
               	cmpq	%rsi, %rdi
               	sete	%al
               	retq
               	nopw	(%rax,%rax)

<Kotlin_getCurrentStackTrace>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, 32(%rsp)
               	movq	%fs:0, %rax
               	movq	%rax, %rbp
               	movq	-64(%rax), %r13
               	movl	$1, %ebx
               	xchgl	%ebx, 328(%r13)
               	movq	%rsp, %r12
               	movq	%r12, %rdi
               	callq	0x436a10 <kotlin::StackTrace<18446744073709551615ul>::current(unsigned long)>
               	movq	(%rsp), %r14
               	movq	8(%rsp), %r15
               	testq	%r13, %r13
               	je	0x43b346 <Kotlin_getCurrentStackTrace+0x76>
               	addq	$328, %r13              # imm = 0x148
               	movl	%ebx, %eax
               	xchgl	%eax, (%r13)
               	testl	%ebx, %ebx
               	jne	0x43b346 <Kotlin_getCurrentStackTrace+0x76>
               	cmpl	$1, %eax
               	jne	0x43b346 <Kotlin_getCurrentStackTrace+0x76>
               	movb	170518(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b346 <Kotlin_getCurrentStackTrace+0x76>
               	movq	%r13, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 24(%rsp)
               	movq	%rbp, %r13
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 8(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 16(%rsp)
               	subq	%r14, %r15
               	movq	%r15, %rbp
               	sarq	$3, %rbp
               	testl	%ebp, %ebp
               	js	0x43b467 <Kotlin_getCurrentStackTrace+0x197>
               	movq	296(%rax), %rdi
               	movabsq	$34359738360, %rsi      # imm = 0x7FFFFFFF8
               	andq	%r15, %rsi
               	addq	$31, %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rcx
               	leaq	16(%rax), %r12
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rax)
               	movq	$0, 24(%rax)
               	leaq	123614(%rip), %rax      # 0x4596b0 <ktypeglobal:kotlin.native.internal.NativePtrArray#internal>
               	movq	%rax, 16(%rcx)
               	movl	%ebp, 24(%rcx)
               	movq	%r12, 24(%rsp)
               	testq	%r15, %r15
               	je	0x43b425 <Kotlin_getCurrentStackTrace+0x155>
               	cmpq	$1, %rbp
               	movl	$1, %esi
               	cmovaq	%rbp, %rsi
               	movl	%ebp, %edi
               	xorl	%ebp, %ebp
               	movabsq	$4294967296, %r8        # imm = 0x100000000
               	xorl	%ebx, %ebx
               	cmpq	%rbx, %rdi
               	je	0x43b462 <Kotlin_getCurrentStackTrace+0x192>
               	movq	(%r14,%rbx,8), %rax
               	movq	16(%rcx), %rdx
               	movq	%rbp, %rdx
               	sarq	$29, %rdx
               	movq	%rax, 32(%rcx,%rdx)
               	addq	$1, %rbx
               	addq	%r8, %rbp
               	cmpq	%rbx, %rsi
               	jne	0x43b400 <Kotlin_getCurrentStackTrace+0x130>
               	movq	32(%rsp), %rax
               	movq	%r12, (%rax)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43b450 <Kotlin_getCurrentStackTrace+0x180>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r12, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x419ca0 <ThrowArrayIndexOutOfBoundsException>
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	jmp	0x43b46e <Kotlin_getCurrentStackTrace+0x19e>
               	movq	%rax, %r15
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	8(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	testq	%r14, %r14
               	je	0x43b494 <Kotlin_getCurrentStackTrace+0x1c4>
               	movq	%r14, %rdi
               	callq	0x413730 <free@plt>
               	movq	%r15, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax)

<Kotlin_io_Console_print>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	%rdi, %rbx
               	movq	(%rdi), %rax
               	andq	$-4, %rax
               	leaq	120705(%rip), %rcx      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	cmpq	%rcx, (%rax)
               	jne	0x43b620 <Kotlin_io_Console_print+0x180>
               	leaq	24(%rsp), %r15
               	movq	%r15, 8(%rsp)
               	movq	$0, 16(%rsp)
               	movb	$0, 24(%rsp)
               	movl	8(%rbx), %ebp
               	cmpq	$16, %rbp
               	jb	0x43b50e <Kotlin_io_Console_print+0x6e>
               	cmpl	$30, %ebp
               	movl	$30, %r14d
               	cmoval	%ebp, %r14d
               	leaq	1(%r14), %rdi
               	movl	$1, %esi
               	callq	0x413700 <calloc@plt>
               	movq	%rax, 8(%rsp)
               	movq	%r14, 24(%rsp)
               	movq	%rbp, %rax
               	addq	%rbp, %rax
               	je	0x43b5a4 <Kotlin_io_Console_print+0x104>
               	addq	$16, %rbx
               	leaq	(%rbx,%rbp,2), %r12
               	movl	$65533, %r13d           # imm = 0xFFFD
               	leaq	8(%rsp), %r14
               	jmp	0x43b56d <Kotlin_io_Console_print+0xcd>
               	nop
               	cmpq	%r12, %rbp
               	je	0x43b595 <Kotlin_io_Console_print+0xf5>
               	movzwl	2(%rbx), %ecx
               	shll	$10, %eax
               	leal	(%rax,%rcx), %edi
               	addl	$4238353408, %edi       # imm = 0xFCA02400
               	movl	%ecx, %eax
               	andl	$64512, %eax            # imm = 0xFC00
               	addq	$4, %rbx
               	cmpl	$56320, %eax            # imm = 0xDC00
               	cmovnel	%r13d, %edi
               	cmoveq	%rbx, %rbp
               	movq	%r14, %rsi
               	callq	0x437950 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%rbp, %rbx
               	cmpq	%r12, %rbp
               	je	0x43b5a4 <Kotlin_io_Console_print+0x104>
               	leaq	2(%rbx), %rbp
               	movzwl	(%rbx), %eax
               	movl	%eax, %ecx
               	andl	$64512, %ecx            # imm = 0xFC00
               	cmpl	$55296, %ecx            # imm = 0xD800
               	je	0x43b530 <Kotlin_io_Console_print+0x90>
               	movl	$65533, %edi            # imm = 0xFFFD
               	cmpl	$56320, %ecx            # imm = 0xDC00
               	je	0x43b55d <Kotlin_io_Console_print+0xbd>
               	movl	%eax, %edi
               	jmp	0x43b55d <Kotlin_io_Console_print+0xbd>
               	leaq	8(%rsp), %rsi
               	movl	$65533, %edi            # imm = 0xFFFD
               	callq	0x437950 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	328(%rbx), %r12
               	movq	8(%rsp), %rsi
               	movl	16(%rsp), %edx
               	movl	$1, %edi
               	callq	0x413940 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43b602 <Kotlin_io_Console_print+0x162>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x43b602 <Kotlin_io_Console_print+0x162>
               	cmpl	$1, %eax
               	jne	0x43b602 <Kotlin_io_Console_print+0x162>
               	movb	169818(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b602 <Kotlin_io_Console_print+0x162>
               	movq	%r12, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	8(%rsp), %rdi
               	cmpq	%r15, %rdi
               	je	0x43b611 <Kotlin_io_Console_print+0x171>
               	callq	0x413730 <free@plt>
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	leaq	120345(%rip), %rsi      # 0x458c40 <ktypeglobal:kotlin.String#internal>
               	movq	%rbx, %rdi
               	callq	0x419d70 <ThrowClassCastException>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	jne	0x43b64e <Kotlin_io_Console_print+0x1ae>
               	movq	8(%rsp), %rdi
               	cmpq	%r15, %rdi
               	je	0x43b646 <Kotlin_io_Console_print+0x1a6>
               	callq	0x413730 <free@plt>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r12)
               	testl	%ebp, %ebp
               	jne	0x43b637 <Kotlin_io_Console_print+0x197>
               	cmpl	$1, %eax
               	jne	0x43b637 <Kotlin_io_Console_print+0x197>
               	movb	169709(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b637 <Kotlin_io_Console_print+0x197>
               	movq	%r12, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	jmp	0x43b637 <Kotlin_io_Console_print+0x197>
               	nopw	%cs:(%rax,%rax)

<Kotlin_io_Console_println>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43b4a0 <Kotlin_io_Console_print>
               	movq	%fs:0, %rax
               	movq	-64(%rax), %rbx
               	leaq	328(%rbx), %r15
               	movl	$1, %ebp
               	xchgl	%ebp, 328(%rbx)
               	leaq	42037(%rip), %rsi       # 0x445aed <typeinfo name for kotlin::gc::GCSchedulerData+0x19b4>
               	movl	$1, %edx
               	movl	$1, %edi
               	callq	0x413940 <write@plt>
               	testq	%rbx, %rbx
               	je	0x43b6e4 <Kotlin_io_Console_println+0x64>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43b6e4 <Kotlin_io_Console_println+0x64>
               	cmpl	$1, %eax
               	jne	0x43b6e4 <Kotlin_io_Console_println+0x64>
               	movb	169584(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	jne	0x43b6ef <Kotlin_io_Console_println+0x6f>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	movq	%r15, %rdi
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	jmp	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%rax, %r14
               	testq	%rbx, %rbx
               	je	0x43b729 <Kotlin_io_Console_println+0xa9>
               	movl	%ebp, %eax
               	xchgl	%eax, (%r15)
               	testl	%ebp, %ebp
               	jne	0x43b729 <Kotlin_io_Console_println+0xa9>
               	cmpl	$1, %eax
               	jne	0x43b729 <Kotlin_io_Console_println+0xa9>
               	movb	169523(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b729 <Kotlin_io_Console_println+0xa9>
               	movq	%r15, %rdi
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	%r14, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopw	%cs:(%rax,%rax)

<Init_and_run_start>:
               	pushq	%rbp
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbx
               	subq	$88, %rsp
               	movl	%edx, %ebx
               	movq	%rsi, %r15
               	movl	%edi, %r14d
               	callq	0x439280 <Kotlin_initRuntimeIfNeeded>
               	movq	%fs:0, %rax
               	movq	%rax, %r12
               	movq	-64(%rax), %rdi
               	xorl	%eax, %eax
               	xchgl	%eax, 328(%rdi)
               	cmpl	$1, %eax
               	jne	0x43b794 <Init_and_run_start+0x54>
               	movb	169420(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b794 <Init_and_run_start+0x54>
               	addq	$328, %rdi              # imm = 0x148
               	callq	0x425790 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
               	movq	$0, 80(%rsp)
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	movq	%rcx, 64(%rsp)
               	leaq	56(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movabsq	$17179869184, %rcx      # imm = 0x400000000
               	movq	%rcx, 72(%rsp)
               	testl	%r14d, %r14d
               	jle	0x43b965 <Init_and_run_start+0x225>
               	movl	%ebx, 12(%rsp)
               	leal	-1(%r14), %ebp
               	movq	296(%rax), %rdi
               	movl	%ebp, %eax
               	leaq	31(,%rax,8), %rsi
               	andq	$-8, %rsi
               	addq	$112, %rdi
               	callq	0x428ed0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
               	movq	%rax, %rbx
               	addq	$16, %rax
               	xorps	%xmm0, %xmm0
               	movups	%xmm0, 8(%rbx)
               	movq	$0, 24(%rbx)
               	leaq	116597(%rip), %rcx      # 0x457f90 <ktypeglobal:kotlin.Array#internal>
               	movq	%rcx, 16(%rbx)
               	movl	%ebp, 24(%rbx)
               	movq	%rax, 80(%rsp)
               	cmpl	$1, %r14d
               	jne	0x43b847 <Init_and_run_start+0x107>
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	jmp	0x43b8cc <Init_and_run_start+0x18c>
               	movl	%r14d, %ebp
               	movq	%r12, %r13
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	movq	288(%rax), %rcx
               	addq	$-1, %rbp
               	xorl	%r14d, %r14d
               	leaq	16(%rsp), %r12
               	nopl	(%rax,%rax)
               	movq	$0, 40(%rsp)
               	movq	%rcx, 24(%rsp)
               	movq	%r12, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movq	8(%r15,%r14,8), %rdi
               	leaq	40(%rsp), %rsi
               	callq	0x4374c0 <CreateStringFromCString>
               	movq	40(%rsp), %rax
               	movq	%rax, 32(%rbx,%r14,8)
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	addq	$1, %r14
               	cmpq	%r14, %rbp
               	jne	0x43b870 <Init_and_run_start+0x130>
               	xorps	%xmm0, %xmm0
               	movaps	%xmm0, 16(%rsp)
               	movaps	%xmm0, 32(%rsp)
               	movq	%rcx, 24(%rsp)
               	leaq	16(%rsp), %rbx
               	movq	%rbx, 288(%rax)
               	movabsq	$17179869184, %rax      # imm = 0x400000000
               	movq	%rax, 32(%rsp)
               	movb	169041(%rip), %al       # 0x464d50 <kotlin::mm::internal::gSuspensionRequested>
               	testb	$1, %al
               	je	0x43b908 <Init_and_run_start+0x1c8>
               	callq	0x425960 <kotlin::mm::SuspendIfRequestedSlowPath()>
               	callq	0x421b00 <kfun:#main(){}>
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	cmpl	$0, 12(%rsp)
               	je	0x43b954 <Init_and_run_start+0x214>
               	movq	%r13, %rax
               	movq	-48(%r13), %rcx
               	movl	$1, %edx
               	movl	$2, %esi
               	movl	$1, %eax
               	lock
               	cmpxchgl	%esi, 269173(%rip)      # 0x47d4c0 <(anonymous namespace)::globalRuntimeStatus>
               	movq	(%rcx), %rax
               	xchgl	%edx, 328(%rax)
               	xorl	%eax, %eax
               	addq	$88, %rsp
               	popq	%rbx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	popq	%rbp
               	retq
               	callq	0x41a080 <ThrowIllegalArgumentException>
               	movq	%rax, %rdi
               	movq	%r12, %rax
               	movq	-64(%r12), %rax
               	jmp	0x43b9dc <Init_and_run_start+0x29c>
               	movq	%rax, %rdi
               	movq	%r13, %rbp
               	movq	-64(%r13), %rax
               	movq	%rbx, 288(%rax)
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	8(%rax), %rax
               	movq	(%rax), %rbx
               	movq	%rbx, 40(%rsp)
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x43ad90 <(anonymous namespace)::processUnhandledException(ObjHeader*)>
               	movq	%rbx, %rdi
               	callq	0x43b2b0 <Kotlin_terminateWithUnhandledException>
               	movq	%rax, %rdi
               	movq	%rbp, %rax
               	movq	-64(%rbp), %rax
               	jmp	0x43b9d0 <Init_and_run_start+0x290>
               	movq	%rax, %rdi
               	movq	%r13, %rax
               	movq	-64(%r13), %rax
               	movq	24(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	movq	64(%rsp), %rcx
               	movq	%rcx, 288(%rax)
               	callq	0x413740 <_Unwind_Resume@plt>
               	nopl	(%rax)

<main>:
               	pushq	%rax
               	movl	$1, %edx
               	callq	0x43b740 <Init_and_run_start>
               	xorl	%eax, %eax
               	popq	%rcx
               	retq

<read_uleb128(unsigned char const*, unsigned long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %r8b
               	movq	%r8, %rdi
               	andl	$127, %edi
               	shlq	%cl, %rdi
               	addl	$7, %ecx
               	orq	%rdi, %rdx
               	testb	%r8b, %r8b
               	js	0x43ba06 <read_uleb128(unsigned char const*, unsigned long*)+0x7>
               	movq	%rdx, (%rsi)
               	retq

<read_sleb128(unsigned char const*, long*)>:
               	movq	%rdi, %rax
               	xorl	%edx, %edx
               	xorl	%ecx, %ecx
               	incq	%rax
               	movb	-1(%rax), %dil
               	movq	%rdi, %r8
               	andl	$127, %r8d
               	shlq	%cl, %r8
               	addl	$7, %ecx
               	orq	%r8, %rdx
               	testb	%dil, %dil
               	js	0x43ba2c <read_sleb128(unsigned char const*, long*)+0x7>
               	cmpl	$63, %ecx
               	ja	0x43ba5d <read_sleb128(unsigned char const*, long*)+0x38>
               	andb	$64, %dil
               	je	0x43ba5d <read_sleb128(unsigned char const*, long*)+0x38>
               	orq	$-1, %rdi
               	shlq	%cl, %rdi
               	orq	%rdi, %rdx
               	movq	%rdx, (%rsi)
               	retq

<get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$40, %rsp
               	movq	(%rdx), %rax
               	movq	%rsi, 8(%rsp)
               	movq	%rax, 24(%rsp)
               	movq	(%rsi), %rax
               	callq	*16(%rax)
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	je	0x43ba99 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x38>
               	movq	24(%rsp), %rax
               	movq	(%rax), %rax
               	movq	%rax, 24(%rsp)
               	movq	(%rbp), %rax
               	leaq	24(%rsp), %rdx
               	movl	$1, %ecx
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	testb	%al, %al
               	je	0x43bab9 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)+0x58>
               	movq	24(%rsp), %rdx
               	movq	%rdx, (%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>:
               	movq	%rdx, %r9
               	movq	%rcx, %r11
               	cmpb	$80, %dil
               	jne	0x43badf <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x1f>
               	leaq	7(%rdx), %rax
               	andq	$-8, %rax
               	movq	(%rax), %rdx
               	leaq	8(%rax), %rax
               	movq	%rdx, (%rcx)
               	retq
               	pushq	%rbx
               	movl	%edi, %eax
               	movl	%edi, %r10d
               	andl	$15, %eax
               	subq	$16, %rsp
               	cmpb	$12, %al
               	ja	0x43bb50 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x90>
               	leaq	43273(%rip), %rdx       # 0x446400 <_mi_page_empty+0x40>
               	movzbl	%al, %eax
               	movq	%rsi, %rbx
               	movslq	(%rdx,%rax,4), %rax
               	addq	%rdx, %rax
               	jmpq	*%rax
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43b9ff <read_uleb128(unsigned char const*, unsigned long*)>
               	jmp	0x43bb22 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x62>
               	leaq	8(%rsp), %rsi
               	movq	%r9, %rdi
               	callq	0x43ba25 <read_sleb128(unsigned char const*, long*)>
               	movq	8(%rsp), %rdx
               	jmp	0x43bb55 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movzwl	(%r9), %edx
               	jmp	0x43bb38 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x78>
               	movl	(%r9), %edx
               	jmp	0x43bb41 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x81>
               	movswq	(%r9), %rdx
               	leaq	2(%r9), %rax
               	jmp	0x43bb55 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movslq	(%r9), %rdx
               	leaq	4(%r9), %rax
               	jmp	0x43bb55 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	movq	(%r9), %rdx
               	leaq	8(%r9), %rax
               	jmp	0x43bb55 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0x95>
               	callq	0x413950 <abort@plt>
               	testq	%rdx, %rdx
               	je	0x43bb72 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movl	%r10d, %ecx
               	andl	$112, %ecx
               	cmpb	$16, %cl
               	cmoveq	%r9, %rbx
               	addq	%rbx, %rdx
               	testb	%r10b, %r10b
               	jns	0x43bb72 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)+0xb2>
               	movq	(%rdx), %rdx
               	movq	%rdx, (%r11)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<get_ttype_entry(lsda_header_info*, unsigned long)>:
               	subq	$24, %rsp
               	movq	%rdi, %r8
               	movzbl	40(%rdi), %edi
               	cmpb	$-1, %dil
               	je	0x43bbba <get_ttype_entry(lsda_header_info*, unsigned long)+0x3f>
               	movl	%edi, %edx
               	andl	$7, %edx
               	cmpb	$2, %dl
               	je	0x43bbbe <get_ttype_entry(lsda_header_info*, unsigned long)+0x43>
               	ja	0x43bba1 <get_ttype_entry(lsda_header_info*, unsigned long)+0x26>
               	movl	$8, %eax
               	testb	%dl, %dl
               	jmp	0x43bbb3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x38>
               	movl	$4, %eax
               	cmpb	$3, %dl
               	je	0x43bbc3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$8, %eax
               	cmpb	$4, %dl
               	je	0x43bbc3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	callq	0x413950 <abort@plt>
               	xorl	%eax, %eax
               	jmp	0x43bbc3 <get_ttype_entry(lsda_header_info*, unsigned long)+0x48>
               	movl	$2, %eax
               	imulq	%rsi, %rax
               	movq	24(%r8), %rdx
               	movq	16(%r8), %rsi
               	leaq	8(%rsp), %rcx
               	subq	%rax, %rdx
               	callq	0x43bac0 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>:
               	pushq	%r13
               	notq	%rcx
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	24(%rdi), %rbx
               	movq	%rdx, 8(%rsp)
               	leaq	24(%rsp), %r13
               	addq	%rcx, %rbx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43b9ff <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	24(%rsp), %rsi
               	movq	%rax, %rbx
               	testq	%rsi, %rsi
               	je	0x43bc40 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5a>
               	movq	%rbp, %rdi
               	callq	0x43bb7b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	leaq	8(%rsp), %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43ba61 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	testb	%al, %al
               	je	0x43bc0a <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x24>
               	jmp	0x43bc42 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)+0x5c>
               	xorl	%eax, %eax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<base_of_encoded_value(unsigned char, _Unwind_Context*)>:
               	movl	%edi, %eax
               	cmpb	$-1, %dil
               	je	0x43bc8c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	andl	$112, %eax
               	movq	%rsi, %rdi
               	cmpb	$32, %al
               	je	0x43bc7c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2f>
               	ja	0x43bc6b <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1e>
               	testb	%al, %al
               	je	0x43bc8c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$16, %al
               	je	0x43bc8c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	jmp	0x43bc86 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	cmpb	$64, %al
               	je	0x43bc81 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
               	cmpb	$80, %al
               	je	0x43bc8c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3f>
               	cmpb	$48, %al
               	jne	0x43bc86 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x39>
               	jmp	0x413a70 <_Unwind_GetDataRelBase@plt>
               	jmp	0x413a80 <_Unwind_GetTextRelBase@plt>
               	jmp	0x413a90 <_Unwind_GetRegionStart@plt>
               	pushq	%rax
               	callq	0x413950 <abort@plt>
               	xorl	%eax, %eax
               	retq

<read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>:
               	pushq	%rbx
               	movzbl	%sil, %ebx
               	movq	%rdi, %rsi
               	movl	%ebx, %edi
               	subq	$16, %rsp
               	movq	%rdx, 8(%rsp)
               	movq	%rcx, (%rsp)
               	callq	0x43bc4d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	(%rsp), %rcx
               	movq	8(%rsp), %rdx
               	movl	%ebx, %edi
               	addq	$16, %rsp
               	movq	%rax, %rsi
               	popq	%rbx
               	jmp	0x43bac0 <read_encoded_value_with_base(unsigned char, unsigned long, unsigned char const*, unsigned long*)>

<parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$16, %rsp
               	testq	%rdi, %rdi
               	je	0x43bce0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x1d>
               	callq	0x413a90 <_Unwind_GetRegionStart@plt>
               	movq	%rax, (%rbx)
               	movzbl	(%r12), %esi
               	leaq	1(%r12), %rdx
               	cmpb	$-1, %sil
               	je	0x43bd04 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x41>
               	leaq	8(%rbx), %rcx
               	movq	%rbp, %rdi
               	callq	0x43bc8f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movq	%rax, %rdx
               	jmp	0x43bd08 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x45>
               	movq	%rax, 8(%rbx)
               	leaq	1(%rdx), %rax
               	movb	(%rdx), %dl
               	leaq	8(%rsp), %r9
               	movb	%dl, 40(%rbx)
               	incb	%dl
               	je	0x43bd33 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x70>
               	movq	%r9, %rsi
               	movq	%rax, %rdi
               	callq	0x43b9ff <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 24(%rbx)
               	jmp	0x43bd3b <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x78>
               	movq	$0, 24(%rbx)
               	leaq	1(%rax), %rdi
               	movb	(%rax), %al
               	movq	%r9, %rsi
               	movb	%al, 41(%rbx)
               	callq	0x43b9ff <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	8(%rsp), %rdx
               	addq	%rax, %rdx
               	movq	%rdx, 32(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<__gxx_personality_v0>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$152, %rsp
               	decl	%edi
               	movq	$0, 56(%rsp)
               	movl	$0, 52(%rsp)
               	jne	0x43c10e <__gxx_personality_v0+0x3ad>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	movq	%r8, %rbp
               	movq	%rcx, %rbx
               	movl	%esi, 12(%rsp)
               	addq	%rdx, %rax
               	cmpq	$1, %rax
               	movq	%rax, (%rsp)
               	setbe	35(%rsp)
               	cmpl	$6, %esi
               	sete	%al
               	andb	35(%rsp), %al
               	movb	%al, 34(%rsp)
               	je	0x43bddc <__gxx_personality_v0+0x7b>
               	movq	-16(%rcx), %r12
               	movl	-36(%rcx), %r14d
               	movq	-24(%rcx), %r15
               	cmpq	$1, %r12
               	sbbl	%eax, %eax
               	andl	$-2, %eax
               	addl	$3, %eax
               	jmp	0x43c075 <__gxx_personality_v0+0x314>
               	movq	%r8, %rdi
               	callq	0x413aa0 <_Unwind_GetLanguageSpecificData@plt>
               	movq	%rax, %r15
               	testq	%rax, %rax
               	je	0x43c02c <__gxx_personality_v0+0x2cb>
               	leaq	96(%rsp), %rax
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	movq	%rax, %rdx
               	movq	%rax, 24(%rsp)
               	callq	0x43bcc3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, %r14
               	callq	0x43bc4d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	leaq	52(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	%rax, 112(%rsp)
               	callq	0x413ab0 <_Unwind_GetIPInfo@plt>
               	cmpl	$0, 52(%rsp)
               	movq	%rax, %r13
               	jne	0x43be3a <__gxx_personality_v0+0xd9>
               	decq	%r13
               	leaq	64(%rsp), %r12
               	cmpq	%r14, 128(%rsp)
               	jbe	0x43c012 <__gxx_personality_v0+0x2b1>
               	movzbl	137(%rsp), %esi
               	movq	%r14, %rdx
               	movq	%r12, %rcx
               	xorl	%edi, %edi
               	callq	0x43bc8f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	72(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43bc8f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	movzbl	137(%rsp), %esi
               	leaq	80(%rsp), %rcx
               	xorl	%edi, %edi
               	movq	%rax, %rdx
               	callq	0x43bc8f <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned long*)>
               	leaq	88(%rsp), %rsi
               	movq	%rax, %rdi
               	callq	0x43b9ff <read_uleb128(unsigned char const*, unsigned long*)>
               	movq	%rax, %r14
               	movq	64(%rsp), %rax
               	addq	96(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43beb9 <__gxx_personality_v0+0x158>
               	movq	128(%rsp), %r14
               	jmp	0x43be3f <__gxx_personality_v0+0xde>
               	addq	72(%rsp), %rax
               	cmpq	%r13, %rax
               	jbe	0x43be3f <__gxx_personality_v0+0xde>
               	movq	80(%rsp), %r12
               	testq	%r12, %r12
               	je	0x43bed6 <__gxx_personality_v0+0x175>
               	addq	104(%rsp), %r12
               	movq	88(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43c131 <__gxx_personality_v0+0x3d0>
               	movq	128(%rsp), %rdx
               	testq	%r12, %r12
               	je	0x43c02c <__gxx_personality_v0+0x2cb>
               	leaq	-1(%rdx,%rax), %r13
               	testq	%r13, %r13
               	je	0x43c03d <__gxx_personality_v0+0x2dc>
               	movl	12(%rsp), %eax
               	andl	$8, %eax
               	movl	%eax, 36(%rsp)
               	jne	0x43bf2f <__gxx_personality_v0+0x1ce>
               	cmpq	$1, (%rsp)
               	ja	0x43bf38 <__gxx_personality_v0+0x1d7>
               	leaq	32(%rbx), %rax
               	testb	$1, (%rbx)
               	je	0x43bf24 <__gxx_personality_v0+0x1c3>
               	movq	-80(%rbx), %rax
               	movq	%rax, 56(%rsp)
               	movq	-112(%rax), %r14
               	jmp	0x43bf3f <__gxx_personality_v0+0x1de>
               	leaq	153426(%rip), %r14      # 0x461688 <typeinfo for __cxxabiv1::__forced_unwind>
               	jmp	0x43bf3f <__gxx_personality_v0+0x1de>
               	leaq	153433(%rip), %r14      # 0x461698 <typeinfo for __cxxabiv1::__foreign_exception>
               	leaq	72(%rsp), %rax
               	movq	%rax, 40(%rsp)
               	movq	40(%rsp), %rsi
               	movq	%r13, %rdi
               	callq	0x43ba25 <read_sleb128(unsigned char const*, long*)>
               	leaq	80(%rsp), %rsi
               	movq	%rax, %rdi
               	movq	%rax, 16(%rsp)
               	callq	0x43ba25 <read_sleb128(unsigned char const*, long*)>
               	movq	72(%rsp), %rcx
               	testq	%rcx, %rcx
               	je	0x43bff6 <__gxx_personality_v0+0x295>
               	jle	0x43bfa5 <__gxx_personality_v0+0x244>
               	movq	24(%rsp), %rdi
               	movq	%rcx, %rsi
               	callq	0x43bb7b <get_ttype_entry(lsda_header_info*, unsigned long)>
               	testq	%rax, %rax
               	je	0x43c122 <__gxx_personality_v0+0x3c1>
               	testq	%r14, %r14
               	je	0x43bffb <__gxx_personality_v0+0x29a>
               	leaq	56(%rsp), %rdx
               	movq	%r14, %rsi
               	movq	%rax, %rdi
               	callq	0x43ba61 <get_adjusted_ptr(std::type_info const*, std::type_info const*, void**)>
               	jmp	0x43bfed <__gxx_personality_v0+0x28c>
               	cmpl	$0, 36(%rsp)
               	sete	%al
               	testb	%al, 35(%rsp)
               	je	0x43bfcf <__gxx_personality_v0+0x26e>
               	testq	%r14, %r14
               	je	0x43bfcf <__gxx_personality_v0+0x26e>
               	movq	56(%rsp), %rdx
               	leaq	96(%rsp), %rdi
               	movq	%r14, %rsi
               	callq	0x43bbe6 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	xorl	$1, %eax
               	jmp	0x43bfed <__gxx_personality_v0+0x28c>
               	notq	%rcx
               	addq	120(%rsp), %rcx
               	leaq	88(%rsp), %rsi
               	movq	%rcx, %rdi
               	callq	0x43b9ff <read_uleb128(unsigned char const*, unsigned long*)>
               	cmpq	$0, 88(%rsp)
               	sete	%al
               	testb	%al, %al
               	je	0x43bffb <__gxx_personality_v0+0x29a>
               	jmp	0x43c122 <__gxx_personality_v0+0x3c1>
               	movb	$1, 34(%rsp)
               	movq	80(%rsp), %rax
               	testq	%rax, %rax
               	je	0x43c036 <__gxx_personality_v0+0x2d5>
               	movq	16(%rsp), %r13
               	addq	%rax, %r13
               	jmp	0x43bf49 <__gxx_personality_v0+0x1e8>
               	xorl	%r14d, %r14d
               	xorl	%r12d, %r12d
               	xorl	%r13d, %r13d
               	movl	$1, %eax
               	testb	$1, 12(%rsp)
               	je	0x43c075 <__gxx_personality_v0+0x314>
               	cmpl	$2, %eax
               	jne	0x43c047 <__gxx_personality_v0+0x2e6>
               	movl	$8, %eax
               	jmp	0x43c145 <__gxx_personality_v0+0x3e4>
               	cmpb	$0, 34(%rsp)
               	je	0x43c02c <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	movl	$2, %eax
               	jmp	0x43c020 <__gxx_personality_v0+0x2bf>
               	cmpq	$1, (%rsp)
               	movl	$6, %eax
               	ja	0x43c145 <__gxx_personality_v0+0x3e4>
               	movq	56(%rsp), %rdx
               	movl	%r14d, -36(%rbx)
               	movq	%r13, -32(%rbx)
               	movq	%r15, -24(%rbx)
               	movq	%rdx, -8(%rbx)
               	movq	%r12, -16(%rbx)
               	jmp	0x43c145 <__gxx_personality_v0+0x3e4>
               	testb	$8, 12(%rsp)
               	jne	0x43c083 <__gxx_personality_v0+0x322>
               	cmpq	$1, (%rsp)
               	jbe	0x43c095 <__gxx_personality_v0+0x334>
               	decl	%eax
               	je	0x43c11d <__gxx_personality_v0+0x3bc>
               	testl	%r14d, %r14d
               	jns	0x43c0df <__gxx_personality_v0+0x37e>
               	callq	0x43cf42 <std::unexpected()>
               	decl	%eax
               	jne	0x43c0a1 <__gxx_personality_v0+0x340>
               	movq	%rbx, %rdi
               	callq	0x43d0cc <__cxa_call_terminate>
               	testl	%r14d, %r14d
               	jns	0x43c0df <__gxx_personality_v0+0x37e>
               	leaq	96(%rsp), %rdx
               	movq	%r15, %rsi
               	movq	%rbp, %rdi
               	callq	0x43bcc3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	callq	0x43bc4d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movzbl	136(%rsp), %edi
               	movq	%rbp, %rsi
               	movq	%rax, 112(%rsp)
               	callq	0x43bc4d <base_of_encoded_value(unsigned char, _Unwind_Context*)>
               	movq	%rax, -16(%rbx)
               	movq	%rbx, %rdx
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x413ac0 <_Unwind_SetGR@plt>
               	movslq	%r14d, %rdx
               	movl	$1, %esi
               	movq	%rbp, %rdi
               	callq	0x413ac0 <_Unwind_SetGR@plt>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x413ad0 <_Unwind_SetIP@plt>
               	movl	$7, %eax
               	jmp	0x43c145 <__gxx_personality_v0+0x3e4>
               	movl	$3, %eax
               	jmp	0x43c145 <__gxx_personality_v0+0x3e4>
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cf13 <std::terminate()>
               	movl	72(%rsp), %r14d
               	movl	$3, %eax
               	jmp	0x43c020 <__gxx_personality_v0+0x2bf>
               	testq	%r12, %r12
               	je	0x43c02c <__gxx_personality_v0+0x2cb>
               	xorl	%r14d, %r14d
               	xorl	%r13d, %r13d
               	jmp	0x43c040 <__gxx_personality_v0+0x2df>
               	addq	$152, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<__cxa_call_unexpected>:
               	pushq	%r15
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	-16(%rbx), %rax
               	movq	-64(%rbx), %rdi
               	movq	-24(%rbx), %r15
               	movslq	-36(%rbx), %rbp
               	movq	-56(%rbx), %r14
               	movq	%rax, 16(%rsp)
               	callq	0x43cf21 <__cxxabiv1::__unexpected(void (*)())>
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cf83 <__cxa_get_globals_fast>
               	movq	(%rax), %rax
               	leaq	112(%rax), %r13
               	testb	$1, 80(%rax)
               	je	0x43c1a8 <__cxa_call_unexpected+0x51>
               	movq	(%rax), %r13
               	movq	%rsp, %r12
               	movq	%r15, %rsi
               	xorl	%edi, %edi
               	movq	%r12, %rdx
               	callq	0x43bcc3 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
               	movq	-112(%r13), %rsi
               	movq	%rbp, %rcx
               	movq	%r13, %rdx
               	movq	%r12, %rdi
               	callq	0x43bbe6 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43c1d3 <__cxa_call_unexpected+0x7c>
               	callq	0x43cd64 <__cxa_rethrow>
               	leaq	152726(%rip), %rbx      # 0x461670 <typeinfo for std::bad_exception>
               	movq	%rbp, %rcx
               	xorl	%edx, %edx
               	movq	%r12, %rdi
               	movq	%rbx, %rsi
               	callq	0x43bbe6 <check_exception_spec(lsda_header_info*, std::type_info const*, void*, long)>
               	testb	%al, %al
               	je	0x43c218 <__cxa_call_unexpected+0xc1>
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	152785(%rip), %rdx      # 0x4616d0 <vtable for std::bad_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	1359(%rip), %rdx        # 0x43c762 <std::bad_exception::~bad_exception()>
               	callq	0x43cd15 <__cxa_throw>
               	movq	%r14, %rdi
               	callq	0x43cee8 <__cxxabiv1::__terminate(void (*)())>
               	movq	%rax, %rbx
               	callq	0x43cc25 <__cxa_end_catch>
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<operator delete(void*)>:
               	jmp	0x413730 <free@plt>

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	leaq	152391(%rip), %rax      # 0x461588 <vtable for __cxxabiv1::__si_class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43ca3a <__cxxabiv1::__class_type_info::~__class_type_info()>
               	nop

<__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c23a <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
               	movq	%rbx, %rdi
               	movl	$24, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43c281 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43c281 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413ae0 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	cmpq	%rdx, %r8
               	jne	0x43c2c2 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x40>
               	movq	8(%rcx), %rsi
               	movq	8(%rdi), %rdi
               	movq	%r8, 24(%rsp)
               	movq	%rdx, 16(%rsp)
               	movq	%rcx, 8(%rsp)
               	callq	0x43c266 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rcx
               	movq	16(%rsp), %rdx
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	jne	0x43c2d8 <__cxxabiv1::__si_class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x56>
               	movq	16(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	(%rdi), %rax
               	movq	64(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	addq	$40, %rsp
               	movl	$6, %eax
               	popq	%rbx
               	popq	%rbp
               	retq

<__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rdx
               	movq	8(%rcx), %rsi
               	movq	96(%rsp), %r12
               	movq	104(%rsp), %r15
               	movq	%r8, 24(%rsp)
               	movq	%rdx, %rdi
               	movq	%r9, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43c266 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %r9
               	testb	%al, %al
               	movq	24(%rsp), %r8
               	je	0x43c36a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x86>
               	movq	%r8, (%r15)
               	movl	%ebp, 8(%r15)
               	testq	%rbx, %rbx
               	js	0x43c35a <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x76>
               	addq	%rbx, %r8
               	xorl	%eax, %eax
               	cmpq	%r8, %r12
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	movl	%eax, 16(%r15)
               	jmp	0x43c3c6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	$-2, %rbx
               	jne	0x43c3c6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movl	$1, 16(%r15)
               	jmp	0x43c3c6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	cmpq	%r12, %r8
               	jne	0x43c399 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movq	8(%r9), %rsi
               	movq	%rdx, %rdi
               	movq	%r8, 16(%rsp)
               	movq	%r9, 8(%rsp)
               	callq	0x43c266 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	movq	8(%rsp), %r9
               	movq	16(%rsp), %r8
               	testb	%al, %al
               	je	0x43c399 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xb5>
               	movl	%ebp, 12(%r15)
               	jmp	0x43c3c6 <__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0xe2>
               	movq	16(%r14), %rdi
               	movq	%r13, %rcx
               	movl	%ebp, %edx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	%r15, 104(%rsp)
               	movq	%r12, 96(%rsp)
               	movq	56(%rax), %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmpq	*%rax
               	addq	$40, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	callq	0x43cae0 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
               	testb	%al, %al
               	jne	0x43c413 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x3b>
               	movq	16(%r13), %rdi
               	movq	%r12, %rcx
               	movq	%rbp, %rdx
               	movq	%rbx, %rsi
               	movq	(%rdi), %rax
               	movq	48(%rax), %rax
               	popq	%r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmpq	*%rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<__gnu_cxx::__concurrence_lock_error::what() const>:
               	leaq	38604(%rip), %rax       # 0x445aef <typeinfo name for kotlin::gc::GCSchedulerData+0x19b6>
               	retq

<__gnu_cxx::__concurrence_unlock_error::what() const>:
               	leaq	38632(%rip), %rax       # 0x445b13 <typeinfo name for kotlin::gc::GCSchedulerData+0x19da>
               	retq

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	leaq	152029(%rip), %rax      # 0x461610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	leaq	152049(%rip), %rax      # 0x461638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c42c <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c440 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<__gnu_cxx::__mutex::lock()>:
               	cmpq	$0, 154412(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x43c4c8 <__gnu_cxx::__mutex::lock()+0x44>
               	pushq	%rdx
               	callq	0x413790 <pthread_mutex_lock@plt>
               	testl	%eax, %eax
               	je	0x43c4c6 <__gnu_cxx::__mutex::lock()+0x42>
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	151911(%rip), %rdx      # 0x461610 <vtable for __gnu_cxx::__concurrence_lock_error>
               	leaq	151856(%rip), %rsi      # 0x4615e0 <typeinfo for __gnu_cxx::__concurrence_lock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-149(%rip), %rdx        # 0x43c42c <__gnu_cxx::__concurrence_lock_error::~__concurrence_lock_error()>
               	callq	0x43cd15 <__cxa_throw>
               	popq	%rax
               	retq
               	retq
               	nop

<__gnu_cxx::__scoped_lock::~__scoped_lock()>:
               	cmpq	$0, 154342(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x43c523 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x59>
               	pushq	%rdx
               	movq	(%rdi), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	testl	%eax, %eax
               	je	0x43c521 <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x57>
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	151878(%rip), %rdx      # 0x461638 <vtable for __gnu_cxx::__concurrence_unlock_error>
               	leaq	151807(%rip), %rsi      # 0x4615f8 <typeinfo for __gnu_cxx::__concurrence_unlock_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-202(%rip), %rdx        # 0x43c440 <__gnu_cxx::__concurrence_unlock_error::~__concurrence_unlock_error()>
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rdi
               	incq	%rdx
               	je	0x43c51c <__gnu_cxx::__scoped_lock::~__scoped_lock()+0x52>
               	callq	0x413740 <_Unwind_Resume@plt>
               	callq	0x43c157 <__cxa_call_unexpected>
               	popq	%rax
               	retq
               	retq

<(anonymous namespace)::pool::free(void*) (.constprop.2)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	266193(%rip), %rdi      # 0x47d500 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43c484 <__gnu_cxx::__mutex::lock()>
               	movq	266212(%rip), %rdx      # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	leaq	-16(%rbx), %rcx
               	testq	%rdx, %rdx
               	je	0x43c55a <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x36>
               	movq	-16(%rbx), %rax
               	leaq	(%rcx,%rax), %rsi
               	cmpq	%rsi, %rdx
               	jbe	0x43c560 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x3c>
               	movq	%rdx, -8(%rbx)
               	jmp	0x43c57f <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x5b>
               	leaq	266177(%rip), %r8       # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	jne	0x43c594 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x70>
               	addq	(%rdx), %rax
               	movq	%rax, -16(%rbx)
               	movq	266161(%rip), %rax      # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	movq	8(%rax), %rax
               	movq	%rax, -8(%rbx)
               	movq	%rcx, 266146(%rip)      # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	jmp	0x43c5d7 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	cmpq	%rdi, %rsi
               	jae	0x43c59d <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x79>
               	leaq	8(%rdx), %r8
               	movq	%rdi, %rdx
               	movq	8(%rdx), %rdi
               	testq	%rdi, %rdi
               	jne	0x43c588 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x64>
               	cmpq	%rdi, %rsi
               	jne	0x43c5ad <(anonymous namespace)::pool::free(void*) (.constprop.2)+0x89>
               	addq	(%rsi), %rax
               	movq	8(%rsi), %rsi
               	movq	%rsi, 8(%rdx)
               	movq	(%r8), %rdx
               	movq	(%rdx), %rsi
               	leaq	(%rdx,%rsi), %rdi
               	cmpq	%rdi, %rcx
               	jne	0x43c5c4 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xa0>
               	addq	%rsi, %rax
               	movq	%rax, (%rdx)
               	jmp	0x43c5d7 <(anonymous namespace)::pool::free(void*) (.constprop.2)+0xb3>
               	movq	%rax, -16(%rbx)
               	movq	8(%rdx), %rax
               	movq	%rax, -8(%rbx)
               	movq	(%r8), %rax
               	movq	%rcx, 8(%rax)
               	leaq	8(%rsp), %rdi
               	callq	0x43c4ca <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	popq	%rbx
               	retq
               	nop

<(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	265997(%rip), %rdi      # 0x47d500 <(anonymous namespace)::emergency_pool>
               	subq	$16, %rsp
               	movq	%rdi, 8(%rsp)
               	callq	0x43c484 <__gnu_cxx::__mutex::lock()>
               	leaq	16(%rbx), %rdi
               	movl	$16, %eax
               	movq	266007(%rip), %rbx      # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	cmpq	$16, %rdi
               	leaq	265996(%rip), %rdx      # 0x47d528 <(anonymous namespace)::emergency_pool+0x28>
               	cmovbq	%rax, %rdi
               	addq	$15, %rdi
               	andq	$-16, %rdi
               	testq	%rbx, %rbx
               	je	0x43c668 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x80>
               	movq	(%rbx), %rax
               	movq	8(%rbx), %rcx
               	cmpq	%rax, %rdi
               	jbe	0x43c642 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x5a>
               	leaq	8(%rbx), %rdx
               	movq	%rcx, %rbx
               	jmp	0x43c628 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x40>
               	subq	%rdi, %rax
               	cmpq	$15, %rax
               	jbe	0x43c661 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x79>
               	leaq	(%rbx,%rdi), %rsi
               	movq	%rcx, 8(%rsi)
               	movq	(%rdx), %rbx
               	movq	%rax, (%rsi)
               	movq	%rdi, (%rbx)
               	movq	%rsi, (%rdx)
               	jmp	0x43c664 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)+0x7c>
               	movq	%rcx, (%rdx)
               	addq	$16, %rbx
               	leaq	8(%rsp), %rdi
               	callq	0x43c4ca <__gnu_cxx::__scoped_lock::~__scoped_lock()>
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__freeres()>:
               	movq	265902(%rip), %rdi      # 0x47d530 <(anonymous namespace)::emergency_pool+0x30>
               	testq	%rdi, %rdi
               	je	0x43c69a <__gnu_cxx::__freeres()+0x1f>
               	pushq	%rax
               	callq	0x413730 <free@plt>
               	movq	$0, 265880(%rip)        # 0x47d530 <(anonymous namespace)::emergency_pool+0x30>
               	popq	%rdx
               	retq
               	retq

<__cxa_allocate_exception>:
               	pushq	%rbx
               	leaq	128(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413af0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43c6c8 <__cxa_allocate_exception+0x2d>
               	movq	%rbx, %rdi
               	callq	0x43c5e8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43c6c8 <__cxa_allocate_exception+0x2d>
               	callq	0x43cf13 <std::terminate()>
               	xorl	%eax, %eax
               	movl	$32, %ecx
               	movq	%rdx, %rdi
               	rep		stosl	%eax, %es:(%rdi)
               	leaq	128(%rdx), %rax
               	popq	%rbx
               	retq

<__cxa_free_exception>:
               	movq	265804(%rip), %rax      # 0x47d530 <(anonymous namespace)::emergency_pool+0x30>
               	addq	$-128, %rdi
               	cmpq	%rax, %rdi
               	jbe	0x43c6fe <__cxa_free_exception+0x21>
               	addq	265796(%rip), %rax      # 0x47d538 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43c6fe <__cxa_free_exception+0x21>
               	jmp	0x43c524 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x413730 <free@plt>

<__cxa_allocate_dependent_exception>:
               	pushq	%rcx
               	movl	$112, %edi
               	callq	0x413af0 <malloc@plt>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43c72d <__cxa_allocate_dependent_exception+0x2a>
               	movl	$112, %edi
               	callq	0x43c5e8 <(anonymous namespace)::pool::allocate(unsigned long) (.constprop.3)>
               	movq	%rax, %rdx
               	testq	%rax, %rax
               	jne	0x43c72d <__cxa_allocate_dependent_exception+0x2a>
               	callq	0x43cf13 <std::terminate()>
               	xorl	%eax, %eax
               	movq	%rdx, %rdi
               	movl	$28, %ecx
               	rep		stosl	%eax, %es:(%rdi)
               	movq	%rdx, %rax
               	popq	%rdx
               	retq

<__cxa_free_dependent_exception>:
               	movq	265707(%rip), %rax      # 0x47d530 <(anonymous namespace)::emergency_pool+0x30>
               	cmpq	%rax, %rdi
               	jbe	0x43c75b <__cxa_free_dependent_exception+0x1d>
               	addq	265703(%rip), %rax      # 0x47d538 <(anonymous namespace)::emergency_pool+0x38>
               	cmpq	%rax, %rdi
               	jae	0x43c75b <__cxa_free_dependent_exception+0x1d>
               	jmp	0x43c524 <(anonymous namespace)::pool::free(void*) (.constprop.2)>
               	jmp	0x413730 <free@plt>

<std::exception::~exception()>:
               	retq
               	nop

<std::bad_exception::~bad_exception()>:
               	leaq	151399(%rip), %rax      # 0x4616d0 <vtable for std::bad_exception>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::exception::what() const>:
               	leaq	37820(%rip), %rax       # 0x445b39 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a00>
               	retq

<std::bad_exception::what() const>:
               	leaq	37827(%rip), %rax       # 0x445b48 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a0f>
               	retq

<std::exception::~exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<std::bad_exception::~bad_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c762 <std::bad_exception::~bad_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	retq
               	nop

<__cxxabiv1::__forced_unwind::~__forced_unwind()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c7b6 <__cxxabiv1::__forced_unwind::~__forced_unwind()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	retq
               	nop

<__cxxabiv1::__foreign_exception::~__foreign_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43c7d0 <__cxxabiv1::__foreign_exception::~__foreign_exception()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>

<_ZGTtNKSt9exceptionD1Ev>:
               	retq

<_ZGTtNKSt9exception4whatEv>:
               	jmp	0x43c776 <std::exception::what() const>

<_ZGTtNKSt13bad_exceptionD1Ev>:
               	retq

<_ZGTtNKSt13bad_exception4whatEv>:
               	jmp	0x43c77e <std::bad_exception::what() const>
               	nop

<std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>:
               	retq

<__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	movq	-80(%rsi), %rbx
               	cmpl	$1, %edi
               	jbe	0x43c80a <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x13>
               	movq	-88(%rbx), %rdi
               	callq	0x43cee8 <__cxxabiv1::__terminate(void (*)())>
               	leaq	-80(%rsi), %rax
               	movq	%rax, %rdi
               	callq	0x43c73e <__cxa_free_dependent_exception>
               	lock
               	decl	-128(%rbx)
               	jne	0x43c833 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x3c>
               	movq	-104(%rbx), %rax
               	testq	%rax, %rax
               	je	0x43c82a <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x33>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c6dd <__cxa_free_exception>
               	popq	%rbx
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr()>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::exception_ptr(void (std::__exception_ptr::exception_ptr::*)())>:
               	movq	$0, (%rdi)
               	retq

<std::__exception_ptr::exception_ptr::_M_addref()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c852 <std::__exception_ptr::exception_ptr::_M_addref()+0xc>
               	lock
               	incl	-128(%rax)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::exception_ptr(void*)>:
               	movq	%rsi, (%rdi)
               	jmp	0x43c846 <std::__exception_ptr::exception_ptr::_M_addref()>

<std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c846 <std::__exception_ptr::exception_ptr::_M_addref()>
               	nop

<std::__exception_ptr::exception_ptr::_M_release()>:
               	movq	(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43c899 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	lock
               	decl	-128(%rax)
               	jne	0x43c899 <std::__exception_ptr::exception_ptr::_M_release()+0x31>
               	pushq	%rbx
               	movq	-104(%rax), %rax
               	movq	%rdi, %rbx
               	testq	%rax, %rax
               	je	0x43c888 <std::__exception_ptr::exception_ptr::_M_release()+0x20>
               	movq	(%rdi), %rdi
               	callq	*%rax
               	movq	(%rbx), %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	retq

<std::__exception_ptr::exception_ptr::~exception_ptr()>:
               	jmp	0x43c868 <std::__exception_ptr::exception_ptr::_M_release()>
               	nop

<std::__exception_ptr::exception_ptr::_M_get() const>:
               	movq	(%rdi), %rax
               	retq

<std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	movq	%rdx, (%rdi)
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	0x43c85c <std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43c8a4 <std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&)>
               	movq	%rbx, %rdi
               	callq	0x43c89a <std::__exception_ptr::exception_ptr::~exception_ptr()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__exception_ptr::exception_ptr::operator!() const>:
               	cmpq	$0, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const>:
               	xorl	%eax, %eax
               	cmpq	$0, (%rdi)
               	je	0x43c8fd <std::__exception_ptr::exception_ptr::operator void (std::__exception_ptr::exception_ptr::*)()() const+0xf>
               	leaq	-263(%rip), %rax        # 0x43c7f6 <std::__exception_ptr::exception_ptr::_M_safe_bool_dummy()>
               	xorl	%edx, %edx
               	retq

<std::__exception_ptr::exception_ptr::__cxa_exception_type() const>:
               	movq	(%rdi), %rax
               	movq	-112(%rax), %rax
               	retq

<std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::__exception_ptr::operator!=(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>:
               	pushq	%rax
               	callq	0x43c908 <std::__exception_ptr::operator==(std::__exception_ptr::exception_ptr const&, std::__exception_ptr::exception_ptr const&)>
               	popq	%rdx
               	xorl	$1, %eax
               	retq

<std::current_exception()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf98 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	jne	0x43c938 <std::current_exception()+0x1b>
               	movq	%rbx, %rdi
               	callq	0x43c836 <std::__exception_ptr::exception_ptr::exception_ptr()>
               	jmp	0x43c96d <std::current_exception()+0x50>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	movq	80(%rax), %rcx
               	addq	%rcx, %rdx
               	cmpq	$1, %rdx
               	ja	0x43c92e <std::current_exception()+0x11>
               	movabsq	$5138137972254386944, %rdx # imm = 0x474E5543432B2B00
               	leaq	112(%rax), %rsi
               	cmpq	%rdx, %rcx
               	je	0x43c965 <std::current_exception()+0x48>
               	movq	(%rax), %rsi
               	movq	%rbx, %rdi
               	callq	0x43c854 <std::__exception_ptr::exception_ptr::exception_ptr(void*)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::rethrow_exception(std::__exception_ptr::exception_ptr)>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c8a0 <std::__exception_ptr::exception_ptr::_M_get() const>
               	movq	%rax, %rbp
               	callq	0x43c703 <__cxa_allocate_dependent_exception>
               	movq	%rax, %rbx
               	movq	%rbp, (%rax)
               	lock
               	incl	-128(%rbp)
               	callq	0x43cf37 <std::get_unexpected()>
               	addq	$80, %rbx
               	movq	%rax, -64(%rbx)
               	callq	0x43cf08 <std::get_terminate()>
               	movq	%rax, -56(%rbx)
               	movabsq	$5138137972254386945, %rax # imm = 0x474E5543432B2B01
               	movq	%rax, (%rbx)
               	leaq	-447(%rip), %rax        # 0x43c7f7 <__gxx_dependent_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43cf98 <__cxa_get_globals>
               	movq	%rbx, %rdi
               	incl	8(%rax)
               	callq	0x413b00 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cf13 <std::terminate()>
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	pushq	%rbx
               	movl	$1, %eax
               	movq	%rdx, %rbx
               	shlq	$36, %rax
               	subq	$32, %rsp
               	movq	(%rdx), %rdx
               	movq	%rax, 16(%rsp)
               	movq	(%rdi), %rax
               	leaq	8(%rsp), %rcx
               	movq	$0, 8(%rsp)
               	movq	$0, 24(%rsp)
               	callq	*48(%rax)
               	movl	16(%rsp), %edx
               	xorl	%eax, %eax
               	andl	$6, %edx
               	cmpl	$6, %edx
               	jne	0x43ca26 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x4e>
               	movq	8(%rsp), %rax
               	movq	%rax, (%rbx)
               	movb	$1, %al
               	addq	$32, %rsp
               	popq	%rbx
               	retq

<__cxxabiv1::__class_type_info::__do_find_public_src(long, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
               	xorl	%eax, %eax
               	cmpq	%r8, %rdx
               	sete	%al
               	leal	1(%rax,%rax,4), %eax
               	retq
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	leaq	150815(%rip), %rax      # 0x461760 <vtable for __cxxabiv1::__class_type_info>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x44000c <std::type_info::~type_info()>
               	nop

<__cxxabiv1::__class_type_info::~__class_type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43ca3a <__cxxabiv1::__class_type_info::~__class_type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::operator==(std::type_info const&) const (.isra.0)>:
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x43ca81 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x43ca81 <std::type_info::operator==(std::type_info const&) const (.isra.0)+0x1b>
               	pushq	%rax
               	callq	0x413ae0 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	56(%rsp), %rbx
               	movq	8(%rdi), %r13
               	cmpq	48(%rsp), %r8
               	jne	0x43cab7 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movq	8(%r9), %rsi
               	movq	%r13, %rdi
               	callq	0x43ca66 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43cab7 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x35>
               	movl	%ebp, 12(%rbx)
               	jmp	0x43cad4 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	8(%r14), %rsi
               	movq	%r13, %rdi
               	callq	0x43ca66 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43cad4 <__cxxabiv1::__class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x52>
               	movq	%r12, (%rbx)
               	movl	%ebp, 8(%rbx)
               	movl	$1, 16(%rbx)
               	popq	%rbx
               	xorl	%eax, %eax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	pushq	%r8
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	callq	0x43ca66 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	je	0x43cb0d <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x2d>
               	movq	%rbp, (%rbx)
               	movq	$16, 16(%rbx)
               	movl	$6, 8(%rbx)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	8(%rsi), %rsi
               	movq	8(%rdi), %rdi
               	movq	%rdx, 8(%rsp)
               	callq	0x43ca66 <std::type_info::operator==(std::type_info const&) const (.isra.0)>
               	testb	%al, %al
               	jne	0x43cb5b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	cmpl	$3, %r12d
               	ja	0x43cb5b <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x49>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	40(%rax), %rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmpq	*%rax
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<operator delete(void*, unsigned long)>:
               	jmp	0x43c235 <operator delete(void*)>

<operator new(unsigned long)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	jne	0x43cb77 <operator new(unsigned long)+0xe>
               	movl	$1, %ebx
               	movq	%rbx, %rdi
               	callq	0x413af0 <malloc@plt>
               	testq	%rax, %rax
               	jne	0x43cbc0 <operator new(unsigned long)+0x57>
               	callq	0x43cdb9 <std::get_new_handler()>
               	testq	%rax, %rax
               	jne	0x43cbbc <operator new(unsigned long)+0x53>
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	150577(%rip), %rdx      # 0x4617d0 <vtable for std::bad_alloc>
               	leaq	150546(%rip), %rsi      # 0x4617b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	929(%rip), %rdx         # 0x43cf58 <std::bad_alloc::~bad_alloc()>
               	callq	0x43cd15 <__cxa_throw>
               	callq	*%rax
               	jmp	0x43cb77 <operator new(unsigned long)+0xe>
               	popq	%rbx
               	retq

<__cxa_get_exception_ptr>:
               	movq	-8(%rdi), %rax
               	retq

<__cxa_begin_catch>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf98 <__cxa_get_globals>
               	leaq	-80(%rbx), %rsi
               	movabsq	$-5138137972254386944, %rcx # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rcx
               	movq	(%rax), %rdx
               	cmpq	$1, %rcx
               	jbe	0x43cbf9 <__cxa_begin_catch+0x32>
               	testq	%rdx, %rdx
               	je	0x43cbf4 <__cxa_begin_catch+0x2d>
               	callq	0x43cf13 <std::terminate()>
               	movq	%rsi, (%rax)
               	jmp	0x43cc20 <__cxa_begin_catch+0x59>
               	movl	-40(%rbx), %edi
               	leal	1(%rdi), %ecx
               	testl	%edi, %edi
               	jns	0x43cc0a <__cxa_begin_catch+0x43>
               	movl	$1, %ecx
               	subl	%edi, %ecx
               	movl	%ecx, -40(%rbx)
               	decl	8(%rax)
               	cmpq	%rsi, %rdx
               	je	0x43cc1c <__cxa_begin_catch+0x55>
               	movq	%rdx, -48(%rbx)
               	movq	%rsi, (%rax)
               	movq	-8(%rbx), %rdx
               	movq	%rdx, %rax
               	popq	%rbx
               	retq

<__cxa_end_catch>:
               	pushq	%rcx
               	callq	0x43cf83 <__cxa_get_globals_fast>
               	movq	(%rax), %rdi
               	testq	%rdi, %rdi
               	je	0x43cc83 <__cxa_end_catch+0x5e>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43cc50 <__cxa_end_catch+0x2b>
               	movq	$0, (%rax)
               	jmp	0x43cc6f <__cxa_end_catch+0x4a>
               	movl	40(%rdi), %edx
               	testl	%edx, %edx
               	jns	0x43cc64 <__cxa_end_catch+0x3f>
               	incl	%edx
               	jne	0x43cc80 <__cxa_end_catch+0x5b>
               	movq	32(%rdi), %rcx
               	movq	%rcx, (%rax)
               	jmp	0x43cc80 <__cxa_end_catch+0x5b>
               	decl	%edx
               	jne	0x43cc79 <__cxa_end_catch+0x54>
               	movq	32(%rdi), %rdx
               	movq	%rdx, (%rax)
               	addq	$80, %rdi
               	popq	%rdx
               	jmp	0x413b10 <_Unwind_DeleteException@plt>
               	jns	0x43cc80 <__cxa_end_catch+0x5b>
               	callq	0x43cf13 <std::terminate()>
               	movl	%edx, 40(%rdi)
               	popq	%rax
               	retq

<std::uncaught_exception()>:
               	pushq	%rax
               	callq	0x43cf98 <__cxa_get_globals>
               	cmpl	$0, 8(%rax)
               	popq	%rdx
               	setne	%al
               	retq

<std::uncaught_exceptions()>:
               	pushq	%rax
               	callq	0x43cf98 <__cxa_get_globals>
               	movl	8(%rax), %eax
               	popq	%rdx
               	retq

<__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>:
               	pushq	%rbx
               	cmpl	$1, %edi
               	jbe	0x43ccae <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0xf>
               	movq	-56(%rsi), %rdi
               	callq	0x43cee8 <__cxxabiv1::__terminate(void (*)())>
               	lock
               	decl	-96(%rsi)
               	jne	0x43cccf <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x30>
               	movq	-72(%rsi), %rax
               	leaq	32(%rsi), %rbx
               	testq	%rax, %rax
               	je	0x43ccc6 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)+0x27>
               	movq	%rbx, %rdi
               	callq	*%rax
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c6dd <__cxa_free_exception>
               	popq	%rbx
               	retq

<__cxa_init_primary_exception>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	$0, -128(%rdi)
               	movq	%rsi, -112(%rdi)
               	movq	%rdx, -104(%rdi)
               	callq	0x43cf37 <std::get_unexpected()>
               	movq	%rax, -96(%rbx)
               	callq	0x43cf08 <std::get_terminate()>
               	movq	%rax, -88(%rbx)
               	movabsq	$5138137972254386944, %rax # imm = 0x474E5543432B2B00
               	movq	%rax, -32(%rbx)
               	leaq	-108(%rip), %rax        # 0x43cc9f <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*)>
               	movq	%rax, -24(%rbx)
               	leaq	-128(%rbx), %rax
               	popq	%rbx
               	retq

<__cxa_throw>:
               	pushq	%rbx
               	subq	$32, %rsp
               	movq	%rdi, 24(%rsp)
               	movq	%rsi, 16(%rsp)
               	movq	%rdx, 8(%rsp)
               	callq	0x43cf98 <__cxa_get_globals>
               	movq	8(%rsp), %rdx
               	movq	16(%rsp), %rsi
               	incl	8(%rax)
               	movq	24(%rsp), %rdi
               	callq	0x43ccd1 <__cxa_init_primary_exception>
               	movl	$1, (%rax)
               	leaq	96(%rax), %rbx
               	movq	%rbx, %rdi
               	callq	0x413b00 <_Unwind_RaiseException@plt>
               	movq	%rbx, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cf13 <std::terminate()>

<__cxa_rethrow>:
               	pushq	%rbx
               	callq	0x43cf98 <__cxa_get_globals>
               	movq	(%rax), %rdi
               	incl	8(%rax)
               	testq	%rdi, %rdi
               	je	0x43cda9 <__cxa_rethrow+0x45>
               	movabsq	$-5138137972254386944, %rdx # imm = 0xB8B1AABCBCD4D500
               	addq	80(%rdi), %rdx
               	cmpq	$1, %rdx
               	jbe	0x43cd92 <__cxa_rethrow+0x2e>
               	movq	$0, (%rax)
               	jmp	0x43cd95 <__cxa_rethrow+0x31>
               	negl	40(%rdi)
               	leaq	80(%rdi), %rbx
               	movq	%rbx, %rdi
               	callq	0x413b20 <_Unwind_Resume_or_Rethrow@plt>
               	movq	%rbx, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cf13 <std::terminate()>

<std::set_new_handler(void (*)())>:
               	movq	%rdi, %rax
               	xchgq	%rax, 264072(%rip)      # 0x47d540 <(anonymous namespace)::__new_handler>
               	retq

<std::get_new_handler()>:
               	movq	264064(%rip), %rax      # 0x47d540 <(anonymous namespace)::__new_handler>
               	retq

<__cxa_guard_acquire>:
               	movb	(%rdi), %al
               	testb	%al, %al
               	jne	0x43ce7b <__cxa_guard_acquire+0xba>
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	cmpq	$0, 152027(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x43ce31 <__cxa_guard_acquire+0x70>
               	movl	$1, %r12d
               	movl	$256, %ebp              # imm = 0x100
               	xorl	%r13d, %r13d
               	movl	%r13d, %eax
               	lock
               	cmpxchgl	%ebp, (%rbx)
               	je	0x43ce6e <__cxa_guard_acquire+0xad>
               	movl	%eax, %ecx
               	cmpl	%eax, %r12d
               	jne	0x43ce01 <__cxa_guard_acquire+0x40>
               	xorl	%eax, %eax
               	jmp	0x43ce73 <__cxa_guard_acquire+0xb2>
               	cmpl	%eax, %ebp
               	jne	0x43ce1b <__cxa_guard_acquire+0x5a>
               	movl	$65792, %ecx            # imm = 0x10100
               	movl	%ebp, %eax
               	lock
               	cmpxchgl	%ecx, (%rbx)
               	je	0x43ce1b <__cxa_guard_acquire+0x5a>
               	cmpl	%eax, %r12d
               	je	0x43cdfd <__cxa_guard_acquire+0x3c>
               	testl	%eax, %eax
               	je	0x43cded <__cxa_guard_acquire+0x2c>
               	xorl	%r8d, %r8d
               	xorl	%edx, %edx
               	movq	%rbx, %rsi
               	movl	$202, %edi
               	xorl	%eax, %eax
               	callq	0x413810 <syscall@plt>
               	jmp	0x43cded <__cxa_guard_acquire+0x2c>
               	cmpb	$0, (%rdi)
               	jne	0x43cdfd <__cxa_guard_acquire+0x3c>
               	cmpb	$0, 1(%rdi)
               	je	0x43ce6a <__cxa_guard_acquire+0xa9>
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	150523(%rip), %rdx      # 0x461a48 <vtable for __gnu_cxx::recursive_init_error>
               	leaq	150492(%rip), %rsi      # 0x461a30 <typeinfo for __gnu_cxx::recursive_init_error>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	12869(%rip), %rdx       # 0x4400aa <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	callq	0x43cd15 <__cxa_throw>
               	movb	$1, 1(%rdi)
               	movl	$1, %eax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	xorl	%eax, %eax
               	retq

<__cxa_guard_abort>:
               	cmpq	$0, 151858(%rip)        # 0x461fb8 <write+0x461fb8>
               	movq	%rdi, %rsi
               	je	0x43ceab <__cxa_guard_abort+0x2d>
               	xorl	%eax, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43ceaf <__cxa_guard_abort+0x31>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x413810 <syscall@plt>
               	movb	$0, 1(%rdi)
               	retq

<__cxa_guard_release>:
               	cmpq	$0, 151808(%rip)        # 0x461fb8 <write+0x461fb8>
               	movq	%rdi, %rsi
               	je	0x43cee0 <__cxa_guard_release+0x30>
               	movl	$1, %eax
               	xchgl	%eax, (%rdi)
               	btl	$16, %eax
               	jae	0x43cee7 <__cxa_guard_release+0x37>
               	movl	$2147483647, %ecx       # imm = 0x7FFFFFFF
               	movl	$1, %edx
               	movl	$202, %edi
               	xorl	%eax, %eax
               	jmp	0x413810 <syscall@plt>
               	movb	$0, 1(%rdi)
               	movb	$1, (%rdi)
               	retq

<__cxxabiv1::__terminate(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	jmp	0x43cef5 <__cxxabiv1::__terminate(void (*)())+0xd>
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x413950 <abort@plt>

<std::set_terminate(void (*)())>:
               	leaq	158535(%rip), %rdx      # 0x463a48 <__cxxabiv1::__terminate_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_terminate()>:
               	leaq	158521(%rip), %rax      # 0x463a48 <__cxxabiv1::__terminate_handler>
               	movq	(%rax), %rax
               	retq

<std::terminate()>:
               	pushq	%rax
               	callq	0x43cf08 <std::get_terminate()>
               	movq	%rax, %rdi
               	callq	0x43cee8 <__cxxabiv1::__terminate(void (*)())>

<__cxxabiv1::__unexpected(void (*)())>:
               	pushq	%rax
               	callq	*%rdi
               	callq	0x43cf13 <std::terminate()>

<std::set_unexpected(void (*)())>:
               	leaq	158504(%rip), %rdx      # 0x463a58 <__cxxabiv1::__unexpected_handler>
               	movq	%rdi, %rax
               	xchgq	%rax, (%rdx)
               	retq

<std::get_unexpected()>:
               	leaq	158490(%rip), %rax      # 0x463a58 <__cxxabiv1::__unexpected_handler>
               	movq	(%rax), %rax
               	retq

<std::unexpected()>:
               	pushq	%rax
               	callq	0x43cf37 <std::get_unexpected()>
               	movq	%rax, %rdi
               	callq	0x43cf21 <__cxxabiv1::__unexpected(void (*)())>

<std::bad_alloc::what() const>:
               	leaq	35844(%rip), %rax       # 0x445b5b <typeinfo name for kotlin::gc::GCSchedulerData+0x1a22>
               	retq

<std::bad_alloc::~bad_alloc()>:
               	leaq	149617(%rip), %rax      # 0x4617d0 <vtable for std::bad_alloc>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::bad_alloc::~bad_alloc()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43cf58 <std::bad_alloc::~bad_alloc()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>

<__cxa_get_globals_fast>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__cxa_get_globals>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	popq	%rdx
               	addq	$-32, %rax
               	retq

<__gnu_cxx::__verbose_terminate_handler()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpb	$0, 263564(%rip)        # 0x47d548 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	movq	151557(%rip), %rbx      # 0x461fc8 <write+0x461fc8>
               	je	0x43cfd4 <__gnu_cxx::__verbose_terminate_handler()+0x27>
               	movq	(%rbx), %rsi
               	leaq	35739(%rip), %rdi       # 0x445b6a <typeinfo name for kotlin::gc::GCSchedulerData+0x1a31>
               	jmp	0x43d05f <__gnu_cxx::__verbose_terminate_handler()+0xb2>
               	movb	$1, 263533(%rip)        # 0x47d548 <__gnu_cxx::__verbose_terminate_handler()::terminating>
               	callq	0x440052 <__cxa_current_exception_type>
               	testq	%rax, %rax
               	je	0x43d055 <__gnu_cxx::__verbose_terminate_handler()+0xa8>
               	movq	8(%rax), %rbp
               	cmpb	$42, (%rbp)
               	jne	0x43cff2 <__gnu_cxx::__verbose_terminate_handler()+0x45>
               	incq	%rbp
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	leaq	12(%rsp), %rcx
               	movq	%rbp, %rdi
               	movl	$4294967295, 12(%rsp)   # imm = 0xFFFFFFFF
               	callq	0x436710 <__cxa_demangle>
               	movq	(%rbx), %rsi
               	leaq	35699(%rip), %rdi       # 0x445b88 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a4f>
               	movq	%rax, %r12
               	callq	0x4137f0 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	je	0x43d02d <__gnu_cxx::__verbose_terminate_handler()+0x80>
               	movq	%rbp, %rdi
               	callq	0x4137f0 <fputs@plt>
               	movq	(%rbx), %rsi
               	leaq	35709(%rip), %rdi       # 0x445bb9 <typeinfo name for kotlin::gc::GCSchedulerData+0x1a80>
               	callq	0x4137f0 <fputs@plt>
               	cmpl	$0, 12(%rsp)
               	jne	0x43d050 <__gnu_cxx::__verbose_terminate_handler()+0xa3>
               	movq	%r12, %rdi
               	callq	0x413730 <free@plt>
               	callq	0x43cd64 <__cxa_rethrow>
               	movq	(%rbx), %rsi
               	leaq	35677(%rip), %rdi       # 0x445bbc <typeinfo name for kotlin::gc::GCSchedulerData+0x1a83>
               	callq	0x4137f0 <fputs@plt>
               	callq	0x413950 <abort@plt>
               	movq	%rax, %rdi
               	decq	%rdx
               	jne	0x43d0b0 <__gnu_cxx::__verbose_terminate_handler()+0x103>
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	callq	*16(%rdx)
               	movq	(%rbx), %rsi
               	leaq	35681(%rip), %rdi       # 0x445bea <typeinfo name for kotlin::gc::GCSchedulerData+0x1ab1>
               	movq	%rax, %rbp
               	callq	0x4137f0 <fputs@plt>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x4137f0 <fputs@plt>
               	movq	(%rbx), %rsi
               	movl	$10, %edi
               	callq	0x413b30 <fputc@plt>
               	callq	0x43cc25 <__cxa_end_catch>
               	jmp	0x43d064 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cc25 <__cxa_end_catch>
               	jmp	0x43d064 <__gnu_cxx::__verbose_terminate_handler()+0xb7>
               	movq	%rax, %rbx
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<__cxa_call_terminate>:
               	pushq	%rbx
               	testq	%rdi, %rdi
               	je	0x43d0f6 <__cxa_call_terminate+0x2a>
               	movq	%rdi, %rbx
               	callq	0x43cbc7 <__cxa_begin_catch>
               	movabsq	$-5138137972254386944, %rax # imm = 0xB8B1AABCBCD4D500
               	addq	(%rbx), %rax
               	cmpq	$1, %rax
               	ja	0x43d0f6 <__cxa_call_terminate+0x2a>
               	movq	-56(%rbx), %rdi
               	callq	0x43cee8 <__cxxabiv1::__terminate(void (*)())>
               	callq	0x43cf13 <std::terminate()>
               	nop

<std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>:
               	movq	(%rdi), %rax
               	movq	(%rsi), %rdx
               	cmpq	%rdi, %rax
               	je	0x43d15c <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x60>
               	cmpq	%rdx, %rsi
               	je	0x43d13f <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x43>
               	movq	%rdx, (%rdi)
               	movq	8(%rsi), %rdx
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdx, 8(%rdi)
               	movq	%rax, 8(%rsi)
               	movq	8(%rdi), %rax
               	movq	%rdi, (%rax)
               	movq	(%rdi), %rax
               	movq	%rdi, 8(%rax)
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	retq
               	movq	%rax, (%rsi)
               	movq	8(%rdi), %rax
               	movq	%rax, 8(%rsi)
               	movq	%rsi, (%rax)
               	movq	(%rsi), %rax
               	movq	%rsi, 8(%rax)
               	movq	%rdi, 8(%rdi)
               	movq	%rdi, (%rdi)
               	retq
               	cmpq	%rdx, %rsi
               	je	0x43d17d <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)+0x81>
               	movq	%rdx, (%rax)
               	movq	8(%rsi), %rdx
               	movq	%rdx, 8(%rax)
               	movq	%rax, (%rdx)
               	movq	(%rax), %rdx
               	movq	%rax, 8(%rdx)
               	movq	%rsi, 8(%rsi)
               	movq	%rsi, (%rsi)
               	retq

<std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>:
               	cmpq	%rdx, %rdi
               	je	0x43d1a8 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)+0x2a>
               	movq	8(%rdx), %rcx
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rcx)
               	movq	%rdx, (%rax)
               	movq	8(%rdi), %rax
               	movq	%rsi, (%rax)
               	movq	%rcx, 8(%rdi)
               	movq	8(%rsi), %rcx
               	movq	%rcx, 8(%rdx)
               	movq	%rax, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_reverse()>:
               	movq	%rdi, %rax
               	movq	(%rax), %rdx
               	movq	8(%rax), %rcx
               	movq	%rdx, 8(%rax)
               	movq	%rcx, (%rax)
               	movq	%rdx, %rax
               	cmpq	%rdx, %rdi
               	jne	0x43d1ad <std::__detail::_List_node_base::_M_reverse()+0x3>
               	retq

<std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>:
               	movq	8(%rsi), %rax
               	movq	%rsi, (%rdi)
               	movq	%rax, 8(%rdi)
               	movq	8(%rsi), %rax
               	movq	%rdi, (%rax)
               	movq	%rdi, 8(%rsi)
               	retq
               	nop

<std::__detail::_List_node_base::_M_unhook()>:
               	movq	(%rdi), %rax
               	movq	8(%rdi), %rdx
               	movq	%rax, (%rdx)
               	movq	%rdx, 8(%rax)
               	retq

<std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	24(%rdi), %rax
               	movq	16(%rax), %rdx
               	movq	%rdx, 24(%rdi)
               	testq	%rdx, %rdx
               	je	0x43d200 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43d212 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43d222 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 16(%rdx)
               	jne	0x43d21e <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 16(%rdx)
               	jmp	0x43d222 <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 24(%rdx)
               	movq	%rdi, 16(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	movq	16(%rdi), %rax
               	movq	24(%rax), %rdx
               	movq	%rdx, 16(%rdi)
               	testq	%rdx, %rdx
               	je	0x43d240 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x15>
               	movq	%rdi, 8(%rdx)
               	movq	8(%rdi), %rdx
               	movq	%rdx, 8(%rax)
               	cmpq	%rdi, (%rsi)
               	jne	0x43d252 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x27>
               	movq	%rax, (%rsi)
               	jmp	0x43d262 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	cmpq	%rdi, 24(%rdx)
               	jne	0x43d25e <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x33>
               	movq	%rax, 24(%rdx)
               	jmp	0x43d262 <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)+0x37>
               	movq	%rax, 16(%rdx)
               	movq	%rdi, 24(%rax)
               	movq	%rax, 8(%rdi)
               	retq

<std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	cmpl	$0, (%rdi)
               	jne	0x43d27f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 8(%rax)
               	jne	0x43d27f <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x14>
               	movq	24(%rdi), %rax
               	retq
               	movq	16(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43d296 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2b>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43d2a9 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rdx, %rax
               	jmp	0x43d288 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x1d>
               	movq	8(%rdi), %rax
               	cmpq	%rdi, 16(%rax)
               	jne	0x43d2a9 <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x3e>
               	movq	%rax, %rdi
               	movq	8(%rax), %rax
               	jmp	0x43d29a <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)+0x2f>
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43d2c1 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43d2e0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43d2b3 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43d2d7 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43d2c8 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43d2e0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>:
               	movq	24(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43d2f8 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x17>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43d317 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	jmp	0x43d2ea <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x9>
               	movq	8(%rdi), %rdx
               	movq	%rdi, %rax
               	cmpq	%rax, 24(%rdx)
               	jne	0x43d30e <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x2d>
               	movq	%rdx, %rax
               	movq	8(%rdx), %rdx
               	jmp	0x43d2ff <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x1e>
               	cmpq	24(%rax), %rdx
               	je	0x43d317 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)+0x36>
               	movq	%rdx, %rax
               	retq

<std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>:
               	jmp	0x43d26b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)>:
               	jmp	0x43d26b <std::local_Rb_tree_decrement(std::_Rb_tree_node_base*)>

<std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43d1eb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>:
               	jmp	0x43d22b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>

<std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	%rsi, %r8
               	leaq	8(%rcx), %r11
               	movq	%rdx, 8(%rsi)
               	movq	$0, 16(%rsi)
               	movq	$0, 24(%rsi)
               	movl	$0, (%rsi)
               	testb	%dil, %dil
               	je	0x43d36d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x41>
               	movq	%rsi, 16(%rdx)
               	cmpq	%rdx, %rcx
               	jne	0x43d361 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x35>
               	movq	%rsi, 8(%rcx)
               	jmp	0x43d377 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x4b>
               	cmpq	%rdx, 16(%rcx)
               	jne	0x43d3bd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 16(%rcx)
               	jmp	0x43d3bd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%rsi, 24(%rdx)
               	cmpq	%rdx, 24(%rcx)
               	jne	0x43d3bd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	%r8, 24(%rcx)
               	jmp	0x43d3bd <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x91>
               	movq	8(%r8), %r10
               	cmpl	$0, (%r10)
               	jne	0x43d43c <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x110>
               	movq	8(%r10), %r9
               	movq	16(%r9), %rax
               	cmpq	%rax, %r10
               	jne	0x43d3fa <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xce>
               	movq	24(%r9), %rax
               	testq	%rax, %rax
               	je	0x43d3c8 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	cmpl	$0, (%rax)
               	jne	0x43d3c8 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x9c>
               	movl	$1, (%r10)
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	movq	%r9, %r8
               	movq	8(%rcx), %rax
               	cmpq	%r8, %rax
               	jne	0x43d37d <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x51>
               	jmp	0x43d439 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x10d>
               	cmpq	%r8, 24(%r10)
               	jne	0x43d3dc <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xb0>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43d1eb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43d22b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43d434 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x108>
               	testq	%rax, %rax
               	je	0x43d404 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd8>
               	cmpl	$0, (%rax)
               	je	0x43d3a6 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x7a>
               	cmpq	%r8, 16(%r10)
               	jne	0x43d418 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xec>
               	movq	%r11, %rsi
               	movq	%r10, %rdi
               	callq	0x43d22b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r10, %r8
               	movq	8(%r8), %rax
               	movq	%r11, %rsi
               	movq	%r9, %rdi
               	movl	$1, (%rax)
               	movl	$0, (%r9)
               	callq	0x43d1eb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	%r8, %r9
               	jmp	0x43d3ba <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8e>
               	movq	%r8, %rax
               	movl	$1, (%rax)
               	retq

<std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>:
               	movq	16(%rdi), %r9
               	movq	%rsi, %r10
               	movq	%rdi, %r8
               	movq	24(%rdi), %rsi
               	testq	%r9, %r9
               	je	0x43d4e8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xa5>
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43d4f0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43d474 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x31>
               	movq	%rdx, %rax
               	jmp	0x43d466 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x23>
               	movq	24(%rax), %rdx
               	cmpq	%r8, %rax
               	je	0x43d4ed <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xaa>
               	movq	%rax, 8(%r9)
               	movq	%rax, %rcx
               	movq	%r9, 16(%rax)
               	cmpq	%rax, %rsi
               	je	0x43d4ae <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x6b>
               	movq	8(%rax), %rcx
               	testq	%rdx, %rdx
               	je	0x43d49a <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x57>
               	movq	%rcx, 8(%rdx)
               	movq	8(%rax), %rdi
               	movq	%rdx, 16(%rdi)
               	movq	%rsi, 24(%rax)
               	movq	24(%r8), %rsi
               	movq	%rax, 8(%rsi)
               	cmpq	%r8, 8(%r10)
               	jne	0x43d4ba <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x77>
               	movq	%rax, 8(%r10)
               	jmp	0x43d4ce <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	8(%r8), %rsi
               	cmpq	%r8, 16(%rsi)
               	jne	0x43d4ca <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x87>
               	movq	%rax, 16(%rsi)
               	jmp	0x43d4ce <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x8b>
               	movq	%rax, 24(%rsi)
               	movq	8(%r8), %rsi
               	movl	(%r8), %edi
               	movq	%rdx, %r9
               	movq	%rsi, 8(%rax)
               	movl	(%rax), %esi
               	movl	%edi, (%rax)
               	movl	%esi, (%r8)
               	jmp	0x43d56d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	movq	%rsi, %r9
               	jmp	0x43d4f0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xad>
               	movq	%rdx, %r9
               	movq	8(%r8), %rcx
               	testq	%r9, %r9
               	je	0x43d4fd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xba>
               	movq	%rcx, 8(%r9)
               	cmpq	%r8, 8(%r10)
               	jne	0x43d509 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xc6>
               	movq	%r9, 8(%r10)
               	jmp	0x43d51d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	8(%r8), %rax
               	cmpq	%r8, 16(%rax)
               	jne	0x43d519 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xd6>
               	movq	%r9, 16(%rax)
               	jmp	0x43d51d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xda>
               	movq	%r9, 24(%rax)
               	cmpq	%r8, 16(%r10)
               	jne	0x43d545 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x102>
               	cmpq	$0, 24(%r8)
               	movq	%r9, %rax
               	jne	0x43d533 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	8(%r8), %rax
               	jmp	0x43d541 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	16(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43d541 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xfe>
               	movq	%rdx, %rax
               	jmp	0x43d533 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0xf0>
               	movq	%rax, 16(%r10)
               	cmpq	%r8, 24(%r10)
               	jne	0x43d56d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x12a>
               	cmpq	$0, 16(%r8)
               	movq	%r9, %rax
               	jne	0x43d55b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	8(%r8), %rax
               	jmp	0x43d569 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	24(%rax), %rdx
               	testq	%rdx, %rdx
               	je	0x43d569 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x126>
               	movq	%rdx, %rax
               	jmp	0x43d55b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x118>
               	movq	%rax, 24(%r10)
               	cmpl	$0, (%r8)
               	leaq	8(%r10), %r11
               	je	0x43d6dc <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	cmpq	%r9, 8(%r10)
               	je	0x43d6d3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	testq	%r9, %r9
               	je	0x43d59c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	cmpl	$1, (%r9)
               	je	0x43d59c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x159>
               	movl	$1, (%r9)
               	jmp	0x43d6dc <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x299>
               	movq	16(%rcx), %rdi
               	cmpq	%r9, %rdi
               	jne	0x43d63c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1f9>
               	movq	24(%rcx), %rdi
               	cmpl	$0, (%rdi)
               	jne	0x43d5cd <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x18a>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43d1eb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movq	16(%rdi), %rdx
               	movq	24(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43d5df <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x19c>
               	cmpl	$1, (%rdx)
               	jne	0x43d5f1 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1ae>
               	testq	%rax, %rax
               	je	0x43d678 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	je	0x43d678 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	testq	%rax, %rax
               	je	0x43d5fb <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1b8>
               	cmpl	$1, (%rax)
               	jne	0x43d613 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1d0>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43d22b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	24(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	24(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43d62c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x1e9>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43d1eb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	jmp	0x43d6d3 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x290>
               	cmpl	$0, (%rdi)
               	jne	0x43d65c <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x219>
               	movl	$1, (%rdi)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	movl	$0, (%rcx)
               	callq	0x43d22b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movq	24(%rdi), %rdx
               	movq	16(%rdi), %rax
               	testq	%rdx, %rdx
               	je	0x43d66e <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x22b>
               	cmpl	$1, (%rdx)
               	jne	0x43d68d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	testq	%rax, %rax
               	je	0x43d678 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x235>
               	cmpl	$1, (%rax)
               	jne	0x43d68d <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x24a>
               	movq	8(%rcx), %rax
               	movq	%rcx, %r9
               	movl	$0, (%rdi)
               	movq	%rax, %rcx
               	jmp	0x43d57b <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x138>
               	testq	%rax, %rax
               	je	0x43d697 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x254>
               	cmpl	$1, (%rax)
               	jne	0x43d6af <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x26c>
               	movl	$1, (%rdx)
               	movq	%r11, %rsi
               	movl	$0, (%rdi)
               	callq	0x43d1eb <std::local_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	movq	16(%rcx), %rdi
               	movl	(%rcx), %eax
               	movl	%eax, (%rdi)
               	movq	16(%rdi), %rax
               	movl	$1, (%rcx)
               	testq	%rax, %rax
               	je	0x43d6c8 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x285>
               	movl	$1, (%rax)
               	movq	%r11, %rsi
               	movq	%rcx, %rdi
               	callq	0x43d22b <std::local_Rb_tree_rotate_right(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&)>
               	testq	%r9, %r9
               	jne	0x43d590 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)+0x14d>
               	movq	%r8, %rax
               	retq

<std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)>:
               	xorl	%eax, %eax
               	testq	%rdi, %rdi
               	je	0x43d6f9 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	cmpl	$1, (%rdi)
               	jne	0x43d6ee <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0xe>
               	incl	%eax
               	cmpq	%rsi, %rdi
               	je	0x43d6f9 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x19>
               	movq	8(%rdi), %rdi
               	jmp	0x43d6e7 <std::_Rb_tree_black_count(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)+0x7>
               	retq

<std::(anonymous namespace)::run(void*)>:
               	movq	%rdi, %rax
               	testq	%rdi, %rdi
               	jne	0x43d703 <std::(anonymous namespace)::run(void*)+0x9>
               	retq
               	pushq	%rbx
               	movq	(%rax), %rbx
               	movq	%rax, %rdi
               	callq	*8(%rax)
               	movq	%rbx, %rax
               	testq	%rbx, %rbx
               	jne	0x43d704 <std::(anonymous namespace)::run(void*)+0xa>
               	popq	%rbx
               	retq
               	nop

<std::(anonymous namespace)::key_init()::key_s::~key_s()>:
               	movl	261694(%rip), %edi      # 0x47d55c <std::(anonymous namespace)::key>
               	jmp	0x413b40 <pthread_key_delete@plt>

<std::(anonymous namespace)::key_init()>:
               	movb	261671(%rip), %al       # 0x47d550 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	leaq	91(%rip), %rdi          # 0x43d78b <std::(anonymous namespace)::run()>
               	testb	%al, %al
               	jne	0x43d786 <std::(anonymous namespace)::key_init()+0x63>
               	pushq	%rdx
               	leaq	261652(%rip), %rdi      # 0x47d550 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43cdc1 <__cxa_guard_acquire>
               	testl	%eax, %eax
               	je	0x43d77e <std::(anonymous namespace)::key_init()+0x5b>
               	leaq	-82(%rip), %rsi         # 0x43d6fa <std::(anonymous namespace)::run(void*)>
               	leaq	261641(%rip), %rdi      # 0x47d55c <std::(anonymous namespace)::key>
               	callq	0x413840 <pthread_key_create@plt>
               	leaq	261617(%rip), %rdi      # 0x47d550 <guard variable for std::(anonymous namespace)::key_init()::ks>
               	callq	0x43ceb0 <__cxa_guard_release>
               	leaq	150429(%rip), %rdx      # 0x462308 <__dso_handle>
               	leaq	261606(%rip), %rsi      # 0x47d558 <std::(anonymous namespace)::key_init()::ks>
               	leaq	-97(%rip), %rdi         # 0x43d718 <std::(anonymous namespace)::key_init()::key_s::~key_s()>
               	callq	0x413b50 <__cxa_atexit@plt>
               	leaq	6(%rip), %rdi           # 0x43d78b <std::(anonymous namespace)::run()>
               	popq	%rax
               	jmp	0x443990 <atexit>

<std::(anonymous namespace)::run()>:
               	pushq	%rbx
               	movl	261578(%rip), %edi      # 0x47d55c <std::(anonymous namespace)::key>
               	callq	0x413a20 <pthread_getspecific@plt>
               	movl	261567(%rip), %edi      # 0x47d55c <std::(anonymous namespace)::key>
               	xorl	%esi, %esi
               	movq	%rax, %rbx
               	callq	0x413850 <pthread_setspecific@plt>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43d6fa <std::(anonymous namespace)::run(void*)>

<std::condition_variable::condition_variable()>:
               	movl	$12, %ecx
               	xorl	%eax, %eax
               	rep		stosl	%eax, %es:(%rdi)
               	retq

<std::condition_variable::~condition_variable()>:
               	jmp	0x413a00 <pthread_cond_destroy@plt>
               	nop

<std::condition_variable::wait(std::unique_lock<std::mutex>&)>:
               	pushq	%rdx
               	movq	(%rsi), %rsi
               	callq	0x413b60 <pthread_cond_wait@plt>
               	testl	%eax, %eax
               	je	0x43d7d2 <std::condition_variable::wait(std::unique_lock<std::mutex>&)+0x12>
               	callq	0x43cf13 <std::terminate()>
               	popq	%rax
               	retq

<std::condition_variable::notify_one()>:
               	pushq	%rdx
               	callq	0x4139c0 <pthread_cond_signal@plt>
               	testl	%eax, %eax
               	je	0x43d7e5 <std::condition_variable::notify_one()+0x11>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	popq	%rax
               	retq
               	nop

<std::condition_variable::notify_all()>:
               	pushq	%rdx
               	callq	0x413a40 <pthread_cond_broadcast@plt>
               	testl	%eax, %eax
               	je	0x43d7f9 <std::condition_variable::notify_all()+0x11>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	popq	%rax
               	retq

<std::(anonymous namespace)::notifier::run(void*)>:
               	testq	%rdi, %rdi
               	je	0x43d829 <std::(anonymous namespace)::notifier::run(void*)+0x2e>
               	cmpq	$0, 149424(%rip)        # 0x461fb8 <write+0x461fb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43d817 <std::(anonymous namespace)::notifier::run(void*)+0x1c>
               	movq	24(%rdi), %rdi
               	callq	0x4137b0 <pthread_mutex_unlock@plt>
               	movq	16(%rbx), %rdi
               	callq	0x43d7e8 <std::condition_variable::notify_all()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>
               	retq

<std::__at_thread_exit(std::__at_thread_exit_elt*)>:
               	cmpq	$0, 149382(%rip)        # 0x461fb8 <write+0x461fb8>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	je	0x43d84b <std::__at_thread_exit(std::__at_thread_exit_elt*)+0x21>
               	leaq	-284(%rip), %rsi        # 0x43d723 <std::(anonymous namespace)::key_init()>
               	leaq	261382(%rip), %rdi      # 0x47d54c <std::__at_thread_exit(std::__at_thread_exit_elt*)::once>
               	callq	0x413a10 <pthread_once@plt>
               	movl	261387(%rip), %edi      # 0x47d55c <std::(anonymous namespace)::key>
               	callq	0x413a20 <pthread_getspecific@plt>
               	movl	261376(%rip), %edi      # 0x47d55c <std::(anonymous namespace)::key>
               	movq	%rbx, %rsi
               	movq	%rax, (%rbx)
               	popq	%rbx
               	jmp	0x413850 <pthread_setspecific@plt>

<std::notify_all_at_thread_exit(std::condition_variable&, std::unique_lock<std::mutex>)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movl	$32, %edi
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43cb69 <operator new(unsigned long)>
               	movb	$0, 8(%rbp)
               	movq	%rax, %rbx
               	movq	%r12, 16(%rax)
               	movq	(%rbp), %rax
               	movq	$0, (%rbp)
               	movq	%rbx, %rdi
               	movq	%rax, 24(%rbx)
               	leaq	-166(%rip), %rax        # 0x43d7fb <std::(anonymous namespace)::notifier::run(void*)>
               	movq	%rax, 8(%rbx)
               	callq	0x43d82a <std::__at_thread_exit(std::__at_thread_exit_elt*)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c235 <operator delete(void*)>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<(anonymous namespace)::generic_error_category::name() const>:
               	leaq	33581(%rip), %rax       # 0x445bf6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1abd>
               	retq

<(anonymous namespace)::system_error_category::name() const>:
               	leaq	33581(%rip), %rax       # 0x445bfe <typeinfo name for kotlin::gc::GCSchedulerData+0x1ac5>
               	retq

<std::_V2::error_category::default_error_condition(int) const>:
               	movq	%rdi, %rdx
               	movl	%esi, %eax
               	retq

<std::_V2::error_category::equivalent(int, std::error_condition const&) const>:
               	movq	(%rdi), %rax
               	pushq	%rbx
               	movq	%rdx, %rbx
               	callq	*40(%rax)
               	xorl	%ecx, %ecx
               	cmpq	%rdx, 8(%rbx)
               	jne	0x43d8ef <std::_V2::error_category::equivalent(int, std::error_condition const&) const+0x17>
               	cmpl	%eax, (%rbx)
               	sete	%cl
               	movl	%ecx, %eax
               	popq	%rbx
               	retq
               	nop

<std::_V2::error_category::equivalent(std::error_code const&, int) const>:
               	xorl	%eax, %eax
               	cmpq	8(%rsi), %rdi
               	jne	0x43d901 <std::_V2::error_category::equivalent(std::error_code const&, int) const+0xd>
               	cmpl	%edx, (%rsi)
               	sete	%al
               	retq

<std::system_error::~system_error()>:
               	leaq	147511(%rip), %rax      # 0x461940 <vtable for std::system_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x440158 <std::runtime_error::~runtime_error()>
               	nop

<std::system_error::~system_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d902 <std::system_error::~system_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::_V2::error_category::_M_message[abi:cxx11](int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rsi), %rax
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	*32(%rax)
               	movq	8(%rsp), %rdx
               	movq	(%rsp), %rsi
               	movq	%rbp, %rdi
               	callq	0x44054c <std::__cow_string::__cow_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	addq	$40, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movl	%edx, %edi
               	callq	0x413890 <strerror@plt>
               	orq	$-1, %rdx
               	movq	%rax, %rsi
               	leaq	16(%rbx), %rax
               	movq	%rax, (%rbx)
               	testq	%rsi, %rsi
               	je	0x43d9a7 <(anonymous namespace)::generic_error_category::message[abi:cxx11](int) const+0x33>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%rbx, %rdi
               	callq	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::~error_category()>:
               	retq
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	leaq	147187(%rip), %rax      # 0x4618b0 <vtable for (anonymous namespace)::system_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43d9b4 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::system_error_category::~system_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d9b6 <(anonymous namespace)::system_error_category::~system_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	leaq	147073(%rip), %rax      # 0x461860 <vtable for (anonymous namespace)::generic_error_category+0x10>
               	movq	%rax, (%rdi)
               	jmp	0x43d9b4 <std::_V2::error_category::~error_category()>
               	nop

<(anonymous namespace)::generic_error_category::~generic_error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d9d8 <(anonymous namespace)::generic_error_category::~generic_error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::_V2::error_category::~error_category()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43d9b4 <std::_V2::error_category::~error_category()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::_V2::system_category()>:
               	leaq	155725(%rip), %rax      # 0x463a60 <(anonymous namespace)::system_category_instance>
               	retq

<std::_V2::generic_category()>:
               	leaq	155725(%rip), %rax      # 0x463a68 <(anonymous namespace)::generic_category_instance>
               	retq

<(anonymous namespace)::system_error_category::default_error_condition(int) const>:
               	cmpl	$84, %esi
               	pushq	%rbx
               	movl	%esi, %ebx
               	je	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43da5c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x40>
               	cmpl	$43, %esi
               	jg	0x43da41 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x25>
               	cmpl	$42, %esi
               	jge	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	testl	%esi, %esi
               	jle	0x43da9e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	cmpl	$14, %esi
               	jle	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	subl	$16, %esi
               	cmpl	$24, %esi
               	jmp	0x43da95 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$67, %esi
               	je	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43da50 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x34>
               	subl	$60, %esi
               	cmpl	$3, %esi
               	jmp	0x43da95 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$71, %esi
               	je	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jl	0x43da9e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	subl	$74, %esi
               	jmp	0x43da92 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x76>
               	cmpl	$111, %esi
               	jg	0x43da7d <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x61>
               	cmpl	$110, %esi
               	jge	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	cmpl	$95, %esi
               	je	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43da75 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x59>
               	subl	$88, %esi
               	cmpl	$5, %esi
               	jmp	0x43da95 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$97, %esi
               	cmpl	$10, %esi
               	jmp	0x43da95 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	cmpl	$125, %esi
               	je	0x43da97 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x7b>
               	jg	0x43da8c <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x70>
               	subl	$113, %esi
               	cmpl	$2, %esi
               	jmp	0x43da95 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x79>
               	subl	$130, %esi
               	cmpl	$1, %esi
               	ja	0x43da9e <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x82>
               	callq	0x43da14 <std::_V2::generic_category()>
               	jmp	0x43daa3 <(anonymous namespace)::system_error_category::default_error_condition(int) const+0x87>
               	callq	0x43da0c <std::_V2::system_category()>
               	movq	%rax, %rdx
               	movl	%ebx, %eax
               	popq	%rbx
               	retq

<std::__throw_system_error(int)>:
               	pushq	%r13
               	movl	%edi, %r13d
               	movl	$32, %edi
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rsp, %r12
               	movq	%rax, %rbx
               	callq	0x43da14 <std::_V2::generic_category()>
               	movl	%r13d, %edx
               	movq	%r12, %rdi
               	movq	%rax, %rbp
               	movq	(%rax), %rax
               	movq	%rbp, %rsi
               	callq	*32(%rax)
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43deb4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r12, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	147016(%rip), %rax      # 0x461940 <vtable for std::system_error>
               	movq	%rbx, %rdi
               	movl	%r13d, 16(%rbx)
               	leaq	-516(%rip), %rdx        # 0x43d902 <std::system_error::~system_error()>
               	leaq	146683(%rip), %rsi      # 0x461808 <typeinfo for std::system_error>
               	movq	%rbp, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%r12, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43db2d <std::__throw_system_error(int)+0x83>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::error_code::default_error_condition() const>:
               	movq	8(%rdi), %rax
               	movl	(%rdi), %esi
               	movq	(%rax), %rdx
               	movq	%rax, %rdi
               	movq	40(%rdx), %rdx
               	jmpq	*%rdx

<std::chrono::_V2::system_clock::now()>:
               	subq	$24, %rsp
               	xorl	%edi, %edi
               	movq	%rsp, %rsi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq

<std::chrono::_V2::steady_clock::now()>:
               	subq	$24, %rsp
               	movl	$1, %edi
               	movq	%rsp, %rsi
               	callq	0x413800 <clock_gettime@plt>
               	imulq	$1000000000, (%rsp), %rax # imm = 0x3B9ACA00
               	addq	8(%rsp), %rax
               	addq	$24, %rsp
               	retq
               	nop

<std::bad_function_call::what() const>:
               	leaq	32874(%rip), %rax       # 0x445c05 <typeinfo name for kotlin::gc::GCSchedulerData+0x1acc>
               	retq

<std::bad_function_call::~bad_function_call()>:
               	leaq	146909(%rip), %rax      # 0x461980 <vtable for std::bad_function_call>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::bad_function_call::~bad_function_call()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43db9c <std::bad_function_call::~bad_function_call()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::__throw_bad_function_call()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	146860(%rip), %rdx      # 0x461980 <vtable for std::bad_function_call>
               	leaq	146829(%rip), %rsi      # 0x461968 <typeinfo for std::bad_function_call>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-80(%rip), %rdx         # 0x43db9c <std::bad_function_call::~bad_function_call()>
               	callq	0x43cd15 <__cxa_throw>
               	nop

<std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	cmpq	$12, %rsi
               	ja	0x43dc5c <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x6a>
               	leaq	35456(%rip), %rax       # 0x446688 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const::__fast_bkt>
               	flds	(%rdi)
               	movzbl	(%rax,%rsi), %eax
               	movl	%eax, 4(%rsp)
               	fimull	4(%rsp)
               	movl	%eax, %ebp
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b70 <ceil@plt>
               	movsd	24297(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x443b18 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43dc40 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x4e>
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	jmp	0x43dc53 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x61>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rdx
               	movq	%rdx, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	movzbl	%bpl, %eax
               	jmp	0x43dcf2 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x100>
               	leaq	35389(%rip), %rcx       # 0x4466a0 <std::__detail::__prime_list>
               	incq	%rsi
               	movl	$297, %edx              # imm = 0x129
               	leaq	48(%rcx), %rbp
               	movq	%rdx, %rax
               	sarq	%rax
               	leaq	(%rbp,%rax,8), %rdi
               	cmpq	(%rdi), %rsi
               	ja	0x43dc89 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x97>
               	testq	%rax, %rax
               	jle	0x43dc96 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xa4>
               	movq	%rax, %rdx
               	jmp	0x43dc6f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x7d>
               	subq	%rax, %rdx
               	leaq	8(%rdi), %rbp
               	leaq	-1(%rdx), %rax
               	jmp	0x43dc7f <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0x8d>
               	leaq	2424(%rcx), %rdx
               	orq	$-1, %rax
               	cmpq	%rdx, %rbp
               	je	0x43dcea <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	fildll	(%rbp)
               	cmpq	$0, (%rbp)
               	jns	0x43dcb6 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xc4>
               	fadds	23906(%rip)             # 0x443a18 <_IO_stdin_used+0x18>
               	fmuls	(%rbx)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b70 <ceil@plt>
               	movsd	24137(%rip), %xmm1      # xmm1 = mem[0],zero
                                                # 0x443b18 <_IO_stdin_used+0x118>
               	comisd	%xmm1, %xmm0
               	jae	0x43dcdc <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xea>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43dcea <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const+0xf8>
               	subsd	%xmm1, %xmm0
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const>:
               	addq	%rcx, %rdx
               	cmpq	8(%rdi), %rdx
               	jb	0x43dde6 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xec>
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	flds	(%rdi)
               	movq	%rdx, (%rsp)
               	fildll	(%rsp)
               	testq	%rdx, %rdx
               	jns	0x43dd21 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x27>
               	fadds	23799(%rip)             # 0x443a18 <_IO_stdin_used+0x18>
               	fdiv	%st(1), %st
               	movq	%rsi, (%rsp)
               	fildll	(%rsp)
               	testq	%rsi, %rsi
               	jns	0x43dd39 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x3f>
               	fadds	23779(%rip)             # 0x443a18 <_IO_stdin_used+0x18>
               	fxch	%st(1)
               	jmp	0x43dd3b <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x41>
               	fxch	%st(1)
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	fcomi	%st(1), %st
               	jb	0x43dda1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xa7>
               	fstp	%st(1)
               	fstp	%st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b80 <floor@plt>
               	addsd	24000(%rip), %xmm0      # 0x443b20 <_IO_stdin_used+0x120>
               	comisd	23984(%rip), %xmm0      # 0x443b18 <_IO_stdin_used+0x118>
               	jae	0x43dd71 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x77>
               	cvttsd2si	%xmm0, %rax
               	jmp	0x43dd83 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0x89>
               	subsd	23967(%rip), %xmm0      # 0x443b18 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	btcq	$63, %rax
               	leaq	(%rbp,%rbp), %rsi
               	movq	%rbx, %rdi
               	cmpq	%rsi, %rax
               	cmovaeq	%rax, %rsi
               	callq	0x43dbf2 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const>
               	movq	%rax, %rdx
               	movl	$1, %eax
               	jmp	0x43ddeb <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	fstp	%st(0)
               	fmulp	%st, %st(1)
               	fstpl	8(%rsp)
               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
               	callq	0x413b80 <floor@plt>
               	comisd	23900(%rip), %xmm0      # 0x443b18 <_IO_stdin_used+0x118>
               	jae	0x43ddc9 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xcf>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	jmp	0x43dde0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xe6>
               	subsd	23879(%rip), %xmm0      # 0x443b18 <_IO_stdin_used+0x118>
               	cvttsd2si	%xmm0, %rax
               	movq	%rax, 8(%rbx)
               	btcq	$63, 8(%rbx)
               	xorl	%eax, %eax
               	xorl	%edx, %edx
               	jmp	0x43ddeb <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const+0xf1>
               	xorl	%edx, %edx
               	xorl	%eax, %eax
               	retq
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<__once_proxy>:
               	pushq	%rax
               	movq	%fs:0, %rax
               	leaq	-16(%rax), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	jmpq	*%rax
               	nop

<std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x44054c <std::__cow_string::__cow_string(char const*, unsigned long)>

<std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	146721(%rip), %rax      # 0x461b48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43de0a <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43de16 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146708(%rip), %rax      # 0x461b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43de16 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146722(%rip), %rax      # 0x461b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43de16 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146736(%rip), %rax      # 0x461bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43de16 <std::logic_error::logic_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146750(%rip), %rax      # 0x461be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	146763(%rip), %rax      # 0x461c10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x43de0a <std::__cow_string::__cow_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43deb4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146750(%rip), %rax      # 0x461c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43deb4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146764(%rip), %rax      # 0x461c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43deb4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	leaq	146778(%rip), %rax      # 0x461c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::char_traits<char>::compare(char const*, char const*, unsigned long)>:
               	testq	%rdx, %rdx
               	je	0x43df41 <std::char_traits<char>::compare(char const*, char const*, unsigned long)+0xa>
               	jmp	0x4137e0 <memcmp@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::find(char const*, unsigned long, char const&)>:
               	movq	%rsi, %rax
               	testq	%rsi, %rsi
               	je	0x43df57 <std::char_traits<char>::find(char const*, unsigned long, char const&)+0x13>
               	movsbl	(%rdx), %esi
               	movq	%rax, %rdx
               	jmp	0x413b90 <memchr@plt>
               	xorl	%eax, %eax
               	retq

<std::char_traits<char>::copy(char*, char const*, unsigned long)>:
               	movq	%rdi, %rax
               	movq	%rdx, %rcx
               	testq	%rdx, %rdx
               	je	0x43df67 <std::char_traits<char>::copy(char*, char const*, unsigned long)+0xd>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_length(unsigned long)>:
               	movq	%rsi, 8(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data() const>:
               	leaq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)>:
               	movq	%rsi, 16(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)>:
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_is_local() const>:
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>:
               	movq	(%rsi), %rax
               	testq	%rax, %rax
               	jns	0x43dfb5 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x15>
               	pushq	%rax
               	leaq	31520(%rip), %rdi       # 0x445ad0 <typeinfo name for kotlin::gc::GCSchedulerData+0x1997>
               	callq	0x441148 <std::__throw_length_error(char const*)>
               	cmpq	%rdx, %rax
               	jbe	0x43dfd9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	addq	%rdx, %rdx
               	cmpq	%rdx, %rax
               	jae	0x43dfd9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	testq	%rdx, %rdx
               	js	0x43dfcc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x2c>
               	movq	%rdx, (%rsi)
               	jmp	0x43dfd9 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)+0x39>
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	movq	%rax, (%rsi)
               	movq	(%rsi), %rdi
               	incq	%rdi
               	jmp	0x43cb69 <operator new(unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>:
               	movq	%rdi, %rax
               	movq	(%rdi), %rdi
               	addq	$16, %rax
               	cmpq	%rax, %rdi
               	je	0x43dff8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()+0x14>
               	jmp	0x43c235 <operator delete(void*)>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy(unsigned long)>:
               	movq	(%rdi), %rdi
               	jmp	0x43c235 <operator delete(void*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator()>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>:
               	movq	8(%rdi), %rcx
               	movq	%rsi, %rax
               	cmpq	%rcx, %rsi
               	jbe	0x43e02b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const+0x21>
               	pushq	%rsi
               	leaq	31737(%rip), %rdi       # 0x445c17 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x4411d6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	addq	%rax, %rsi
               	subq	8(%rdi), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x43e04b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const+0x1f>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x441148 <std::__throw_length_error(char const*)>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_limit(unsigned long, unsigned long) const>:
               	movq	8(%rdi), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x43e070 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const+0x14>
               	addq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43e07c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	jmp	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x43e08c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x43e096 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136f0 <memmove@plt>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x43e0a3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x43e0ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>:
               	pushq	%rbp
               	movl	%edx, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movq	%rsi, 8(%rsp)
               	cmpq	$15, %rsi
               	jbe	0x43e0dc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x2e>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	8(%rsp), %rsi
               	testq	%rsi, %rsi
               	je	0x43e0f2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)+0x44>
               	movq	(%rbx), %rdi
               	movsbl	%bpl, %edx
               	callq	0x43e097 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux_2(unsigned long, char)>:
               	movsbl	%dl, %edx
               	jmp	0x43e0ae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43e112 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	jmp	0x43e11f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x43e14a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	cmpq	%rsi, %rdi
               	je	0x43e1cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x80>
               	pushq	%r13
               	leaq	16(%rdi), %rax
               	movl	$15, %edx
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rsi), %rbp
               	cmpq	%rax, (%rdi)
               	je	0x43e171 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x25>
               	movq	16(%rdi), %rdx
               	movq	%rsi, %r12
               	movq	%rdi, %rbx
               	cmpq	%rbp, %rdx
               	jae	0x43e1a2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x56>
               	leaq	8(%rsp), %rsi
               	movq	%rbp, 8(%rsp)
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rbx, %rdi
               	movq	%rax, %r13
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%r13, (%rbx)
               	movq	%rax, 16(%rbx)
               	testq	%rbp, %rbp
               	je	0x43e1b6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6a>
               	movq	(%r12), %rsi
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	leaq	(%rbp,%rdx), %r14
               	movq	%rdi, %rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	movq	%rsi, %rax
               	subq	%r14, %rax
               	movq	%rax, 8(%rsp)
               	movq	%r8, %rax
               	subq	%rdx, %rax
               	movl	$15, %edx
               	addq	%rsi, %rax
               	movq	%rax, 24(%rsp)
               	leaq	16(%rdi), %rax
               	cmpq	%rax, (%rdi)
               	je	0x43e21c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x4e>
               	movq	16(%rdi), %rdx
               	leaq	24(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, %r12
               	testq	%rbp, %rbp
               	je	0x43e23f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x71>
               	movq	(%rbx), %rsi
               	movq	%rbp, %rdx
               	movq	%rax, %rdi
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	testq	%r13, %r13
               	je	0x43e258 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	testq	%r15, %r15
               	je	0x43e258 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0x8a>
               	leaq	(%r12,%rbp), %rdi
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	cmpq	$0, 8(%rsp)
               	je	0x43e278 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)+0xaa>
               	movq	(%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	8(%rsp), %rdx
               	addq	%r12, %rdi
               	addq	%r14, %rsi
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	24(%rsp), %rax
               	movq	%r12, (%rbx)
               	movq	%rax, 16(%rbx)
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	(%rsi,%rdx), %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rdx
               	subq	%rax, %rdx
               	je	0x43e2c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	testq	%rbp, %rbp
               	je	0x43e2c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rdi), %rdi
               	addq	%rdi, %rax
               	addq	%rsi, %rdi
               	movq	%rax, %rsi
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbx), %rdx
               	subq	%rbp, %rax
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movsbl	%dl, %edx
               	movq	%rax, (%rdi)
               	jmp	0x43e0ae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	%rdi, (%rbp)
               	movq	(%rsi), %rax
               	cmpq	%rax, %r12
               	jne	0x43e343 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x2d>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43e34f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	%rax, (%rbp)
               	movq	16(%rsi), %rax
               	movq	%rax, 16(%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	%r12, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	addq	$16, %rdi
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rdx
               	movq	%rdi, (%rbp)
               	movq	-16(%rsi), %rcx
               	cmpq	%rcx, %rsi
               	jne	0x43e3ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x40>
               	movl	$16, %edx
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	jmp	0x43e3cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::allocator<char> const&)+0x63>
               	movq	%rcx, (%rbp)
               	movq	8(%rbx), %rcx
               	movq	%rcx, 8(%rbp)
               	movq	16(%rbx), %rcx
               	movq	%rcx, 16(%rbp)
               	movq	%rsi, (%rbx)
               	movq	$0, 8(%rbx)
               	movb	$0, 16(%rbx)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	jmp	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e14c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	addq	$16, %rsi
               	pushq	%rcx
               	movq	-16(%rsi), %rax
               	movq	(%rdi), %rdi
               	cmpq	%rax, %rsi
               	jne	0x43e421 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x39>
               	movq	8(%rbx), %rdx
               	testq	%rdx, %rdx
               	je	0x43e40f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x27>
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	(%rbp), %rdx
               	movq	%rax, 8(%rbp)
               	movb	$0, (%rdx,%rax)
               	jmp	0x43e457 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	leaq	16(%rbp), %rcx
               	cmpq	%rcx, %rdi
               	je	0x43e430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x48>
               	movq	16(%rbp), %rdx
               	jmp	0x43e432 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x4a>
               	xorl	%edi, %edi
               	movq	%rax, (%rbp)
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	16(%rbx), %rax
               	movq	%rax, 16(%rbp)
               	testq	%rdi, %rdi
               	je	0x43e454 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6c>
               	movq	%rdi, (%rbx)
               	movq	%rdx, 16(%rbx)
               	jmp	0x43e457 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x6f>
               	movq	%rsi, (%rbx)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movb	$0, (%rax)
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end()>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::end() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin()>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend()>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::cend() const>:
               	movq	8(%rdi), %rax
               	addq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crbegin() const>:
               	movq	8(%rsi), %rdx
               	addq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::length() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::max_size() const>:
               	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43e502 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::capacity() const+0x12>
               	movq	16(%rdi), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rsi, 8(%rsp)
               	cmpq	%rax, %rsi
               	jae	0x43e51d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x19>
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rsi
               	leaq	16(%rdi), %rbp
               	movl	$15, %edx
               	cmpq	%rsi, %rbp
               	je	0x43e532 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x2e>
               	movq	16(%rdi), %rdx
               	movq	8(%rsp), %rcx
               	cmpq	%rdx, %rcx
               	je	0x43e59f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	movq	%rdi, %rbx
               	cmpq	$15, %rcx
               	ja	0x43e54a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x46>
               	cmpq	%rdx, %rcx
               	jbe	0x43e583 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x7f>
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%rax, %rbp
               	movq	8(%rbx), %rax
               	movq	%rbp, %rdi
               	leaq	1(%rax), %rdx
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	8(%rsp), %rax
               	movq	%rbp, (%rbx)
               	movq	%rax, 16(%rbx)
               	jmp	0x43e59f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	cmpq	%rsi, %rbp
               	je	0x43e59f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)+0x9b>
               	leaq	1(%rax), %rdx
               	movq	%rbp, %rdi
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rdi
               	callq	0x43c235 <operator delete(void*)>
               	movq	%rbp, (%rbx)
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()>:
               	leaq	16(%rdi), %rdx
               	movl	$15, %eax
               	cmpq	%rdx, (%rdi)
               	je	0x43e5b8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x12>
               	movq	16(%rdi), %rax
               	cmpq	%rax, 8(%rdi)
               	jae	0x43e5d6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::shrink_to_fit()+0x30>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x43e504 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43cc25 <__cxa_end_catch>
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::clear()>:
               	movq	(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movb	$0, (%rax)
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::empty() const>:
               	cmpq	$0, 8(%rdi)
               	sete	%al
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator[](unsigned long)>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43e61a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long) const+0x18>
               	pushq	%rax
               	leaq	30267(%rip), %rdi       # 0x445c4e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4411d6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)>:
               	movq	8(%rdi), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x43e63a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::at(unsigned long)+0x18>
               	pushq	%rax
               	leaq	30235(%rip), %rdi       # 0x445c4e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4411d6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front()>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back()>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::back() const>:
               	movq	8(%rdi), %rax
               	movq	(%rdi), %rdx
               	leaq	-1(%rdx,%rax), %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>:
               	pushq	%r13
               	movl	%esi, %r13d
               	movl	$15, %eax
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	8(%rdi), %rbp
               	leaq	16(%rdi), %rdx
               	leaq	1(%rbp), %r12
               	cmpq	%rdx, (%rdi)
               	je	0x43e68d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x27>
               	movq	16(%rdi), %rax
               	cmpq	%rax, %r12
               	jbe	0x43e6a7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)+0x41>
               	movl	$1, %r8d
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e1ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movb	%r13b, (%rax,%rbp)
               	movq	(%rbx), %rax
               	movq	%r12, 8(%rbx)
               	movb	$0, 1(%rax,%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x43e666 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e14c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
               	jmp	0x43e3e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	30110(%rip), %rdx       # 0x445c92 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	cmpq	$-1, %r12
               	jne	0x43e714 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x2c>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	jmp	0x43e732 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	testq	%r12, %r12
               	je	0x43e732 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(unsigned long, unsigned long)+0x4a>
               	movq	8(%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	subq	%rbp, %rdx
               	cmpq	%r12, %rdx
               	cmovaq	%r12, %rdx
               	callq	0x43e29c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43e29c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	subq	%rax, %rbx
               	addq	8(%rdi), %rax
               	cmpq	%rax, %rdx
               	jne	0x43e77f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x21>
               	movq	%rbx, 8(%rdi)
               	movb	$0, (%rsi)
               	jmp	0x43e78a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::erase(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x2c>
               	subq	%rsi, %rdx
               	movq	%rbx, %rsi
               	callq	0x43e29c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::pop_back()>:
               	movq	8(%rdi), %rax
               	movl	$1, %edx
               	leaq	-1(%rax), %rsi
               	jmp	0x43e29c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_erase(unsigned long, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r15
               	movl	%r8d, %r15d
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	29926(%rip), %rcx       # 0x445ca6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	movq	%r12, %rdx
               	movq	%r12, %r14
               	pushq	%rbx
               	movq	%rbp, %rsi
               	movq	%rdi, %rbx
               	subq	%rbp, %r14
               	pushq	%r9
               	callq	0x43e02c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%rbx), %rdx
               	movq	(%rbx), %rdi
               	leaq	16(%rbx), %rcx
               	movl	$15, %eax
               	addq	%rdx, %r14
               	cmpq	%rcx, %rdi
               	je	0x43e7f7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x4f>
               	movq	16(%rbx), %rax
               	cmpq	%r14, %rax
               	jb	0x43e81c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x74>
               	leaq	(%rbp,%r13), %rax
               	subq	%rax, %rdx
               	je	0x43e82f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	cmpq	%r12, %rbp
               	je	0x43e82f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	addq	%r13, %rdi
               	leaq	(%rdi,%rbp), %rsi
               	addq	%r12, %rdi
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43e82f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x87>
               	movq	%r12, %r8
               	xorl	%ecx, %ecx
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e1ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	testq	%r12, %r12
               	je	0x43e846 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x9e>
               	movq	(%rbx), %rdi
               	movsbl	%r15b, %edx
               	movq	%r12, %rsi
               	addq	%r13, %rdi
               	callq	0x43e097 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r14, 8(%rbx)
               	movb	$0, (%rax,%r14)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>:
               	movq	%rsi, %rcx
               	movq	8(%rdi), %rsi
               	movsbl	%dl, %r8d
               	xorl	%edx, %edx
               	jmp	0x43e7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>:
               	movq	8(%rdi), %rax
               	cmpq	%rsi, %rax
               	jae	0x43e888 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x14>
               	movsbl	%dl, %edx
               	subq	%rax, %rsi
               	jmp	0x43e862 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	jbe	0x43e895 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)+0x21>
               	movq	(%rdi), %rax
               	movq	%rsi, 8(%rdi)
               	movb	$0, (%rax,%rsi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x43e874 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>:
               	movsbl	%dl, %r8d
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43e7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x43e89e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	29675(%rip), %rdx       # 0x445cc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43e7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x43e7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movl	%r8d, 4(%rsp)
               	cmpq	%rdx, %rax
               	leaq	29581(%rip), %rdx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x43e7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x43e7a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	callq	0x43e976 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, unsigned long, char)>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%r8, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	leaq	29484(%rip), %rcx       # 0x445cee <typeinfo name for kotlin::gc::GCSchedulerData+0x1bb5>
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	movq	%r8, %rdx
               	movq	%rbx, %rsi
               	subq	$40, %rsp
               	callq	0x43e02c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	8(%r12), %rax
               	movq	%r15, %rcx
               	movq	(%r12), %rbp
               	subq	%rbx, %rcx
               	movl	$15, %edx
               	movq	%rcx, 16(%rsp)
               	addq	%rax, %rcx
               	movq	%rcx, 8(%rsp)
               	leaq	16(%r12), %rcx
               	cmpq	%rcx, %rbp
               	je	0x43ea0b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	16(%r12), %rdx
               	cmpq	8(%rsp), %rdx
               	jb	0x43eb0a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x15e>
               	addq	%r14, %rbp
               	addq	%rbx, %r14
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	subq	%r14, %rax
               	movq	%rax, %r14
               	callq	0x43e05c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_disjunct(char const*) const>
               	cmpq	%r15, %rbx
               	setne	%cl
               	testq	%r14, %r14
               	setne	%dl
               	andl	%edx, %ecx
               	testb	%al, %al
               	je	0x43ea66 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xba>
               	testb	%cl, %cl
               	je	0x43ea55 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xa9>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	testq	%r15, %r15
               	je	0x43eb1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	jmp	0x43eada <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x12e>
               	testq	%r15, %r15
               	je	0x43ea90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	cmpq	%r15, %rbx
               	jb	0x43ea90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe4>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movb	%cl, 31(%rsp)
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movb	31(%rsp), %cl
               	testb	%cl, %cl
               	je	0x43eb1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	jmp	0x43ea94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xe8>
               	testb	%cl, %cl
               	je	0x43eaa6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0xfa>
               	leaq	(%rbp,%rbx), %rsi
               	leaq	(%rbp,%r15), %rdi
               	movq	%r14, %rdx
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	cmpq	%r15, %rbx
               	jae	0x43eb1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	leaq	(%rbp,%rbx), %rdi
               	leaq	(%r13,%r15), %rax
               	cmpq	%rax, %rdi
               	jb	0x43eaca <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x11e>
               	movq	%r15, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	jmp	0x43eb1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	cmpq	%r13, %rdi
               	ja	0x43eadf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x133>
               	movq	16(%rsp), %rsi
               	movq	%r15, %rdx
               	addq	%r13, %rsi
               	movq	%rbp, %rdi
               	jmp	0x43eb03 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x157>
               	movq	%rdi, %rbx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	subq	%r13, %rbx
               	movq	%rbx, %rdx
               	callq	0x43e081 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_move(char*, char const*, unsigned long)>
               	movq	%r15, %rdx
               	leaq	(%rbp,%r15), %rsi
               	leaq	(%rbp,%rbx), %rdi
               	subq	%rbx, %rdx
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43eb1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)+0x172>
               	movq	%r15, %r8
               	movq	%r13, %rcx
               	movq	%rbx, %rdx
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x43e1ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	8(%rsp), %rax
               	movq	8(%rsp), %rbx
               	movq	%rax, 8(%r12)
               	movq	(%r12), %rax
               	movb	$0, (%rax,%rbx)
               	addq	$40, %rsp
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %r8
               	movq	(%rdi), %rbx
               	subq	%rdx, %r8
               	leaq	29087(%rip), %rdx       # 0x445d07 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %r8
               	cmovaq	%rcx, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rbp), %rdx
               	movq	8(%rsp), %r8
               	xorl	%esi, %esi
               	addq	$24, %rsp
               	leaq	(%rbx,%rax), %rcx
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43e9ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>:
               	movq	%rdx, %r8
               	movq	8(%rdi), %rdx
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43e9ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43eb96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(std::initializer_list<char>)>:
               	jmp	0x43eb96 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	movq	8(%r9), %rdx
               	leaq	-1(%rcx), %r8
               	movq	%rsi, %rcx
               	xorl	%esi, %esi
               	jmp	0x43e9ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(char const*)>:
               	jmp	0x43ebbc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::assign(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	subq	%rsi, %rax
               	movq	%r8, (%rsp)
               	cmpq	%rdx, %rax
               	leaq	28868(%rip), %rdx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	(%rsp), %r8
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43e9ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rdx), %r8
               	movq	(%rdx), %rcx
               	xorl	%edx, %edx
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rdx, %rdi
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	8(%rdx), %rax
               	movq	(%rdx), %rbx
               	leaq	28761(%rip), %rdx       # 0x445cc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, 8(%rsp)
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	$16, %rsp
               	xorl	%edx, %edx
               	leaq	(%rbx,%rax), %rcx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>:
               	movq	%rcx, %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x43ec9c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>:
               	movq	%rdi, %r9
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r9, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%rdx, %rcx
               	xorl	%edx, %edx
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28652(%rip), %rdx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%r8, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rcx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rcx), %rax
               	movq	%r9, %rbx
               	movq	(%rcx), %rbp
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r14, %rdx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rcx
               	movq	%rbx, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rcx), %r8
               	movq	(%rcx), %rcx
               	jmp	0x43ed5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x43ed5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::initializer_list<char>)>:
               	jmp	0x43ed5a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x43ebee <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	8(%rdi), %rax
               	leaq	16(%rbx), %r8
               	movl	$15, %ecx
               	movq	(%rdi), %rdi
               	leaq	(%rax,%rdx), %rbp
               	cmpq	%r8, %rdi
               	je	0x43edf7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x23>
               	movq	16(%rbx), %rcx
               	cmpq	%rcx, %rbp
               	ja	0x43ee0b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x37>
               	testq	%rdx, %rdx
               	je	0x43ee1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	addq	%rax, %rdi
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	jmp	0x43ee1e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)+0x4a>
               	movq	%rdx, %r8
               	movq	%rsi, %rcx
               	xorl	%edx, %edx
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	callq	0x43e1ce <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, 8(%rbx)
               	movb	$0, (%rax,%rbp)
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	movq	8(%rsi), %rdx
               	movq	(%rsi), %rsi
               	jmp	0x43edd4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43ee30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	8(%rdi), %rax
               	movq	%rcx, %rbx
               	movq	(%rdi), %rbp
               	subq	%rdx, %rax
               	leaq	28345(%rip), %rdx       # 0x445d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%r12, %rdi
               	leaq	(%rbp,%rax), %rsi
               	movq	%rbx, %rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43edd4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>:
               	pushq	%r12
               	leaq	28303(%rip), %rcx       # 0x445d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %r12
               	xorl	%esi, %esi
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e02c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x43edd4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(std::initializer_list<char>)>:
               	jmp	0x43ee84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::initializer_list<char>)>:
               	jmp	0x43ee84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>:
               	pushq	%r12
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	xorl	%esi, %esi
               	pushq	%rbx
               	repne		scasb	%es:(%rdi), %al
               	movq	%rbp, %rdi
               	movq	%rcx, %rdx
               	leaq	28218(%rip), %rcx       # 0x445d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	movq	%rbx, %rdx
               	callq	0x43e02c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rdx
               	movq	%r12, %rsi
               	popq	%rbx
               	movq	%rbp, %rdi
               	popq	%rbp
               	popq	%r12
               	jmp	0x43edd4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator+=(char const*)>:
               	jmp	0x43eebe <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	28187(%rip), %rdx       # 0x445d31 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	testq	%rbx, %rbx
               	je	0x43ef53 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::copy(char*, unsigned long, unsigned long) const+0x49>
               	movq	(%r12), %rsi
               	movq	%rbx, %rdx
               	movq	%r13, %rdi
               	addq	%rbp, %rsi
               	callq	0x43e071 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
               	cmpq	%rsi, %rdi
               	je	0x43f0b3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x153>
               	pushq	%r14
               	pushq	%r13
               	leaq	16(%rdi), %r13
               	pushq	%r12
               	leaq	16(%rsi), %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdx
               	movq	(%rsi), %rax
               	cmpq	%rdx, %r13
               	jne	0x43f05e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xfe>
               	cmpq	%rax, %r12
               	jne	0x43f03a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xda>
               	cmpq	$0, 8(%rdi)
               	movq	8(%rsi), %rax
               	je	0x43efe3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x83>
               	testq	%rax, %rax
               	je	0x43f011 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xb1>
               	movq	%rsp, %r14
               	movq	%r12, %rsi
               	movl	$16, %edx
               	movq	%r14, %rdi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	movl	$16, %edx
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movl	$16, %edx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	jmp	0x43f096 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	testq	%rax, %rax
               	je	0x43f096 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbx), %rax
               	movq	%rax, 8(%rbp)
               	movq	(%rbx), %rax
               	movq	$0, 8(%rbx)
               	jmp	0x43f035 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0xd5>
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	8(%rbp), %rax
               	movq	%rax, 8(%rbx)
               	movq	(%rbp), %rax
               	movq	$0, 8(%rbp)
               	movb	$0, (%rax)
               	jmp	0x43f0a6 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x146>
               	movq	16(%rsi), %r14
               	movl	$16, %edx
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rax, (%rbp)
               	movq	%r12, (%rbx)
               	movq	%r14, 16(%rbp)
               	jmp	0x43f096 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x136>
               	movq	16(%rdi), %r14
               	cmpq	%rax, %r12
               	jne	0x43f084 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x124>
               	movl	$16, %edx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	callq	0x43df5a <std::char_traits<char>::copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%rax, (%rbx)
               	movq	%r13, (%rbp)
               	jmp	0x43f092 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::swap(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)+0x132>
               	movq	%rax, (%rdi)
               	movq	16(%rsi), %rax
               	movq	%rdx, (%rsi)
               	movq	%rax, 16(%rdi)
               	movq	%r14, 16(%rbx)
               	movq	8(%rbp), %rax
               	movq	8(%rbx), %rdx
               	movq	%rdx, 8(%rbp)
               	movq	%rax, 8(%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	8(%rdi), %rsi
               	testq	%rcx, %rcx
               	jne	0x43f0e4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x24>
               	cmpq	%rdx, %rsi
               	jae	0x43f15b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x43f157 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x43f157 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	(%rdi), %rbp
               	movb	(%r13), %dl
               	movq	%rcx, %rbx
               	movl	$1, %r12d
               	leaq	31(%rsp), %r15
               	subq	%rbx, %r12
               	leaq	(%rbp,%rsi), %rcx
               	movb	%dl, 31(%rsp)
               	leaq	(%rbp,%rax), %rdi
               	subq	%rax, %rsi
               	movq	%rcx, 8(%rsp)
               	cmpq	%rbx, %rsi
               	jb	0x43f157 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r12, %rsi
               	movq	%r15, %rdx
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %r14
               	testq	%rax, %rax
               	je	0x43f157 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rax, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f149 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%r14, %rax
               	subq	%rbp, %rax
               	jmp	0x43f15b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%r14), %rdi
               	subq	%rdi, %rsi
               	jmp	0x43f117 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43f0c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43f0c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>:
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	subq	$24, %rsp
               	movb	%sil, 12(%rsp)
               	movq	8(%rdi), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x43f1cd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	movq	(%rdi), %rbp
               	movq	%rdx, %rax
               	leaq	12(%rsp), %rdx
               	subq	%rax, %rsi
               	leaq	(%rbp,%rax), %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43f1cd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const+0x3b>
               	subq	%rbp, %rax
               	movq	%rax, %rbx
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	cmpq	%rax, %rcx
               	ja	0x43f229 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x43f229 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x43f225 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x43f203 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43f1d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43f1d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43f28b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x43f28b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	(%rdi), %rdx
               	leaq	-1(%rax), %rcx
               	cmpb	%sil, (%rdx,%rax)
               	je	0x43f28b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x2f>
               	movq	%rcx, %rax
               	jmp	0x43f273 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const+0x17>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%r12, %r12
               	je	0x43f2c7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	cmpq	8(%rbp), %rbx
               	jae	0x43f2c7 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%rbp), %rdx
               	movq	%r12, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43f2cb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x43f2a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43f28c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43f28c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43f192 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43f354 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x43f354 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %rbp
               	cmpq	%rdx, %rax
               	movq	%rsi, %r12
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x43f358 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43f334 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x43f358 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43f308 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43f308 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x43f25c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::rfind(char, unsigned long) const>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	8(%rdi), %r12
               	movq	%rdx, %rbx
               	cmpq	%r12, %rbx
               	jae	0x43f3cf <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x39>
               	movq	(%rbp), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	addq	%rbx, %rdx
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43f3d3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3d>
               	incq	%rbx
               	jmp	0x43f3ae <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43f396 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43f396 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	movq	%rdx, %rax
               	cmpq	%rcx, %rax
               	jae	0x43f422 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1a>
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43f426 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x43f40f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_first_not_of(char, unsigned long) const+0x7>
               	orq	$-1, %rax
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	8(%rdi), %rax
               	testq	%rax, %rax
               	je	0x43f471 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	(%rdi), %r13
               	movq	%rcx, %r12
               	cmpq	%rdx, %rax
               	movq	%rsi, %rbp
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x43f471 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x43f453 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long) const>:
               	movq	8(%rsi), %rcx
               	movq	(%rsi), %rsi
               	jmp	0x43f428 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x43f428 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const>:
               	movq	8(%rdi), %rcx
               	orq	$-1, %rax
               	testq	%rcx, %rcx
               	je	0x43f4cd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	movq	(%rdi), %rdx
               	cmpb	%sil, (%rdx,%rax)
               	jne	0x43f4cd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x43f4be <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	8(%rdi), %rbx
               	movq	8(%rsi), %rbp
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	cmpq	%rbp, %rbx
               	movq	%rbp, %rdx
               	cmovbeq	%rbx, %rdx
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f501 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43e12c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	26664(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	(%r13), %rdi
               	movq	(%r14), %rsi
               	subq	%rbp, %rbx
               	cmpq	%r12, %rbx
               	cmovaq	%r12, %rbx
               	movq	8(%r14), %r12
               	movq	%rbx, %rdx
               	cmpq	%rbx, %r12
               	cmovbeq	%r12, %rdx
               	addq	%rbp, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f568 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43e12c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rcx, %r15
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	26547(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	leaq	26525(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	movq	%r15, %rdi
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbx
               	movq	8(%rsp), %r9
               	movq	(%r15), %rsi
               	movq	(%r14), %rdi
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	8(%r15), %rbp
               	subq	%r13, %rbp
               	movq	%rbx, %rdx
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f60b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long) const+0x99>
               	addq	$24, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43e12c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	%rdi, %r8
               	movq	8(%rdi), %rbp
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r8), %rdi
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbx, %rbp
               	movq	%rbx, %rdx
               	cmovbeq	%rbp, %rdx
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f65d <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x43e12c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r14
               	movq	%rdi, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	26311(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r14), %rbp
               	movq	%r12, %rdi
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	(%r14), %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rsi
               	notq	%rsi
               	leaq	-1(%rsi), %rbx
               	movq	%r12, %rsi
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r13, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f6d4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*) const+0x72>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x43e12c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	26202(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%r8, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	pushq	%r9
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r13), %rbx
               	movq	%r12, %rdx
               	movq	(%r13), %rdi
               	movq	%r14, %rsi
               	subq	%rbp, %rbx
               	cmpq	%r15, %rbx
               	cmovaq	%r15, %rbx
               	cmpq	%r12, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%rbp, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x43f746 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x68>
               	popq	%rcx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	jmp	0x43e12c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char>&&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbx), %rax
               	movb	$0, 16(%rbx)
               	movq	%rbx, %rdi
               	movq	%rax, (%rbx)
               	movq	$0, 8(%rbx)
               	movq	8(%r12), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbp
               	addq	%rbp, %rsi
               	callq	0x43e504 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43ee84 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43ee30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	$0, 8(%rdi)
               	movb	$0, 16(%rdi)
               	movq	8(%rdx), %rax
               	leaq	1(%rax), %rsi
               	callq	0x43e504 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x43e862 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x43ee30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43f876 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43e112 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, void>(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f83c <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %rax
               	movq	%rdx, %r12
               	pushq	%rbp
               	subq	%rsi, %rax
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43f8e4 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)+0x3a>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43e11f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43f8aa <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::forward_iterator_tag)>
               	nop

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43f94d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43f94d <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x27>
               	leaq	25618(%rip), %rdi       # 0x445d5a <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x441073 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43f979 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43e112 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char*, char*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	(%rsi), %rax
               	movq	8(%rsi), %rdx
               	movq	%rax, %rsi
               	addq	%rax, %rdx
               	jmp	0x43f926 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x43f9a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x43ee30 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f926 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)>

<void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>:
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	testq	%rsi, %rsi
               	jne	0x43fa1f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	testq	%rdx, %rdx
               	je	0x43fa1f <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x27>
               	leaq	25408(%rip), %rdi       # 0x445d5a <typeinfo name for kotlin::gc::GCSchedulerData+0x1c21>
               	callq	0x441073 <std::__throw_logic_error(char const*)>
               	movq	%r12, %rax
               	subq	%rbp, %rax
               	movq	%rax, 8(%rsp)
               	cmpq	$15, %rax
               	jbe	0x43fa4b <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)+0x53>
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x43dfa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)>
               	movq	%rax, (%rbx)
               	movq	8(%rsp), %rax
               	movq	%rax, 16(%rbx)
               	movq	(%rbx), %rdi
               	movq	%r12, %rdx
               	movq	%rbp, %rsi
               	callq	0x43e11f <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)>
               	movq	8(%rsp), %rax
               	movq	(%rbx), %rdx
               	movq	%rax, 8(%rbx)
               	movb	$0, (%rdx,%rax)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25346(%rip), %rdx       # 0x445d84 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c4b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*, void>(char const*, char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	leaq	16(%rdi), %rax
               	movq	%rdi, %r8
               	orq	$-1, %rdx
               	movq	%rax, (%rdi)
               	testq	%rsi, %rsi
               	je	0x43fb1c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x28>
               	xorl	%eax, %eax
               	movq	%rdx, %rcx
               	movq	%rsi, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%rsi,%rax), %rdx
               	movq	%r8, %rdi
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	25187(%rip), %rdx       # 0x445d93 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	leaq	16(%rdi), %rax
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r13, %rsi
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	movq	%rsi, %rdx
               	subq	%r13, %rdx
               	addq	8(%r12), %rdx
               	popq	%rcx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>:
               	leaq	16(%rdi), %rax
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	25109(%rip), %rdx       # 0x445d93 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rax, (%rdi)
               	movq	%r12, %rdi
               	movq	(%rsi), %rbx
               	movq	%r14, %rsi
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%r12), %rdx
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	subq	%r14, %rdx
               	popq	%r12
               	cmpq	%r13, %rdx
               	cmovaq	%r13, %rdx
               	popq	%r13
               	popq	%r14
               	addq	%rsi, %rdx
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>

<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	25052(%rip), %rdx       # 0x445dae <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x43e00a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43fb6e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<bool __gnu_cxx::operator==<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>:
               	testq	%rdi, %rdi
               	je	0x43fc23 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)+0xb>
               	movq	(%rdi), %rax
               	jmpq	*8(%rax)
               	retq

<execute_native_thread_routine>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	movq	%rbx, %rdi
               	callq	0x43fc18 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	popq	%rdx
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43fc18 <std::default_delete<std::thread::_State>::operator()(std::thread::_State*) const (.isra.12)>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::system_error::system_error(std::error_code, char const*)>:
               	pushq	%r15
               	movq	%rsi, %r15
               	pushq	%r14
               	movq	%rdx, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$104, %rsp
               	movq	(%rdx), %rax
               	movl	%esi, %edx
               	movq	%r14, %rsi
               	leaq	64(%rsp), %rbp
               	movq	%rbp, %rdi
               	callq	*32(%rax)
               	leaq	24893(%rip), %rdx       # 0x445dc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8a>
               	xorl	%esi, %esi
               	movq	%rbp, %rdi
               	callq	0x43ecb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	leaq	32(%rsp), %r12
               	movq	%rax, %rsi
               	movq	%r12, %rdi
               	callq	0x43e316 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rdx
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	callq	0x43ecb2 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::insert(unsigned long, char const*)>
               	movq	%rsp, %r13
               	movq	%rax, %rsi
               	movq	%r13, %rdi
               	callq	0x43e316 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%r13, %rsi
               	movq	%rbx, %rdi
               	callq	0x43deb4 <std::runtime_error::runtime_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%r13, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%r12, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbp, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	leaq	138331(%rip), %rax      # 0x461940 <vtable for std::system_error>
               	movq	%r15, 16(%rbx)
               	movq	%r14, 24(%rbx)
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	addq	$104, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	movq	%rax, %rbx
               	movq	%r13, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43fd13 <std::system_error::system_error(std::error_code, char const*)+0xc1>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	jmp	0x43fd20 <std::system_error::system_error(std::error_code, char const*)+0xce>
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::thread::_State::~_State()>:
               	retq
               	nop

<std::thread::_State::~_State()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43fd30 <std::thread::_State::~_State()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::thread::join()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43fd5d <std::thread::join()+0x19>
               	xorl	%esi, %esi
               	callq	0x413ba0 <pthread_join@plt>
               	testl	%eax, %eax
               	je	0x43fd69 <std::thread::join()+0x25>
               	jmp	0x43fd62 <std::thread::join()+0x1e>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::detach()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x43fd89 <std::thread::detach()+0x17>
               	callq	0x413a30 <pthread_detach@plt>
               	testl	%eax, %eax
               	je	0x43fd95 <std::thread::detach()+0x23>
               	jmp	0x43fd8e <std::thread::detach()+0x1c>
               	movl	$22, %eax
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq

<std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>:
               	pushq	%rbx
               	movq	(%rsi), %rcx
               	movq	%rsi, %rbx
               	leaq	-392(%rip), %rdx        # 0x43fc24 <execute_native_thread_routine>
               	xorl	%esi, %esi
               	callq	0x413bb0 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43fdbe <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())+0x20>
               	movl	%eax, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	movq	$0, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::thread::hardware_concurrency()>:
               	pushq	%rax
               	callq	0x413bc0 <get_nprocs@plt>
               	movl	$0, %edx
               	testl	%eax, %eax
               	cmovsl	%edx, %eax
               	popq	%rdx
               	retq

<std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rdi, (%rsp)
               	movq	%rsp, %rbx
               	movq	%rsi, 8(%rsp)
               	movq	%rbx, %rsi
               	movq	%rbx, %rdi
               	callq	0x413bd0 <nanosleep@plt>
               	incl	%eax
               	jne	0x43fe04 <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x2a>
               	callq	0x413880 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x43fdeb <std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)+0x11>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	movq	(%rdi), %rbx
               	testq	%rbx, %rbx
               	je	0x43fe6c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	139676(%rip), %rbp      # 0x461fb8 <write+0x461fb8>
               	testq	%rbp, %rbp
               	je	0x43fe2b <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x21>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 8(%rbx)
               	jmp	0x43fe34 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x2a>
               	movl	8(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 8(%rbx)
               	decl	%eax
               	jne	0x43fe6c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	callq	*16(%rax)
               	testq	%rbp, %rbp
               	je	0x43fe50 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x46>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 12(%rbx)
               	jmp	0x43fe59 <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x4f>
               	movl	12(%rbx), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 12(%rbx)
               	decl	%eax
               	jne	0x43fe6c <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()+0x62>
               	movq	(%rbx), %rax
               	movq	%rbx, %rdi
               	movq	24(%rax), %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	jmpq	*%rax
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

<execute_native_thread_routine_compat>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	8(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rsp, %rbx
               	movq	%rax, (%rsp)
               	movq	16(%rdi), %rax
               	movq	$0, 16(%rdi)
               	movq	%rax, 8(%rsp)
               	movq	(%rdi), %rax
               	callq	*16(%rax)
               	leaq	8(%rbx), %rdi
               	callq	0x43fe0a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	xorl	%eax, %eax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43fe0a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rbx
               	movq	8(%rsi), %rdx
               	movq	$0, (%rsi)
               	movq	$0, 8(%rsi)
               	leaq	8(%rsp), %r12
               	movq	8(%rbx), %rax
               	movq	%rbx, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	%rdx, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43fe0a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	xorl	%esi, %esi
               	movq	%rbx, %rcx
               	movq	%rbp, %rdi
               	leaq	-172(%rip), %rdx        # 0x43fe70 <execute_native_thread_routine_compat>
               	callq	0x413bb0 <pthread_create@plt>
               	testl	%eax, %eax
               	je	0x43ff57 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())+0x91>
               	movl	%eax, %ebp
               	movq	8(%rbx), %rax
               	movq	$0, 8(%rbx)
               	movq	%r12, %rdi
               	movq	%rax, (%rsp)
               	movq	16(%rbx), %rax
               	movq	$0, 16(%rbx)
               	movq	%rax, 8(%rsp)
               	callq	0x43fe0a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movl	%ebp, %edi
               	callq	0x43daaa <std::__throw_system_error(int)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)>:
               	pushq	%rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	cmpq	$0, 139338(%rip)        # 0x461fb8 <write+0x461fb8>
               	jne	0x43ffaf <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0x4f>
               	movl	$32, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rax, %rbx
               	callq	0x43da14 <std::_V2::generic_category()>
               	leaq	24125(%rip), %rcx       # 0x445dc6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c8d>
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x43fc52 <std::system_error::system_error(std::error_code, char const*)>
               	leaq	-9886(%rip), %rdx       # 0x43d902 <std::system_error::~system_error()>
               	leaq	137313(%rip), %rsi      # 0x461808 <typeinfo for std::system_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	(%rsi), %rax
               	movq	$0, (%rsi)
               	movq	%rsp, %rbx
               	xorl	%edx, %edx
               	movq	%rax, (%rsp)
               	movq	8(%rsi), %rax
               	movq	$0, 8(%rsi)
               	movq	%rbx, %rsi
               	movq	%rax, 8(%rsp)
               	callq	0x43fec6 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())>
               	leaq	8(%rbx), %rdi
               	callq	0x43fe0a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	jmp	0x440004 <std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>)+0xa4>
               	movq	%rax, %rbp
               	leaq	8(%rbx), %rdi
               	callq	0x43fe0a <std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::type_info::~type_info()>:
               	retq
               	nop

<std::type_info::__is_function_p() const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
               	xorl	%eax, %eax
               	retq
               	nop

<std::type_info::~type_info()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44000c <std::type_info::~type_info()>
               	movq	%rbx, %rdi
               	movl	$16, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
               	movq	8(%rdi), %rdi
               	movq	8(%rsi), %rsi
               	movb	$1, %al
               	cmpq	%rsi, %rdi
               	je	0x440051 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	xorl	%eax, %eax
               	cmpb	$42, (%rdi)
               	je	0x440051 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x23>
               	pushq	%rax
               	callq	0x413ae0 <strcmp@plt>
               	popq	%rdx
               	testl	%eax, %eax
               	sete	%al
               	retq
               	retq

<__cxa_current_exception_type>:
               	pushq	%rcx
               	callq	0x43cf98 <__cxa_get_globals>
               	movq	(%rax), %rax
               	testq	%rax, %rax
               	je	0x440070 <__cxa_current_exception_type+0x1e>
               	movq	(%rax), %rdx
               	testb	$1, 80(%rax)
               	je	0x44006d <__cxa_current_exception_type+0x1b>
               	leaq	-112(%rdx), %rax
               	movq	(%rax), %rax
               	popq	%rdx
               	retq

<__cxa_pure_virtual>:
               	pushq	%rax
               	movl	$27, %edx
               	movl	$2, %edi
               	leaq	23915(%rip), %rsi       # 0x445def <typeinfo name for kotlin::gc::GCSchedulerData+0x1cb6>
               	callq	0x413940 <write@plt>
               	callq	0x43cf13 <std::terminate()>

<__cxa_deleted_virtual>:
               	pushq	%rax
               	movl	$30, %edx
               	movl	$2, %edi
               	leaq	23915(%rip), %rsi       # 0x445e0b <typeinfo name for kotlin::gc::GCSchedulerData+0x1cd2>
               	callq	0x413940 <write@plt>
               	callq	0x43cf13 <std::terminate()>

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	leaq	137623(%rip), %rax      # 0x461a48 <vtable for __gnu_cxx::recursive_init_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<__gnu_cxx::recursive_init_error::~recursive_init_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4400aa <__gnu_cxx::recursive_init_error::~recursive_init_error()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<std::logic_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::runtime_error::what() const>:
               	movq	8(%rdi), %rax
               	retq
               	nop

<std::logic_error::~logic_error()>:
               	leaq	137823(%rip), %rax      # 0x461b48 <vtable for std::logic_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::domain_error::~domain_error()>:
               	leaq	137825(%rip), %rax      # 0x461b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x4400e2 <std::logic_error::~logic_error()>
               	nop

<std::invalid_argument::~invalid_argument()>:
               	leaq	137845(%rip), %rax      # 0x461b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x4400e2 <std::logic_error::~logic_error()>
               	nop

<std::length_error::~length_error()>:
               	leaq	137865(%rip), %rax      # 0x461bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x4400e2 <std::logic_error::~logic_error()>
               	nop

<std::out_of_range::~out_of_range()>:
               	leaq	137885(%rip), %rax      # 0x461be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x4400e2 <std::logic_error::~logic_error()>
               	nop

<std::runtime_error::~runtime_error()>:
               	leaq	137905(%rip), %rax      # 0x461c10 <vtable for std::runtime_error>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::range_error::~range_error()>:
               	leaq	137907(%rip), %rax      # 0x461c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x440158 <std::runtime_error::~runtime_error()>
               	nop

<std::overflow_error::~overflow_error()>:
               	leaq	137927(%rip), %rax      # 0x461c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x440158 <std::runtime_error::~runtime_error()>
               	nop

<std::underflow_error::~underflow_error()>:
               	leaq	137947(%rip), %rax      # 0x461c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x440158 <std::runtime_error::~runtime_error()>
               	nop

<std::logic_error::~logic_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4400e2 <std::logic_error::~logic_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::domain_error::~domain_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440108 <std::domain_error::~domain_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::invalid_argument::~invalid_argument()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44011c <std::invalid_argument::~invalid_argument()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::length_error::~length_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440130 <std::length_error::~length_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::out_of_range::~out_of_range()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440144 <std::out_of_range::~out_of_range()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::runtime_error::~runtime_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440158 <std::runtime_error::~runtime_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::range_error::~range_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44017e <std::range_error::~range_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::overflow_error::~overflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440192 <std::overflow_error::~overflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::underflow_error::~underflow_error()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4401a6 <std::underflow_error::~underflow_error()>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x43c235 <operator delete(void*)>

<std::logic_error::logic_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	137435(%rip), %rax      # 0x461b48 <vtable for std::logic_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::domain_error::domain_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44025c <std::logic_error::logic_error(std::string const&)>
               	leaq	137422(%rip), %rax      # 0x461b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44025c <std::logic_error::logic_error(std::string const&)>
               	leaq	137436(%rip), %rax      # 0x461b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44025c <std::logic_error::logic_error(std::string const&)>
               	leaq	137450(%rip), %rax      # 0x461bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44025c <std::logic_error::logic_error(std::string const&)>
               	leaq	137464(%rip), %rax      # 0x461be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(std::string const&)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	pushq	%rdx
               	leaq	137477(%rip), %rax      # 0x461c10 <vtable for std::runtime_error>
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::range_error::range_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4402fa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	137464(%rip), %rax      # 0x461c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4402fa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	137478(%rip), %rax      # 0x461c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4402fa <std::runtime_error::runtime_error(std::string const&)>
               	leaq	137492(%rip), %rax      # 0x461c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<_txnal_cow_string_D1_commit(void*)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rsi
               	callq	0x4420d0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::logic_error::logic_error(std::logic_error const&)>:
               	leaq	137137(%rip), %rax      # 0x461b48 <vtable for std::logic_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::logic_error::operator=(std::logic_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x442d3e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::runtime_error::runtime_error(std::runtime_error const&)>:
               	leaq	137287(%rip), %rax      # 0x461c10 <vtable for std::runtime_error>
               	addq	$8, %rsi
               	addq	$8, %rdi
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	jmp	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>

<std::runtime_error::operator=(std::runtime_error const&)>:
               	pushq	%rbx
               	addq	$8, %rsi
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	callq	0x442d3e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::logic_error::logic_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	137024(%rip), %rax      # 0x461b48 <vtable for std::logic_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4430f4 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::domain_error::domain_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	leaq	137004(%rip), %rax      # 0x461b70 <vtable for std::domain_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::invalid_argument::invalid_argument(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	leaq	137018(%rip), %rax      # 0x461b98 <vtable for std::invalid_argument>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::length_error::length_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	leaq	137032(%rip), %rax      # 0x461bc0 <vtable for std::length_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::out_of_range::out_of_range(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	leaq	137046(%rip), %rax      # 0x461be8 <vtable for std::out_of_range>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::runtime_error::runtime_error(char const*)>:
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	leaq	8(%rdi), %rdi
               	subq	$24, %rsp
               	leaq	137056(%rip), %rax      # 0x461c10 <vtable for std::runtime_error>
               	leaq	15(%rsp), %rdx
               	addq	$16, %rax
               	movq	%rax, -8(%rdi)
               	callq	0x4430f4 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c760 <std::exception::~exception()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::range_error::range_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44049c <std::runtime_error::runtime_error(char const*)>
               	leaq	137036(%rip), %rax      # 0x461c38 <vtable for std::range_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::overflow_error::overflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44049c <std::runtime_error::runtime_error(char const*)>
               	leaq	137050(%rip), %rax      # 0x461c60 <vtable for std::overflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::underflow_error::underflow_error(char const*)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44049c <std::runtime_error::runtime_error(char const*)>
               	leaq	137064(%rip), %rax      # 0x461c88 <vtable for std::underflow_error>
               	addq	$16, %rax
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::__sso_string::__sso_string(std::string const&)>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rdx
               	jmp	0x44141a <std::__sso_string::__sso_string(char const*, unsigned long)>

<std::__cow_string::__cow_string()>:
               	leaq	249891(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::__cow_string::__cow_string(std::string const&)>:
               	jmp	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::__cow_string(char const*, unsigned long)>:
               	subq	$24, %rsp
               	leaq	15(%rsp), %rcx
               	callq	0x44313e <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq
               	nop

<std::__cow_string::__cow_string(std::__cow_string const&)>:
               	jmp	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	nop

<std::__cow_string::operator=(std::__cow_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x442d3e <std::string::operator=(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__cow_string::~__cow_string()>:
               	jmp	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	nop

<std::__cow_string::__cow_string(std::__cow_string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	249817(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::__cow_string::operator=(std::__cow_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441f24 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::_V2::error_category::_M_message(int) const>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rsi), %rax
               	leaq	8(%rsp), %rbx
               	movq	%rbx, %rdi
               	callq	*24(%rax)
               	movq	8(%rsp), %rsi
               	movq	%rbp, %rdi
               	movq	-24(%rsi), %rdx
               	callq	0x44141a <std::__sso_string::__sso_string(char const*, unsigned long)>
               	movq	%rbx, %rdi
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movl	$1, %ebp
               	pushq	%rbx
               	leaq	-1(%rsi), %rbx
               	pushq	%rdx
               	leaq	(%rbx,%rbp), %rdi
               	callq	0x413be0 <_ITM_RU1@plt>
               	testb	%al, %al
               	je	0x440613 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x28>
               	incq	%rbp
               	jmp	0x440601 <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)+0x16>
               	leaq	24(%rbp), %rdi
               	callq	0x413bf0 <_ZGTtnam@plt>
               	leaq	-1(%rbp), %rdx
               	movl	$0, 16(%rax)
               	leaq	24(%rax), %rbx
               	movq	%r12, %rsi
               	movq	%rdx, 8(%rax)
               	movq	%rbx, %rdi
               	movq	%rdx, (%rax)
               	movq	%rbp, %rdx
               	callq	0x413c00 <_ITM_memcpyRtWn@plt>
               	movq	%rbx, (%r13)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	callq	0x43cd64 <__cxa_rethrow>
               	movq	%rax, %rbx
               	callq	0x43cc25 <__cxa_end_catch>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_txnal_cow_string_c_str(void const*)>:
               	jmp	0x413c10 <_ITM_RU8@plt>

<_txnal_sso_string_c_str(void const*)>:
               	jmp	0x413c10 <_ITM_RU8@plt>

<_txnal_cow_string_D1(void*)>:
               	pushq	%rax
               	callq	0x440669 <_txnal_cow_string_c_str(void const*)>
               	leaq	-771(%rip), %rdi        # 0x44037d <_txnal_cow_string_D1_commit(void*)>
               	movl	$1, %esi
               	popq	%rcx
               	leaq	-24(%rax), %rdx
               	jmp	0x413c20 <_ITM_addUserCommitAction@plt>

<_txnal_logic_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_txnal_runtime_error_get_msg(void*)>:
               	leaq	8(%rdi), %rax
               	retq

<_ZGTtNSt11logic_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21414(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x4400e2 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4400e2 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21308(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x4400e2 <std::logic_error::~logic_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4400e2 <std::logic_error::~logic_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11logic_errorD2Ev>:
               	pushq	%rax
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11logic_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440778 <_ZGTtNSt11logic_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNKSt11logic_error4whatEv>:
               	pushq	%rax
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440669 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt12domain_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21143(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440434 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440108 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440108 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	21037(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440434 <std::domain_error::domain_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440108 <std::domain_error::~domain_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440108 <std::domain_error::~domain_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12domain_errorD2Ev>:
               	pushq	%rax
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12domain_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440887 <_ZGTtNSt12domain_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt16invalid_argumentC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20887(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x44044e <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x44011c <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x44011c <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20781(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x44044e <std::invalid_argument::invalid_argument(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x44011c <std::invalid_argument::~invalid_argument()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x44011c <std::invalid_argument::~invalid_argument()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt16invalid_argumentD2Ev>:
               	pushq	%rax
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt16invalid_argumentD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440987 <_ZGTtNSt16invalid_argumentD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt12length_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20631(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440468 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440130 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440130 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20525(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440468 <std::length_error::length_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440130 <std::length_error::~length_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440130 <std::length_error::~length_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12length_errorD2Ev>:
               	pushq	%rax
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12length_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440a87 <_ZGTtNSt12length_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt12out_of_rangeC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20375(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440482 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440144 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440144 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20269(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440482 <std::out_of_range::out_of_range(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440144 <std::out_of_range::~out_of_range()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440144 <std::out_of_range::~out_of_range()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt12out_of_rangeD2Ev>:
               	pushq	%rax
               	callq	0x44068f <_txnal_logic_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt12out_of_rangeD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440b87 <_ZGTtNSt12out_of_rangeD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt13runtime_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20119(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x44049c <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440158 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440158 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	20013(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x44049c <std::runtime_error::runtime_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440158 <std::runtime_error::~runtime_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440158 <std::runtime_error::~runtime_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt13runtime_errorD2Ev>:
               	pushq	%rax
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt13runtime_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440c87 <_ZGTtNSt13runtime_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNKSt13runtime_error4whatEv>:
               	pushq	%rax
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440669 <_txnal_cow_string_c_str(void const*)>

<_ZGTtNSt11range_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19848(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x4404dc <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x44017e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x44017e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19742(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x4404dc <std::range_error::range_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x44017e <std::range_error::~range_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x44017e <std::range_error::~range_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt11range_errorD2Ev>:
               	pushq	%rax
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt11range_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440d96 <_ZGTtNSt11range_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt14overflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19592(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x4404f6 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440192 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440192 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19486(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x4404f6 <std::overflow_error::overflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x440192 <std::overflow_error::~overflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x440192 <std::overflow_error::~overflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt14overflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt14overflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440e96 <_ZGTtNSt14overflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<_ZGTtNSt15underflow_errorC2EPKc>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19336(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440510 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%rbp, %rdi
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x4401a6 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4401a6 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	19230(%rip), %rsi       # 0x445a4b <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	%rsp, %rbx
               	movq	%rbx, %rdi
               	callq	0x440510 <std::underflow_error::underflow_error(char const*)>
               	movl	$16, %edx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x413c30 <_ITM_memcpyRnWt@plt>
               	movq	%r12, %rdi
               	callq	0x44066e <_txnal_sso_string_c_str(void const*)>
               	movq	%rbp, %rdi
               	movq	%rax, %r12
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x4405eb <_txnal_cow_string_C1_for_exceptions(void*, char const*, void*)>
               	movq	%rbx, %rdi
               	callq	0x4401a6 <std::underflow_error::~underflow_error()>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x4401a6 <std::underflow_error::~underflow_error()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<_ZGTtNSt15underflow_errorD2Ev>:
               	pushq	%rax
               	callq	0x440694 <_txnal_runtime_error_get_msg(void*)>
               	popq	%rdx
               	movq	%rax, %rdi
               	jmp	0x440673 <_txnal_cow_string_D1(void*)>

<_ZGTtNSt15underflow_errorD0Ev>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x440f96 <_ZGTtNSt15underflow_errorD2Ev>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x413c40 <_ZGTtdlPv@plt>

<std::__throw_bad_exception()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	132871(%rip), %rdx      # 0x4616d0 <vtable for std::bad_exception>
               	leaq	132768(%rip), %rsi      # 0x461670 <typeinfo for std::bad_exception>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-18559(%rip), %rdx      # 0x43c762 <std::bad_exception::~bad_exception()>
               	callq	0x43cd15 <__cxa_throw>

<std::__throw_bad_alloc()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	133080(%rip), %rdx      # 0x4617d0 <vtable for std::bad_alloc>
               	leaq	133049(%rip), %rsi      # 0x4617b8 <typeinfo for std::bad_alloc>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	-16568(%rip), %rdx      # 0x43cf58 <std::bad_alloc::~bad_alloc()>
               	callq	0x43cd15 <__cxa_throw>

<std::__throw_bad_cast()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	134305(%rip), %rdx      # 0x461cc8 <vtable for std::bad_cast>
               	leaq	134274(%rip), %rsi      # 0x461cb0 <typeinfo for std::bad_cast>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9363(%rip), %rdx        # 0x4434d2 <std::bad_cast::~bad_cast()>
               	callq	0x43cd15 <__cxa_throw>

<std::__throw_bad_typeid()>:
               	pushq	%rax
               	movl	$8, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	leaq	134322(%rip), %rdx      # 0x461d08 <vtable for std::bad_typeid>
               	leaq	134291(%rip), %rsi      # 0x461cf0 <typeinfo for std::bad_typeid>
               	movq	%rax, %rdi
               	addq	$16, %rdx
               	movq	%rdx, (%rax)
               	leaq	9368(%rip), %rdx        # 0x443506 <std::bad_typeid::~bad_typeid()>
               	callq	0x43cd15 <__cxa_throw>

<std::__throw_logic_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x4403f4 <std::logic_error::logic_error(char const*)>
               	leaq	-4022(%rip), %rdx       # 0x4400e2 <std::logic_error::~logic_error()>
               	leaq	133585(%rip), %rsi      # 0x461a70 <typeinfo for std::logic_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_domain_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x440434 <std::domain_error::domain_error(char const*)>
               	leaq	-4055(%rip), %rdx       # 0x440108 <std::domain_error::~domain_error()>
               	leaq	133538(%rip), %rsi      # 0x461a88 <typeinfo for std::domain_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_invalid_argument(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x44044e <std::invalid_argument::invalid_argument(char const*)>
               	leaq	-4106(%rip), %rdx       # 0x44011c <std::invalid_argument::~invalid_argument()>
               	leaq	133491(%rip), %rsi      # 0x461aa0 <typeinfo for std::invalid_argument>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_length_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x440468 <std::length_error::length_error(char const*)>
               	leaq	-4157(%rip), %rdx       # 0x440130 <std::length_error::~length_error()>
               	leaq	133444(%rip), %rsi      # 0x461ab8 <typeinfo for std::length_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_out_of_range(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x440482 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4208(%rip), %rdx       # 0x440144 <std::out_of_range::~out_of_range()>
               	leaq	133397(%rip), %rsi      # 0x461ad0 <typeinfo for std::out_of_range>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_out_of_range_fmt(char const*, ...)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rsp, %rbp
               	pushq	%r12
               	pushq	%rbx
               	subq	$208, %rsp
               	movq	%rsi, -184(%rbp)
               	movq	%rdx, -176(%rbp)
               	movq	%rcx, -168(%rbp)
               	movq	%r8, -160(%rbp)
               	movq	%r9, -152(%rbp)
               	testb	%al, %al
               	je	0x441231 <std::__throw_out_of_range_fmt(char const*, ...)+0x5b>
               	movaps	%xmm0, -144(%rbp)
               	movaps	%xmm1, -128(%rbp)
               	movaps	%xmm2, -112(%rbp)
               	movaps	%xmm3, -96(%rbp)
               	movaps	%xmm4, -80(%rbp)
               	movaps	%xmm5, -64(%rbp)
               	movaps	%xmm6, -48(%rbp)
               	movaps	%xmm7, -32(%rbp)
               	movq	%r10, %rdi
               	xorl	%eax, %eax
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	16(%rbp), %rax
               	movl	$8, -216(%rbp)
               	movq	%rax, -208(%rbp)
               	leaq	-192(%rbp), %rax
               	movl	$48, -212(%rbp)
               	movq	%rax, -200(%rbp)
               	movq	%rcx, %rdx
               	notq	%rdx
               	movq	%rdx, %rcx
               	leaq	511(%rdx), %rsi
               	movq	%r10, %rdx
               	addq	$534, %rcx              # imm = 0x216
               	andq	$-16, %rcx
               	subq	%rcx, %rsp
               	leaq	-216(%rbp), %rcx
               	leaq	15(%rsp), %rbx
               	andq	$-16, %rbx
               	movq	%rbx, %rdi
               	callq	0x441526 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>
               	movl	$16, %edi
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbx, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %r12
               	callq	0x440482 <std::out_of_range::out_of_range(char const*)>
               	leaq	-4477(%rip), %rdx       # 0x440144 <std::out_of_range::~out_of_range()>
               	leaq	133128(%rip), %rsi      # 0x461ad0 <typeinfo for std::out_of_range>
               	movq	%r12, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbx
               	movq	%r12, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_runtime_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x44049c <std::runtime_error::runtime_error(char const*)>
               	leaq	-4528(%rip), %rdx       # 0x440158 <std::runtime_error::~runtime_error()>
               	leaq	133081(%rip), %rsi      # 0x461ae8 <typeinfo for std::runtime_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_range_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x4404dc <std::range_error::range_error(char const*)>
               	leaq	-4561(%rip), %rdx       # 0x44017e <std::range_error::~range_error()>
               	leaq	133034(%rip), %rsi      # 0x461b00 <typeinfo for std::range_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_overflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x4404f6 <std::overflow_error::overflow_error(char const*)>
               	leaq	-4612(%rip), %rdx       # 0x440192 <std::overflow_error::~overflow_error()>
               	leaq	132987(%rip), %rsi      # 0x461b18 <typeinfo for std::overflow_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::__throw_underflow_error(char const*)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$16, %edi
               	pushq	%rbx
               	pushq	%rax
               	callq	0x43c69b <__cxa_allocate_exception>
               	movq	%rbp, %rsi
               	movq	%rax, %rdi
               	movq	%rax, %rbx
               	callq	0x440510 <std::underflow_error::underflow_error(char const*)>
               	leaq	-4663(%rip), %rdx       # 0x4401a6 <std::underflow_error::~underflow_error()>
               	leaq	132940(%rip), %rsi      # 0x461b30 <typeinfo for std::underflow_error>
               	movq	%rbx, %rdi
               	callq	0x43cd15 <__cxa_throw>
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x43c6dd <__cxa_free_exception>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	nop

<std::__sso_string::__sso_string()>:
               	leaq	16(%rdi), %rax
               	movq	$0, 8(%rdi)
               	movq	%rax, (%rdi)
               	movb	$0, 16(%rdi)
               	retq

<std::__sso_string::__sso_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	jmp	0x43f9a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::__sso_string(char const*, unsigned long)>:
               	leaq	16(%rdi), %rax
               	addq	%rsi, %rdx
               	movq	%rax, (%rdi)
               	jmp	0x43f9f8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)>
               	nop

<std::__sso_string::__sso_string(std::__sso_string const&)>:
               	jmp	0x43f9a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	nop

<std::__sso_string::operator=(std::__sso_string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e14c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::__sso_string::~__sso_string()>:
               	jmp	0x43dfe4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()>
               	nop

<std::__sso_string::__sso_string(std::__sso_string&&)>:
               	jmp	0x43e316 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	nop

<std::__sso_string::operator=(std::__sso_string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x43e3e8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<__gnu_cxx::__throw_insufficient_space(char const*, char const*)>:
               	pushq	%rbp
               	movq	%rdi, %r8
               	movq	%rsi, %rdx
               	movl	$105, %ecx
               	subq	%r8, %rdx
               	leaq	18876(%rip), %rsi       # 0x445e2a <typeinfo name for kotlin::gc::GCSchedulerData+0x1cf1>
               	leaq	128(%rdx), %rax
               	movq	%rsp, %rbp
               	andq	$-16, %rax
               	subq	$112, %rsp
               	subq	%rax, %rsp
               	leaq	-105(%rbp), %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	leaq	15(%rsp), %rax
               	leaq	-105(%rbp), %rsi
               	movl	$26, %ecx
               	andq	$-16, %rax
               	leaq	104(%rax), %r9
               	movq	%rax, %rdi
               	rep		movsl	(%rsi), %es:(%rdi)
               	movq	%r9, %rdi
               	movq	%r8, %rsi
               	movq	%rdx, %rcx
               	rep		movsb	(%rsi), %es:(%rdi)
               	movb	$0, 104(%rax,%rdx)
               	movq	%rax, %rdi
               	callq	0x441073 <std::__throw_logic_error(char const*)>

<__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %r10
               	movq	%rdx, %r9
               	movl	$10, %r11d
               	movq	%rsp, %rbp
               	pushq	%rbx
               	leaq	18879(%rip), %rbx       # 0x445e93 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d5a>
               	subq	$40, %rsp
               	leaq	15(%rsp), %rdi
               	andq	$-16, %rdi
               	leaq	24(%rdi), %rcx
               	movq	%rcx, %r8
               	movq	%r9, %rax
               	xorl	%edx, %edx
               	decq	%r8
               	divq	%r11
               	movb	(%rbx,%rdx), %dl
               	movb	%dl, (%r8)
               	cmpq	$9, %r9
               	jbe	0x441504 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x48>
               	movq	%rax, %r9
               	jmp	0x4414e8 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x2c>
               	subq	%r8, %rcx
               	orl	$-1, %eax
               	movq	%rcx, %rdx
               	cmpq	%rsi, %rcx
               	ja	0x441520 <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)+0x64>
               	subq	%rcx, %rdi
               	movl	%edx, %eax
               	leaq	24(%rdi), %rsi
               	movq	%r10, %rdi
               	rep		movsb	(%rsi), %es:(%rdi)
               	movq	-8(%rbp), %rbx
               	leave
               	retq

<__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)>:
               	pushq	%r14
               	leaq	-1(%rdi,%rsi), %r14
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movb	(%rbp), %al
               	testb	%al, %al
               	je	0x44162b <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x105>
               	cmpq	%r14, %rbx
               	jae	0x441617 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cmpb	$37, %al
               	jne	0x441606 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movb	1(%rbp), %al
               	cmpb	$115, %al
               	je	0x441576 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x50>
               	cmpb	$122, %al
               	je	0x4415b6 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x90>
               	cmpb	$37, %al
               	jne	0x441606 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	incq	%rbp
               	jmp	0x441606 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x44158f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x69>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x44159d <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x77>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	(%rax), %rax
               	movb	(%rax), %dl
               	testb	%dl, %dl
               	je	0x441622 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xfc>
               	cmpq	%r14, %rbx
               	je	0x441617 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	incq	%rbx
               	incq	%rax
               	movb	%dl, -1(%rbx)
               	jmp	0x4415a0 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x7a>
               	cmpb	$117, 2(%rbp)
               	jne	0x441606 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xe0>
               	movl	(%r12), %edx
               	cmpl	$47, %edx
               	ja	0x4415d5 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xaf>
               	movl	%edx, %eax
               	addl	$8, %edx
               	addq	16(%r12), %rax
               	movl	%edx, (%r12)
               	jmp	0x4415e3 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xbd>
               	movq	8(%r12), %rax
               	leaq	8(%rax), %rdx
               	movq	%rdx, 8(%r12)
               	movq	%r14, %rsi
               	movq	(%rax), %rdx
               	movq	%rbx, %rdi
               	subq	%rbx, %rsi
               	callq	0x4414bc <__gnu_cxx::__concat_size_t(char*, unsigned long, unsigned long)>
               	testl	%eax, %eax
               	jle	0x441617 <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0xf1>
               	cltq
               	addq	$3, %rbp
               	addq	%rax, %rbx
               	jmp	0x44153f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movb	(%rbp), %al
               	incq	%rbx
               	incq	%rbp
               	movb	%al, -1(%rbx)
               	jmp	0x44153f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x441458 <__gnu_cxx::__throw_insufficient_space(char const*, char const*)>
               	addq	$2, %rbp
               	jmp	0x44153f <__gnu_cxx::__snprintf_lite(char*, unsigned long, char const*, __va_list_tag*)+0x19>
               	movq	%rbx, %rax
               	movb	$0, (%rbx)
               	popq	%rbx
               	subq	%r13, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_M_data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_data(char*)>:
               	movq	%rsi, %rax
               	movq	%rsi, (%rdi)
               	retq
               	nop

<std::string::_M_rep() const>:
               	movq	(%rdi), %rax
               	subq	$24, %rax
               	retq

<std::string::_M_ibegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::_M_iend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::_M_check(unsigned long, char const*) const>:
               	movq	(%rdi), %rcx
               	movq	%rsi, %rax
               	movq	-24(%rcx), %rcx
               	cmpq	%rsi, %rcx
               	jae	0x441682 <std::string::_M_check(unsigned long, char const*) const+0x24>
               	pushq	%rsi
               	leaq	17826(%rip), %rdi       # 0x445c17 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ade>
               	movq	%rdx, %rsi
               	movq	%rax, %rdx
               	xorl	%eax, %eax
               	callq	0x4411d6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	retq
               	nop

<std::string::_M_check_length(unsigned long, unsigned long, char const*) const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	addq	%rax, %rsi
               	movq	(%rdi), %rax
               	subq	-24(%rax), %rsi
               	cmpq	%rdx, %rsi
               	jae	0x4416a6 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const+0x22>
               	pushq	%rax
               	movq	%rcx, %rdi
               	callq	0x441148 <std::__throw_length_error(char const*)>
               	retq
               	nop

<std::string::_M_limit(unsigned long, unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	retq

<std::string::_M_disjunct(char const*) const>:
               	movq	(%rdi), %rdx
               	movb	$1, %al
               	cmpq	%rsi, %rdx
               	ja	0x4416ce <std::string::_M_disjunct(char const*) const+0x14>
               	addq	-24(%rdx), %rdx
               	cmpq	%rdx, %rsi
               	seta	%al
               	retq

<std::string::_M_copy(char*, char const*, unsigned long)>:
               	movq	%rdx, %rcx
               	cmpq	$1, %rdx
               	jne	0x4416dd <std::string::_M_copy(char*, char const*, unsigned long)+0xe>
               	movb	(%rsi), %dl
               	movb	%dl, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x4416e4 <std::string::_M_copy(char*, char const*, unsigned long)+0x15>
               	rep		movsb	(%rsi), %es:(%rdi)
               	retq

<std::string::_M_move(char*, char const*, unsigned long)>:
               	cmpq	$1, %rdx
               	jne	0x4416f0 <std::string::_M_move(char*, char const*, unsigned long)+0xb>
               	movb	(%rsi), %al
               	movb	%al, (%rdi)
               	retq
               	testq	%rdx, %rdx
               	je	0x4416fa <std::string::_M_move(char*, char const*, unsigned long)+0x15>
               	jmp	0x4136f0 <memmove@plt>
               	retq

<std::string::_M_assign(char*, unsigned long, char)>:
               	movq	%rsi, %rcx
               	cmpq	$1, %rsi
               	jne	0x441707 <std::string::_M_assign(char*, unsigned long, char)+0xc>
               	movb	%dl, (%rdi)
               	retq
               	testq	%rsi, %rsi
               	je	0x441710 <std::string::_M_assign(char*, unsigned long, char)+0x15>
               	movl	%edx, %eax
               	rep		stosb	%al, %es:(%rdi)
               	retq

<std::string::_S_copy_chars(char*, char*, char*)>:
               	subq	%rsi, %rdx
               	jmp	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	jmp	0x441711 <std::string::_S_copy_chars(char*, char*, char*)>

<std::string::_S_copy_chars(char*, char const*, char const*)>:
               	subq	%rsi, %rdx
               	jmp	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>

<std::string::_S_copy_chars(char*, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	jmp	0x44171e <std::string::_S_copy_chars(char*, char const*, char const*)>

<std::string::_S_compare(unsigned long, unsigned long)>:
               	subq	%rsi, %rdi
               	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
               	cmpq	$2147483647, %rdi       # imm = 0x7FFFFFFF
               	jg	0x441749 <std::string::_S_compare(unsigned long, unsigned long)+0x1e>
               	cmpq	$-2147483648, %rdi      # imm = 0x80000000
               	leal	1(%rax), %eax
               	cmovgel	%edi, %eax
               	retq

<std::string::_S_empty_rep()>:
               	leaq	245263(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()>:
               	leaq	245255(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rdi)
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string&&)>:
               	movq	(%rsi), %rax
               	movq	%rax, (%rdi)
               	leaq	245233(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rsi)
               	retq
               	nop

<std::string::begin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::end() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44177c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::rend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::cbegin() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::cend() const>:
               	movq	(%rdi), %rax
               	addq	-24(%rax), %rax
               	retq

<std::string::crbegin() const>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x44177c <std::string::end() const>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::crend() const>:
               	movq	(%rsi), %rdx
               	movq	%rdi, %rax
               	movq	%rdx, (%rdi)
               	retq

<std::string::size() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::length() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	retq

<std::string::max_size() const>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	retq
               	nop

<std::string::capacity() const>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rax
               	retq

<std::string::empty() const>:
               	movq	(%rdi), %rax
               	cmpq	$0, -24(%rax)
               	sete	%al
               	retq

<std::string::operator[](unsigned long) const>:
               	movq	(%rdi), %rax
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::at(unsigned long) const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x44181f <std::string::at(unsigned long) const+0x1b>
               	pushq	%rax
               	leaq	17462(%rip), %rdi       # 0x445c4e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4411d6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::front() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::back() const>:
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	leaq	-1(%rax,%rdx), %rax
               	retq
               	nop

<std::string::copy(char*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	17647(%rip), %rdx       # 0x445d31 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bf8>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%rcx, %rsi
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rsi
               	movq	-24(%rsi), %rbx
               	subq	%rbp, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x44187d <std::string::copy(char*, unsigned long, unsigned long) const+0x47>
               	addq	%rbp, %rsi
               	movq	%rbx, %rdx
               	movq	%r12, %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::c_str() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::data() const>:
               	movq	(%rdi), %rax
               	retq

<std::string::get_allocator() const>:
               	movq	%rdi, %rax
               	retq

<std::string::find(char const*, unsigned long, unsigned long) const>:
               	pushq	%r15
               	movq	%rdx, %rax
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$40, %rsp
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rsi
               	testq	%rcx, %rcx
               	jne	0x4418bb <std::string::find(char const*, unsigned long, unsigned long) const+0x27>
               	cmpq	%rdx, %rsi
               	jae	0x44192f <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	jmp	0x44192b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	cmpq	%rdx, %rsi
               	jbe	0x44192b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movb	(%r12), %dl
               	movq	%rcx, %rbp
               	leaq	(%r13,%rsi), %rcx
               	movl	$1, %r14d
               	movq	%rcx, 8(%rsp)
               	leaq	(%r13,%rax), %rdi
               	subq	%rax, %rsi
               	subq	%rbp, %r14
               	movb	%dl, 31(%rsp)
               	leaq	31(%rsp), %r15
               	cmpq	%rbp, %rsi
               	jb	0x44192b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	addq	%r14, %rsi
               	movq	%r15, %rdx
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	movq	%rax, %rbx
               	testq	%rax, %rax
               	je	0x44192b <std::string::find(char const*, unsigned long, unsigned long) const+0x97>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	movq	%rax, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x44191d <std::string::find(char const*, unsigned long, unsigned long) const+0x89>
               	movq	%rbx, %rax
               	subq	%r13, %rax
               	jmp	0x44192f <std::string::find(char const*, unsigned long, unsigned long) const+0x9b>
               	movq	8(%rsp), %rsi
               	leaq	1(%rbx), %rdi
               	subq	%rdi, %rsi
               	jmp	0x4418eb <std::string::find(char const*, unsigned long, unsigned long) const+0x57>
               	orq	$-1, %rax
               	addq	$40, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::find(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x441894 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441894 <std::string::find(char const*, unsigned long, unsigned long) const>

<std::string::find(char, unsigned long) const>:
               	pushq	%rbp
               	orq	$-1, %rbp
               	pushq	%rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rbx
               	movb	%sil, 12(%rsp)
               	movq	-24(%rbx), %rsi
               	cmpq	%rsi, %rdx
               	jae	0x44199f <std::string::find(char, unsigned long) const+0x39>
               	movq	%rdx, %rdi
               	leaq	12(%rsp), %rdx
               	subq	%rdi, %rsi
               	addq	%rbx, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x44199f <std::string::find(char, unsigned long) const+0x39>
               	subq	%rbx, %rax
               	movq	%rax, %rbp
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::rfind(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	cmpq	%rax, %rcx
               	ja	0x4419fb <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	subq	%rcx, %rax
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rdx
               	movq	%rdx, %rbx
               	leaq	(%r13,%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	je	0x4419fb <std::string::rfind(char const*, unsigned long, unsigned long) const+0x51>
               	leaq	-1(%rbx), %rax
               	testq	%rbx, %rbx
               	je	0x4419f7 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x4d>
               	movq	%rax, %rbx
               	jmp	0x4419d5 <std::string::rfind(char const*, unsigned long, unsigned long) const+0x2b>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::rfind(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x4419aa <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x4419aa <std::string::rfind(char const*, unsigned long, unsigned long) const>

<std::string::rfind(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x441a5e <std::string::rfind(char, unsigned long) const+0x30>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpq	$-1, %rax
               	je	0x441a5e <std::string::rfind(char, unsigned long) const+0x30>
               	leaq	-1(%rax), %rdx
               	cmpb	%sil, 1(%rdi,%rdx)
               	je	0x441a5e <std::string::rfind(char, unsigned long) const+0x30>
               	movq	%rdx, %rax
               	jmp	0x441a48 <std::string::rfind(char, unsigned long) const+0x1a>
               	retq
               	nop

<std::string::find_first_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	movq	%rdi, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%r8
               	testq	%rbp, %rbp
               	je	0x441a9b <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	movq	(%r13), %rdx
               	cmpq	-24(%rdx), %rbx
               	jae	0x441a9b <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3b>
               	addq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x441a9f <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x3f>
               	incq	%rbx
               	jmp	0x441a74 <std::string::find_first_of(char const*, unsigned long, unsigned long) const+0x14>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_first_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x441a60 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441a60 <std::string::find_first_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x441966 <std::string::find(char, unsigned long) const>
               	nop

<std::string::find_last_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x441b28 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	testq	%rcx, %rcx
               	je	0x441b28 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x4c>
               	decq	%rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	jne	0x441b2c <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x441b08 <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x2c>
               	jmp	0x441b2c <std::string::find_last_of(char const*, unsigned long, unsigned long) const+0x50>
               	orq	$-1, %rbx
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::find_last_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x441adc <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441adc <std::string::find_last_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_of(char, unsigned long) const>:
               	movsbl	%sil, %esi
               	jmp	0x441a2e <std::string::rfind(char, unsigned long) const>
               	nop

<std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rcx, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbp
               	movq	%rdx, %rbx
               	movq	-24(%rbp), %r12
               	cmpq	%r12, %rbx
               	jae	0x441ba1 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x37>
               	leaq	(%rbp,%rbx), %rdx
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x441ba5 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x3b>
               	incq	%rbx
               	jmp	0x441b82 <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const+0x18>
               	orq	$-1, %rbx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::find_first_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x441b6a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441b6a <std::string::find_first_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_first_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rcx
               	movq	%rdx, %rax
               	movq	-24(%rcx), %rdi
               	cmpq	%rdi, %rax
               	jae	0x441bf4 <std::string::find_first_not_of(char, unsigned long) const+0x1a>
               	cmpb	%sil, (%rcx,%rax)
               	jne	0x441bf8 <std::string::find_first_not_of(char, unsigned long) const+0x1e>
               	incq	%rax
               	jmp	0x441be4 <std::string::find_first_not_of(char, unsigned long) const+0xa>
               	orq	$-1, %rax
               	retq
               	nop

<std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	orq	$-1, %rbx
               	pushq	%r8
               	movq	(%rdi), %r13
               	movq	-24(%r13), %rax
               	testq	%rax, %rax
               	je	0x441c43 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	addq	%rbx, %rax
               	movq	%rdx, %rbx
               	movq	%rcx, %rbp
               	movq	%rsi, %r12
               	cmpq	%rdx, %rax
               	cmovbeq	%rax, %rbx
               	leaq	(%r13,%rbx), %rdx
               	movq	%rbp, %rsi
               	movq	%r12, %rdi
               	callq	0x43df44 <std::char_traits<char>::find(char const*, unsigned long, char const&)>
               	testq	%rax, %rax
               	je	0x441c43 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x49>
               	decq	%rbx
               	cmpq	$-1, %rbx
               	jne	0x441c25 <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const+0x2b>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::find_last_not_of(std::string const&, unsigned long) const>:
               	movq	(%rsi), %rsi
               	movq	-24(%rsi), %rcx
               	jmp	0x441bfa <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char const*, unsigned long) const>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x441bfa <std::string::find_last_not_of(char const*, unsigned long, unsigned long) const>

<std::string::find_last_not_of(char, unsigned long) const>:
               	movq	(%rdi), %rdi
               	orq	$-1, %rax
               	movq	-24(%rdi), %rcx
               	testq	%rcx, %rcx
               	je	0x441c9f <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	addq	%rcx, %rax
               	cmpq	%rdx, %rax
               	cmovaq	%rdx, %rax
               	cmpb	%sil, (%rdi,%rax)
               	jne	0x441c9f <std::string::find_last_not_of(char, unsigned long) const+0x29>
               	decq	%rax
               	cmpq	$-1, %rax
               	jne	0x441c90 <std::string::find_last_not_of(char, unsigned long) const+0x1a>
               	retq

<std::string::compare(std::string const&) const>:
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %rdi
               	movq	(%rsi), %rsi
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441cd3 <std::string::compare(std::string const&) const+0x33>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x44172b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&) const>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	16471(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%r8
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%rbp, %rbx
               	cmovaq	%rbp, %rbx
               	movq	-24(%rsi), %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r12, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441d39 <std::string::compare(unsigned long, unsigned long, std::string const&) const+0x61>
               	popq	%rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x44172b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16374(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%r8, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%r9, 8(%rsp)
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	leaq	16332(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	movq	%r13, %rsi
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	(%rbp), %rsi
               	movq	8(%rsp), %r9
               	movq	-24(%rdi), %rbx
               	movq	-24(%rsi), %rbp
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	subq	%r13, %rbp
               	cmpq	%r9, %rbp
               	cmovaq	%r9, %rbp
               	movq	%rbx, %rdx
               	cmpq	%rbx, %rbp
               	cmovbeq	%rbp, %rdx
               	addq	%r13, %rsi
               	addq	%r12, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441dd8 <std::string::compare(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long) const+0x96>
               	addq	$16, %rsp
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x44172b <std::string::_S_compare(unsigned long, unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::compare(char const*) const>:
               	pushq	%rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	pushq	%rbx
               	pushq	%r8
               	movq	(%rdi), %r8
               	movq	%rsi, %rdi
               	movq	-24(%r8), %rbp
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rbp, %rdx
               	movq	%rcx, %rbx
               	notq	%rbx
               	decq	%rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441e29 <std::string::compare(char const*) const+0x43>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	jmp	0x44172b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::compare(unsigned long, unsigned long, char const*) const>:
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	leaq	16125(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r8
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rsi
               	movq	%r12, %rdi
               	movq	-24(%rsi), %rbp
               	subq	%r13, %rbp
               	cmpq	%rbx, %rbp
               	cmovaq	%rbx, %rbp
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	leaq	(%rsi,%r13), %rdi
               	movq	%r12, %rsi
               	movq	%rbp, %rdx
               	notq	%rcx
               	leaq	-1(%rcx), %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441e9e <std::string::compare(unsigned long, unsigned long, char const*) const+0x70>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x44172b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	16018(%rip), %rdx       # 0x445d44 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c0b>
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rsi, %r12
               	pushq	%rbp
               	movq	%r8, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rdx
               	movq	%r13, %rsi
               	movq	-24(%rdi), %rbx
               	subq	%r12, %rbx
               	cmpq	%r14, %rbx
               	cmovaq	%r14, %rbx
               	cmpq	%rbp, %rbx
               	cmovbeq	%rbx, %rdx
               	addq	%r12, %rdi
               	callq	0x43df37 <std::char_traits<char>::compare(char const*, char const*, unsigned long)>
               	testl	%eax, %eax
               	jne	0x441f06 <std::string::compare(unsigned long, unsigned long, char const*, unsigned long) const+0x60>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x44172b <std::string::_S_compare(unsigned long, unsigned long)>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)>:
               	movq	%rsi, (%rdi)
               	retq

<std::string::_Rep::_S_empty_rep()>:
               	leaq	243269(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	retq

<std::string::_Rep::_M_is_leaked() const>:
               	movl	16(%rdi), %eax
               	shrl	$31, %eax
               	retq
               	nop

<std::string::swap(std::string&)>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rdx
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441f1c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	je	0x441f47 <std::string::swap(std::string&)+0x23>
               	movq	(%rbx), %rax
               	movl	$0, -8(%rax)
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441f1c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	movq	(%rbp), %rax
               	je	0x441f63 <std::string::swap(std::string&)+0x3f>
               	movl	$0, -8(%rax)
               	movq	(%rbx), %rdx
               	movq	%rax, (%rbx)
               	movq	%rdx, (%rbp)
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::operator=(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441f24 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string&&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x441f24 <std::string::swap(std::string&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_is_shared() const>:
               	movl	16(%rdi), %eax
               	testl	%eax, %eax
               	setg	%al
               	retq
               	nop

<std::string::_Rep::_M_set_leaked()>:
               	movl	$4294967295, 16(%rdi)   # imm = 0xFFFFFFFF
               	retq

<std::string::_Rep::_M_set_sharable()>:
               	movl	$0, 16(%rdi)
               	retq

<std::string::_Rep::_M_set_length_and_sharable(unsigned long)>:
               	cmpq	131121(%rip), %rdi      # 0x461fe0 <write+0x461fe0>
               	je	0x441fc0 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)+0x18>
               	movl	$0, 16(%rdi)
               	movq	%rsi, (%rdi)
               	movb	$0, 24(%rdi,%rsi)
               	retq
               	nop

<std::string::_Rep::_M_refdata()>:
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>:
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	pushq	%rbx
               	cmpq	%rax, %rdi
               	jbe	0x441fe4 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x1c>
               	leaq	16063(%rip), %rdi       # 0x445e9e <typeinfo name for kotlin::gc::GCSchedulerData+0x1d65>
               	callq	0x441148 <std::__throw_length_error(char const*)>
               	movq	%rdi, %rbx
               	cmpq	%rsi, %rdi
               	jbe	0x441ff7 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x2f>
               	leaq	(%rsi,%rsi), %rax
               	cmpq	%rax, %rdi
               	cmovbq	%rax, %rbx
               	leaq	57(%rbx), %rax
               	cmpq	$4096, %rax             # imm = 0x1000
               	jbe	0x442028 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	cmpq	%rsi, %rbx
               	jbe	0x442028 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)+0x60>
               	andl	$4095, %eax             # imm = 0xFFF
               	addq	$4096, %rbx             # imm = 0x1000
               	subq	%rax, %rbx
               	movabsq	$4611686018427387897, %rax # imm = 0x3FFFFFFFFFFFFFF9
               	cmpq	%rax, %rbx
               	cmovaq	%rax, %rbx
               	leaq	25(%rbx), %rdi
               	callq	0x43cb69 <operator new(unsigned long)>
               	movq	%rbx, 8(%rax)
               	movl	$0, 16(%rax)
               	popq	%rbx
               	retq

<std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rcx
               	testq	%rdi, %rdi
               	je	0x442079 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x3b>
               	movl	%esi, %ebp
               	xorl	%esi, %esi
               	movq	%rdi, %rbx
               	callq	0x441fc8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movsbl	%bpl, %edx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x4416fb <std::string::_M_assign(char*, unsigned long, char)>
               	movq	%rbx, %rsi
               	movq	%r13, %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442084 <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)+0x46>
               	leaq	242912(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rdx
               	movq	%r12, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rsi, %rdx
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	xorl	%edi, %edi
               	callq	0x44203e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movl	%edx, %esi
               	movsbl	%sil, %esi
               	movq	%rcx, %rdx
               	callq	0x44203e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::_S_construct_aux_2(unsigned long, char, std::allocator<char> const&)>:
               	movsbl	%sil, %esi
               	jmp	0x44203e <std::string::_S_construct(unsigned long, char, std::allocator<char> const&)>
               	nop

<std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
               	jmp	0x43c235 <operator delete(void*)>
               	nop

<std::string::_Rep::_M_dispose(std::allocator<char> const&)>:
               	cmpq	130825(%rip), %rdi      # 0x461fe0 <write+0x461fe0>
               	je	0x4420ff <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	cmpq	$0, 130775(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x4420ed <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x1d>
               	orl	$-1, %eax
               	lock
               	xaddl	%eax, 16(%rdi)
               	jmp	0x4420f6 <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x26>
               	movl	16(%rdi), %eax
               	leal	-1(%rax), %edx
               	movl	%edx, 16(%rdi)
               	testl	%eax, %eax
               	jg	0x4420ff <std::string::_Rep::_M_dispose(std::allocator<char> const&)+0x2f>
               	jmp	0x4420ca <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>:
               	subq	$24, %rsp
               	movq	(%rdi), %rdi
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x4420d0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	addq	$24, %rsp
               	retq

<std::string::clear()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	movq	(%rbx), %rdi
               	testb	%al, %al
               	je	0x442153 <std::string::clear()+0x39>
               	leaq	15(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x4420d0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	leaq	242710(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	addq	$24, %rax
               	movq	%rax, (%rbx)
               	jmp	0x44215e <std::string::clear()+0x44>
               	subq	$24, %rdi
               	xorl	%esi, %esi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>:
               	pushq	%r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	subq	%rdx, %r13
               	movq	%rcx, %r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$56, %rsp
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rbp
               	leaq	(%r13,%rbp), %rax
               	leaq	(%rdx,%rsi), %r13
               	movq	%rax, 8(%rsp)
               	subq	%r13, %rbp
               	cmpq	-16(%rdi), %rax
               	jbe	0x4421e2 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x7e>
               	leaq	47(%rsp), %rax
               	movq	8(%rsp), %rdi
               	movq	%rax, 16(%rsp)
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rdx
               	movq	-16(%rax), %rsi
               	callq	0x441fc8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	testq	%r14, %r14
               	leaq	24(%rax), %r15
               	je	0x442213 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	movq	(%rbx), %rsi
               	movq	%r14, %rdx
               	movq	%r15, %rdi
               	movq	%rax, 24(%rsp)
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	24(%rsp), %rax
               	jmp	0x442213 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xaf>
               	subq	$24, %rdi
               	movq	%rdx, %r15
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x44219f <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0x3b>
               	testq	%rbp, %rbp
               	je	0x442242 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	cmpq	%r15, %r12
               	je	0x442242 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	movq	(%rbx), %rdi
               	addq	%r14, %r12
               	movq	%rbp, %rdx
               	leaq	(%rdi,%r13), %rsi
               	addq	%r12, %rdi
               	callq	0x4416e5 <std::string::_M_move(char*, char const*, unsigned long)>
               	jmp	0x442242 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xde>
               	testq	%rbp, %rbp
               	je	0x44222e <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)+0xca>
               	movq	(%rbx), %rsi
               	leaq	24(%r14,%r12), %rdi
               	movq	%rbp, %rdx
               	addq	%rax, %rdi
               	addq	%r13, %rsi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	16(%rsp), %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x4420d0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r15, (%rbx)
               	movq	(%rbx), %rdi
               	movq	8(%rsp), %rsi
               	subq	$24, %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	addq	$56, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::_M_leak_hard()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	cmpq	130412(%rip), %rdi      # 0x461fe0 <write+0x461fe0>
               	je	0x442297 <std::string::_M_leak_hard()+0x35>
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	je	0x44228d <std::string::_M_leak_hard()+0x2b>
               	xorl	%ecx, %ecx
               	xorl	%edx, %edx
               	xorl	%esi, %esi
               	movq	%rbx, %rdi
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbx), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	popq	%rbx
               	retq
               	nop

<std::string::_M_leak()>:
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	leaq	-24(%rax), %rdi
               	callq	0x441f1c <std::string::_Rep::_M_is_leaked() const>
               	testb	%al, %al
               	jne	0x4422b7 <std::string::_M_leak()+0x1d>
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x442262 <std::string::_M_leak_hard()>
               	popq	%rbx
               	retq
               	nop

<std::string::begin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44229a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::rend()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x4422ba <std::string::begin()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::end()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44229a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	addq	-24(%rax), %rax
               	retq

<std::string::rbegin()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	callq	0x4422dc <std::string::end()>
               	movq	%rax, (%rbx)
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::operator[](unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	callq	0x44229a <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::front()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44229a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	popq	%rbx
               	retq

<std::string::back()>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rbx
               	callq	0x44229a <std::string::_M_leak()>
               	movq	(%rbp), %rax
               	popq	%rdx
               	decq	%rbx
               	addq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<std::string::at(unsigned long)>:
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rdx
               	cmpq	%rdx, %rsi
               	jb	0x442369 <std::string::at(unsigned long)+0x1f>
               	leaq	14572(%rip), %rdi       # 0x445c4e <typeinfo name for kotlin::gc::GCSchedulerData+0x1b15>
               	xorl	%eax, %eax
               	callq	0x4411d6 <std::__throw_out_of_range_fmt(char const*, ...)>
               	movq	%rdi, %rbx
               	movq	%rsi, 8(%rsp)
               	callq	0x44229a <std::string::_M_leak()>
               	movq	(%rbx), %rax
               	movq	8(%rsp), %rsi
               	addq	$16, %rsp
               	popq	%rbx
               	addq	%rsi, %rax
               	retq
               	nop

<std::string::erase(unsigned long, unsigned long)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	pushq	%rax
               	movq	(%rdi), %rax
               	movq	-24(%rax), %rax
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14573(%rip), %rdx       # 0x445c92 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b59>
               	cmovbeq	%rax, %rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdi
               	xorl	%ecx, %ecx
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	%rbp, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::pop_back()>:
               	movq	(%rdi), %rax
               	movl	$1, %edx
               	movq	-24(%rax), %rsi
               	decq	%rsi
               	jmp	0x442388 <std::string::erase(unsigned long, unsigned long)>

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movl	$1, %edx
               	xorl	%ecx, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	movq	%rsi, %rax
               	subq	%rsi, %rdx
               	je	0x442438 <std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)+0x30>
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	pushq	%rcx
               	subq	(%rdi), %rax
               	xorl	%ecx, %ecx
               	movq	%rax, %rsi
               	movq	%rax, %rbx
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rsi
               	popq	%rbx
               	popq	%rbp
               	retq
               	retq
               	nop

<std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%r13
               	movq	%rdx, %r13
               	pushq	%r12
               	movq	%rcx, %r12
               	leaq	14427(%rip), %rcx       # 0x445ca6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b6d>
               	pushq	%rbp
               	movq	%r12, %rdx
               	movq	%rsi, %rbp
               	movq	%r13, %rsi
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$24, %rsp
               	movl	%r8d, 12(%rsp)
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rcx
               	movq	%r13, %rdx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	testq	%r12, %r12
               	movl	12(%rsp), %r8d
               	je	0x442494 <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)+0x5a>
               	movq	(%rbx), %rdi
               	movsbl	%r8b, %edx
               	movq	%r12, %rsi
               	addq	%rbp, %rdi
               	callq	0x4416fb <std::string::_M_assign(char*, unsigned long, char)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::assign(unsigned long, char)>:
               	movq	(%rdi), %rax
               	movq	%rsi, %rcx
               	movsbl	%dl, %r8d
               	xorl	%esi, %esi
               	movq	-24(%rax), %rax
               	movq	%rax, %rdx
               	jmp	0x44243a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>

<std::string::operator=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %edx
               	movq	%rdi, %rbx
               	movl	$1, %esi
               	callq	0x4424a2 <std::string::assign(unsigned long, char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq
               	nop

<std::string::insert(unsigned long, unsigned long, char)>:
               	pushq	%r12
               	movl	%ecx, %r12d
               	pushq	%rbp
               	movq	%rdx, %rbp
               	leaq	14305(%rip), %rdx       # 0x445cc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movsbl	%r12b, %r8d
               	movq	%rbp, %rcx
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	movq	%rax, %rsi
               	popq	%rbp
               	popq	%r12
               	jmp	0x44243a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movsbl	%dl, %r8d
               	movl	$1, %ecx
               	pushq	%rbx
               	movq	%rsi, %rbx
               	xorl	%edx, %edx
               	pushq	%rax
               	subq	(%rdi), %rbx
               	movq	%rbx, %rsi
               	callq	0x44243a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	movq	(%rbp), %rax
               	movl	$4294967295, -8(%rax)   # imm = 0xFFFFFFFF
               	addq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::string::replace(unsigned long, unsigned long, unsigned long, char)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rdx, %rbx
               	subq	$24, %rsp
               	movq	(%rdi), %rax
               	movq	%rcx, 8(%rsp)
               	movq	-24(%rax), %rax
               	movl	%r8d, 4(%rsp)
               	subq	%rsi, %rax
               	cmpq	%rdx, %rax
               	leaq	14200(%rip), %rdx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	cmovbeq	%rax, %rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movl	4(%rsp), %r8d
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rdi
               	addq	$24, %rsp
               	movq	%rbx, %rdx
               	movq	%rax, %rsi
               	popq	%rbx
               	movsbl	%r8b, %r8d
               	popq	%rbp
               	jmp	0x44243a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	subq	%rsi, %rdx
               	movsbl	%r8b, %r8d
               	subq	(%rdi), %rsi
               	jmp	0x44243a <std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)>
               	nop

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>:
               	movsbl	%cl, %r8d
               	movq	%rdx, %rcx
               	movq	%rsi, %rdx
               	jmp	0x44258c <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, unsigned long, char)>
               	nop

<std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rcx, %r12
               	movq	%r8, %rcx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	%r8, 8(%rsp)
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	8(%rsp), %r8
               	testq	%r8, %r8
               	je	0x4425e6 <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)+0x3a>
               	addq	(%rbp), %rbx
               	movq	%r8, %rdx
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	addq	$16, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::assign(char const*, unsigned long)>:
               	pushq	%r12
               	movq	%rsi, %r12
               	leaq	14089(%rip), %rcx       # 0x445d07 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rax
               	movq	%rdi, %rbx
               	movq	-24(%rax), %rsi
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x4416ba <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x44263c <std::string::assign(char const*, unsigned long)+0x4a>
               	movq	(%rbx), %rax
               	movq	%rbp, %r8
               	movq	%r12, %rcx
               	movq	%rbx, %rdi
               	xorl	%esi, %esi
               	popq	%rbx
               	popq	%rbp
               	movq	-24(%rax), %rdx
               	popq	%r12
               	jmp	0x4425ac <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442621 <std::string::assign(char const*, unsigned long)+0x2f>
               	movq	(%rbx), %rdi
               	movq	%r12, %rax
               	subq	%rdi, %rax
               	cmpq	%rax, %rbp
               	ja	0x442667 <std::string::assign(char const*, unsigned long)+0x75>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x442677 <std::string::assign(char const*, unsigned long)+0x85>
               	testq	%rax, %rax
               	je	0x442677 <std::string::assign(char const*, unsigned long)+0x85>
               	movq	%rbp, %rdx
               	movq	%r12, %rsi
               	callq	0x4416e5 <std::string::_M_move(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::initializer_list<char>)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4425f2 <std::string::assign(char const*, unsigned long)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::assign(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %rax
               	subq	%rdx, %rax
               	leaq	13901(%rip), %rdx       # 0x445d07 <typeinfo name for kotlin::gc::GCSchedulerData+0x1bce>
               	cmpq	%rcx, %rax
               	cmovbeq	%rax, %rcx
               	movq	%rcx, %rbp
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%rbp, %rdx
               	movq	%r12, %rdi
               	leaq	(%rbx,%rax), %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	jmp	0x4425f2 <std::string::assign(char const*, unsigned long)>

<std::string::assign(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x4425f2 <std::string::assign(char const*, unsigned long)>

<std::string::operator=(char const*)>:
               	jmp	0x4426dc <std::string::assign(char const*)>
               	nop

<std::string::assign(std::initializer_list<char>)>:
               	jmp	0x4425f2 <std::string::assign(char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, char const*, unsigned long)>:
               	pushq	%r14
               	movq	%rdx, %r14
               	leaq	13743(%rip), %rdx       # 0x445cc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdi, %r12
               	pushq	%rbp
               	movq	%rcx, %rbp
               	pushq	%rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	xorl	%esi, %esi
               	movq	%r12, %rdi
               	movq	%rbp, %rdx
               	leaq	13708(%rip), %rcx       # 0x445cc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%r14, %rsi
               	movq	%r12, %rdi
               	callq	0x4416ba <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x442766 <std::string::insert(unsigned long, char const*, unsigned long)+0x5e>
               	popq	%rbx
               	movq	%rbp, %r8
               	movq	%r14, %rcx
               	popq	%rbp
               	movq	%r13, %rsi
               	movq	%r12, %rdi
               	xorl	%edx, %edx
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x4425ac <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	(%r12), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x44274b <std::string::insert(unsigned long, char const*, unsigned long)+0x43>
               	xorl	%edx, %edx
               	movq	%r13, %rsi
               	movq	%rbp, %rcx
               	movq	%r12, %rdi
               	subq	(%r12), %r14
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%r12), %rbx
               	movq	%rbp, %rdx
               	leaq	(%rbx,%r14), %rsi
               	addq	%r13, %rbx
               	leaq	(%rsi,%rbp), %rax
               	cmpq	%rax, %rbx
               	jae	0x4427aa <std::string::insert(unsigned long, char const*, unsigned long)+0xa2>
               	cmpq	%rbx, %rsi
               	jb	0x4427af <std::string::insert(unsigned long, char const*, unsigned long)+0xa7>
               	movq	%rax, %rsi
               	movq	%rbx, %rdi
               	jmp	0x4427cb <std::string::insert(unsigned long, char const*, unsigned long)+0xc3>
               	subq	%r14, %r13
               	movq	%rbx, %rdi
               	movq	%r13, %rdx
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	%rbp, %rdx
               	leaq	(%rbx,%rbp), %rsi
               	leaq	(%rbx,%r13), %rdi
               	subq	%r13, %rdx
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::string::insert(__gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	subq	(%rdi), %rsi
               	jmp	0x442708 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r13
               	movq	%rsi, %r13
               	movq	%rcx, %rsi
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rdx, %rdi
               	pushq	%rbp
               	pushq	%rbx
               	pushq	%rax
               	movq	(%rdx), %rbx
               	leaq	13506(%rip), %rdx       # 0x445cc3 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b8a>
               	movq	-24(%rbx), %rax
               	subq	%rcx, %rax
               	cmpq	%r8, %rax
               	cmovbeq	%rax, %r8
               	movq	%r8, %rbp
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	popq	%r8
               	movq	%rbp, %rcx
               	movq	%r13, %rsi
               	leaq	(%rbx,%rax), %rdx
               	movq	%r12, %rdi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x442708 <std::string::insert(unsigned long, char const*, unsigned long)>
               	nop

<std::string::insert(unsigned long, std::string const&)>:
               	movq	(%rdx), %rax
               	xorl	%ecx, %ecx
               	movq	-24(%rax), %r8
               	jmp	0x4427e4 <std::string::insert(unsigned long, std::string const&, unsigned long, unsigned long)>

<std::string::insert(unsigned long, char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rdx, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	notq	%rcx
               	decq	%rcx
               	jmp	0x442708 <std::string::insert(unsigned long, char const*, unsigned long)>

<std::string::_Rep::_M_refcopy()>:
               	cmpq	128893(%rip), %rdi      # 0x461fe0 <write+0x461fe0>
               	je	0x442878 <std::string::_Rep::_M_refcopy()+0x1c>
               	cmpq	$0, 128843(%rip)        # 0x461fb8 <write+0x461fb8>
               	je	0x442875 <std::string::_Rep::_M_refcopy()+0x19>
               	lock
               	incl	16(%rdi)
               	jmp	0x442878 <std::string::_Rep::_M_refcopy()+0x1c>
               	incl	16(%rdi)
               	leaq	24(%rdi), %rax
               	retq
               	nop

<std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	(%rdi), %rdi
               	addq	%rdx, %rdi
               	movq	%rsi, %rdx
               	movq	8(%rbx), %rsi
               	callq	0x441fc8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	(%rbx), %rdx
               	movq	%rax, %r12
               	leaq	24(%rax), %rbp
               	testq	%rdx, %rdx
               	je	0x4428b2 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)+0x34>
               	leaq	24(%rbx), %rsi
               	movq	%rbp, %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rsi
               	movq	%r12, %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::string::reserve(unsigned long)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rdi
               	cmpq	-16(%rdi), %rsi
               	je	0x44291c <std::string::reserve(unsigned long)+0x56>
               	movq	(%rbp), %rdi
               	movq	%rbx, %rdx
               	movq	-24(%rdi), %rax
               	cmpq	%rax, %rbx
               	leaq	15(%rsp), %rbx
               	cmovbq	%rax, %rdx
               	movq	%rbx, %rsi
               	subq	$24, %rdi
               	subq	%rax, %rdx
               	callq	0x44287e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	movq	%rbx, %rsi
               	movq	%rax, %r12
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4420d0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbp)
               	jmp	0x442929 <std::string::reserve(unsigned long)+0x63>
               	subq	$24, %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4428dd <std::string::reserve(unsigned long)+0x17>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::shrink_to_fit()>:
               	movq	(%rdi), %rax
               	movq	-16(%rax), %rdx
               	cmpq	%rdx, -24(%rax)
               	jae	0x442957 <std::string::shrink_to_fit()+0x25>
               	pushq	%rcx
               	xorl	%esi, %esi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	popq	%rax
               	retq
               	movq	%rax, %rdi
               	callq	0x43cbc7 <__cxa_begin_catch>
               	popq	%rdx
               	jmp	0x43cc25 <__cxa_end_catch>
               	retq

<std::string::append(std::string const&)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	movq	(%rsi), %rax
               	movq	-24(%rax), %r12
               	testq	%r12, %r12
               	je	0x4429bd <std::string::append(std::string const&)+0x65>
               	movq	(%rdi), %rdi
               	movq	%rsi, %r13
               	movq	-24(%rdi), %rbp
               	addq	%r12, %rbp
               	cmpq	-16(%rdi), %rbp
               	jbe	0x44298e <std::string::append(std::string const&)+0x36>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	jmp	0x44299b <std::string::append(std::string const&)+0x43>
               	subq	$24, %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442981 <std::string::append(std::string const&)+0x29>
               	movq	(%rbx), %rdi
               	movq	(%r13), %rsi
               	movq	%r12, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%rbp, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::string::operator+=(std::string const&)>:
               	jmp	0x442958 <std::string::append(std::string const&)>
               	nop

<std::string::append(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	leaq	13112(%rip), %rdx       # 0x445d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	pushq	%rbp
               	movq	%r12, %rsi
               	movq	%rdi, %rbp
               	movq	%r14, %rdi
               	pushq	%rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%r14), %rax
               	movq	-24(%rax), %rbx
               	subq	%r12, %rbx
               	cmpq	%r13, %rbx
               	cmovaq	%r13, %rbx
               	testq	%rbx, %rbx
               	je	0x442a5b <std::string::append(std::string const&, unsigned long, unsigned long)+0x8d>
               	movq	(%rbp), %rdi
               	movq	-24(%rdi), %r13
               	addq	%rbx, %r13
               	cmpq	-16(%rdi), %r13
               	jbe	0x442a28 <std::string::append(std::string const&, unsigned long, unsigned long)+0x5a>
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	jmp	0x442a35 <std::string::append(std::string const&, unsigned long, unsigned long)+0x67>
               	subq	$24, %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442a1b <std::string::append(std::string const&, unsigned long, unsigned long)+0x4d>
               	movq	(%rbp), %rdi
               	movq	(%r14), %rsi
               	movq	%rbx, %rdx
               	addq	%r12, %rsi
               	addq	-24(%rdi), %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbp), %rax
               	movq	%r13, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rbx
               	movq	%rbp, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::string::append(char const*, unsigned long)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rdx, %rdx
               	je	0x442afc <std::string::append(char const*, unsigned long)+0x94>
               	movq	%rsi, %rbp
               	leaq	12951(%rip), %rcx       # 0x445d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	xorl	%esi, %esi
               	movq	%rdx, %r13
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%r13, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x442abb <std::string::append(char const*, unsigned long)+0x53>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x4416ba <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x442aca <std::string::append(char const*, unsigned long)+0x62>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	jmp	0x442adb <std::string::append(char const*, unsigned long)+0x73>
               	subq	$24, %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442a9f <std::string::append(char const*, unsigned long)+0x37>
               	jmp	0x442adb <std::string::append(char const*, unsigned long)+0x73>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	subq	(%rbx), %rbp
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	addq	(%rbx), %rbp
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movq	%r13, %rdx
               	addq	-24(%rdi), %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::operator+=(std::initializer_list<char>)>:
               	jmp	0x442a68 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(char const*)>:
               	movq	%rdi, %r8
               	orq	$-1, %rcx
               	movq	%rsi, %rdi
               	xorl	%eax, %eax
               	repne		scasb	%es:(%rdi), %al
               	movq	%r8, %rdi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rdx
               	jmp	0x442a68 <std::string::append(char const*, unsigned long)>

<std::string::operator+=(char const*)>:
               	jmp	0x442b0e <std::string::append(char const*)>
               	nop

<std::string::append(std::initializer_list<char>)>:
               	jmp	0x442a68 <std::string::append(char const*, unsigned long)>
               	nop

<std::string::append(unsigned long, char)>:
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	testq	%rsi, %rsi
               	je	0x442bac <std::string::append(unsigned long, char)+0x72>
               	movq	%rsi, %rbp
               	movsbl	%dl, %r13d
               	leaq	12741(%rip), %rcx       # 0x445d1c <typeinfo name for kotlin::gc::GCSchedulerData+0x1be3>
               	movq	%rsi, %rdx
               	xorl	%esi, %esi
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	(%rbx), %rdi
               	movq	-24(%rdi), %r12
               	addq	%rbp, %r12
               	cmpq	-16(%rdi), %r12
               	jbe	0x442b7e <std::string::append(unsigned long, char)+0x44>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	jmp	0x442b8b <std::string::append(unsigned long, char)+0x51>
               	subq	$24, %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442b71 <std::string::append(unsigned long, char)+0x37>
               	movq	(%rbx), %rdi
               	movq	%rbp, %rsi
               	movl	%r13d, %edx
               	addq	-24(%rdi), %rdi
               	callq	0x4416fb <std::string::_M_assign(char*, unsigned long, char)>
               	movq	(%rbx), %rax
               	movq	%r12, %rsi
               	leaq	-24(%rax), %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	popq	%rdx
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long, char)>:
               	pushq	%r13
               	leaq	13045(%rip), %rcx       # 0x445eb6 <typeinfo name for kotlin::gc::GCSchedulerData+0x1d7d>
               	pushq	%r12
               	movl	%edx, %r12d
               	movq	%rsi, %rdx
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	pushq	%r9
               	movq	(%rdi), %rax
               	movq	-24(%rax), %r13
               	movq	%r13, %rsi
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	cmpq	%r13, %rbx
               	jbe	0x442c01 <std::string::resize(unsigned long, char)+0x49>
               	subq	%r13, %rbx
               	popq	%r8
               	movsbl	%r12b, %edx
               	movq	%rbp, %rdi
               	movq	%rbx, %rsi
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x442b3a <std::string::append(unsigned long, char)>
               	jae	0x442c19 <std::string::resize(unsigned long, char)+0x61>
               	popq	%rcx
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	popq	%rbx
               	orq	$-1, %rdx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	jmp	0x442388 <std::string::erase(unsigned long, unsigned long)>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	nop

<std::string::resize(unsigned long)>:
               	xorl	%edx, %edx
               	jmp	0x442bb8 <std::string::resize(unsigned long, char)>
               	nop

<std::string::push_back(char)>:
               	pushq	%r12
               	movl	%esi, %r12d
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	(%rdi), %rdi
               	movq	-24(%rdi), %rax
               	leaq	1(%rax), %rbx
               	cmpq	-16(%rdi), %rbx
               	jbe	0x442c52 <std::string::push_back(char)+0x28>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	jmp	0x442c5f <std::string::push_back(char)+0x35>
               	subq	$24, %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x442c45 <std::string::push_back(char)+0x1b>
               	movq	(%rbp), %rax
               	movq	%rbx, %rsi
               	movq	-24(%rax), %rdx
               	movb	%r12b, (%rax,%rdx)
               	movq	(%rbp), %rdi
               	popq	%rbx
               	popq	%rbp
               	subq	$24, %rdi
               	popq	%r12
               	jmp	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	nop

<std::string::operator+=(char)>:
               	pushq	%rbx
               	movsbl	%sil, %esi
               	movq	%rdi, %rbx
               	callq	0x442c2a <std::string::push_back(char)>
               	movq	%rbx, %rax
               	popq	%rbx
               	retq

<std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	%rsi, 8(%rsp)
               	callq	0x441f1c <std::string::_Rep::_M_is_leaked() const>
               	movq	8(%rsp), %rsi
               	testb	%al, %al
               	jne	0x442cba <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)+0x28>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	popq	%rbx
               	jmp	0x44285c <std::string::_Rep::_M_refcopy()>
               	addq	$16, %rsp
               	movq	%rbx, %rdi
               	xorl	%edx, %edx
               	popq	%rbx
               	jmp	0x44287e <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)>
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	leaq	14(%rsp), %rax
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rax, %rsi
               	callq	0x442c92 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rax, (%rbx)
               	addq	$16, %rsp
               	popq	%rbx
               	retq

<std::string::assign(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	subq	$16, %rsp
               	movq	(%rsi), %rdi
               	cmpq	%rdi, (%rbx)
               	je	0x442d32 <std::string::assign(std::string const&)+0x3e>
               	leaq	14(%rsp), %rbp
               	leaq	15(%rsp), %rdx
               	subq	$24, %rdi
               	movq	%rbp, %rsi
               	callq	0x442c92 <std::string::_Rep::_M_grab(std::allocator<char> const&, std::allocator<char> const&)>
               	movq	%rbp, %rsi
               	movq	%rax, %r12
               	movq	(%rbx), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x4420d0 <std::string::_Rep::_M_dispose(std::allocator<char> const&)>
               	movq	%r12, (%rbx)
               	addq	$16, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::operator=(std::string const&)>:
               	jmp	0x442cf4 <std::string::assign(std::string const&)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r13
               	xorl	%eax, %eax
               	movq	%rsi, %r13
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	pushq	%rbx
               	pushq	%rcx
               	orq	$-1, %rcx
               	repne		scasb	%es:(%rdi), %al
               	leaq	239611(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	movq	%rbp, %rdi
               	addq	$24, %rax
               	movq	%rax, (%rbp)
               	movq	(%r12), %rax
               	movq	-24(%rax), %rsi
               	movq	%rcx, %rdx
               	notq	%rdx
               	leaq	-1(%rdx), %rbx
               	addq	%rbx, %rsi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	movq	%rbx, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x442a68 <std::string::append(char const*, unsigned long)>
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	callq	0x442958 <std::string::append(std::string const&)>
               	popq	%rdx
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq
               	movq	%rax, %rbx
               	movq	%rbp, %rdi
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	leaq	239512(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	pushq	%r12
               	movq	%rdx, %r12
               	pushq	%rbp
               	movl	%esi, %ebp
               	addq	$24, %rax
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rax, (%rdi)
               	movq	(%rdx), %rax
               	movq	-24(%rax), %rsi
               	incq	%rsi
               	callq	0x4428c6 <std::string::reserve(unsigned long)>
               	movsbl	%bpl, %edx
               	movl	$1, %esi
               	movq	%rbx, %rdi
               	callq	0x442b3a <std::string::append(unsigned long, char)>
               	movq	%r12, %rsi
               	movq	%rbx, %rdi
               	callq	0x442958 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdx, %rbp
               	pushq	%rbx
               	movq	%rdi, %rbx
               	pushq	%rcx
               	callq	0x442cca <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)>
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	callq	0x442958 <std::string::append(std::string const&)>
               	movq	%rbx, %rax
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	retq
               	movq	%rax, %rbp
               	movq	%rbx, %rdi
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbp, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>

<char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rdi, %rsi
               	je	0x442e99 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x45>
               	movq	%rsi, %r14
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441fc8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x441711 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442ea4 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)+0x50>
               	leaq	239296(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442e54 <char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::string> >(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x442f1e <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x442f12 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441fc8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x441711 <std::string::_S_copy_chars(char*, char*, char*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x442f29 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	12210(%rip), %rdi       # 0x445ecb <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x441073 <std::__throw_logic_error(char const*)>
               	leaq	239163(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long, std::allocator<char> const&)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	%r8, 8(%rsp)
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11823(%rip), %rdx       # 0x445d93 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %r8
               	addq	%rbp, %rbx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	movq	%r8, %rdx
               	callq	0x442ec8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*>(char*, char*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x442ec8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, std::allocator<char> const&)>:
               	pushq	%r13
               	movq	%rcx, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbx
               	leaq	11726(%rip), %rdx       # 0x445d93 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	pushq	%rax
               	movq	(%rdi), %rbx
               	movq	-24(%rbx), %r12
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	addq	%rbx, %r12
               	leaq	(%rbx,%rax), %rdi
               	movq	%r12, %rsi
               	callq	0x442ec8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbp)
               	popq	%rdx
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>:
               	pushq	%r12
               	movq	%rdi, %r12
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	movq	(%rdi), %rbp
               	movq	-24(%rbp), %rdx
               	subq	%rsi, %rdx
               	cmpq	%rcx, %rdx
               	cmovbeq	%rdx, %rcx
               	leaq	11642(%rip), %rdx       # 0x445d93 <typeinfo name for kotlin::gc::GCSchedulerData+0x1c5a>
               	movq	%rcx, %rbx
               	addq	%rsi, %rbx
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	addq	%rbp, %rbx
               	leaq	15(%rsp), %rdx
               	leaq	(%rbp,%rax), %rdi
               	movq	%rbx, %rsi
               	callq	0x442ec8 <char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%r12)
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::string::substr(unsigned long, unsigned long) const>:
               	pushq	%rbp
               	movq	%rsi, %rbp
               	movq	%rdx, %rsi
               	leaq	11610(%rip), %rdx       # 0x445dae <typeinfo name for kotlin::gc::GCSchedulerData+0x1c75>
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rbp, %rdi
               	subq	$24, %rsp
               	movq	%rcx, 8(%rsp)
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	8(%rsp), %rcx
               	movq	%rbp, %rsi
               	movq	%rbx, %rdi
               	movq	%rax, %rdx
               	callq	0x442ff0 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)>
               	addq	$24, %rsp
               	movq	%rbx, %rax
               	popq	%rbx
               	popq	%rbp
               	retq

<char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
               	pushq	%r14
               	pushq	%r13
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	cmpq	%rsi, %rdi
               	je	0x4430dc <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x56>
               	movq	%rsi, %rbp
               	movq	%rdi, %rbx
               	testq	%rdi, %rdi
               	je	0x4430d0 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x4a>
               	movq	%rsi, %r14
               	xorl	%esi, %esi
               	subq	%rdi, %r14
               	movq	%r14, %rdi
               	callq	0x441fc8 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdx
               	leaq	24(%rax), %r12
               	movq	%rax, %r13
               	movq	%r12, %rdi
               	callq	0x44171e <std::string::_S_copy_chars(char*, char const*, char const*)>
               	movq	%r14, %rsi
               	movq	%r13, %rdi
               	callq	0x441fa8 <std::string::_Rep::_M_set_length_and_sharable(unsigned long)>
               	jmp	0x4430e7 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x61>
               	leaq	11764(%rip), %rdi       # 0x445ecb <typeinfo name for kotlin::gc::GCSchedulerData+0x1d92>
               	callq	0x441073 <std::__throw_logic_error(char const*)>
               	leaq	238717(%rip), %rax      # 0x47d560 <std::string::_Rep::_S_empty_rep_storage>
               	leaq	24(%rax), %r12
               	popq	%rbx
               	movq	%r12, %rax
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
               	movq	%rsi, %r8
               	pushq	%rbx
               	orq	$-1, %rsi
               	movq	%rdi, %rbx
               	testq	%r8, %r8
               	je	0x443119 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x25>
               	xorl	%eax, %eax
               	movq	%rsi, %rcx
               	movq	%r8, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%rcx, %rax
               	notq	%rax
               	leaq	-1(%r8,%rax), %rsi
               	movq	%r8, %rdi
               	callq	0x443086 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char const*>(char const*, char const*, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	movq	%rcx, %rdx
               	callq	0x443086 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq
               	nop

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x443086 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>:
               	pushq	%r15
               	movq	%rdx, %r15
               	leaq	11124(%rip), %rdx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r14
               	movq	%r8, %r14
               	pushq	%r13
               	movq	%rsi, %r13
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rcx, %rbx
               	subq	$24, %rsp
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	(%rbp), %rax
               	movq	%rbp, %rdi
               	movq	%r14, %rdx
               	leaq	11078(%rip), %rcx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	movq	-24(%rax), %r12
               	subq	%r13, %r12
               	cmpq	%r15, %r12
               	cmovaq	%r15, %r12
               	movq	%r12, %rsi
               	callq	0x441684 <std::string::_M_check_length(unsigned long, unsigned long, char const*) const>
               	movq	%rbx, %rsi
               	movq	%rbp, %rdi
               	callq	0x4416ba <std::string::_M_disjunct(char const*) const>
               	testb	%al, %al
               	je	0x4431d3 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x7b>
               	movq	%rbp, %rdi
               	movq	%r14, %r8
               	movq	%rbx, %rcx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	callq	0x4425ac <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%rax, %rbp
               	jmp	0x443284 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	(%rbp), %rax
               	leaq	-24(%rax), %rdi
               	callq	0x441f8e <std::string::_Rep::_M_is_shared() const>
               	testb	%al, %al
               	jne	0x4431b7 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x5f>
               	movq	(%rbp), %rax
               	leaq	(%rbx,%r14), %rsi
               	leaq	(%rax,%r13), %rcx
               	cmpq	%rcx, %rsi
               	jbe	0x44323d <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	(%r13,%r12), %rdx
               	addq	%rax, %rdx
               	cmpq	%rdx, %rbx
               	jae	0x44323d <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xe5>
               	leaq	8(%rsp), %r15
               	leaq	7(%rsp), %rcx
               	movq	%r14, %rdx
               	movq	%rbx, %rsi
               	movq	%r15, %rdi
               	callq	0x44313e <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)>
               	movq	8(%rsp), %rcx
               	movq	%r14, %r8
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	callq	0x4425ac <std::string::_M_replace_safe(unsigned long, unsigned long, char const*, unsigned long)>
               	movq	%r15, %rdi
               	movq	%rax, %rbp
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	jmp	0x443284 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	subq	%rax, %rbx
               	cmpq	%rcx, %rsi
               	jbe	0x44324b <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0xf3>
               	addq	%r14, %rbx
               	subq	%r12, %rbx
               	movq	%r12, %rdx
               	movq	%r13, %rsi
               	movq	%rbp, %rdi
               	movq	%r14, %rcx
               	callq	0x442164 <std::string::_M_mutate(unsigned long, unsigned long, unsigned long)>
               	movq	(%rbp), %rdi
               	movq	%r14, %rdx
               	leaq	(%rdi,%rbx), %rsi
               	addq	%r13, %rdi
               	callq	0x4416cf <std::string::_M_copy(char*, char const*, unsigned long)>
               	jmp	0x443284 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)+0x12c>
               	movq	%rax, %rbx
               	movq	%r15, %rdi
               	callq	0x442100 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()>
               	movq	%rbx, %rdi
               	callq	0x413740 <_Unwind_Resume@plt>
               	addq	$24, %rsp
               	movq	%rbp, %rax
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq

<std::string::replace(unsigned long, unsigned long, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, std::string const&, unsigned long, unsigned long)>:
               	pushq	%r14
               	movq	%r9, %r14
               	pushq	%r13
               	movq	%rdx, %r13
               	leaq	10789(%rip), %rdx       # 0x445cd8 <typeinfo name for kotlin::gc::GCSchedulerData+0x1b9f>
               	pushq	%r12
               	movq	%rsi, %r12
               	movq	%r8, %rsi
               	pushq	%rbp
               	movq	%rdi, %rbp
               	movq	%rcx, %rdi
               	pushq	%rbx
               	movq	(%rcx), %rbx
               	movq	-24(%rbx), %rax
               	subq	%r8, %rax
               	cmpq	%r9, %rax
               	cmovbeq	%rax, %r14
               	callq	0x44165e <std::string::_M_check(unsigned long, char const*) const>
               	movq	%r13, %rdx
               	movq	%r12, %rsi
               	movq	%rbp, %rdi
               	leaq	(%rbx,%rax), %rcx
               	movq	%r14, %r8
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(unsigned long, unsigned long, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>:
               	subq	%rsi, %rdx
               	subq	(%rdi), %rsi
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::string const&)>:
               	movq	(%rcx), %rcx
               	movq	-24(%rcx), %r8
               	jmp	0x44331a <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*)>:
               	movq	%rcx, %r9
               	movq	%rdi, %r10
               	orq	$-1, %rcx
               	xorl	%eax, %eax
               	movq	%r9, %rdi
               	repne		scasb	%es:(%rdi), %al
               	movq	%r10, %rdi
               	notq	%rcx
               	leaq	-1(%rcx), %r8
               	movq	%r9, %rcx
               	jmp	0x44331a <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, unsigned long)>
               	nop

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char*, char*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, std::initializer_list<char>)>:
               	addq	%rcx, %r8
               	jmp	0x443364 <std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>)>:
               	subq	%rsi, %rdx
               	subq	%rcx, %r8
               	subq	(%rdi), %rsi
               	jmp	0x443158 <std::string::replace(unsigned long, unsigned long, char const*, unsigned long)>

<std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::initializer_list<char>, std::allocator<char> const&)>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	movq	%rsi, %rdi
               	movq	%rdx, %rsi
               	addq	%rdi, %rsi
               	movq	%rcx, %rdx
               	callq	0x443086 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
               	movq	%rax, (%rbx)
               	popq	%rbx
               	retq

<bool __gnu_cxx::operator==<char*, std::string>(__gnu_cxx::__normal_iterator<char*, std::string> const&, __gnu_cxx::__normal_iterator<char*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<bool __gnu_cxx::operator==<char const*, std::string>(__gnu_cxx::__normal_iterator<char const*, std::string> const&, __gnu_cxx::__normal_iterator<char const*, std::string> const&)>:
               	movq	(%rsi), %rax
               	cmpq	%rax, (%rdi)
               	sete	%al
               	retq

<std::random_device::_M_init(std::string const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	11050(%rip), %rsi       # 0x445f02 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x441de6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x443410 <std::random_device::_M_init(std::string const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x443442 <std::random_device::_M_init(std::string const&)+0x7e>
               	testl	%eax, %eax
               	je	0x443442 <std::random_device::_M_init(std::string const&)+0x7e>
               	movl	$1, %eax
               	leaq	10999(%rip), %r12       # 0x445ef5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x443449 <std::random_device::_M_init(std::string const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x443461 <std::random_device::_M_init(std::string const&)+0x9d>
               	leaq	10974(%rip), %rsi       # 0x445ef5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x441de6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x443449 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	10976(%rip), %rsi       # 0x445f0a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x441de6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x443449 <std::random_device::_M_init(std::string const&)+0x85>
               	leaq	10969(%rip), %rdi       # 0x445f16 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x4412e3 <std::__throw_runtime_error(char const*)>
               	leaq	10924(%rip), %r12       # 0x445ef5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10999(%rip), %rsi       # 0x445f47 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c50 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x443436 <std::random_device::_M_init(std::string const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_init_pretr1(std::string const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10965(%rip), %rsi       # 0x445f4a <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x441de6 <std::string::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4434b2 <std::random_device::_M_init_pretr1(std::string const&)+0x4c>
               	movq	(%rbx), %rbx
               	xorl	%edx, %edx
               	leaq	8(%rsp), %rsi
               	movq	%rbx, %rdi
               	callq	0x413c60 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	je	0x4434a6 <std::random_device::_M_init_pretr1(std::string const&)+0x40>
               	movq	8(%rsp), %rdx
               	cmpb	$0, (%rdx)
               	je	0x4434b7 <std::random_device::_M_init_pretr1(std::string const&)+0x51>
               	leaq	10857(%rip), %rdi       # 0x445f16 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x4412e3 <std::__throw_runtime_error(char const*)>
               	movl	$5489, %eax             # imm = 0x1571
               	movq	%rbp, %rdi
               	movq	%rax, %rsi
               	callq	0x4436dc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::bad_cast::what() const>:
               	leaq	10881(%rip), %rax       # 0x445f52 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e19>
               	retq

<std::bad_cast::~bad_cast()>:
               	leaq	124911(%rip), %rax      # 0x461cc8 <vtable for std::bad_cast>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::bad_cast::~bad_cast()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x4434d2 <std::bad_cast::~bad_cast()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>
               	nop

<std::bad_typeid::what() const>:
               	leaq	10843(%rip), %rax       # 0x445f60 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e27>
               	retq

<std::bad_typeid::~bad_typeid()>:
               	leaq	124923(%rip), %rax      # 0x461d08 <vtable for std::bad_typeid>
               	addq	$16, %rax
               	movq	%rax, (%rdi)
               	jmp	0x43c760 <std::exception::~exception()>
               	nop

<std::bad_typeid::~bad_typeid()>:
               	pushq	%rbx
               	movq	%rdi, %rbx
               	callq	0x443506 <std::bad_typeid::~bad_typeid()>
               	movq	%rbx, %rdi
               	movl	$8, %esi
               	popq	%rbx
               	jmp	0x43cb64 <operator delete(void*, unsigned long)>

<std::(anonymous namespace)::__x86_rdrand()>:
               	subq	$24, %rsp
               	movl	$100, %edx
               	movl	$1, %ecx
               	rdrandl	%eax
               	movl	%eax, 12(%rsp)
               	cmovbl	%ecx, %eax
               	testl	%eax, %eax
               	jne	0x44355d <std::(anonymous namespace)::__x86_rdrand()+0x2c>
               	decl	%edx
               	jne	0x44353f <std::(anonymous namespace)::__x86_rdrand()+0xe>
               	leaq	10776(%rip), %rdi       # 0x445f70 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e37>
               	callq	0x4412e3 <std::__throw_runtime_error(char const*)>
               	movl	12(%rsp), %eax
               	addq	$24, %rsp
               	retq

<std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%r12
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	(%rsi), %r12
               	leaq	10632(%rip), %rsi       # 0x445f02 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dc9>
               	movq	%rbx, %rdi
               	callq	0x43f61a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	jne	0x4435b2 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
               	cpuid
               	cmpl	$1970169159, %ebx       # imm = 0x756E6547
               	jne	0x4435e4 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	testl	%eax, %eax
               	je	0x4435e4 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x7e>
               	movl	$1, %eax
               	leaq	10581(%rip), %r12       # 0x445ef5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	cpuid
               	btl	$30, %ecx
               	jae	0x4435eb <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	movq	$0, (%rbp)
               	jmp	0x443603 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9d>
               	leaq	10556(%rip), %rsi       # 0x445ef5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	movq	%rbx, %rdi
               	callq	0x43f61a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4435eb <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10558(%rip), %rsi       # 0x445f0a <typeinfo name for kotlin::gc::GCSchedulerData+0x1dd1>
               	movq	%rbx, %rdi
               	callq	0x43f61a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	testl	%eax, %eax
               	je	0x4435eb <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x85>
               	leaq	10551(%rip), %rdi       # 0x445f16 <typeinfo name for kotlin::gc::GCSchedulerData+0x1ddd>
               	callq	0x4412e3 <std::__throw_runtime_error(char const*)>
               	leaq	10506(%rip), %r12       # 0x445ef5 <typeinfo name for kotlin::gc::GCSchedulerData+0x1dbc>
               	leaq	10581(%rip), %rsi       # 0x445f47 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e0e>
               	movq	%r12, %rdi
               	callq	0x413c50 <fopen@plt>
               	movq	%rax, (%rbp)
               	testq	%rax, %rax
               	je	0x4435d8 <std::random_device::_M_init(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x72>
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq

<std::random_device::_M_fini()>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x443615 <std::random_device::_M_fini()+0xd>
               	jmp	0x413c70 <fclose@plt>
               	retq

<std::random_device::_M_getval()>:
               	pushq	%r12
               	pushq	%rbp
               	pushq	%rbx
               	subq	$16, %rsp
               	cmpq	$0, (%rdi)
               	jne	0x44362b <std::random_device::_M_getval()+0x15>
               	callq	0x443531 <std::(anonymous namespace)::__x86_rdrand()>
               	jmp	0x44367c <std::random_device::_M_getval()+0x66>
               	movq	%rdi, %r12
               	movl	$4, %ebx
               	leaq	12(%rsp), %rbp
               	movq	(%r12), %rdi
               	callq	0x413c80 <fileno@plt>
               	movq	%rbx, %rdx
               	movq	%rbp, %rsi
               	movl	%eax, %edi
               	callq	0x413c90 <read@plt>
               	testl	%eax, %eax
               	jle	0x443662 <std::random_device::_M_getval()+0x4c>
               	cltq
               	addq	%rax, %rbp
               	subq	%rax, %rbx
               	jne	0x443638 <std::random_device::_M_getval()+0x22>
               	movl	12(%rsp), %eax
               	jmp	0x44367c <std::random_device::_M_getval()+0x66>
               	incl	%eax
               	jne	0x443670 <std::random_device::_M_getval()+0x5a>
               	callq	0x413880 <__errno_location@plt>
               	cmpl	$4, (%rax)
               	je	0x443638 <std::random_device::_M_getval()+0x22>
               	leaq	10523(%rip), %rdi       # 0x445f92 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e59>
               	callq	0x4412e3 <std::__throw_runtime_error(char const*)>
               	addq	$16, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::random_device::_M_getentropy() const>:
               	movq	(%rdi), %rdi
               	testq	%rdi, %rdi
               	je	0x4436d7 <std::random_device::_M_getentropy() const+0x51>
               	subq	$24, %rsp
               	callq	0x413c80 <fileno@plt>
               	testl	%eax, %eax
               	jns	0x4436a0 <std::random_device::_M_getentropy() const+0x1a>
               	xorps	%xmm0, %xmm0
               	jmp	0x4436d2 <std::random_device::_M_getentropy() const+0x4c>
               	movl	%eax, %edi
               	leaq	12(%rsp), %rdx
               	xorl	%eax, %eax
               	movl	$2147766784, %esi       # imm = 0x80045200
               	callq	0x413ca0 <ioctl@plt>
               	testl	%eax, %eax
               	js	0x44369b <std::random_device::_M_getentropy() const+0x15>
               	movl	12(%rsp), %eax
               	testl	%eax, %eax
               	js	0x44369b <std::random_device::_M_getentropy() const+0x15>
               	cmpl	$32, %eax
               	jle	0x4436cc <std::random_device::_M_getentropy() const+0x46>
               	movl	$32, 12(%rsp)
               	cvtsi2sdl	12(%rsp), %xmm0
               	addq	$24, %rsp
               	retq
               	xorps	%xmm0, %xmm0
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>:
               	andl	$-1, %esi
               	movl	$1, %edx
               	movq	%rsi, (%rdi)
               	movq	-8(%rdi,%rdx,8), %rcx
               	movq	%rcx, %rax
               	shrq	$30, %rax
               	xorq	%rcx, %rax
               	imulq	$1812433253, %rax, %rax # imm = 0x6C078965
               	addl	%edx, %eax
               	movq	%rax, (%rdi,%rdx,8)
               	incq	%rdx
               	cmpq	$624, %rdx              # imm = 0x270
               	jne	0x4436e7 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)+0xb>
               	movq	$624, 4992(%rdi)        # imm = 0x270
               	retq
               	nop

<std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	leaq	10271(%rip), %rsi       # 0x445f4a <typeinfo name for kotlin::gc::GCSchedulerData+0x1e11>
               	movq	%rbx, %rdi
               	subq	$24, %rsp
               	callq	0x43f61a <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const>
               	movl	$5489, %esi             # imm = 0x1571
               	testl	%eax, %eax
               	je	0x443770 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	movq	(%rbx), %rbx
               	leaq	8(%rsp), %rsi
               	xorl	%edx, %edx
               	movq	%rbx, %rdi
               	callq	0x413c60 <strtoul@plt>
               	cmpb	$0, (%rbx)
               	movq	%rax, %rsi
               	je	0x443764 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
               	movq	8(%rsp), %rax
               	cmpb	$0, (%rax)
               	je	0x443770 <std::random_device::_M_init_pretr1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
               	leaq	10311(%rip), %rdi       # 0x445fb2 <typeinfo name for kotlin::gc::GCSchedulerData+0x1e79>
               	callq	0x4412e3 <std::__throw_runtime_error(char const*)>
               	movq	%rbp, %rdi
               	callq	0x4436dc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>
               	addq	$24, %rsp
               	popq	%rbx
               	popq	%rbp
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::mersenne_twister_engine(unsigned long)>:
               	jmp	0x4436dc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)>

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::min()>:
               	xorl	%eax, %eax
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::max()>:
               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>:
               	xorl	%eax, %eax
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	3168(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x4437c6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x38>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$227, %rax
               	jne	0x443795 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7>
               	movl	$2567483615, %esi       # imm = 0x9908B0DF
               	movq	(%rdi,%rax,8), %rcx
               	incq	%rax
               	movq	(%rdi,%rax,8), %rdx
               	andq	$-2147483648, %rcx      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rcx, %rdx
               	movq	%rdx, %rcx
               	shrq	%rcx
               	xorq	-1824(%rdi,%rax,8), %rcx
               	andl	$1, %edx
               	je	0x44380c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x7e>
               	movq	%rsi, %rdx
               	xorq	%rcx, %rdx
               	movq	%rdx, -8(%rdi,%rax,8)
               	cmpq	$623, %rax              # imm = 0x26F
               	jne	0x4437db <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0x4d>
               	movq	4984(%rdi), %rax
               	movq	(%rdi), %rdx
               	andq	$-2147483648, %rax      # imm = 0x80000000
               	andl	$2147483647, %edx       # imm = 0x7FFFFFFF
               	orq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	%rdx
               	xorq	3168(%rdi), %rdx
               	andl	$1, %eax
               	je	0x44384c <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()+0xbe>
               	movl	$2567483615, %eax       # imm = 0x9908B0DF
               	movq	$0, 4992(%rdi)
               	xorq	%rdx, %rax
               	movq	%rax, 4984(%rdi)
               	retq

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)>:
               	pushq	%r12
               	movl	$624, %r12d             # imm = 0x270
               	pushq	%rbp
               	movq	%rdi, %rbp
               	pushq	%rbx
               	movq	%rsi, %rbx
               	movq	4992(%rbp), %rax
               	movq	%r12, %rdx
               	subq	%rax, %rdx
               	cmpq	%rbx, %rdx
               	jae	0x443896 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x34>
               	movq	%rbp, %rdi
               	leaq	-624(%rax,%rbx), %rbx
               	callq	0x44378e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	jmp	0x443872 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::discard(unsigned long long)+0x10>
               	addq	%rbx, %rax
               	popq	%rbx
               	movq	%rax, 4992(%rbp)
               	popq	%rbp
               	popq	%r12
               	retq
               	nop

<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>:
               	cmpq	$623, 4992(%rdi)        # imm = 0x26F
               	pushq	%rbx
               	movq	%rdi, %rbx
               	jbe	0x4438bc <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()+0x16>
               	callq	0x44378e <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()>
               	movq	4992(%rbx), %rax
               	leaq	1(%rax), %rdx
               	movq	(%rbx,%rax,8), %rax
               	movq	%rdx, 4992(%rbx)
               	popq	%rbx
               	movq	%rax, %rcx
               	shrq	$11, %rcx
               	movl	%ecx, %edx
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$7, %rax
               	andl	$2636928640, %eax       # imm = 0x9D2C5680
               	xorq	%rax, %rdx
               	movq	%rdx, %rax
               	shlq	$15, %rax
               	andl	$4022730752, %eax       # imm = 0xEFC60000
               	xorq	%rdx, %rax
               	movq	%rax, %rdx
               	shrq	$18, %rdx
               	xorq	%rdx, %rax
               	retq

<std::random_device::_M_getval_pretr1()>:
               	pushq	%rax
               	callq	0x4438a6 <std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()>
               	popq	%rdx
               	retq
               	nop
		...
               	addb	%al, (%rax)

<__libc_csu_init>:
               	pushq	%r15
               	movq	%rdx, %r15
               	pushq	%r14
               	movq	%rsi, %r14
               	pushq	%r13
               	movl	%edi, %r13d
               	pushq	%r12
               	leaq	123896(%rip), %r12      # 0x461d30 <__init_array_start>
               	pushq	%rbp
               	leaq	123960(%rip), %rbp      # 0x461d78 <_DYNAMIC>
               	pushq	%rbx
               	subq	%r12, %rbp
               	subq	$8, %rsp
               	callq	0x413680 <_init>
               	sarq	$3, %rbp
               	je	0x44396e <__libc_csu_init+0x4e>
               	xorl	%ebx, %ebx
               	nopl	(%rax)
               	movq	%r15, %rdx
               	movq	%r14, %rsi
               	movl	%r13d, %edi
               	callq	*(%r12,%rbx,8)
               	addq	$1, %rbx
               	cmpq	%rbx, %rbp
               	jne	0x443958 <__libc_csu_init+0x38>
               	addq	$8, %rsp
               	popq	%rbx
               	popq	%rbp
               	popq	%r12
               	popq	%r13
               	popq	%r14
               	popq	%r15
               	retq
               	nopl	(%rax)

<__libc_csu_fini>:
               	retq
               	nopw	%cs:(%rax,%rax)

<atexit>:
               	leaq	125297(%rip), %rax      # 0x462308 <__dso_handle>
               	xorl	%edx, %edx
               	testq	%rax, %rax
               	je	0x4439a1 <atexit+0x11>
               	movq	(%rax), %rdx
               	xorl	%esi, %esi
               	jmp	0x413b50 <__cxa_atexit@plt>

<__do_global_ctors_aux>:
               	pushq	%rbp
               	movq	%rsp, %rbp
               	pushq	%rbx
               	movl	$4554440, %ebx          # imm = 0x457EC8
               	pushq	%rdx
               	movq	(%rbx), %rax
               	cmpq	$-1, %rax
               	je	0x4439c4 <__do_global_ctors_aux+0x1c>
               	callq	*%rax
               	subq	$8, %rbx
               	jmp	0x4439b3 <__do_global_ctors_aux+0xb>
               	popq	%rax
               	popq	%rbx
               	popq	%rbp
               	retq

Disassembly of section .fini:

<_fini>:
               	subq	$8, %rsp
               	callq	0x4151fa <__do_global_dtors_aux>
               	addq	$8, %rsp
               	retq
