--- ../../benchmarkAnalysis/Ring::String.summarizeSplittedCsv/linuxX64/baseline/bincode/bincode.asm	2023-07-19 02:48:11.000637593 +0200
+++ ../../benchmarkAnalysis/Ring::String.summarizeSplittedCsv/linuxX64/unordered/bincode/bincode.asm	2023-07-19 03:00:00.560414724 +0200

@@ -1,5 +1,5 @@
@@@[(1, 3)]@@@
-../../benchmarkAnalysis/Ring::String.summarizeSplittedCsv/linuxX64/baseline/main.kexe:	file format elf64-x86-64
+../../benchmarkAnalysis/Ring::String.summarizeSplittedCsv/linuxX64/unordered/main.kexe:	file format elf64-x86-64

@@ -54,17 +54,17 @@
@@@[(3, 5), (9, 11), (15, 17)]@@@
-<strlen@plt>:
+<free@plt>:
@@@@
-<memcpy@plt>:
+<strlen@plt>:
@@@@
-<free@plt>:
+<memcpy@plt>:

@@ -523,41 +523,41 @@
@@@[(3, 5)]@@@
-               	subq	$248, %rsp
+               	subq	$264, %rsp              # imm = 0x108

@@ -571,13 +571,13 @@
@@@[(11, 13)]@@@
-               	leaq	160(%r13), %r12
+               	leaq	160(%r13), %r14

@@ -610,15 +610,15 @@
@@@[(9, 13)]@@@
-               	movq	%r12, 128(%rbx)
-               	leaq	349353(%rip), %rax      # 0x4694b0 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
+               	movq	%r14, 128(%rbx)
+               	leaq	352521(%rip), %rax      # 0x46a110 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>

@@ -626,78 +626,76 @@
@@@[(14, 22), (23, 55), (58, 64), (65, 74), (76, 78), (79, 90), (105, 109), (110, 112), (114, 118)]@@@
-               	movq	168(%r13), %r14
-               	movq	%r12, 208(%rsp)
-               	leaq	349389(%rip), %rax      # 0x469570 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
+               	movq	168(%r13), %r12
+               	movq	%r14, 216(%rsp)
+               	leaq	352557(%rip), %rax      # 0x46a1d0 <std::_Function_handler<void (), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_invoke(std::_Any_data const&)>
+               	movq	%rax, 240(%rsp)
+               	leaq	352558(%rip), %rax      # 0x46a1e0 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
@@@@
-               	leaq	349390(%rip), %rax      # 0x469580 <std::_Function_base::_Base_manager<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
-               	movq	%rax, 224(%rsp)
-               	movdqu	224(%rsp), %xmm0
-               	movq	$0, 224(%rsp)
-               	movups	72(%r14), %xmm1
-               	movaps	%xmm1, 48(%rsp)
-               	movq	208(%rsp), %rax
-               	movq	%rax, 72(%r14)
-               	movq	216(%rsp), %rax
-               	movq	%rax, 80(%r14)
-               	movdqu	88(%r14), %xmm1
-               	movdqa	%xmm1, 64(%rsp)
-               	movdqu	%xmm0, 88(%r14)
-               	movq	%xmm1, %rcx
-               	testq	%rcx, %rcx
-               	je	0x414163 <_GLOBAL__sub_I_GlobalData.cpp+0x3e3>
+               	movq	232(%rsp), %rax
+               	movq	240(%rsp), %rcx
+               	movq	$0, 232(%rsp)
+               	movups	72(%r12), %xmm0
+               	movaps	%xmm0, 48(%rsp)
+               	movq	216(%rsp), %rdx
+               	movq	%rdx, 72(%r12)
+               	movq	224(%rsp), %rdx
+               	movq	%rdx, 80(%r12)
+               	movdqu	88(%r12), %xmm0
+               	movdqa	%xmm0, 64(%rsp)
+               	movq	%rax, 88(%r12)
+               	movq	%rcx, 96(%r12)
+               	movq	%xmm0, %rax
+               	testq	%rax, %rax
+               	je	0x41412b <_GLOBAL__sub_I_GlobalData.cpp+0x3ab>
@@@@
-               	callq	*%rcx
-               	movq	88(%r14), %rcx
-               	movq	$0, 192(%rsp)
+               	callq	*%rax
+               	movq	$0, 200(%rsp)
+               	movq	88(%r12), %rcx
@@@@
-               	movq	%rbp, 240(%rsp)
-               	je	0x414181 <_GLOBAL__sub_I_GlobalData.cpp+0x401>
-               	leaq	72(%r14), %rsi
-               	leaq	176(%rsp), %rdi
+               	movq	%rbp, 248(%rsp)
+               	movq	%r14, 256(%rsp)
+               	je	0x41417d <_GLOBAL__sub_I_GlobalData.cpp+0x3fd>
+               	leaq	72(%r12), %rsi
+               	leaq	184(%rsp), %rdi
@@@@
-               	movups	88(%r14), %xmm0
+               	movups	88(%r12), %xmm0
@@@@
-               	movups	%xmm0, 192(%rsp)
-               	jmp	0x414191 <_GLOBAL__sub_I_GlobalData.cpp+0x411>
-               	movq	%xmm0, %rcx
-               	movq	$0, 192(%rsp)
-               	testq	%rcx, %rcx
-               	movq	%rbp, 240(%rsp)
-               	jne	0x414139 <_GLOBAL__sub_I_GlobalData.cpp+0x3b9>
-               	movups	192(%rsp), %xmm0
+               	movups	%xmm0, 200(%rsp)
+               	jmp	0x41418d <_GLOBAL__sub_I_GlobalData.cpp+0x40d>
+               	movups	200(%rsp), %xmm0
@@@@
-               	movq	%r14, 8(%rbx)
-               	leaq	892484(%rip), %rax      # 0x4ee028 <kotlin::mm::GlobalData::instance_+0x50>
+               	movq	%r12, 8(%rbx)
+               	leaq	894416(%rip), %rax      # 0x4ee7b0 <kotlin::mm::GlobalData::instance_+0x50>
@@@@
-               	movq	%r14, 24(%rbx)
+               	movq	%r12, 24(%rbx)
@@@@
-               	movq	%r14, 48(%rbx)
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
+               	movq	%r12, 48(%rbx)
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>

@@ -717,22 +715,22 @@
@@@[(6, 10), (11, 13), (23, 25)]@@@
-               	movabsq	$9223372036854775807, %r15 # imm = 0x7FFFFFFFFFFFFFFF
-               	leaq	1(%r15), %rax
+               	movabsq	$9223372036854775807, %r14 # imm = 0x7FFFFFFFFFFFFFFF
+               	leaq	1(%r14), %rax
@@@@
-               	cmovnsq	%r15, %rax
+               	cmovnsq	%r14, %rax
@@@@
-               	addq	%r15, %rdx
+               	addq	%r14, %rdx

@@ -748,185 +746,244 @@
@@@[(3, 7), (14, 61), (73, 84), (85, 106), (109, 111), (128, 135), (139, 146), (154, 158), (187, 189), (193, 196), (201, 244), (245, 249), (255, 258), (263, 267), (270, 274), (277, 279), (282, 284), (303, 319), (323, 330), (331, 335)]@@@
-               	movw	$256, 31(%rsp)          # imm = 0x100
+               	movq	(%rsp), %rbp
+               	movb	$0, 15(%rbp)
+               	movb	$1, 32(%rsp)
@@@@
-               	leaq	96(%rsp), %rbp
-               	movq	%rbp, 80(%rsp)
-               	movq	16(%rsp), %rax
-               	movq	23(%rsp), %rcx
-               	movq	%rax, 96(%rsp)
-               	movq	%rcx, 103(%rsp)
-               	movq	$15, 88(%rsp)
-               	movw	$256, 111(%rsp)         # imm = 0x100
-               	leaq	338092(%rip), %r15      # 0x466c20 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
-               	movq	%r15, 120(%rsp)
+               	movb	$0, 112(%rsp)
+               	cmpb	$0, 32(%rsp)
+               	je	0x414395 <_GLOBAL__sub_I_GlobalData.cpp+0x615>
+               	leaq	96(%rsp), %rax
+               	movq	%rax, 80(%rsp)
+               	movq	8(%rsp), %r15
+               	cmpq	$15, %r15
+               	jbe	0x414383 <_GLOBAL__sub_I_GlobalData.cpp+0x603>
+               	testq	%r15, %r15
+               	js	0x41474e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
+               	leaq	1(%r15), %rdi
+               	movl	$1, %esi
+               	callq	0x4137b0 <calloc@plt>
+               	movq	%rax, 80(%rsp)
+               	movq	%r15, 96(%rsp)
+               	testq	%r15, %r15
+               	je	0x4143ab <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
+               	cmpq	$1, %r15
+               	jne	0x41439d <_GLOBAL__sub_I_GlobalData.cpp+0x61d>
+               	movb	(%rbp), %cl
+               	movb	%cl, (%rax)
+               	jmp	0x4143ab <_GLOBAL__sub_I_GlobalData.cpp+0x62b>
+               	movb	$1, %r14b
+               	xorl	%r15d, %r15d
+               	jmp	0x4143c5 <_GLOBAL__sub_I_GlobalData.cpp+0x645>
+               	movq	%rax, %rdi
+               	movq	%rbp, %rsi
+               	movq	%r15, %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%r15, 88(%rsp)
+               	movq	80(%rsp), %rax
+               	movb	$0, (%rax,%r15)
+               	movb	$1, 112(%rsp)
+               	movb	$1, %r15b
+               	xorl	%r14d, %r14d
+               	leaq	340900(%rip), %rbp      # 0x467770 <std::invoke_result<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>::type kotlin::ScopedThread::Run<void (kotlin::RepeatedTimer<kotlin::steady_clock>::*)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()>(kotlin::ScopedThread::attributes, void (kotlin::RepeatedTimer<kotlin::steady_clock>::*&&)(kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&) noexcept, kotlin::RepeatedTimer<kotlin::steady_clock>*&&, kotlin::gc::internal::GCSchedulerDataWithTimer<kotlin::steady_clock>::GCSchedulerDataWithTimer(kotlin::gc::GCSchedulerConfig&, std::function<void ()>)::'lambda'()&&)>
+               	movq	%rbp, 120(%rsp)
@@@@
-               	movq	%rax, %rcx
-               	addq	$56, %rcx
-               	movq	%rcx, 40(%rax)
-               	movq	80(%rsp), %rdx
-               	cmpq	%rbp, %rdx
-               	je	0x4143d0 <_GLOBAL__sub_I_GlobalData.cpp+0x650>
+               	testb	%r14b, %r14b
+               	leaq	16(%rsp), %r14
+               	jne	0x41445f <_GLOBAL__sub_I_GlobalData.cpp+0x6df>
+               	movq	%rax, %rdx
+               	addq	$56, %rdx
@@@@
-               	movq	96(%rsp), %rcx
-               	movq	%rcx, 56(%rax)
-               	jmp	0x4143d9 <_GLOBAL__sub_I_GlobalData.cpp+0x659>
-               	movdqu	(%rbp), %xmm0
-               	movdqu	%xmm0, (%rcx)
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 48(%rax)
-               	movq	%rbp, 80(%rsp)
+               	movq	80(%rsp), %rsi
+               	leaq	96(%rsp), %rcx
+               	cmpq	%rcx, %rsi
+               	je	0x414437 <_GLOBAL__sub_I_GlobalData.cpp+0x6b7>
+               	movq	%rsi, 40(%rax)
+               	movq	96(%rsp), %rdx
+               	movq	%rdx, 56(%rax)
+               	jmp	0x41443f <_GLOBAL__sub_I_GlobalData.cpp+0x6bf>
+               	movdqu	(%rcx), %xmm0
+               	movdqu	%xmm0, (%rdx)
+               	movq	88(%rsp), %rdx
+               	movq	%rdx, 48(%rax)
+               	movq	%rcx, 80(%rsp)
@@@@
-               	movq	%r15, 80(%rax)
+               	movq	%rbp, 80(%rax)
@@@@
-               	cmpq	%rbp, %rdi
-               	je	0x414442 <_GLOBAL__sub_I_GlobalData.cpp+0x6c2>
-               	callq	0x4137e0 <free@plt>
+               	leaq	96(%rsp), %rax
+               	cmpq	%rax, %rdi
+               	je	0x4144ad <_GLOBAL__sub_I_GlobalData.cpp+0x72d>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	leaq	16(%rsp), %rax
-               	cmpq	%rax, %rdi
-               	je	0x41445c <_GLOBAL__sub_I_GlobalData.cpp+0x6dc>
-               	callq	0x4137e0 <free@plt>
+               	cmpq	%r14, %rdi
+               	je	0x4144c2 <_GLOBAL__sub_I_GlobalData.cpp+0x742>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	movq	64(%r14), %rbp
-               	movq	%rbx, 64(%r14)
+               	movq	64(%r12), %rbp
+               	movq	%rbx, 64(%r12)
@@@@
-               	movq	%r13, %r15
-               	addq	$480, %r15              # imm = 0x1E0
@@@@
-               	leaq	16(%rsp), %rax
-               	movq	%rax, (%rsp)
+               	movq	%r14, (%rsp)
@@@@
-               	movq	$0, 176(%rsp)
-               	movq	%r12, 48(%rsp)
-               	leaq	72(%rsp), %rbx
-               	movq	%rbx, 56(%rsp)
-               	movq	%rax, 72(%rsp)
-               	movw	$100, 80(%rsp)
-               	movq	$9, 64(%rsp)
+               	movq	$0, 184(%rsp)
+               	movq	256(%rsp), %rax
+               	movq	%rax, 48(%rsp)
+               	movb	$0, 88(%rsp)
+               	leaq	72(%rsp), %rbp
+               	movq	%rbp, 56(%rsp)
+               	movq	8(%rsp), %rbx
+               	cmpq	$15, %rbx
+               	jbe	0x4145da <_GLOBAL__sub_I_GlobalData.cpp+0x85a>
+               	testq	%rbx, %rbx
+               	js	0x41474e <_GLOBAL__sub_I_GlobalData.cpp+0x9ce>
+               	leaq	1(%rbx), %rdi
+               	movl	$1, %esi
+               	callq	0x4137b0 <calloc@plt>
+               	movq	%rax, 56(%rsp)
+               	movq	%rbx, 72(%rsp)
+               	testq	%rbx, %rbx
+               	jne	0x4145e2 <_GLOBAL__sub_I_GlobalData.cpp+0x862>
+               	jmp	0x4145fe <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
+               	movq	%rbp, %rax
+               	testq	%rbx, %rbx
+               	je	0x4145fe <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
+               	cmpq	$1, %rbx
+               	jne	0x4145f0 <_GLOBAL__sub_I_GlobalData.cpp+0x870>
+               	movb	16(%rsp), %cl
+               	movb	%cl, (%rax)
+               	jmp	0x4145fe <_GLOBAL__sub_I_GlobalData.cpp+0x87e>
+               	movq	%rax, %rdi
+               	movq	%r14, %rsi
+               	movq	%rbx, %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%r13, %r12
+               	addq	$480, %r12              # imm = 0x1E0
+               	movq	%rbx, 64(%rsp)
+               	movq	56(%rsp), %rax
+               	movb	$0, (%rax,%rbx)
@@@@
-               	leaq	348238(%rip), %rbp      # 0x4695b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
-               	movq	%rbp, 96(%rsp)
+               	leaq	351214(%rip), %rbx      # 0x46a210 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)>
+               	movq	%rbx, 96(%rsp)
@@@@
-               	movq	%r12, 8(%rax)
+               	movq	48(%rsp), %rcx
+               	movq	%rcx, 8(%rax)
@@@@
-               	cmpq	%rbx, %rdx
-               	je	0x4145a7 <_GLOBAL__sub_I_GlobalData.cpp+0x827>
+               	cmpq	%rbp, %rdx
+               	je	0x41466c <_GLOBAL__sub_I_GlobalData.cpp+0x8ec>
@@@@
-               	jmp	0x4145af <_GLOBAL__sub_I_GlobalData.cpp+0x82f>
-               	movdqu	(%rbx), %xmm0
+               	jmp	0x414675 <_GLOBAL__sub_I_GlobalData.cpp+0x8f5>
+               	movdqu	(%rbp), %xmm0
@@@@
-               	movq	%rbx, 56(%rsp)
+               	movq	%rbp, 56(%rsp)
@@@@
-               	movq	%rbp, 56(%rax)
+               	movq	%rbx, 56(%rax)
@@@@
-               	cmpq	%rbx, %rdi
-               	je	0x41462c <_GLOBAL__sub_I_GlobalData.cpp+0x8ac>
-               	callq	0x4137e0 <free@plt>
-               	cmpq	$0, (%r15)
-               	jne	0x4148df <_GLOBAL__sub_I_GlobalData.cpp+0xb5f>
-               	movq	176(%rsp), %rax
-               	movq	%rax, (%r15)
-               	movq	$0, 176(%rsp)
+               	cmpq	%rbp, %rdi
+               	je	0x4146f2 <_GLOBAL__sub_I_GlobalData.cpp+0x972>
+               	callq	0x4137c0 <free@plt>
+               	cmpq	$0, (%r12)
+               	jne	0x4149a9 <_GLOBAL__sub_I_GlobalData.cpp+0xc29>
+               	movq	184(%rsp), %rax
+               	movq	%rax, (%r12)
+               	movq	$0, 184(%rsp)
@@@@
-               	leaq	16(%rsp), %rax
-               	cmpq	%rax, %rdi
-               	je	0x414667 <_GLOBAL__sub_I_GlobalData.cpp+0x8e7>
-               	callq	0x4137e0 <free@plt>
+               	cmpq	%r14, %rdi
+               	je	0x41472a <_GLOBAL__sub_I_GlobalData.cpp+0x9aa>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	movq	%r13, 891495(%rip)      # 0x4ee0e0 <kotlin::mm::GlobalData::instance_+0x108>
-               	addq	$248, %rsp
+               	movq	%r13, 893228(%rip)      # 0x4ee868 <kotlin::mm::GlobalData::instance_+0x108>
+               	addq	$264, %rsp              # imm = 0x108

@@ -934,185 +991,187 @@
@@@[(3, 5), (49, 55), (59, 66), (92, 102), (118, 128), (132, 136), (148, 152), (175, 181), (194, 202), (217, 221), (238, 243), (244, 246), (247, 254), (271, 272)]@@@
+               	leaq	494453(%rip), %rdi      # 0x48d2ca <typeinfo name for kotlin::gc::GCSchedulerData+0x19b9>
+               	callq	0x47a660 <std::__throw_length_error(char const*)>
@@@@
-               	cmpq	%rbx, %rdi
-               	je	0x414724 <_GLOBAL__sub_I_GlobalData.cpp+0x9a4>
-               	callq	0x4137e0 <free@plt>
+               	cmpq	%rbp, %rdi
+               	je	0x4147f3 <_GLOBAL__sub_I_GlobalData.cpp+0xa73>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	leaq	16(%rsp), %rax
-               	cmpq	%rax, %rdi
-               	je	0x41473e <_GLOBAL__sub_I_GlobalData.cpp+0x9be>
-               	callq	0x4137e0 <free@plt>
+               	cmpq	%r14, %rdi
+               	je	0x414808 <_GLOBAL__sub_I_GlobalData.cpp+0xa88>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	leaq	40(%rbx), %r12
-               	movq	%r12, %rdi
-               	callq	0x482808 <std::condition_variable::notify_all()>
-               	cmpq	$0, 882707(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x4147af <_GLOBAL__sub_I_GlobalData.cpp+0xa2f>
+               	leaq	40(%rbx), %r15
+               	movq	%r15, %rdi
+               	callq	0x483ad8 <std::condition_variable::notify_all()>
+               	cmpq	$0, 882505(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x414879 <_GLOBAL__sub_I_GlobalData.cpp+0xaf9>
@@@@
-               	movq	%r12, %rdi
-               	callq	0x482808 <std::condition_variable::notify_all()>
-               	cmpq	$0, 882633(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	jne	0x414780 <_GLOBAL__sub_I_GlobalData.cpp+0xa00>
-               	jmp	0x414809 <_GLOBAL__sub_I_GlobalData.cpp+0xa89>
+               	movq	%r15, %rdi
+               	callq	0x483ad8 <std::condition_variable::notify_all()>
+               	cmpq	$0, 882431(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	jne	0x41484a <_GLOBAL__sub_I_GlobalData.cpp+0xaca>
+               	jmp	0x4148d3 <_GLOBAL__sub_I_GlobalData.cpp+0xb53>
@@@@
-               	movq	%r12, %rdi
-               	callq	0x482808 <std::condition_variable::notify_all()>
+               	movq	%r15, %rdi
+               	callq	0x483ad8 <std::condition_variable::notify_all()>
@@@@
-               	callq	0x4827da <std::condition_variable::~condition_variable()>
-               	leaq	16(%rbx), %r12
+               	callq	0x483aaa <std::condition_variable::~condition_variable()>
+               	leaq	16(%rbx), %r15
@@@@
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
-               	movq	%r12, %rdi
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	movq	%r15, %rdi
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
@@@@
-               	movq	%r15, %rdi
-               	callq	0x4670b0 <kotlin::ScopedThread::~ScopedThread()>
-               	movq	240(%rsp), %rdi
-               	callq	0x46a810 <GCStateHolder::~GCStateHolder()>
+               	movq	%r12, %rdi
+               	callq	0x467c00 <kotlin::ScopedThread::~ScopedThread()>
+               	movq	248(%rsp), %rdi
+               	callq	0x46b520 <GCStateHolder::~GCStateHolder()>
@@@@
-               	movq	(%rbx), %rdi
-               	callq	0x4670a0 <std::thread::~thread()>
+               	movq	%rbx, %rdi
+               	callq	0x467bf0 <std::thread::~thread()>
@@@@
-               	cmpb	$0, 112(%rsp)
-               	jne	0x414946 <_GLOBAL__sub_I_GlobalData.cpp+0xbc6>
-               	jmp	0x414955 <_GLOBAL__sub_I_GlobalData.cpp+0xbd5>
+               	movb	112(%rsp), %r15b
+               	jmp	0x414a0e <_GLOBAL__sub_I_GlobalData.cpp+0xc8e>
@@@@
+               	testb	%r15b, %r15b
+               	je	0x414a27 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
@@@@
-               	cmpq	%rbp, %rdi
-               	je	0x414955 <_GLOBAL__sub_I_GlobalData.cpp+0xbd5>
-               	callq	0x4137e0 <free@plt>
+               	leaq	96(%rsp), %rax
+               	cmpq	%rax, %rdi
+               	je	0x414a27 <_GLOBAL__sub_I_GlobalData.cpp+0xca7>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	nop

@@ -1754,160 +1813,95 @@
@@@[(20, 32), (36, 46), (47, 87), (88, 133), (134, 146), (147, 177), (178, 216), (217, 229)]@@@
-               	jne	0x4155b1 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x281>
-               	movl	%r13d, %esi
-               	subl	%ebp, %esi
-               	movl	%esi, %eax
-               	orl	%ebp, %eax
-               	js	0x41559d <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x26d>
+               	jne	0x415587 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x187>
+               	movl	%r13d, %eax
+               	subl	%ebp, %eax
+               	movl	%eax, %ecx
+               	orl	%ebp, %ecx
+               	js	0x415573 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x173>
@@@@
-               	jb	0x41559d <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x26d>
-               	leal	(%rsi,%rbx), %eax
-               	cmpl	8(%r12), %eax
-               	ja	0x41559d <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x26d>
-               	movq	(%r12), %rax
+               	jb	0x415573 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x173>
+               	leal	(%rax,%rbx), %ecx
+               	cmpl	8(%r12), %ecx
+               	ja	0x415573 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x173>
+               	movq	(%r12), %rcx
@@@@
-               	jge	0x415447 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x117>
-               	testl	%esi, %esi
-               	jle	0x41558b <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25b>
-               	movl	%esi, %edx
-               	movl	%ebx, %eax
-               	movslq	%ebp, %r10
-               	cmpl	$1, %esi
-               	je	0x41541e <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0xee>
-               	testl	%esi, %esi
-               	movl	$1, %esi
-               	cmoveq	%rdx, %rsi
-               	leaq	(%rsi,%rax), %rcx
-               	leaq	(%r12,%rcx,8), %rcx
-               	addq	$8, %rcx
-               	leaq	(%rax,%rdx), %r8
-               	leaq	(%r10,%rdx), %rbx
-               	leaq	(%r15,%rbx,8), %rdi
-               	addq	$16, %rdi
-               	cmpq	%rdi, %rcx
-               	jae	0x415521 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f1>
-               	leaq	(%r12,%r8,8), %rcx
-               	addq	$16, %rcx
-               	addq	%r10, %rsi
-               	leaq	(%r15,%rsi,8), %rsi
-               	addq	$8, %rsi
-               	cmpq	%rcx, %rsi
-               	jae	0x415521 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1f1>
-               	movq	%rdx, %rsi
-               	addq	$1, %rsi
-               	leaq	(%r15,%r10,8), %rcx
-               	leaq	(%r12,%rax,8), %rax
+               	jge	0x4154c7 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0xc7>
+               	testl	%eax, %eax
+               	jle	0x415561 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x161>
+               	movl	%eax, %eax
+               	movl	%ebx, %edx
+               	movslq	%ebp, %rcx
+               	addq	$1, %rax
+               	leaq	(%r15,%rcx,8), %rcx
+               	leaq	(%r12,%rdx,8), %rdx
@@@@
-               	movq	(%rcx,%rsi,8), %rdx
-               	movq	%rdx, (%rax,%rsi,8)
-               	addq	$-1, %rsi
-               	cmpq	$1, %rsi
-               	jg	0x415430 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x100>
-               	jmp	0x41558b <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25b>
-               	testl	%esi, %esi
-               	jle	0x41558b <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25b>
-               	movslq	%ebp, %r9
-               	movl	%ebx, %r8d
-               	movl	%esi, %ebx
-               	cmpl	$1, %esi
-               	je	0x415496 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x166>
-               	leaq	(%r12,%r8,8), %rdi
-               	addq	$16, %rdi
-               	leaq	(%r15,%r9,8), %rbp
-               	addq	$16, %rbp
-               	leaq	(%r9,%rbx), %rax
-               	leaq	(%r15,%rax,8), %rax
-               	addq	$16, %rax
-               	cmpq	%rax, %rdi
-               	jae	0x41555c <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x22c>
-               	leaq	(%r8,%rbx), %rax
-               	leaq	(%r12,%rax,8), %rax
-               	addq	$16, %rax
-               	cmpq	%rax, %rbp
-               	jae	0x41555c <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x22c>
-               	xorl	%esi, %esi
-               	movl	%ebx, %eax
-               	subl	%esi, %eax
-               	movq	%rsi, %rdi
-               	notq	%rdi
-               	addq	%rbx, %rdi
-               	andq	$3, %rax
-               	je	0x4154d3 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1a3>
-               	leaq	(%r15,%r9,8), %rbp
-               	addq	$16, %rbp
-               	leaq	(%r12,%r8,8), %rdx
-               	addq	$16, %rdx
-               	nop
-               	movq	(%rbp,%rsi,8), %rcx
-               	movq	%rcx, (%rdx,%rsi,8)
-               	addq	$1, %rsi
+               	movq	(%rcx,%rax,8), %rsi
+               	movq	%rsi, (%rdx,%rax,8)
@@@@
-               	jne	0x4154c0 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x190>
+               	cmpq	$1, %rax
+               	jg	0x4154b0 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0xb0>
+               	jmp	0x415561 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x161>
+               	testl	%eax, %eax
+               	jle	0x415561 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x161>
+               	movslq	%ebp, %rdx
+               	movl	%ebx, %r8d
+               	movl	%eax, %esi
+               	leaq	-1(%rsi), %rdi
+               	movl	%esi, %eax
+               	andl	$3, %eax
@@@@
-               	jb	0x41558b <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25b>
-               	leaq	(%r15,%r9,8), %rax
-               	addq	$40, %rax
+               	jae	0x4154ea <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0xea>
+               	xorl	%edi, %edi
+               	jmp	0x415530 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x130>
+               	andl	$-4, %esi
+               	leaq	(%r15,%rdx,8), %rbp
+               	addq	$40, %rbp
+               	leaq	(%r12,%r8,8), %rbx
+               	addq	$40, %rbx
+               	xorl	%edi, %edi
+               	nop
+               	movq	-24(%rbp,%rdi,8), %rcx
+               	movq	%rcx, -24(%rbx,%rdi,8)
+               	movq	-16(%rbp,%rdi,8), %rcx
+               	movq	%rcx, -16(%rbx,%rdi,8)
+               	movq	-8(%rbp,%rdi,8), %rcx
+               	movq	%rcx, -8(%rbx,%rdi,8)
+               	movq	(%rbp,%rdi,8), %rcx
+               	movq	%rcx, (%rbx,%rdi,8)
+               	addq	$4, %rdi
+               	cmpq	%rdi, %rsi
+               	jne	0x415500 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x100>
+               	testq	%rax, %rax
+               	je	0x415561 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x161>
+               	addq	%rdi, %rdx
+               	leaq	(%r15,%rdx,8), %rdx
+               	addq	$16, %rdx
+               	addq	%rdi, %r8
@@@@
-               	addq	$40, %rcx
-               	nopl	(%rax)
-               	movq	-24(%rax,%rsi,8), %rdx
-               	movq	%rdx, -24(%rcx,%rsi,8)
-               	movq	-16(%rax,%rsi,8), %rdx
-               	movq	%rdx, -16(%rcx,%rsi,8)
-               	movq	-8(%rax,%rsi,8), %rdx
-               	movq	%rdx, -8(%rcx,%rsi,8)
-               	movq	(%rax,%rsi,8), %rdx
-               	movq	%rdx, (%rcx,%rsi,8)
-               	addq	$4, %rsi
-               	cmpq	%rsi, %rbx
-               	jne	0x4154f0 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x1c0>
-               	jmp	0x41558b <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25b>
-               	movl	%edx, %r9d
-               	andl	$-2, %r9d
-               	movl	%edx, %esi
-               	andl	$1, %esi
-               	movq	%r9, %rdi
-               	negq	%rdi
-               	leaq	(%r15,%rbx,8), %rbx
-               	leaq	(%r12,%r8,8), %rbp
-               	xorl	%ecx, %ecx
-               	nopl	(%rax)
-               	movups	(%rbx,%rcx,8), %xmm0
-               	movups	%xmm0, (%rbp,%rcx,8)
-               	addq	$-2, %rcx
-               	cmpq	%rcx, %rdi
-               	jne	0x415540 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x210>
-               	cmpq	%rdx, %r9
-               	je	0x41558b <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x25b>
-               	jmp	0x415421 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0xf1>
-               	movl	%ebx, %esi
-               	andl	$-2, %esi
-               	xorl	%eax, %eax
-               	nopw	%cs:(%rax,%rax)
+               	addq	$16, %rcx
+               	xorl	%esi, %esi
@@@@
-               	movups	(%rbp,%rax,8), %xmm0
-               	movups	%xmm0, (%rdi,%rax,8)
-               	addq	$2, %rax
-               	cmpq	%rax, %rsi
-               	jne	0x415570 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x240>
-               	cmpq	%rbx, %rsi
-               	jne	0x415498 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x168>
+               	movq	(%rdx,%rsi,8), %rdi
+               	movq	%rdi, (%rcx,%rsi,8)
+               	addq	$1, %rsi
+               	cmpq	%rsi, %rax
+               	jne	0x415550 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>+0x150>

@@ -1917,13 +1911,14 @@
@@@[(13, 16)]@@@
-               	callq	0x421230 <ThrowClassCastException>
+               	callq	0x421440 <ThrowClassCastException>
+               	nopw	%cs:(%rax,%rax)

@@ -2334,17 +2329,18 @@
@@@[(6, 25)]@@@
-               	je	0x415cdd <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x1d>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	8(%rbx), %rdx
-               	testq	%rdx, %rdx
-               	js	0x415d11 <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x51>
-               	cmpl	%edx, 8(%rbx)
-               	jb	0x415d11 <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x51>
-               	cmpl	%edx, 8(%r15)
-               	jb	0x415d11 <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x51>
+               	je	0x415cbd <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x1d>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	8(%rbx), %eax
+               	testl	%eax, %eax
+               	js	0x415cf2 <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x52>
+               	cmpl	%eax, 8(%rbx)
+               	jb	0x415cf2 <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x52>
+               	cmpl	%eax, 8(%r15)
+               	jb	0x415cf2 <kfun:kotlin.collections#copyInto$default__at__kotlin.IntArray(kotlin.IntArray;kotlin.Int;kotlin.Int;kotlin.Int;kotlin.Int){}kotlin.IntArray+0x52>
+               	movslq	%eax, %rdx

@@ -2356,8 +2352,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	(%rax,%rax)

@@ -3300,16 +3296,16 @@
@@@[(3, 9), (17, 19)]@@@
-               	movq	%rsi, %r14
-               	movq	%rdi, %rbx
-               	movb	885944(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	%rsi, %rbx
+               	movq	%rdi, %r14
+               	movb	887904(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	cmpw	8(%r14), %ax
+               	cmpw	%ax, 8(%r14)

@@ -3672,16 +3668,16 @@
@@@[(3, 9), (17, 19)]@@@
-               	movq	%rsi, %r14
-               	movq	%rdi, %rbx
-               	movb	884600(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	%rsi, %rbx
+               	movq	%rdi, %r14
+               	movb	886560(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	cmpl	8(%r14), %eax
+               	cmpl	%eax, 8(%r14)

@@ -3994,51 +3990,48 @@
@@@[(3, 4), (18, 22), (26, 36), (38, 46), (49, 55), (56, 61), (66, 67), (68, 70)]@@@
+               	pushq	%r15
@@@@
-               	je	0x417605 <kfun:kotlin.Double#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x95>
-               	movsd	8(%r14), %xmm1          # xmm1 = mem[0],zero
+               	je	0x4175d5 <kfun:kotlin.Double#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x85>
+               	movsd	8(%r14), %xmm0          # xmm0 = mem[0],zero
@@@@
-               	jne	0x417605 <kfun:kotlin.Double#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x95>
-               	movsd	8(%rbx), %xmm0          # xmm0 = mem[0],zero
-               	movsd	%xmm0, 8(%rsp)
-               	movaps	%xmm1, %xmm0
-               	movsd	%xmm1, 16(%rsp)
+               	jne	0x4175d5 <kfun:kotlin.Double#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x85>
+               	movq	8(%rbx), %r14
+               	movq	%r14, %xmm1
+               	movq	%xmm1, 8(%rsp)
+               	movsd	%xmm0, (%rsp)
@@@@
-               	movq	16(%rsp), %xmm0         # xmm0 = mem[0],zero
-               	movq	%xmm0, %rbx
-               	movabsq	$9221120237041090560, %r14 # imm = 0x7FF8000000000000
-               	cmovneq	%r14, %rbx
+               	movq	(%rsp), %xmm0           # xmm0 = mem[0],zero
+               	movq	%xmm0, %r15
+               	movabsq	$9221120237041090560, %rbx # imm = 0x7FF8000000000000
+               	cmovneq	%rbx, %r15
@@@@
-               	movq	8(%rsp), %xmm0          # xmm0 = mem[0],zero
-               	movq	%xmm0, %rax
-               	cmovneq	%r14, %rax
-               	cmpq	%rax, %rbx
+               	cmoveq	%r14, %rbx
+               	cmpq	%rbx, %r15
@@@@
-               	addq	$24, %rsp
-               	popq	%rbx
-               	popq	%r14
-               	retq
+               	jmp	0x4175d7 <kfun:kotlin.Double#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x87>
@@@@
+               	popq	%r15
@@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -4062,42 +4055,38 @@
@@@[(3, 4), (8, 16), (18, 20), (21, 23), (26, 27), (29, 31), (36, 42), (50, 52)]@@@
-               	subq	$16, %rsp
@@@@
-               	je	0x417667 <kfun:kotlin.Double#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x17>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movsd	8(%rbx), %xmm0          # xmm0 = mem[0],zero
-               	movsd	%xmm0, 8(%rsp)
+               	je	0x417643 <kfun:kotlin.Double#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	8(%rbx), %rbx
+               	movq	%rbx, %xmm0
@@@@
-               	movq	8(%rsp), %xmm0          # xmm0 = mem[0],zero
-               	movq	%xmm0, %rax
@@@@
-               	cmoveq	%rax, %rcx
+               	cmoveq	%rbx, %rcx
@@@@
-               	addq	$16, %rsp
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)
@@@@
-               	movq	%rsi, %r14
-               	movq	%rdi, %rbx
-               	movb	883064(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	%rsi, %rbx
+               	movq	%rdi, %r14
+               	movb	885056(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	cmpq	8(%r14), %rax
+               	cmpq	%rax, 8(%r14)

@@ -4223,27 +4212,27 @@
@@@[(18, 27), (28, 37)]@@@
-               	jne	0x41788f <kfun:kotlin.Float#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x5f>
-               	ucomiss	%xmm0, %xmm0
-               	movd	%xmm0, %eax
-               	movl	$2143289344, %ecx       # imm = 0x7FC00000
-               	cmovpl	%ecx, %eax
-               	movss	8(%rbx), %xmm0          # xmm0 = mem[0],zero,zero,zero
+               	jne	0x41784d <kfun:kotlin.Float#$<bridge-NBNN>equals(kotlin.Any?){}kotlin.Boolean(kotlin.Any?){}kotlin.Boolean+0x5d>
+               	movl	8(%rbx), %eax
+               	movd	%eax, %xmm1
@@@@
-               	movd	%xmm0, %edx
-               	cmovpl	%ecx, %edx
-               	cmpl	%edx, %eax
+               	movd	%xmm0, %ecx
+               	movl	$2143289344, %edx       # imm = 0x7FC00000
+               	cmovpl	%edx, %ecx
+               	ucomiss	%xmm1, %xmm1
+               	cmovpl	%edx, %eax
+               	cmpl	%eax, %ecx

@@ -4254,7 +4243,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax)
+               	nopw	(%rax,%rax)

@@ -4433,26 +4422,26 @@
@@@[(16, 23), (24, 25), (29, 31)]@@@
-               	je	0x417ba3 <kfun:kotlin.Float#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movss	8(%rbx), %xmm0          # xmm0 = mem[0],zero,zero,zero
+               	je	0x417b63 <kfun:kotlin.Float#$<bridge-NBN>hashCode(){}kotlin.Int(){}kotlin.Int+0x13>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	8(%rbx), %ecx
+               	movd	%ecx, %xmm0
@@@@
-               	movd	%xmm0, %ecx
@@@@
-               	nopl	(%rax)
+               	nopw	(%rax,%rax)

@@ -4801,9 +4790,10 @@
@@@[(3, 4)]@@@
+               	movq	32(%rsp), %rax

@@ -4829,15 +4819,14 @@
@@@[(12, 15)]@@@
-               	callq	0x421480 <ThrowInvalidReceiverTypeException>
-               	nopl	(%rax,%rax)
+               	callq	0x421690 <ThrowInvalidReceiverTypeException>

@@ -4995,45 +4984,45 @@
@@@[(23, 24), (25, 30)]@@@
-               	movq	16(%r14,%rax,8), %rax
@@@@
-               	cmpq	16(%r15,%rcx,8), %rax
-               	jne	0x41858e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>
+               	movq	16(%r15,%rcx,8), %rcx
+               	cmpq	%rcx, 16(%r14,%rax,8)
+               	jne	0x41854e <kfun:kotlin.Throwable.ExceptionTraceBuilder.dumpSelfTrace#internal+0x28e>

@@ -5302,240 +5291,293 @@
@@@[(16, 17), (18, 19), (20, 21), (29, 45), (46, 63), (64, 83), (84, 86), (87, 141), (142, 267), (268, 294), (295, 298), (299, 315), (316, 321), (325, 334), (335, 340), (346, 351), (355, 379), (380, 404), (406, 408), (409, 426), (427, 429), (430, 453), (454, 488)]@@@
+               	movaps	%xmm0, 576(%rsp)
@@@@
-               	movaps	%xmm0, 544(%rsp)
@@@@
+               	movq	%rax, 24(%rsp)
@@@@
-               	movq	%rcx, 560(%rsp)
-               	movq	24(%rbx), %r15
-               	movl	8(%r15), %ebp
-               	movq	-64(%rax), %rbx
-               	movl	$1, %r14d
-               	xchgl	%r14d, 328(%rbx)
-               	movq	%rax, 8(%rsp)
-               	movl	$1, %ecx
-               	movq	-64(%rax), %rdi
-               	testq	%rdi, %rdi
-               	je	0x418a94 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc4>
+               	movq	%rcx, 576(%rsp)
+               	movq	24(%rbx), %rcx
+               	movq	%rcx, 8(%rsp)
+               	movl	8(%rcx), %r13d
+               	movq	-64(%rax), %rdx
@@@@
-               	xchgl	%ecx, 328(%rdi)
-               	jmp	0x418a96 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc6>
-               	xorl	%edi, %edi
+               	movl	$1, %esi
+               	xchgl	%esi, 328(%rdx)
+               	movl	%esi, 108(%rsp)
+               	movq	$0, 120(%rsp)
+               	movl	$1, 128(%rsp)
+               	movb	$0, 132(%rsp)
+               	movq	-64(%rax), %rax
+               	testq	%rax, %rax
+               	je	0x418a84 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xf4>
+               	xchgl	%ecx, 328(%rax)
+               	movq	%rax, 120(%rsp)
+               	movl	%ecx, 128(%rsp)
+               	movb	$1, 132(%rsp)
+               	movq	%rdx, 144(%rsp)
@@@@
-               	movaps	%xmm0, 48(%rsp)
-               	movq	$0, 64(%rsp)
-               	testl	%ebp, %ebp
-               	je	0x4190ea <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x71a>
-               	movl	%r14d, 116(%rsp)
-               	movq	%rbx, 128(%rsp)
-               	movl	%ecx, 44(%rsp)
-               	movq	%rdi, 120(%rsp)
+               	movaps	%xmm0, 32(%rsp)
+               	movq	$0, 48(%rsp)
+               	movq	48(%rsp), %rax
+               	movq	32(%rsp), %r15
+               	subq	%r15, %rax
+               	sarq	$5, %rax
+               	cmpq	%r13, %rax
+               	jae	0x418b9e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x20e>
+               	movq	40(%rsp), %rbx
+               	movq	%rbx, %r12
+               	subq	%r15, %r12
@@@@
-               	movq	%rbp, %rdi
+               	movq	%r13, %rdi
@@@@
+               	movq	%rax, %r14
+               	cmpq	%r15, %rbx
+               	je	0x418b6d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
+               	leaq	16(%r14), %rax
+               	leaq	16(%r15), %rcx
+               	jmp	0x418b25 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x195>
+               	nopl	(%rax,%rax)
+               	movq	%rdx, -16(%rax)
+               	movq	(%rcx), %rdx
+               	movq	%rdx, (%rax)
+               	movq	-8(%rcx), %rdx
+               	movq	%rdx, -8(%rax)
+               	movq	%rcx, -16(%rcx)
+               	movq	$0, -8(%rcx)
+               	movb	$0, (%rcx)
+               	addq	$32, %rax
+               	leaq	32(%rcx), %rdx
+               	addq	$16, %rcx
+               	cmpq	%rbx, %rcx
+               	movq	%rdx, %rcx
+               	je	0x418b3a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1aa>
+               	movq	%rax, -16(%rax)
+               	movq	-16(%rcx), %rdx
+               	cmpq	%rcx, %rdx
+               	jne	0x418af0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x160>
+               	movups	(%rdx), %xmm0
+               	movups	%xmm0, (%rax)
+               	jmp	0x418afa <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x16a>
+               	cmpq	%rbx, %r15
+               	je	0x418b6d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
+               	movq	%r15, %rbp
+               	jmp	0x418b59 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c9>
+               	nopl	(%rax,%rax)
+               	addq	$16, %rbp
+               	cmpq	%rbx, %rbp
+               	je	0x418b6d <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1dd>
+               	movq	(%rbp), %rdi
+               	addq	$16, %rbp
+               	cmpq	%rbp, %rdi
+               	je	0x418b50 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
+               	callq	0x4137c0 <free@plt>
+               	jmp	0x418b50 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1c0>
+               	sarq	$5, %r12
+               	testq	%r15, %r15
+               	je	0x418b7e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x1ee>
+               	movq	%r15, %rdi
+               	callq	0x4137c0 <free@plt>
+               	movq	%r14, 32(%rsp)
+               	shlq	$5, %r12
+               	addq	%r14, %r12
+               	movq	%r12, 40(%rsp)
+               	movq	%r13, %rax
+               	shlq	$5, %rax
+               	addq	%r14, %rax
@@@@
-               	movq	%rax, 56(%rsp)
-               	movq	%rbp, %rcx
-               	shlq	$5, %rcx
-               	addq	%rax, %rcx
-               	movq	%rcx, 64(%rsp)
-               	leaq	160(%rsp), %rax
-               	movq	%rax, 144(%rsp)
-               	movq	$0, 152(%rsp)
-               	movb	$0, 160(%rsp)
-               	movq	$-1, 176(%rsp)
-               	leaq	200(%rsp), %rax
-               	movq	%rax, 184(%rsp)
-               	movq	$0, 192(%rsp)
-               	movb	$0, 200(%rsp)
-               	movq	$-1, 216(%rsp)
-               	leaq	240(%rsp), %rax
-               	movq	%rax, 224(%rsp)
-               	movq	$0, 232(%rsp)
-               	movb	$0, 240(%rsp)
-               	movq	$-1, 256(%rsp)
-               	leaq	280(%rsp), %rax
-               	movq	%rax, 264(%rsp)
-               	movq	$0, 272(%rsp)
-               	movb	$0, 280(%rsp)
-               	movq	$-1, 296(%rsp)
-               	leaq	320(%rsp), %rax
-               	movq	%rax, 304(%rsp)
-               	movq	$0, 312(%rsp)
-               	movb	$0, 320(%rsp)
-               	movq	$-1, 336(%rsp)
-               	leaq	360(%rsp), %rax
-               	movq	%rax, 344(%rsp)
-               	movq	$0, 352(%rsp)
-               	movb	$0, 360(%rsp)
-               	movq	$-1, 376(%rsp)
-               	leaq	400(%rsp), %rax
-               	movq	%rax, 384(%rsp)
-               	movq	$0, 392(%rsp)
-               	movb	$0, 400(%rsp)
-               	movq	$-1, 416(%rsp)
-               	leaq	440(%rsp), %rax
-               	movq	%rax, 424(%rsp)
-               	movq	$0, 432(%rsp)
-               	movb	$0, 440(%rsp)
-               	movq	$-1, 456(%rsp)
-               	leaq	480(%rsp), %rax
-               	movq	%rax, 464(%rsp)
-               	movq	$0, 472(%rsp)
-               	movb	$0, 480(%rsp)
-               	movq	$-1, 496(%rsp)
-               	leaq	520(%rsp), %rax
-               	movq	%rax, 504(%rsp)
-               	movq	$0, 512(%rsp)
-               	movb	$0, 520(%rsp)
-               	movq	$-1, 536(%rsp)
-               	leaq	88(%rsp), %r13
-               	movq	64(%rsp), %r12
-               	xorl	%eax, %eax
-               	movq	%r15, 32(%rsp)
-               	movq	%rbp, 104(%rsp)
-               	jmp	0x418d30 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x360>
-               	movq	%rcx, (%r14)
-               	movq	88(%rsp), %rax
-               	movq	%rax, 16(%r14)
-               	movq	32(%rsp), %r15
-               	movq	104(%rsp), %rbp
+               	testl	%r13d, %r13d
+               	je	0x419186 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x7f6>
+               	leaq	176(%rsp), %rax
+               	movq	%rax, 160(%rsp)
+               	movq	$0, 168(%rsp)
+               	movb	$0, 176(%rsp)
+               	movq	$-1, 192(%rsp)
+               	leaq	216(%rsp), %rax
+               	movq	%rax, 200(%rsp)
+               	movq	$0, 208(%rsp)
+               	movb	$0, 216(%rsp)
+               	movq	$-1, 232(%rsp)
+               	leaq	256(%rsp), %rax
+               	movq	%rax, 240(%rsp)
+               	movq	$0, 248(%rsp)
+               	movb	$0, 256(%rsp)
+               	movq	$-1, 272(%rsp)
+               	leaq	296(%rsp), %rax
+               	movq	%rax, 280(%rsp)
+               	movq	$0, 288(%rsp)
+               	movb	$0, 296(%rsp)
+               	movq	$-1, 312(%rsp)
+               	leaq	336(%rsp), %rax
+               	movq	%rax, 320(%rsp)
+               	movq	$0, 328(%rsp)
+               	movb	$0, 336(%rsp)
+               	movq	$-1, 352(%rsp)
+               	leaq	376(%rsp), %rax
+               	movq	%rax, 360(%rsp)
+               	movq	$0, 368(%rsp)
+               	movb	$0, 376(%rsp)
+               	movq	$-1, 392(%rsp)
+               	leaq	416(%rsp), %rax
+               	movq	%rax, 400(%rsp)
+               	movq	$0, 408(%rsp)
+               	movb	$0, 416(%rsp)
+               	movq	$-1, 432(%rsp)
+               	leaq	456(%rsp), %rax
+               	movq	%rax, 440(%rsp)
+               	movq	$0, 448(%rsp)
+               	movb	$0, 456(%rsp)
+               	movq	$-1, 472(%rsp)
+               	leaq	496(%rsp), %rax
+               	movq	%rax, 480(%rsp)
+               	movq	$0, 488(%rsp)
+               	movb	$0, 496(%rsp)
+               	movq	$-1, 512(%rsp)
+               	leaq	536(%rsp), %rax
+               	movq	%rax, 520(%rsp)
+               	movq	$0, 528(%rsp)
+               	movb	$0, 536(%rsp)
+               	movq	$-1, 552(%rsp)
+               	leaq	80(%rsp), %rbp
+               	leaq	592(%rsp), %r15
+               	xorl	%r14d, %r14d
+               	movq	8(%rsp), %rbx
+               	movq	%r13, 96(%rsp)
+               	jmp	0x418df4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
+               	movq	%rcx, (%r13)
@@@@
-               	movq	%rax, 8(%r14)
-               	movq	%r13, 72(%rsp)
-               	movq	$0, 80(%rsp)
-               	movb	$0, 88(%rsp)
-               	addq	$32, %r14
-               	movq	%r14, 56(%rsp)
-               	movq	16(%rsp), %rax
-               	addq	$1, %rax
-               	cmpq	%rbp, %rax
-               	je	0x418fcb <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5fb>
-               	movq	16(%r15,%rax,8), %rcx
+               	movq	%rax, 16(%r13)
+               	movq	8(%rsp), %rbx
+               	movq	72(%rsp), %rax
+               	movq	%rax, 8(%r13)
+               	movq	%rbp, 64(%rsp)
+               	movq	$0, 72(%rsp)
+               	movb	$0, 80(%rsp)
+               	addq	$32, %r13
+               	movq	%r13, 40(%rsp)
+               	movq	96(%rsp), %r13
+               	leaq	592(%rsp), %r15
+               	addq	$1, %r14
+               	cmpq	%r13, %r14
+               	je	0x419082 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6f2>
+               	movq	16(%rbx,%r14,8), %rcx
@@@@
-               	jb	0x418d23 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x353>
-               	movq	%rax, 16(%rsp)
+               	jb	0x418de7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x457>
@@@@
-               	movq	48(%rsp), %rax
-               	movq	56(%rsp), %r14
-               	movq	%r14, %r15
-               	movq	%rax, 24(%rsp)
-               	subq	%rax, %r15
-               	movq	%r15, %rbx
-               	sarq	$5, %rbx
-               	leaq	471548(%rip), %rax      # 0x48bf63 <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
+               	movq	40(%rsp), %r13
+               	movq	32(%rsp), %rax
+               	movq	%r13, %rbx
+               	movq	%rax, 16(%rsp)
+               	subq	%rax, %rbx
+               	movq	%rbx, %r12
+               	sarq	$5, %r12
+               	leaq	476157(%rip), %rax      # 0x48d223 <typeinfo name for kotlin::gc::GCSchedulerData+0x1912>
@@@@
-               	leaq	576(%rsp), %rbp
-               	movq	%rbp, %rdi
-               	movq	%rbx, %rdx
+               	movq	%r15, %rdi
+               	movq	%r12, %rdx
@@@@
-               	callq	0x4790e0 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
-               	movq	%r13, 72(%rsp)
-               	movq	%rbp, %rdi
-               	callq	0x4137c0 <strlen@plt>
+               	callq	0x47a000 <snprintf_with_addr(char*, unsigned long, unsigned long, void const*, bool, char const*, ...)>
+               	movq	%rbp, 64(%rsp)
+               	movq	%r15, %rdi
+               	callq	0x4137d0 <strlen@plt>
+               	movq	%rbp, %rcx
@@@@
-               	cmpq	$16, %rax
-               	jb	0x418dc4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x3f4>
+               	movq	%rcx, %rax
+               	cmpq	$16, %rbp
+               	jb	0x418e7e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ee>
@@@@
-               	movq	%rax, %r13
-               	movq	%rax, 72(%rsp)
-               	movq	%rbp, 88(%rsp)
+               	movq	%rax, 64(%rsp)
+               	movq	%rbp, 80(%rsp)
@@@@
-               	jne	0x418e11 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x441>
-               	movb	576(%rsp), %al
-               	movb	%al, (%r13)
-               	movq	%rbp, 80(%rsp)
-               	movb	$0, (%r13,%rbp)
-               	cmpq	%r14, %r12
-               	je	0x418e34 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x464>
-               	leaq	16(%r14), %rax
-               	movq	%rax, (%r14)
-               	movq	72(%rsp), %rcx
-               	leaq	88(%rsp), %r13
-               	cmpq	%r13, %rcx
-               	jne	0x418ce3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x313>
-               	movups	(%r13), %xmm0
-               	movups	%xmm0, (%rax)
-               	jmp	0x418cef <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x31f>
-               	movq	%r13, %rdi
-               	leaq	576(%rsp), %rsi
+               	jne	0x418e94 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x504>
+               	movb	592(%rsp), %cl
+               	movb	%cl, (%rax)
+               	jmp	0x418ea7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x517>
+               	movq	%rax, %rdi
+               	leaq	592(%rsp), %rsi
@@@@
-               	callq	0x4137d0 <memcpy@plt>
-               	movq	%rbp, 80(%rsp)
-               	movb	$0, (%r13,%rbp)
-               	cmpq	%r14, %r12
-               	jne	0x418dea <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x41a>
-               	testq	%r15, %r15
-               	movq	%rbx, %rax
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%rbp, 72(%rsp)
+               	movq	64(%rsp), %rax
+               	movb	$0, (%rax,%rbp)
+               	cmpq	%r13, 48(%rsp)
+               	je	0x418ee3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x553>
+               	leaq	16(%r13), %rax
+               	movq	%rax, (%r13)
+               	movq	64(%rsp), %rcx
+               	leaq	80(%rsp), %rbp
+               	cmpq	%rbp, %rcx
+               	jne	0x418da3 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x413>
+               	movups	(%rbp), %xmm0
+               	movups	%xmm0, (%rax)
+               	jmp	0x418db0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x420>
+               	testq	%rbx, %rbx
+               	movq	%r12, %rax
@@@@
-               	leaq	(%rax,%rbx), %r13
+               	leaq	(%rax,%r12), %r15
@@@@
-               	cmpq	%rcx, %r13
-               	cmovaq	%rcx, %r13
-               	addq	%rbx, %rax
-               	cmovbq	%rcx, %r13
-               	movq	%r12, %rbp
-               	movq	24(%rsp), %rbx
-               	subq	%rbx, %rbp
-               	sarq	$5, %rbp
-               	testq	%r13, %r13
-               	je	0x418e85 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4b5>
+               	cmpq	%rcx, %r15
+               	cmovaq	%rcx, %r15
+               	addq	%r12, %rax
+               	cmovbq	%rcx, %r15
+               	testq	%r15, %r15
+               	leaq	80(%rsp), %rbx
+               	je	0x418f27 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x597>
@@@@
-               	movq	%r13, %rdi
+               	movq	%r15, %rdi
@@@@
-               	movq	%rax, %r14
-               	jmp	0x418e88 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4b8>
-               	xorl	%r14d, %r14d
-               	shlq	$5, %rbp
-               	leaq	(%r14,%rbp), %rax
-               	addq	$16, %rax
-               	movq	%rax, (%r14,%rbp)
+               	jmp	0x418f29 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
+               	xorl	%eax, %eax
+               	shlq	$5, %r12
+               	leaq	(%rax,%r12), %rdx
+               	addq	$16, %rdx
+               	movq	%rdx, (%rax,%r12)
+               	movq	64(%rsp), %rcx
+               	cmpq	%rbx, %rcx
+               	je	0x418f56 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5c6>
+               	leaq	(%rax,%r12), %rdx
+               	movq	%rcx, (%rdx)
+               	movq	80(%rsp), %rcx
+               	movq	%rcx, 16(%rax,%r12)
+               	jmp	0x418f5c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5cc>
+               	movups	(%rbx), %xmm0
+               	movups	%xmm0, (%rdx)
@@@@
-               	leaq	88(%rsp), %rdx
-               	cmpq	%rdx, %rcx
-               	movq	32(%rsp), %r15
-               	je	0x418ebf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4ef>
-               	leaq	(%r14,%rbp), %rax
-               	movq	%rcx, (%rax)
-               	movq	88(%rsp), %rax
-               	movq	%rax, 16(%r14,%rbp)
-               	jmp	0x418ec5 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x4f5>
-               	movups	(%rdx), %xmm0
-               	movups	%xmm0, (%rax)
-               	movq	80(%rsp), %rax
-               	movq	%rax, 8(%r14,%rbp)
-               	movq	%rdx, 72(%rsp)
-               	movq	$0, 80(%rsp)
-               	movb	$0, 88(%rsp)
-               	cmpq	%rbx, %r12
-               	je	0x418fc0 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5f0>
-               	leaq	16(%r14), %rcx
-               	leaq	16(%rbx), %rax
-               	jmp	0x418f36 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x566>
-               	nopl	(%rax,%rax)
+               	movq	%rcx, 8(%rax,%r12)
+               	movq	%rbx, 64(%rsp)
+               	movq	$0, 72(%rsp)
+               	movb	$0, 80(%rsp)
+               	movq	16(%rsp), %r12
+               	cmpq	%r12, %r13
+               	movq	%rax, 152(%rsp)
+               	je	0x41902c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x69c>
+               	leaq	16(%rax), %rcx
+               	leaq	16(%r12), %rax
+               	jmp	0x418fd6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x646>
+               	nopl	(%rax)

@@ -5547,241 +5589,239 @@
@@@[(3, 5), (20, 29), (30, 34), (37, 88), (98, 108), (177, 178), (179, 182), (196, 214), (220, 229), (237, 249), (252, 256), (257, 259), (265, 269), (273, 289), (290, 299), (300, 308), (309, 317), (321, 329), (330, 334), (338, 340), (341, 351)]@@@
-               	cmpq	%r12, %rax
+               	cmpq	%r13, %rax
@@@@
-               	cmpq	%rbx, %r12
-               	jne	0x418f69 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x599>
-               	jmp	0x418f81 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5b1>
-               	nop
+               	cmpq	%r12, %r13
+               	je	0x419030 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
+               	movq	%r12, %rbx
+               	jmp	0x419019 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x689>
+               	nopl	(%rax,%rax)
@@@@
-               	cmpq	%r12, %rbx
-               	je	0x418f7c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5ac>
+               	cmpq	%r13, %rbx
+               	je	0x419030 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6a0>
@@@@
-               	je	0x418f60 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x590>
-               	callq	0x4137e0 <free@plt>
-               	jmp	0x418f60 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x590>
-               	movq	24(%rsp), %rbx
-               	testq	%rbx, %rbx
-               	je	0x418f8e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5be>
-               	movq	%rbx, %rdi
-               	callq	0x4137e0 <free@plt>
-               	movq	%r14, 48(%rsp)
-               	movq	%rbp, 56(%rsp)
-               	shlq	$5, %r13
-               	movq	%r13, %r12
-               	addq	%r14, %r12
-               	movq	72(%rsp), %rdi
-               	leaq	88(%rsp), %r13
-               	cmpq	%r13, %rdi
-               	je	0x418fb6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5e6>
-               	callq	0x4137e0 <free@plt>
-               	movq	104(%rsp), %rbp
-               	jmp	0x418d1e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x34e>
-               	leaq	32(%r14), %rbp
-               	testq	%rbx, %rbx
-               	jne	0x418f86 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5b6>
-               	jmp	0x418f8e <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x5be>
-               	movq	%r12, 64(%rsp)
-               	movq	504(%rsp), %rdi
-               	leaq	520(%rsp), %rax
+               	je	0x419010 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
+               	callq	0x4137c0 <free@plt>
+               	jmp	0x419010 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x680>
+               	leaq	32(%rax), %rbp
+               	testq	%r12, %r12
+               	movq	96(%rsp), %r13
+               	je	0x419042 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x6b2>
+               	movq	%r12, %rdi
+               	callq	0x4137c0 <free@plt>
+               	movq	152(%rsp), %rax
+               	movq	%rax, 32(%rsp)
+               	movq	%rbp, 40(%rsp)
+               	shlq	$5, %r15
+               	addq	%rax, %r15
+               	movq	%r15, 48(%rsp)
+               	movq	64(%rsp), %rdi
+               	leaq	80(%rsp), %rbp
+               	cmpq	%rbp, %rdi
+               	movq	8(%rsp), %rbx
+               	je	0x418ddf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
+               	callq	0x4137c0 <free@plt>
+               	jmp	0x418ddf <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x44f>
+               	movq	520(%rsp), %rdi
+               	leaq	536(%rsp), %rax
@@@@
-               	movq	128(%rsp), %rbx
-               	movl	116(%rsp), %r14d
-               	je	0x419011 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x641>
-               	callq	0x481255 <operator delete(void*)>
-               	movq	424(%rsp), %rdi
-               	leaq	440(%rsp), %rax
+               	je	0x4190b6 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x726>
+               	callq	0x482525 <operator delete(void*)>
+               	movq	440(%rsp), %rdi
+               	leaq	456(%rsp), %rax
@@@@
-               	movl	44(%rsp), %ecx
@@@@
-               	je	0x419116 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x746>
+               	je	0x4191be <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x82e>
+               	movl	128(%rsp), %ecx
@@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	testq	%rbx, %rbx
-               	je	0x419143 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
-               	addq	$328, %rbx              # imm = 0x148
-               	movl	%r14d, %eax
-               	xchgl	%eax, (%rbx)
-               	testl	%r14d, %r14d
-               	jne	0x419143 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movq	144(%rsp), %rdi
+               	testq	%rdi, %rdi
+               	je	0x4191f2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
+               	addq	$328, %rdi              # imm = 0x148
+               	movl	108(%rsp), %ecx
+               	movl	%ecx, %eax
+               	xchgl	%eax, (%rdi)
+               	testl	%ecx, %ecx
+               	jne	0x4191f2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
@@@@
-               	je	0x419143 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x773>
-               	movq	%rbx, %rdi
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	movq	$0, 600(%rsp)
-               	movq	8(%rsp), %rax
+               	je	0x4191f2 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x862>
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movq	$0, 616(%rsp)
+               	movq	24(%rsp), %rax
@@@@
-               	movq	%rcx, 592(%rsp)
-               	movq	48(%rsp), %r13
-               	movq	56(%rsp), %r14
-               	movq	%r14, %r15
-               	subq	%r13, %r15
-               	movq	%r15, %rbx
+               	movq	%rcx, 608(%rsp)
+               	movq	40(%rsp), %rbp
+               	movq	32(%rsp), %r13
+               	movq	%rbp, %r14
+               	subq	%r13, %r14
+               	movq	%r14, %rbx
@@@@
-               	movq	%r14, 24(%rsp)
-               	js	0x419383 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x9b3>
+               	movq	%rbp, 8(%rsp)
+               	js	0x419443 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xab3>
@@@@
-               	movq	%r15, %rax
+               	movq	%r14, %rax
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbp
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %r15
@@@@
-               	leaq	651075(%rip), %rax      # 0x4b8140 <ktypeglobal:kotlin.Array#internal>
-               	movq	%rax, 16(%rbp)
-               	movl	%ebx, 24(%rbp)
-               	movq	%rcx, 32(%rsp)
-               	movq	%rcx, 600(%rsp)
-               	cmpq	%r13, %r14
-               	jne	0x419227 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x857>
-               	movq	8(%rsp), %rax
+               	leaq	652820(%rip), %rax      # 0x4b88c0 <ktypeglobal:kotlin.Array#internal>
+               	movq	%rax, 16(%r15)
+               	movl	%ebx, 24(%r15)
+               	movq	%rcx, 96(%rsp)
+               	movq	%rcx, 616(%rsp)
+               	cmpq	%r13, %rbp
+               	jne	0x4192d7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x947>
+               	movq	24(%rsp), %rax
@@@@
-               	jmp	0x4192da <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x90a>
-               	sarq	$5, %r15
-               	movq	8(%rsp), %rax
+               	jmp	0x419395 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xa05>
+               	sarq	$5, %r14
+               	cmpq	$1, %r14
+               	movl	$1, %ebp
+               	cmovaq	%r14, %rbp
+               	movq	24(%rsp), %rax
@@@@
-               	cmpq	$1, %r15
-               	movl	$1, %ebx
-               	cmovaq	%r15, %rbx
+               	xorl	%ebx, %ebx
+               	leaq	160(%rsp), %r14
+               	movabsq	$4294967296, %r12       # imm = 0x100000000
+               	nopl	(%rax,%rax)
+               	movq	$0, 184(%rsp)
@@@@
-               	xorl	%r15d, %r15d
-               	leaq	144(%rsp), %r12
-               	movabsq	$4294967296, %r14       # imm = 0x100000000
-               	movq	$0, 168(%rsp)
-               	movq	%rcx, 152(%rsp)
-               	movq	%r12, 288(%rax)
+               	movq	%rcx, 168(%rsp)
+               	movq	%r14, 288(%rax)
@@@@
-               	leaq	168(%rsp), %rsi
-               	callq	0x4799e0 <CreateStringFromCString>
-               	movq	168(%rsp), %rax
-               	movq	%r15, %rcx
+               	leaq	184(%rsp), %rsi
+               	callq	0x47ab90 <CreateStringFromCString>
+               	movq	184(%rsp), %rax
+               	movq	%rbx, %rcx
@@@@
-               	movq	%rax, 32(%rbp,%rcx)
-               	movq	8(%rsp), %rax
+               	movq	%rax, 32(%r15,%rcx)
+               	movq	24(%rsp), %rax
@@@@
-               	addq	%r14, %r15
+               	addq	%r12, %rbx
@@@@
-               	addq	$-1, %rbx
-               	jne	0x419260 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x890>
-               	movq	32(%rsp), %r15
-               	movq	%r15, 568(%rsp)
-               	movq	584(%rsp), %rcx
+               	addq	$-1, %rbp
+               	jne	0x419310 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0x980>
+               	movq	96(%rsp), %r15
+               	movq	%r15, 584(%rsp)
+               	movq	600(%rsp), %rcx

@@ -5789,135 +5829,133 @@
@@@[(3, 13), (17, 22), (86, 99), (181, 189), (199, 219), (223, 227), (228, 230)]@@@
-               	leaq	470156(%rip), %rdi      # 0x48c00a <typeinfo name for kotlin::gc::GCSchedulerData+0x19b9>
-               	callq	0x479740 <std::__throw_length_error(char const*)>
-               	callq	0x4217f0 <ThrowIllegalArgumentException>
-               	movq	%rax, %rbp
-               	movq	8(%rsp), %rax
+               	leaq	474764(%rip), %rdi      # 0x48d2ca <typeinfo name for kotlin::gc::GCSchedulerData+0x19b9>
+               	callq	0x47a660 <std::__throw_length_error(char const*)>
+               	callq	0x421a00 <ThrowIllegalArgumentException>
+               	movq	%rax, %rbx
+               	movq	24(%rsp), %rax
@@@@
-               	movq	%r12, 64(%rsp)
-               	movq	504(%rsp), %rdi
-               	leaq	520(%rsp), %rax
+               	movq	520(%rsp), %rdi
+               	leaq	536(%rsp), %rax
@@@@
-               	je	0x41949f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xacf>
-               	callq	0x481255 <operator delete(void*)>
-               	leaq	48(%rsp), %rdi
-               	callq	0x479760 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
-               	movq	120(%rsp), %rdi
-               	movl	44(%rsp), %esi
-               	callq	0x4797c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
+               	je	0x41955a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
+               	callq	0x482525 <operator delete(void*)>
+               	leaq	32(%rsp), %rdi
+               	callq	0x47a680 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >, kotlin::std_support::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >::~vector()>
+               	leaq	112(%rsp), %rdi
+               	callq	0x47a6e0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
@@@@
-               	jne	0x41949a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xaca>
-               	jmp	0x41949f <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xacf>
-               	movq	%rax, %rbp
-               	movq	8(%rsp), %rax
+               	jne	0x419555 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbc5>
+               	jmp	0x41955a <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xbca>
+               	movq	%rax, %rbx
+               	movq	24(%rsp), %rax
@@@@
-               	je	0x41962c <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc5c>
-               	movq	16(%rsp), %rbx
-               	movq	(%rbx), %rdi
-               	addq	$16, %rbx
-               	cmpq	%rbx, %rdi
-               	je	0x419621 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc51>
-               	callq	0x4137e0 <free@plt>
-               	addq	$16, %rbx
-               	cmpq	24(%rsp), %rbx
-               	jne	0x419610 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xc40>
+               	je	0x4196e4 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd54>
+               	movq	16(%rsp), %rbp
+               	movq	(%rbp), %rdi
+               	addq	$16, %rbp
+               	cmpq	%rbp, %rdi
+               	je	0x4196d9 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd49>
+               	callq	0x4137c0 <free@plt>
+               	addq	$16, %rbp
+               	cmpq	8(%rsp), %rbp
+               	jne	0x4196c7 <kfun:kotlin.Throwable.$<init>$lambda$0$FUNCTION_REFERENCE$1.invoke#internal+0xd37>
@@@@
-               	callq	0x4137e0 <free@plt>
-               	movq	%rbp, %rdi
+               	callq	0x4137c0 <free@plt>
+               	movq	%rbx, %rdi
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nop

@@ -6627,27 +6665,27 @@
@@@[(23, 25)]@@@
-               	movb	8(%rax), %cl
+               	movl	8(%rax), %ecx

@@ -6726,36 +6764,36 @@
@@@[(35, 43)]@@@
-               	js	0x41a50e <kfun:kotlin.native.BitSet#set(kotlin.ranges.IntRange;kotlin.Boolean){}+0x21e>
-               	movl	8(%rbx), %eax
-               	cmpl	12(%rbx), %eax
-               	jg	0x41a4ed <kfun:kotlin.native.BitSet#set(kotlin.ranges.IntRange;kotlin.Boolean){}+0x1fd>
+               	js	0x41a5be <kfun:kotlin.native.BitSet#set(kotlin.ranges.IntRange;kotlin.Boolean){}+0x21e>
+               	movl	12(%rbx), %eax
+               	cmpl	%eax, 8(%rbx)
+               	jg	0x41a59d <kfun:kotlin.native.BitSet#set(kotlin.ranges.IntRange;kotlin.Boolean){}+0x1fd>

@@ -6880,43 +6918,44 @@
@@@[(22, 24), (36, 39)]@@@
-               	movslq	8(%rcx), %r12
+               	movl	8(%rcx), %r12d
@@@@
-               	movq	16(%rax,%r12,8), %rbp
+               	movslq	%r12d, %rcx
+               	movq	16(%rax,%rcx,8), %rbp

@@ -7028,31 +7067,32 @@
@@@[(22, 24), (30, 33)]@@@
-               	movslq	8(%rcx), %rcx
+               	movl	8(%rcx), %ecx
@@@@
-               	jbe	0x41a8df <kfun:kotlin.native.BitSet#get(kotlin.Int){}kotlin.Boolean+0x10f>
+               	jbe	0x41a991 <kfun:kotlin.native.BitSet#get(kotlin.Int){}kotlin.Boolean+0x111>
+               	movslq	%ecx, %rcx

@@ -7785,54 +7825,55 @@
@@@[(15, 18), (20, 34), (35, 47)]@@@
-               	movq	%rcx, 96(%rsp)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 96(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 112(%rsp)
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 120(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 128(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 136(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	56(%rsp), %rax
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 112(%rsp)
-               	movq	%rax, 120(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	72(%rsp), %rax
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 128(%rsp)
-               	movq	%rax, 136(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)

@@ -7854,30 +7895,31 @@
@@@[(3, 6), (8, 22), (23, 35)]@@@
-               	movq	%rcx, 240(%rsp)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 240(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 256(%rsp)
+               	movq	200(%rsp), %rcx
+               	movq	%rcx, 264(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 272(%rsp)
+               	movq	216(%rsp), %rcx
+               	movq	%rcx, 280(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	200(%rsp), %rax
-               	movq	232(%rsp), %rcx
-               	movq	%rcx, 256(%rsp)
-               	movq	%rax, 264(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	216(%rsp), %rax
-               	movq	232(%rsp), %rcx
-               	movq	%rcx, 272(%rsp)
-               	movq	%rax, 280(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)

@@ -7885,7 +7927,6 @@
@@@[(3, 4)]@@@
-               	nopw	%cs:(%rax,%rax)

@@ -8461,79 +8502,80 @@
@@@[(3, 14), (15, 27), (67, 73), (85, 87)]@@@
-               	movq	8(%rax), %r13
-               	movq	%r13, 72(%rsp)
-               	movq	%r13, 80(%rsp)
-               	movq	%r13, 88(%rsp)
-               	movl	859377(%rip), %eax      # 0x4edd80 <state_global$kotlin.native.concurrent.UNINITIALIZED>
+               	movq	8(%rax), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%rax, 80(%rsp)
+               	movq	80(%rsp), %rbp
+               	movq	%rbp, 88(%rsp)
+               	movl	861116(%rip), %eax      # 0x4ee500 <state_global$kotlin.native.concurrent.UNINITIALIZED>
@@@@
-               	je	0x41c0a7 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x127>
-               	leaq	859365(%rip), %rdi      # 0x4edd80 <state_global$kotlin.native.concurrent.UNINITIALIZED>
-               	leaq	558(%rip), %rsi         # 0x41c2d0 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	cmpq	%r13, 859074(%rip)      # 0x4edc70 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
-               	je	0x41c149 <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1c9>
+               	je	0x41c15c <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x12c>
+               	leaq	861104(%rip), %rdi      # 0x4ee500 <state_global$kotlin.native.concurrent.UNINITIALIZED>
+               	leaq	553(%rip), %rsi         # 0x41c380 <kfun:kotlin.native.concurrent.UNINITIALIZED.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	cmpq	860813(%rip), %rbp      # 0x4ee3f0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
+               	je	0x41c1fe <kfun:kotlin.native.concurrent.FreezeAwareLazyImpl#<get-value>(){}1:0+0x1ce>
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	8(%rbx), %rbp
-               	movl	859185(%rip), %eax      # 0x4edd84 <state_global$kotlin.native.concurrent.INITIALIZING>
+               	callq	0x47ef60 <ThrowException>
+               	movq	8(%rbx), %r13
+               	movl	860924(%rip), %eax      # 0x4ee504 <state_global$kotlin.native.concurrent.INITIALIZING>
@@@@
-               	movq	%rax, 8(%rbp)
+               	movq	%rax, 8(%r13)

@@ -8559,33 +8601,33 @@
@@@[(36, 40)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nopl	(%rax)

@@ -8602,41 +8644,42 @@
@@@[(21, 26), (29, 37), (38, 40), (52, 54)]@@@
-               	movq	%rcx, 858382(%rip)      # 0x4edc70 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
-               	leaq	858375(%rip), %rdi      # 0x4edc70 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
+               	movq	%rcx, 860126(%rip)      # 0x4ee3f0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
+               	leaq	860119(%rip), %rdi      # 0x4ee3f0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
+               	movq	860112(%rip), %rax      # 0x4ee3f0 <kvar:kotlin.native.concurrent.UNINITIALIZED.$instance#internal>
@@@@
-               	movq	288(%rbx), %rax
-               	movq	%rax, 40(%rsp)
-               	leaq	32(%rsp), %rax
-               	movq	%rax, 288(%rbx)
+               	movq	288(%rbx), %rcx
+               	movq	%rcx, 40(%rsp)
+               	leaq	32(%rsp), %rcx
+               	movq	%rcx, 288(%rbx)
@@@@
-               	movq	%rcx, 56(%rsp)
+               	movq	%rax, 56(%rsp)
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -8653,60 +8696,61 @@
@@@[(21, 26), (29, 37), (38, 40), (52, 54)]@@@
-               	movq	%rcx, 858134(%rip)      # 0x4edc78 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
-               	leaq	858127(%rip), %rdi      # 0x4edc78 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
+               	movq	%rcx, 859878(%rip)      # 0x4ee3f8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
+               	leaq	859871(%rip), %rdi      # 0x4ee3f8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
+               	movq	859864(%rip), %rax      # 0x4ee3f8 <kvar:kotlin.native.concurrent.INITIALIZING.$instance#internal>
@@@@
-               	movq	288(%rbx), %rax
-               	movq	%rax, 40(%rsp)
-               	leaq	32(%rsp), %rax
-               	movq	%rax, 288(%rbx)
+               	movq	288(%rbx), %rcx
+               	movq	%rcx, 40(%rsp)
+               	leaq	32(%rsp), %rcx
+               	movq	%rcx, 288(%rbx)
@@@@
-               	movq	%rcx, 56(%rsp)
+               	movq	%rax, 56(%rsp)
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -9020,10 +9064,10 @@
@@@[(3, 11)]@@@
-               	je	0x41ca0e <kfun:kotlin.native.internal.FloatingPointParser.StringExponentPair.equals#internal+0x7e>
-               	movl	16(%r14), %eax
-               	cmpl	16(%rbx), %eax
-               	jne	0x41ca0e <kfun:kotlin.native.internal.FloatingPointParser.StringExponentPair.equals#internal+0x7e>
+               	je	0x41cabe <kfun:kotlin.native.internal.FloatingPointParser.StringExponentPair.equals#internal+0x7e>
+               	movl	16(%rbx), %eax
+               	cmpl	%eax, 16(%r14)
+               	jne	0x41cabe <kfun:kotlin.native.internal.FloatingPointParser.StringExponentPair.equals#internal+0x7e>

@@ -9062,32 +9106,33 @@
@@@[(13, 17), (18, 33), (42, 44)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rdi
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
@@@@
-               	leaq	644302(%rip), %rcx      # 0x4b9f90 <ktypeglobal:kotlin.native.internal.HexStringParser.Companion#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%rdi, 24(%rsp)
-               	movq	%rdi, 856494(%rip)      # 0x4edc80 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
-               	leaq	856487(%rip), %r14      # 0x4edc80 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
-               	callq	0x41ce80 <kfun:kotlin.native.internal.HexStringParser.Companion#<init>(){}>
-               	movq	856475(%rip), %rsi      # 0x4edc80 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	leaq	646046(%rip), %rdx      # 0x4ba710 <ktypeglobal:kotlin.native.internal.HexStringParser.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 858238(%rip)      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	leaq	858231(%rip), %r14      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	movq	858224(%rip), %rdi      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	callq	0x41cf50 <kfun:kotlin.native.internal.HexStringParser.Companion#<init>(){}>
+               	movq	858212(%rip), %rsi      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -9142,17 +9187,17 @@
@@@[(3, 9), (10, 24)]@@@
-               	movl	%esi, %ebx
-               	movq	%rdi, %r13
-               	movb	861327(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movl	%esi, %ebp
+               	movq	%rdi, %rbx
+               	movb	863079(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x41cbb2 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal+0x22>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	56(%r13), %rdi
-               	callq	0x41cde0 <kfun:kotlin.native.internal.HexStringParser.countBitsLength#internal>
-               	movl	%eax, %ebp
-               	subl	%ebx, %ebp
-               	jle	0x41cc8a <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal+0xfa>
+               	je	0x41cc62 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal+0x22>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	56(%rbx), %rdi
+               	callq	0x41ceb0 <kfun:kotlin.native.internal.HexStringParser.countBitsLength#internal>
+               	movl	%eax, %r13d
+               	subl	%ebp, %r13d
+               	jle	0x41cd45 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal+0x105>

@@ -9168,36 +9213,40 @@
@@@[(3, 5), (7, 15), (24, 28), (30, 40), (43, 53)]@@@
-               	movl	%ebp, %ecx
+               	movl	%r13d, %ecx
@@@@
-               	movq	64(%r13), %rbx
-               	movq	%rbx, 24(%rsp)
-               	andq	56(%r13), %rax
-               	leaq	455662(%rip), %rdx      # 0x48c027 <typeinfo name for kotlin::gc::GCSchedulerData+0x19d6>
+               	movq	64(%rbx), %rbp
+               	movq	%rbp, 24(%rsp)
+               	andq	56(%rbx), %rax
+               	leaq	460283(%rip), %rdx      # 0x48d2e7 <typeinfo name for kotlin::gc::GCSchedulerData+0x19d6>
@@@@
-               	callq	0x4799e0 <CreateStringFromCString>
-               	movq	%rbx, %rdi
+               	callq	0x47ab90 <CreateStringFromCString>
+               	movq	%rbp, %rdi
@@@@
-               	callq	0x47a310 <Kotlin_String_plusImpl>
-               	movq	%rax, 64(%r13)
-               	movl	%ebp, %ecx
-               	sarq	%cl, 56(%r13)
+               	callq	0x47b4d0 <Kotlin_String_plusImpl>
+               	movq	%rax, 64(%rbx)
+               	movq	56(%rbx), %rax
+               	movl	%r13d, %ecx
+               	sarq	%cl, %rax
+               	movq	%rax, 56(%rbx)
@@@@
-               	jmp	0x41cc92 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal+0x102>
-               	subl	%eax, %ebx
-               	movl	%ebx, %ecx
-               	shlq	%cl, 56(%r13)
+               	jmp	0x41cd54 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal+0x114>
+               	movq	56(%rbx), %rdx
+               	subl	%eax, %ebp
+               	movl	%ebp, %ecx
+               	shlq	%cl, %rdx
+               	movq	%rdx, 56(%rbx)

@@ -9229,53 +9278,56 @@
@@@[(31, 55), (61, 64), (65, 69)]@@@
-               	callq	0x42d970 <kfun:kotlin.text.Regex#replace(kotlin.CharSequence;kotlin.String){}kotlin.String>
-               	movl	8(%rax), %ecx
-               	movq	56(%r15), %rax
-               	movq	%rax, %rdi
-               	sarq	%rdi
-               	movq	%rdi, 56(%r15)
-               	testb	$1, %al
-               	je	0x41cdc6 <kfun:kotlin.native.internal.HexStringParser.round#internal+0x116>
-               	testl	%ecx, %ecx
-               	jg	0x41cd97 <kfun:kotlin.native.internal.HexStringParser.round#internal+0xe7>
-               	andl	$2, %eax
+               	callq	0x42dc00 <kfun:kotlin.text.Regex#replace(kotlin.CharSequence;kotlin.String){}kotlin.String>
+               	movl	8(%rax), %eax
+               	movq	56(%r15), %rcx
+               	movq	%rcx, %rdx
+               	sarq	%rdx
+               	movq	%rdx, 56(%r15)
+               	testb	$1, %cl
+               	je	0x41ce91 <kfun:kotlin.native.internal.HexStringParser.round#internal+0x121>
+               	movq	56(%r15), %rdi
+               	testl	%eax, %eax
+               	jg	0x41ce5e <kfun:kotlin.native.internal.HexStringParser.round#internal+0xee>
+               	movl	%edi, %eax
+               	andl	$1, %eax
@@@@
+               	movq	56(%r15), %rax
+               	addq	$1, %rax
+               	movq	%rax, 56(%r15)
@@@@
-               	addq	$1, %rdi
-               	movq	%rdi, 56(%r15)
-               	callq	0x41cde0 <kfun:kotlin.native.internal.HexStringParser.countBitsLength#internal>
+               	callq	0x41ceb0 <kfun:kotlin.native.internal.HexStringParser.countBitsLength#internal>

@@ -9285,16 +9337,17 @@
@@@[(3, 4)]@@@
+               	nopl	(%rax,%rax)

@@ -9345,7 +9398,7 @@
@@@[(3, 5)]@@@
-               	movq	%rdi, %r12
+               	movq	%rdi, %rbx

@@ -9354,66 +9407,66 @@
@@@[(3, 5), (12, 16), (18, 20), (25, 33), (34, 48), (58, 62), (64, 68), (69, 75), (88, 90), (92, 94)]@@@
-               	leaq	80(%rsp), %rbx
+               	leaq	80(%rsp), %r13
@@@@
-               	movq	-64(%rax), %r13
-               	movq	288(%r13), %rax
+               	movq	-64(%rax), %r12
+               	movq	288(%r12), %rax
@@@@
-               	movq	%rax, 288(%r13)
+               	movq	%rax, 288(%r12)
@@@@
-               	je	0x41cf2c <kfun:kotlin.native.internal.HexStringParser.Companion#<init>(){}+0xac>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movaps	441261(%rip), %xmm0     # 0x488ae0 <_IO_stdin_used+0xe0>
-               	movups	%xmm0, 48(%r12)
+               	je	0x41cffe <kfun:kotlin.native.internal.HexStringParser.Companion#<init>(){}+0xae>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movaps	445915(%rip), %xmm0     # 0x489de0 <_IO_stdin_used+0xe0>
+               	movups	%xmm0, 48(%rbx)
@@@@
-               	movq	%rax, 64(%r12)
-               	leaq	807537(%rip), %rax      # 0x4e21c0 <__unnamed_47>
-               	movq	%rax, 8(%r12)
-               	leaq	807637(%rip), %rax      # 0x4e2230 <__unnamed_48>
-               	movq	%rax, 16(%r12)
-               	leaq	807673(%rip), %rax      # 0x4e2260 <__unnamed_49>
-               	movq	%rax, 24(%r12)
+               	movq	%rax, 64(%rbx)
+               	leaq	809250(%rip), %rax      # 0x4e2940 <__unnamed_47>
+               	movq	%rax, 8(%rbx)
+               	leaq	809351(%rip), %rax      # 0x4e29b0 <__unnamed_48>
+               	movq	%rax, 16(%rbx)
+               	leaq	809388(%rip), %rax      # 0x4e29e0 <__unnamed_49>
+               	movq	%rax, 24(%rbx)
@@@@
-               	callq	0x42faf0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
-               	movq	8(%r12), %rsi
+               	callq	0x42fda0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
+               	movq	8(%rbx), %rsi
@@@@
-               	callq	0x42faf0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
-               	movq	16(%r12), %rsi
+               	callq	0x42fda0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
+               	movq	16(%rbx), %rsi
@@@@
-               	movq	%rbx, %rdx
-               	callq	0x42faf0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
-               	movq	24(%r12), %rsi
+               	movq	%r13, %rdx
+               	callq	0x42fda0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
+               	movq	24(%rbx), %rsi
@@@@
-               	movq	288(%r13), %rax
+               	movq	288(%r12), %rax
@@@@
-               	movq	%rax, 288(%r13)
+               	movq	%rax, 288(%r12)

@@ -9421,27 +9474,27 @@
@@@[(3, 6), (7, 16), (18, 22), (26, 36), (37, 39)]@@@
-               	callq	0x47a3e0 <Kotlin_String_unsafeStringFromCharArray>
-               	movq	%rax, %rbp
+               	callq	0x47b5a0 <Kotlin_String_unsafeStringFromCharArray>
@@@@
-               	movq	8(%rsp), %rax
-               	movq	%rax, 288(%r13)
-               	movq	%rbp, 32(%r12)
-               	movq	296(%r13), %rdi
+               	movq	8(%rsp), %rcx
+               	movq	%rcx, 288(%r12)
+               	movq	%rax, 32(%rbx)
+               	movq	32(%rbx), %r14
+               	movq	296(%r12), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rbp
@@@@
-               	movq	%rbx, 112(%rsp)
-               	movq	%rbx, %rdi
-               	movq	%rbp, %rsi
-               	callq	0x42d020 <kfun:kotlin.text.Regex#<init>(kotlin.String){}>
-               	movq	%rbx, 40(%r12)
+               	movq	%rbp, 112(%rsp)
+               	movq	%rbp, %rdi
+               	movq	%r14, %rsi
+               	callq	0x42d280 <kfun:kotlin.text.Regex#<init>(kotlin.String){}>
+               	movq	%rbp, 40(%rbx)
@@@@
-               	movq	%rax, 288(%r13)
+               	movq	%rax, 288(%r12)

@@ -9450,7 +9503,7 @@
@@@[(3, 5)]@@@
-               	nopw	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -9481,36 +9534,38 @@
@@@[(11, 17), (18, 24), (25, 26), (28, 29), (30, 33), (34, 41), (42, 44), (45, 55)]@@@
-               	movslq	52(%rbx), %rdx
-               	leaq	16(%rsp), %rcx
-               	movq	%rcx, 632(%rsp)
+               	movl	52(%rbx), %ecx
+               	leaq	16(%rsp), %rdx
+               	movq	%rdx, 632(%rsp)
@@@@
-               	movl	%edx, 92(%rsp)
-               	leaq	776252(%rip), %rdi      # 0x4da9b8 <__unnamed_18>
+               	movl	%ecx, 92(%rsp)
+               	leaq	777965(%rip), %rax      # 0x4db138 <__unnamed_18>
+               	movq	%rax, 80(%rsp)
+               	movl	88(%rsp), %eax
@@@@
+               	movq	$-1, %rdx
@@@@
-               	movq	%rdi, 80(%rsp)
@@@@
-               	notq	%rsi
-               	movq	%rsi, 24(%rsp)
-               	movq	$-1, %rsi
@@@@
-               	shlq	%cl, %rsi
-               	notq	%rsi
-               	movq	%rsi, 32(%rsp)
-               	movq	%rdx, %rax
-               	notq	%rax
-               	movq	%rax, 40(%rsp)
-               	movl	%edx, %ecx
@@@@
+               	notq	%rsi
+               	movq	%rsi, 24(%rsp)
@@@@
-               	movq	%rdi, 48(%rsp)
+               	movq	%rdi, 32(%rsp)
+               	movl	92(%rsp), %ecx
+               	movl	%ecx, %eax
+               	notl	%eax
+               	cltq
+               	movq	%rax, 40(%rsp)
+               	shlq	%cl, %rdx
+               	notq	%rdx
+               	movq	%rdx, 48(%rsp)

@@ -9591,97 +9646,98 @@
@@@[(64, 67), (69, 83), (84, 97), (100, 101)]@@@
-               	movq	%rcx, 432(%rsp)
+               	movq	424(%rsp), %rax
+               	movq	%rax, 432(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	424(%rsp), %rax
+               	movq	%rax, 448(%rsp)
+               	movq	384(%rsp), %rcx
+               	movq	%rcx, 456(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	424(%rsp), %rax
+               	movq	%rax, 464(%rsp)
+               	movq	408(%rsp), %rcx
+               	movq	%rcx, 472(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	384(%rsp), %rax
-               	movq	424(%rsp), %rcx
-               	movq	%rcx, 448(%rsp)
-               	movq	%rax, 456(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	408(%rsp), %rax
-               	movq	424(%rsp), %rcx
-               	movq	%rcx, 464(%rsp)
-               	movq	%rax, 472(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)
-               	movq	312(%rsp), %rcx
@@@@
+               	movq	312(%rsp), %rcx

@@ -9698,70 +9754,68 @@
@@@[(3, 12), (21, 26), (31, 46), (47, 48), (89, 90), (91, 92)]@@@
-               	movq	%rbx, 336(%rsp)
-               	cmpl	$0, 8(%rbx)
-               	je	0x41e578 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x14c8>
-               	movzwl	16(%rbx), %eax
+               	movq	328(%rsp), %rax
+               	movq	%rax, 336(%rsp)
+               	cmpl	$0, 8(%rax)
+               	je	0x41e6a8 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1528>
+               	movzwl	16(%rax), %eax
@@@@
-               	je	0x41d667 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x5b7>
-               	movl	$1, %ebx
-               	movq	328(%rsp), %rdi
-               	jmp	0x41d6ab <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x5fb>
+               	jne	0x41d77d <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x5fd>
@@@@
-               	callq	0x47a510 <Kotlin_String_subSequence>
-               	movq	%rax, %rdi
-               	movq	(%rax), %rax
-               	andq	$-4, %rax
-               	movq	(%rax), %rax
-               	cmpl	$122, 92(%rax)
-               	jne	0x41e582 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x14d2>
-               	movq	%rdi, 328(%rsp)
+               	callq	0x47b6d0 <Kotlin_String_subSequence>
+               	movq	(%rax), %rcx
+               	andq	$-4, %rcx
+               	movq	(%rcx), %rcx
+               	cmpl	$122, 92(%rcx)
+               	jne	0x41e6f7 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1577>
+               	movq	%rax, 328(%rsp)
@@@@
+               	movq	328(%rsp), %rdi
@@@@
+               	movq	%rax, 288(%rbp)
@@@@
-               	movaps	%xmm0, 304(%rsp)

@@ -9776,6 +9830,8 @@
@@@[(3, 5)]@@@
+               	movaps	%xmm0, 304(%rsp)
+               	movq	288(%rbp), %rax

@@ -9829,53 +9885,54 @@
@@@[(7, 8)]@@@
+               	movq	128(%rsp), %rax

@@ -9897,26 +9954,27 @@
@@@[(26, 27)]@@@
+               	movq	128(%rsp), %rax

@@ -9976,15 +10034,16 @@
@@@[(3, 6), (8, 12)]@@@
-               	movq	%rcx, 176(%rsp)
+               	movq	168(%rsp), %rax
+               	movq	%rax, 176(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)

@@ -10075,30 +10134,29 @@
@@@[(27, 33), (34, 37)]@@@
-               	jne	0x41dde5 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0xd35>
-               	leaq	44(%r13), %rax
-               	jmp	0x41dddb <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0xd2b>
+               	jne	0x41dee2 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0xd62>
+               	movl	44(%r13), %ebp
+               	jmp	0x41deda <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0xd5a>
@@@@
-               	addq	$8, %rax
-               	movl	(%rax), %ebp
+               	movl	8(%rax), %ebp

@@ -10226,49 +10284,50 @@
@@@[(3, 6), (7, 10), (32, 33), (35, 53)]@@@
-               	callq	0x47a310 <Kotlin_String_plusImpl>
-               	movq	%rax, %rbx
+               	callq	0x47b4d0 <Kotlin_String_plusImpl>
@@@@
-               	movq	%rax, 136(%rsp)
+               	movq	128(%rsp), %rbx
+               	movq	%rbx, 136(%rsp)
@@@@
+               	movq	128(%rsp), %rax
@@@@
-               	je	0x41e0d1 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1021>
-               	movq	128(%rsp), %rdi
-               	jmp	0x41e0e0 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1030>
-               	leaq	802824(%rip), %rdi      # 0x4e20e0 <__unnamed_54>
-               	movq	%rdi, 128(%rsp)
-               	movq	%rdi, 456(%rsp)
-               	movq	104(%rsp), %rax
-               	movq	%rax, 288(%r13)
-               	movq	%rdi, 464(%rsp)
+               	jne	0x41e1e3 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1063>
+               	leaq	804485(%rip), %rax      # 0x4e2860 <__unnamed_54>
+               	movq	%rax, 128(%rsp)
+               	movq	128(%rsp), %rax
+               	movq	%rax, 456(%rsp)
+               	movq	104(%rsp), %rcx
+               	movq	%rcx, 288(%r13)
+               	movq	%rax, 464(%rsp)
+               	movq	464(%rsp), %rdi

@@ -10277,7 +10336,7 @@
@@@[(3, 5)]@@@
-               	leaq	144(%rsp), %rbx
+               	leaq	144(%rsp), %r14

@@ -10285,40 +10344,42 @@
@@@[(3, 6), (9, 13), (17, 33), (34, 35)]@@@
-               	movq	%r15, 128(%rsp)
+               	movq	120(%rsp), %rbp
+               	movq	%rbp, 128(%rsp)
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rbp
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rbx
@@@@
-               	movq	%rbp, 136(%rsp)
-               	leaq	802758(%rip), %rsi      # 0x4e21a0 <__unnamed_53>
-               	movq	%rbp, %rdi
-               	callq	0x42d020 <kfun:kotlin.text.Regex#<init>(kotlin.String){}>
-               	movq	%rbp, %rdi
-               	movq	%r15, %rsi
-               	movq	%rbx, %rdx
-               	callq	0x42dd10 <kfun:kotlin.text.Regex#replaceFirst(kotlin.CharSequence;kotlin.String){}kotlin.String>
+               	movq	%rbx, 136(%rsp)
+               	leaq	804398(%rip), %rsi      # 0x4e2920 <__unnamed_53>
+               	movq	%rbx, %rdi
+               	callq	0x42d280 <kfun:kotlin.text.Regex#<init>(kotlin.String){}>
+               	movq	%rbx, %rdi
+               	movq	%rbp, %rsi
+               	movq	%r14, %rdx
+               	callq	0x42dfa0 <kfun:kotlin.text.Regex#replaceFirst(kotlin.CharSequence;kotlin.String){}kotlin.String>
@@@@
+               	movq	120(%rsp), %rax

@@ -10329,128 +10390,129 @@
@@@[(96, 104), (105, 110), (130, 148)]@@@
-               	jle	0x41e4e3 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1433>
+               	jle	0x41e609 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1489>
+               	movq	464(%rsp), %rcx
+               	movq	%rcx, 480(%rsp)
+               	movq	851748(%rip), %rax      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	movl	68(%rax), %edx
+               	cmpl	%edx, 8(%rcx)
+               	jle	0x41e570 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x13f0>
@@@@
-               	movq	%rdi, 480(%rsp)
-               	movl	8(%rdi), %ecx
-               	movq	850113(%rip), %rax      # 0x4edc80 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
-               	cmpl	68(%rax), %ecx
-               	jle	0x41e44b <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x139b>
@@@@
-               	callq	0x47a510 <Kotlin_String_subSequence>
-               	movq	%rax, %rdi
-               	movq	(%rax), %rax
-               	andq	$-4, %rax
-               	movq	(%rax), %rax
-               	cmpl	$122, 92(%rax)
-               	jne	0x41e582 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x14d2>
-               	movq	%rdi, 464(%rsp)
-               	movq	849973(%rip), %rax      # 0x4edc80 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	callq	0x47b6d0 <Kotlin_String_subSequence>
+               	movq	(%rax), %rcx
+               	andq	$-4, %rcx
+               	movq	(%rcx), %rcx
+               	cmpl	$122, 92(%rcx)
+               	jne	0x41e6f7 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1577>
+               	movq	%rax, 464(%rsp)
+               	movq	851600(%rip), %rax      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	movq	464(%rsp), %rdi

@@ -10464,25 +10526,39 @@
@@@[(11, 26), (29, 36), (37, 47)]@@@
-               	xorl	%edx, %edx
+               	jmp	0x41e64d <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x14cd>
+               	movq	64(%rsp), %rax
+               	addl	%eax, %esi
+               	addl	$1, %esi
+               	movq	$0, 64(%rsp)
+               	leaq	16(%rsp), %rbx
+               	movq	%rbx, %rdi
+               	callq	0x41cc40 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal>
+               	movq	%rbx, %rdi
+               	callq	0x41cd70 <kfun:kotlin.native.internal.HexStringParser.round#internal>
+               	movq	48(%rsp), %rax
+               	andq	72(%rsp), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	56(%rsp), %rdx
@@@@
-               	movq	56(%rsp), %rsi
-               	movq	64(%rsp), %rdi
-               	shlq	%cl, %rsi
-               	movq	%rsi, 56(%rsp)
+               	shlq	%cl, %rdx
+               	movq	%rdx, 56(%rsp)
+               	movq	64(%rsp), %rdx
@@@@
-               	shlq	%cl, %rdi
-               	orq	%rdx, %rdi
-               	orq	%rsi, %rdi
-               	movq	%rdi, %xmm0
+               	shlq	%cl, %rdx
+               	movq	%rdx, 64(%rsp)
+               	movq	64(%rsp), %rax
+               	orq	56(%rsp), %rax
+               	orq	72(%rsp), %rax
+               	movq	%rax, %xmm0

@@ -10493,96 +10569,83 @@
@@@[(3, 22), (33, 42), (63, 67), (78, 83)]@@@
-               	movl	64(%rsp), %eax
-               	addl	%eax, %esi
-               	addl	$1, %esi
-               	movq	$0, 64(%rsp)
-               	leaq	16(%rsp), %rbx
-               	movq	%rbx, %rdi
-               	callq	0x41cb90 <kfun:kotlin.native.internal.HexStringParser.fitMantissaInDesiredWidth#internal>
-               	movq	%rbx, %rdi
-               	callq	0x41ccb0 <kfun:kotlin.native.internal.HexStringParser.round#internal>
-               	movq	72(%rsp), %rdx
-               	andq	48(%rsp), %rdx
-               	movq	%rdx, 72(%rsp)
-               	jmp	0x41e4f0 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x1440>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	callq	0x421090 <ThrowNullPointerException>
-               	leaq	634455(%rip), %rsi      # 0x4b93e0 <ktypeglobal:kotlin.String#internal>
-               	callq	0x421230 <ThrowClassCastException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	callq	0x4212a0 <ThrowNullPointerException>
@@@@
-               	jmp	0x41e6da <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x162a>
-               	leaq	629618(%rip), %rsi      # 0x4b8140 <ktypeglobal:kotlin.Array#internal>
-               	callq	0x421230 <ThrowClassCastException>
+               	jmp	0x41e80a <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x168a>
+               	leaq	631246(%rip), %rsi      # 0x4b88c0 <ktypeglobal:kotlin.Array#internal>
+               	callq	0x421440 <ThrowClassCastException>
+               	leaq	636002(%rip), %rsi      # 0x4b9b60 <ktypeglobal:kotlin.String#internal>
+               	movq	%rax, %rdi
+               	callq	0x421440 <ThrowClassCastException>
@@@@
-               	callq	0x47dcf0 <ThrowException>
+               	callq	0x47ef60 <ThrowException>
+               	leaq	635899(%rip), %rsi      # 0x4b9b60 <ktypeglobal:kotlin.String#internal>
+               	callq	0x421440 <ThrowClassCastException>
@@@@
-               	jmp	0x41e6da <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x162a>
-               	leaq	634232(%rip), %rsi      # 0x4b93e0 <ktypeglobal:kotlin.String#internal>
-               	movq	%rax, %rdi
-               	callq	0x421230 <ThrowClassCastException>
+               	jmp	0x41e80a <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double+0x168a>

@@ -10604,29 +10667,29 @@
@@@[(9, 17), (18, 22)]@@@
-               	testb	$2, 89(%rax)
-               	jne	0x41e7a1 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x81>
-               	jmp	0x41e7d0 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	testl	$512, 88(%rax)          # imm = 0x200
+               	jne	0x41e8d7 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0x87>
+               	jmp	0x41e906 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
-               	testb	$2, 89(%rax)
-               	je	0x41e7d0 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb0>
+               	testl	$512, 88(%rax)          # imm = 0x200
+               	je	0x41e906 <kfun:kotlin.native.internal.KClassImpl#<get-simpleName>(){}kotlin.String?+0xb6>

@@ -10636,7 +10699,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -10746,19 +10809,19 @@
@@@[(17, 23)]@@@
-               	jne	0x41e9e4 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
-               	movq	8(%r14), %rax
-               	cmpq	8(%rbx), %rax
+               	jne	0x41eb24 <kfun:kotlin.native.internal.KClassImpl#equals(kotlin.Any?){}kotlin.Boolean+0x44>
+               	movq	8(%rbx), %rax
+               	cmpq	%rax, 8(%r14)

@@ -10996,19 +11059,19 @@
@@@[(16, 24)]@@@
-               	movl	$4294967071, %ecx       # imm = 0xFFFFFF1F
-               	addl	92(%rax), %ecx
-               	cmpl	$29, %ecx
-               	ja	0x41eea9 <kfun:kotlin.native.internal.KFunctionImpl#equals(kotlin.Any?){}kotlin.Boolean+0x199>
+               	movl	92(%rax), %eax
+               	addl	$4294967071, %eax       # imm = 0xFFFFFF1F
+               	cmpl	$29, %eax
+               	ja	0x41efe9 <kfun:kotlin.native.internal.KFunctionImpl#equals(kotlin.Any?){}kotlin.Boolean+0x199>

@@ -11115,41 +11178,41 @@
@@@[(3, 5), (9, 19), (20, 26), (29, 33)]@@@
-               	movaps	%xmm0, 112(%rsp)
-               	movaps	%xmm0, 96(%rsp)
@@@@
-               	movq	$0, 128(%rsp)
-               	leaq	64(%rsp), %r14
-               	leaq	56(%rsp), %rbp
-               	leaq	627472(%rip), %rax      # 0x4b8270 <ktypeglobal:kotlin.IntArray#internal>
+               	movaps	%xmm0, 16(%rsp)
+               	movaps	%xmm0, (%rsp)
+               	movq	$0, 96(%rsp)
+               	leaq	32(%rsp), %r14
+               	leaq	24(%rsp), %rbp
+               	leaq	629076(%rip), %rax      # 0x4b89f0 <ktypeglobal:kotlin.IntArray#internal>
@@@@
-               	movq	%rax, (%rsp)
-               	movl	$4, 8(%rsp)
-               	movups	%xmm0, 16(%rsp)
+               	movq	%rax, 112(%rsp)
+               	movl	$4, 120(%rsp)
+               	movups	%xmm0, 128(%rsp)
@@@@
-               	movq	%rax, 40(%rsp)
-               	leaq	32(%rsp), %rax
+               	movq	%rax, 8(%rsp)
+               	movq	%rsp, %rax

@@ -11171,44 +11234,48 @@
@@@[(3, 16), (17, 20), (21, 40), (41, 45), (46, 49), (53, 55), (57, 63)]@@@
-               	movq	%rsp, %rcx
+               	leaq	112(%rsp), %rcx
+               	movq	%rcx, 48(%rsp)
+               	movq	%rcx, 56(%rsp)
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 64(%rsp)
+               	movq	(%rcx), %rdx
+               	movl	%r15d, 16(%rcx)
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 72(%rsp)
+               	movq	(%rcx), %rdx
+               	movl	$0, 20(%rcx)
+               	movq	56(%rsp), %rcx
@@@@
+               	movq	(%rcx), %rdx
+               	movl	%ebp, 24(%rcx)
+               	movq	56(%rsp), %rcx
@@@@
-               	movq	%rcx, 96(%rsp)
-               	movq	(%rsp), %rdx
-               	movl	%r15d, 16(%rsp)
-               	movq	%rcx, 104(%rsp)
-               	movq	(%rsp), %rdx
-               	movl	$0, 20(%rsp)
-               	movq	%rcx, 112(%rsp)
-               	movq	(%rsp), %rdx
-               	movl	%ebp, 24(%rsp)
-               	movq	%rcx, 120(%rsp)
-               	movq	(%rsp), %rdx
-               	movl	%eax, 28(%rsp)
-               	movq	%rcx, 128(%rsp)
-               	movl	8(%rsp), %r14d
+               	movq	(%rcx), %rdx
+               	movl	%eax, 28(%rcx)
+               	movq	56(%rsp), %r14
+               	movq	%r14, 96(%rsp)
+               	movl	8(%r14), %r15d
@@@@
-               	testl	%r14d, %r14d
-               	cmovsl	%ebp, %r14d
+               	testl	%r15d, %r15d
+               	cmovsl	%ebp, %r15d
@@@@
-               	jmp	0x41f0b1 <kfun:kotlin.native.internal.KFunctionImpl#hashCode(){}kotlin.Int+0x1a1>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x41f1f2 <kfun:kotlin.native.internal.KFunctionImpl#hashCode(){}kotlin.Int+0x1a2>
@@@@
-               	addl	16(%rsp,%rbp,4), %eax
+               	addl	16(%r14,%rbp,4), %eax
@@@@
-               	cmpq	%rbp, %r14
-               	je	0x41f0c8 <kfun:kotlin.native.internal.KFunctionImpl#hashCode(){}kotlin.Int+0x1b8>
-               	movzbl	851835(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	cmpq	%rbp, %r15
+               	je	0x41f209 <kfun:kotlin.native.internal.KFunctionImpl#hashCode(){}kotlin.Int+0x1b9>
+               	movzbl	853442(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -11313,30 +11380,31 @@
@@@[(21, 32), (37, 39)]@@@
-               	movq	%rcx, 846280(%rip)      # 0x4edc88 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
-               	leaq	846273(%rip), %rdi      # 0x4edc88 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
-               	movq	$0, 24(%rax)
-               	movq	846258(%rip), %rsi      # 0x4edc88 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
-               	callq	0x468020 <InitAndRegisterGlobal>
+               	movq	%rcx, 847880(%rip)      # 0x4ee408 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
+               	leaq	847873(%rip), %rdi      # 0x4ee408 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
+               	movq	847866(%rip), %rax      # 0x4ee408 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
+               	movq	$0, 8(%rax)
+               	movq	847851(%rip), %rsi      # 0x4ee408 <kvar:kotlin.native.internal.NativePtr.$companion#internal>
+               	callq	0x468bc0 <InitAndRegisterGlobal>
@@@@
-               	nopl	(%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -11355,21 +11423,21 @@
@@@[(13, 29)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r15
-               	addq	$16, %rax
-               	movq	$0, 8(%r15)
-               	leaq	634823(%rip), %rcx      # 0x4ba340 <ktypeglobal:kotlin.native.internal.NumberConverter.Companion#internal>
-               	movq	%rcx, 16(%r15)
-               	movq	%rax, 24(%rsp)
-               	movq	%rax, 846087(%rip)      # 0x4edc90 <kvar:kotlin.native.internal.NumberConverter.$companion#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
+               	movq	$0, 8(%rax)
+               	leaq	636410(%rip), %rdx      # 0x4baac0 <ktypeglobal:kotlin.native.internal.NumberConverter.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 847674(%rip)      # 0x4ee410 <kvar:kotlin.native.internal.NumberConverter.$companion#internal>
+               	movq	847667(%rip), %r15      # 0x4ee410 <kvar:kotlin.native.internal.NumberConverter.$companion#internal>

@@ -11379,39 +11447,40 @@
@@@[(19, 32), (38, 42)]@@@
-               	movq	%rcx, 32(%r15)
-               	cmpl	$0, 24(%rax)
-               	je	0x41f4a0 <kfun:kotlin.native.internal.NumberConverter.$init_global#internal+0x1b0>
-               	movq	16(%rax), %rcx
-               	movq	$1, 32(%rax)
-               	movq	32(%r15), %rax
+               	movq	%rcx, 16(%r15)
+               	movq	16(%r15), %rax
+               	cmpl	$0, 8(%rax)
+               	je	0x41f600 <kfun:kotlin.native.internal.NumberConverter.$init_global#internal+0x1c0>
+               	movq	(%rax), %rcx
+               	movq	$1, 16(%rax)
+               	movq	16(%r15), %rax
@@@@
-               	nop
-               	movzbl	850945(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	nopl	(%rax)
+               	movzbl	852521(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -11466,92 +11535,91 @@
@@@[(13, 15), (18, 26), (30, 34), (41, 49), (59, 62), (71, 76), (77, 89), (90, 94), (97, 103), (105, 108)]@@@
-               	movslq	20(%rbx), %rcx
+               	movl	20(%rbx), %ecx
@@@@
-               	jbe	0x41f6c2 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x212>
-               	movl	16(%rsp), %edx
-               	testl	%edx, %edx
-               	je	0x41f6c2 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x212>
+               	jbe	0x41f821 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x211>
+               	cmpl	$0, 16(%rsp)
+               	je	0x41f821 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x211>
+               	movslq	%ecx, %rcx
@@@@
-               	cmpl	$1, %edx
-               	je	0x41f6c2 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x212>
+               	cmpl	$1, 16(%rsp)
+               	jbe	0x41f821 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x211>
@@@@
-               	je	0x41f5c5 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x115>
-               	nopw	(%rax,%rax)
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	20(%rbx), %rax
+               	je	0x41f725 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x115>
+               	nopl	(%rax)
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	20(%rbx), %eax
@@@@
-               	jbe	0x41f6c2 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x212>
+               	jbe	0x41f821 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x211>
+               	cltq
@@@@
-               	jne	0x41f5c0 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x110>
-               	jmp	0x41f5c5 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x115>
-               	movl	16(%rsp), %eax
+               	jne	0x41f720 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x110>
+               	jmp	0x41f725 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x115>
@@@@
-               	jne	0x41f632 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x182>
-               	cmpl	%ebp, %eax
-               	jbe	0x41f6c2 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x212>
-               	movq	8(%rsp), %rcx
-               	movslq	%ebp, %rcx
-               	movw	$48, 24(%rsp,%rcx,2)
+               	jne	0x41f791 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x181>
+               	cmpl	%ebp, 16(%rsp)
+               	jbe	0x41f821 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x211>
+               	movq	8(%rsp), %rax
+               	movslq	%ebp, %rax
+               	movw	$48, 24(%rsp,%rax,2)
@@@@
-               	cmpl	%ebp, %eax
-               	jbe	0x41f6c2 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x212>
+               	cmpl	%ebp, 16(%rsp)
+               	jbe	0x41f821 <kfun:kotlin.native.internal.NumberConverter.freeFormatExponential#internal+0x211>
@@@@
-               	movslq	%ebp, %rax
-               	movw	$69, 24(%rsp,%rax,2)
-               	addl	$1, %ebp
+               	movslq	%ebp, %rdx
+               	movw	$69, 24(%rsp,%rdx,2)
+               	addl	$1, %edx
@@@@
-               	movl	%ebp, %edx
-               	callq	0x47a3e0 <Kotlin_String_unsafeStringFromCharArray>
+               	callq	0x47b5a0 <Kotlin_String_unsafeStringFromCharArray>

@@ -11563,8 +11631,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -11595,110 +11663,109 @@
@@@[(15, 24), (25, 29), (37, 41), (58, 60), (63, 66), (67, 71), (83, 90), (91, 99), (100, 108), (109, 124), (125, 135), (138, 140), (147, 150)]@@@
-               	jns	0x41f7f5 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x125>
-               	movl	16(%rsp), %eax
-               	testl	%eax, %eax
-               	je	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
-               	movq	8(%rsp), %rcx
+               	jns	0x41f955 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x125>
+               	cmpl	$0, 16(%rsp)
+               	je	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
+               	movq	8(%rsp), %rax
@@@@
-               	cmpl	$1, %eax
-               	je	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
+               	cmpl	$1, 16(%rsp)
+               	jbe	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
@@@@
-               	nopl	(%rax)
-               	movzbl	850033(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	nop
+               	movzbl	851609(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	movslq	20(%r15), %rcx
+               	movl	20(%r15), %ecx
@@@@
-               	jbe	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
+               	jbe	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
+               	movslq	%ecx, %rcx
@@@@
-               	jmp	0x41f82f <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x15f>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x41f98f <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x15f>
+               	nopl	(%rax)
@@@@
-               	je	0x41f870 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1a0>
-               	movl	16(%rsp), %eax
-               	cmpl	%ebx, %eax
-               	jbe	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
+               	je	0x41f9d0 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1a0>
+               	cmpl	%ebx, 16(%rsp)
+               	jbe	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
@@@@
-               	movq	8(%rsp), %rcx
-               	movslq	%ebx, %rcx
-               	movw	%bp, 24(%rsp,%rcx,2)
-               	leal	1(%rbx), %ecx
+               	movq	8(%rsp), %rax
+               	movslq	%ebx, %rax
+               	movw	%bp, 24(%rsp,%rax,2)
+               	leal	1(%rbx), %eax
@@@@
-               	je	0x41f899 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1c9>
-               	movl	%ecx, %ebx
-               	jmp	0x41f8af <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1df>
-               	nop
+               	je	0x41f9f7 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1c7>
+               	movl	%eax, %ebx
+               	jmp	0x41fa0e <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1de>
+               	nopl	(%rax)
@@@@
-               	jl	0x41f8af <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1df>
-               	movl	16(%rsp), %eax
-               	cmpl	%ebx, %eax
-               	jbe	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
-               	movq	8(%rsp), %rcx
-               	movslq	%ebx, %rcx
-               	movw	$48, 24(%rsp,%rcx,2)
-               	leal	1(%rbx), %ecx
-               	testl	%r13d, %r13d
-               	jne	0x41f868 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x198>
-               	cmpl	%ecx, %eax
-               	jbe	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
+               	jl	0x41fa0e <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x1de>
+               	cmpl	%ebx, 16(%rsp)
+               	jbe	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
@@@@
-               	movslq	%ecx, %rax
+               	movslq	%ebx, %rax
+               	movw	$48, 24(%rsp,%rax,2)
+               	leal	1(%rbx), %eax
+               	testl	%r13d, %r13d
+               	jne	0x41f9c6 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x196>
+               	cmpl	%eax, 16(%rsp)
+               	jbe	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
+               	movq	8(%rsp), %rcx
+               	cltq
@@@@
-               	movslq	20(%r15), %rax
+               	movl	20(%r15), %eax
@@@@
-               	jbe	0x41f913 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x243>
+               	jbe	0x41fa74 <kfun:kotlin.native.internal.NumberConverter.freeFormat#internal+0x244>
+               	cltq

@@ -11710,8 +11777,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -11960,45 +12027,47 @@
@@@[(12, 15), (30, 36), (39, 41), (42, 45), (48, 51), (54, 57)]@@@
-               	movq	%rbp, %r8
-               	jns	0x4201b4 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x894>
+               	jns	0x420344 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x8c4>
@@@@
-               	nop
-               	movl	96(%rsp,%rax,8), %edi
-               	movl	100(%rsp,%rax,8), %ebp
+               	nopl	(%rax)
+               	movq	96(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
+               	movq	96(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi
@@@@
-               	leaq	(,%rbp,4), %rdi
-               	addq	%rbp, %rdi
+               	leaq	(%rdi,%rdi,4), %rdi
@@@@
-               	movl	104(%rsp,%rax,8), %edi
+               	movq	104(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
-               	movl	108(%rsp,%rax,8), %edi
+               	movq	104(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi

@@ -12006,14 +12075,16 @@
@@@[(6, 12), (15, 17)]@@@
-               	je	0x41ff67 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x647>
-               	movl	96(%rsp,%rax,8), %ecx
-               	movl	100(%rsp,%rax,8), %edx
+               	je	0x4200d8 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x658>
+               	movq	96(%rsp,%rax,8), %rcx
+               	movl	%ecx, %ecx
@@@@
+               	movq	96(%rsp,%rax,8), %rdx
+               	shrq	$32, %rdx

@@ -12023,31 +12094,34 @@
@@@[(13, 19), (22, 24), (25, 28), (31, 34), (37, 40)]@@@
-               	nopl	(%rax)
-               	movl	272(%rsp,%rax,8), %edi
-               	movl	276(%rsp,%rax,8), %ebp
+               	nop
+               	movq	272(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
+               	movq	272(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi
@@@@
-               	leaq	(,%rbp,4), %rdi
-               	addq	%rbp, %rdi
+               	leaq	(%rdi,%rdi,4), %rdi
@@@@
-               	movl	280(%rsp,%rax,8), %edi
+               	movq	280(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
-               	movl	284(%rsp,%rax,8), %edi
+               	movq	280(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi

@@ -12055,14 +12129,16 @@
@@@[(6, 12), (15, 17)]@@@
-               	je	0x42003b <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x71b>
-               	movl	272(%rsp,%rax,8), %ecx
-               	movl	276(%rsp,%rax,8), %edx
+               	je	0x4201c0 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x740>
+               	movq	272(%rsp,%rax,8), %rcx
+               	movl	%ecx, %ecx
@@@@
+               	movq	272(%rsp,%rax,8), %rdx
+               	shrq	$32, %rdx

@@ -12072,32 +12148,34 @@
@@@[(14, 19), (22, 24), (25, 28), (31, 34), (37, 40)]@@@
-               	nopl	(%rax,%rax)
-               	movl	448(%rsp,%rax,8), %edi
-               	movl	452(%rsp,%rax,8), %ebp
+               	movq	448(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
+               	movq	448(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi
@@@@
-               	leaq	(,%rbp,4), %rdi
-               	addq	%rbp, %rdi
+               	leaq	(%rdi,%rdi,4), %rdi
@@@@
-               	movl	456(%rsp,%rax,8), %edi
+               	movq	456(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
-               	movl	460(%rsp,%rax,8), %edi
+               	movq	456(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi

@@ -12105,169 +12183,170 @@
@@@[(6, 12), (15, 17), (21, 24), (56, 59), (71, 80), (88, 94)]@@@
-               	je	0x42011b <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x7fb>
-               	movl	448(%rsp,%rax,8), %ecx
-               	movl	452(%rsp,%rax,8), %edx
+               	je	0x4202b0 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x830>
+               	movq	448(%rsp,%rax,8), %rcx
+               	movl	%ecx, %ecx
@@@@
+               	movq	448(%rsp,%rax,8), %rdx
+               	shrq	$32, %rdx
@@@@
-               	movl	12(%rsp), %ecx
-               	addl	$-1, %ecx
+               	addl	$-1, 20(%rsp)
@@@@
-               	movl	%ecx, 12(%rsp)
-               	nop
+               	nopl	(%rax,%rax)
@@@@
-               	leal	1(%r8), %ebp
-               	movq	%r8, 632(%rsp)
-               	movslq	%r8d, %rax
-               	movq	%rax, 40(%rsp)
+               	leal	1(%rbp), %ecx
+               	movq	%rbp, 632(%rsp)
+               	movslq	%ebp, %rax
+               	movl	%ecx, %ebp
+               	movq	%rax, 72(%rsp)
@@@@
-               	movl	%ebp, 48(%rsp)
-               	nopl	(%rax)
-               	movq	40(%rsp), %rax
+               	movl	%ecx, 80(%rsp)
+               	nop
+               	movq	72(%rsp), %rax

@@ -12290,50 +12369,57 @@
@@@[(31, 35), (39, 41), (42, 46), (49, 51), (52, 55), (58, 61), (64, 67)]@@@
-               	jmp	0x4204a0 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xb80>
+               	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
+               	jmp	0x420659 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xbd9>
+               	nopw	%cs:(%rax,%rax)
@@@@
+               	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movl	96(%rsp,%rax,8), %edi
-               	movl	100(%rsp,%rax,8), %ebp
+               	movq	96(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
+               	movq	96(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi
@@@@
-               	leaq	(,%rbp,4), %rdi
-               	addq	%rbp, %rdi
+               	leaq	(%rdi,%rdi,4), %rdi
@@@@
-               	movl	104(%rsp,%rax,8), %edi
+               	movq	104(%rsp,%rax,8), %rdi
+               	movl	%edi, %edi
@@@@
-               	movl	108(%rsp,%rax,8), %edi
+               	movq	104(%rsp,%rax,8), %rdi
+               	shrq	$32, %rdi

@@ -12341,14 +12427,16 @@
@@@[(6, 12), (15, 17)]@@@
-               	je	0x4204c7 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xba7>
-               	movl	96(%rsp,%rax,8), %ecx
-               	movl	100(%rsp,%rax,8), %edx
+               	je	0x420688 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xc08>
+               	movq	96(%rsp,%rax,8), %rcx
+               	movl	%ecx, %ecx
@@@@
+               	movq	96(%rsp,%rax,8), %rdx
+               	shrq	$32, %rdx

@@ -12358,221 +12446,241 @@
@@@[(7, 11), (16, 20), (23, 25), (26, 52), (59, 85), (86, 92), (94, 97), (102, 106), (110, 112), (113, 117), (119, 126), (127, 130), (131, 135), (142, 148), (152, 154), (155, 159), (162, 169), (170, 175), (194, 198), (213, 221), (222, 226), (228, 232), (233, 241), (242, 246), (247, 257), (311, 316), (317, 355)]@@@
-               	jmp	0x420572 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xc52>
-               	nopw	(%rax,%rax)
+               	jmp	0x420749 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xcc9>
+               	nopl	(%rax,%rax)
@@@@
-               	movl	272(%rsp,%rcx,8), %ebp
-               	movl	276(%rsp,%rcx,8), %eax
+               	movq	272(%rsp,%rcx,8), %rbp
+               	movl	%ebp, %ebp
@@@@
+               	movq	272(%rsp,%rcx,8), %rbp
+               	shrq	$32, %rbp
@@@@
-               	leaq	(%rax,%rax,4), %rax
-               	leaq	(%rdi,%rax,2), %rax
-               	movl	%eax, 276(%rsp,%rcx,8)
-               	shrq	$32, %rax
-               	movl	280(%rsp,%rcx,8), %edi
-               	leaq	(%rdi,%rdi,4), %rdi
-               	leaq	(%rax,%rdi,2), %rax
-               	movl	%eax, 280(%rsp,%rcx,8)
-               	movl	284(%rsp,%rcx,8), %edi
-               	shrq	$32, %rax
-               	leaq	(%rdi,%rdi,4), %rdi
-               	leaq	(%rax,%rdi,2), %rdi
+               	leaq	(%rbp,%rbp,4), %rbp
+               	leaq	(%rdi,%rbp,2), %rdi
+               	movl	%edi, 276(%rsp,%rcx,8)
+               	shrq	$32, %rdi
+               	movq	280(%rsp,%rcx,8), %rbp
+               	movl	%ebp, %ebp
+               	leaq	(%rbp,%rbp,4), %rbp
+               	leaq	(%rdi,%rbp,2), %rdi
+               	movl	%edi, 280(%rsp,%rcx,8)
+               	movq	280(%rsp,%rcx,8), %rbp
+               	shrq	$32, %rbp
+               	shrq	$32, %rdi
+               	leaq	(%rbp,%rbp,4), %rbp
+               	leaq	(%rdi,%rbp,2), %rdi
@@@@
-               	je	0x4205a5 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xc85>
-               	movl	272(%rsp,%rcx,8), %eax
-               	movl	276(%rsp,%rcx,8), %edx
-               	leaq	(%rax,%rax,4), %rax
-               	leaq	(%rdi,%rax,2), %rax
-               	movl	%eax, 272(%rsp,%rcx,8)
-               	shrq	$32, %rax
-               	leal	(%rdx,%rdx,4), %edx
-               	leal	(%rax,%rdx,2), %eax
-               	movl	%eax, 276(%rsp,%rcx,8)
-               	leal	1(%r15), %r9d
-               	testl	%r9d, %r9d
+               	je	0x420784 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xd04>
+               	movq	272(%rsp,%rcx,8), %rdx
+               	movl	%edx, %edx
+               	leaq	(%rdx,%rdx,4), %rdx
+               	leaq	(%rdi,%rdx,2), %rdx
+               	movl	%edx, 272(%rsp,%rcx,8)
+               	movq	272(%rsp,%rcx,8), %rsi
+               	shrq	$32, %rsi
+               	shrq	$32, %rdx
+               	leal	(%rsi,%rsi,4), %esi
+               	leal	(%rdx,%rsi,2), %edx
+               	movl	%edx, 276(%rsp,%rcx,8)
+               	leal	1(%r15), %ecx
+               	testl	%ecx, %ecx
@@@@
-               	cmovgl	%r9d, %esi
-               	cmpl	$2, %r9d
-               	jge	0x4205d0 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xcb0>
+               	cmovgl	%ecx, %esi
+               	cmpl	$2, %ecx
+               	jge	0x4207a0 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xd20>
@@@@
-               	jmp	0x420658 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xd38>
-               	nopl	(%rax,%rax)
+               	jmp	0x42083f <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xdbf>
@@@@
-               	movl	448(%rsp,%rdx,8), %eax
-               	movl	452(%rsp,%rdx,8), %ecx
+               	movq	448(%rsp,%rdx,8), %rax
+               	movl	%eax, %eax
@@@@
+               	movq	448(%rsp,%rdx,8), %rbp
+               	shrq	$32, %rbp
@@@@
-               	leaq	(%rcx,%rcx,4), %rcx
-               	leaq	(%rax,%rcx,2), %rax
+               	leaq	(%rbp,%rbp,4), %rbp
+               	leaq	(%rax,%rbp,2), %rax
@@@@
-               	movl	456(%rsp,%rdx,8), %ecx
-               	leaq	(%rcx,%rcx,4), %rcx
-               	leaq	(%rax,%rcx,2), %rax
+               	movq	456(%rsp,%rdx,8), %rbp
+               	movl	%ebp, %ebp
+               	leaq	(%rbp,%rbp,4), %rbp
+               	leaq	(%rax,%rbp,2), %rax
@@@@
-               	movl	460(%rsp,%rdx,8), %ecx
+               	movq	456(%rsp,%rdx,8), %rbp
+               	shrq	$32, %rbp
@@@@
-               	leaq	(%rcx,%rcx,4), %rcx
-               	leaq	(%rax,%rcx,2), %rbp
+               	leaq	(%rbp,%rbp,4), %rbp
+               	leaq	(%rax,%rbp,2), %rbp
@@@@
-               	je	0x420693 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xd73>
-               	movl	448(%rsp,%rdx,8), %eax
-               	movl	452(%rsp,%rdx,8), %ecx
+               	je	0x420882 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xe02>
+               	movq	448(%rsp,%rdx,8), %rax
+               	movl	%eax, %eax
@@@@
+               	movq	448(%rsp,%rdx,8), %rsi
+               	shrq	$32, %rsi
@@@@
-               	leal	(%rcx,%rcx,4), %ecx
-               	leal	(%rax,%rcx,2), %eax
+               	leal	(%rsi,%rsi,4), %esi
+               	leal	(%rax,%rsi,2), %eax
@@@@
-               	movl	$1, %edi
-               	cmovgel	%edi, %r10d
-               	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
-               	addq	%rcx, %rdx
+               	movl	$1, %r11d
+               	cmovgel	%r11d, %r10d
+               	addq	%r9, %rdx
@@@@
-               	movq	24(%rsp), %rsi
-               	movl	48(%rsp), %ebp
+               	movq	56(%rsp), %rsi
+               	movq	8(%rsp), %rdi
+               	movl	80(%rsp), %ebp
@@@@
-               	cmovgel	%edi, %r8d
-               	addq	%rcx, %rdx
+               	cmovgel	%r11d, %r8d
+               	addq	%r9, %rdx
@@@@
-               	movl	%r9d, %eax
-               	cmpl	$2, %r9d
-               	cmovgel	%edi, %r9d
-               	addq	%rcx, %rax
+               	movl	%ecx, %eax
+               	cmpl	$2, %ecx
+               	cmovgel	%r11d, %ecx
+               	addq	%r9, %rax
@@@@
-               	movq	16(%rsp), %rdx
-               	nopw	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)
@@@@
-               	jl	0x420770 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xe50>
-               	movl	%eax, %ecx
+               	jl	0x420960 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xee0>
+               	movl	%eax, %edx
@@@@
-               	cmpq	$0, 448(%rsp,%rcx,8)
-               	je	0x420750 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xe30>
-               	jmp	0x420773 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xe53>
-               	movl	%r9d, %r15d
+               	cmpq	$0, 448(%rsp,%rdx,8)
+               	je	0x420940 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xec0>
+               	jmp	0x420963 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xee3>
+               	movl	%ecx, %r15d
@@@@
-               	cmpq	%rax, %rdx
-               	jae	0x42088c <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xf6c>
+               	cmpq	%rax, %rdi
+               	jae	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
@@@@
-               	movl	8(%rsp), %eax
-               	movl	%eax, 16(%rsi,%rdx,4)
-               	addq	$1, %rdx
-               	movq	%rdx, 16(%rsp)
-               	jmp	0x4201f0 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x8d0>
+               	movl	4(%rsp), %eax
+               	movl	%eax, 16(%rsi,%rdi,4)
+               	addq	$1, %rdi
+               	movq	%rdi, 8(%rsp)
+               	jmp	0x420380 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x900>
@@@@
-               	movl	64(%rsp), %ecx
-               	testl	%ecx, %ecx
-               	je	0x42088c <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xf6c>
+               	cmpl	$0, 32(%rsp)
+               	je	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
@@@@
-               	movq	56(%rsp), %rdx
-               	movl	%eax, 72(%rsp)
-               	cmpl	$1, %ecx
-               	je	0x42088c <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xf6c>
-               	movq	56(%rsp), %rdx
-               	movl	$0, 76(%rsp)
-               	cmpl	$2, %ecx
-               	jbe	0x42088c <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0xf6c>
-               	movq	56(%rsp), %rcx
-               	movl	12(%rsp), %ecx
-               	movl	%ecx, 80(%rsp)
-               	movl	%eax, 16(%rbx)
-               	movl	$0, 20(%rbx)
-               	movl	%ecx, 24(%rbx)
+               	movq	24(%rsp), %rcx
+               	movl	%eax, 40(%rsp)
+               	cmpl	$1, 32(%rsp)
+               	jbe	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
+               	movq	24(%rsp), %rax
+               	movl	$0, 44(%rsp)
+               	cmpl	$2, 32(%rsp)
+               	jbe	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
+               	movq	24(%rsp), %rax
+               	movl	20(%rsp), %eax
+               	movl	%eax, 48(%rsp)
+               	movl	32(%rsp), %eax
+               	testl	%eax, %eax
+               	je	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
+               	movl	40(%rsp), %ecx
+               	movl	%ecx, 16(%rbx)
+               	cmpl	$1, %eax
+               	je	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
+               	movl	44(%rsp), %ecx
+               	movl	%ecx, 20(%rbx)
+               	cmpl	$2, %eax
+               	jbe	0x420aa1 <kfun:kotlin.native.internal.NumberConverter.bigIntDigitGeneratorInstImpl#internal+0x1021>
+               	movl	48(%rsp), %eax
+               	movl	%eax, 24(%rbx)

@@ -12594,51 +12702,50 @@
@@@[(3, 7), (10, 14), (15, 19), (20, 26), (56, 59), (63, 67)]@@@
-               	subq	$168, %rsp
-               	movq	%r9, 8(%rsp)
+               	subq	$152, %rsp
+               	movq	%r9, (%rsp)
@@@@
-               	movq	%rsi, %r12
-               	movq	%rdi, %rbp
+               	movq	%rsi, %rbp
+               	movq	%rdi, %r14
@@@@
-               	movaps	%xmm0, 144(%rsp)
-               	movaps	%xmm0, 128(%rsp)
-               	movaps	%xmm0, 112(%rsp)
-               	movaps	%xmm0, 96(%rsp)
@@@@
-               	leaq	621075(%rip), %rax      # 0x4b8300 <ktypeglobal:kotlin.LongArray#internal>
+               	movaps	%xmm0, 64(%rsp)
+               	movaps	%xmm0, 48(%rsp)
+               	movaps	%xmm0, 32(%rsp)
+               	movaps	%xmm0, 16(%rsp)
+               	leaq	622474(%rip), %rax      # 0x4b8a80 <ktypeglobal:kotlin.LongArray#internal>
@@@@
-               	movq	%rbp, 16(%rsp)
-               	js	0x420980 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0xe0>
+               	js	0x420b87 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0xd7>
@@@@
-               	leaq	(%rax,%rax), %rbp
-               	addq	$2, %rbp
+               	leaq	(%rax,%rax), %r12
+               	addq	$2, %r12

@@ -12648,210 +12755,220 @@
@@@[(3, 7), (8, 14), (18, 22), (23, 25), (31, 37), (47, 51), (55, 63), (70, 72), (73, 85), (86, 92), (94, 147), (154, 162), (168, 184), (185, 215), (216, 232), (233, 239), (240, 248), (249, 251), (253, 257), (261, 286), (289, 297), (298, 304), (310, 321), (322, 336), (337, 339), (342, 345), (346, 364)]@@@
-               	movl	$1, %ebp
-               	shlq	%cl, %rbp
-               	movl	%eax, %ecx
+               	movl	$1, %r12d
@@@@
-               	movq	840412(%rip), %r14      # 0x4edc90 <kvar:kotlin.native.internal.NumberConverter.$companion#internal>
-               	movq	8(%rsp), %rax
+               	movl	%eax, %ecx
+               	shlq	%cl, %rbp
+               	movq	841812(%rip), %r15      # 0x4ee410 <kvar:kotlin.native.internal.NumberConverter.$companion#internal>
+               	movq	(%rsp), %rax
@@@@
-               	mulsd	8(%r14), %xmm0
-               	addsd	426117(%rip), %xmm0     # 0x488a58 <_IO_stdin_used+0x58>
+               	mulsd	8(%r15), %xmm0
+               	addsd	430462(%rip), %xmm0     # 0x489d58 <_IO_stdin_used+0x58>
@@@@
-               	movsd	%xmm0, 8(%rsp)
+               	movsd	%xmm0, (%rsp)
@@@@
-               	movsd	8(%rsp), %xmm1          # xmm1 = mem[0],zero
-               	ucomisd	426084(%rip), %xmm1     # 0x488a60 <_IO_stdin_used+0x60>
-               	jae	0x420a19 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x179>
+               	movsd	(%rsp), %xmm1           # xmm1 = mem[0],zero
+               	ucomisd	430431(%rip), %xmm1     # 0x489d60 <_IO_stdin_used+0x60>
+               	jae	0x420c1e <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x16e>
@@@@
-               	jle	0x420a31 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x191>
-               	movq	16(%r14), %rax
+               	jle	0x420c36 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x186>
+               	movq	16(%r15), %rax
@@@@
-               	imulq	16(%rax,%rdx,8), %rbp
-               	jmp	0x420a54 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1b4>
-               	jns	0x420a54 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1b4>
-               	movq	16(%r14), %rax
+               	imulq	16(%rax,%rdx,8), %r12
+               	jmp	0x420c59 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1a9>
+               	jns	0x420c59 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1a9>
+               	movq	16(%r15), %rax
@@@@
-               	imulq	%rax, %r12
+               	imulq	%rax, %rbp
@@@@
-               	movq	16(%rsp), %rdx
-               	leaq	(%r12,%r13), %rax
-               	cmpq	%rbp, %rax
-               	jle	0x420a67 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1c7>
-               	movl	%ecx, 24(%rdx)
-               	jmp	0x420a7c <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1dc>
+               	movq	%rbp, %rax
+               	addq	%r13, %rax
+               	cmpq	%r12, %rax
+               	jle	0x420c6a <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1ba>
+               	movl	%ecx, 24(%r14)
+               	jmp	0x420c81 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x1d1>
@@@@
-               	movl	%ecx, 24(%rdx)
-               	addq	%r12, %r12
-               	leaq	(%r12,%r12,4), %r12
+               	movl	%ecx, 24(%r14)
+               	addq	%rbp, %rbp
+               	leaq	(%rbp,%rbp,4), %rbp
@@@@
-               	movq	$0, 16(%rdx)
-               	movq	%rbp, %rax
-               	addq	%rbp, %rax
-               	leaq	(,%rbp,4), %rcx
-               	leaq	(,%rbp,8), %rdx
-               	leaq	24(%rsp), %rsi
-               	movq	%rsi, 104(%rsp)
-               	movq	%rsi, 112(%rsp)
-               	movq	%rsi, 120(%rsp)
-               	movq	24(%rsp), %rdi
-               	movq	%rbp, 40(%rsp)
-               	movq	%rsi, 128(%rsp)
-               	movq	24(%rsp), %rdi
-               	movq	%rax, 48(%rsp)
-               	movq	%rsi, 136(%rsp)
-               	movq	24(%rsp), %rax
-               	movq	%rcx, 56(%rsp)
-               	movq	%rsi, 144(%rsp)
-               	movq	24(%rsp), %rax
-               	movq	%rdx, 64(%rsp)
-               	movq	%rsi, 152(%rsp)
-               	movq	%rbp, 8(%rsp)
-               	movb	845111(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movl	$0, 16(%r14)
+               	movl	16(%r14), %eax
+               	movl	%eax, 20(%r14)
+               	leaq	(%r12,%r12), %rax
+               	leaq	(,%r12,4), %rcx
+               	leaq	(,%r12,8), %rdx
+               	leaq	104(%rsp), %rsi
+               	movq	%rsi, 40(%rsp)
+               	movq	%rsi, 48(%rsp)
+               	movq	48(%rsp), %rsi
+               	movq	%rsi, 56(%rsp)
+               	movq	(%rsi), %rdi
+               	movq	%r12, 16(%rsi)
+               	movq	48(%rsp), %rsi
+               	movq	%rsi, 64(%rsp)
+               	movq	(%rsi), %rdi
+               	movq	%rax, 24(%rsi)
+               	movq	48(%rsp), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	(%rax), %rsi
+               	movq	%rcx, 32(%rax)
+               	movq	48(%rsp), %rax
+               	movq	%rax, 80(%rsp)
+               	movq	(%rax), %rcx
+               	movq	%rdx, 40(%rax)
+               	movq	48(%rsp), %r15
+               	movq	%r15, 88(%rsp)
+               	movq	%r14, 8(%rsp)
+               	movq	%r12, (%rsp)
+               	movb	846511(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	jne	0x420b3f <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x29f>
-               	cmpl	$3, 32(%rsp)
-               	ja	0x420b4f <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x2af>
-               	jmp	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
+               	jne	0x420d4f <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x29f>
+               	cmpl	$3, 8(%r15)
+               	ja	0x420d5f <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x2af>
+               	jmp	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
@@@@
-               	je	0x420b1a <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x27a>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	cmpl	$3, 32(%rsp)
-               	jbe	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
-               	movq	%r12, %rbp
-               	subq	64(%rsp), %rbp
-               	cmovnsq	%rbp, %r12
-               	movb	845015(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	je	0x420d2a <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x27a>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	cmpl	$3, 8(%r15)
+               	jbe	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
+               	movq	%rbp, %rbx
+               	subq	40(%r15), %rbx
+               	cmovnsq	%rbx, %rbp
+               	movb	846416(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x420b6a <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x2ca>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	cmpl	$3, 32(%rsp)
-               	jb	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
-               	shrq	$60, %rbp
-               	notl	%ebp
-               	andl	$8, %ebp
-               	movq	%r12, %rbx
-               	subq	56(%rsp), %rbx
-               	movl	%ebp, %r15d
-               	orl	$4, %r15d
-               	testq	%rbx, %rbx
-               	cmovsl	%ebp, %r15d
-               	cmovsq	%r12, %rbx
-               	movb	844954(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	je	0x420d79 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x2c9>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	cmpl	$3, 8(%r15)
+               	jb	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
+               	shrq	$60, %rbx
+               	notl	%ebx
+               	andl	$8, %ebx
+               	movq	%rbp, %r12
+               	subq	32(%r15), %r12
+               	movl	%ebx, %r14d
+               	orl	$4, %r14d
+               	testq	%r12, %r12
+               	cmovsl	%ebx, %r14d
+               	cmovsq	%rbp, %r12
+               	movb	846356(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x420ba7 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x307>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	cmpl	$2, 32(%rsp)
-               	jb	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
-               	movq	%rbx, %rbp
-               	subq	48(%rsp), %rbp
-               	movl	%r15d, %r14d
-               	orl	$2, %r14d
+               	je	0x420db5 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x305>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	cmpl	$2, 8(%r15)
+               	jb	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
+               	movq	%r12, %rbp
+               	subq	24(%r15), %rbp
+               	movl	%r14d, %ebx
+               	orl	$2, %ebx
@@@@
-               	cmovsl	%r15d, %r14d
-               	cmovsq	%rbx, %rbp
-               	movb	844902(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	cmovsl	%r14d, %ebx
+               	cmovsq	%r12, %rbp
+               	movb	846306(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x420bdb <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x33b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	cmpl	$0, 32(%rsp)
-               	je	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
+               	je	0x420de7 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x337>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	cmpl	$0, 8(%r15)
+               	je	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
@@@@
-               	subq	40(%rsp), %rax
+               	subq	16(%r15), %rax
@@@@
-               	orl	%ecx, %r14d
-               	xorl	$1, %r14d
+               	orl	%ecx, %ebx
+               	xorl	$1, %ebx
@@@@
-               	jl	0x420c5e <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x3be>
-               	movq	16(%rsp), %rbp
-               	movslq	16(%rbp), %rcx
-               	leal	1(%rcx), %edi
-               	movq	8(%rbp), %rdx
-               	movl	%edi, 16(%rbp)
-               	movl	8(%rdx), %edi
-               	movq	8(%rsp), %rbp
-               	cmpq	%rbp, %rsi
-               	jg	0x420c8c <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x3ec>
-               	cmpl	%ecx, %edi
-               	jbe	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
+               	jl	0x420e69 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x3b9>
+               	movq	8(%rsp), %r14
+               	movq	8(%r14), %rcx
+               	movl	16(%r14), %edi
+               	leal	1(%rdi), %ebp
+               	movslq	%edi, %rdx
+               	movl	%ebp, 16(%r14)
+               	movl	8(%rcx), %ebp
+               	movq	(%rsp), %r12
+               	cmpq	%r12, %rsi
+               	jg	0x420e98 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x3e8>
+               	cmpl	%edi, %ebp
+               	jbe	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
@@@@
-               	leaq	(%rax,%rax,4), %r12
-               	movq	(%rdx), %rax
-               	movl	%r14d, 16(%rdx,%rcx,4)
-               	movb	844775(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	leaq	(%rax,%rax,4), %rbp
+               	movq	(%rcx), %rax
+               	movl	%ebx, 16(%rcx,%rdx,4)
+               	movb	846180(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	jne	0x420b30 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x290>
-               	jmp	0x420b10 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x270>
-               	movq	8(%rsp), %rbp
+               	jne	0x420d40 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x290>
+               	jmp	0x420d20 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x270>
+               	movq	(%rsp), %rbp
@@@@
-               	movslq	16(%rdi), %rcx
-               	leal	1(%rcx), %esi
-               	movq	8(%rdi), %rdx
-               	movl	%esi, 16(%rdi)
-               	movl	8(%rdx), %esi
+               	movq	8(%rdi), %rcx
+               	movl	16(%rdi), %esi
+               	leal	1(%rsi), %edx
+               	movl	%edx, 16(%rdi)
+               	movslq	%esi, %rdx
+               	movl	8(%rcx), %edi
@@@@
-               	jge	0x420caf <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x40f>
-               	cmpl	%ecx, %esi
-               	ja	0x420cb7 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x417>
-               	jmp	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
-               	cmpl	%ecx, %edi
-               	ja	0x420cb3 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x413>
-               	jmp	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
+               	jge	0x420ebc <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x40c>
+               	cmpl	%esi, %edi
+               	ja	0x420ec3 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x413>
+               	jmp	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
+               	cmpl	%edx, %ebp
+               	ja	0x420ec0 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x410>
+               	jmp	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
@@@@
-               	movslq	16(%rdi), %rcx
+               	movl	16(%rdi), %ecx
@@@@
-               	jbe	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
+               	jbe	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
+               	movslq	%ecx, %rcx
@@@@
-               	movl	%r14d, 16(%rax,%rcx,4)
-               	jmp	0x420cbf <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x41f>
-               	cmpl	%ecx, %esi
-               	jbe	0x420ce2 <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x442>
-               	addl	$1, %r14d
-               	movq	(%rdx), %rax
-               	movl	%r14d, 16(%rdx,%rcx,4)
-               	movq	88(%rsp), %rax
-               	movq	72(%rsp), %rcx
+               	movl	%ebx, 16(%rax,%rcx,4)
+               	jmp	0x420eca <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x41a>
+               	cmpl	%edx, %edi
+               	jbe	0x420eed <kfun:kotlin.native.internal.NumberConverter.longDigitGenerator#internal+0x43d>
+               	addl	$1, %ebx
+               	movq	(%rcx), %rax
+               	movl	%ebx, 16(%rcx,%rdx,4)
+               	movq	24(%rsp), %rax
+               	movq	96(%rsp), %rcx

@@ -12859,8 +12976,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -13597,21 +13714,21 @@
@@@[(13, 29)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r15
-               	addq	$16, %rax
-               	movq	$0, 8(%r15)
-               	leaq	625186(%rip), %rcx      # 0x4ba4f0 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
-               	movq	%rcx, 16(%r15)
-               	movq	%rax, 56(%rsp)
-               	movq	%rax, 836026(%rip)      # 0x4edc98 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
+               	movq	$0, 8(%rax)
+               	leaq	626581(%rip), %rdx      # 0x4bac70 <ktypeglobal:kotlin.native.internal.UnhandledExceptionHookHolder#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 56(%rsp)
+               	movq	%rcx, 837421(%rip)      # 0x4ee418 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>
+               	movq	837414(%rip), %r15      # 0x4ee418 <kvar:kotlin.native.internal.UnhandledExceptionHookHolder.$instance#internal>

@@ -13821,27 +13938,28 @@
@@@[(15, 17), (18, 21)]@@@
-               	movslq	16(%rax), %rcx
+               	movl	16(%rax), %ecx
@@@@
-               	jbe	0x421f2b <kfun:kotlin.native.internal#valuesForEnum(kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}kotlin.Array<0:0>+0x14b>
+               	jbe	0x42213d <kfun:kotlin.native.internal#valuesForEnum(kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}kotlin.Array<0:0>+0x14d>
+               	movslq	%ecx, %rcx

@@ -14684,14 +14802,17 @@
@@@[(3, 6), (8, 10), (11, 12), (13, 15), (16, 17)]@@@
-               	callq	0x42f6d0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
+               	callq	0x42f960 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder>
+               	movq	%r15, 96(%rsp)
@@@@
+               	movq	112(%rsp), %rbp
+               	movq	%rax, 288(%rbp)
@@@@
-               	movaps	%xmm0, 16(%rsp)
@@@@
+               	movaps	%xmm0, 16(%rsp)
+               	movq	288(%rbp), %rax
@@@@
-               	movq	112(%rsp), %rbp

@@ -14717,7 +14838,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)

@@ -15245,17 +15366,17 @@
@@@[(14, 20)]@@@
-               	jne	0x423891 <kfun:kotlin.collections#take__at__kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}kotlin.collections.List<0:0>+0x691>
-               	leaq	44(%r15), %rax
-               	jmp	0x423886 <kfun:kotlin.collections#take__at__kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}kotlin.collections.List<0:0>+0x686>
+               	jne	0x423aae <kfun:kotlin.collections#take__at__kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}kotlin.collections.List<0:0>+0x68e>
+               	movl	44(%r15), %eax
+               	jmp	0x423aa5 <kfun:kotlin.collections#take__at__kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}kotlin.collections.List<0:0>+0x685>

@@ -15320,23 +15441,22 @@
@@@[(15, 18)]@@@
-               	addq	$8, %rax
-               	movl	(%rax), %eax
+               	movl	8(%rax), %eax

@@ -15454,34 +15574,35 @@
@@@[(15, 18), (20, 24)]@@@
-               	movq	%rcx, 216(%rsp)
+               	movq	208(%rsp), %rax
+               	movq	%rax, 216(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)

@@ -15489,8 +15610,8 @@
@@@[(3, 7)]@@@
-               	jmp	0x423bfa <kfun:kotlin.collections#take__at__kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}kotlin.collections.List<0:0>+0x9fa>
-               	nopw	(%rax,%rax)
+               	jmp	0x423e1a <kfun:kotlin.collections#take__at__kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}kotlin.collections.List<0:0>+0x9fa>
+               	nopl	(%rax,%rax)

@@ -15596,26 +15717,27 @@
@@@[(15, 18), (20, 24)]@@@
-               	movq	%rcx, 384(%rsp)
+               	movq	376(%rsp), %rax
+               	movq	%rax, 384(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)

@@ -15658,35 +15780,35 @@
@@@[(38, 44)]@@@
-               	callq	0x45c8c0 <kfun:kotlin.collections.EmptyList#get(kotlin.Int){}kotlin.Nothing>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x45ce50 <kfun:kotlin.collections.EmptyList#get(kotlin.Int){}kotlin.Nothing>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -15962,24 +16084,25 @@
@@@[(11, 16), (17, 19)]@@@
-               	js	0x424466 <kfun:kotlin.text#drop__at__kotlin.String(kotlin.Int){}kotlin.String+0xe6>
+               	js	0x42469a <kfun:kotlin.text#drop__at__kotlin.String(kotlin.Int){}kotlin.String+0xea>
+               	movl	8(%r15), %eax
+               	cmpl	%ebx, %eax
+               	cmovlel	%eax, %ebx
@@@@
-               	cmpl	%ebx, %edx
-               	cmovlel	%edx, %ebx

@@ -16114,22 +16237,23 @@
@@@[(16, 26), (27, 28)]@@@
-               	je	0x4246b5 <kfun:kotlin.collections.AbstractMutableList.IteratorImpl.next#internal+0xb5>
-               	movl	16(%rbx), %esi
-               	leal	1(%rsi), %eax
-               	movl	%eax, 16(%rbx)
-               	movl	%esi, 20(%rbx)
+               	je	0x4248e8 <kfun:kotlin.collections.AbstractMutableList.IteratorImpl.next#internal+0xb8>
+               	movl	16(%rbx), %eax
+               	leal	1(%rax), %ecx
+               	movl	%ecx, 16(%rbx)
+               	movl	%eax, 20(%rbx)
@@@@
+               	movl	20(%rbx), %esi

@@ -16256,19 +16380,21 @@
@@@[(6, 23), (24, 25)]@@@
-               	je	0x424892 <kfun:kotlin.collections.AbstractMutableList.ListIteratorImpl.previous#internal+0x62>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %esi
-               	testl	%esi, %esi
-               	jle	0x4248c7 <kfun:kotlin.collections.AbstractMutableList.ListIteratorImpl.previous#internal+0x97>
-               	addl	$-1, %esi
-               	movl	%esi, 16(%rbx)
-               	movl	%esi, 20(%rbx)
+               	je	0x424ac2 <kfun:kotlin.collections.AbstractMutableList.ListIteratorImpl.previous#internal+0x62>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	16(%rbx), %eax
+               	testl	%eax, %eax
+               	jle	0x424afd <kfun:kotlin.collections.AbstractMutableList.ListIteratorImpl.previous#internal+0x9d>
+               	addl	$-1, %eax
+               	movl	%eax, 16(%rbx)
+               	movl	16(%rbx), %eax
+               	movl	%eax, 20(%rbx)
@@@@
+               	movl	20(%rbx), %esi

@@ -16280,18 +16406,17 @@
@@@[(16, 19)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopw	(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>

@@ -17684,12 +17809,11 @@
@@@[(11, 12)]@@@
-               	addl	%r14d, %ebp

@@ -17703,20 +17827,20 @@
@@@[(3, 9)]@@@
-               	jne	0x425fa9 <kfun:kotlin.collections.ArrayList.insertAtInternal#internal+0x1a9>
-               	testl	%ebp, %ebp
-               	js	0x425fec <kfun:kotlin.collections.ArrayList.insertAtInternal#internal+0x1ec>
+               	jne	0x4261db <kfun:kotlin.collections.ArrayList.insertAtInternal#internal+0x1ab>
+               	addl	%r14d, %ebp
+               	js	0x42621e <kfun:kotlin.collections.ArrayList.insertAtInternal#internal+0x1ee>

@@ -17744,13 +17868,14 @@
@@@[(10, 15)]@@@
-               	callq	0x415330 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
-               	addl	%r14d, 44(%rbx)
+               	callq	0x415400 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
+               	addl	44(%rbx), %r14d
+               	movl	%r14d, 44(%rbx)

@@ -17764,31 +17889,31 @@
@@@[(33, 37)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nop

@@ -17811,30 +17936,32 @@
@@@[(22, 28)]@@@
-               	addl	$1, 44(%rbx)
-               	jmp	0x4260f4 <kfun:kotlin.collections.ArrayList.addAtInternal#internal+0xc4>
+               	movl	44(%rbx), %eax
+               	addl	$1, %eax
+               	movl	%eax, 44(%rbx)
+               	jmp	0x426329 <kfun:kotlin.collections.ArrayList.addAtInternal#internal+0xc9>

@@ -17846,7 +17973,8 @@
@@@[(3, 6)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -17874,23 +18002,24 @@
@@@[(24, 27)]@@@
-               	addl	%ebx, 44(%r14)
+               	addl	44(%r14), %ebx
+               	movl	%ebx, 44(%r14)

@@ -17950,13 +18079,12 @@
@@@[(3, 10)]@@@
-               	je	0x4261c2 <kfun:kotlin.collections.ArrayList.addAllInternal#internal+0xb2>
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax)
-               	movzbl	822625(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	je	0x426406 <kfun:kotlin.collections.ArrayList.addAllInternal#internal+0xb6>
+               	nopw	(%rax,%rax)
+               	movzbl	823977(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -17996,7 +18124,7 @@
@@@[(3, 5)]@@@
-               	movq	%rdi, %r12
+               	movq	%rdi, %rbx

@@ -18011,46 +18139,48 @@
@@@[(6, 12), (17, 25), (31, 35), (38, 42), (44, 48), (49, 53), (55, 63), (65, 67)]@@@
-               	je	0x4263d8 <kfun:kotlin.collections.ArrayList.removeAtInternal#internal+0x78>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	24(%r12), %rdi
+               	je	0x426618 <kfun:kotlin.collections.ArrayList.removeAtInternal#internal+0x78>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	24(%rbx), %rdi
@@@@
-               	callq	0x426360 <kfun:kotlin.collections.ArrayList.removeAtInternal#internal>
-               	movq	%rax, %rbx
-               	jmp	0x426458 <kfun:kotlin.collections.ArrayList.removeAtInternal#internal+0xf8>
-               	movq	16(%r12), %rdi
+               	callq	0x4265a0 <kfun:kotlin.collections.ArrayList.removeAtInternal#internal>
+               	movq	%rax, %r12
+               	jmp	0x42668f <kfun:kotlin.collections.ArrayList.removeAtInternal#internal+0xef>
+               	movq	16(%rbx), %rdi
@@@@
-               	movq	16(%rdi,%rax,8), %rbx
-               	movq	%rbx, 40(%rsp)
+               	movq	16(%rdi,%rax,8), %r12
+               	movq	%r12, 40(%rsp)
@@@@
-               	movl	40(%r12), %r8d
-               	addl	44(%r12), %r8d
+               	movl	44(%rbx), %r8d
+               	addl	40(%rbx), %r8d
@@@@
-               	callq	0x415330 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
-               	movq	16(%r12), %rdi
+               	callq	0x415400 <kfun:kotlin.collections#copyInto__at__kotlin.Array<out|0:0>(kotlin.Array<0:0>;kotlin.Int;kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
+               	movq	16(%rbx), %rdi
@@@@
-               	movl	40(%r12), %eax
-               	movl	44(%r12), %ecx
+               	movl	40(%rbx), %eax
+               	movl	44(%rbx), %ecx
@@@@
-               	callq	0x419a00 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
-               	addl	$-1, 44(%r12)
-               	movq	%rbx, (%r14)
+               	callq	0x419ab0 <kfun:kotlin.collections#resetAt__at__kotlin.Array<0:0>(kotlin.Int){0§<kotlin.Any?>}>
+               	movl	44(%rbx), %eax
+               	addl	$-1, %eax
+               	movl	%eax, 44(%rbx)
+               	movq	%r12, (%r14)
@@@@
-               	movq	%rbx, %rax
+               	movq	%r12, %rax

@@ -18058,16 +18188,16 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -18077,13 +18207,13 @@
@@@[(6, 16)]@@@
-               	je	0x4264c3 <kfun:kotlin.collections.ArrayList.Itr.hasNext#internal+0x13>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	cmpl	44(%rcx), %eax
+               	je	0x4266f3 <kfun:kotlin.collections.ArrayList.Itr.hasNext#internal+0x13>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	8(%rbx), %rax
+               	movl	44(%rax), %eax
+               	cmpl	%eax, 16(%rbx)

@@ -18120,24 +18250,26 @@
@@@[(16, 17), (19, 34)]@@@
+               	movl	16(%rbx), %eax
@@@@
-               	movq	16(%rdx), %rcx
-               	movq	%rcx, 32(%rsp)
-               	addl	40(%rdx), %eax
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x4265f3 <kfun:kotlin.collections.ArrayList.Itr.previous#internal+0xf3>
-               	cltq
-               	movq	16(%rcx,%rax,8), %rax
+               	movq	16(%rdx), %rax
+               	movq	%rax, 32(%rsp)
+               	movl	20(%rbx), %ecx
+               	addl	40(%rdx), %ecx
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x42682a <kfun:kotlin.collections.ArrayList.Itr.previous#internal+0xfa>
+               	movslq	%ecx, %rcx
+               	movq	16(%rax,%rcx,8), %rax

@@ -18149,19 +18281,19 @@
@@@[(16, 22)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nop

@@ -18182,24 +18314,25 @@
@@@[(6, 20), (21, 38)]@@@
-               	je	0x42666b <kfun:kotlin.collections.ArrayList.Itr.next#internal+0x6b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	cmpl	44(%rcx), %eax
-               	jge	0x4266b1 <kfun:kotlin.collections.ArrayList.Itr.next#internal+0xb1>
-               	leal	1(%rax), %edx
+               	je	0x42689b <kfun:kotlin.collections.ArrayList.Itr.next#internal+0x6b>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	16(%rbx), %ecx
+               	movq	8(%rbx), %rax
+               	cmpl	44(%rax), %ecx
+               	jge	0x4268e5 <kfun:kotlin.collections.ArrayList.Itr.next#internal+0xb5>
+               	leal	1(%rcx), %edx
@@@@
-               	movl	%eax, 20(%rbx)
-               	movq	16(%rcx), %rdx
-               	movq	%rdx, 32(%rsp)
-               	addl	40(%rcx), %eax
-               	cmpl	%eax, 8(%rdx)
-               	jbe	0x4266f4 <kfun:kotlin.collections.ArrayList.Itr.next#internal+0xf4>
-               	cltq
-               	movq	16(%rdx,%rax,8), %rax
+               	movl	%ecx, 20(%rbx)
+               	movq	16(%rax), %rcx
+               	movq	%rcx, 32(%rsp)
+               	movl	20(%rbx), %edx
+               	addl	40(%rax), %edx
+               	cmpl	%edx, 8(%rcx)
+               	jbe	0x426928 <kfun:kotlin.collections.ArrayList.Itr.next#internal+0xf8>
+               	movslq	%edx, %rax
+               	movq	16(%rcx,%rax,8), %rax

@@ -19047,18 +19180,18 @@
@@@[(8, 18)]@@@
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	cmpl	68(%rcx), %eax
-               	jge	0x4274fb <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x18b>
-               	movzbl	818171(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	8(%rbx), %rax
+               	movl	68(%rax), %eax
+               	cmpl	%eax, 16(%rbx)
+               	jge	0x42773d <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x19d>
+               	movzbl	819539(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -19071,40 +19204,43 @@
@@@[(10, 12), (13, 16), (26, 29), (34, 38), (39, 42)]@@@
-               	movslq	20(%rbx), %rcx
+               	movl	20(%rbx), %ecx
@@@@
-               	jbe	0x427519 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1a9>
+               	jbe	0x42775b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
+               	movslq	%ecx, %rcx
@@@@
-               	jmp	0x4274c2 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x152>
+               	jmp	0x427702 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x162>
+               	nopl	(%rax)
@@@@
-               	je	0x427561 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1f1>
-               	movslq	20(%rbx), %rcx
+               	je	0x4277a3 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x203>
+               	movl	20(%rbx), %ecx
@@@@
-               	jbe	0x427519 <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1a9>
+               	jbe	0x42775b <kfun:kotlin.collections.HashMap#hashCode(){}kotlin.Int+0x1bb>
+               	movslq	%ecx, %rcx

@@ -19116,23 +19252,23 @@
@@@[(21, 27)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	callq	0x421090 <ThrowNullPointerException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	callq	0x4212a0 <ThrowNullPointerException>
+               	nopl	(%rax,%rax)

@@ -19163,52 +19299,52 @@
@@@[(45, 55)]@@@
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	cmpl	68(%rcx), %eax
-               	jge	0x427871 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x301>
-               	movzbl	817530(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	8(%rbx), %rax
+               	movl	68(%rax), %eax
+               	cmpl	%eax, 16(%rbx)
+               	jge	0x427ab1 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x301>
+               	movzbl	818882(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -19227,19 +19363,20 @@
@@@[(10, 12), (13, 16)]@@@
-               	movslq	20(%rbx), %rcx
+               	movl	20(%rbx), %ecx
@@@@
-               	jbe	0x427917 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3a7>
+               	jbe	0x427b57 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3a7>
+               	movslq	%ecx, %rcx

@@ -19247,13 +19384,14 @@
@@@[(9, 12)]@@@
-               	jmp	0x4277d3 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x263>
+               	jmp	0x427a13 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x263>
+               	nop

@@ -19264,23 +19402,24 @@
@@@[(14, 18), (19, 22)]@@@
-               	je	0x42795f <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3ef>
-               	movslq	20(%rbx), %rcx
+               	je	0x427b9f <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3ef>
+               	movl	20(%rbx), %ecx
@@@@
-               	jbe	0x427917 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3a7>
+               	jbe	0x427b57 <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x3a7>
+               	movslq	%ecx, %rcx

@@ -19288,12 +19427,12 @@
@@@[(9, 13)]@@@
-               	jmp	0x42768a <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
-               	nopl	(%rax)
+               	jmp	0x4278ca <kfun:kotlin.collections.HashMap#toString(){}kotlin.String+0x11a>
+               	nop

@@ -19420,13 +19559,13 @@
@@@[(6, 16)]@@@
-               	je	0x427ab4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	68(%rbx), %eax
-               	cmpl	76(%rbx), %eax
-               	jle	0x427bbc <kfun:kotlin.collections.HashMap.rehash#internal+0x18c>
+               	je	0x427cf4 <kfun:kotlin.collections.HashMap.rehash#internal+0x84>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	76(%rbx), %eax
+               	cmpl	%eax, 68(%rbx)
+               	jle	0x427e2e <kfun:kotlin.collections.HashMap.rehash#internal+0x1be>

@@ -19443,67 +19582,67 @@
@@@[(10, 19), (58, 64), (81, 82), (83, 85)]@@@
-               	movslq	68(%rbx), %rdx
-               	cmpq	%rdx, %r13
-               	jge	0x427bc5 <kfun:kotlin.collections.HashMap.rehash#internal+0x195>
-               	movzbl	816372(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movl	68(%rbx), %edx
+               	movslq	%edx, %rax
+               	cmpq	%rax, %r13
+               	jge	0x427dfa <kfun:kotlin.collections.HashMap.rehash#internal+0x18a>
+               	movzbl	817726(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	ja	0x427b20 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	movq	288(%rbp), %rax
-               	jmp	0x427bf9 <kfun:kotlin.collections.HashMap.rehash#internal+0x1c9>
+               	ja	0x427d60 <kfun:kotlin.collections.HashMap.rehash#internal+0xf0>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
@@@@
-               	movaps	%xmm0, (%rsp)
@@@@
+               	movaps	%xmm0, (%rsp)
+               	movq	288(%rbp), %rax

@@ -19511,15 +19650,16 @@
@@@[(3, 13), (15, 16), (17, 19)]@@@
-               	movl	8(%rax), %ecx
-               	movq	8(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	cmpl	%r14d, %ecx
-               	jne	0x427cdf <kfun:kotlin.collections.HashMap.rehash#internal+0x2af>
+               	movl	8(%rax), %eax
+               	movq	8(%rsp), %rcx
+               	movq	%rcx, 288(%rbp)
+               	cmpl	%r14d, %eax
+               	jne	0x427f22 <kfun:kotlin.collections.HashMap.rehash#internal+0x2b2>
@@@@
-               	movaps	%xmm0, (%rsp)
@@@@
+               	movaps	%xmm0, (%rsp)
+               	movq	288(%rbp), %rax

@@ -19577,14 +19717,13 @@
@@@[(10, 13)]@@@
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	nopl	(%rax,%rax)

@@ -19653,43 +19792,43 @@
@@@[(15, 17)]@@@
-               	movb	72(%rbx), %cl
+               	movl	72(%rbx), %ecx

@@ -19772,65 +19911,65 @@
@@@[(19, 21)]@@@
-               	movb	72(%r12), %cl
+               	movl	72(%r12), %ecx

@@ -19909,7 +20048,7 @@
@@@[(3, 5)]@@@
-               	movb	72(%rbx), %cl
+               	movl	72(%rbx), %ecx

@@ -20003,37 +20142,38 @@
@@@[(3, 7), (9, 18), (23, 25), (27, 29), (32, 34), (38, 42), (43, 49)]@@@
-               	movabsq	$17179869184, %rsi      # imm = 0x400000000
-               	movq	%rsi, 16(%rsp)
+               	movabsq	$17179869184, %rcx      # imm = 0x400000000
+               	movq	%rcx, 16(%rsp)
@@@@
-               	movq	8(%rsp), %rcx
-               	cmpl	8(%rdx), %r8d
-               	movq	%rcx, 288(%rbp)
-               	jl	0x4287e5 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5d5>
+               	movl	8(%rdx), %edx
+               	movq	8(%rsp), %rsi
+               	movq	%rsi, 288(%rbp)
+               	cmpl	%edx, %r8d
+               	jl	0x428a2e <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5de>
@@@@
-               	movq	%rsi, 16(%rsp)
+               	movq	%rcx, 16(%rsp)
@@@@
-               	movl	8(%rax), %ecx
+               	movl	8(%rax), %esi
@@@@
-               	movl	%ecx, %edx
+               	movl	%esi, %edx
@@@@
-               	movq	%rsi, %r13
-               	jg	0x42856a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35a>
+               	movq	%rcx, %r13
+               	jg	0x4287ac <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>
@@@@
-               	subl	%edx, %ecx
-               	testl	%ecx, %ecx
-               	jle	0x42856a <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35a>
+               	subl	%edx, %esi
+               	testl	%esi, %esi
+               	jle	0x4287ac <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x35c>

@@ -20043,15 +20183,15 @@
@@@[(3, 21)]@@@
-               	movl	8(%rcx), %edx
-               	movq	8(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
-               	leal	3(%rdx), %esi
-               	testl	%edx, %edx
-               	cmovnsl	%edx, %esi
-               	sarl	$2, %esi
-               	cmpl	%esi, %eax
-               	jge	0x4286f0 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>
+               	movl	8(%rcx), %ecx
+               	movq	8(%rsp), %rdx
+               	movq	%rdx, 288(%rbp)
+               	leal	3(%rcx), %edx
+               	testl	%ecx, %ecx
+               	cmovnsl	%ecx, %edx
+               	sarl	$2, %edx
+               	cmpl	%edx, %eax
+               	jge	0x428930 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x4e0>

@@ -20074,13 +20214,14 @@
@@@[(3, 14), (15, 17)]@@@
-               	movl	8(%rcx), %edx
-               	movq	8(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
-               	cmpl	%eax, %edx
-               	jge	0x4287aa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x59a>
-               	movaps	%xmm0, (%rsp)
+               	movl	8(%rcx), %ecx
+               	movq	8(%rsp), %rdx
+               	movq	%rdx, 288(%rbp)
+               	cmpl	%eax, %ecx
+               	jge	0x4289f3 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5a3>
@@@@
+               	movaps	%xmm0, (%rsp)
+               	movq	288(%rbp), %rcx

@@ -20100,19 +20241,18 @@
@@@[(17, 20)]@@@
-               	jmp	0x428734 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x524>
-               	nopw	(%rax,%rax)
+               	jmp	0x42897b <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x52b>

@@ -20129,13 +20269,14 @@
@@@[(7, 10), (11, 15)]@@@
-               	jmp	0x4282b8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
-               	movaps	%xmm0, (%rsp)
+               	jmp	0x4284f8 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0xa8>
@@@@
-               	movq	%rcx, 8(%rsp)
+               	movaps	%xmm0, (%rsp)
+               	movq	288(%rbp), %rax
+               	movq	%rax, 8(%rsp)

@@ -20167,17 +20308,18 @@
@@@[(3, 4), (5, 6), (7, 10)]@@@
+               	movl	8(%rcx), %ecx
@@@@
-               	cmpl	8(%rcx), %eax
@@@@
-               	jle	0x4287aa <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x59a>
+               	cmpl	%ecx, %eax
+               	jle	0x4289f3 <kfun:kotlin.collections.HashMap#addKey(1:0){}kotlin.Int+0x5a3>

@@ -20197,42 +20339,44 @@
@@@[(22, 26), (49, 53)]@@@
-               	addl	$1, 76(%rbx)
+               	movl	76(%rbx), %eax
+               	addl	$1, %eax
+               	movl	%eax, 76(%rbx)
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nopw	(%rax,%rax)

@@ -20381,46 +20525,46 @@
@@@[(37, 39)]@@@
-               	movzbl	72(%rbx), %ecx
+               	movl	72(%rbx), %ecx

@@ -20482,11 +20626,13 @@
@@@[(8, 12)]@@@
-               	addl	$-1, 76(%rbx)
+               	movl	76(%rbx), %eax
+               	addl	$-1, %eax
+               	movl	%eax, 76(%rbx)

@@ -20497,8 +20643,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	(%rax,%rax)

@@ -20868,51 +21014,50 @@
@@@[(6, 14), (18, 19), (47, 51), (58, 68)]@@@
-               	je	0x4292ad <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x5d>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %eax
-               	jmp	0x4292c9 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x79>
-               	nopw	%cs:(%rax,%rax)
+               	je	0x429509 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	jmp	0x429509 <kfun:kotlin.collections.HashMap.Itr#initNext(){}+0x69>
@@@@
+               	movl	16(%rbx), %eax
@@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	(%rax,%rax)
@@@@
-               	je	0x429333 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	cmpl	68(%rcx), %eax
+               	je	0x429573 <kfun:kotlin.collections.HashMap.Itr#hasNext(){}kotlin.Boolean+0x13>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	8(%rbx), %rax
+               	movl	68(%rax), %eax
+               	cmpl	%eax, 16(%rbx)

@@ -20955,26 +21100,27 @@
@@@[(6, 20), (21, 36)]@@@
-               	je	0x4293fb <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%r15), %eax
-               	movq	8(%r15), %rcx
-               	cmpl	68(%rcx), %eax
-               	jge	0x429454 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc4>
-               	leal	1(%rax), %edx
+               	je	0x42963b <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x6b>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	16(%r15), %ecx
+               	movq	8(%r15), %rax
+               	cmpl	68(%rax), %ecx
+               	jge	0x429699 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0xc9>
+               	leal	1(%rcx), %edx
@@@@
-               	movl	%eax, 20(%r15)
-               	movq	8(%rcx), %rcx
-               	movq	%rcx, 32(%rsp)
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x429498 <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x108>
-               	cltq
-               	movq	16(%rcx,%rax,8), %rbx
+               	movl	%ecx, 20(%r15)
+               	movq	8(%rax), %rax
+               	movq	%rax, 32(%rsp)
+               	movl	20(%r15), %ecx
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4296dd <kfun:kotlin.collections.HashMap.KeysItr#next(){}1:0+0x10d>
+               	movslq	%ecx, %rcx
+               	movq	16(%rax,%rcx,8), %rbx

@@ -20988,19 +21134,19 @@
@@@[(16, 22)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax)
+               	callq	0x47ef60 <ThrowException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -21024,30 +21170,31 @@
@@@[(6, 25), (36, 40)]@@@
-               	je	0x429512 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%r15), %r13d
-               	movq	8(%r15), %rbp
-               	cmpl	68(%rbp), %r13d
-               	jge	0x429590 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf0>
-               	leal	1(%r13), %eax
-               	movl	%eax, 16(%r15)
-               	movl	%r13d, 20(%r15)
+               	je	0x429762 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0x72>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	16(%r15), %eax
+               	movq	8(%r15), %r13
+               	cmpl	68(%r13), %eax
+               	jge	0x4297e2 <kfun:kotlin.collections.HashMap.EntriesItr#next(){}kotlin.collections.HashMap.EntryRef<1:0,1:1>+0xf2>
+               	leal	1(%rax), %ecx
+               	movl	%ecx, 16(%r15)
+               	movl	%eax, 20(%r15)
+               	movl	20(%r15), %ebp
@@@@
-               	movq	%rbp, 24(%rax)
-               	movl	%r13d, 32(%rax)
+               	movq	%r13, 24(%rax)
+               	movl	%ebp, 32(%rax)

@@ -21094,16 +21241,17 @@
@@@[(13, 15), (16, 19)]@@@
-               	movslq	16(%r15), %rcx
+               	movl	16(%r15), %ecx
@@@@
-               	jbe	0x429676 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x96>
+               	jbe	0x4298c9 <kfun:kotlin.collections.HashMap.EntryRef#<get-key>(){}1:0+0x99>
+               	movslq	%ecx, %rcx

@@ -21113,8 +21261,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nop

@@ -21134,18 +21282,19 @@
@@@[(14, 18), (19, 22)]@@@
-               	je	0x42971b <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9b>
-               	movslq	16(%r15), %rcx
+               	je	0x42996e <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0x9e>
+               	movl	16(%r15), %ecx
@@@@
-               	jbe	0x429720 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa0>
+               	jbe	0x429973 <kfun:kotlin.collections.HashMap.EntryRef#<get-value>(){}1:1+0xa3>
+               	movslq	%ecx, %rcx

@@ -21155,9 +21304,9 @@
@@@[(3, 9)]@@@
-               	callq	0x421090 <ThrowNullPointerException>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x4212a0 <ThrowNullPointerException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax,%rax)

@@ -22465,35 +22614,36 @@
@@@[(31, 38)]@@@
-               	movq	%rcx, 40(%rsp)
-               	movq	16(%rax), %rcx
-               	movw	%bx, 32(%rax)
+               	movq	32(%rsp), %rax
+               	movq	%rax, 40(%rsp)
+               	movq	(%rax), %rcx
+               	movw	%bx, 16(%rax)

@@ -22503,19 +22653,20 @@
@@@[(15, 22)]@@@
-               	movq	%rcx, 72(%rsp)
-               	movq	16(%rax), %rcx
-               	movw	%bp, 32(%rax)
+               	movq	64(%rsp), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	(%rax), %rcx
+               	movw	%bp, 16(%rax)

@@ -22534,54 +22685,54 @@
@@@[(15, 19)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nopl	(%rax,%rax)

@@ -23123,441 +23274,442 @@
@@@[(15, 18), (20, 34), (35, 371)]@@@
-               	movq	%rcx, 520(%rsp)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 520(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 536(%rsp)
+               	movq	48(%rsp), %rcx
+               	movq	%rcx, 544(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 552(%rsp)
+               	movq	64(%rsp), %rcx
+               	movq	%rcx, 560(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	48(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 536(%rsp)
-               	movq	%rax, 544(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	64(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 552(%rsp)
-               	movq	%rax, 560(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)
-               	movq	80(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 568(%rsp)
-               	movq	%rax, 576(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 40(%rcx)
-               	movq	96(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 584(%rsp)
-               	movq	%rax, 592(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 48(%rcx)
-               	movq	112(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 600(%rsp)
-               	movq	%rax, 608(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 56(%rcx)
-               	movq	128(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 616(%rsp)
-               	movq	%rax, 624(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 64(%rcx)
-               	movq	144(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 632(%rsp)
-               	movq	%rax, 640(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 72(%rcx)
-               	movq	160(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 648(%rsp)
-               	movq	%rax, 656(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 80(%rcx)
-               	movq	176(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 664(%rsp)
-               	movq	%rax, 672(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 88(%rcx)
-               	movq	192(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 680(%rsp)
-               	movq	%rax, 688(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 96(%rcx)
-               	movq	208(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 696(%rsp)
-               	movq	%rax, 704(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 104(%rcx)
-               	movq	224(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 712(%rsp)
-               	movq	%rax, 720(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 112(%rcx)
-               	movq	240(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 728(%rsp)
-               	movq	%rax, 736(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 120(%rcx)
-               	movq	256(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 744(%rsp)
-               	movq	%rax, 752(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 128(%rcx)
-               	movq	272(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 760(%rsp)
-               	movq	%rax, 768(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 136(%rcx)
-               	movq	288(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 776(%rsp)
-               	movq	%rax, 784(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 144(%rcx)
-               	movq	304(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 792(%rsp)
-               	movq	%rax, 800(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 152(%rcx)
-               	movq	320(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 808(%rsp)
-               	movq	%rax, 816(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 160(%rcx)
-               	movq	336(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 824(%rsp)
-               	movq	%rax, 832(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 168(%rcx)
-               	movq	352(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 840(%rsp)
-               	movq	%rax, 848(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 176(%rcx)
-               	movq	368(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 856(%rsp)
-               	movq	%rax, 864(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 184(%rcx)
-               	movq	384(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 872(%rsp)
-               	movq	%rax, 880(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 192(%rcx)
-               	movq	400(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 888(%rsp)
-               	movq	%rax, 896(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 200(%rcx)
-               	movq	416(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 904(%rsp)
-               	movq	%rax, 912(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 208(%rcx)
-               	movq	432(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 920(%rsp)
-               	movq	%rax, 928(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 216(%rcx)
-               	movq	448(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 936(%rsp)
-               	movq	%rax, 944(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 224(%rcx)
-               	movq	464(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 952(%rsp)
-               	movq	%rax, 960(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 232(%rcx)
-               	movq	480(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 968(%rsp)
-               	movq	%rax, 976(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 240(%rcx)
-               	movq	496(%rsp), %rax
-               	movq	512(%rsp), %rcx
-               	movq	%rcx, 984(%rsp)
-               	movq	%rax, 992(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 248(%rcx)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 568(%rsp)
+               	movq	80(%rsp), %rcx
+               	movq	%rcx, 576(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 40(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 584(%rsp)
+               	movq	96(%rsp), %rcx
+               	movq	%rcx, 592(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 48(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 600(%rsp)
+               	movq	112(%rsp), %rcx
+               	movq	%rcx, 608(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 56(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 616(%rsp)
+               	movq	128(%rsp), %rcx
+               	movq	%rcx, 624(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 64(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 632(%rsp)
+               	movq	144(%rsp), %rcx
+               	movq	%rcx, 640(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 72(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 648(%rsp)
+               	movq	160(%rsp), %rcx
+               	movq	%rcx, 656(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 80(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 664(%rsp)
+               	movq	176(%rsp), %rcx
+               	movq	%rcx, 672(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 88(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 680(%rsp)
+               	movq	192(%rsp), %rcx
+               	movq	%rcx, 688(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 96(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 696(%rsp)
+               	movq	208(%rsp), %rcx
+               	movq	%rcx, 704(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 104(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 712(%rsp)
+               	movq	224(%rsp), %rcx
+               	movq	%rcx, 720(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 112(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 728(%rsp)
+               	movq	240(%rsp), %rcx
+               	movq	%rcx, 736(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 120(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 744(%rsp)
+               	movq	256(%rsp), %rcx
+               	movq	%rcx, 752(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 128(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 760(%rsp)
+               	movq	272(%rsp), %rcx
+               	movq	%rcx, 768(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 136(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 776(%rsp)
+               	movq	288(%rsp), %rcx
+               	movq	%rcx, 784(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 144(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 792(%rsp)
+               	movq	304(%rsp), %rcx
+               	movq	%rcx, 800(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 152(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 808(%rsp)
+               	movq	320(%rsp), %rcx
+               	movq	%rcx, 816(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 160(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 824(%rsp)
+               	movq	336(%rsp), %rcx
+               	movq	%rcx, 832(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 168(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 840(%rsp)
+               	movq	352(%rsp), %rcx
+               	movq	%rcx, 848(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 176(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 856(%rsp)
+               	movq	368(%rsp), %rcx
+               	movq	%rcx, 864(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 184(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 872(%rsp)
+               	movq	384(%rsp), %rcx
+               	movq	%rcx, 880(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 192(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 888(%rsp)
+               	movq	400(%rsp), %rcx
+               	movq	%rcx, 896(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 200(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 904(%rsp)
+               	movq	416(%rsp), %rcx
+               	movq	%rcx, 912(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 208(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 920(%rsp)
+               	movq	432(%rsp), %rcx
+               	movq	%rcx, 928(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 216(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 936(%rsp)
+               	movq	448(%rsp), %rcx
+               	movq	%rcx, 944(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 224(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 952(%rsp)
+               	movq	464(%rsp), %rcx
+               	movq	%rcx, 960(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 232(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 968(%rsp)
+               	movq	480(%rsp), %rcx
+               	movq	%rcx, 976(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 240(%rax)
+               	movq	512(%rsp), %rax
+               	movq	%rax, 984(%rsp)
+               	movq	496(%rsp), %rcx
+               	movq	%rcx, 992(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 248(%rax)

@@ -23660,192 +23812,193 @@
@@@[(3, 6), (8, 22), (23, 359)]@@@
-               	movq	%rcx, 1744(%rsp)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1744(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1760(%rsp)
+               	movq	1272(%rsp), %rcx
+               	movq	%rcx, 1768(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1776(%rsp)
+               	movq	1288(%rsp), %rcx
+               	movq	%rcx, 1784(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	1272(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1760(%rsp)
-               	movq	%rax, 1768(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	1288(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1776(%rsp)
-               	movq	%rax, 1784(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)
-               	movq	1304(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1792(%rsp)
-               	movq	%rax, 1800(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 40(%rcx)
-               	movq	1320(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1808(%rsp)
-               	movq	%rax, 1816(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 48(%rcx)
-               	movq	1336(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1824(%rsp)
-               	movq	%rax, 1832(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 56(%rcx)
-               	movq	1352(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1840(%rsp)
-               	movq	%rax, 1848(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 64(%rcx)
-               	movq	1368(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1856(%rsp)
-               	movq	%rax, 1864(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 72(%rcx)
-               	movq	1384(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1872(%rsp)
-               	movq	%rax, 1880(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 80(%rcx)
-               	movq	1400(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1888(%rsp)
-               	movq	%rax, 1896(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 88(%rcx)
-               	movq	1416(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1904(%rsp)
-               	movq	%rax, 1912(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 96(%rcx)
-               	movq	1432(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1920(%rsp)
-               	movq	%rax, 1928(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 104(%rcx)
-               	movq	1448(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1936(%rsp)
-               	movq	%rax, 1944(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 112(%rcx)
-               	movq	1464(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1952(%rsp)
-               	movq	%rax, 1960(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 120(%rcx)
-               	movq	1480(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1968(%rsp)
-               	movq	%rax, 1976(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 128(%rcx)
-               	movq	1496(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 1984(%rsp)
-               	movq	%rax, 1992(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 136(%rcx)
-               	movq	1512(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2000(%rsp)
-               	movq	%rax, 2008(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 144(%rcx)
-               	movq	1528(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2016(%rsp)
-               	movq	%rax, 2024(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 152(%rcx)
-               	movq	1544(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2032(%rsp)
-               	movq	%rax, 2040(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 160(%rcx)
-               	movq	1560(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2048(%rsp)
-               	movq	%rax, 2056(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 168(%rcx)
-               	movq	1576(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2064(%rsp)
-               	movq	%rax, 2072(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 176(%rcx)
-               	movq	1592(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2080(%rsp)
-               	movq	%rax, 2088(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 184(%rcx)
-               	movq	1608(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2096(%rsp)
-               	movq	%rax, 2104(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 192(%rcx)
-               	movq	1624(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2112(%rsp)
-               	movq	%rax, 2120(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 200(%rcx)
-               	movq	1640(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2128(%rsp)
-               	movq	%rax, 2136(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 208(%rcx)
-               	movq	1656(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2144(%rsp)
-               	movq	%rax, 2152(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 216(%rcx)
-               	movq	1672(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2160(%rsp)
-               	movq	%rax, 2168(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 224(%rcx)
-               	movq	1688(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2176(%rsp)
-               	movq	%rax, 2184(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 232(%rcx)
-               	movq	1704(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2192(%rsp)
-               	movq	%rax, 2200(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 240(%rcx)
-               	movq	1720(%rsp), %rax
-               	movq	1736(%rsp), %rcx
-               	movq	%rcx, 2208(%rsp)
-               	movq	%rax, 2216(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 248(%rcx)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1792(%rsp)
+               	movq	1304(%rsp), %rcx
+               	movq	%rcx, 1800(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 40(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1808(%rsp)
+               	movq	1320(%rsp), %rcx
+               	movq	%rcx, 1816(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 48(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1824(%rsp)
+               	movq	1336(%rsp), %rcx
+               	movq	%rcx, 1832(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 56(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1840(%rsp)
+               	movq	1352(%rsp), %rcx
+               	movq	%rcx, 1848(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 64(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1856(%rsp)
+               	movq	1368(%rsp), %rcx
+               	movq	%rcx, 1864(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 72(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1872(%rsp)
+               	movq	1384(%rsp), %rcx
+               	movq	%rcx, 1880(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 80(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1888(%rsp)
+               	movq	1400(%rsp), %rcx
+               	movq	%rcx, 1896(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 88(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1904(%rsp)
+               	movq	1416(%rsp), %rcx
+               	movq	%rcx, 1912(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 96(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1920(%rsp)
+               	movq	1432(%rsp), %rcx
+               	movq	%rcx, 1928(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 104(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1936(%rsp)
+               	movq	1448(%rsp), %rcx
+               	movq	%rcx, 1944(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 112(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1952(%rsp)
+               	movq	1464(%rsp), %rcx
+               	movq	%rcx, 1960(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 120(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1968(%rsp)
+               	movq	1480(%rsp), %rcx
+               	movq	%rcx, 1976(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 128(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 1984(%rsp)
+               	movq	1496(%rsp), %rcx
+               	movq	%rcx, 1992(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 136(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2000(%rsp)
+               	movq	1512(%rsp), %rcx
+               	movq	%rcx, 2008(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 144(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2016(%rsp)
+               	movq	1528(%rsp), %rcx
+               	movq	%rcx, 2024(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 152(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2032(%rsp)
+               	movq	1544(%rsp), %rcx
+               	movq	%rcx, 2040(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 160(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2048(%rsp)
+               	movq	1560(%rsp), %rcx
+               	movq	%rcx, 2056(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 168(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2064(%rsp)
+               	movq	1576(%rsp), %rcx
+               	movq	%rcx, 2072(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 176(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2080(%rsp)
+               	movq	1592(%rsp), %rcx
+               	movq	%rcx, 2088(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 184(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2096(%rsp)
+               	movq	1608(%rsp), %rcx
+               	movq	%rcx, 2104(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 192(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2112(%rsp)
+               	movq	1624(%rsp), %rcx
+               	movq	%rcx, 2120(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 200(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2128(%rsp)
+               	movq	1640(%rsp), %rcx
+               	movq	%rcx, 2136(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 208(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2144(%rsp)
+               	movq	1656(%rsp), %rcx
+               	movq	%rcx, 2152(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 216(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2160(%rsp)
+               	movq	1672(%rsp), %rcx
+               	movq	%rcx, 2168(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 224(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2176(%rsp)
+               	movq	1688(%rsp), %rcx
+               	movq	%rcx, 2184(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 232(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2192(%rsp)
+               	movq	1704(%rsp), %rcx
+               	movq	%rcx, 2200(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 240(%rax)
+               	movq	1736(%rsp), %rax
+               	movq	%rax, 2208(%rsp)
+               	movq	1720(%rsp), %rcx
+               	movq	%rcx, 2216(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 248(%rax)

@@ -23884,34 +24037,32 @@
@@@[(41, 45)]@@@
-               	leaq	(%rax,%rcx,8), %rax
-               	addq	$16, %rax
-               	movq	(%rax), %rax
+               	movq	16(%rax,%rcx,8), %rax

@@ -23965,19 +24116,19 @@
@@@[(16, 22)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -24171,43 +24322,44 @@
@@@[(15, 18), (20, 36)]@@@
-               	movq	%rcx, 72(%rsp)
+               	movq	64(%rsp), %rax
+               	movq	%rax, 72(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
-               	movq	48(%rsp), %rax
-               	movq	64(%rsp), %rcx
-               	movq	%rcx, 88(%rsp)
-               	movq	%rax, 96(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	64(%rsp), %rax
+               	movq	%rax, 88(%rsp)
+               	movq	48(%rsp), %rcx
+               	movq	%rcx, 96(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)

@@ -24226,24 +24378,25 @@
@@@[(3, 6), (8, 24)]@@@
-               	movq	%rcx, 176(%rsp)
+               	movq	168(%rsp), %rax
+               	movq	%rax, 176(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
-               	movq	152(%rsp), %rax
-               	movq	168(%rsp), %rcx
-               	movq	%rcx, 192(%rsp)
-               	movq	%rax, 200(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	168(%rsp), %rax
+               	movq	%rax, 192(%rsp)
+               	movq	152(%rsp), %rcx
+               	movq	%rcx, 200(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)

@@ -24251,7 +24404,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax)
+               	nopw	(%rax,%rax)

@@ -24303,23 +24456,24 @@
@@@[(21, 23), (27, 30)]@@@
-               	leaq	16(%rax), %r12
+               	leaq	16(%rax), %rcx
@@@@
-               	movq	%r12, 216(%rsp)
+               	movq	%rcx, 144(%rsp)
+               	movq	%rcx, 216(%rsp)

@@ -24335,54 +24489,55 @@
@@@[(27, 40), (41, 49), (51, 53), (65, 67)]@@@
-               	je	0x42d257 <kfun:kotlin.text.Regex#<init>(kotlin.String){}+0x237>
-               	leaq	789361(%rip), %rdi      # 0x4eddbc <state_global$kotlin.text.regex.Lexer>
-               	leaq	105102(%rip), %rsi      # 0x446ce0 <kfun:kotlin.text.regex.Lexer.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	24(%rbx), %r14
-               	movq	%r14, 88(%rsp)
+               	je	0x42d4bf <kfun:kotlin.text.Regex#<init>(kotlin.String){}+0x23f>
+               	leaq	790665(%rip), %rdi      # 0x4ee53c <state_global$kotlin.text.regex.Lexer>
+               	leaq	105270(%rip), %rsi      # 0x446ff0 <kfun:kotlin.text.regex.Lexer.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	24(%rbx), %rax
+               	movq	%rax, 88(%rsp)
+               	movq	88(%rsp), %r14
@@@@
-               	movslq	8(%r14), %rbp
-               	testq	%rbp, %rbp
-               	js	0x42d5c3 <kfun:kotlin.text.Regex#<init>(kotlin.String){}+0x5a3>
-               	movl	%ebp, %eax
+               	movl	8(%r14), %r12d
+               	testl	%r12d, %r12d
+               	js	0x42d853 <kfun:kotlin.text.Regex#<init>(kotlin.String){}+0x5d3>
+               	movslq	%r12d, %rbp
@@@@
-               	leaq	(%rax,%rax), %rsi
+               	leaq	(%r12,%r12), %rsi
@@@@
-               	movl	%ebp, 24(%rax)
+               	movl	%r12d, 24(%rax)

@@ -24390,12 +24545,13 @@
@@@[(7, 8)]@@@
+               	movq	32(%rbx), %rax

@@ -24403,45 +24559,46 @@
@@@[(10, 19), (22, 24)]@@@
-               	movq	%r12, %rdi
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movq	%r12, %rdi
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	144(%rsp), %rbp
+               	movq	%rbp, %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	%rbp, %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
@@@@
-               	movq	%r12, 32(%r13)
+               	movq	%rbp, 32(%r13)

@@ -24464,19 +24621,22 @@
@@@[(3, 4), (5, 6), (7, 9), (14, 25)]@@@
+               	movq	%rax, 288(%rbx)
@@@@
-               	movaps	%xmm0, (%rsp)
@@@@
+               	movaps	%xmm0, (%rsp)
+               	movq	288(%rbx), %rax
@@@@
-               	movq	32(%rsp), %rcx
-               	movq	%rbp, 8(%rcx)
-               	movq	56(%r13), %rax
-               	movq	%rax, 16(%rcx)
-               	movl	64(%r13), %r14d
+               	movq	32(%rsp), %rdx
+               	movq	%rbp, 8(%rdx)
+               	movq	8(%rdx), %rax
+               	movq	40(%rax), %rcx
+               	movq	%rcx, 16(%rdx)
+               	movl	48(%rax), %r14d

@@ -24865,61 +25025,62 @@
@@@[(64, 67)]@@@
-               	jge	0x42dc4b <kfun:kotlin.text.Regex#replace(kotlin.CharSequence;kotlin.Function1<kotlin.text.MatchResult,kotlin.CharSequence>){}kotlin.String+0x21b>
+               	jge	0x42dee0 <kfun:kotlin.text.Regex#replace(kotlin.CharSequence;kotlin.Function1<kotlin.text.MatchResult,kotlin.CharSequence>){}kotlin.String+0x220>
+               	movq	80(%rsp), %rax

@@ -24959,8 +25120,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421090 <ThrowNullPointerException>
-               	nopw	(%rax,%rax)
+               	callq	0x4212a0 <ThrowNullPointerException>
+               	nop

@@ -25238,134 +25399,135 @@
@@@[(15, 18), (20, 34), (35, 95)]@@@
-               	movq	%rcx, 160(%rsp)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 160(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 176(%rsp)
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 184(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 192(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 200(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	56(%rsp), %rax
-               	movq	152(%rsp), %rcx
-               	movq	%rcx, 176(%rsp)
-               	movq	%rax, 184(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	72(%rsp), %rax
-               	movq	152(%rsp), %rcx
-               	movq	%rcx, 192(%rsp)
-               	movq	%rax, 200(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)
-               	movq	88(%rsp), %rax
-               	movq	152(%rsp), %rcx
-               	movq	%rcx, 208(%rsp)
-               	movq	%rax, 216(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 40(%rcx)
-               	movq	104(%rsp), %rax
-               	movq	152(%rsp), %rcx
-               	movq	%rcx, 224(%rsp)
-               	movq	%rax, 232(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 48(%rcx)
-               	movq	120(%rsp), %rax
-               	movq	152(%rsp), %rcx
-               	movq	%rcx, 240(%rsp)
-               	movq	%rax, 248(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 56(%rcx)
-               	movq	136(%rsp), %rax
-               	movq	152(%rsp), %rcx
-               	movq	%rcx, 256(%rsp)
-               	movq	%rax, 264(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 64(%rcx)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 208(%rsp)
+               	movq	88(%rsp), %rcx
+               	movq	%rcx, 216(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 40(%rax)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 224(%rsp)
+               	movq	104(%rsp), %rcx
+               	movq	%rcx, 232(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 48(%rax)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 240(%rsp)
+               	movq	120(%rsp), %rcx
+               	movq	%rcx, 248(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 56(%rax)
+               	movq	152(%rsp), %rax
+               	movq	%rax, 256(%rsp)
+               	movq	136(%rsp), %rcx
+               	movq	%rcx, 264(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 64(%rax)

@@ -25399,54 +25561,55 @@
@@@[(3, 6), (8, 22), (23, 83)]@@@
-               	movq	%rcx, 464(%rsp)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 464(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 480(%rsp)
+               	movq	360(%rsp), %rcx
+               	movq	%rcx, 488(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 496(%rsp)
+               	movq	376(%rsp), %rcx
+               	movq	%rcx, 504(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	360(%rsp), %rax
-               	movq	456(%rsp), %rcx
-               	movq	%rcx, 480(%rsp)
-               	movq	%rax, 488(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	376(%rsp), %rax
-               	movq	456(%rsp), %rcx
-               	movq	%rcx, 496(%rsp)
-               	movq	%rax, 504(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)
-               	movq	392(%rsp), %rax
-               	movq	456(%rsp), %rcx
-               	movq	%rcx, 512(%rsp)
-               	movq	%rax, 520(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 40(%rcx)
-               	movq	408(%rsp), %rax
-               	movq	456(%rsp), %rcx
-               	movq	%rcx, 528(%rsp)
-               	movq	%rax, 536(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 48(%rcx)
-               	movq	424(%rsp), %rax
-               	movq	456(%rsp), %rcx
-               	movq	%rcx, 544(%rsp)
-               	movq	%rax, 552(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 56(%rcx)
-               	movq	440(%rsp), %rax
-               	movq	456(%rsp), %rcx
-               	movq	%rcx, 560(%rsp)
-               	movq	%rax, 568(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 64(%rcx)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 512(%rsp)
+               	movq	392(%rsp), %rcx
+               	movq	%rcx, 520(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 40(%rax)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 528(%rsp)
+               	movq	408(%rsp), %rcx
+               	movq	%rcx, 536(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 48(%rax)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 544(%rsp)
+               	movq	424(%rsp), %rcx
+               	movq	%rcx, 552(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 56(%rax)
+               	movq	456(%rsp), %rax
+               	movq	%rax, 560(%rsp)
+               	movq	440(%rsp), %rcx
+               	movq	%rcx, 568(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 64(%rax)

@@ -25456,15 +25619,14 @@
@@@[(3, 4)]@@@
-               	nopw	%cs:(%rax,%rax)

@@ -26346,26 +26508,27 @@
@@@[(17, 19), (26, 33)]@@@
-               	movslq	16(%rbx), %r14
+               	movl	16(%rbx), %r14d
@@@@
-               	jbe	0x42f646 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd6>
-               	movq	(%rbp), %rax
-               	movw	%r15w, 16(%rbp,%r14,2)
+               	jbe	0x42f8d9 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder+0xd9>
+               	movslq	%r14d, %rax
+               	movq	(%rbp), %rcx
+               	movw	%r15w, 16(%rbp,%rax,2)

@@ -26379,8 +26542,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nop

@@ -26433,17 +26596,17 @@
@@@[(3, 5), (6, 8), (12, 22)]@@@
-               	movl	%ecx, %ebp
+               	movl	%ecx, %ebx
@@@@
-               	movq	%rsi, %rbx
+               	movq	%rsi, %r15
@@@@
-               	je	0x42f6ff <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	testq	%rbx, %rbx
-               	leaq	713575(%rip), %r12      # 0x4dda70 <__unnamed_2>
-               	cmovneq	%rbx, %r12
+               	je	0x42f98f <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x2f>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	testq	%r15, %r15
+               	leaq	714839(%rip), %rbp      # 0x4de1f0 <__unnamed_2>
+               	cmovneq	%r15, %rbp

@@ -26457,7 +26620,7 @@
@@@[(3, 5)]@@@
-               	movq	(%r12), %rax
+               	movq	(%rbp), %rax

@@ -26465,49 +26628,51 @@
@@@[(3, 5), (7, 9), (10, 28), (31, 42), (44, 67), (68, 70), (74, 78)]@@@
-               	movq	%r12, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	movl	%ebp, %esi
+               	movl	%ebx, %esi
@@@@
-               	callq	0x4220d0 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
-               	movl	%ebp, %ebx
-               	subl	%r13d, %ebx
-               	movq	8(%rsp), %r14
-               	movl	16(%r14), %esi
-               	addl	%ebx, %esi
-               	movq	%r14, %rdi
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movq	(%r12), %rax
+               	callq	0x4222e0 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
+               	movl	%ebx, %r14d
+               	subl	%r13d, %r14d
+               	movq	8(%rsp), %r15
+               	movl	16(%r15), %esi
+               	addl	%r14d, %esi
+               	movq	%r15, %rdi
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movq	(%rbp), %rax
@@@@
-               	jne	0x42f82d <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x15d>
-               	movslq	16(%r14), %rbp
-               	movq	8(%r14), %rax
-               	movq	%rax, 56(%rsp)
-               	leaq	(%rax,%rbp,2), %rdi
+               	jne	0x42facb <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x16b>
+               	movl	16(%r15), %eax
+               	movq	8(%r15), %rcx
+               	movq	%rcx, 56(%rsp)
+               	movslq	%eax, %r15
+               	leaq	(%rcx,%r15,2), %rdi
@@@@
-               	leaq	(%r12,%rax,2), %rsi
-               	addq	$16, %rsi
-               	movslq	%ebx, %rdx
-               	addq	%rdx, %rdx
-               	callq	0x4137d0 <memcpy@plt>
-               	addl	%ebp, %ebx
-               	movq	%r14, %rdi
-               	movl	%ebx, %esi
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movl	%ebx, 16(%r14)
-               	movq	%r14, %rbx
+               	leaq	16(,%rax,2), %rsi
+               	addq	%rbp, %rsi
+               	movslq	%r14d, %rbp
+               	movq	%rbp, %rdx
+               	addq	%rbp, %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	addl	%r15d, %ebp
+               	movq	8(%rsp), %r15
+               	movq	%r15, %rdi
+               	movl	%ebp, %esi
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movl	%ebp, 16(%r15)
@@@@
-               	movq	%rbx, (%rdx)
+               	movq	%r15, (%rdx)
@@@@
-               	movq	%rbx, (%rdx)
-               	movq	%rbx, %rax
+               	movq	%r15, (%rdx)
+               	movq	%r15, %rax

@@ -26516,27 +26681,26 @@
@@@[(3, 18), (19, 29), (30, 32), (33, 41)]@@@
-               	cmpl	%r13d, %ebp
-               	cmovll	%r13d, %ebp
-               	movq	%r12, %r14
-               	movl	%ebp, 4(%rsp)
-               	movq	8(%rsp), %rbx
-               	cmpl	%r13d, %ebp
-               	je	0x42f7f8 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x128>
-               	nopl	(%rax)
-               	movzbl	784353(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	cmpl	%r13d, %ebx
+               	cmovll	%r13d, %ebx
+               	cmpl	%r13d, %ebx
+               	je	0x42fa96 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
+               	nopl	(%rax,%rax)
+               	movzbl	785625(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x42f860 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	8(%rbx), %rbp
-               	movq	%rbp, 64(%rsp)
-               	movslq	16(%rbx), %r12
+               	je	0x42faf0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x190>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	8(%r15), %r14
+               	movq	%r14, 64(%rsp)
+               	movl	16(%r15), %r12d
@@@@
-               	movq	%rbx, %rdi
+               	movq	8(%rsp), %rdi
@@@@
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movl	%r15d, 16(%rbx)
-               	movq	(%r14), %rax
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movq	8(%rsp), %rax
+               	movl	%r15d, 16(%rax)
+               	movq	8(%rsp), %r15
+               	movq	(%rbp), %rax

@@ -26544,20 +26708,20 @@
@@@[(3, 5), (7, 12), (13, 28)]@@@
-               	movq	%r14, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	cmpl	%r12d, 8(%rbp)
-               	jbe	0x42f8c9 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x1f9>
+               	cmpl	%r12d, 8(%r14)
+               	jbe	0x42fb64 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x204>
+               	movslq	%r12d, %rcx
@@@@
-               	movq	(%rbp), %rcx
-               	movw	%ax, 16(%rbp,%r12,2)
-               	movl	4(%rsp), %ebp
-               	cmpl	%r13d, %ebp
-               	jne	0x42f850 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
-               	jmp	0x42f7f8 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x128>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nop
+               	movq	(%r14), %rdx
+               	movw	%ax, 16(%r14,%rcx,2)
+               	cmpl	%r13d, %ebx
+               	jne	0x42fae0 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x180>
+               	jmp	0x42fa96 <kfun:kotlin.text.StringBuilder#append(kotlin.CharSequence?;kotlin.Int;kotlin.Int){}kotlin.text.StringBuilder+0x136>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -26569,62 +26733,62 @@
@@@[(3, 5), (9, 13), (15, 17), (22, 28), (29, 37), (38, 42), (43, 45), (51, 58), (59, 60), (63, 67), (71, 83), (84, 86), (87, 91)]@@@
-               	movq	%rdi, %r15
+               	movq	%rdi, %rbx
@@@@
-               	movq	-64(%rax), %rbp
-               	movq	288(%rbp), %rax
+               	movq	-64(%rax), %r13
+               	movq	288(%r13), %rax
@@@@
-               	movq	%rax, 288(%rbp)
+               	movq	%rax, 288(%r13)
@@@@
-               	je	0x42f93f <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%r15), %esi
+               	je	0x42fbdf <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0x6f>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	16(%rbx), %esi
@@@@
-               	movq	%r15, %rdi
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movslq	16(%r15), %r13
-               	movq	8(%r15), %r14
+               	movq	%rbx, %rdi
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movl	16(%rbx), %r15d
+               	movq	8(%rbx), %r14
@@@@
-               	leaq	12(%rsp), %rbx
-               	leaq	378555(%rip), %rdx      # 0x48c022 <typeinfo name for kotlin::gc::GCSchedulerData+0x19d1>
+               	leaq	12(%rsp), %rbp
+               	leaq	382684(%rip), %rdx      # 0x48d2e2 <typeinfo name for kotlin::gc::GCSchedulerData+0x19d1>
@@@@
-               	movq	%rbx, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	je	0x42f9a6 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
-               	leaq	12(%rsp), %rbx
-               	leaq	(%r14,%r13,2), %rcx
+               	je	0x42fc46 <kfun:kotlin.text.StringBuilder#append(kotlin.Int){}kotlin.text.StringBuilder+0xd6>
+               	movslq	%r15d, %rcx
+               	leaq	12(%rsp), %rbp
+               	leaq	(%r14,%rcx,2), %rcx
@@@@
-               	nop
@@@@
-               	movzbl	1(%rbx), %eax
-               	addq	$1, %rbx
+               	movzbl	1(%rbp), %eax
+               	addq	$1, %rbp
@@@@
-               	subl	%eax, %ebx
-               	addl	%r13d, %ebx
-               	movq	%r15, %rdi
-               	movl	%ebx, %esi
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movl	%ebx, 16(%r15)
+               	subl	%eax, %ebp
+               	addl	%ebp, %r15d
+               	movq	%rbx, %rdi
+               	movl	%r15d, %esi
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movl	%r15d, 16(%rbx)
@@@@
-               	movq	%r15, (%rax)
+               	movq	%rbx, (%rax)
@@@@
-               	movq	%rax, 288(%rbp)
-               	movq	%r15, %rax
+               	movq	%rax, 288(%r13)
+               	movq	%rbx, %rax

@@ -26657,39 +26821,40 @@
@@@[(6, 14), (19, 24), (25, 45), (50, 54)]@@@
-               	je	0x42fa63 <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0x73>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %esi
-               	addl	8(%r15), %esi
+               	je	0x42fd03 <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0x73>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	8(%r15), %esi
+               	addl	16(%rbx), %esi
@@@@
-               	movslq	8(%r15), %rdx
-               	testq	%rdx, %rdx
-               	js	0x42faea <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfa>
-               	movl	16(%rbx), %eax
+               	movl	8(%r15), %eax
@@@@
-               	js	0x42faea <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfa>
-               	cmpl	8(%r15), %edx
-               	ja	0x42faea <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfa>
-               	leal	(%rax,%rdx), %ecx
-               	cmpl	8(%rbp), %ecx
-               	ja	0x42faea <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfa>
-               	movq	(%rbp), %rcx
-               	leaq	16(,%rax,2), %rdi
+               	js	0x42fd8c <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfc>
+               	movl	16(%rbx), %ecx
+               	testl	%ecx, %ecx
+               	js	0x42fd8c <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfc>
+               	cmpl	8(%r15), %eax
+               	ja	0x42fd8c <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfc>
+               	leal	(%rax,%rcx), %edx
+               	cmpl	8(%rbp), %edx
+               	ja	0x42fd8c <kfun:kotlin.text.StringBuilder#append(kotlin.CharArray){}kotlin.text.StringBuilder+0xfc>
+               	movslq	%eax, %rdx
+               	movq	(%rbp), %rax
+               	leaq	16(,%rcx,2), %rdi
@@@@
-               	movl	16(%rbx), %ebp
-               	addl	8(%r15), %ebp
+               	movl	8(%r15), %ebp
+               	addl	16(%rbx), %ebp

@@ -26701,8 +26866,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nop
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -26726,33 +26891,34 @@
@@@[(14, 18), (19, 32), (34, 38), (39, 43), (44, 50)]@@@
-               	movl	16(%r12), %esi
-               	addl	8(%rbx), %esi
+               	movl	8(%rbx), %esi
+               	addl	16(%r12), %esi
@@@@
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movslq	16(%r12), %r15
-               	movq	8(%r12), %rax
-               	movq	%rax, 24(%rsp)
-               	movslq	8(%rbx), %rbp
-               	leaq	(%rax,%r15,2), %rdi
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movl	16(%r12), %eax
+               	movq	8(%r12), %rcx
+               	movq	%rcx, 24(%rsp)
+               	movl	8(%rbx), %edx
+               	movslq	%eax, %rbp
+               	leaq	(%rcx,%rbp,2), %rdi
@@@@
-               	movq	%rbp, %rdx
-               	addq	%rbp, %rdx
+               	movslq	%edx, %r15
+               	leaq	(%r15,%r15), %rdx
@@@@
-               	callq	0x4137d0 <memcpy@plt>
-               	leal	(%r15,%rbp), %ebx
+               	callq	0x4137e0 <memcpy@plt>
+               	addl	%ebp, %r15d
@@@@
-               	movl	%ebx, %esi
-               	callq	0x42fbe0 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
-               	movl	%ebx, 16(%r12)
+               	movl	%r15d, %esi
+               	callq	0x42fe90 <kfun:kotlin.text.StringBuilder#ensureCapacity(kotlin.Int){}>
+               	movl	%r15d, 16(%r12)

@@ -26818,12 +26984,13 @@
@@@[(3, 4)]@@@
+               	pushq	%rbp

@@ -26833,121 +27000,124 @@
@@@[(3, 7), (9, 11), (16, 26), (29, 33), (34, 39), (43, 66), (67, 71), (73, 89), (93, 94), (95, 131), (132, 149), (150, 174), (176, 184), (190, 194), (199, 200), (201, 203)]@@@
-               	movq	-64(%rax), %r12
-               	movq	288(%r12), %rax
+               	movq	-64(%rax), %r15
+               	movq	288(%r15), %rax
@@@@
-               	movq	%rax, 288(%r12)
+               	movq	%rax, 288(%r15)
@@@@
-               	je	0x42fd2d <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x7d>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	16(%r14), %r15
-               	testq	%r15, %r15
-               	jns	0x42fe9f <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1ef>
+               	je	0x42ffdc <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x7c>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	16(%r14), %r12d
+               	testl	%r12d, %r12d
+               	jns	0x43015e <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1fe>
@@@@
-               	movl	8(%r13), %edx
-               	movl	%edx, %ebx
+               	movl	8(%r13), %eax
+               	movl	%eax, %ebx
@@@@
-               	andl	%edx, %ebx
-               	movl	%r15d, %edi
+               	andl	%eax, %ebx
+               	movl	8(%r13), %edx
+               	movl	%r12d, %edi
@@@@
-               	cmpl	%ebx, %r15d
-               	jge	0x42fe9f <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1ef>
-               	leaq	16(,%r15,2), %r10
-               	addq	%r13, %r10
-               	movl	%r15d, %r9d
-               	notl	%r9d
-               	addl	%ebx, %r9d
-               	cmpl	$15, %r9d
-               	jb	0x42fe7c <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1cc>
-               	addq	$1, %r9
-               	movq	%r9, %r8
+               	cmpl	%ebx, %r12d
+               	jge	0x43015e <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1fe>
+               	movslq	%r12d, %r9
+               	leaq	16(,%r9,2), %rax
+               	addq	%r13, %rax
+               	movl	%r12d, %r10d
+               	notl	%r10d
+               	addl	%ebx, %r10d
+               	cmpl	$15, %r10d
+               	jb	0x43013c <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1dc>
+               	addq	$1, %r10
+               	movq	%r10, %r8
@@@@
-               	leaq	-16(%r8), %rax
-               	movq	%rax, %rdi
+               	leaq	-16(%r8), %rcx
+               	movq	%rcx, %rdi
@@@@
-               	movl	%edi, %esi
-               	andl	$7, %esi
-               	cmpq	$112, %rax
-               	jae	0x42fdb4 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x104>
-               	xorl	%eax, %eax
-               	jmp	0x42fe41 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x191>
-               	leaq	240(,%r15,2), %rdx
-               	addq	%r13, %rdx
+               	movl	%edi, %edx
+               	andl	$7, %edx
+               	cmpq	$112, %rcx
+               	jae	0x43006a <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x10a>
+               	xorl	%ebp, %ebp
+               	jmp	0x430101 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1a1>
+               	leaq	240(,%r9,2), %rsi
+               	addq	%r13, %rsi
@@@@
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movups	%xmm0, -208(%rdx,%rcx,2)
-               	movups	%xmm0, -224(%rdx,%rcx,2)
-               	movups	%xmm0, -192(%rdx,%rcx,2)
-               	movups	%xmm0, -176(%rdx,%rcx,2)
-               	movups	%xmm0, -160(%rdx,%rcx,2)
-               	movups	%xmm0, -144(%rdx,%rcx,2)
-               	movups	%xmm0, -128(%rdx,%rcx,2)
-               	movups	%xmm0, -112(%rdx,%rcx,2)
-               	movups	%xmm0, -96(%rdx,%rcx,2)
-               	movups	%xmm0, -80(%rdx,%rcx,2)
-               	movups	%xmm0, -64(%rdx,%rcx,2)
-               	movups	%xmm0, -48(%rdx,%rcx,2)
-               	movups	%xmm0, -32(%rdx,%rcx,2)
-               	movups	%xmm0, -16(%rdx,%rcx,2)
-               	leaq	128(%rcx), %rax
-               	movups	%xmm0, 16(%rdx,%rcx,2)
-               	movups	%xmm0, (%rdx,%rcx,2)
-               	movq	%rax, %rcx
+               	movups	%xmm0, -208(%rsi,%rcx,2)
+               	movups	%xmm0, -224(%rsi,%rcx,2)
+               	movups	%xmm0, -192(%rsi,%rcx,2)
+               	movups	%xmm0, -176(%rsi,%rcx,2)
+               	movups	%xmm0, -160(%rsi,%rcx,2)
+               	movups	%xmm0, -144(%rsi,%rcx,2)
+               	movups	%xmm0, -128(%rsi,%rcx,2)
+               	movups	%xmm0, -112(%rsi,%rcx,2)
+               	movups	%xmm0, -96(%rsi,%rcx,2)
+               	movups	%xmm0, -80(%rsi,%rcx,2)
+               	movups	%xmm0, -64(%rsi,%rcx,2)
+               	movups	%xmm0, -48(%rsi,%rcx,2)
+               	movups	%xmm0, -32(%rsi,%rcx,2)
+               	movups	%xmm0, -16(%rsi,%rcx,2)
+               	leaq	128(%rcx), %rbp
+               	movups	%xmm0, 16(%rsi,%rcx,2)
+               	movups	%xmm0, (%rsi,%rcx,2)
+               	movq	%rbp, %rcx
@@@@
-               	jne	0x42fdd0 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x120>
-               	testq	%rsi, %rsi
-               	je	0x42fe70 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1c0>
-               	movq	%r15, %rcx
-               	addq	%r15, %rcx
-               	leaq	(%rcx,%rax,2), %rax
-               	addq	%r13, %rax
-               	addq	$16, %rax
-               	negq	%rsi
+               	jne	0x430090 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x130>
+               	testq	%rdx, %rdx
+               	je	0x430130 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1d0>
+               	addq	%r9, %r9
+               	leaq	(%r9,%rbp,2), %rcx
+               	addq	%r13, %rcx
+               	addq	$16, %rcx
+               	negq	%rdx
@@@@
-               	nopl	(%rax)
-               	movups	%xmm0, 16(%rax)
-               	movups	%xmm0, (%rax)
-               	addq	$32, %rax
-               	incq	%rsi
-               	jne	0x42fe60 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1b0>
-               	cmpq	%r8, %r9
-               	je	0x42fe9f <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1ef>
-               	addl	%r8d, %r15d
-               	leaq	(%r10,%r8,2), %r10
-               	subl	%r15d, %ebx
-               	xorl	%eax, %eax
+               	nop
+               	movups	%xmm0, 16(%rcx)
+               	movups	%xmm0, (%rcx)
+               	addq	$32, %rcx
+               	incq	%rdx
+               	jne	0x430120 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1c0>
+               	cmpq	%r8, %r10
+               	je	0x43015e <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1fe>
+               	addl	%r8d, %r12d
+               	leaq	(%rax,%r8,2), %rax
+               	subl	%r12d, %ebx
+               	xorl	%ecx, %ecx
@@@@
-               	movw	$0, (%r10,%rax,2)
-               	addq	$1, %rax
-               	cmpl	%eax, %ebx
-               	jne	0x42fe90 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1e0>
+               	movw	$0, (%rax,%rcx,2)
+               	addq	$1, %rcx
+               	cmpl	%ecx, %ebx
+               	jne	0x430150 <kfun:kotlin.text.StringBuilder#setLength(kotlin.Int){}+0x1f0>
@@@@
-               	movq	%rax, 288(%r12)
-               	addq	$96, %rsp
+               	movq	%rax, 288(%r15)
+               	addq	$88, %rsp
@@@@
+               	popq	%rbp
@@@@
-               	nopl	(%rax)
+               	nopl	(%rax,%rax)

@@ -27125,27 +27295,28 @@
@@@[(3, 7), (9, 11), (16, 22), (24, 28), (29, 38)]@@@
-               	movq	-64(%rax), %r14
-               	movq	288(%r14), %rax
+               	movq	-64(%rax), %r13
+               	movq	288(%r13), %rax
@@@@
-               	movq	%rax, 288(%r14)
+               	movq	%rax, 288(%r13)
@@@@
-               	je	0x4301cd <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x6d>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	296(%r14), %rdi
+               	je	0x43048d <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x6d>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	296(%r13), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rdx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
@@@@
-               	leaq	577019(%rip), %rcx      # 0x4bcff0 <ktypeglobal:kotlin.text.regex.AbstractCharClass.Companion#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%rdx, 136(%rsp)
-               	movq	%rdx, 776928(%rip)      # 0x4edce8 <kvar:kotlin.text.regex.AbstractCharClass.$companion#internal>
+               	leaq	578235(%rip), %rdx      # 0x4bd770 <ktypeglobal:kotlin.text.regex.AbstractCharClass.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 136(%rsp)
+               	movq	%rcx, 778144(%rip)      # 0x4ee468 <kvar:kotlin.text.regex.AbstractCharClass.$companion#internal>
+               	movq	778137(%rip), %rcx      # 0x4ee468 <kvar:kotlin.text.regex.AbstractCharClass.$companion#internal>

@@ -27154,133 +27325,134 @@
@@@[(3, 21), (36, 46), (51, 53), (59, 63), (64, 74), (75, 81), (87, 89), (98, 102), (103, 107), (108, 112), (115, 123), (125, 129), (133, 143), (146, 153), (154, 156), (168, 172), (175, 177), (193, 195)]@@@
-               	movq	288(%r14), %rcx
-               	movq	%rcx, 24(%rsp)
-               	leaq	16(%rsp), %rcx
-               	movq	%rcx, 288(%r14)
-               	movabsq	$51539607552, %rcx      # imm = 0xC00000000
-               	movq	%rcx, 32(%rsp)
-               	movq	%rax, (%rsp)
-               	movl	$2048, 40(%rax)         # imm = 0x800
-               	movl	777034(%rip), %eax      # 0x4eddb0 <state_global$kotlin.text.regex.AbstractCharClass.Companion.CharClasses>
+               	movq	288(%r13), %rax
+               	movq	%rax, 24(%rsp)
+               	leaq	16(%rsp), %rax
+               	movq	%rax, 288(%r13)
+               	movabsq	$51539607552, %rax      # imm = 0xC00000000
+               	movq	%rax, 32(%rsp)
+               	movq	%rcx, (%rsp)
+               	movl	$2048, 24(%rcx)         # imm = 0x800
+               	movl	778243(%rip), %eax      # 0x4ee530 <state_global$kotlin.text.regex.AbstractCharClass.Companion.CharClasses>
@@@@
-               	movl	8(%rax), %r13d
-               	testl	%r13d, %r13d
-               	js	0x4304b3 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x353>
-               	movq	296(%r14), %rdi
-               	leaq	31(,%r13,8), %rsi
+               	movl	8(%rax), %r12d
+               	testl	%r12d, %r12d
+               	js	0x430774 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x354>
+               	movq	296(%r13), %rdi
+               	leaq	31(,%r12,8), %rsi
@@@@
-               	leaq	16(%rax), %r15
+               	leaq	16(%rax), %r14
@@@@
-               	movl	%r13d, 24(%rbx)
-               	movq	%r15, 56(%rsp)
+               	movl	%r12d, 24(%rbx)
+               	movq	%r14, 56(%rsp)
@@@@
-               	leaq	562834(%rip), %r12      # 0x4b9980 <ktypeglobal:kotlin.native.concurrent.AtomicReference#internal>
-               	cmpq	%rbp, %r13
-               	je	0x430360 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x200>
-               	nopw	(%rax,%rax)
-               	movzbl	781617(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	leaq	564043(%rip), %r15      # 0x4ba100 <ktypeglobal:kotlin.native.concurrent.AtomicReference#internal>
+               	cmpq	%rbp, %r12
+               	je	0x430620 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x200>
+               	nop
+               	movzbl	782841(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x430310 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x1b0>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	296(%r14), %rdi
+               	je	0x4305d0 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x1b0>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	296(%r13), %rdi
@@@@
-               	movq	%r12, 16(%rax)
+               	movq	%r15, 16(%rax)
@@@@
-               	cmpq	%rbp, %r13
-               	jne	0x430300 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x1a0>
+               	cmpq	%rbp, %r12
+               	jne	0x4305c0 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x1a0>
@@@@
-               	movq	%r15, 24(%rax)
-               	movq	776553(%rip), %rdi      # 0x4edcd8 <kvar:kotlin.text.regex.AbstractCharClass.Companion.CharClasses.$VALUES#internal>
+               	movq	%r14, 8(%rax)
+               	movq	777769(%rip), %rdi      # 0x4ee458 <kvar:kotlin.text.regex.AbstractCharClass.Companion.CharClasses.$VALUES#internal>
@@@@
-               	callq	0x421de0 <kfun:kotlin.native.internal#valuesForEnum(kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}kotlin.Array<0:0>>
-               	movq	%rax, %r12
+               	callq	0x421ff0 <kfun:kotlin.native.internal#valuesForEnum(kotlin.Array<0:0>){0§<kotlin.Enum<0:0>>}kotlin.Array<0:0>>
+               	movq	%rax, %r15
@@@@
-               	movl	$16, %r13d
-               	cmovgl	%eax, %r13d
-               	movq	%r14, 8(%rsp)
-               	movq	296(%r14), %rdi
+               	movl	$16, %r12d
+               	cmovgl	%eax, %r12d
+               	movq	%r13, 8(%rsp)
+               	movq	296(%r13), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %r15
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %r14
@@@@
-               	movq	%r15, 80(%rsp)
-               	movq	%r15, %rdi
-               	movl	%r13d, %esi
-               	callq	0x426930 <kfun:kotlin.collections.HashMap#<init>(kotlin.Int){}>
-               	movl	8(%r12), %ebp
+               	movq	%r14, 80(%rsp)
+               	movq	%r14, %rdi
+               	movl	%r12d, %esi
+               	callq	0x426b60 <kfun:kotlin.collections.HashMap#<init>(kotlin.Int){}>
+               	movl	8(%r15), %ebp
@@@@
-               	jmp	0x43044a <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x2ea>
-               	movq	16(%r12,%rbx,8), %r13
-               	movq	%r13, 88(%rsp)
+               	jmp	0x43070b <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal+0x2eb>
+               	nop
+               	movq	16(%r15,%rbx,8), %r12
+               	movq	%r12, 88(%rsp)
@@@@
-               	movq	24(%r13), %r14
+               	movq	24(%r12), %r13
@@@@
-               	movq	%r14, 24(%rax)
-               	movq	%r13, 32(%rax)
+               	movq	%r13, 24(%rax)
+               	movq	%r12, 32(%rax)
@@@@
-               	movq	%r15, %rdi
+               	movq	%r14, %rdi
@@@@
-               	movq	%r15, 32(%rax)
+               	movq	%r14, 16(%rax)

@@ -27291,22 +27463,22 @@
@@@[(3, 7), (23, 27)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	movq	296(%r14), %rdi
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	movq	296(%r13), %rdi
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nopl	(%rax)

@@ -30853,21 +31025,22 @@
@@@[(15, 18), (20, 24)]@@@
-               	movq	%rcx, 2952(%rsp)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 2952(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)

@@ -31762,1840 +31935,1840 @@
@@@[(3, 387)]@@@
-               	movq	2432(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5352(%rsp)
-               	movq	%rax, 5360(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1216(%rcx)
-               	movq	2448(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5368(%rsp)
-               	movq	%rax, 5376(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1224(%rcx)
-               	movq	2464(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5384(%rsp)
-               	movq	%rax, 5392(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1232(%rcx)
-               	movq	2480(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5400(%rsp)
-               	movq	%rax, 5408(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1240(%rcx)
-               	movq	2496(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5416(%rsp)
-               	movq	%rax, 5424(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1248(%rcx)
-               	movq	2512(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5432(%rsp)
-               	movq	%rax, 5440(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1256(%rcx)
-               	movq	2528(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5448(%rsp)
-               	movq	%rax, 5456(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1264(%rcx)
-               	movq	2544(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5464(%rsp)
-               	movq	%rax, 5472(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1272(%rcx)
-               	movq	2560(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5480(%rsp)
-               	movq	%rax, 5488(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1280(%rcx)
-               	movq	2576(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5496(%rsp)
-               	movq	%rax, 5504(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1288(%rcx)
-               	movq	2592(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5512(%rsp)
-               	movq	%rax, 5520(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1296(%rcx)
-               	movq	2608(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5528(%rsp)
-               	movq	%rax, 5536(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1304(%rcx)
-               	movq	2624(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5544(%rsp)
-               	movq	%rax, 5552(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1312(%rcx)
-               	movq	2640(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5560(%rsp)
-               	movq	%rax, 5568(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1320(%rcx)
-               	movq	2656(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5576(%rsp)
-               	movq	%rax, 5584(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1328(%rcx)
-               	movq	2672(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5592(%rsp)
-               	movq	%rax, 5600(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1336(%rcx)
-               	movq	2688(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5608(%rsp)
-               	movq	%rax, 5616(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1344(%rcx)
-               	movq	2704(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5624(%rsp)
-               	movq	%rax, 5632(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1352(%rcx)
-               	movq	2720(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5640(%rsp)
-               	movq	%rax, 5648(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1360(%rcx)
-               	movq	2736(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5656(%rsp)
-               	movq	%rax, 5664(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1368(%rcx)
-               	movq	2752(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5672(%rsp)
-               	movq	%rax, 5680(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1376(%rcx)
-               	movq	2768(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5688(%rsp)
-               	movq	%rax, 5696(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1384(%rcx)
-               	movq	2784(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5704(%rsp)
-               	movq	%rax, 5712(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1392(%rcx)
-               	movq	2800(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5720(%rsp)
-               	movq	%rax, 5728(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1400(%rcx)
-               	movq	2816(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5736(%rsp)
-               	movq	%rax, 5744(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1408(%rcx)
-               	movq	2832(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5752(%rsp)
-               	movq	%rax, 5760(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1416(%rcx)
-               	movq	2848(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5768(%rsp)
-               	movq	%rax, 5776(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1424(%rcx)
-               	movq	2864(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5784(%rsp)
-               	movq	%rax, 5792(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1432(%rcx)
-               	movq	2880(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5800(%rsp)
-               	movq	%rax, 5808(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1440(%rcx)
-               	movq	2896(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5816(%rsp)
-               	movq	%rax, 5824(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1448(%rcx)
-               	movq	2912(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5832(%rsp)
-               	movq	%rax, 5840(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1456(%rcx)
-               	movq	2928(%rsp), %rax
-               	movq	2944(%rsp), %rcx
-               	movq	%rcx, 5848(%rsp)
-               	movq	%rax, 5856(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1464(%rcx)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5352(%rsp)
+               	movq	2432(%rsp), %rcx
+               	movq	%rcx, 5360(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1216(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5368(%rsp)
+               	movq	2448(%rsp), %rcx
+               	movq	%rcx, 5376(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1224(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5384(%rsp)
+               	movq	2464(%rsp), %rcx
+               	movq	%rcx, 5392(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1232(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5400(%rsp)
+               	movq	2480(%rsp), %rcx
+               	movq	%rcx, 5408(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1240(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5416(%rsp)
+               	movq	2496(%rsp), %rcx
+               	movq	%rcx, 5424(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1248(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5432(%rsp)
+               	movq	2512(%rsp), %rcx
+               	movq	%rcx, 5440(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1256(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5448(%rsp)
+               	movq	2528(%rsp), %rcx
+               	movq	%rcx, 5456(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1264(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5464(%rsp)
+               	movq	2544(%rsp), %rcx
+               	movq	%rcx, 5472(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1272(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5480(%rsp)
+               	movq	2560(%rsp), %rcx
+               	movq	%rcx, 5488(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1280(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5496(%rsp)
+               	movq	2576(%rsp), %rcx
+               	movq	%rcx, 5504(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1288(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5512(%rsp)
+               	movq	2592(%rsp), %rcx
+               	movq	%rcx, 5520(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1296(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5528(%rsp)
+               	movq	2608(%rsp), %rcx
+               	movq	%rcx, 5536(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1304(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5544(%rsp)
+               	movq	2624(%rsp), %rcx
+               	movq	%rcx, 5552(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1312(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5560(%rsp)
+               	movq	2640(%rsp), %rcx
+               	movq	%rcx, 5568(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1320(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5576(%rsp)
+               	movq	2656(%rsp), %rcx
+               	movq	%rcx, 5584(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1328(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5592(%rsp)
+               	movq	2672(%rsp), %rcx
+               	movq	%rcx, 5600(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1336(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5608(%rsp)
+               	movq	2688(%rsp), %rcx
+               	movq	%rcx, 5616(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1344(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5624(%rsp)
+               	movq	2704(%rsp), %rcx
+               	movq	%rcx, 5632(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1352(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5640(%rsp)
+               	movq	2720(%rsp), %rcx
+               	movq	%rcx, 5648(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1360(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5656(%rsp)
+               	movq	2736(%rsp), %rcx
+               	movq	%rcx, 5664(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1368(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5672(%rsp)
+               	movq	2752(%rsp), %rcx
+               	movq	%rcx, 5680(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1376(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5688(%rsp)
+               	movq	2768(%rsp), %rcx
+               	movq	%rcx, 5696(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1384(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5704(%rsp)
+               	movq	2784(%rsp), %rcx
+               	movq	%rcx, 5712(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1392(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5720(%rsp)
+               	movq	2800(%rsp), %rcx
+               	movq	%rcx, 5728(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1400(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5736(%rsp)
+               	movq	2816(%rsp), %rcx
+               	movq	%rcx, 5744(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1408(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5752(%rsp)
+               	movq	2832(%rsp), %rcx
+               	movq	%rcx, 5760(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1416(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5768(%rsp)
+               	movq	2848(%rsp), %rcx
+               	movq	%rcx, 5776(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1424(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5784(%rsp)
+               	movq	2864(%rsp), %rcx
+               	movq	%rcx, 5792(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1432(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5800(%rsp)
+               	movq	2880(%rsp), %rcx
+               	movq	%rcx, 5808(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1440(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5816(%rsp)
+               	movq	2896(%rsp), %rcx
+               	movq	%rcx, 5824(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1448(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5832(%rsp)
+               	movq	2912(%rsp), %rcx
+               	movq	%rcx, 5840(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1456(%rax)
+               	movq	2944(%rsp), %rax
+               	movq	%rax, 5848(%rsp)
+               	movq	2928(%rsp), %rcx
+               	movq	%rcx, 5856(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1464(%rax)

@@ -34154,11 +34327,12 @@
@@@[(3, 6), (8, 12)]@@@
-               	movq	%rcx, 10256(%rsp)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 10256(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)

@@ -35053,205 +35227,205 @@
@@@[(3, 387)]@@@
-               	movq	9736(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12656(%rsp)
-               	movq	%rax, 12664(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1216(%rcx)
-               	movq	9752(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12672(%rsp)
-               	movq	%rax, 12680(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1224(%rcx)
-               	movq	9768(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12688(%rsp)
-               	movq	%rax, 12696(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1232(%rcx)
-               	movq	9784(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12704(%rsp)
-               	movq	%rax, 12712(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1240(%rcx)
-               	movq	9800(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12720(%rsp)
-               	movq	%rax, 12728(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1248(%rcx)
-               	movq	9816(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12736(%rsp)
-               	movq	%rax, 12744(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1256(%rcx)
-               	movq	9832(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12752(%rsp)
-               	movq	%rax, 12760(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1264(%rcx)
-               	movq	9848(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12768(%rsp)
-               	movq	%rax, 12776(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1272(%rcx)
-               	movq	9864(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12784(%rsp)
-               	movq	%rax, 12792(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1280(%rcx)
-               	movq	9880(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12800(%rsp)
-               	movq	%rax, 12808(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1288(%rcx)
-               	movq	9896(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12816(%rsp)
-               	movq	%rax, 12824(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1296(%rcx)
-               	movq	9912(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12832(%rsp)
-               	movq	%rax, 12840(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1304(%rcx)
-               	movq	9928(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12848(%rsp)
-               	movq	%rax, 12856(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1312(%rcx)
-               	movq	9944(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12864(%rsp)
-               	movq	%rax, 12872(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1320(%rcx)
-               	movq	9960(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12880(%rsp)
-               	movq	%rax, 12888(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1328(%rcx)
-               	movq	9976(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12896(%rsp)
-               	movq	%rax, 12904(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1336(%rcx)
-               	movq	9992(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12912(%rsp)
-               	movq	%rax, 12920(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1344(%rcx)
-               	movq	10008(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12928(%rsp)
-               	movq	%rax, 12936(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1352(%rcx)
-               	movq	10024(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12944(%rsp)
-               	movq	%rax, 12952(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1360(%rcx)
-               	movq	10040(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12960(%rsp)
-               	movq	%rax, 12968(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1368(%rcx)
-               	movq	10056(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12976(%rsp)
-               	movq	%rax, 12984(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1376(%rcx)
-               	movq	10072(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 12992(%rsp)
-               	movq	%rax, 13000(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1384(%rcx)
-               	movq	10088(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13008(%rsp)
-               	movq	%rax, 13016(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1392(%rcx)
-               	movq	10104(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13024(%rsp)
-               	movq	%rax, 13032(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1400(%rcx)
-               	movq	10120(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13040(%rsp)
-               	movq	%rax, 13048(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1408(%rcx)
-               	movq	10136(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13056(%rsp)
-               	movq	%rax, 13064(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1416(%rcx)
-               	movq	10152(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13072(%rsp)
-               	movq	%rax, 13080(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1424(%rcx)
-               	movq	10168(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13088(%rsp)
-               	movq	%rax, 13096(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1432(%rcx)
-               	movq	10184(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13104(%rsp)
-               	movq	%rax, 13112(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1440(%rcx)
-               	movq	10200(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13120(%rsp)
-               	movq	%rax, 13128(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1448(%rcx)
-               	movq	10216(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13136(%rsp)
-               	movq	%rax, 13144(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1456(%rcx)
-               	movq	10232(%rsp), %rax
-               	movq	10248(%rsp), %rcx
-               	movq	%rcx, 13152(%rsp)
-               	movq	%rax, 13160(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 1464(%rcx)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12656(%rsp)
+               	movq	9736(%rsp), %rcx
+               	movq	%rcx, 12664(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1216(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12672(%rsp)
+               	movq	9752(%rsp), %rcx
+               	movq	%rcx, 12680(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1224(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12688(%rsp)
+               	movq	9768(%rsp), %rcx
+               	movq	%rcx, 12696(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1232(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12704(%rsp)
+               	movq	9784(%rsp), %rcx
+               	movq	%rcx, 12712(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1240(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12720(%rsp)
+               	movq	9800(%rsp), %rcx
+               	movq	%rcx, 12728(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1248(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12736(%rsp)
+               	movq	9816(%rsp), %rcx
+               	movq	%rcx, 12744(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1256(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12752(%rsp)
+               	movq	9832(%rsp), %rcx
+               	movq	%rcx, 12760(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1264(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12768(%rsp)
+               	movq	9848(%rsp), %rcx
+               	movq	%rcx, 12776(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1272(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12784(%rsp)
+               	movq	9864(%rsp), %rcx
+               	movq	%rcx, 12792(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1280(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12800(%rsp)
+               	movq	9880(%rsp), %rcx
+               	movq	%rcx, 12808(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1288(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12816(%rsp)
+               	movq	9896(%rsp), %rcx
+               	movq	%rcx, 12824(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1296(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12832(%rsp)
+               	movq	9912(%rsp), %rcx
+               	movq	%rcx, 12840(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1304(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12848(%rsp)
+               	movq	9928(%rsp), %rcx
+               	movq	%rcx, 12856(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1312(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12864(%rsp)
+               	movq	9944(%rsp), %rcx
+               	movq	%rcx, 12872(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1320(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12880(%rsp)
+               	movq	9960(%rsp), %rcx
+               	movq	%rcx, 12888(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1328(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12896(%rsp)
+               	movq	9976(%rsp), %rcx
+               	movq	%rcx, 12904(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1336(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12912(%rsp)
+               	movq	9992(%rsp), %rcx
+               	movq	%rcx, 12920(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1344(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12928(%rsp)
+               	movq	10008(%rsp), %rcx
+               	movq	%rcx, 12936(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1352(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12944(%rsp)
+               	movq	10024(%rsp), %rcx
+               	movq	%rcx, 12952(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1360(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12960(%rsp)
+               	movq	10040(%rsp), %rcx
+               	movq	%rcx, 12968(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1368(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12976(%rsp)
+               	movq	10056(%rsp), %rcx
+               	movq	%rcx, 12984(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1376(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 12992(%rsp)
+               	movq	10072(%rsp), %rcx
+               	movq	%rcx, 13000(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1384(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13008(%rsp)
+               	movq	10088(%rsp), %rcx
+               	movq	%rcx, 13016(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1392(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13024(%rsp)
+               	movq	10104(%rsp), %rcx
+               	movq	%rcx, 13032(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1400(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13040(%rsp)
+               	movq	10120(%rsp), %rcx
+               	movq	%rcx, 13048(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1408(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13056(%rsp)
+               	movq	10136(%rsp), %rcx
+               	movq	%rcx, 13064(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1416(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13072(%rsp)
+               	movq	10152(%rsp), %rcx
+               	movq	%rcx, 13080(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1424(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13088(%rsp)
+               	movq	10168(%rsp), %rcx
+               	movq	%rcx, 13096(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1432(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13104(%rsp)
+               	movq	10184(%rsp), %rcx
+               	movq	%rcx, 13112(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1440(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13120(%rsp)
+               	movq	10200(%rsp), %rcx
+               	movq	%rcx, 13128(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1448(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13136(%rsp)
+               	movq	10216(%rsp), %rcx
+               	movq	%rcx, 13144(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1456(%rax)
+               	movq	10248(%rsp), %rax
+               	movq	%rax, 13152(%rsp)
+               	movq	10232(%rsp), %rcx
+               	movq	%rcx, 13160(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 1464(%rax)

@@ -43009,19 +43183,19 @@
@@@[(17, 27)]@@@
-               	je	0x44357f <kfun:kotlin.text.regex.AbstractCharClass.Companion.CharClasses.$_init_$lambda$142$FUNCTION_REFERENCE$166.invoke#internal+0x9f>
-               	leaq	698409(%rip), %rdi      # 0x4edd9c <state_global$kotlin.text.CharCategory>
-               	leaq	-99882(%rip), %rsi      # 0x42af50 <kfun:kotlin.text.CharCategory.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	698146(%rip), %rax      # 0x4edca8 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	je	0x44384f <kfun:kotlin.text.regex.AbstractCharClass.Companion.CharClasses.$_init_$lambda$142$FUNCTION_REFERENCE$166.invoke#internal+0x9f>
+               	leaq	699609(%rip), %rdi      # 0x4ee51c <state_global$kotlin.text.CharCategory>
+               	leaq	-100010(%rip), %rsi     # 0x42b1a0 <kfun:kotlin.text.CharCategory.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	699346(%rip), %rax      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>

@@ -43212,64 +43386,68 @@
@@@[(17, 63), (65, 69), (73, 74), (77, 78), (79, 81)]@@@
-               	je	0x44390e <kfun:kotlin.text.regex.AbstractCharClass.Companion.CharClasses.$_init_$lambda$145$FUNCTION_REFERENCE$169.invoke#internal+0xae>
-               	leaq	697498(%rip), %rdi      # 0x4edd9c <state_global$kotlin.text.CharCategory>
-               	leaq	-100793(%rip), %rsi     # 0x42af50 <kfun:kotlin.text.CharCategory.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	697235(%rip), %rax      # 0x4edca8 <kvar:kotlin.text.CharCategory.$VALUES#internal>
-               	movq	48(%rax), %rcx
-               	movq	%rcx, 24(%rsp)
-               	movb	32(%rcx), %cl
-               	movq	216(%rax), %rdx
-               	movq	%rdx, 32(%rsp)
-               	movb	32(%rdx), %dl
-               	movq	72(%rax), %rsi
-               	movq	%rsi, 40(%rsp)
-               	movb	32(%rsi), %sil
-               	movq	24(%rax), %rdi
-               	movq	%rdi, 48(%rsp)
-               	movb	32(%rdi), %dil
-               	movq	176(%rax), %rax
-               	movq	%rax, 56(%rsp)
-               	movb	32(%rax), %r8b
-               	movq	697159(%rip), %rbp      # 0x4edca8 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	je	0x443bde <kfun:kotlin.text.regex.AbstractCharClass.Companion.CharClasses.$_init_$lambda$145$FUNCTION_REFERENCE$169.invoke#internal+0xae>
+               	leaq	698698(%rip), %rdi      # 0x4ee51c <state_global$kotlin.text.CharCategory>
+               	leaq	-100921(%rip), %rsi     # 0x42b1a0 <kfun:kotlin.text.CharCategory.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	698435(%rip), %rax      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	movq	48(%rax), %rax
+               	movq	%rax, 24(%rsp)
+               	movl	32(%rax), %ecx
+               	movq	698416(%rip), %rax      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	movq	216(%rax), %rax
+               	movq	%rax, 32(%rsp)
+               	movl	32(%rax), %r8d
+               	movq	698393(%rip), %rdx      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	movq	72(%rdx), %rdx
+               	movq	%rdx, 40(%rsp)
+               	movl	32(%rdx), %edx
+               	movq	698374(%rip), %rsi      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	movq	24(%rsi), %rsi
+               	movq	%rsi, 48(%rsp)
+               	movl	32(%rsi), %esi
+               	movq	698355(%rip), %rdi      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	movq	176(%rdi), %rdi
+               	movq	%rdi, 56(%rsp)
+               	movl	32(%rdi), %edi
+               	movq	698333(%rip), %rbp      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
@@@@
-               	movb	32(%rbp), %bl
-               	movq	697140(%rip), %rax      # 0x4edca8 <kvar:kotlin.text.CharCategory.$VALUES#internal>
+               	movl	32(%rbp), %ebx
+               	movq	698314(%rip), %rax      # 0x4ee428 <kvar:kotlin.text.CharCategory.$VALUES#internal>
@@@@
+               	btsl	%r8d, %ebp
@@@@
-               	btsl	%r8d, %ebp
@@@@
-               	movb	32(%rax), %al
+               	movl	32(%rax), %eax

@@ -43282,7 +43460,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -44237,40 +44415,42 @@
@@@[(20, 22), (23, 26), (34, 36), (40, 41)]@@@
-               	movslq	16(%rbx), %rcx
+               	movl	16(%rbx), %ecx
@@@@
-               	jbe	0x444ba5 <kfun:kotlin.text.regex.AbstractCharClass.Companion#getPredefinedClass(kotlin.String;kotlin.Boolean){}kotlin.text.regex.AbstractCharClass+0x1b5>
+               	jbe	0x444e9b <kfun:kotlin.text.regex.AbstractCharClass.Companion#getPredefinedClass(kotlin.String;kotlin.Boolean){}kotlin.text.regex.AbstractCharClass+0x1bb>
+               	movslq	%ecx, %rcx
@@@@
-               	movslq	16(%rbx), %rcx
+               	movl	16(%rbx), %ecx
@@@@
+               	movslq	%ecx, %rcx

@@ -44289,18 +44469,19 @@
@@@[(3, 5), (6, 9)]@@@
-               	movslq	16(%rbx), %rcx
+               	movl	16(%rbx), %ecx
@@@@
-               	jbe	0x444ba5 <kfun:kotlin.text.regex.AbstractCharClass.Companion#getPredefinedClass(kotlin.String;kotlin.Boolean){}kotlin.text.regex.AbstractCharClass+0x1b5>
+               	jbe	0x444e9b <kfun:kotlin.text.regex.AbstractCharClass.Companion#getPredefinedClass(kotlin.String;kotlin.Boolean){}kotlin.text.regex.AbstractCharClass+0x1bb>
+               	movslq	%ecx, %rcx

@@ -44333,24 +44514,24 @@
@@@[(22, 28)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	callq	0x421090 <ThrowNullPointerException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	callq	0x4212a0 <ThrowNullPointerException>
+               	nopl	(%rax,%rax)

@@ -44514,22 +44695,22 @@
@@@[(24, 30)]@@@
-               	callq	0x42ad80 <kfun:kotlin.text#<get-category>__at__kotlin.Char(){}kotlin.text.CharCategory>
-               	movl	32(%rax), %eax
-               	cmpl	36(%r15), %eax
+               	callq	0x42afd0 <kfun:kotlin.text#<get-category>__at__kotlin.Char(){}kotlin.text.CharCategory>
+               	movl	36(%r15), %ecx
+               	cmpl	%ecx, 32(%rax)

@@ -44596,34 +44777,34 @@
@@@[(13, 18), (19, 32), (33, 43), (48, 50)]@@@
-               	je	0x445015 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x45>
-               	movl	691643(%rip), %eax      # 0x4eddb4 <state_global$kotlin.text.regex.unixLT>
-               	leaq	691440(%rip), %rbp      # 0x4edcf0 <kvar:kotlin.text.regex.unixLT.$instance#internal>
+               	je	0x44530a <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x4a>
+               	movl	692811(%rip), %eax      # 0x4ee534 <state_global$kotlin.text.regex.unixLT>
@@@@
-               	je	0x44503a <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x6a>
-               	leaq	691624(%rip), %rdi      # 0x4eddb4 <state_global$kotlin.text.regex.unixLT>
-               	leaq	61(%rip), %rsi          # 0x445050 <kfun:kotlin.text.regex.unixLT.$init_global#internal>
-               	jmp	0x445035 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x65>
-               	movl	691613(%rip), %eax      # 0x4eddb8 <state_global$kotlin.text.regex.unicodeLT>
-               	leaq	691414(%rip), %rbp      # 0x4edcf8 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
+               	je	0x445301 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x41>
+               	leaq	692799(%rip), %rdi      # 0x4ee534 <state_global$kotlin.text.regex.unixLT>
+               	leaq	68(%rip), %rsi          # 0x445340 <kfun:kotlin.text.regex.unixLT.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	692584(%rip), %rax      # 0x4ee470 <kvar:kotlin.text.regex.unixLT.$instance#internal>
+               	jmp	0x44532f <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x6f>
+               	movl	692776(%rip), %eax      # 0x4ee538 <state_global$kotlin.text.regex.unicodeLT>
@@@@
-               	je	0x44503a <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x6a>
-               	leaq	691594(%rip), %rdi      # 0x4eddb8 <state_global$kotlin.text.regex.unicodeLT>
-               	leaq	443(%rip), %rsi         # 0x4451f0 <kfun:kotlin.text.regex.unicodeLT.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	(%rbp), %rax
+               	je	0x445328 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator+0x68>
+               	leaq	692764(%rip), %rdi      # 0x4ee538 <state_global$kotlin.text.regex.unicodeLT>
+               	leaq	461(%rip), %rsi         # 0x4454f0 <kfun:kotlin.text.regex.unicodeLT.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	692553(%rip), %rax      # 0x4ee478 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
@@@@
-               	nopl	(%rax,%rax)
+               	nopl	(%rax)

@@ -44639,49 +44820,50 @@
@@@[(13, 17), (18, 31), (36, 38)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rsi
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
@@@@
-               	leaq	519760(%rip), %rcx      # 0x4c3f20 <ktypeglobal:kotlin.text.regex.unixLT#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%rsi, 24(%rsp)
-               	movq	%rsi, 691216(%rip)      # 0x4edcf0 <kvar:kotlin.text.regex.unixLT.$instance#internal>
-               	leaq	691209(%rip), %rdi      # 0x4edcf0 <kvar:kotlin.text.regex.unixLT.$instance#internal>
-               	callq	0x468020 <InitAndRegisterGlobal>
+               	leaq	520928(%rip), %rdx      # 0x4c46a0 <ktypeglobal:kotlin.text.regex.unixLT#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 692384(%rip)      # 0x4ee470 <kvar:kotlin.text.regex.unixLT.$instance#internal>
+               	leaq	692377(%rip), %rdi      # 0x4ee470 <kvar:kotlin.text.regex.unixLT.$instance#internal>
+               	movq	692370(%rip), %rsi      # 0x4ee470 <kvar:kotlin.text.regex.unixLT.$instance#internal>
+               	callq	0x468bc0 <InitAndRegisterGlobal>
@@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -44751,28 +44933,29 @@
@@@[(13, 17), (18, 31), (36, 38)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rsi
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
@@@@
-               	leaq	519520(%rip), %rcx      # 0x4c3fd0 <ktypeglobal:kotlin.text.regex.unicodeLT#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%rsi, 24(%rsp)
-               	movq	%rsi, 690808(%rip)      # 0x4edcf8 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
-               	leaq	690801(%rip), %rdi      # 0x4edcf8 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
-               	callq	0x468020 <InitAndRegisterGlobal>
+               	leaq	520672(%rip), %rdx      # 0x4c4750 <ktypeglobal:kotlin.text.regex.unicodeLT#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 691960(%rip)      # 0x4ee478 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
+               	leaq	691953(%rip), %rdi      # 0x4ee478 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
+               	movq	691946(%rip), %rsi      # 0x4ee478 <kvar:kotlin.text.regex.unicodeLT.$instance#internal>
+               	callq	0x468bc0 <InitAndRegisterGlobal>
@@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -45145,19 +45328,20 @@
@@@[(16, 17), (18, 20)]@@@
-               	movaps	%xmm0, (%rsp)
@@@@
+               	movaps	%xmm0, (%rsp)
+               	movq	288(%r14), %rax

@@ -45220,18 +45404,18 @@
@@@[(17, 21)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nop

@@ -46564,72 +46748,107 @@
@@@[(8, 9), (16, 20), (22, 24), (29, 35), (45, 63), (79, 132), (133, 137), (138, 139), (140, 142)]@@@
+               	pushq	%r14
@@@@
-               	movq	-64(%rax), %rbx
-               	movq	288(%rbx), %rax
+               	movq	-64(%rax), %r14
+               	movq	288(%r14), %rax
@@@@
-               	movq	%rax, 288(%rbx)
+               	movq	%rax, 288(%r14)
@@@@
-               	je	0x446d38 <kfun:kotlin.text.regex.Lexer.$init_global#internal+0x58>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	296(%rbx), %rdi
+               	je	0x44704a <kfun:kotlin.text.regex.Lexer.$init_global#internal+0x5a>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rcx, 683936(%rip)      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	leaq	683929(%rip), %rdi      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	movaps	269682(%rip), %xmm0     # 0x488af0 <_IO_stdin_used+0xf0>
-               	movups	%xmm0, 200(%rax)
-               	movaps	269684(%rip), %xmm0     # 0x488b00 <_IO_stdin_used+0x100>
-               	movups	%xmm0, 216(%rax)
-               	movaps	269686(%rip), %xmm0     # 0x488b10 <_IO_stdin_used+0x110>
+               	movq	%rcx, 685070(%rip)      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	leaq	685063(%rip), %rdi      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movq	685056(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movaps	273753(%rip), %xmm0     # 0x489df0 <_IO_stdin_used+0xf0>
+               	movups	%xmm0, 180(%rax)
+               	movaps	273755(%rip), %xmm0     # 0x489e00 <_IO_stdin_used+0x100>
+               	movups	%xmm0, 196(%rax)
+               	movl	$588, 212(%rax)         # imm = 0x24C
+               	movaps	273747(%rip), %xmm0     # 0x489e10 <_IO_stdin_used+0x110>
+               	movups	%xmm0, 8(%rax)
+               	movaps	273752(%rip), %xmm0     # 0x489e20 <_IO_stdin_used+0x120>
@@@@
-               	movaps	269716(%rip), %xmm0     # 0x488b70 <_IO_stdin_used+0x170>
-               	movups	%xmm0, 120(%rax)
-               	movaps	269721(%rip), %xmm0     # 0x488b80 <_IO_stdin_used+0x180>
-               	movups	%xmm0, 136(%rax)
-               	movaps	269723(%rip), %xmm0     # 0x488b90 <_IO_stdin_used+0x190>
-               	movups	%xmm0, 152(%rax)
-               	movaps	269725(%rip), %xmm0     # 0x488ba0 <_IO_stdin_used+0x1a0>
-               	movups	%xmm0, 168(%rax)
-               	movaps	269727(%rip), %xmm0     # 0x488bb0 <_IO_stdin_used+0x1b0>
-               	movups	%xmm0, 184(%rax)
-               	movq	683761(%rip), %rsi      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	callq	0x468020 <InitAndRegisterGlobal>
+               	movl	$2147483648, 120(%rax)  # imm = 0x80000000
+               	movl	112(%rax), %ecx
+               	movl	%ecx, %edx
+               	orl	$42, %edx
+               	movl	%edx, 124(%rax)
+               	movl	120(%rax), %edx
+               	movl	%edx, %esi
+               	orl	$42, %esi
+               	movl	%esi, 128(%rax)
+               	movl	116(%rax), %ebx
+               	movl	%ebx, %esi
+               	orl	$42, %esi
+               	movl	%esi, 132(%rax)
+               	movl	%ecx, %esi
+               	orl	$43, %esi
+               	movl	%esi, 136(%rax)
+               	movl	%edx, %esi
+               	orl	$43, %esi
+               	movl	%esi, 140(%rax)
+               	movl	%ebx, %esi
+               	orl	$43, %esi
+               	movl	%esi, 144(%rax)
+               	movl	%ecx, %esi
+               	orl	$63, %esi
+               	movl	%esi, 148(%rax)
+               	movl	%edx, %esi
+               	orl	$63, %esi
+               	movl	%esi, 152(%rax)
+               	movl	%ebx, %esi
+               	orl	$63, %esi
+               	movl	%esi, 156(%rax)
+               	orl	$123, %ecx
+               	movl	%ecx, 160(%rax)
+               	orl	$123, %edx
+               	movl	%edx, 164(%rax)
+               	orl	$123, %ebx
+               	movl	%ebx, 168(%rax)
+               	movabsq	$12884901892, %rcx      # imm = 0x300000004
+               	movq	%rcx, 172(%rax)
+               	movq	684778(%rip), %rsi      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	callq	0x468bc0 <InitAndRegisterGlobal>
@@@@
-               	movq	%rax, 288(%rbx)
-               	addq	$32, %rsp
+               	movq	%rax, 288(%r14)
+               	addq	$40, %rsp
@@@@
+               	popq	%r14
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nop

@@ -46684,54 +46903,55 @@
@@@[(15, 18), (20, 34), (35, 47)]@@@
-               	movq	%rcx, 96(%rsp)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 96(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 112(%rsp)
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 120(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 128(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 136(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	56(%rsp), %rax
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 112(%rsp)
-               	movq	%rax, 120(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	72(%rsp), %rax
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 128(%rsp)
-               	movq	%rax, 136(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)

@@ -46753,30 +46973,31 @@
@@@[(3, 6), (8, 22), (23, 35)]@@@
-               	movq	%rcx, 240(%rsp)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 240(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 256(%rsp)
+               	movq	200(%rsp), %rcx
+               	movq	%rcx, 264(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 272(%rsp)
+               	movq	216(%rsp), %rcx
+               	movq	%rcx, 280(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	200(%rsp), %rax
-               	movq	232(%rsp), %rcx
-               	movq	%rcx, 256(%rsp)
-               	movq	%rax, 264(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	216(%rsp), %rax
-               	movq	232(%rsp), %rcx
-               	movq	%rcx, 272(%rsp)
-               	movq	%rax, 280(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)

@@ -46784,24 +47005,23 @@
@@@[(3, 4), (20, 30)]@@@
-               	nopw	%cs:(%rax,%rax)
@@@@
-               	jne	0x4471bf <kfun:kotlin.text.regex.Lexer#isEmpty(){}kotlin.Boolean+0x2f>
-               	movl	72(%rbx), %eax
-               	movq	16(%rbx), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x4471c7 <kfun:kotlin.text.regex.Lexer#isEmpty(){}kotlin.Boolean+0x37>
+               	jne	0x44753f <kfun:kotlin.text.regex.Lexer#isEmpty(){}kotlin.Boolean+0x2f>
+               	movq	16(%rbx), %rax
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%rbx)
+               	jge	0x447547 <kfun:kotlin.text.regex.Lexer#isEmpty(){}kotlin.Boolean+0x37>

@@ -46943,78 +47163,79 @@
@@@[(3, 13), (21, 30), (33, 34), (76, 78), (79, 90)]@@@
-               	jne	0x447526 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x1e6>
-               	movl	56(%rbx), %eax
-               	movq	682266(%rip), %rcx      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
-               	testl	%eax, 16(%rcx)
-               	je	0x447526 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x1e6>
+               	jne	0x4478aa <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x1ea>
+               	movq	683293(%rip), %rax      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movl	16(%rax), %eax
+               	testl	%eax, 56(%rbx)
+               	je	0x4478aa <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x1ea>
@@@@
-               	je	0x44743f <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0xff>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	72(%rbx), %eax
-               	jmp	0x447459 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x119>
-               	nopw	(%rax,%rax)
+               	je	0x4477d9 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x119>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	jmp	0x4477d9 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x119>
+               	nopl	(%rax,%rax)
@@@@
+               	movl	72(%rbx), %eax
@@@@
+               	movl	72(%rbx), %ecx
+               	movslq	%ecx, %rax
@@@@
-               	jge	0x447430 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0xf0>
-               	movq	16(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x447540 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x200>
-               	cltq
-               	movzwl	16(%rcx,%rax,2), %eax
+               	jge	0x4477b0 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0xf0>
+               	movq	16(%rbx), %rdx
+               	cmpl	%ecx, 8(%rdx)
+               	jbe	0x4478c4 <kfun:kotlin.text.regex.Lexer.nextIndex#internal+0x204>
+               	movzwl	16(%rdx,%rax,2), %eax

@@ -47024,45 +47245,46 @@
@@@[(3, 7), (28, 32), (47, 58)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)
@@@@
-               	movzwl	16(%rbp,%rax,2), %ebp
-               	movl	%ebp, %eax
+               	movzwl	16(%rbp,%rax,2), %eax
+               	movzwl	%ax, %ebp
@@@@
-               	movzwl	16(%rcx,%rax,2), %r14d
-               	movl	%r14d, %eax
-               	andl	$64512, %eax            # imm = 0xFC00
-               	cmpl	$56320, %eax            # imm = 0xDC00
-               	jne	0x4475e0 <kfun:kotlin.text.regex.Lexer.nextCodePoint#internal+0x90>
+               	movzwl	16(%rcx,%rax,2), %eax
+               	movl	%eax, %ecx
+               	andl	$64512, %ecx            # imm = 0xFC00
+               	cmpl	$56320, %ecx            # imm = 0xDC00
+               	jne	0x447965 <kfun:kotlin.text.regex.Lexer.nextCodePoint#internal+0x95>
+               	movzwl	%ax, %r14d

@@ -47074,8 +47296,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	%cs:(%rax,%rax)

@@ -47097,54 +47319,55 @@
@@@[(3, 9), (10, 19), (20, 23), (25, 27), (28, 30), (32, 37), (48, 56), (57, 61)]@@@
-               	movabsq	$30064771072, %rax      # imm = 0x700000000
-               	movq	%rax, 112(%rsp)
-               	movb	686547(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movabsq	$30064771072, %r13      # imm = 0x700000000
+               	movq	%r13, 112(%rsp)
+               	movb	687563(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x44766e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x7e>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	48(%rbx), %rax
-               	movq	64(%rbx), %rcx
-               	movq	%rcx, 60(%rbx)
+               	je	0x4479fe <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x7e>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	64(%rbx), %eax
+               	movl	%eax, 60(%rbx)
@@@@
+               	movl	68(%rbx), %eax
+               	movl	%eax, 64(%rbx)
+               	movq	48(%rbx), %rax
@@@@
+               	movl	84(%rbx), %eax
+               	movl	%eax, 80(%rbx)
@@@@
-               	movl	84(%rbx), %ecx
-               	movl	%ecx, 80(%rbx)
@@@@
-               	movl	$4227922944, %r13d      # imm = 0xFC00FC00
-               	jmp	0x4476cc <kfun:kotlin.text.regex.Lexer.movePointer#internal+0xdc>
-               	nopl	(%rax,%rax)
+               	jmp	0x447a5c <kfun:kotlin.text.regex.Lexer.movePointer#internal+0xdc>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	je	0x4476dc <kfun:kotlin.text.regex.Lexer.movePointer#internal+0xec>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	72(%rbx), %ecx
-               	movq	16(%rbx), %rdx
+               	je	0x447a6c <kfun:kotlin.text.regex.Lexer.movePointer#internal+0xec>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	16(%rbx), %rax
+               	movl	8(%rax), %ecx
@@@@
-               	cmpl	8(%rdx), %ecx
-               	jge	0x4476f2 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x102>
+               	cmpl	%ecx, 72(%rbx)
+               	jge	0x447a82 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x102>

@@ -47163,40 +47386,41 @@
@@@[(3, 13), (23, 24), (25, 27)]@@@
-               	jne	0x44780a <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x21a>
-               	movl	72(%rbx), %eax
-               	movq	16(%rbx), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x4477f5 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x205>
+               	jne	0x447b9e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x21e>
+               	movq	16(%rbx), %rax
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%rbx)
+               	jge	0x447b89 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x209>
@@@@
+               	movzwl	%ax, %eax
@@@@
-               	cmpl	$69, %eax
+               	cmpw	$69, %ax

@@ -47219,158 +47443,160 @@
@@@[(3, 6), (7, 9), (10, 14), (15, 21), (22, 24), (25, 29), (68, 72), (73, 79), (80, 83), (110, 117), (141, 143), (144, 147), (174, 179), (227, 230)]@@@
-               	movabsq	$30064771072, %rax      # imm = 0x700000000
-               	movq	%rax, 48(%rsp)
+               	movq	%r13, 48(%rsp)
@@@@
-               	andl	%r13d, %eax
+               	andl	$4227922944, %eax       # imm = 0xFC00FC00
@@@@
-               	je	0x447b00 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x510>
-               	movzwl	(%r12), %eax
+               	je	0x447e99 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x519>
+               	movl	(%r12), %eax
@@@@
-               	je	0x4476b0 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0xc0>
-               	jmp	0x44790d <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x31d>
-               	nop
+               	je	0x447a40 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0xc0>
+               	jmp	0x447c9e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x31e>
+               	nopl	(%rax)
@@@@
-               	andl	%r13d, %eax
+               	andl	$4227922944, %eax       # imm = 0xFC00FC00
@@@@
-               	je	0x447b0c <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x51c>
-               	movzwl	(%r12), %eax
+               	je	0x447ea5 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x525>
+               	movl	(%r12), %eax
@@@@
-               	movl	72(%rbx), %eax
-               	movq	16(%rbx), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x447991 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x3a1>
@@@@
-               	movslq	72(%rbx), %rcx
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%rbx)
+               	jge	0x447d24 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x3a4>
+               	movq	16(%rbx), %rax
+               	movl	72(%rbx), %ecx
@@@@
-               	jbe	0x447d8d <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x79d>
+               	jbe	0x44812f <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x7af>
+               	movslq	%ecx, %rcx
@@@@
-               	orl	%eax, (%r12)
-               	jmp	0x447b00 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x510>
-               	movq	680805(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	orl	(%r12), %eax
+               	movl	%eax, (%r12)
+               	jmp	0x447e99 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x519>
+               	movq	681806(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movslq	72(%rbx), %rcx
+               	movl	72(%rbx), %ecx
@@@@
-               	jbe	0x447d8d <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x79d>
+               	jbe	0x44812f <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x7af>
+               	movslq	%ecx, %rcx
@@@@
-               	movl	%eax, 68(%rbx)
-               	jmp	0x447af8 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x508>
-               	movq	680612(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	jmp	0x447e8e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x50e>
+               	movq	681614(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	orl	%eax, 68(%rbx)
+               	orl	68(%rbx), %eax
+               	movl	%eax, 68(%rbx)

@@ -47383,29 +47609,27 @@
@@@[(6, 9), (13, 15), (16, 19), (29, 34), (35, 38)]@@@
-               	movl	%eax, 68(%rbx)
-               	jmp	0x447af8 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x508>
+               	jmp	0x447e8e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x50e>
@@@@
-               	movslq	72(%rbx), %rcx
+               	movl	72(%rbx), %ecx
@@@@
-               	jbe	0x447d8d <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x79d>
+               	jbe	0x44812f <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x7af>
+               	movslq	%ecx, %rcx
@@@@
-               	movl	%eax, 68(%rbx)
-               	jmp	0x447af8 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x508>
-               	movq	680332(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	jmp	0x447e8e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x50e>
+               	movq	681335(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movl	%eax, 68(%rbx)
-               	jmp	0x447af8 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x508>
+               	jmp	0x447e8e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x50e>

@@ -47416,122 +47640,127 @@
@@@[(3, 15), (16, 28), (34, 36), (37, 40), (49, 57), (83, 87), (88, 94), (100, 104), (106, 117), (120, 129), (130, 145), (146, 149)]@@@
-               	movl	56(%rbx), %ebp
-               	movb	$1, %r13b
-               	leaq	266981(%rip), %r14      # 0x488ecc <_IO_stdin_used+0x4cc>
-               	jmp	0x447bf6 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x606>
-               	orl	%eax, %ebp
-               	movb	$1, %r13b
+               	movl	56(%rbx), %r13d
+               	movb	$1, %bpl
+               	leaq	270850(%rip), %r14      # 0x48a17c <_IO_stdin_used+0x47c>
+               	jmp	0x447f8a <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x60a>
+               	orl	%eax, %r13d
+               	movb	$1, %bpl
@@@@
-               	callq	0x447340 <kfun:kotlin.text.regex.Lexer.nextIndex#internal>
-               	movl	72(%rbx), %eax
-               	movq	16(%rbx), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x447e0e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x81e>
-               	movzbl	685099(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	callq	0x4476c0 <kfun:kotlin.text.regex.Lexer.nextIndex#internal>
+               	movq	16(%rbx), %rax
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%rbx)
+               	jge	0x4481b0 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x830>
+               	movzbl	686111(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	movslq	72(%rbx), %rcx
+               	movl	72(%rbx), %ecx
@@@@
-               	jbe	0x447d8d <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x79d>
+               	jbe	0x44812f <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x7af>
+               	movslq	%ecx, %rcx
@@@@
-               	testb	$1, %r13b
-               	jne	0x447ca4 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x6b4>
-               	jmp	0x447e4f <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x85f>
-               	movq	680145(%rip), %rax      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	testb	$1, %bpl
+               	jne	0x44803b <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x6bb>
+               	jmp	0x4481f1 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x871>
+               	movq	681147(%rip), %rax      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
@@@@
-               	testb	$1, %r13b
-               	jne	0x447be9 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x5f9>
+               	testb	$1, %bpl
+               	jne	0x447f7c <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x5fc>
@@@@
-               	andl	%eax, %ebp
-               	xorl	%r13d, %r13d
-               	jmp	0x447bee <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x5fe>
+               	andl	%eax, %r13d
+               	xorl	%ebp, %ebp
+               	jmp	0x447f82 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x602>
@@@@
-               	callq	0x447340 <kfun:kotlin.text.regex.Lexer.nextIndex#internal>
-               	orl	$256, %ebp              # imm = 0x100
+               	callq	0x4476c0 <kfun:kotlin.text.regex.Lexer.nextIndex#internal>
+               	orl	$256, %r13d             # imm = 0x100
@@@@
-               	movl	%ebp, (%r12)
-               	cmpl	$256, %ebp              # imm = 0x100
-               	jl	0x447cfe <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x70e>
-               	movzbl	%bpl, %eax
+               	movl	%r13d, (%r12)
+               	movl	(%r12), %eax
+               	cmpl	$256, %eax              # imm = 0x100
+               	jl	0x4480a0 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x720>
+               	movzbl	%al, %eax
+               	movl	%eax, 68(%rbx)
+               	movl	68(%rbx), %eax
@@@@
-               	movq	679965(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	orl	76(%rcx), %eax
+               	movq	680958(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	68(%rbx), %ecx
+               	orl	76(%rax), %ecx
+               	movl	%ecx, 68(%rbx)
+               	jmp	0x447e99 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x519>
+               	movl	%eax, 56(%rbx)
+               	shll	$16, %eax
@@@@
-               	jmp	0x447b00 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x510>
-               	movl	%ebp, 56(%rbx)
-               	shll	$16, %ebp
-               	movl	%ebp, 68(%rbx)
-               	movq	679938(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	orl	52(%rax), %ebp
-               	movl	%ebp, 68(%rbx)
-               	jmp	0x447b00 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x510>
-               	movq	679920(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movq	680928(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	68(%rbx), %ecx
+               	orl	52(%rax), %ecx
+               	movl	%ecx, 68(%rbx)
+               	jmp	0x447e99 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x519>
+               	movq	680907(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movl	%eax, 68(%rbx)
-               	jmp	0x447af8 <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x508>
+               	jmp	0x447e8e <kfun:kotlin.text.regex.Lexer.movePointer#internal+0x50e>

@@ -47624,69 +47853,70 @@
@@@[(28, 31)]@@@
-               	movl	%ebx, 68(%r14)
+               	movzwl	%bx, %eax
+               	movl	%eax, 68(%r14)

@@ -47694,99 +47924,113 @@
@@@[(3, 22), (111, 114)]@@@
-               	je	0x448415 <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x505>
-               	orb	$-128, 71(%r14)
-               	jmp	0x448415 <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x505>
+               	je	0x448470 <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x1c0>
+               	movl	68(%r14), %eax
+               	orl	$2147483648, %eax       # imm = 0x80000000
+               	movl	%eax, 68(%r14)
+               	xorl	%r12d, %r12d
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%r13)
+               	movl	%r12d, %eax
+               	addq	$200, %rsp
+               	popq	%rbx
+               	popq	%r12
+               	popq	%r13
+               	popq	%r14
+               	popq	%r15
+               	popq	%rbp
+               	retq
@@@@
-               	jmp	0x44840c <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x4fc>
+               	callq	0x449790 <kfun:kotlin.text.regex.Lexer.readHex#internal>
+               	jmp	0x44846c <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x1bc>

@@ -47799,21 +48043,22 @@
@@@[(15, 17), (18, 21)]@@@
-               	movslq	72(%r14), %rcx
+               	movl	72(%r14), %ecx
@@@@
-               	jbe	0x4484ee <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x5de>
+               	jbe	0x4488a0 <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x5f0>
+               	movslq	%ecx, %rcx

@@ -47822,85 +48067,74 @@
@@@[(23, 25), (26, 29), (82, 98)]@@@
-               	movslq	72(%r14), %rcx
+               	movl	72(%r14), %ecx
@@@@
-               	jbe	0x4484ee <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x5de>
+               	jbe	0x4488a0 <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x5f0>
+               	movslq	%ecx, %rcx
@@@@
-               	callq	0x449410 <kfun:kotlin.text.regex.Lexer.readHex#internal>
-               	movl	%eax, 68(%r14)
-               	xorl	%r12d, %r12d
-               	movq	72(%rsp), %rax
-               	movq	%rax, 288(%r13)
-               	movl	%r12d, %eax
-               	addq	$200, %rsp
-               	popq	%rbx
-               	popq	%r12
-               	popq	%r13
-               	popq	%r14
-               	popq	%r15
-               	popq	%rbp
-               	retq
+               	callq	0x449790 <kfun:kotlin.text.regex.Lexer.readHex#internal>
+               	jmp	0x44846c <kfun:kotlin.text.regex.Lexer.processEscapedChar#internal+0x1bc>

@@ -48023,22 +48257,21 @@
@@@[(20, 23)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nop
+               	callq	0x47ef60 <ThrowException>

@@ -48073,42 +48306,39 @@
@@@[(13, 23), (32, 35), (37, 38), (39, 42)]@@@
-               	callq	0x42f320 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
-               	movl	72(%r13), %eax
-               	movq	16(%r13), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x448c92 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x572>
+               	callq	0x42f5b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
+               	movq	16(%r13), %rax
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%r13)
+               	jge	0x44902f <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x55f>
@@@@
-               	leaq	16(,%rax,2), %rax
-               	addq	%rbp, %rax
+               	movzwl	16(%rbp,%rax,2), %r12d
@@@@
-               	movzwl	(%rax), %r12d
@@@@
-               	je	0x448963 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x243>
-               	nopw	%cs:(%rax,%rax)
+               	je	0x448cfd <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x22d>

@@ -48123,45 +48353,43 @@
@@@[(30, 40), (48, 52)]@@@
-               	callq	0x42f570 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
-               	movl	72(%r13), %eax
-               	movq	16(%r13), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x448b53 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x433>
+               	callq	0x42f800 <kfun:kotlin.text.StringBuilder#append(kotlin.Char){}kotlin.text.StringBuilder>
+               	movq	16(%r13), %rax
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%r13)
+               	jge	0x448ef0 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x420>
@@@@
-               	leaq	(%rbx,%rax,2), %rax
-               	addq	$16, %rax
-               	movzwl	(%rax), %r12d
+               	movzwl	16(%rbx,%rax,2), %r12d

@@ -48176,84 +48404,85 @@
@@@[(25, 31), (32, 38), (39, 42), (75, 85)]@@@
-               	jl	0x448a63 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x343>
-               	movl	72(%r13), %eax
-               	movq	16(%r13), %rcx
-               	cmpl	8(%rcx), %eax
-               	jge	0x448abb <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x39b>
+               	jl	0x448e00 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x330>
@@@@
-               	movslq	72(%r13), %rcx
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%r13)
+               	jge	0x448e58 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x388>
+               	movq	16(%r13), %rax
+               	movl	72(%r13), %ecx
@@@@
-               	jbe	0x448b4e <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x42e>
+               	jbe	0x448eeb <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x41b>
+               	movslq	%ecx, %rcx
@@@@
-               	movl	72(%r13), %eax
-               	movq	16(%r13), %rcx
-               	cmpl	8(%rcx), %eax
-               	jl	0x448a21 <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x301>
-               	movq	676430(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movq	16(%r13), %rax
+               	movl	8(%rax), %eax
+               	cmpl	%eax, 72(%r13)
+               	jl	0x448dbb <kfun:kotlin.text.regex.Lexer.processQuantifier#internal+0x2eb>
+               	movq	677425(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>

@@ -48474,23 +48703,23 @@
@@@[(21, 25)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nop

@@ -48520,88 +48749,84 @@
@@@[(22, 24), (25, 28), (44, 47), (48, 51), (80, 85)]@@@
-               	movslq	72(%rbx), %rax
+               	movl	72(%rbx), %eax
@@@@
-               	jbe	0x4492cc <kfun:kotlin.text.regex.Lexer.parseCharClassName#internal+0x30c>
+               	jbe	0x449643 <kfun:kotlin.text.regex.Lexer.parseCharClassName#internal+0x2f3>
+               	cltq
@@@@
-               	leaq	16(,%rax,2), %rax
-               	addq	%rbp, %rax
+               	movzwl	16(%rbp,%rax,2), %ebp
@@@@
-               	nopw	%cs:(%rax,%rax)
-               	nop
-               	movzwl	(%rax), %ebp
@@@@
-               	leaq	16(,%rax,2), %rax
-               	addq	%rbp, %rax
-               	jmp	0x4490e0 <kfun:kotlin.text.regex.Lexer.parseCharClassName#internal+0x120>
+               	movzwl	16(%rbp,%rax,2), %ebp
+               	jmp	0x449460 <kfun:kotlin.text.regex.Lexer.parseCharClassName#internal+0x110>

@@ -48732,11 +48957,12 @@
@@@[(10, 13)]@@@
-               	callq	0x421230 <ThrowClassCastException>
+               	callq	0x421440 <ThrowClassCastException>
+               	nopw	(%rax,%rax)

@@ -49235,54 +49461,55 @@
@@@[(15, 18), (20, 34), (35, 47)]@@@
-               	movq	%rcx, 96(%rsp)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 96(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 112(%rsp)
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 120(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 128(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 136(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	56(%rsp), %rax
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 112(%rsp)
-               	movq	%rax, 120(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	72(%rsp), %rax
-               	movq	88(%rsp), %rcx
-               	movq	%rcx, 128(%rsp)
-               	movq	%rax, 136(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)

@@ -49304,30 +49531,31 @@
@@@[(3, 6), (8, 22), (23, 35)]@@@
-               	movq	%rcx, 240(%rsp)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 240(%rsp)
@@@@
-               	movq	16(%rax), %rdx
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 256(%rsp)
+               	movq	200(%rsp), %rcx
+               	movq	%rcx, 264(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
+               	movq	232(%rsp), %rax
+               	movq	%rax, 272(%rsp)
+               	movq	216(%rsp), %rcx
+               	movq	%rcx, 280(%rsp)
+               	movq	(%rax), %rdx
@@@@
-               	movq	200(%rsp), %rax
-               	movq	232(%rsp), %rcx
-               	movq	%rcx, 256(%rsp)
-               	movq	%rax, 264(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
-               	movq	216(%rsp), %rax
-               	movq	232(%rsp), %rcx
-               	movq	%rcx, 272(%rsp)
-               	movq	%rax, 280(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 32(%rcx)

@@ -49335,7 +49563,6 @@
@@@[(3, 4)]@@@
-               	nopw	%cs:(%rax,%rax)

@@ -49345,8 +49572,8 @@
@@@[(3, 7)]@@@
-               	movq	%rdx, %rbx
-               	movq	%rsi, %r15
+               	movq	%rdx, %r15
+               	movq	%rsi, %rbx

@@ -49361,94 +49588,96 @@
@@@[(6, 17), (31, 36), (58, 64)]@@@
-               	je	0x449f96 <kfun:kotlin.text.regex.MatchResultImpl#<init>(kotlin.CharSequence;kotlin.text.Regex){}+0x76>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	%r15, 8(%r14)
-               	movq	%rbx, 16(%r14)
-               	movq	8(%rbx), %rax
+               	je	0x44a316 <kfun:kotlin.text.regex.MatchResultImpl#<init>(kotlin.CharSequence;kotlin.text.Regex){}+0x76>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	%rbx, 8(%r14)
+               	movq	%r15, 16(%r14)
+               	movq	16(%r14), %rax
+               	movq	8(%rax), %rax
@@@@
-               	movl	44(%rax), %r15d
-               	movl	%r15d, 80(%r14)
+               	movl	44(%rax), %eax
+               	movl	%eax, 80(%r14)
+               	movl	80(%r14), %r15d
@@@@
-               	je	0x44a062 <kfun:kotlin.text.regex.MatchResultImpl#<init>(kotlin.CharSequence;kotlin.text.Regex){}+0x142>
-               	nop
-               	movzbl	675841(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	je	0x44a3f2 <kfun:kotlin.text.regex.MatchResultImpl#<init>(kotlin.CharSequence;kotlin.text.Regex){}+0x152>
+               	nopw	(%rax,%rax)
+               	movzbl	676857(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -49718,24 +49947,24 @@
@@@[(3, 15)]@@@
-               	je	0x44a581 <kfun:kotlin.text.regex.MatchResultImpl.MatchResultState.equals#internal+0xb1>
-               	movl	32(%r14), %eax
-               	cmpl	32(%rbx), %eax
-               	jne	0x44a581 <kfun:kotlin.text.regex.MatchResultImpl.MatchResultState.equals#internal+0xb1>
-               	movl	36(%r14), %eax
-               	cmpl	36(%rbx), %eax
+               	je	0x44a911 <kfun:kotlin.text.regex.MatchResultImpl.MatchResultState.equals#internal+0xb1>
+               	movl	32(%rbx), %eax
+               	cmpl	%eax, 32(%r14)
+               	jne	0x44a911 <kfun:kotlin.text.regex.MatchResultImpl.MatchResultState.equals#internal+0xb1>
+               	movl	36(%rbx), %eax
+               	cmpl	%eax, 36(%r14)

@@ -49933,14 +50162,14 @@
@@@[(6, 9), (10, 11)]@@@
-               	jmp	0x44a88a <kfun:kotlin.text.regex.MatchResultImpl#next(){}kotlin.text.MatchResult?+0xfa>
-               	movq	8(%r15), %rsi
+               	jmp	0x44ac1a <kfun:kotlin.text.regex.MatchResultImpl#next(){}kotlin.text.MatchResult?+0xfa>
@@@@
+               	movq	8(%r15), %rsi

@@ -50462,29 +50691,29 @@
@@@[(25, 37)]@@@
-               	je	0x44b053 <kfun:kotlin.text.regex.MatchResultImpl.object-1.object-1.hasNext#internal+0x13>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	movq	8(%rcx), %rcx
-               	cmpl	80(%rcx), %eax
+               	je	0x44b3e3 <kfun:kotlin.text.regex.MatchResultImpl.object-1.object-1.hasNext#internal+0x13>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	8(%rbx), %rax
+               	movq	8(%rax), %rax
+               	movl	80(%rax), %eax
+               	cmpl	%eax, 16(%rbx)

@@ -50508,21 +50737,21 @@
@@@[(6, 20)]@@@
-               	je	0x44b0d2 <kfun:kotlin.text.regex.MatchResultImpl.object-1.object-1.next#internal+0x62>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	16(%rbx), %eax
-               	movq	8(%rbx), %rcx
-               	movq	8(%rcx), %rcx
-               	cmpl	80(%rcx), %eax
-               	jge	0x44b110 <kfun:kotlin.text.regex.MatchResultImpl.object-1.object-1.next#internal+0xa0>
+               	je	0x44b462 <kfun:kotlin.text.regex.MatchResultImpl.object-1.object-1.next#internal+0x62>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	8(%rbx), %rax
+               	movq	8(%rax), %rax
+               	movl	80(%rax), %eax
+               	cmpl	%eax, 16(%rbx)
+               	jge	0x44b4a0 <kfun:kotlin.text.regex.MatchResultImpl.object-1.object-1.next#internal+0xa0>

@@ -50685,49 +50914,52 @@
@@@[(13, 17), (18, 39), (40, 61), (62, 64), (65, 66), (75, 77)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
@@@@
-               	leaq	499678(%rip), %rcx      # 0x4c53d0 <ktypeglobal:kotlin.text.regex.Pattern.Companion#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%rbx, 24(%rsp)
-               	movq	%rbx, 665894(%rip)      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
-               	movaps	251831(%rip), %xmm0     # 0x488bc0 <_IO_stdin_used+0x1c0>
-               	movups	%xmm0, 24(%rax)
-               	movabsq	$137438953488, %rcx     # imm = 0x2000000010
-               	movq	%rcx, 40(%rax)
-               	movl	$64, 48(%rax)
-               	movl	665984(%rip), %eax      # 0x4edda8 <state_global$kotlin.text.regex.Pattern>
+               	leaq	500686(%rip), %rdx      # 0x4c5b50 <ktypeglobal:kotlin.text.regex.Pattern.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 666902(%rip)      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movq	666895(%rip), %rbx      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movaps	255712(%rip), %xmm0     # 0x489e80 <_IO_stdin_used+0x180>
+               	movups	%xmm0, 8(%rbx)
+               	movabsq	$137438953488, %rax     # imm = 0x2000000010
+               	movq	%rax, 24(%rbx)
+               	movl	$64, 32(%rbx)
+               	movl	666985(%rip), %eax      # 0x4ee528 <state_global$kotlin.text.regex.Pattern>
@@@@
-               	je	0x44b440 <kfun:kotlin.text.regex.Pattern.$init_global#internal+0xd0>
-               	leaq	665972(%rip), %rdi      # 0x4edda8 <state_global$kotlin.text.regex.Pattern>
-               	leaq	-203(%rip), %rsi        # 0x44b370 <kfun:kotlin.text.regex.Pattern.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	665825(%rip), %rsi      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
-               	movl	8(%rsi), %eax
-               	orl	12(%rsi), %eax
-               	orl	16(%rsi), %eax
-               	orl	20(%rsi), %eax
+               	je	0x44b7d7 <kfun:kotlin.text.regex.Pattern.$init_global#internal+0xd7>
+               	leaq	666973(%rip), %rdi      # 0x4ee528 <state_global$kotlin.text.regex.Pattern>
+               	leaq	-210(%rip), %rsi        # 0x44b700 <kfun:kotlin.text.regex.Pattern.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	666826(%rip), %rsi      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movl	12(%rsi), %eax
+               	orl	8(%rsi), %eax
+               	leaq	666813(%rip), %rdi      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movl	20(%rsi), %ecx
+               	orl	16(%rsi), %ecx
+               	orl	%eax, %ecx
+               	movl	28(%rsi), %eax
@@@@
-               	orl	28(%rsi), %eax
-               	leaq	665800(%rip), %rdi      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
@@@@
+               	orl	%ecx, %eax
@@@@
-               	nop
+               	nopw	(%rax,%rax)

@@ -50916,102 +51148,102 @@
@@@[(58, 70), (105, 117)]@@@
-               	movl	64(%rdi), %eax
-               	movq	664662(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	28(%rcx), %eax
-               	jne	0x44b840 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x370>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	jmp	0x44b840 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x370>
+               	movq	665657(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	28(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
+               	jne	0x44bbe0 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x370>
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	jmp	0x44bbe0 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x370>
@@@@
-               	movl	64(%rdi), %eax
-               	movq	664487(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	28(%rcx), %eax
-               	jne	0x44b9de <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x50e>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	jmp	0x44b9de <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x50e>
+               	movq	665482(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	28(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
+               	jne	0x44bd7e <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x50e>
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	jmp	0x44bd7e <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x50e>

@@ -51020,63 +51252,64 @@
@@@[(19, 35), (71, 72), (75, 89)]@@@
-               	jne	0x44bb78 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x6a8>
-               	movl	64(%rcx), %edx
-               	movq	664301(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	12(%rax), %edx
-               	jne	0x44b770 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x2a0>
-               	movl	60(%rcx), %ecx
-               	cmpl	28(%rax), %ecx
-               	jne	0x44ba99 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x5c9>
+               	jne	0x44bf1c <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x6ac>
+               	movq	665296(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	12(%rax), %edx
+               	cmpl	%edx, 64(%rcx)
+               	jne	0x44bb10 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x2a0>
+               	movl	28(%rax), %eax
+               	cmpl	%eax, 60(%rcx)
+               	jne	0x44be39 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x5c9>
@@@@
+               	movl	48(%r15), %eax
@@@@
-               	movq	288(%r13), %rax
-               	movq	%rax, 40(%rsp)
-               	leaq	32(%rsp), %rax
-               	movq	%rax, 288(%r13)
-               	movabsq	$17179869184, %rax      # imm = 0x400000000
-               	movq	%rax, 48(%rsp)
-               	movl	%ecx, 56(%rdi)
+               	movq	288(%r13), %rcx
+               	movq	%rcx, 40(%rsp)
+               	leaq	32(%rsp), %rcx
+               	movq	%rcx, 288(%r13)
+               	movabsq	$17179869184, %rcx      # imm = 0x400000000
+               	movq	%rcx, 48(%rsp)
+               	movl	%eax, 56(%rdi)

@@ -51086,63 +51319,63 @@
@@@[(29, 43)]@@@
-               	callq	0x455dc0 <kfun:kotlin.text.regex.JointSet#<init>(kotlin.collections.List<kotlin.text.regex.AbstractSet>;kotlin.text.regex.FSet){}>
-               	jmp	0x44bda2 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x8d2>
-               	movq	663953(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	movl	60(%rcx), %ecx
-               	cmpl	28(%rax), %ecx
-               	je	0x44ba34 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x564>
-               	jmp	0x44ba99 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x5c9>
+               	callq	0x4562f0 <kfun:kotlin.text.regex.JointSet#<init>(kotlin.collections.List<kotlin.text.regex.AbstractSet>;kotlin.text.regex.FSet){}>
+               	jmp	0x44c146 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x8d6>
+               	movq	664941(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	28(%rax), %eax
+               	cmpl	%eax, 60(%rcx)
+               	je	0x44bdd4 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x564>
+               	jmp	0x44be39 <kfun:kotlin.text.regex.Pattern.processExpression#internal+0x5c9>

@@ -51232,140 +51465,141 @@
@@@[(6, 8), (15, 17), (21, 23), (39, 43), (78, 80), (84, 86), (103, 105), (108, 109)]@@@
-               	movl	44(%rax), %ebx
+               	movl	44(%rax), %r14d
@@@@
-               	leaq	16(%rax), %r14
+               	leaq	16(%rax), %rbx
@@@@
-               	movq	%r14, 192(%rsp)
+               	movq	%rbx, 192(%rsp)
@@@@
-               	movl	%ebx, 40(%rbp)
-               	movq	%r14, 144(%rsp)
+               	movl	%r14d, 40(%rbp)
+               	movq	%rbx, 144(%rsp)
@@@@
-               	leaq	16(%rax), %r14
+               	leaq	16(%rax), %rbx
@@@@
-               	movq	%r14, 184(%rsp)
+               	movq	%rbx, 184(%rsp)
@@@@
-               	movq	%r14, 144(%rsp)
+               	movq	%rbx, 144(%rsp)
@@@@
+               	movq	144(%rsp), %r14

@@ -51467,18 +51701,18 @@
@@@[(15, 19)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nopw	(%rax,%rax)

@@ -51537,34 +51771,34 @@
@@@[(6, 30), (42, 46)]@@@
-               	movl	64(%rax), %ecx
-               	movq	661777(%rip), %rdx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	12(%rdx), %ecx
-               	jne	0x44c471 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1c1>
-               	movq	8(%rsp), %r15
-               	testq	%r15, %r15
-               	je	0x44c425 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x175>
-               	movq	(%r15), %rcx
-               	andq	$-4, %rcx
-               	movq	(%rcx), %rcx
-               	cmpl	$575, 92(%rcx)          # imm = 0x23F
-               	je	0x44e06e <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1dbe>
+               	movq	662756(%rip), %rcx      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	12(%rcx), %ecx
+               	cmpl	%ecx, 64(%rax)
+               	jne	0x44c822 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1c2>
+               	movq	8(%rsp), %rbp
+               	testq	%rbp, %rbp
+               	je	0x44c7d6 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x176>
+               	movq	(%rbp), %rax
+               	andq	$-4, %rax
+               	movq	(%rax), %rax
+               	cmpl	$575, 92(%rax)          # imm = 0x23F
+               	je	0x44e45d <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1dfd>
@@@@
-               	movq	%r15, %rsi
-               	callq	0x454400 <kfun:kotlin.text.regex.EmptySet#<init>(kotlin.text.regex.AbstractSet){}>
+               	movq	%rbp, %rsi
+               	callq	0x4548e0 <kfun:kotlin.text.regex.EmptySet#<init>(kotlin.text.regex.AbstractSet){}>

@@ -51572,65 +51806,68 @@
@@@[(3, 5), (10, 13), (14, 22), (27, 29), (67, 77)]@@@
-               	leaq	424(%rsp), %rbp
+               	leaq	424(%rsp), %r15
@@@@
-               	movq	8(%rsp), %r15
-               	jmp	0x44c4ea <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x23a>
-               	nopl	(%rax)
@@@@
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	64(%rdi), %ebx
+               	movq	8(%rsp), %rbp
+               	jmp	0x44c8b1 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x251>
+               	nopw	%cs:(%rax,%rax)
+               	nop
+               	movq	16(%r13), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
@@@@
-               	movq	(%r12), %rdi
+               	movq	16(%r13), %rdi
@@@@
-               	movl	64(%rdi), %eax
-               	movq	661421(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	24(%rcx), %eax
-               	jne	0x44cbc3 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x913>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	662384(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	24(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
+               	jne	0x44cf93 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x933>
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>

@@ -51640,130 +51877,131 @@
@@@[(75, 84), (138, 142), (144, 152)]@@@
-               	cmpl	$0, 24(%rax)
-               	je	0x44e069 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1db9>
-               	movq	16(%rax), %rcx
-               	movw	%bx, 32(%rax)
+               	movq	368(%rsp), %rax
+               	cmpl	$0, 8(%rax)
+               	je	0x44e458 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1df8>
+               	movq	(%rax), %rcx
+               	movw	%bx, 16(%rax)
@@@@
-               	movq	%r15, %rcx
-               	callq	0x44b4d0 <kfun:kotlin.text.regex.Pattern.processExpression#internal>
+               	movq	%rbp, %rcx
+               	callq	0x44b870 <kfun:kotlin.text.regex.Pattern.processExpression#internal>
@@@@
-               	movl	64(%rdi), %eax
-               	movq	660747(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	12(%rcx), %eax
-               	je	0x44d142 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe92>
+               	movq	661703(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	12(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
+               	je	0x44d433 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xdd3>

@@ -51835,31 +52073,30 @@
@@@[(13, 20)]@@@
-               	callq	0x42f320 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
-               	jmp	0x44ca04 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x754>
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	callq	0x42f5b0 <kfun:kotlin.text.StringBuilder#<init>(kotlin.Int){}>
+               	jmp	0x44cdc4 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x764>
+               	nopl	(%rax,%rax)

@@ -51868,67 +52105,67 @@
@@@[(3, 19), (20, 26), (27, 28), (29, 33), (35, 37), (59, 64)]@@@
-               	movq	48(%rax), %rcx
-               	movq	%rcx, 40(%rsp)
-               	movq	24(%rsp), %rax
-               	movq	%rax, 288(%r14)
-               	testq	%rcx, %rcx
-               	je	0x44ca70 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x7c0>
-               	movq	(%r12), %rcx
-               	jmp	0x44ca7a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x7ca>
+               	movq	48(%rax), %rax
+               	movq	%rax, 40(%rsp)
+               	movq	24(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
+               	testq	%rax, %rax
+               	je	0x44ce30 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x7d0>
+               	movq	(%r12), %rax
+               	jmp	0x44ce3e <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x7de>
@@@@
-               	movq	(%r12), %rcx
-               	cmpl	$0, 68(%rcx)
-               	je	0x44caea <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x83a>
+               	movq	(%r12), %rax
+               	cmpl	$0, 68(%rax)
+               	je	0x44ceba <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x85a>
@@@@
-               	movaps	%xmm0, 16(%rsp)
@@@@
-               	movq	%rax, 24(%rsp)
+               	movaps	%xmm0, 16(%rsp)
+               	movq	288(%r14), %rcx
+               	movq	%rcx, 24(%rsp)
@@@@
-               	movq	48(%rcx), %rax
+               	movq	48(%rax), %rax
@@@@
-               	je	0x44caea <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x83a>
-               	jmp	0x44cb3a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x88a>
-               	nop
+               	je	0x44ceba <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x85a>
+               	jmp	0x44cf0a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x8aa>

@@ -51939,23 +52176,23 @@
@@@[(21, 25)]@@@
-               	movq	8(%rsp), %r15
-               	jmp	0x44d181 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xed1>
+               	movq	8(%rsp), %rbp
+               	jmp	0x44d554 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xef4>

@@ -51972,28 +52209,28 @@
@@@[(17, 23), (29, 33)]@@@
-               	je	0x44ceca <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xc1a>
-               	movq	%r15, 16(%rbx)
-               	jmp	0x44ced5 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xc25>
+               	je	0x44d2aa <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xc4a>
+               	movq	%rbp, 16(%rbx)
+               	jmp	0x44d2b5 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xc55>
@@@@
-               	movq	%rbp, %rsi
-               	callq	0x444fd0 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator>
+               	movq	%r15, %rsi
+               	callq	0x4452c0 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator>

@@ -52001,79 +52238,82 @@
@@@[(33, 39), (45, 48)]@@@
-               	addl	$1, 56(%r13)
-               	jmp	0x44d08a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xdda>
+               	movl	56(%r13), %eax
+               	addl	$1, %eax
+               	movl	%eax, 56(%r13)
+               	jmp	0x44d511 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeb1>
@@@@
-               	jge	0x44cdaa <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xafa>
+               	jge	0x44d18a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xb2a>
+               	nopw	%cs:(%rax,%rax)

@@ -52104,33 +52344,33 @@
@@@[(21, 25), (31, 41)]@@@
-               	movq	%r15, %rsi
-               	callq	0x452c30 <kfun:kotlin.text.regex.CompositeRangeSet#<set-next>(kotlin.text.regex.AbstractSet){}>
+               	movq	%rbp, %rsi
+               	callq	0x4530c0 <kfun:kotlin.text.regex.CompositeRangeSet#<set-next>(kotlin.text.regex.AbstractSet){}>
@@@@
-               	movl	64(%rbx), %eax
-               	movq	658957(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	20(%rcx), %eax
-               	jne	0x44e129 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1e79>
-               	movq	658925(%rip), %rax      # 0x4edd00 <kvar:kotlin.text.regex.Lexer.Mode.$VALUES#internal>
+               	movq	659888(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	20(%rax), %eax
+               	cmpl	%eax, 64(%rbx)
+               	jne	0x44e51c <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1ebc>
+               	movq	659853(%rip), %rax      # 0x4ee480 <kvar:kotlin.text.regex.Lexer.Mode.$VALUES#internal>

@@ -52163,21 +52403,59 @@
@@@[(6, 46), (47, 52), (56, 57)]@@@
-               	jmp	0x44d09c <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xdec>
+               	movq	24(%rbx), %rdi
+               	movq	%rdi, 104(%rsp)
+               	movq	659683(%rip), %rax      # 0x4ee480 <kvar:kotlin.text.regex.Lexer.Mode.$VALUES#internal>
+               	movq	24(%rax), %rsi
+               	movq	%rsi, 112(%rsp)
+               	movq	(%rdi), %rax
+               	andq	$-4, %rax
+               	movq	(%rax), %rax
+               	callq	*112(%rax)
+               	testb	%al, %al
+               	movq	8(%rsp), %rbp
+               	je	0x44d423 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xdc3>
+               	xorps	%xmm0, %xmm0
+               	movaps	%xmm0, 32(%rsp)
+               	movaps	%xmm0, 16(%rsp)
+               	movq	288(%r14), %rax
+               	movq	%rax, 24(%rsp)
+               	leaq	16(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movabsq	$17179869184, %rax      # imm = 0x400000000
+               	movq	%rax, 32(%rsp)
+               	movl	64(%rbx), %eax
+               	movl	%eax, 68(%rbx)
+               	movq	40(%rbx), %rax
+               	movq	%rax, 40(%rsp)
+               	movq	%rax, 48(%rbx)
+               	movl	84(%rbx), %eax
+               	movl	%eax, 72(%rbx)
+               	movl	80(%rbx), %eax
+               	movl	%eax, 84(%rbx)
+               	movq	%rbx, %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	24(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movq	(%r12), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	jmp	0x44d51a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeba>
@@@@
-               	jne	0x44d582 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x12d2>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	48(%r13), %edi
+               	jne	0x44d971 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1311>
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
@@@@
+               	movl	48(%r13), %edi

@@ -52210,80 +52488,43 @@
@@@[(3, 45), (46, 47), (49, 50), (52, 56), (68, 87), (95, 97)]@@@
-               	movq	8(%rsp), %r15
-               	jmp	0x44d147 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe97>
-               	movq	24(%rbx), %rbp
-               	movq	8(%rsp), %r15
-               	movq	%rbp, 104(%rsp)
-               	movq	658515(%rip), %rax      # 0x4edd00 <kvar:kotlin.text.regex.Lexer.Mode.$VALUES#internal>
-               	movq	24(%rax), %rsi
-               	movq	%rsi, 112(%rsp)
-               	movq	(%rbp), %rax
-               	andq	$-4, %rax
-               	movq	(%rax), %rax
-               	movq	%rbp, %rdi
-               	callq	*112(%rax)
-               	testb	%al, %al
-               	je	0x44d132 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe82>
-               	xorps	%xmm0, %xmm0
-               	movaps	%xmm0, 32(%rsp)
-               	movaps	%xmm0, 16(%rsp)
-               	movq	288(%r14), %rax
-               	movq	%rax, 24(%rsp)
-               	leaq	16(%rsp), %rax
-               	movq	%rax, 288(%r14)
-               	movabsq	$17179869184, %rax      # imm = 0x400000000
-               	movq	%rax, 32(%rsp)
-               	movl	64(%rbx), %eax
-               	movl	%eax, 68(%rbx)
-               	movq	40(%rbx), %rax
-               	movq	%rax, 40(%rsp)
-               	movq	%rax, 48(%rbx)
-               	movl	80(%rbx), %eax
-               	movl	84(%rbx), %ecx
-               	movl	%ecx, 72(%rbx)
-               	movl	%eax, 84(%rbx)
-               	movq	%rbx, %rdi
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movq	24(%rsp), %rax
-               	movq	%rax, 288(%r14)
-               	movq	72(%rsp), %rax
-               	movq	%rax, 288(%r14)
-               	movq	(%r12), %rdi
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	8(%rsp), %rbp
@@@@
-               	movq	344(%rsp), %rax
@@@@
+               	movq	344(%rsp), %rax
@@@@
-               	movq	%r15, %rsi
-               	callq	0x44e430 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal>
+               	movq	%rbp, %rsi
+               	callq	0x44e820 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal>
@@@@
-               	jne	0x44d1b9 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xf09>
-               	testq	%r15, %r15
-               	je	0x44d1be <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xf0e>
-               	movq	(%r15), %rdx
-               	andq	$-4, %rdx
-               	movq	(%rdx), %rdx
-               	cmpl	$575, 92(%rdx)          # imm = 0x23F
-               	jne	0x44d1be <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xf0e>
+               	jne	0x44d59b <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xf3b>
+               	testq	%rbp, %rbp
+               	je	0x44d5a0 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xf40>
+               	movq	(%rbp), %rax
+               	andq	$-4, %rax
+               	movq	(%rax), %rax
+               	cmpl	$575, 92(%rax)          # imm = 0x23F
+               	jne	0x44d5a0 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xf40>
+               	movq	(%r12), %rax
+               	movl	64(%rax), %eax
+               	movq	659189(%rip), %rcx      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movq	%r15, %rsi
+               	movq	%rbp, %rsi

@@ -52300,30 +52541,31 @@
@@@[(3, 7), (8, 18), (20, 29)]@@@
-               	movq	%r15, %rsi
-               	callq	0x44c2b0 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal>
+               	movq	%rbp, %rsi
+               	callq	0x44c660 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal>
@@@@
-               	movq	152(%rsp), %rdi
-               	movq	%rdi, 248(%rsp)
-               	testq	%rdi, %rdi
-               	je	0x44d434 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1184>
-               	movq	(%rdi), %rax
+               	movq	152(%rsp), %rax
+               	movq	%rax, 248(%rsp)
+               	testq	%rax, %rax
+               	je	0x44d818 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x11b8>
+               	movq	(%rax), %rax
@@@@
-               	movl	$4294966703, %ecx       # imm = 0xFFFFFDAF
-               	addl	92(%rax), %ecx
-               	cmpl	$3, %ecx
-               	ja	0x44d434 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1184>
+               	movl	92(%rax), %eax
+               	addl	$4294966703, %eax       # imm = 0xFFFFFDAF
+               	cmpl	$3, %eax
+               	ja	0x44d818 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x11b8>
+               	movq	152(%rsp), %rdi

@@ -52338,88 +52580,87 @@
@@@[(3, 12), (14, 21), (22, 29), (33, 37), (39, 41), (46, 61), (62, 68), (70, 72), (74, 84), (85, 94), (96, 99), (101, 108), (122, 128)]@@@
-               	jne	0x44d434 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1184>
-               	movq	%r14, %rbp
-               	movq	152(%rsp), %r14
-               	movq	%r14, 288(%rsp)
-               	movq	296(%rbp), %rdi
+               	jne	0x44d818 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x11b8>
+               	movq	152(%rsp), %r13
+               	movq	%r13, 288(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r12
-               	leaq	16(%rax), %rcx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbp
+               	movq	%r14, %rcx
+               	leaq	16(%rax), %r14
@@@@
-               	leaq	502883(%rip), %rax      # 0x4c7f80 <ktypeglobal:kotlin.text.regex.UnifiedQuantifierSet#internal>
-               	movq	%rax, 16(%r12)
-               	movq	%rcx, %r15
-               	movq	%rcx, 296(%rsp)
+               	leaq	503801(%rip), %rax      # 0x4c8700 <ktypeglobal:kotlin.text.regex.UnifiedQuantifierSet#internal>
+               	movq	%rax, 16(%rbp)
+               	movq	%r14, 296(%rsp)
@@@@
-               	leaq	360(%rsp), %r13
-               	movq	288(%rbp), %rax
+               	leaq	360(%rsp), %r12
+               	movq	288(%rcx), %rax
@@@@
-               	movq	%rax, 288(%rbp)
+               	movq	%rax, 288(%rcx)
@@@@
-               	je	0x44d39e <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x10ee>
-               	leaq	657978(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	15095(%rip), %rsi       # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	657803(%rip), %rax      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movq	8(%rax), %rax
+               	je	0x44d784 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1124>
+               	leaq	658900(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	15249(%rip), %rsi       # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	658725(%rip), %rax      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movq	8(%rax), %r15
+               	movq	%r13, %rdi
+               	movq	%r12, %rsi
+               	callq	0x456cb0 <kfun:kotlin.text.regex.LeafQuantifierSet#<get-leaf>(){}kotlin.text.regex.LeafSet>
@@@@
-               	movq	%r14, %rdi
-               	movq	%r13, %rsi
-               	callq	0x456780 <kfun:kotlin.text.regex.LeafQuantifierSet#<get-leaf>(){}kotlin.text.regex.LeafSet>
-               	movq	%rax, %rbp
-               	movq	(%r14), %rax
+               	movq	(%r13), %rax
@@@@
-               	movq	%r14, %rdi
+               	movq	%r13, %rdi
@@@@
-               	movq	%rax, %r13
-               	movl	8(%r14), %esi
-               	movq	%r15, %rdi
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	%rbp, 40(%r12)
-               	movq	%r13, 48(%r12)
+               	movq	%rax, %r12
+               	movl	8(%r13), %esi
+               	movq	%r14, %rdi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
@@@@
-               	movq	%rax, 56(%r12)
-               	movq	%rbp, 376(%rsp)
-               	movq	(%rbp), %rax
+               	movq	%rax, 40(%rbp)
+               	movq	%r12, 48(%rbp)
+               	movq	%r15, 56(%rbp)
+               	movq	40(%rbp), %rdi
+               	movq	%rdi, 376(%rsp)
+               	movq	(%rdi), %rax
@@@@
-               	movq	%rbp, %rdi
-               	movq	%r15, %rsi
+               	movq	%r14, %rsi
@@@@
-               	movq	(%rsp), %r14
-               	movq	%rax, 288(%r14)
-               	movq	%r15, 152(%rsp)
+               	movq	(%rsp), %rcx
+               	movq	%rax, 288(%rcx)
+               	movq	%r14, 152(%rsp)
+               	movq	%rcx, %r14
@@@@
-               	leaq	262429(%rip), %rcx      # 0x48d590 <(anonymous namespace)::singleDecompositions>
-               	jmp	0x44d487 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x11d7>
-               	nopl	(%rax,%rax)
+               	leaq	266233(%rip), %rcx      # 0x48e850 <(anonymous namespace)::singleDecompositions>
+               	jmp	0x44d867 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1207>
+               	nopl	(%rax)

@@ -52455,89 +52696,92 @@
@@@[(6, 10), (15, 34), (59, 61), (65, 67), (84, 88), (99, 101), (105, 107), (124, 128)]@@@
-               	movq	8(%rsp), %r15
-               	jne	0x44d181 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xed1>
+               	movq	8(%rsp), %rbp
+               	jne	0x44d554 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xef4>
@@@@
-               	jne	0x44d54f <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x129f>
-               	testq	%r15, %r15
-               	je	0x44d181 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xed1>
-               	movq	(%r15), %rdx
-               	andq	$-4, %rdx
-               	movq	(%rdx), %rdx
-               	cmpl	$575, 92(%rdx)          # imm = 0x23F
-               	jne	0x44d181 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xed1>
+               	jne	0x44d93e <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x12de>
+               	testq	%rbp, %rbp
+               	je	0x44d554 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xef4>
+               	movq	(%rbp), %rax
+               	andq	$-4, %rax
+               	movq	(%rax), %rax
+               	cmpl	$575, 92(%rax)          # imm = 0x23F
+               	jne	0x44d554 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xef4>
+               	movq	(%r12), %rdi
+               	movl	64(%rdi), %eax
+               	movq	658258(%rip), %rcx      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	leaq	16(%rax), %rbp
+               	leaq	16(%rax), %r15
@@@@
-               	movq	%rbp, 456(%rsp)
+               	movq	%r15, 456(%rsp)
@@@@
-               	movq	%rbp, 360(%rsp)
-               	jmp	0x44d147 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe97>
+               	movq	%r15, 360(%rsp)
+               	jmp	0x44d51a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeba>
@@@@
-               	leaq	16(%rax), %rbp
+               	leaq	16(%rax), %r15
@@@@
-               	movq	%rbp, 464(%rsp)
+               	movq	%r15, 464(%rsp)
@@@@
-               	movq	%rbp, 360(%rsp)
-               	jmp	0x44d147 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe97>
+               	movq	%r15, 360(%rsp)
+               	jmp	0x44d51a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeba>

@@ -52545,226 +52789,223 @@
@@@[(50, 52), (56, 58), (74, 78), (105, 108), (111, 112), (165, 171), (172, 182), (194, 202), (206, 216), (217, 219), (221, 227), (228, 239), (251, 258), (273, 281), (283, 288), (292, 296), (308, 314), (321, 327), (328, 334)]@@@
-               	leaq	16(%rax), %rbp
+               	leaq	16(%rax), %r15
@@@@
-               	movq	%rbp, 472(%rsp)
+               	movq	%r15, 472(%rsp)
@@@@
-               	movq	%rbp, 360(%rsp)
-               	jmp	0x44d147 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe97>
+               	movq	%r15, 360(%rsp)
+               	jmp	0x44d51a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeba>
@@@@
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	48(%r13), %edi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
@@@@
+               	movl	48(%r13), %edi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbp
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbx
+               	leaq	16(%rax), %r15
@@@@
-               	leaq	499469(%rip), %rax      # 0x4c7840 <ktypeglobal:kotlin.text.regex.SOLSet#internal>
-               	movq	%rax, 16(%rbp)
-               	movq	%rbx, 504(%rsp)
-               	movl	$0, 24(%rbp)
-               	movl	656516(%rip), %eax      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	500382(%rip), %rax      # 0x4c7fc0 <ktypeglobal:kotlin.text.regex.SOLSet#internal>
+               	movq	%rax, 16(%rbx)
+               	movq	%r15, 504(%rsp)
+               	movl	$0, 24(%rbx)
+               	movl	657429(%rip), %eax      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
@@@@
-               	movq	%rax, 32(%rbp)
-               	movq	%r14, 40(%rbp)
-               	movb	$0, 48(%rbp)
-               	movq	%rbx, 360(%rsp)
+               	movq	%rax, 32(%rbx)
+               	movq	%r14, 40(%rbx)
+               	movb	$0, 48(%rbx)
+               	movq	%r15, 360(%rsp)
@@@@
-               	jne	0x44dcec <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1a3c>
-               	movq	%r14, %rbx
-               	leaq	544(%rsp), %r14
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	56(%r13), %ebp
-               	leal	1(%rbp), %eax
+               	jne	0x44e0ce <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1a6e>
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	56(%r13), %ebx
+               	leal	1(%rbx), %eax
@@@@
-               	movq	296(%rbx), %rdi
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbx
-               	leaq	16(%rax), %rcx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbp
+               	leaq	16(%rax), %r15
@@@@
-               	leaq	494021(%rip), %rax      # 0x4c63a0 <ktypeglobal:kotlin.text.regex.NonCapFSet#internal>
-               	movq	%rax, 16(%rbx)
-               	movq	%rcx, 56(%rsp)
-               	movq	%rcx, 512(%rsp)
-               	movl	$0, 24(%rbx)
-               	movl	656343(%rip), %eax      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	494945(%rip), %rax      # 0x4c6b20 <ktypeglobal:kotlin.text.regex.NonCapFSet#internal>
+               	movq	%rax, 16(%rbp)
+               	movq	%r15, 512(%rsp)
+               	movl	$0, 24(%rbp)
+               	movl	657272(%rip), %eax      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
@@@@
-               	movq	%rax, 32(%rbx)
-               	movl	%ebp, 40(%rbx)
-               	movq	(%rsp), %r15
-               	movq	296(%r15), %rdi
+               	movq	%rax, 32(%rbp)
+               	movl	%ebx, 40(%rbp)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x458fe0 <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}>
-               	movq	56(%rsp), %rax
-               	movq	%rax, 32(%rbx)
-               	movq	296(%r15), %rdi
+               	callq	0x459540 <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}>
+               	movq	%r15, 56(%rsp)
+               	movq	%r15, 32(%rbx)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%r14, %r15
+               	leaq	16(%rax), %r14
@@@@
-               	movq	%rbx, 528(%rsp)
-               	movq	%rbx, %rdi
+               	movq	%r14, 528(%rsp)
+               	movq	%r14, %rdi
@@@@
-               	movq	%r14, %rsi
-               	callq	0x45cd90 <kfun:kotlin.collections#listOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}kotlin.collections.List<0:0>>
-               	movq	%rbx, %rdi
+               	leaq	544(%rsp), %rsi
+               	callq	0x45d320 <kfun:kotlin.collections#listOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}kotlin.collections.List<0:0>>
+               	movq	%r14, %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbp
-               	leaq	16(%rax), %r14
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbx
+               	leaq	16(%rax), %rbp
@@@@
-               	leaq	498252(%rip), %rax      # 0x4c7570 <ktypeglobal:kotlin.text.regex.RangeSet#internal>
-               	movq	%rax, 16(%rbp)
-               	movq	%r14, 560(%rsp)
+               	leaq	499177(%rip), %rax      # 0x4c7cf0 <ktypeglobal:kotlin.text.regex.RangeSet#internal>
+               	movq	%rax, 16(%rbx)
+               	movq	%rbp, 560(%rsp)

@@ -52774,153 +53015,152 @@
@@@[(6, 16), (17, 25), (27, 29), (31, 33), (34, 38), (39, 41), (43, 48), (62, 65), (67, 83), (106, 109), (120, 122), (126, 128), (155, 161)]@@@
-               	je	0x44db82 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x18d2>
-               	leaq	655962(%rip), %rdi      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
-               	leaq	14867(%rip), %rsi       # 0x451590 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	%r14, %rdi
+               	je	0x44df65 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1905>
+               	leaq	656887(%rip), %rdi      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	15008(%rip), %rsi       # 0x451a00 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	%rbp, %rdi
@@@@
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movl	$1, 40(%rbp)
-               	movb	$0, 56(%rbp)
-               	movq	(%rbx), %rax
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movl	$1, 40(%rbx)
+               	movb	$0, 56(%rbx)
+               	movq	(%r14), %rax
@@@@
-               	movq	%rbx, %rdi
+               	movq	%r14, %rdi
@@@@
-               	movq	%rax, 48(%rbp)
+               	movq	%rax, 48(%rbx)
@@@@
-               	movq	(%rsp), %rcx
-               	movq	%rax, 288(%rcx)
+               	movq	(%rsp), %r14
+               	movq	%rax, 288(%r14)
@@@@
-               	movq	%r15, 32(%rbp)
+               	movq	%r15, 32(%rbx)
@@@@
-               	movq	%r14, 576(%rsp)
-               	movq	%rcx, %r14
-               	movq	296(%rcx), %rdi
+               	movq	%rbp, 576(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rcx, 600(%rsp)
+               	movq	592(%rsp), %rax
+               	movq	%rax, 600(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
-               	movq	576(%rsp), %rax
-               	movq	592(%rsp), %rcx
-               	movq	%rcx, 616(%rsp)
-               	movq	%rax, 624(%rsp)
-               	movq	(%rcx), %rdx
-               	movq	%rax, 24(%rcx)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	592(%rsp), %rax
+               	movq	%rax, 616(%rsp)
+               	movq	576(%rsp), %rcx
+               	movq	%rcx, 624(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 24(%rax)
@@@@
-               	movq	8(%rsp), %r15
-               	jmp	0x44d147 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xe97>
+               	jmp	0x44d515 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeb5>
@@@@
-               	leaq	16(%rax), %rbp
+               	leaq	16(%rax), %r15
@@@@
-               	movq	%rbp, 656(%rsp)
+               	movq	%r15, 656(%rsp)
@@@@
-               	leal	(%rbx,%rbx,4), %ebp
-               	addl	%ebp, %ebp
-               	addl	68(%rax), %ebp
+               	movl	68(%rax), %eax
+               	leal	(%rbx,%rbx,4), %ecx
+               	leal	(%rax,%rcx,2), %ebp

@@ -52936,119 +53176,122 @@
@@@[(32, 40), (83, 89), (117, 127), (150, 151)]@@@
-               	movl	$4294966768, %ecx       # imm = 0xFFFFFDF0
-               	addl	92(%rax), %ecx
-               	cmpl	$25, %ecx
-               	jae	0x44e1f7 <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1f47>
+               	movl	92(%rax), %eax
+               	addl	$4294966768, %eax       # imm = 0xFFFFFDF0
+               	cmpl	$25, %eax
+               	jae	0x44e5ea <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x1f8a>
@@@@
-               	movq	8(%rsp), %r15
-               	movq	%r15, %rsi
-               	callq	0x454400 <kfun:kotlin.text.regex.EmptySet#<init>(kotlin.text.regex.AbstractSet){}>
+               	movq	8(%rsp), %rbp
+               	movq	%rbp, %rsi
+               	callq	0x4548e0 <kfun:kotlin.text.regex.EmptySet#<init>(kotlin.text.regex.AbstractSet){}>
@@@@
-               	movq	8(%rsp), %r15
-               	movq	%r15, %rsi
-               	callq	0x454400 <kfun:kotlin.text.regex.EmptySet#<init>(kotlin.text.regex.AbstractSet){}>
-               	jmp	0x44d97b <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0x16cb>
+               	movq	8(%rsp), %rbp
+               	movq	%rbp, %rsi
+               	callq	0x4548e0 <kfun:kotlin.text.regex.EmptySet#<init>(kotlin.text.regex.AbstractSet){}>
+               	movq	%rbx, 360(%rsp)
+               	movq	(%rsp), %r14
+               	jmp	0x44d51a <kfun:kotlin.text.regex.Pattern.processSubExpression#internal+0xeba>
@@@@
+               	movq	16(%r13), %rax

@@ -53220,18 +53463,17 @@
@@@[(15, 18)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax)
+               	callq	0x47ef60 <ThrowException>

@@ -53240,13 +53482,12 @@
@@@[(3, 11), (13, 14)]@@@
-               	subq	$312, %rsp              # imm = 0x138
-               	movq	%rcx, %r12
-               	movq	%rdx, %r13
-               	movq	%rsi, %r14
+               	subq	$296, %rsp              # imm = 0x128
+               	movq	%rcx, %rbp
+               	movq	%rdx, %r14
+               	movq	%rsi, %r12
@@@@
-               	movaps	%xmm0, 288(%rsp)

@@ -53259,300 +53500,306 @@
@@@[(3, 6), (20, 36), (38, 67), (68, 85), (100, 106), (109, 111), (113, 115), (117, 144), (145, 154), (155, 160), (162, 168), (169, 186), (187, 209), (210, 221), (223, 227), (230, 233), (235, 241), (242, 250), (251, 257), (258, 264), (265, 269), (272, 273), (274, 296), (297, 310), (311, 316), (319, 320), (331, 355), (356, 369), (370, 375), (378, 379), (393, 399), (400, 406), (412, 436), (437, 454), (455, 459), (473, 478), (479, 482), (488, 495), (496, 500)]@@@
-               	movq	$0, 304(%rsp)
+               	movaps	%xmm0, 80(%rsp)
+               	movq	$0, 288(%rsp)
@@@@
-               	je	0x44e507 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xd7>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	16(%rbx), %rdi
-               	movl	64(%rdi), %ebp
-               	testq	%r13, %r13
-               	movq	%r14, 8(%rsp)
-               	je	0x44e609 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x1d9>
-               	movq	(%r13), %rax
+               	je	0x44e8f4 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xd4>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	16(%rbx), %rax
+               	movl	64(%rax), %ecx
+               	testq	%r14, %r14
+               	movq	%rbp, 24(%rsp)
+               	je	0x44e9fd <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x1dd>
+               	movq	(%r14), %rax
@@@@
-               	movl	$4294966718, %ecx       # imm = 0xFFFFFDBE
-               	addl	92(%rax), %ecx
-               	cmpl	$9, %ecx
-               	jae	0x44e609 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x1d9>
-               	movq	653265(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	124(%rax), %ebp
-               	movq	%r12, 24(%rsp)
-               	je	0x44e555 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x125>
-               	cmpl	136(%rax), %ebp
-               	jne	0x44e939 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x509>
-               	leaq	240(%rsp), %rbx
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	653412(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movl	92(%rax), %eax
+               	addl	$4294966718, %eax       # imm = 0xFFFFFDBE
+               	cmpl	$9, %eax
+               	jae	0x44e9fd <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x1dd>
+               	movq	654181(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	cmpl	124(%rax), %ecx
+               	je	0x44e93c <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x11c>
+               	cmpl	136(%rax), %ecx
+               	jne	0x44ed36 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x516>
+               	movl	%ecx, %r13d
+               	movq	%r12, 8(%rsp)
+               	movq	%r14, %r12
+               	leaq	224(%rsp), %rbp
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	654318(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44e580 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x150>
-               	leaq	653400(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	10517(%rip), %rsi       # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	653225(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movl	%ebp, %esi
-               	movq	%rbx, %rdx
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
-               	movl	%ebp, %r12d
+               	je	0x44e976 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x156>
+               	leaq	654306(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	10655(%rip), %rsi       # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	654131(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	%r13d, %esi
+               	movq	%rbp, %rdx
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
@@@@
-               	movl	%r12d, %esi
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	%r13, 40(%rbp)
+               	movl	%r13d, %esi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	%r12, 40(%rbp)
@@@@
-               	movq	(%r13), %rax
+               	movq	(%r12), %rax
@@@@
-               	movq	%r13, %rdi
+               	movq	%r12, %rdi
@@@@
-               	movq	%rbx, %r13
-               	jmp	0x44ea03 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d3>
-               	movq	653056(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	124(%rax), %ebp
-               	je	0x44e621 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x1f1>
-               	cmpl	136(%rax), %ebp
-               	jne	0x44e7ba <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x38a>
-               	movq	%r15, 72(%rsp)
-               	movl	%ebp, %r15d
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	cmpl	$2147483694, 8(%r13)    # imm = 0x8000002E
-               	jne	0x44e6de <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x2ae>
-               	leaq	128(%rsp), %rsi
+               	movq	%rbx, %r14
+               	jmp	0x44ee06 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5e6>
+               	movq	653964(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	cmpl	124(%rax), %ecx
+               	je	0x44ea15 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x1f5>
+               	cmpl	136(%rax), %ecx
+               	jne	0x44eb9b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x37b>
+               	movl	%ecx, 20(%rsp)
+               	movq	%r12, 8(%rsp)
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	cmpl	$2147483694, 8(%r14)    # imm = 0x8000002E
+               	jne	0x44eac3 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x2a3>
+               	leaq	112(%rsp), %rsi
@@@@
-               	callq	0x444fd0 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator>
-               	movq	%rax, 88(%rsp)
-               	movq	653008(%rip), %rax      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
-               	movl	28(%rax), %r14d
-               	movq	%r12, 24(%rsp)
+               	callq	0x4452c0 <kfun:kotlin.text.regex.AbstractLineTerminator.Companion#getInstance(kotlin.Int){}kotlin.text.regex.AbstractLineTerminator>
+               	movq	%rax, 64(%rsp)
+               	movq	653914(%rip), %rax      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movl	28(%rax), %r13d
@@@@
-               	andl	%r14d, %r12d
-               	movq	72(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	andl	%r13d, %r12d
+               	movq	296(%r15), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbp
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbx
+               	leaq	16(%rax), %rbp
@@@@
-               	leaq	489016(%rip), %rax      # 0x4c5cd0 <ktypeglobal:kotlin.text.regex.DotQuantifierSet#internal>
-               	movq	%rax, 16(%rbp)
-               	movq	%rbx, 136(%rsp)
-               	movq	%rbx, %rdi
-               	movl	%r15d, %esi
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	cmpl	%r14d, %r12d
-               	movq	24(%rsp), %r14
-               	movq	%r13, 40(%rbp)
+               	leaq	489932(%rip), %rax      # 0x4c6450 <ktypeglobal:kotlin.text.regex.DotQuantifierSet#internal>
+               	movq	%rax, 16(%rbx)
+               	movq	%rbp, 120(%rsp)
+               	movq	%rbp, %rdi
+               	movl	20(%rsp), %esi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	cmpl	%r13d, %r12d
+               	movq	%r14, 40(%rbx)
@@@@
-               	movq	%rax, 48(%rbp)
-               	movq	88(%rsp), %rax
-               	movq	%rax, 56(%rbp)
-               	sete	64(%rbp)
-               	movq	%rbx, 120(%rsp)
-               	movq	%r13, %rdi
-               	jmp	0x44e795 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x365>
-               	movq	%r12, %r14
-               	movq	%r13, %r12
-               	leaq	144(%rsp), %r13
-               	movl	653018(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	%rax, 48(%rbx)
+               	movq	64(%rsp), %rax
+               	movq	%rax, 56(%rbx)
+               	sete	64(%rbx)
+               	movq	%rbp, 104(%rsp)
+               	movq	%r14, %rdi
+               	jmp	0x44eb7c <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x35c>
+               	movq	%r15, %r12
+               	movq	%r14, (%rsp)
+               	leaq	128(%rsp), %r13
+               	movl	653940(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44e70a <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x2da>
-               	leaq	653006(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	10123(%rip), %rsi       # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	652831(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	je	0x44eaf0 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x2d0>
+               	leaq	653928(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	10277(%rip), %rsi       # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	653753(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	20(%rsp), %r15d
@@@@
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
-               	movq	%rax, 88(%rsp)
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
+               	movq	%rax, %r14
@@@@
-               	movq	72(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	movq	296(%r12), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbp
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbx
+               	leaq	16(%rax), %rbp
@@@@
-               	leaq	491684(%rip), %rax      # 0x4c6800 <ktypeglobal:kotlin.text.regex.GroupQuantifierSet#internal>
-               	movq	%rax, 16(%rbp)
-               	movq	%rbx, 152(%rsp)
-               	movq	%rbx, %rdi
+               	leaq	492607(%rip), %rax      # 0x4c6f80 <ktypeglobal:kotlin.text.regex.GroupQuantifierSet#internal>
+               	movq	%rax, 16(%rbx)
+               	movq	%rbp, 136(%rsp)
+               	movq	%rbp, %rdi
@@@@
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	%r12, 40(%rbp)
+               	movq	%r12, %r15
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %r12
+               	movq	%r12, 40(%rbx)
@@@@
-               	movq	%rax, 48(%rbp)
-               	movq	88(%rsp), %rax
-               	movq	%rax, 56(%rbp)
-               	movl	%r13d, 64(%rbp)
+               	movq	%rax, 48(%rbx)
+               	movq	%r14, 56(%rbx)
@@@@
-               	movq	%rbx, 120(%rsp)
+               	movl	%r13d, 64(%rbx)
+               	movq	%rbp, 104(%rsp)
+               	movq	104(%rsp), %rsi
@@@@
-               	movq	%rbx, %rsi
@@@@
-               	movq	120(%rsp), %r13
-               	movq	72(%rsp), %r15
-               	movq	%r14, %r12
-               	jmp	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
-               	cmpl	148(%rax), %ebp
-               	movq	%r12, 24(%rsp)
-               	movq	%r13, 16(%rsp)
-               	jne	0x44e859 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x429>
-               	leaq	160(%rsp), %r13
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	652777(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	104(%rsp), %r14
+               	jmp	0x44ee06 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5e6>
+               	cmpl	148(%rax), %ecx
+               	movq	%r14, (%rsp)
+               	movq	%r15, 72(%rsp)
+               	jne	0x44ec48 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x428>
+               	movl	%ecx, %r15d
+               	leaq	144(%rsp), %r13
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	653698(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44e7fb <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x3cb>
-               	leaq	652765(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	9882(%rip), %rsi        # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	652590(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movl	%ebp, %esi
+               	je	0x44ebe2 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x3c2>
+               	leaq	653686(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	10035(%rip), %rsi       # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	653511(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	%r15d, %r14d
+               	movl	%r15d, %esi
@@@@
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
-               	movl	%ebp, %r12d
-               	movq	%rax, %r14
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
+               	movq	%rax, 64(%rsp)
@@@@
+               	movq	72(%rsp), %r15
@@@@
-               	movq	%rbp, 168(%rsp)
-               	jmp	0x44e8f9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x4c9>
-               	cmpl	132(%rax), %ebp
-               	je	0x44e875 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x445>
-               	cmpl	144(%rax), %ebp
-               	je	0x44e875 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x445>
-               	cmpl	156(%rax), %ebp
-               	jne	0x44eaf7 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x6c7>
-               	leaq	176(%rsp), %r13
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	652612(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	%rbp, 152(%rsp)
+               	jmp	0x44ecf7 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x4d7>
+               	cmpl	132(%rax), %ecx
+               	je	0x44ec64 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x444>
+               	cmpl	144(%rax), %ecx
+               	je	0x44ec64 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x444>
+               	cmpl	156(%rax), %ecx
+               	jne	0x44ef07 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x6e7>
+               	movl	%ecx, %r15d
+               	leaq	160(%rsp), %r13
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	653518(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44e8a0 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x470>
-               	leaq	652600(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	9717(%rip), %rsi        # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	652425(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movl	%ebp, %esi
+               	je	0x44ec96 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x476>
+               	leaq	653506(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	9855(%rip), %rsi        # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	653331(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	%r15d, %r14d
+               	movl	%r15d, %esi
@@@@
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
-               	movl	%ebp, %r12d
-               	movq	%rax, %r14
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
+               	movq	%rax, 64(%rsp)
@@@@
+               	movq	72(%rsp), %r15
@@@@
-               	movl	%r12d, %esi
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	16(%rsp), %rdi
+               	movl	%r14d, %esi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %rdi
@@@@
-               	movq	8(%rsp), %rax
-               	movq	%rax, 48(%rbx)
-               	movq	%r14, 56(%rbx)
+               	movq	%r12, 48(%rbx)
+               	movq	64(%rsp), %rax
+               	movq	%rax, 56(%rbx)
@@@@
-               	movq	%rbp, %r13
-               	jmp	0x44ea03 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d3>
-               	cmpl	132(%rax), %ebp
-               	je	0x44e94d <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x51d>
-               	cmpl	144(%rax), %ebp
-               	jne	0x44ea2d <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5fd>
-               	movq	%r15, %rbx
-               	movq	%r13, %r15
-               	leaq	256(%rsp), %r14
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	652390(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	%rbp, %r14
+               	jmp	0x44ee06 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5e6>
+               	cmpl	132(%rax), %ecx
+               	je	0x44ed4a <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x52a>
+               	cmpl	144(%rax), %ecx
+               	jne	0x44ee30 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x610>
+               	movq	%r15, 72(%rsp)
+               	movl	%ecx, %r15d
+               	movq	%r14, (%rsp)
+               	leaq	240(%rsp), %r13
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	653279(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44e97e <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x54e>
-               	leaq	652378(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	9495(%rip), %rsi        # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	652203(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movl	%ebp, %esi
-               	movq	%r14, %rdx
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
+               	je	0x44ed85 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x565>
+               	leaq	653267(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	9616(%rip), %rsi        # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	653092(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	%r15d, %ebp
+               	movl	%r15d, %esi
+               	movq	%r13, %rdx
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
@@@@
-               	movq	%rbx, %r12
-               	movq	296(%rbx), %rdi
+               	movq	72(%rsp), %r15
+               	movq	296(%r15), %rdi
@@@@
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	%r15, %rdi
-               	movq	%r12, %r15
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %rdi
@@@@
-               	movq	8(%rsp), %rax
-               	movq	%rax, 48(%rbx)
+               	movq	%r12, 48(%rbx)
@@@@
-               	movq	%r14, %r13
-               	movq	24(%rsp), %r12
-               	movq	%r13, (%r12)
-               	movq	104(%rsp), %rax
+               	movq	24(%rsp), %rbp
+               	movq	%r14, (%rbp)
+               	movq	88(%rsp), %rax
@@@@
-               	movq	%r13, %rax
-               	addq	$312, %rsp              # imm = 0x138
+               	movq	%r14, %rax
+               	addq	$296, %rsp              # imm = 0x128

@@ -53560,138 +53807,150 @@
@@@[(3, 20), (21, 43), (56, 61), (62, 67), (71, 72), (74, 98), (99, 119), (122, 125), (134, 137), (138, 146), (147, 166), (189, 202), (225, 235)]@@@
-               	cmpl	140(%rax), %ebp
-               	je	0x44ea41 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x611>
-               	cmpl	128(%rax), %ebp
-               	jne	0x44ebb1 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x781>
-               	movq	%r13, %r14
-               	leaq	272(%rsp), %rbx
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	652149(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	cmpl	140(%rax), %ecx
+               	je	0x44ee44 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x624>
+               	cmpl	128(%rax), %ecx
+               	jne	0x44efd8 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x7b8>
+               	movq	%r15, %r13
+               	movl	%ecx, %r15d
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	653043(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44ea6f <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x63f>
-               	leaq	652137(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	9254(%rip), %rsi        # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	651962(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movl	%ebp, %esi
-               	movq	%rbx, %rdx
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
-               	movq	%rax, 72(%rsp)
-               	movq	296(%r15), %rdi
+               	je	0x44ee71 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x651>
+               	leaq	653031(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	9380(%rip), %rsi        # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	652856(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	%r15d, %esi
+               	movl	%r15d, 20(%rsp)
+               	leaq	256(%rsp), %rdx
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
+               	movq	%rax, 64(%rsp)
+               	movq	%r13, %r15
+               	movq	296(%r13), %rdi
@@@@
-               	movl	%ebp, %esi
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	%r14, %rdi
+               	movl	20(%rsp), %esi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
@@@@
-               	movq	8(%rsp), %rax
-               	movq	%rax, 48(%rbx)
-               	movq	72(%rsp), %rax
+               	movq	%r12, 48(%rbx)
+               	movq	64(%rsp), %rax
@@@@
+               	movq	%r14, %rdi
@@@@
-               	jmp	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
-               	cmpl	140(%rax), %ebp
-               	je	0x44eb13 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x6e3>
-               	cmpl	128(%rax), %ebp
-               	je	0x44eb13 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x6e3>
-               	cmpl	152(%rax), %ebp
-               	jne	0x44eca2 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x872>
-               	leaq	192(%rsp), %r14
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	651942(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	%r13, %r14
+               	jmp	0x44ee0b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5eb>
+               	cmpl	140(%rax), %ecx
+               	je	0x44ef23 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x703>
+               	cmpl	128(%rax), %ecx
+               	je	0x44ef23 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x703>
+               	cmpl	152(%rax), %ecx
+               	jne	0x44f0d5 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x8b5>
+               	movq	%r15, %r13
+               	movl	%ecx, %r15d
+               	leaq	176(%rsp), %rbp
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	652812(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	je	0x44eb3e <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x70e>
-               	leaq	651930(%rip), %rdi      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
-               	leaq	9047(%rip), %rsi        # 0x450e90 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	651755(%rip), %rdi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	movl	%ebp, %esi
-               	movq	%r14, %rdx
-               	callq	0x451410 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
-               	movl	%ebp, %r13d
-               	movq	%rax, %r14
+               	je	0x44ef58 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x738>
+               	leaq	652800(%rip), %rdi      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
+               	leaq	9149(%rip), %rsi        # 0x451310 <kfun:kotlin.text.regex.Quantifier.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	652625(%rip), %rdi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	%r15d, %r14d
+               	movl	%r15d, %esi
+               	movq	%rbp, %rdx
+               	callq	0x451890 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier>
+               	movq	%rax, 64(%rsp)
@@@@
-               	movq	296(%r15), %rdi
+               	movq	%r13, %r15
+               	movq	296(%r13), %rdi
@@@@
-               	movq	%rbx, (%r12)
+               	movq	24(%rsp), %r13
+               	movq	%rbx, (%r13)
@@@@
-               	movq	%r14, %rsi
-               	movq	16(%rsp), %rdx
-               	movq	8(%rsp), %rcx
-               	movl	%r13d, %r8d
+               	movq	64(%rsp), %rsi
+               	movq	(%rsp), %rdx
+               	movq	%r12, %rcx
+               	movl	%r14d, %r8d
@@@@
-               	callq	0x457ba0 <kfun:kotlin.text.regex.PossessiveGroupQuantifierSet#<init>(kotlin.text.regex.Quantifier;kotlin.text.regex.AbstractSet;kotlin.text.regex.AbstractSet;kotlin.Int;kotlin.Int){}>
-               	movq	%rbx, %r13
-               	jmp	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
-               	cmpl	148(%rax), %ebp
-               	movq	%r13, 16(%rsp)
-               	jne	0x44ec2a <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x7fa>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	651779(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	%r13, %rbp
+               	callq	0x4580f0 <kfun:kotlin.text.regex.PossessiveGroupQuantifierSet#<init>(kotlin.text.regex.Quantifier;kotlin.text.regex.AbstractSet;kotlin.text.regex.AbstractSet;kotlin.Int;kotlin.Int){}>
+               	movq	%rbx, %r14
+               	jmp	0x44ee0b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5eb>
+               	cmpl	148(%rax), %ecx
+               	movq	%r14, (%rsp)
+               	movq	%r12, 8(%rsp)
+               	jne	0x44f059 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x839>
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	652628(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	leaq	491435(%rip), %rax      # 0x4c6bd0 <ktypeglobal:kotlin.text.regex.LeafQuantifierSet#internal>
-               	jmp	0x44ee00 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x9d0>
-               	cmpl	156(%rax), %ebp
-               	jne	0x44ed8d <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x95d>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	651659(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	leaq	492284(%rip), %rax      # 0x4c7350 <ktypeglobal:kotlin.text.regex.LeafQuantifierSet#internal>
+               	jmp	0x44f236 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xa16>
+               	cmpl	156(%rax), %ecx
+               	jne	0x44f1bf <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x99f>
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	652504(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
-               	leaq	494259(%rip), %rax      # 0x4c7750 <ktypeglobal:kotlin.text.regex.ReluctantLeafQuantifierSet#internal>
-               	jmp	0x44ee00 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x9d0>
-               	cmpl	160(%rax), %ebp
-               	movq	%rbx, 80(%rsp)
-               	jne	0x44ee31 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xa01>
+               	leaq	495104(%rip), %rax      # 0x4c7ed0 <ktypeglobal:kotlin.text.regex.ReluctantLeafQuantifierSet#internal>
+               	jmp	0x44f236 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xa16>
+               	cmpl	160(%rax), %ecx
+               	jne	0x44f26e <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xa4e>
+               	movq	16(%rbx), %rdi

@@ -53701,74 +53960,78 @@
@@@[(3, 5), (12, 14), (15, 18), (22, 29), (30, 32), (33, 37), (48, 61), (87, 88), (91, 95), (99, 109)]@@@
-               	movq	%r15, %rbx
+               	movq	%r15, %rbp
@@@@
-               	movq	%rax, 288(%rbx)
+               	movq	%rax, 288(%rbp)
@@@@
-               	je	0x44f2b9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe89>
+               	je	0x44f743 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf23>
+               	movq	%r12, 8(%rsp)
@@@@
-               	movq	80(%rsp), %rdx
-               	jne	0x44f2be <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe8e>
-               	movq	%rbx, %rcx
-               	movq	651221(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	jne	0x44f748 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf28>
+               	movq	%rbp, %rcx
+               	movq	652067(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movl	52(%rdx), %r12d
+               	movl	52(%rbx), %r12d
@@@@
-               	movl	%eax, 52(%rdx)
-               	movq	%rbx, %r13
+               	movl	%eax, 52(%rbx)
+               	movq	%rbp, %r13
@@@@
-               	movq	%rbp, 208(%rsp)
-               	jmp	0x44ef12 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xae2>
-               	cmpl	152(%rax), %ebp
-               	jne	0x44ef52 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xb22>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movl	651304(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	%rbp, 192(%rsp)
+               	jmp	0x44f353 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xb33>
+               	cmpl	152(%rax), %ecx
+               	jne	0x44f37f <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xb5f>
+               	movq	16(%rbx), %rdi
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movl	652146(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>
@@@@
+               	movq	24(%rsp), %r12
@@@@
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	16(%rsp), %rax
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %rax
@@@@
-               	movq	%rbx, %r13
-               	jmp	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
-               	cmpl	168(%rax), %ebp
-               	jne	0x44f016 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xbe6>
+               	movq	%r12, %rbp
+               	movq	%rbx, %r14
+               	jmp	0x44ee0b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5eb>
+               	cmpl	168(%rax), %ecx
+               	jne	0x44f44f <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xc2f>
+               	movq	16(%rbx), %rdi

@@ -53778,56 +54041,52 @@
@@@[(3, 5), (12, 14), (15, 18), (22, 29), (30, 32), (33, 37), (52, 56), (60, 66), (67, 75)]@@@
-               	movq	%r15, %rbx
+               	movq	%r15, %rbp
@@@@
-               	movq	%rax, 288(%rbx)
+               	movq	%rax, 288(%rbp)
@@@@
-               	je	0x44f2b9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe89>
+               	je	0x44f743 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf23>
+               	movq	%r12, 8(%rsp)
@@@@
-               	movq	80(%rsp), %rdx
-               	jne	0x44f2be <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe8e>
-               	movq	%rbx, %rcx
-               	movq	650827(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	jne	0x44f748 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf28>
+               	movq	%rbp, %rcx
+               	movq	651658(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movl	52(%rdx), %r12d
+               	movl	52(%rbx), %r12d
@@@@
-               	movl	%eax, 52(%rdx)
-               	movq	%rbx, %r13
+               	movl	%eax, 52(%rbx)
+               	movq	%rbp, %r13
@@@@
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	16(%rsp), %rdi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %rdi
@@@@
-               	movl	%r12d, 64(%rbx)
-               	movq	(%rdi), %rax
-               	andq	$-4, %rax
-               	movq	(%rax), %rax
-               	movq	%rbp, %rsi
-               	callq	*152(%rax)
@@@@
-               	jmp	0x44e931 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x501>
-               	cmpl	160(%rax), %ebp
-               	jne	0x44f10e <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xcde>
+               	movl	%r12d, 64(%rbx)
+               	jmp	0x44ed1b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x4fb>
+               	cmpl	160(%rax), %ecx
+               	jne	0x44f542 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xd22>
+               	movq	16(%rbx), %rdi

@@ -53837,33 +54096,38 @@
@@@[(3, 12), (13, 21), (24, 30), (31, 34), (36, 39), (42, 52)]@@@
-               	movq	40(%rdi), %r12
-               	movq	%r12, 56(%rsp)
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movq	%r12, 288(%rsp)
+               	movq	%r15, %rbx
+               	movq	40(%rdi), %r15
+               	movq	%r15, 56(%rsp)
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	%r15, 272(%rsp)
@@@@
-               	movq	%rax, 288(%r15)
-               	testq	%r12, %r12
-               	je	0x44f2b9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe89>
-               	movq	(%r12), %rax
+               	movq	%rax, 288(%rbx)
+               	testq	%r15, %r15
+               	je	0x44f743 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf23>
+               	movq	(%r15), %rax
@@@@
-               	jne	0x44f2cd <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe9d>
-               	movq	650548(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	jne	0x44f748 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf28>
+               	movq	%rbx, %rcx
+               	movq	%rbp, %r12
+               	movq	651387(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movq	296(%r15), %rdi
+               	movq	%rbx, %r13
+               	movq	296(%rcx), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%r15, %r13
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
@@@@
-               	leaq	490431(%rip), %rax      # 0x4c6bd0 <ktypeglobal:kotlin.text.regex.LeafQuantifierSet#internal>
-               	jmp	0x44f27e <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe4e>
-               	cmpl	164(%rax), %ebp
-               	jne	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
+               	leaq	491270(%rip), %rax      # 0x4c7350 <ktypeglobal:kotlin.text.regex.LeafQuantifierSet#internal>
+               	jmp	0x44f60d <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xded>
+               	movq	%rbp, %r13
+               	cmpl	164(%rax), %ecx
+               	jne	0x44f643 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe23>
+               	movq	16(%rbx), %rdi

@@ -53873,47 +54137,45 @@
@@@[(3, 12), (14, 20), (23, 41), (50, 52), (53, 72)]@@@
-               	movq	%r15, %rbp
-               	movq	40(%rdi), %r13
-               	movq	%r13, 56(%rsp)
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movq	%r13, 232(%rsp)
+               	movq	40(%rdi), %rbp
+               	movq	%rbp, 56(%rsp)
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	%rbp, 216(%rsp)
@@@@
-               	testq	%r13, %r13
-               	je	0x44f2b9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe89>
-               	movq	(%r13), %rax
+               	testq	%rbp, %rbp
+               	je	0x44f743 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf23>
+               	movq	(%rbp), %rax
@@@@
-               	movq	80(%rsp), %rdx
-               	jne	0x44f2dc <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xeac>
-               	movq	%r15, %rcx
-               	movq	650341(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	movl	148(%rax), %r14d
-               	movl	52(%rdx), %r15d
-               	leal	1(%r15), %eax
-               	movl	%eax, 52(%rdx)
-               	movq	%rcx, %rbp
-               	movq	296(%rcx), %rdi
+               	jne	0x44f757 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf37>
+               	movq	651184(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	148(%rax), %eax
+               	movl	%eax, 20(%rsp)
+               	movl	52(%rbx), %r14d
+               	leal	1(%r14), %eax
+               	movl	%eax, 52(%rbx)
+               	movq	296(%r15), %rdi
@@@@
-               	movq	%rbx, (%r12)
+               	movq	%rbx, (%r13)
@@@@
-               	movq	%r13, %rsi
-               	movq	16(%rsp), %rdx
-               	movq	8(%rsp), %rcx
-               	movl	%r14d, %r8d
-               	movl	%r15d, %r9d
-               	movq	%rbp, %r15
-               	jmp	0x44eba4 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x774>
-               	cmpl	168(%rax), %ebp
-               	jne	0x44f1bc <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xd8c>
+               	movq	%rbp, %rsi
+               	movq	%r13, %rbp
+               	movq	(%rsp), %rdx
+               	movq	%r12, %rcx
+               	movl	20(%rsp), %r8d
+               	movl	%r14d, %r9d
+               	jmp	0x44efcb <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x7ab>
+               	cmpl	168(%rax), %ecx
+               	jne	0x44f64b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe2b>
+               	movq	16(%rbx), %rdi

@@ -53923,29 +54185,52 @@
@@@[(3, 12), (13, 21), (24, 30), (31, 34), (36, 65)]@@@
-               	movq	40(%rdi), %r12
-               	movq	%r12, 56(%rsp)
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movq	%r12, 296(%rsp)
+               	movq	%r15, %rbx
+               	movq	40(%rdi), %r15
+               	movq	%r15, 56(%rsp)
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	%r15, 280(%rsp)
@@@@
-               	movq	%rax, 288(%r15)
-               	testq	%r12, %r12
-               	je	0x44f2b9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe89>
-               	movq	(%r12), %rax
+               	movq	%rax, 288(%rbx)
+               	testq	%r15, %r15
+               	je	0x44f743 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf23>
+               	movq	(%r15), %rax
@@@@
-               	jne	0x44f2cd <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe9d>
-               	movq	650104(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	jne	0x44f748 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf28>
+               	movq	%rbx, %rcx
+               	movq	%rbp, %r12
+               	movq	650936(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	movq	296(%r15), %rdi
+               	movq	%rbx, %r13
+               	movq	296(%rcx), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%r15, %r13
-               	jmp	0x44f268 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe38>
-               	cmpl	164(%rax), %ebp
-               	jne	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %rbp
+               	leaq	16(%rax), %rbx
+               	movq	$0, 8(%rax)
+               	leaq	493763(%rip), %rax      # 0x4c7ed0 <ktypeglobal:kotlin.text.regex.ReluctantLeafQuantifierSet#internal>
+               	movq	%rax, 16(%rbp)
+               	movq	%rbx, (%r12)
+               	movq	%rbx, %rdi
+               	movl	%r14d, %esi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %rax
+               	movq	%rax, 40(%rbp)
+               	movq	8(%rsp), %rax
+               	movq	%rax, 48(%rbp)
+               	movq	%r15, 56(%rbp)
+               	movq	%r12, %rbp
+               	movq	%r13, %r15
+               	movq	%rbx, %r14
+               	jmp	0x44ee0b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5eb>
+               	movq	%r13, %rbp
+               	jmp	0x44ee0b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5eb>
+               	cmpl	164(%rax), %ecx
+               	jne	0x44ee0b <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5eb>
+               	movq	16(%rbx), %rdi

@@ -53955,57 +54240,53 @@
@@@[(3, 12), (13, 21), (24, 34), (45, 49), (50, 56), (59, 71), (72, 85)]@@@
-               	movq	40(%rdi), %r12
-               	movq	%r12, 56(%rsp)
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
-               	movq	%r12, 304(%rsp)
+               	movq	%r15, %rbx
+               	movq	40(%rdi), %r15
+               	movq	%r15, 56(%rsp)
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	%r15, 288(%rsp)
@@@@
-               	movq	%rax, 288(%r15)
-               	testq	%r12, %r12
-               	je	0x44f2b9 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe89>
-               	movq	(%r12), %rax
+               	movq	%rax, 288(%rbx)
+               	testq	%r15, %r15
+               	je	0x44f743 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf23>
+               	movq	(%r15), %rax
@@@@
-               	jne	0x44f2cd <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe9d>
-               	movq	%r15, %rcx
-               	movq	649927(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	movl	164(%rax), %r14d
-               	movq	%r15, %r13
+               	jne	0x44f748 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xf28>
+               	movq	%rbx, %rcx
+               	movq	650678(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	164(%rax), %r12d
+               	movq	%rbx, %r13
@@@@
-               	movq	24(%rsp), %r15
-               	movq	%rbx, (%r15)
+               	movq	24(%rsp), %r14
+               	movq	%rbx, (%r14)
@@@@
-               	movl	%r14d, %esi
-               	callq	0x451e70 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
-               	movq	16(%rsp), %rax
+               	movl	%r12d, %esi
+               	callq	0x4522e0 <kfun:kotlin.text.regex.SimpleSet#<init>(kotlin.Int){}>
+               	movq	(%rsp), %rax
@@@@
-               	movq	%r12, 56(%rbp)
-               	movq	%r15, %r12
-               	movq	%r13, %r15
-               	movq	%rbx, %r13
-               	jmp	0x44ea08 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0x5d8>
-               	callq	0x421090 <ThrowNullPointerException>
-               	leaq	483739(%rip), %rsi      # 0x4c5460 <ktypeglobal:kotlin.text.regex.Quantifier#internal>
+               	movq	%r15, 56(%rbp)
+               	movq	%r14, %rbp
+               	jmp	0x44f638 <kfun:kotlin.text.regex.Pattern.processQuantifier#internal+0xe18>
+               	callq	0x4212a0 <ThrowNullPointerException>
+               	leaq	484497(%rip), %rsi      # 0x4c5be0 <ktypeglobal:kotlin.text.regex.Quantifier#internal>
@@@@
-               	callq	0x421230 <ThrowClassCastException>
-               	leaq	483724(%rip), %rsi      # 0x4c5460 <ktypeglobal:kotlin.text.regex.Quantifier#internal>
-               	movq	%r12, %rdi
-               	callq	0x421230 <ThrowClassCastException>
-               	leaq	483709(%rip), %rsi      # 0x4c5460 <ktypeglobal:kotlin.text.regex.Quantifier#internal>
-               	movq	%r13, %rdi
-               	callq	0x421230 <ThrowClassCastException>
-               	nopl	(%rax,%rax)
+               	callq	0x421440 <ThrowClassCastException>
+               	leaq	484482(%rip), %rsi      # 0x4c5be0 <ktypeglobal:kotlin.text.regex.Quantifier#internal>
+               	movq	%rbp, %rdi
+               	callq	0x421440 <ThrowClassCastException>
+               	nopw	%cs:(%rax,%rax)

@@ -54031,56 +54312,56 @@
@@@[(36, 37), (40, 45), (63, 77)]@@@
-               	movl	48(%rbx), %r14d
@@@@
-               	movq	649556(%rip), %rax      # 0x4edd28 <kvar:kotlin.text.regex.Pattern.$companion#internal>
-               	movl	12(%rax), %r13d
+               	movq	650328(%rip), %rax      # 0x4ee4a8 <kvar:kotlin.text.regex.Pattern.$companion#internal>
+               	movl	12(%rax), %r14d
+               	movl	48(%rbx), %r13d
@@@@
-               	je	0x44f438 <kfun:kotlin.text.regex.Pattern.createBackReference#internal+0x148>
-               	leaq	649636(%rip), %rdi      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
-               	leaq	8541(%rip), %rsi        # 0x451590 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	andl	%r13d, %r14d
-               	cmpl	%r13d, %r14d
-               	movq	649459(%rip), %rax      # 0x4edd38 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
+               	je	0x44f8b8 <kfun:kotlin.text.regex.Pattern.createBackReference#internal+0x148>
+               	leaq	650404(%rip), %rdi      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	8525(%rip), %rsi        # 0x451a00 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	andl	%r14d, %r13d
+               	cmpl	%r14d, %r13d
+               	movq	650227(%rip), %rax      # 0x4ee4b8 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>

@@ -54179,91 +54460,91 @@
@@@[(18, 24), (36, 42), (100, 110)]@@@
-               	movl	64(%rdi), %eax
-               	movq	648921(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	20(%rcx), %eax
+               	movq	649692(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	20(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
@@@@
-               	movl	64(%rdi), %eax
-               	movq	648868(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	20(%rcx), %eax
+               	movq	649639(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	20(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
@@@@
-               	movl	64(%rdi), %eax
-               	movq	648656(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	24(%rcx), %eax
-               	jne	0x44f8ac <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x36c>
-               	callq	0x4475f0 <kfun:kotlin.text.regex.Lexer.movePointer#internal>
+               	movq	649427(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	24(%rax), %eax
+               	cmpl	%eax, 64(%rdi)
+               	jne	0x44fd2c <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x36c>
+               	callq	0x447980 <kfun:kotlin.text.regex.Lexer.movePointer#internal>

@@ -54283,138 +54564,138 @@
@@@[(43, 47), (48, 52)]@@@
-               	movl	64(%rdi), %ecx
-               	movq	648344(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movq	649115(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	32(%rax), %ecx
@@@@
-               	cmpl	32(%rax), %ecx
-               	jne	0x44f65e <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x11e>
+               	cmpl	%ecx, 64(%rdi)
+               	jne	0x44fade <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x11e>

@@ -54469,127 +54750,126 @@
@@@[(100, 108), (158, 161)]@@@
-               	movl	64(%rax), %eax
-               	movq	647236(%rip), %rcx      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	20(%rcx), %eax
-               	je	0x44f65e <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x11e>
+               	movq	648007(%rip), %rcx      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	20(%rcx), %ecx
+               	cmpl	%ecx, 64(%rax)
+               	je	0x44fade <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x11e>
@@@@
-               	movl	$4294966768, %ecx       # imm = 0xFFFFFDF0
-               	addl	%ecx, %eax
+               	addl	$4294966768, %eax       # imm = 0xFFFFFDF0

@@ -54610,64 +54890,64 @@
@@@[(10, 11), (13, 16)]@@@
+               	cmpb	$0, 57(%r15)
@@@@
-               	cmpb	$0, 57(%r15)
-               	je	0x44fed2 <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x992>
+               	je	0x450350 <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0x990>

@@ -54675,25 +54955,25 @@
@@@[(10, 11), (12, 15)]@@@
-               	movq	40(%r15), %rdi
@@@@
-               	je	0x44ffd2 <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0xa92>
+               	movq	40(%r15), %rdi
+               	je	0x450450 <kfun:kotlin.text.regex.Pattern.processRangeExpression#internal+0xa90>

@@ -54934,25 +55214,25 @@
@@@[(24, 28)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nopw	%cs:(%rax,%rax)

@@ -55509,57 +55789,57 @@
@@@[(3, 7), (9, 11), (16, 22), (24, 42), (46, 48), (50, 52), (54, 56), (69, 75)]@@@
-               	movq	-64(%rax), %r12
-               	movq	288(%r12), %rax
+               	movq	-64(%rax), %r15
+               	movq	288(%r15), %rax
@@@@
-               	movq	%rax, 288(%r12)
+               	movq	%rax, 288(%r15)
@@@@
-               	je	0x450ef2 <kfun:kotlin.text.regex.Quantifier.$init_global#internal+0x62>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	296(%r12), %rdi
+               	je	0x451370 <kfun:kotlin.text.regex.Quantifier.$init_global#internal+0x60>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	296(%r15), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r15
-               	addq	$16, %rax
-               	movq	$0, 8(%r15)
-               	leaq	476626(%rip), %rcx      # 0x4c54f0 <ktypeglobal:kotlin.text.regex.Quantifier.Companion#internal>
-               	movq	%rcx, 16(%r15)
-               	movq	%rax, 24(%rsp)
-               	movq	%rax, 642562(%rip)      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	leaq	642555(%rip), %r14      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
+               	movq	$0, 8(%rax)
+               	leaq	477400(%rip), %rdx      # 0x4c5c70 <ktypeglobal:kotlin.text.regex.Quantifier.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 643336(%rip)      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	leaq	643329(%rip), %r14      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movq	643322(%rip), %r12      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
@@@@
-               	movq	288(%r12), %rax
+               	movq	288(%r15), %rax
@@@@
-               	movq	%rax, 288(%r12)
+               	movq	%rax, 288(%r15)
@@@@
-               	movq	296(%r12), %rdi
+               	movq	296(%r15), %rdi
@@@@
-               	callq	0x451080 <kfun:kotlin.text.regex.Quantifier#<init>(kotlin.Int;kotlin.Int){}>
-               	movq	%rbx, 24(%r15)
-               	movq	296(%r12), %rdi
+               	callq	0x451500 <kfun:kotlin.text.regex.Quantifier#<init>(kotlin.Int;kotlin.Int){}>
+               	movq	%rbx, 8(%r12)
+               	movq	296(%r15), %rdi

@@ -55567,12 +55847,12 @@
@@@[(3, 9)]@@@
-               	callq	0x451080 <kfun:kotlin.text.regex.Quantifier#<init>(kotlin.Int;kotlin.Int){}>
-               	movq	%rbx, 32(%r15)
-               	movq	296(%r12), %rdi
+               	callq	0x451500 <kfun:kotlin.text.regex.Quantifier#<init>(kotlin.Int;kotlin.Int){}>
+               	movq	%rbx, 16(%r12)
+               	movq	296(%r15), %rdi

@@ -55580,16 +55860,16 @@
@@@[(3, 9), (10, 14), (18, 20)]@@@
-               	callq	0x451080 <kfun:kotlin.text.regex.Quantifier#<init>(kotlin.Int;kotlin.Int){}>
-               	movq	%rbx, 40(%r15)
-               	movl	$4294967295, 48(%r15)   # imm = 0xFFFFFFFF
+               	callq	0x451500 <kfun:kotlin.text.regex.Quantifier#<init>(kotlin.Int;kotlin.Int){}>
+               	movq	%rbx, 24(%r12)
+               	movl	$4294967295, 32(%r12)   # imm = 0xFFFFFFFF
@@@@
-               	movq	%rax, 288(%r12)
-               	movq	642272(%rip), %rsi      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movq	%rax, 288(%r15)
+               	movq	643041(%rip), %rsi      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
@@@@
-               	movq	%rax, 288(%r12)
+               	movq	%rax, 288(%r15)

@@ -55812,36 +56092,35 @@
@@@[(3, 7), (12, 16), (18, 20), (25, 46), (48, 50)]@@@
-               	movl	%esi, %r12d
-               	movq	%rdi, %rbx
+               	movl	%esi, %ebp
+               	movq	%rdi, %r15
@@@@
-               	movq	-64(%rax), %rbp
-               	movq	288(%rbp), %rax
+               	movq	-64(%rax), %rbx
+               	movq	288(%rbx), %rax
@@@@
-               	movq	%rax, 288(%rbp)
+               	movq	%rax, 288(%rbx)
@@@@
-               	je	0x45147d <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x6d>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	641164(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	cmpl	%r12d, 124(%rax)
-               	je	0x45149c <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x8c>
-               	cmpl	%r12d, 128(%rax)
-               	je	0x45149c <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x8c>
-               	cmpl	%r12d, 132(%rax)
-               	jne	0x4514bf <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xaf>
-               	addq	$8, %rbx
-               	movq	(%rbx), %rax
+               	je	0x4518fc <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x6c>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	641933(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	cmpl	%ebp, 124(%rax)
+               	je	0x451918 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x88>
+               	cmpl	%ebp, 128(%rax)
+               	je	0x451918 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x88>
+               	cmpl	%ebp, 132(%rax)
+               	jne	0x451938 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xa8>
+               	movq	8(%r15), %rax
@@@@
-               	movq	%rcx, 288(%rbp)
+               	movq	%rcx, 288(%rbx)

@@ -55849,54 +56128,54 @@
@@@[(3, 35), (37, 41), (42, 46), (47, 51), (58, 64), (75, 79), (80, 84)]@@@
-               	cmpl	%r12d, 148(%rax)
-               	je	0x4514da <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xca>
-               	cmpl	%r12d, 152(%rax)
-               	je	0x4514da <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xca>
-               	cmpl	%r12d, 156(%rax)
-               	jne	0x4514e0 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xd0>
-               	addq	$24, %rbx
-               	jmp	0x4514a0 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x90>
-               	cmpl	%r12d, 136(%rax)
-               	je	0x4514fb <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xeb>
-               	cmpl	%r12d, 140(%rax)
-               	je	0x4514fb <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xeb>
-               	cmpl	%r12d, 144(%rax)
-               	jne	0x451501 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xf1>
-               	addq	$16, %rbx
-               	jmp	0x4514a0 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x90>
+               	cmpl	%ebp, 148(%rax)
+               	je	0x451950 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xc0>
+               	cmpl	%ebp, 152(%rax)
+               	je	0x451950 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xc0>
+               	cmpl	%ebp, 156(%rax)
+               	jne	0x451956 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xc6>
+               	movq	24(%r15), %rax
+               	jmp	0x45191c <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x8c>
+               	cmpl	%ebp, 136(%rax)
+               	je	0x45196e <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xde>
+               	cmpl	%ebp, 140(%rax)
+               	je	0x45196e <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xde>
+               	cmpl	%ebp, 144(%rax)
+               	jne	0x451974 <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0xe4>
+               	movq	16(%r15), %rax
+               	jmp	0x45191c <kfun:kotlin.text.regex.Quantifier.Companion#fromLexerToken(kotlin.Int){}kotlin.text.regex.Quantifier+0x8c>
@@@@
-               	leaq	240400(%rip), %rdx      # 0x48c022 <typeinfo name for kotlin::gc::GCSchedulerData+0x19d1>
-               	leaq	48(%rsp), %rbx
+               	leaq	244061(%rip), %rdx      # 0x48d2e2 <typeinfo name for kotlin::gc::GCSchedulerData+0x19d1>
+               	leaq	48(%rsp), %r12
@@@@
-               	movq	%rbx, %rdi
-               	movl	%r12d, %ecx
+               	movq	%r12, %rdi
+               	movl	%ebp, %ecx
@@@@
-               	callq	0x47a780 <konan::snprintf(char*, unsigned long, char const*, ...)>
-               	movq	%rbx, %rdi
+               	callq	0x47b940 <konan::snprintf(char*, unsigned long, char const*, ...)>
+               	movq	%r12, %rdi
@@@@
-               	callq	0x47a310 <Kotlin_String_plusImpl>
-               	movq	%rax, %rbx
-               	movq	296(%rbp), %rdi
+               	callq	0x47b4d0 <Kotlin_String_plusImpl>
+               	movq	%rax, %r14
+               	movq	296(%rbx), %rdi
@@@@
-               	movq	%rbx, %rsi
-               	callq	0x416d50 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
+               	movq	%r14, %rsi
+               	callq	0x416d30 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	nopl	(%rax)
+               	callq	0x47ef60 <ThrowException>
+               	nop

@@ -55908,64 +56187,64 @@
@@@[(3, 7), (9, 17), (18, 24), (26, 44), (47, 49), (51, 61), (72, 74), (75, 79), (83, 85), (91, 93)]@@@
-               	movq	-64(%rax), %r15
-               	movq	288(%r15), %rax
+               	movq	-64(%rax), %rbx
+               	movq	288(%rbx), %rax
@@@@
-               	movq	%rax, 288(%r15)
-               	movabsq	$17179869184, %r12      # imm = 0x400000000
-               	movq	%r12, 16(%rsp)
-               	movb	645715(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	%rax, 288(%rbx)
+               	movabsq	$17179869184, %r15      # imm = 0x400000000
+               	movq	%r15, 16(%rsp)
+               	movb	646507(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x4515ee <kfun:kotlin.text.regex.AbstractSet.$init_global#internal+0x5e>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	296(%r15), %rdi
+               	je	0x451a5e <kfun:kotlin.text.regex.AbstractSet.$init_global#internal+0x5e>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	296(%rbx), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %rbx
-               	addq	$16, %rax
-               	movq	$0, 8(%rbx)
-               	leaq	475095(%rip), %rcx      # 0x4c55f0 <ktypeglobal:kotlin.text.regex.AbstractSet.Companion#internal>
-               	movq	%rcx, 16(%rbx)
-               	movq	%rax, 24(%rsp)
-               	movq	%rax, 640783(%rip)      # 0x4edd38 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
-               	leaq	640776(%rip), %r14      # 0x4edd38 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
+               	movq	$0, 8(%rax)
+               	leaq	475882(%rip), %rdx      # 0x4c5d70 <ktypeglobal:kotlin.text.regex.AbstractSet.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 641570(%rip)      # 0x4ee4b8 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
+               	leaq	641563(%rip), %r14      # 0x4ee4b8 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
+               	movq	641556(%rip), %r12      # 0x4ee4b8 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
@@@@
-               	movq	288(%r15), %rax
+               	movq	288(%rbx), %rax
@@@@
-               	movq	%rax, 288(%r15)
-               	movq	%r12, 48(%rsp)
-               	movaps	226671(%rip), %xmm0     # 0x488bd0 <_IO_stdin_used+0x1d0>
-               	movups	%xmm0, 32(%rbx)
-               	movq	296(%r15), %rdi
+               	movq	%rax, 288(%rbx)
+               	movq	%r15, 48(%rsp)
+               	movaps	230331(%rip), %xmm0     # 0x489e90 <_IO_stdin_used+0x190>
+               	movups	%xmm0, 16(%r12)
+               	movq	296(%rbx), %rdi
@@@@
-               	movq	%rcx, 24(%rbx)
+               	movq	%rcx, 8(%r12)
@@@@
-               	movq	%rax, 288(%r15)
-               	movq	640644(%rip), %rsi      # 0x4edd38 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
+               	movq	%rax, 288(%rbx)
+               	movq	641421(%rip), %rsi      # 0x4ee4b8 <kvar:kotlin.text.regex.AbstractSet.$companion#internal>
@@@@
-               	movq	%rax, 288(%r15)
+               	movq	%rax, 288(%rbx)
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -56531,22 +56810,24 @@
@@@[(6, 29), (30, 35)]@@@
-               	je	0x451f44 <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x84>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	32(%r14), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x45212f <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x26f>
-               	movslq	32(%r14), %rdx
-               	movq	40(%rbx), %rsi
-               	cmpl	%edx, 8(%rsi)
-               	jbe	0x45212f <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x26f>
-               	movl	16(%rcx,%rax,4), %eax
+               	je	0x4523b4 <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x84>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	32(%r14), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4525b1 <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x281>
+               	movl	32(%r14), %esi
+               	movq	40(%rbx), %rdx
+               	cmpl	%esi, 8(%rdx)
+               	jbe	0x4525b1 <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x281>
+               	movslq	%ecx, %rcx
+               	movl	16(%rax,%rcx,4), %eax
@@@@
-               	movq	(%rsi), %rax
-               	movl	%ebp, 16(%rsi,%rdx,4)
+               	movslq	%esi, %rax
+               	movq	(%rdx), %rcx
+               	movl	%ebp, 16(%rdx,%rax,4)

@@ -56554,22 +56835,22 @@
@@@[(16, 22)]@@@
-               	leaq	428355(%rip), %r13      # 0x4ba920 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
-               	jmp	0x45200f <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x14f>
-               	nop
+               	leaq	429133(%rip), %r13      # 0x4bb0a0 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
+               	jmp	0x45248f <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x15f>
+               	nopl	(%rax,%rax)

@@ -56597,30 +56878,31 @@
@@@[(25, 36), (37, 39)]@@@
-               	movslq	32(%rax), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x45212f <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x26f>
-               	movq	(%rcx), %rdx
+               	movl	32(%rax), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4525b1 <kfun:kotlin.text.regex.AtomicJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x281>
+               	movslq	%ecx, %rcx
+               	movq	(%rax), %rdx
@@@@
-               	movl	%edx, 16(%rcx,%rax,4)
+               	movl	%edx, 16(%rax,%rcx,4)

@@ -56654,9 +56936,10 @@
@@@[(3, 10)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	leaq	476421(%rip), %rsi      # 0x4c6640 <ktypeglobal:kotlin.text.regex.AtomicFSet#internal>
-               	callq	0x421230 <ThrowClassCastException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	leaq	477187(%rip), %rsi      # 0x4c6dc0 <ktypeglobal:kotlin.text.regex.AtomicFSet#internal>
+               	callq	0x421440 <ThrowClassCastException>
+               	nopw	%cs:(%rax,%rax)

@@ -56701,9 +56984,9 @@
@@@[(3, 5), (6, 8)]@@@
-               	movq	%rcx, %r12
+               	movq	%rcx, %r13
@@@@
-               	movl	%esi, %r13d
+               	movl	%esi, 12(%rsp)

@@ -56718,24 +57001,22 @@
@@@[(11, 13), (14, 17), (18, 28), (29, 32)]@@@
-               	movq	%r12, %rdi
+               	movq	%r13, %rdi
@@@@
-               	callq	0x44a9a0 <kfun:kotlin.text.regex.MatchResultImpl#group(kotlin.Int){}kotlin.String?>
-               	movq	%rax, %rbx
+               	callq	0x44ad30 <kfun:kotlin.text.regex.MatchResultImpl#group(kotlin.Int){}kotlin.String?>
@@@@
-               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
-               	testq	%rbx, %rbx
-               	je	0x4522fb <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x15b>
-               	movq	%r12, 64(%rsp)
-               	movl	%r13d, %r12d
+               	movl	$4294967295, %r12d      # imm = 0xFFFFFFFF
+               	testq	%rax, %rax
+               	je	0x45277b <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x14b>
+               	movq	%rax, %rbx
+               	movq	%r13, 64(%rsp)
@@@@
-               	movl	8(%rbx), %r15d
-               	addl	%r12d, %r15d
+               	movl	8(%rax), %r15d

@@ -56746,33 +57027,30 @@
@@@[(3, 5), (6, 10), (13, 17), (18, 33), (34, 35), (36, 42), (44, 45)]@@@
+               	movl	12(%rsp), %edx
+               	addl	%edx, %r15d
@@@@
-               	jle	0x452283 <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe3>
-               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
-               	jmp	0x4522fb <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x15b>
+               	jg	0x45277b <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x14b>
@@@@
-               	movl	%r12d, 12(%rsp)
-               	movl	%r12d, %edx
-               	callq	0x4608b0 <kfun:kotlin.text#startsWith__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Boolean){}kotlin.Boolean>
+               	callq	0x460eb0 <kfun:kotlin.text#startsWith__at__kotlin.CharSequence(kotlin.CharSequence;kotlin.Int;kotlin.Boolean){}kotlin.Boolean>
@@@@
-               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
-               	je	0x4522fb <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x15b>
-               	movq	%r13, %r12
-               	movslq	28(%rbp), %rax
-               	movq	64(%rsp), %r13
-               	movq	40(%r13), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x452316 <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x176>
+               	je	0x45277b <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x14b>
+               	movl	28(%rbp), %ecx
+               	movq	64(%rsp), %r15
+               	movq	40(%r15), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x452799 <kfun:kotlin.text.regex.BackReferenceSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x169>
+               	movq	%rbp, %rdi
@@@@
+               	movslq	%ecx, %rcx
@@@@
-               	movq	(%rcx), %rdi
-               	movl	%edx, 16(%rcx,%rax,4)
-               	movq	(%rbp), %rax
+               	movq	(%rax), %rbp
+               	movl	%edx, 16(%rax,%rcx,4)
+               	movq	(%rdi), %rax
@@@@
-               	movq	%rbp, %rdi

@@ -56780,11 +57058,13 @@
@@@[(3, 7), (8, 14)]@@@
-               	movq	%r12, %rdx
-               	movq	%r13, %rcx
+               	movq	%r13, %rdx
+               	movq	%r15, %rcx
@@@@
-               	movq	24(%rsp), %rcx
-               	movq	%rcx, 288(%r14)
+               	movl	%eax, %r12d
+               	movq	24(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movl	%r12d, %eax

@@ -56793,8 +57073,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nop

@@ -56804,38 +57084,39 @@
@@@[(3, 11), (15, 17), (18, 22), (24, 27), (32, 47), (48, 57)]@@@
-               	movq	%rcx, 8(%rsp)
-               	movq	%rdx, %r15
-               	movl	%esi, %ebx
-               	movq	%rdi, %r12
+               	movq	%rcx, %r14
+               	movq	%rdx, %rbx
+               	movl	%esi, %ebp
+               	movq	%rdi, %r15
@@@@
-               	leaq	40(%rsp), %rbp
+               	leaq	40(%rsp), %r12
@@@@
-               	movq	-64(%rax), %r14
-               	movq	288(%r14), %rax
+               	movq	-64(%rax), %rcx
+               	movq	288(%rcx), %rax
@@@@
-               	movq	%rax, 288(%r14)
+               	movq	%rcx, 8(%rsp)
+               	movq	%rax, 288(%rcx)
@@@@
-               	je	0x45239f <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x7f>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	24(%r12), %esi
-               	movq	8(%rsp), %rdi
-               	movq	%rbp, %rdx
-               	callq	0x44a9a0 <kfun:kotlin.text.regex.MatchResultImpl#group(kotlin.Int){}kotlin.String?>
-               	movq	%rax, 40(%rsp)
-               	testq	%rax, %rax
-               	je	0x4523e9 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xc9>
+               	je	0x452822 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x82>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	24(%r15), %esi
+               	movq	%r14, %rdi
+               	movq	%r12, %rdx
+               	callq	0x44ad30 <kfun:kotlin.text.regex.MatchResultImpl#group(kotlin.Int){}kotlin.String?>
@@@@
-               	movl	8(%rax), %ebp
-               	addl	%ebx, %ebp
-               	movq	(%r15), %rax
+               	movq	%rax, 40(%rsp)
+               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
+               	testq	%r13, %r13
+               	je	0x452947 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1a7>
+               	movl	8(%r13), %r12d
+               	movq	(%rbx), %rax

@@ -56843,25 +57124,19 @@
@@@[(3, 5), (6, 34)]@@@
-               	movq	%r15, %rdi
+               	movq	%rbx, %rdi
@@@@
-               	cmpl	%eax, %ebp
-               	jle	0x452413 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf3>
-               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
-               	movq	24(%rsp), %rax
-               	movq	%rax, 288(%r14)
-               	movl	%ebx, %eax
-               	addq	$56, %rsp
-               	popq	%rbx
-               	popq	%r12
-               	popq	%r13
-               	popq	%r14
-               	popq	%r15
-               	popq	%rbp
-               	retq
-               	nopl	(%rax,%rax)
-               	addl	$1, %ebx
-               	movq	(%r15), %rax
+               	addl	%ebp, %r12d
+               	cmpl	%eax, %r12d
+               	jle	0x452884 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe4>
+               	movq	8(%rsp), %rcx
+               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
+               	jmp	0x45294c <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1ac>
+               	leaq	48(%rsp), %r12
+               	jmp	0x452893 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf3>
+               	nop
+               	addl	$1, %ebp
+               	movq	(%rbx), %rax

@@ -56869,23 +57144,23 @@
@@@[(3, 5), (6, 12), (13, 21), (22, 26), (27, 33)]@@@
-               	movq	%r15, %rdi
+               	movq	%rbx, %rdi
@@@@
-               	cmpl	%eax, %ebx
-               	jg	0x4523e9 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xc9>
-               	movzbl	642040(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	cmpl	%eax, %ebp
+               	jg	0x452875 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd5>
+               	movzbl	642816(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x452449 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x129>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzbl	32(%r12), %ecx
-               	movq	%r15, %rdi
+               	je	0x4528c9 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x129>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movzbl	32(%r15), %ecx
+               	movq	%rbx, %rdi
@@@@
-               	movl	%ebx, %edx
-               	callq	0x45f6c0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.String;kotlin.Int;kotlin.Boolean){}kotlin.Int>
+               	movl	%ebp, %edx
+               	callq	0x45fca0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.String;kotlin.Int;kotlin.Boolean){}kotlin.Int>
@@@@
-               	js	0x4523e9 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xc9>
-               	movl	%eax, %ebx
-               	movq	(%r15), %rax
+               	js	0x452875 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd5>
+               	movl	%eax, %ebp
+               	movq	(%rbx), %rax

@@ -56893,29 +57168,40 @@
@@@[(3, 5), (6, 12), (14, 18), (20, 22), (24, 26), (27, 33), (34, 51)]@@@
-               	movq	%r15, %rdi
+               	movq	%rbx, %rdi
@@@@
-               	cmpl	%eax, %ebx
-               	jge	0x452410 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf0>
-               	movq	(%r12), %rax
+               	cmpl	%eax, %ebp
+               	jge	0x452890 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf0>
+               	movq	(%r15), %rax
@@@@
-               	movq	%r12, %rdi
-               	leaq	48(%rsp), %rsi
+               	movq	%r15, %rdi
+               	movq	%r12, %rsi
@@@@
-               	addl	%ebx, %esi
+               	addl	%ebp, %esi
@@@@
-               	movq	(%rcx), %rbp
+               	movq	(%rcx), %r8
@@@@
-               	movq	%r15, %rdx
-               	movq	8(%rsp), %rcx
-               	callq	*192(%rbp)
+               	movq	%rbx, %rdx
+               	movq	%r14, %rcx
+               	callq	*192(%r8)
@@@@
-               	js	0x452410 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf0>
-               	jmp	0x4523ee <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xce>
-               	nop
+               	js	0x452890 <kfun:kotlin.text.regex.BackReferenceSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf0>
+               	movl	%ebp, %eax
+               	movq	8(%rsp), %rcx
+               	movq	24(%rsp), %rdx
+               	movq	%rdx, 288(%rcx)
+               	addq	$56, %rsp
+               	popq	%rbx
+               	popq	%r12
+               	popq	%r13
+               	popq	%r14
+               	popq	%r15
+               	popq	%rbp
+               	retq
+               	nopw	(%rax,%rax)

@@ -56924,48 +57210,48 @@
@@@[(6, 14), (18, 20), (33, 39), (40, 44), (46, 50), (51, 60), (61, 62), (63, 67)]@@@
-               	movq	%rcx, %r15
-               	movl	%edx, %ebx
-               	movl	%esi, 12(%rsp)
-               	movq	%rdi, %r13
+               	movq	%rcx, %r12
+               	movl	%edx, %ebp
+               	movl	%esi, %ebx
+               	movq	%rdi, %r15
@@@@
-               	leaq	40(%rsp), %rbp
+               	leaq	40(%rsp), %r13
@@@@
-               	je	0x452556 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x86>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	24(%r13), %esi
+               	je	0x4529f4 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x84>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	24(%r15), %esi
@@@@
-               	movq	%rbp, %rdx
-               	callq	0x44a9a0 <kfun:kotlin.text.regex.MatchResultImpl#group(kotlin.Int){}kotlin.String?>
+               	movq	%r13, %rdx
+               	callq	0x44ad30 <kfun:kotlin.text.regex.MatchResultImpl#group(kotlin.Int){}kotlin.String?>
@@@@
-               	je	0x45257d <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xad>
-               	movq	%rax, %r12
+               	je	0x452a19 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xa9>
+               	movq	%rax, %r13
@@@@
-               	addl	12(%rsp), %eax
-               	cmpl	%ebx, %eax
-               	jle	0x4525b0 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe0>
-               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
+               	addl	%ebx, %eax
+               	cmpl	%ebp, %eax
+               	jle	0x452a40 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd0>
+               	movq	8(%rsp), %rcx
+               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
@@@@
-               	movq	64(%rsp), %rcx
@@@@
-               	movl	%ebx, %eax
-               	addq	$72, %rsp
+               	movl	%ebp, %eax
+               	addq	$56, %rsp

@@ -56973,42 +57259,42 @@
@@@[(3, 11), (12, 26), (27, 33), (35, 37), (39, 43), (45, 47), (48, 50), (51, 53), (54, 64)]@@@
-               	nopw	%cs:(%rax,%rax)
-               	nop
-               	cmpl	12(%rsp), %ebx
-               	jl	0x45257d <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xad>
-               	movzbl	641659(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	cmpl	%ebx, %ebp
+               	jl	0x452a19 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xa9>
+               	movzbl	642421(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x4525c6 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf6>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzbl	32(%r13), %ecx
-               	movq	%r15, %rdi
-               	movq	%r12, %rsi
-               	movl	%ebx, %edx
-               	callq	0x45f760 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.String;kotlin.Int;kotlin.Boolean){}kotlin.Int>
+               	je	0x452a54 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe4>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movzbl	32(%r15), %ecx
+               	movq	%r12, %rdi
+               	movq	%r13, %rsi
+               	movl	%ebp, %edx
+               	callq	0x45fd40 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.String;kotlin.Int;kotlin.Boolean){}kotlin.Int>
@@@@
-               	js	0x45257d <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xad>
-               	movl	%eax, %ebx
-               	movq	(%r13), %rax
+               	js	0x452a19 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xa9>
+               	movl	%eax, %ebp
+               	movq	(%r15), %rax
@@@@
-               	movq	%r13, %rdi
+               	movq	%r15, %rdi
@@@@
-               	movl	8(%r12), %esi
-               	addl	%ebx, %esi
+               	movl	8(%r13), %esi
+               	addl	%ebp, %esi
@@@@
-               	movq	(%rcx), %rbp
+               	movq	(%rcx), %r8
@@@@
-               	movq	%r15, %rdx
+               	movq	%r12, %rdx
@@@@
-               	callq	*192(%rbp)
+               	callq	*192(%r8)
@@@@
-               	jns	0x452582 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xb2>
-               	addl	$-1, %ebx
-               	jmp	0x4525b0 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe0>
-               	nopw	%cs:(%rax,%rax)
+               	jns	0x452aad <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x13d>
+               	addl	$-1, %ebp
+               	jmp	0x452a40 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd0>
+               	movq	8(%rsp), %rcx
+               	jmp	0x452a23 <kfun:kotlin.text.regex.BackReferenceSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xb3>
+               	nopw	(%rax,%rax)

@@ -57016,29 +57302,31 @@
@@@[(6, 34), (40, 44)]@@@
-               	je	0x452649 <kfun:kotlin.text.regex.BackReferenceSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x19>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	28(%rbx), %rax
-               	movq	40(%r14), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x45267f <kfun:kotlin.text.regex.BackReferenceSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x4f>
-               	movslq	28(%rbx), %rdx
-               	movq	40(%r14), %rsi
-               	cmpl	%edx, 8(%rsi)
-               	jbe	0x45267f <kfun:kotlin.text.regex.BackReferenceSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x4f>
-               	movl	16(%rcx,%rax,4), %eax
-               	movq	(%rsi), %rcx
-               	movl	$4294967295, 16(%rsi,%rdx,4) # imm = 0xFFFFFFFF
+               	je	0x452ad9 <kfun:kotlin.text.regex.BackReferenceSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x19>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	28(%rbx), %ecx
+               	movq	40(%r14), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x452b13 <kfun:kotlin.text.regex.BackReferenceSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x53>
+               	movl	28(%rbx), %esi
+               	movq	40(%r14), %rdx
+               	cmpl	%esi, 8(%rdx)
+               	jbe	0x452b13 <kfun:kotlin.text.regex.BackReferenceSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x53>
+               	movslq	%ecx, %rcx
+               	movl	16(%rax,%rcx,4), %eax
+               	movslq	%esi, %rcx
+               	movq	(%rdx), %rsi
+               	movl	$4294967295, 16(%rdx,%rcx,4) # imm = 0xFFFFFFFF
@@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax,%rax)

@@ -57153,18 +57441,18 @@
@@@[(8, 13), (14, 15)]@@@
-               	je	0x45282f <kfun:kotlin.text.regex.CharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xbf>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	28(%r12), %esi
+               	je	0x452cbf <kfun:kotlin.text.regex.CharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xbf>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
+               	movzwl	28(%r12), %esi

@@ -57230,25 +57518,25 @@
@@@[(18, 23), (24, 25)]@@@
-               	je	0x45296f <kfun:kotlin.text.regex.CharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x9f>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	28(%r14), %esi
+               	je	0x452dff <kfun:kotlin.text.regex.CharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x9f>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
+               	movzwl	28(%r14), %esi

@@ -57311,43 +57599,43 @@
@@@[(20, 32), (38, 46)]@@@
-               	movl	$4294966717, %edx       # imm = 0xFFFFFDBD
-               	addl	92(%rcx), %edx
-               	cmpl	$2, %edx
-               	ja	0x452ac2 <kfun:kotlin.text.regex.CharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xa2>
-               	movzwl	28(%r14), %eax
-               	cmpw	28(%r15), %ax
+               	movl	92(%rcx), %ecx
+               	addl	$4294966717, %ecx       # imm = 0xFFFFFDBD
+               	cmpl	$2, %ecx
+               	ja	0x452f53 <kfun:kotlin.text.regex.CharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xa3>
+               	movzwl	28(%r15), %eax
+               	cmpw	%ax, 28(%r14)
@@@@
-               	movl	$4294966713, %edx       # imm = 0xFFFFFDB9
-               	addl	92(%rcx), %edx
-               	cmpl	$1, %edx
-               	ja	0x452b3d <kfun:kotlin.text.regex.CharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x11d>
+               	movl	92(%rcx), %ecx
+               	addl	$4294966713, %ecx       # imm = 0xFFFFFDB9
+               	cmpl	$1, %ecx
+               	ja	0x452fcf <kfun:kotlin.text.regex.CharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x11f>

@@ -57384,7 +57672,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax,%rax)
+               	nopl	(%rax)

@@ -57537,12 +57825,13 @@
@@@[(8, 10), (11, 12)]@@@
-               	movq	%rdi, %r15
+               	movq	%rdi, 16(%rsp)
@@@@
+               	movaps	%xmm0, 192(%rsp)

@@ -57552,19 +57841,18 @@
@@@[(3, 4)]@@@
-               	movaps	%xmm0, 32(%rsp)

@@ -57575,139 +57863,136 @@
@@@[(3, 4), (8, 11), (20, 25), (26, 37), (39, 42), (56, 58), (59, 176), (181, 186), (187, 191), (209, 217), (221, 225)]@@@
+               	movl	$4294967295, %r15d      # imm = 0xFFFFFFFF
@@@@
-               	movq	%rbx, 200(%rsp)
+               	movq	%rbx, 216(%rsp)
+               	movq	16(%rsp), %r15
@@@@
-               	addl	44(%r15), %r12d
-               	movl	634765(%rip), %eax      # 0x4eddbc <state_global$kotlin.text.regex.Lexer>
+               	movl	44(%r15), %eax
+               	movl	%eax, 12(%rsp)
+               	movl	635497(%rip), %eax      # 0x4ee53c <state_global$kotlin.text.regex.Lexer>
@@@@
-               	je	0x452e47 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x117>
-               	leaq	634753(%rip), %rdi      # 0x4eddbc <state_global$kotlin.text.regex.Lexer>
-               	leaq	-49506(%rip), %rsi      # 0x446ce0 <kfun:kotlin.text.regex.Lexer.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	%r15, 8(%rsp)
-               	movq	634557(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	je	0x4532eb <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x12b>
+               	leaq	635485(%rip), %rdi      # 0x4ee53c <state_global$kotlin.text.regex.Lexer>
+               	leaq	-49910(%rip), %rsi      # 0x446ff0 <kfun:kotlin.text.regex.Lexer.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	635294(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
@@@@
-               	js	0x45340e <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6de>
+               	js	0x4538ef <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72f>
+               	addl	%r12d, 12(%rsp)
@@@@
-               	movq	%rcx, 56(%rsp)
-               	movq	%rcx, 64(%rsp)
@@@@
-               	addq	$32, %rax
-               	xorl	%edx, %edx
-               	movl	$2031, %esi             # imm = 0x7EF
-               	leaq	243041(%rip), %r15      # 0x48e420 <(anonymous namespace)::decompositionKeys>
-               	movq	16(%rsp), %rbp
-               	jmp	0x452ed7 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1a7>
-               	nopl	(%rax)
-               	leal	1(%rcx), %edx
-               	cmpl	%esi, %edx
-               	jg	0x452ef7 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1c7>
-               	leal	(%rdx,%rsi), %edi
-               	movl	%edi, %ecx
-               	shrl	$31, %ecx
-               	addl	%edi, %ecx
-               	sarl	%ecx
-               	movslq	%ecx, %rdi
-               	movl	(%r15,%rdi,4), %edi
-               	cmpl	%ebx, %edi
-               	jl	0x452ed0 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1a0>
-               	je	0x452f00 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1d0>
-               	leal	-1(%rcx), %esi
-               	cmpl	%esi, %edx
-               	jle	0x452ed7 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1a7>
-               	xorl	%edx, %edx
-               	cmpl	%ebx, %edi
-               	setg	%dl
-               	subl	%edx, %ecx
-               	cmpl	$-1, %ecx
-               	je	0x452f3e <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x20e>
-               	movslq	%ecx, %rcx
-               	cmpl	%ebx, (%r15,%rcx,4)
-               	jne	0x452f3e <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x20e>
-               	leaq	(%rcx,%rcx,4), %rcx
-               	leaq	251079(%rip), %rdx      # 0x4903e0 <(anonymous namespace)::decompositionValues>
-               	leaq	(%rdx,%rcx,4), %rsi
-               	movsbl	16(%rdx,%rcx,4), %ecx
-               	movl	%ecx, (%rsp)
-               	movslq	%ecx, %rdx
-               	shlq	$2, %rdx
-               	movq	%rax, %rdi
-               	callq	0x4137d0 <memcpy@plt>
-               	cmpl	%r14d, %r12d
-               	jl	0x452f50 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x220>
-               	jmp	0x4530bd <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x38d>
-               	movl	%ebx, (%rax)
-               	movl	$1, (%rsp)
-               	cmpl	%r14d, %r12d
-               	jge	0x4530bd <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x38d>
-               	movq	8(%rsp), %rdi
-               	jmp	0x452f85 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x255>
-               	nopw	(%rax,%rax)
-               	movl	%r12d, (%rdi)
-               	movl	$1, %ebp
-               	movl	%ebx, %r12d
-               	addl	%ebp, (%rsp)
-               	movq	16(%rsp), %rbp
-               	movq	8(%rsp), %rdi
-               	addl	44(%rdi), %r12d
-               	cmpl	%r14d, %r12d
-               	jge	0x4530bd <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x38d>
-               	movl	%r12d, %ebx
-               	movl	%r12d, %esi
+               	movq	%rcx, 80(%rsp)
+               	movq	80(%rsp), %rdi
+               	movq	%rdi, 88(%rsp)
+               	addq	$16, %rdi
+               	xorl	%ecx, %ecx
+               	movl	$2031, %edx             # imm = 0x7EF
+               	leaq	246648(%rip), %r15      # 0x48f6e0 <(anonymous namespace)::decompositionKeys>
+               	movq	16(%rsp), %r12
+               	jmp	0x453377 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1b7>
+               	nop
+               	leal	1(%rax), %ecx
+               	cmpl	%edx, %ecx
+               	jg	0x453397 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1d7>
+               	leal	(%rcx,%rdx), %esi
+               	movl	%esi, %eax
+               	shrl	$31, %eax
+               	addl	%esi, %eax
+               	sarl	%eax
+               	movslq	%eax, %rsi
+               	movl	(%r15,%rsi,4), %esi
+               	cmpl	%ebx, %esi
+               	jl	0x453370 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1b0>
+               	je	0x4533a0 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1e0>
+               	leal	-1(%rax), %edx
+               	cmpl	%edx, %ecx
+               	jle	0x453377 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1b7>
+               	xorl	%ecx, %ecx
+               	cmpl	%ebx, %esi
+               	setg	%cl
+               	subl	%ecx, %eax
+               	cmpl	$-1, %eax
+               	movq	32(%rsp), %rbp
+               	je	0x4533eb <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x22b>
+               	cltq
+               	cmpl	%ebx, (%r15,%rax,4)
+               	jne	0x4533eb <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x22b>
+               	leaq	(%rax,%rax,4), %rax
+               	leaq	254691(%rip), %rcx      # 0x4916a0 <(anonymous namespace)::decompositionValues>
+               	leaq	(%rcx,%rax,4), %rsi
+               	movb	16(%rcx,%rax,4), %al
+               	movsbq	%al, %rbx
+               	leaq	(,%rbx,4), %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movsbl	%bl, %eax
+               	movl	%eax, 8(%rsp)
+               	movl	12(%rsp), %esi
+               	cmpl	%r14d, %esi
+               	jl	0x453402 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x242>
+               	jmp	0x453592 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d2>
+               	movl	%ebx, (%rdi)
+               	movl	$1, 8(%rsp)
+               	movl	12(%rsp), %esi
+               	cmpl	%r14d, %esi
+               	jge	0x453592 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d2>
+               	movq	%r12, %rdi
@@@@
-               	movq	634224(%rip), %rax      # 0x4edd10 <kvar:kotlin.text.regex.Lexer.$companion#internal>
-               	movl	(%rsp), %ecx
+               	leaq	254598(%rip), %rbx      # 0x4916a0 <(anonymous namespace)::decompositionValues>
+               	movq	634991(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	8(%rsp), %ecx
@@@@
-               	jge	0x4530ba <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x38a>
+               	jge	0x45358d <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3cd>
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)
@@@@
-               	je	0x45307c <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x34c>
-               	movq	64(%rsp), %rax
-               	movq	%rax, 88(%rsp)
-               	movslq	(%rsp), %rcx
+               	je	0x45355d <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x39d>
+               	movq	80(%rsp), %rax
+               	movq	%rax, 104(%rsp)
+               	movslq	8(%rsp), %rcx
@@@@
-               	jmp	0x453017 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2e7>
-               	nopw	(%rax,%rax)
+               	jmp	0x4534a7 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2e7>
+               	nopl	(%rax)

@@ -57716,165 +58001,184 @@
@@@[(23, 64), (71, 132), (133, 139), (145, 150), (160, 164), (165, 173), (175, 179), (181, 185), (190, 196), (197, 251), (260, 266)]@@@
-               	leaq	250750(%rip), %rcx      # 0x4903e0 <(anonymous namespace)::decompositionValues>
-               	leaq	(%rcx,%rax,4), %rsi
-               	movsbl	16(%rcx,%rax,4), %ebp
-               	movslq	%ebp, %rdx
-               	shlq	$2, %rdx
-               	callq	0x4137d0 <memcpy@plt>
-               	jmp	0x452f68 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x238>
-               	movq	64(%rsp), %rax
-               	movq	%rax, 80(%rsp)
-               	movl	(%rsp), %edx
+               	leaq	(%rbx,%rax,4), %rsi
+               	movb	16(%rbx,%rax,4), %al
+               	movsbq	%al, %rbp
+               	leaq	(,%rbp,4), %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movsbl	%bpl, %eax
+               	movq	32(%rsp), %rbp
+               	jmp	0x453518 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x358>
+               	nop
+               	movl	%r12d, (%rdi)
+               	movl	$1, %eax
+               	movq	16(%rsp), %r12
+               	addl	%eax, 8(%rsp)
+               	movl	12(%rsp), %esi
+               	addl	44(%r12), %esi
+               	cmpl	%r14d, %esi
+               	movl	%esi, 12(%rsp)
+               	jge	0x453592 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d2>
+               	movq	%r12, %rdi
+               	movq	%rbp, %rdx
+               	movl	%r14d, %ecx
+               	callq	0x453900 <kfun:kotlin.text.regex.DecomposedCharSet#codePointAt(kotlin.Int;kotlin.CharSequence;kotlin.Int){}kotlin.Int>
+               	movl	%eax, %r12d
+               	movq	634693(%rip), %rax      # 0x4ee490 <kvar:kotlin.text.regex.Lexer.$companion#internal>
+               	movl	8(%rsp), %ecx
+               	cmpl	172(%rax), %ecx
+               	jl	0x453440 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x280>
+               	jmp	0x45358d <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3cd>
+               	movq	80(%rsp), %rax
+               	movq	%rax, 96(%rsp)
+               	movl	8(%rsp), %edx
@@@@
-               	movl	%edx, (%rsp)
-               	movl	%ebx, %r12d
-               	movq	8(%rsp), %rdi
-               	addl	44(%rdi), %r12d
-               	cmpl	%r14d, %r12d
-               	jl	0x452f85 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x255>
-               	jmp	0x4530bd <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x38d>
-               	movl	%ebx, %r12d
-               	movl	(%rsp), %ebx
-               	cmpl	$3, %ebx
-               	movq	8(%rsp), %r14
-               	jae	0x45318b <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x45b>
-               	cmpl	40(%r14), %ebx
-               	jne	0x4533e6 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6b6>
+               	movl	%edx, 8(%rsp)
+               	movq	16(%rsp), %r12
+               	jmp	0x453521 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x361>
+               	movq	16(%rsp), %r12
+               	movl	8(%rsp), %ebp
+               	cmpl	$3, %ebp
+               	movl	$4294967295, %r15d      # imm = 0xFFFFFFFF
+               	jb	0x453648 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x488>
+               	jne	0x453711 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x551>
+               	movq	80(%rsp), %rax
+               	movq	%rax, 112(%rsp)
+               	cmpl	$1, 8(%rax)
+               	jbe	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movl	20(%rax), %edi
+               	callq	0x449ed0 <kfun:kotlin.text.regex.Lexer.Companion#getCanonicalClass(kotlin.Int){}kotlin.Int>
+               	movl	%eax, %ebx
+               	movq	80(%rsp), %rax
+               	movq	%rax, 120(%rsp)
+               	cmpl	$2, 8(%rax)
+               	jbe	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movl	24(%rax), %edi
+               	callq	0x449ed0 <kfun:kotlin.text.regex.Lexer.Companion#getCanonicalClass(kotlin.Int){}kotlin.Int>
+               	testl	%eax, %eax
+               	je	0x453648 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x488>
+               	cmpl	%eax, %ebx
+               	jle	0x453648 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x488>
+               	movq	80(%rsp), %rcx
+               	movq	%rcx, 128(%rsp)
+               	movl	8(%rcx), %edx
+               	cmpl	$1, %edx
+               	jbe	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movl	20(%rcx), %eax
+               	movq	%rcx, 136(%rsp)
+               	movq	%rcx, 144(%rsp)
+               	cmpl	$2, %edx
+               	je	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movl	24(%rcx), %edx
+               	movq	(%rcx), %rsi
+               	movl	%edx, 20(%rcx)
+               	movq	80(%rsp), %rcx
+               	movq	%rcx, 152(%rsp)
+               	cmpl	$2, 8(%rcx)
+               	jbe	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movq	(%rcx), %rdx
+               	movl	%eax, 24(%rcx)
+               	cmpl	40(%r12), %ebp
+               	jne	0x4538c9 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x709>
@@@@
-               	movl	%ebx, %esi
-               	leaq	160(%rsp), %rdx
-               	callq	0x424040 <kfun:kotlin.ranges#until__at__kotlin.Int(kotlin.Int){}kotlin.ranges.IntRange>
+               	movl	%ebp, %esi
+               	leaq	176(%rsp), %rdx
+               	callq	0x424270 <kfun:kotlin.ranges#until__at__kotlin.Int(kotlin.Int){}kotlin.ranges.IntRange>
@@@@
-               	nopw	(%rax,%rax)
-               	movzbl	638769(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	nopw	%cs:(%rax,%rax)
+               	nop
+               	movzbl	639289(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movq	24(%r14), %rcx
+               	je	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movq	24(%r12), %rcx
@@@@
-               	je	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movl	16(%rax), %eax
-               	cmpl	16(%rcx), %eax
-               	jne	0x4533d7 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6a7>
+               	je	0x4538ea <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x72a>
+               	movl	16(%rcx), %ecx
+               	cmpl	%ecx, 16(%rax)
+               	jne	0x4538ba <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6fa>
@@@@
-               	jne	0x453100 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d0>
-               	movq	(%r14), %rax
+               	jne	0x453680 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x4c0>
+               	movq	(%r12), %rax
@@@@
-               	movq	%r14, %rdi
-               	leaq	184(%rsp), %rsi
+               	movq	%r12, %rdi
+               	leaq	200(%rsp), %rsi
@@@@
-               	movl	%r12d, %esi
-               	movq	16(%rsp), %rdx
-               	movq	200(%rsp), %rcx
+               	movl	12(%rsp), %esi
+               	movq	32(%rsp), %rdx
+               	movq	216(%rsp), %rcx
@@@@
-               	jmp	0x4533eb <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6bb>
-               	jne	0x453235 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x505>
-               	movq	64(%rsp), %rax
-               	movq	%rax, 96(%rsp)
-               	cmpl	$1, 8(%rax)
-               	jbe	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movl	20(%rax), %edi
-               	callq	0x449b50 <kfun:kotlin.text.regex.Lexer.Companion#getCanonicalClass(kotlin.Int){}kotlin.Int>
-               	movl	%eax, %ebp
-               	movq	64(%rsp), %rax
-               	movq	%rax, 104(%rsp)
-               	cmpl	$2, 8(%rax)
-               	jbe	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movl	24(%rax), %edi
-               	callq	0x449b50 <kfun:kotlin.text.regex.Lexer.Companion#getCanonicalClass(kotlin.Int){}kotlin.Int>
-               	testl	%eax, %eax
-               	je	0x4530ce <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x39e>
-               	cmpl	%eax, %ebp
-               	jle	0x4530ce <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x39e>
-               	movq	64(%rsp), %rcx
-               	movq	%rcx, 112(%rsp)
-               	movl	8(%rcx), %edx
-               	cmpl	$1, %edx
-               	jbe	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movl	20(%rcx), %eax
-               	movq	%rcx, 120(%rsp)
-               	movq	%rcx, 128(%rsp)
-               	cmpl	$2, %edx
-               	je	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movl	24(%rcx), %edx
-               	movq	(%rcx), %rsi
-               	movl	%edx, 20(%rcx)
-               	movq	64(%rsp), %rcx
-               	movq	%rcx, 136(%rsp)
-               	cmpl	$2, 8(%rcx)
-               	jbe	0x453409 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6d9>
-               	movq	(%rcx), %rdx
-               	movl	%eax, 24(%rcx)
-               	jmp	0x4530ce <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x39e>
-               	movq	%r13, 192(%rsp)
-               	movq	64(%rsp), %rbp
-               	movq	%rbp, 144(%rsp)
-               	movl	%ebx, %r14d
-               	cmpl	%ebx, 8(%rbp)
-               	jg	0x453256 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x526>
+               	movl	%eax, %r15d
+               	jmp	0x4538c9 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x709>
+               	movq	%r13, 208(%rsp)
+               	movl	%ebp, %eax
+               	movq	80(%rsp), %rbp
+               	movq	%rbp, 160(%rsp)
+               	movl	%eax, %r14d
+               	cmpl	%eax, 8(%rbp)
+               	jg	0x453734 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x574>
@@@@
-               	movl	%r12d, 28(%rsp)
-               	movl	%r14d, 24(%rsp)
-               	jmp	0x453299 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x569>
+               	movl	%r14d, 44(%rsp)
+               	jmp	0x453779 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x5b9>
+               	nopl	(%rax)

@@ -57925,33 +58229,33 @@
@@@[(14, 36), (37, 49)]@@@
-               	movl	28(%rsp), %r12d
-               	movl	24(%rsp), %r14d
-               	jmp	0x453280 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x550>
-               	movq	%rbp, 152(%rsp)
-               	movq	%rbp, 64(%rsp)
-               	movq	192(%rsp), %r13
-               	movq	8(%rsp), %r14
-               	movl	(%rsp), %ebx
-               	cmpl	40(%r14), %ebx
-               	je	0x4530d8 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3a8>
-               	jmp	0x4533e6 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x6b6>
+               	movq	16(%rsp), %r12
+               	movl	44(%rsp), %r14d
+               	jmp	0x453760 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x5a0>
+               	movq	%rbp, 168(%rsp)
+               	movq	%rbp, 80(%rsp)
+               	movq	208(%rsp), %r13
+               	movl	$4294967295, %r15d      # imm = 0xFFFFFFFF
+               	movl	8(%rsp), %ebp
+               	cmpl	40(%r12), %ebp
+               	je	0x453653 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x493>
+               	jmp	0x4538c9 <kfun:kotlin.text.regex.DecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x709>
@@@@
-               	leaq	176(%rsp), %rsi
-               	callq	0x417bc0 <kfun:kotlin#<Int-box>(kotlin.Int){}kotlin.Any>
-               	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
-               	movq	40(%rsp), %rcx
-               	movq	%rcx, 288(%r13)
-               	addq	$216, %rsp
+               	leaq	192(%rsp), %rsi
+               	callq	0x417b80 <kfun:kotlin#<Int-box>(kotlin.Int){}kotlin.Any>
+               	movq	56(%rsp), %rax
+               	movq	%rax, 288(%r13)
+               	movl	%r15d, %eax
+               	addq	$232, %rsp

@@ -58040,47 +58344,47 @@
@@@[(29, 37), (54, 60)]@@@
-               	je	0x45359d <kfun:kotlin.text.regex.DecomposedCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
-               	movl	8(%r15), %eax
-               	cmpl	8(%rbx), %eax
-               	jne	0x4535a8 <kfun:kotlin.text.regex.DecomposedCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xa8>
+               	je	0x453a7d <kfun:kotlin.text.regex.DecomposedCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
+               	movl	8(%rbx), %eax
+               	cmpl	%eax, 8(%r15)
+               	jne	0x453a88 <kfun:kotlin.text.regex.DecomposedCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xa8>
@@@@
-               	movl	16(%r15,%rax,4), %ecx
-               	cmpl	16(%rbx,%rax,4), %ecx
-               	jne	0x4535a8 <kfun:kotlin.text.regex.DecomposedCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xa8>
+               	movl	16(%rbx,%rax,4), %ecx
+               	cmpl	%ecx, 16(%r15,%rax,4)
+               	jne	0x453a88 <kfun:kotlin.text.regex.DecomposedCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xa8>

@@ -58277,27 +58581,29 @@
@@@[(17, 20), (26, 35), (36, 40)]@@@
-               	cmpw	$43, 8(%r13)
+               	movl	8(%r13), %ecx
+               	cmpw	$43, %cx
@@@@
-               	je	0x4538cf <kfun:kotlin.text.regex.DotQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x12f>
-               	leaq	632077(%rip), %rdi      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
-               	leaq	-9018(%rip), %rsi       # 0x451590 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
+               	je	0x453db1 <kfun:kotlin.text.regex.DotQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x131>
+               	leaq	632747(%rip), %rdi      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	-9132(%rip), %rsi       # 0x451a00 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movl	8(%r13), %ecx
@@@@
-               	cmpw	$43, 8(%r13)
-               	je	0x4538fe <kfun:kotlin.text.regex.DotQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x15e>
+               	cmpw	$43, %cx
+               	je	0x453de2 <kfun:kotlin.text.regex.DotQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x162>

@@ -58317,7 +58623,7 @@
@@@[(3, 5)]@@@
-               	nopw	(%rax,%rax)
+               	nop

@@ -58326,27 +58632,27 @@
@@@[(10, 11), (13, 14)]@@@
+               	movaps	%xmm0, 128(%rsp)
@@@@
-               	movaps	%xmm0, 80(%rsp)

@@ -58371,21 +58677,22 @@
@@@[(9, 22)]@@@
-               	je	0x453a0e <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xee>
-               	leaq	631758(%rip), %rdi      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
-               	leaq	-9337(%rip), %rsi       # 0x451590 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	cmpw	$43, 8(%r13)
-               	jne	0x453c05 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2e5>
+               	je	0x453ef1 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf1>
+               	leaq	632427(%rip), %rdi      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	-9452(%rip), %rsi       # 0x451a00 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movl	8(%r13), %eax
+               	cmpw	$43, %ax
+               	jne	0x4540e3 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2e3>

@@ -58412,46 +58719,49 @@
@@@[(9, 10), (12, 17), (18, 23), (39, 49), (50, 53), (54, 57)]@@@
+               	movaps	%xmm0, 64(%rsp)
@@@@
-               	movaps	%xmm0, 16(%rsp)
-               	movq	$0, 64(%rsp)
-               	leaq	40(%rsp), %rdx
+               	movq	$0, 80(%rsp)
+               	leaq	56(%rsp), %rdx
@@@@
-               	movq	%rax, 24(%rsp)
-               	leaq	16(%rsp), %rax
+               	movq	%rax, 40(%rsp)
+               	leaq	32(%rsp), %rax
+               	movq	%r14, 24(%rsp)
@@@@
-               	jle	0x453b1a <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1fa>
-               	movq	$0, 64(%rsp)
-               	jmp	0x453bbc <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x29c>
+               	jle	0x454017 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x217>
+               	movq	64(%rsp), %rax
+               	movq	%rax, 80(%rsp)
+               	testq	%rax, %rax
+               	je	0x454093 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x293>
+               	movl	8(%rax), %ebx
+               	jmp	0x45409a <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x29a>
@@@@
-               	jmp	0x453c05 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2e5>
-               	movq	%r14, 72(%rsp)
+               	jmp	0x4540e3 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2e3>
@@@@
-               	jmp	0x453b38 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x218>
-               	nopl	(%rax,%rax)
+               	jmp	0x454028 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x228>

@@ -58470,41 +58780,36 @@
@@@[(9, 16), (17, 25), (26, 29), (46, 49)]@@@
-               	leaq	56(%rsp), %rsi
-               	callq	0x417bc0 <kfun:kotlin#<Int-box>(kotlin.Int){}kotlin.Any>
-               	movq	%rax, 48(%rsp)
-               	jmp	0x453b30 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x210>
-               	movq	48(%rsp), %rax
+               	leaq	72(%rsp), %rsi
+               	callq	0x417b80 <kfun:kotlin#<Int-box>(kotlin.Int){}kotlin.Any>
@@@@
-               	testq	%rax, %rax
-               	movq	72(%rsp), %r14
-               	je	0x453bbc <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x29c>
-               	movl	8(%rax), %ebx
-               	jmp	0x453bc3 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2a3>
-               	movl	4(%rsp), %ebx
+               	jmp	0x454020 <kfun:kotlin.text.regex.DotQuantifierSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x220>
+               	movl	12(%rsp), %ebx
@@@@
-               	movq	24(%rsp), %rax
+               	movq	24(%rsp), %r14
+               	movq	40(%rsp), %rax
@@@@
-               	cmpw	$43, 8(%r13)
+               	movl	8(%r13), %eax
+               	cmpw	$43, %ax

@@ -58984,15 +59289,16 @@
@@@[(6, 21)]@@@
-               	je	0x454374 <kfun:kotlin.text.regex.EOLSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x264>
-               	movslq	32(%r12), %rax
-               	movq	40(%r13), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x454391 <kfun:kotlin.text.regex.EOLSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x281>
-               	movq	(%rcx), %rdx
-               	movl	$0, 16(%rcx,%rax,4)
+               	je	0x454857 <kfun:kotlin.text.regex.EOLSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x267>
+               	movl	32(%r12), %ecx
+               	movq	40(%r13), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x454874 <kfun:kotlin.text.regex.EOLSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x284>
+               	movslq	%ecx, %rcx
+               	movq	(%rax), %rdx
+               	movl	$0, 16(%rax,%rcx,4)

@@ -59014,8 +59320,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -59023,29 +59329,31 @@
@@@[(6, 34), (40, 44)]@@@
-               	je	0x4543b9 <kfun:kotlin.text.regex.EOLSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x19>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	32(%rbx), %rax
-               	movq	40(%r14), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x4543ef <kfun:kotlin.text.regex.EOLSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x4f>
-               	movslq	32(%rbx), %rdx
-               	movq	40(%r14), %rsi
-               	cmpl	%edx, 8(%rsi)
-               	jbe	0x4543ef <kfun:kotlin.text.regex.EOLSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x4f>
-               	movl	16(%rcx,%rax,4), %eax
-               	movq	(%rsi), %rcx
-               	movl	$4294967295, 16(%rsi,%rdx,4) # imm = 0xFFFFFFFF
+               	je	0x454899 <kfun:kotlin.text.regex.EOLSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x19>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	32(%rbx), %ecx
+               	movq	40(%r14), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4548d3 <kfun:kotlin.text.regex.EOLSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x53>
+               	movl	32(%rbx), %esi
+               	movq	40(%r14), %rdx
+               	cmpl	%esi, 8(%rdx)
+               	jbe	0x4548d3 <kfun:kotlin.text.regex.EOLSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x53>
+               	movslq	%ecx, %rcx
+               	movl	16(%rax,%rcx,4), %eax
+               	movslq	%esi, %rcx
+               	movq	(%rdx), %rsi
+               	movl	$4294967295, 16(%rdx,%rcx,4) # imm = 0xFFFFFFFF
@@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax,%rax)

@@ -59385,71 +59693,71 @@
@@@[(3, 7), (9, 11), (16, 22), (24, 40), (43, 45), (47, 49), (50, 52), (79, 81), (82, 90), (91, 93), (99, 101)]@@@
-               	movq	-64(%rax), %r15
-               	movq	288(%r15), %rax
+               	movq	-64(%rax), %r14
+               	movq	288(%r14), %rax
@@@@
-               	movq	%rax, 288(%r15)
+               	movq	%rax, 288(%r14)
@@@@
-               	je	0x4548ce <kfun:kotlin.text.regex.FSet.$init_global#internal+0x5e>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	296(%r15), %rdi
+               	je	0x454dae <kfun:kotlin.text.regex.FSet.$init_global#internal+0x5e>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r14
-               	addq	$16, %rax
-               	movq	$0, 8(%r14)
-               	leaq	465431(%rip), %rcx      # 0x4c6310 <ktypeglobal:kotlin.text.regex.FSet.Companion#internal>
-               	movq	%rcx, 16(%r14)
-               	movq	%rax, 24(%rsp)
-               	movq	%rax, 627767(%rip)      # 0x4edd40 <kvar:kotlin.text.regex.FSet.$companion#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
+               	movq	$0, 8(%rax)
+               	leaq	466106(%rip), %rdx      # 0x4c6a90 <ktypeglobal:kotlin.text.regex.FSet.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 628442(%rip)      # 0x4ee4c0 <kvar:kotlin.text.regex.FSet.$companion#internal>
+               	movq	628435(%rip), %r15      # 0x4ee4c0 <kvar:kotlin.text.regex.FSet.$companion#internal>
@@@@
-               	movq	288(%r15), %rax
+               	movq	288(%r14), %rax
@@@@
-               	movq	%rax, 288(%r15)
+               	movq	%rax, 288(%r14)
@@@@
-               	movq	296(%r15), %rdi
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%r12, 24(%r14)
+               	movq	%r12, 8(%r15)
@@@@
-               	movq	%rax, 288(%r15)
-               	movq	627598(%rip), %rsi      # 0x4edd40 <kvar:kotlin.text.regex.FSet.$companion#internal>
-               	leaq	627591(%rip), %rdi      # 0x4edd40 <kvar:kotlin.text.regex.FSet.$companion#internal>
-               	callq	0x468020 <InitAndRegisterGlobal>
+               	movq	%rax, 288(%r14)
+               	movq	628266(%rip), %rsi      # 0x4ee4c0 <kvar:kotlin.text.regex.FSet.$companion#internal>
+               	leaq	628259(%rip), %rdi      # 0x4ee4c0 <kvar:kotlin.text.regex.FSet.$companion#internal>
+               	callq	0x468bc0 <InitAndRegisterGlobal>
@@@@
-               	movq	%rax, 288(%r15)
+               	movq	%rax, 288(%r14)
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -59645,35 +59953,36 @@
@@@[(11, 27), (28, 44), (45, 50), (51, 57)]@@@
-               	jne	0x454cf4 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x94>
-               	movslq	24(%r12), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	ja	0x454d15 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xb5>
-               	jmp	0x454d68 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x108>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	626905(%rip), %eax      # 0x4eddc8 <state_global$kotlin.text.regex.FSet>
+               	jne	0x4551d4 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x94>
+               	movl	24(%r12), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	ja	0x4551f5 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xb5>
+               	jmp	0x45524b <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x10b>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	627577(%rip), %eax      # 0x4ee548 <state_global$kotlin.text.regex.FSet>
@@@@
-               	je	0x454cd1 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x71>
-               	leaq	626893(%rip), %rdi      # 0x4eddc8 <state_global$kotlin.text.regex.FSet>
-               	leaq	-1170(%rip), %rsi       # 0x454870 <kfun:kotlin.text.regex.FSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movslq	24(%r12), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x454d68 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x108>
+               	je	0x4551b1 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x71>
+               	leaq	627565(%rip), %rdi      # 0x4ee548 <state_global$kotlin.text.regex.FSet>
+               	leaq	-1170(%rip), %rsi       # 0x454d50 <kfun:kotlin.text.regex.FSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movl	24(%r12), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x45524b <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x10b>
@@@@
-               	cmpl	%eax, 8(%rdx)
-               	jbe	0x454d68 <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x108>
+               	cmpl	%ecx, 8(%rdx)
+               	jbe	0x45524b <kfun:kotlin.text.regex.NonCapFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x10b>
+               	movslq	%ecx, %rcx
@@@@
-               	subl	16(%rcx,%rax,4), %esi
-               	movq	(%rdx), %rcx
-               	movl	%esi, 16(%rdx,%rax,4)
+               	subl	16(%rax,%rcx,4), %esi
+               	movq	(%rdx), %rax
+               	movl	%esi, 16(%rdx,%rcx,4)

@@ -59692,15 +60001,14 @@
@@@[(3, 6)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>

@@ -59725,36 +60033,37 @@
@@@[(11, 24), (35, 55)]@@@
-               	jne	0x454e01 <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x51>
-               	movslq	24(%r15), %rax
-               	movq	40(%r14), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x454e21 <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x71>
-               	cmpl	%ebx, 16(%rcx,%rax,4)
+               	jne	0x4552e4 <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x54>
+               	movl	24(%r15), %ecx
+               	movq	40(%r14), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x455304 <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x74>
+               	movslq	%ecx, %rcx
+               	cmpl	%ebx, 16(%rax,%rcx,4)
@@@@
-               	je	0x454dd2 <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x22>
-               	leaq	626624(%rip), %rdi      # 0x4eddc8 <state_global$kotlin.text.regex.FSet>
-               	leaq	-1439(%rip), %rsi       # 0x454870 <kfun:kotlin.text.regex.FSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movslq	24(%r15), %rax
-               	movq	40(%r14), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	ja	0x454ddf <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2f>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	je	0x4552b2 <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x22>
+               	leaq	627293(%rip), %rdi      # 0x4ee548 <state_global$kotlin.text.regex.FSet>
+               	leaq	-1442(%rip), %rsi       # 0x454d50 <kfun:kotlin.text.regex.FSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movl	24(%r15), %ecx
+               	movq	40(%r14), %rax
+               	cmpl	%ecx, 8(%rax)
+               	ja	0x4552bf <kfun:kotlin.text.regex.BehindFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x2f>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -59763,50 +60072,51 @@
@@@[(11, 27), (28, 44), (45, 50), (51, 57)]@@@
-               	jne	0x454e71 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x41>
-               	movslq	24(%r14), %rax
-               	movq	40(%r15), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	ja	0x454e91 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x61>
-               	jmp	0x454eb3 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x83>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movl	626524(%rip), %eax      # 0x4eddc8 <state_global$kotlin.text.regex.FSet>
+               	jne	0x455351 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x41>
+               	movl	24(%r14), %ecx
+               	movq	40(%r15), %rax
+               	cmpl	%ecx, 8(%rax)
+               	ja	0x455371 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x61>
+               	jmp	0x455396 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x86>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	627196(%rip), %eax      # 0x4ee548 <state_global$kotlin.text.regex.FSet>
@@@@
-               	je	0x454e52 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x22>
-               	leaq	626512(%rip), %rdi      # 0x4eddc8 <state_global$kotlin.text.regex.FSet>
-               	leaq	-1551(%rip), %rsi       # 0x454870 <kfun:kotlin.text.regex.FSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movslq	24(%r14), %rax
-               	movq	40(%r15), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x454eb3 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x83>
+               	je	0x455332 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x22>
+               	leaq	627184(%rip), %rdi      # 0x4ee548 <state_global$kotlin.text.regex.FSet>
+               	leaq	-1551(%rip), %rsi       # 0x454d50 <kfun:kotlin.text.regex.FSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movl	24(%r14), %ecx
+               	movq	40(%r15), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x455396 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x86>
@@@@
-               	cmpl	%eax, 8(%rdx)
-               	jbe	0x454eb3 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x83>
+               	cmpl	%ecx, 8(%rdx)
+               	jbe	0x455396 <kfun:kotlin.text.regex.AtomicFSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x86>
+               	movslq	%ecx, %rcx
@@@@
-               	subl	16(%rcx,%rax,4), %esi
-               	movq	(%rdx), %rcx
-               	movl	%esi, 16(%rdx,%rax,4)
+               	subl	16(%rax,%rcx,4), %esi
+               	movq	(%rdx), %rax
+               	movl	%esi, 16(%rdx,%rcx,4)

@@ -59939,13 +60249,14 @@
@@@[(3, 5), (6, 9)]@@@
-               	movslq	48(%rbx), %rcx
+               	movl	48(%rbx), %ecx
@@@@
-               	jbe	0x4553d6 <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d6>
+               	jbe	0x4558c6 <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3e6>
+               	movslq	%ecx, %rcx

@@ -59960,27 +60271,27 @@
@@@[(32, 40)]@@@
-               	movl	20(%rax), %eax
-               	movq	625516(%rip), %rcx      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	cmpl	32(%rcx), %eax
-               	jne	0x45520a <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x20a>
+               	movq	626189(%rip), %rcx      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	32(%rcx), %ecx
+               	cmpl	%ecx, 20(%rax)
+               	jne	0x4556ec <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x20c>

@@ -59996,48 +60307,50 @@
@@@[(19, 27), (48, 50), (57, 58), (63, 64), (65, 69)]@@@
-               	movl	20(%rax), %eax
-               	movq	625402(%rip), %rcx      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	cmpl	32(%rcx), %eax
-               	je	0x455273 <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x273>
+               	movq	626075(%rip), %rcx      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	32(%rcx), %ecx
+               	cmpl	%ecx, 20(%rax)
+               	je	0x455755 <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x275>
@@@@
-               	movslq	48(%rbx), %r14
+               	movl	48(%rbx), %r14d
@@@@
+               	movq	16(%rsp), %rax
@@@@
+               	movslq	%r14d, %rcx
@@@@
-               	movq	(%rbp), %rcx
-               	movl	%eax, 16(%rbp,%r14,4)
+               	movq	(%rbp), %rdx
+               	movl	%eax, 16(%rbp,%rcx,4)

@@ -60052,47 +60365,49 @@
@@@[(7, 9), (16, 17), (19, 22), (23, 27)]@@@
-               	movslq	48(%rbx), %r14
+               	movl	48(%rbx), %r14d
@@@@
+               	movq	16(%rsp), %rax
@@@@
-               	jbe	0x4553d6 <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d6>
+               	jbe	0x4558c6 <kfun:kotlin.text.regex.GroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3e6>
+               	movslq	%r14d, %rcx
@@@@
-               	movq	(%rbp), %rcx
-               	movl	%eax, 16(%rbp,%r14,4)
+               	movq	(%rbp), %rdx
+               	movl	%eax, 16(%rbp,%rcx,4)

@@ -60131,14 +60446,15 @@
@@@[(11, 13), (14, 17)]@@@
-               	movslq	48(%rbx), %rcx
+               	movl	48(%rbx), %ecx
@@@@
-               	jbe	0x4554ea <kfun:kotlin.text.regex.GroupQuantifierSet.matches$matchNext#internal+0x10a>
+               	jbe	0x4559e2 <kfun:kotlin.text.regex.GroupQuantifierSet.matches$matchNext#internal+0x112>
+               	movslq	%ecx, %rcx

@@ -60156,15 +60472,16 @@
@@@[(3, 18), (19, 21)]@@@
-               	movslq	48(%rbx), %rdx
-               	movq	8(%rsp), %rsi
-               	movq	8(%rsi), %rsi
-               	movq	%rsi, 48(%rsp)
-               	cmpl	%edx, 8(%rcx)
-               	jbe	0x4554ea <kfun:kotlin.text.regex.GroupQuantifierSet.matches$matchNext#internal+0x10a>
-               	movl	8(%rsi), %esi
+               	movl	48(%rbx), %esi
+               	movq	8(%rsp), %rdx
+               	movq	8(%rdx), %rdx
+               	movq	%rdx, 48(%rsp)
+               	cmpl	%esi, 8(%rcx)
+               	jbe	0x4559e2 <kfun:kotlin.text.regex.GroupQuantifierSet.matches$matchNext#internal+0x112>
+               	movslq	%esi, %rsi
+               	movl	8(%rdx), %edx
@@@@
-               	movl	%esi, 16(%rcx,%rdx,4)
+               	movl	%edx, 16(%rcx,%rsi,4)

@@ -60175,8 +60492,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nop
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopw	(%rax,%rax)

@@ -60406,25 +60723,26 @@
@@@[(21, 26)]@@@
-               	movq	%rcx, 120(%rsp)
-               	movq	16(%rax), %rcx
+               	movq	112(%rsp), %rax
+               	movq	%rax, 120(%rsp)
+               	movq	(%rax), %rcx

@@ -60436,24 +60754,25 @@
@@@[(20, 25)]@@@
-               	movq	%rcx, 80(%rsp)
-               	movq	16(%rax), %rcx
+               	movq	72(%rsp), %rax
+               	movq	%rax, 80(%rsp)
+               	movq	(%rax), %rcx

@@ -60462,38 +60781,41 @@
@@@[(3, 4), (10, 11), (21, 26)]@@@
+               	movq	56(%rsp), %rax
@@@@
+               	movq	192(%rsp), %rax
@@@@
-               	jge	0x455a69 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x419>
-               	movzbl	628241(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	jge	0x455f89 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x439>
+               	nopl	(%rax)
+               	movzbl	628857(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -60595,28 +60917,36 @@
@@@[(3, 7), (8, 10), (11, 16), (17, 25), (29, 35), (39, 48)]@@@
-               	jbe	0x455c62 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x612>
-               	movzwl	%ax, %edi
+               	jbe	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	movzwl	%ax, %eax
@@@@
-               	movl	%edi, 40(%rbp)
+               	movl	%eax, 40(%rbp)
@@@@
-               	jne	0x455bd5 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x585>
-               	movq	24(%r13), %rdx
-               	movl	8(%rdx), %r8d
+               	jne	0x4560f5 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x5a5>
+               	movl	24(%rbp), %r8d
@@@@
-               	je	0x455c62 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x612>
-               	movzwl	16(%rdx), %edi
+               	je	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	movq	24(%r13), %rax
+               	movl	8(%rax), %edx
+               	testl	%edx, %edx
+               	je	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	movzwl	16(%rax), %edi
@@@@
-               	jbe	0x455c62 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x612>
-               	movzwl	18(%rdx), %edi
+               	jbe	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	cmpl	$1, %edx
+               	jbe	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	movzwl	18(%rax), %edi
@@@@
-               	jbe	0x455c62 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x612>
-               	cmpw	20(%rdx), %ax
-               	jne	0x455bd5 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x585>
+               	jbe	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	cmpl	$2, %edx
+               	jbe	0x456196 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x646>
+               	movzwl	20(%rax), %eax
+               	cmpl	%eax, 40(%rbp)
+               	jne	0x4560f5 <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x5a5>

@@ -60624,10 +60954,9 @@
@@@[(3, 10)]@@@
-               	jmp	0x455a8a <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x43a>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	callq	0x4217f0 <ThrowIllegalArgumentException>
-               	nopl	(%rax)
+               	jmp	0x455faa <kfun:kotlin.text.regex.HangulDecomposedCharSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x45a>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	callq	0x421a00 <ThrowIllegalArgumentException>

@@ -60702,28 +61031,28 @@
@@@[(13, 14), (16, 19), (30, 32)]@@@
+               	movl	8(%rbx), %edx
@@@@
-               	movl	%ebp, %edx
-               	callq	0x4220d0 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
+               	callq	0x4222e0 <kfun:kotlin.text#checkBoundsIndexes(kotlin.Int;kotlin.Int;kotlin.Int){}>
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -61343,27 +61672,27 @@
@@@[(15, 23)]@@@
-               	movl	$4294966718, %edx       # imm = 0xFFFFFDBE
-               	addl	92(%rcx), %edx
-               	cmpl	$9, %edx
-               	jae	0x4567c2 <kfun:kotlin.text.regex.LeafQuantifierSet#<get-leaf>(){}kotlin.text.regex.LeafSet+0x42>
+               	movl	92(%rcx), %ecx
+               	addl	$4294966718, %ecx       # imm = 0xFFFFFDBE
+               	cmpl	$9, %ecx
+               	jae	0x456cf3 <kfun:kotlin.text.regex.LeafQuantifierSet#<get-leaf>(){}kotlin.text.regex.LeafSet+0x43>

@@ -61665,19 +61994,19 @@
@@@[(16, 24)]@@@
-               	movl	$4294966718, %ecx       # imm = 0xFFFFFDBE
-               	addl	92(%rax), %ecx
-               	cmpl	$9, %ecx
-               	jae	0x456cc8 <kfun:kotlin.text.regex.LeafQuantifierSet#<set-innerSet>(kotlin.text.regex.AbstractSet){}+0x98>
+               	movl	92(%rax), %eax
+               	addl	$4294966718, %eax       # imm = 0xFFFFFDBE
+               	cmpl	$9, %eax
+               	jae	0x4571f8 <kfun:kotlin.text.regex.LeafQuantifierSet#<set-innerSet>(kotlin.text.regex.AbstractSet){}+0x98>

@@ -62093,36 +62422,40 @@
@@@[(21, 25), (40, 44)]@@@
-               	movq	84(%r15), %r13
+               	movl	84(%r15), %r13d
+               	movl	88(%r15), %eax
+               	movl	%eax, 8(%rsp)
@@@@
-               	movq	%r13, 48(%rax)
+               	movl	%r13d, 48(%rax)
+               	movl	8(%rsp), %edx
+               	movl	%edx, 52(%rax)

@@ -62231,16 +62564,17 @@
@@@[(6, 23)]@@@
-               	je	0x45758b <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x7b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	32(%r14), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x457716 <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x206>
-               	movq	(%rcx), %rdx
-               	movl	%ebp, 16(%rcx,%rax,4)
+               	je	0x457acb <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x7b>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	32(%r14), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x457c58 <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x208>
+               	movslq	%ecx, %rcx
+               	movq	(%rax), %rdx
+               	movl	%ebp, 16(%rax,%rcx,4)

@@ -62248,22 +62582,21 @@
@@@[(16, 21)]@@@
-               	leaq	406296(%rip), %r12      # 0x4ba920 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
-               	jmp	0x45763d <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x12d>
-               	nopl	(%rax)
+               	leaq	406869(%rip), %r12      # 0x4bb0a0 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
+               	jmp	0x457b7d <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x12d>

@@ -62274,46 +62607,47 @@
@@@[(49, 62)]@@@
-               	movslq	32(%rsi), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x457716 <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x206>
-               	movq	(%rcx), %rdx
-               	movl	$4294967295, 16(%rcx,%rax,4) # imm = 0xFFFFFFFF
+               	movl	32(%rsi), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x457c58 <kfun:kotlin.text.regex.PositiveLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x208>
+               	movslq	%ecx, %rcx
+               	movq	(%rax), %rdx
+               	movl	$4294967295, 16(%rax,%rcx,4) # imm = 0xFFFFFFFF

@@ -62334,8 +62668,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -62362,16 +62696,17 @@
@@@[(6, 23)]@@@
-               	je	0x45779b <kfun:kotlin.text.regex.NegativeLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x7b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	32(%r14), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x45791e <kfun:kotlin.text.regex.NegativeLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1fe>
-               	movq	(%rcx), %rdx
-               	movl	%ebp, 16(%rcx,%rax,4)
+               	je	0x457cdb <kfun:kotlin.text.regex.NegativeLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x7b>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	32(%r14), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x457e5e <kfun:kotlin.text.regex.NegativeLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1fe>
+               	movslq	%ecx, %rcx
+               	movq	(%rax), %rdx
+               	movl	%ebp, 16(%rax,%rcx,4)

@@ -62379,22 +62714,21 @@
@@@[(16, 21)]@@@
-               	leaq	405768(%rip), %r12      # 0x4ba920 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
-               	jmp	0x457851 <kfun:kotlin.text.regex.NegativeLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x131>
-               	nopl	(%rax)
+               	leaq	406341(%rip), %r12      # 0x4bb0a0 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
+               	jmp	0x457d91 <kfun:kotlin.text.regex.NegativeLookBehindSet#tryToMatch(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x131>

@@ -62488,23 +62822,25 @@
@@@[(6, 29), (30, 37)]@@@
-               	je	0x4579b0 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x80>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	32(%r14), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x457b51 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x221>
-               	movslq	32(%r14), %rdx
-               	movq	40(%rbx), %rsi
-               	cmpl	%edx, 8(%rsi)
-               	jbe	0x457b51 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x221>
-               	movl	16(%rcx,%rax,4), %eax
+               	je	0x457ef0 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x80>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	32(%r14), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4580a3 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x233>
+               	movl	32(%r14), %esi
+               	movq	40(%rbx), %rdx
+               	cmpl	%esi, 8(%rdx)
+               	jbe	0x4580a3 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x233>
+               	movslq	%ecx, %rcx
+               	movl	16(%rax,%rcx,4), %eax
@@@@
-               	movq	(%rsi), %rax
-               	movl	(%rsp), %eax
-               	movl	%eax, 16(%rsi,%rdx,4)
+               	movslq	%esi, %rax
+               	movq	(%rdx), %rcx
+               	movl	(%rsp), %ecx
+               	movl	%ecx, 16(%rdx,%rax,4)

@@ -62512,28 +62848,29 @@
@@@[(3, 9), (10, 18), (19, 28), (29, 31), (33, 35)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r15
-               	leaq	16(%rax), %r13
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%rax, %r13
+               	leaq	16(%rax), %r15
@@@@
-               	leaq	406014(%rip), %rax      # 0x4bac20 <ktypeglobal:kotlin.collections.ArrayList.Itr#internal>
-               	movq	%rax, 16(%r15)
-               	movq	%r13, 64(%rsp)
-               	movq	%r14, 24(%r15)
+               	leaq	406584(%rip), %rax      # 0x4bb3a0 <ktypeglobal:kotlin.collections.ArrayList.Itr#internal>
+               	movq	%rax, 16(%r13)
+               	movq	%r15, 64(%rsp)
+               	movq	%r14, 24(%r13)
@@@@
-               	movq	%rax, 32(%r15)
-               	movq	%r13, 64(%rsp)
-               	leaq	405207(%rip), %r12      # 0x4ba920 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
-               	jmp	0x457a97 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x167>
+               	movq	%rax, 32(%r13)
+               	movq	%r15, 64(%rsp)
+               	leaq	405777(%rip), %r12      # 0x4bb0a0 <ktypeglobal:kotlin.collections.AbstractMutableList.IteratorImpl#internal>
+               	jmp	0x457fe6 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x176>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movq	(%r13), %rax
+               	movq	(%r15), %rax
@@@@
-               	movq	%r13, %rdi
+               	movq	%r15, %rdi

@@ -62543,43 +62880,44 @@
@@@[(3, 7), (9, 11), (12, 16), (17, 25), (49, 60), (61, 63)]@@@
-               	jns	0x457b31 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x201>
-               	movq	16(%r15), %rax
+               	jns	0x458083 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x213>
+               	movq	16(%r13), %rax
@@@@
-               	movl	32(%r15), %r14d
+               	movl	32(%r13), %r14d
@@@@
-               	je	0x457ac0 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x190>
-               	movq	24(%r15), %rax
+               	je	0x458010 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1a0>
+               	movq	24(%r13), %rax
@@@@
-               	jl	0x457ad9 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1a9>
-               	jmp	0x457b0f <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1df>
-               	nop
-               	movq	24(%r15), %rdi
+               	jl	0x458029 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1b9>
+               	jmp	0x45805f <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x1ef>
+               	nopl	(%rax)
+               	movq	24(%r13), %rdi
@@@@
-               	movslq	32(%rax), %rax
-               	movq	40(%rbx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x457b51 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x221>
-               	movq	(%rcx), %rdx
+               	movl	32(%rax), %ecx
+               	movq	40(%rbx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4580a3 <kfun:kotlin.text.regex.NonCapturingJointSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x233>
+               	movslq	%ecx, %rcx
+               	movq	(%rax), %rdx
@@@@
-               	movl	%edx, 16(%rcx,%rax,4)
+               	movl	%edx, 16(%rax,%rcx,4)

@@ -62592,8 +62930,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax,%rax)

@@ -62601,22 +62939,23 @@
@@@[(6, 21), (26, 30)]@@@
-               	je	0x457b79 <kfun:kotlin.text.regex.NonCapturingJointSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x19>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movslq	32(%rbx), %rax
-               	movq	40(%r14), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x457b96 <kfun:kotlin.text.regex.NonCapturingJointSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x36>
-               	cmpl	$0, 16(%rcx,%rax,4)
+               	je	0x4580c9 <kfun:kotlin.text.regex.NonCapturingJointSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x19>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movl	32(%rbx), %ecx
+               	movq	40(%r14), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x4580e8 <kfun:kotlin.text.regex.NonCapturingJointSet#hasConsumed(kotlin.text.regex.MatchResultImpl){}kotlin.Boolean+0x38>
+               	movslq	%ecx, %rcx
+               	cmpl	$0, 16(%rax,%rcx,4)
@@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -62735,43 +63074,43 @@
@@@[(18, 28)]@@@
-               	movl	20(%rax), %eax
-               	movq	614277(%rip), %rcx      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	cmpl	32(%rcx), %eax
-               	je	0x457dd8 <kfun:kotlin.text.regex.PossessiveGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x138>
-               	movl	614422(%rip), %eax      # 0x4eddcc <state_global$kotlin.text.regex.Quantifier>
+               	movq	614840(%rip), %rcx      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	32(%rcx), %ecx
+               	cmpl	%ecx, 20(%rax)
+               	je	0x458328 <kfun:kotlin.text.regex.PossessiveGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x138>
+               	movl	614982(%rip), %eax      # 0x4ee54c <state_global$kotlin.text.regex.Quantifier>

@@ -63290,26 +63629,26 @@
@@@[(17, 27)]@@@
-               	movl	$4294966717, %edx       # imm = 0xFFFFFDBD
-               	addl	92(%rcx), %edx
-               	cmpl	$2, %edx
-               	ja	0x4585bb <kfun:kotlin.text.regex.RangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x7b>
-               	movl	612395(%rip), %eax      # 0x4eddac <state_global$kotlin.text.regex.AbstractCharClass>
+               	movl	92(%rcx), %ecx
+               	addl	$4294966717, %ecx       # imm = 0xFFFFFDBD
+               	cmpl	$2, %ecx
+               	ja	0x458b0c <kfun:kotlin.text.regex.RangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x7c>
+               	movl	612954(%rip), %eax      # 0x4ee52c <state_global$kotlin.text.regex.AbstractCharClass>

@@ -63323,51 +63662,51 @@
@@@[(3, 13), (66, 68)]@@@
-               	movl	$4294966713, %edx       # imm = 0xFFFFFDB9
-               	addl	92(%rcx), %edx
-               	cmpl	$1, %edx
-               	ja	0x458604 <kfun:kotlin.text.regex.RangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xc4>
-               	movl	612308(%rip), %eax      # 0x4eddac <state_global$kotlin.text.regex.AbstractCharClass>
+               	movl	92(%rcx), %ecx
+               	addl	$4294966713, %ecx       # imm = 0xFFFFFDB9
+               	cmpl	$1, %ecx
+               	ja	0x458b56 <kfun:kotlin.text.regex.RangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xc6>
+               	movl	612866(%rip), %eax      # 0x4ee52c <state_global$kotlin.text.regex.AbstractCharClass>
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -63423,12 +63762,13 @@
@@@[(3, 5), (6, 9)]@@@
-               	movslq	48(%rbp), %rcx
+               	movl	48(%rbp), %ecx
@@@@
-               	jbe	0x458a44 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d4>
+               	jbe	0x458faa <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3ea>
+               	movslq	%ecx, %rcx

@@ -63438,27 +63778,27 @@
@@@[(32, 40)]@@@
-               	movl	20(%rax), %eax
-               	movq	611593(%rip), %rcx      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	cmpl	32(%rcx), %eax
-               	jne	0x458874 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x204>
+               	movq	612154(%rip), %rcx      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	32(%rcx), %ecx
+               	cmpl	%ecx, 20(%rax)
+               	jne	0x458dc6 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x206>

@@ -63477,92 +63817,96 @@
@@@[(17, 25), (64, 66), (73, 74), (76, 79), (80, 84), (110, 112), (119, 120), (122, 125), (126, 130)]@@@
-               	movl	20(%rax), %eax
-               	movq	611472(%rip), %rcx      # 0x4edd30 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
-               	cmpl	32(%rcx), %eax
-               	je	0x4588e2 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x272>
+               	movq	612033(%rip), %rcx      # 0x4ee4b0 <kvar:kotlin.text.regex.Quantifier.$companion#internal>
+               	movl	32(%rcx), %ecx
+               	cmpl	%ecx, 20(%rax)
+               	je	0x458e34 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x274>
@@@@
-               	movslq	48(%rbp), %r14
+               	movl	48(%rbp), %r14d
@@@@
+               	movq	16(%rsp), %rax
@@@@
-               	jbe	0x458a44 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d4>
+               	jbe	0x458faa <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3ea>
+               	movslq	%r14d, %rcx
@@@@
-               	movq	(%r13), %rcx
-               	movl	%eax, 16(%r13,%r14,4)
+               	movq	(%r13), %rdx
+               	movl	%eax, 16(%r13,%rcx,4)
@@@@
-               	movslq	48(%rbp), %r14
+               	movl	48(%rbp), %r14d
@@@@
+               	movq	16(%rsp), %rax
@@@@
-               	jbe	0x458a44 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3d4>
+               	jbe	0x458faa <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet#matches(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x3ea>
+               	movslq	%r14d, %rcx
@@@@
-               	movq	(%r13), %rcx
-               	movl	%eax, 16(%r13,%r14,4)
+               	movq	(%r13), %rdx
+               	movl	%eax, 16(%r13,%rcx,4)

@@ -63582,8 +63926,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopl	(%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nop

@@ -63610,14 +63954,15 @@
@@@[(11, 13), (14, 17)]@@@
-               	movslq	48(%r15), %rcx
+               	movl	48(%r15), %ecx
@@@@
-               	jbe	0x458b3e <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet.matches$matchNext#internal+0xee>
+               	jbe	0x4590a4 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet.matches$matchNext#internal+0xf4>
+               	movslq	%ecx, %rcx

@@ -63630,14 +63975,15 @@
@@@[(3, 16), (17, 19)]@@@
-               	movslq	48(%r15), %rdx
-               	movq	8(%r14), %rsi
-               	movq	%rsi, 32(%rsp)
-               	cmpl	%edx, 8(%rcx)
-               	jbe	0x458b3e <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet.matches$matchNext#internal+0xee>
-               	movl	8(%rsi), %esi
+               	movl	48(%r15), %esi
+               	movq	8(%r14), %rdx
+               	movq	%rdx, 32(%rsp)
+               	cmpl	%esi, 8(%rcx)
+               	jbe	0x4590a4 <kfun:kotlin.text.regex.ReluctantGroupQuantifierSet.matches$matchNext#internal+0xf4>
+               	movslq	%esi, %rsi
+               	movl	8(%rdx), %edx
@@@@
-               	movl	%esi, 16(%rcx,%rdx,4)
+               	movl	%edx, 16(%rcx,%rsi,4)

@@ -63648,8 +63994,8 @@
@@@[(3, 7)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax)

@@ -63966,9 +64312,10 @@
@@@[(3, 4), (5, 9)]@@@
+               	pushq	%r12
@@@@
-               	subq	$88, %rsp
-               	movl	%edx, %r15d
+               	subq	$80, %rsp
+               	movl	%edx, %r12d

@@ -63983,28 +64330,29 @@
@@@[(13, 22), (27, 29), (31, 41)]@@@
-               	je	0x45906d <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}+0x8d>
-               	leaq	609647(%rip), %rdi      # 0x4eddd0 <state_global$kotlin.text.regex.AbstractSet>
-               	leaq	-31448(%rip), %rsi      # 0x451590 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
+               	je	0x4595cf <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}+0x8f>
+               	leaq	610189(%rip), %rdi      # 0x4ee550 <state_global$kotlin.text.regex.AbstractSet>
+               	leaq	-31690(%rip), %rsi      # 0x451a00 <kfun:kotlin.text.regex.AbstractSet.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	leaq	32(%rsp), %r15
@@@@
-               	movb	%r15b, 52(%rbx)
+               	movb	%r12b, 52(%rbx)
@@@@
-               	movq	(%rax), %rax
-               	leaq	394058(%rip), %r15      # 0x4b93e0 <ktypeglobal:kotlin.String#internal>
-               	movq	%r14, %rsi
-               	cmpq	%r15, %rax
-               	je	0x4590ff <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}+0x11f>
+               	movq	(%rax), %rcx
+               	leaq	394595(%rip), %r12      # 0x4b9b60 <ktypeglobal:kotlin.String#internal>
+               	movq	%r14, %rax
+               	cmpq	%r12, %rcx
+               	je	0x459663 <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}+0x123>

@@ -64019,41 +64367,43 @@
@@@[(3, 6), (7, 20), (24, 33), (39, 40), (44, 46)]@@@
-               	callq	0x47a3e0 <Kotlin_String_unsafeStringFromCharArray>
-               	movq	%rax, %rsi
+               	callq	0x47b5a0 <Kotlin_String_unsafeStringFromCharArray>
@@@@
-               	movq	56(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	leaq	32(%rsp), %rdx
-               	movq	%rsi, 32(%rbx)
-               	leaq	592833(%rip), %rdi      # 0x4e9cd0 <__unnamed_775>
-               	callq	0x47a310 <Kotlin_String_plusImpl>
+               	movq	56(%rsp), %rcx
+               	movq	%rcx, 288(%rbp)
+               	movq	%rax, 32(%rbx)
+               	movq	32(%rbx), %rsi
+               	leaq	593374(%rip), %rdi      # 0x4ea450 <__unnamed_775>
+               	movq	%r15, %rdx
+               	callq	0x47b4d0 <Kotlin_String_plusImpl>
@@@@
-               	xorl	%ecx, %ecx
-               	cmpq	%r15, %rax
-               	setne	%cl
-               	movl	8(%r14,%rcx,8), %eax
+               	cmpq	%r12, %rax
+               	je	0x459693 <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}+0x153>
+               	movl	16(%r14), %eax
+               	jmp	0x459697 <kfun:kotlin.text.regex.SequenceSet#<init>(kotlin.CharSequence;kotlin.Boolean){}+0x157>
+               	movl	8(%r14), %eax
@@@@
+               	popq	%r12
@@@@
-               	nopl	(%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -64163,12 +64513,13 @@
@@@[(3, 4), (8, 12)]@@@
+               	movq	224(%rax), %rax
@@@@
-               	jmpq	*224(%rax)
-               	nopw	%cs:(%rax,%rax)
+               	jmpq	*%rax
+               	nopl	(%rax,%rax)

@@ -64389,48 +64740,48 @@
@@@[(20, 28), (30, 36), (42, 50)]@@@
-               	movl	$4294966717, %ecx       # imm = 0xFFFFFDBD
-               	addl	92(%rax), %ecx
-               	cmpl	$2, %ecx
-               	ja	0x459640 <kfun:kotlin.text.regex.SequenceSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xb0>
+               	movl	92(%rax), %eax
+               	addl	$4294966717, %eax       # imm = 0xFFFFFDBD
+               	cmpl	$2, %eax
+               	ja	0x459bb0 <kfun:kotlin.text.regex.SequenceSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xb0>
@@@@
-               	je	0x4597ea <kfun:kotlin.text.regex.SequenceSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x25a>
-               	movzwl	28(%r14), %ecx
-               	cmpw	16(%rax), %cx
+               	je	0x459d5a <kfun:kotlin.text.regex.SequenceSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x25a>
+               	movzwl	16(%rax), %eax
+               	cmpw	%ax, 28(%r14)
@@@@
-               	movl	$4294966713, %ecx       # imm = 0xFFFFFDB9
-               	addl	92(%rax), %ecx
-               	cmpl	$1, %ecx
-               	ja	0x4596ea <kfun:kotlin.text.regex.SequenceSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x15a>
+               	movl	92(%rax), %eax
+               	addl	$4294966713, %eax       # imm = 0xFFFFFDB9
+               	cmpl	$1, %eax
+               	ja	0x459c5a <kfun:kotlin.text.regex.SequenceSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x15a>

@@ -64450,33 +64801,33 @@
@@@[(35, 36), (38, 39)]@@@
-               	movzwl	18(%rax), %esi
@@@@
+               	movzwl	18(%rax), %esi

@@ -64486,30 +64837,30 @@
@@@[(24, 25), (27, 28)]@@@
-               	movzwl	18(%rax), %eax
@@@@
+               	movzwl	18(%rax), %eax

@@ -65354,39 +65705,39 @@
@@@[(37, 44), (45, 56)]@@@
-               	movl	$4294966717, %ecx       # imm = 0xFFFFFDBD
-               	addl	92(%rax), %ecx
-               	cmpl	$2, %ecx
-               	ja	0x45a4e3 <kfun:kotlin.text.regex.SupplementaryRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xb3>
-               	movl	604419(%rip), %eax      # 0x4eddac <state_global$kotlin.text.regex.AbstractCharClass>
+               	movl	92(%rax), %eax
+               	addl	$4294966717, %eax       # imm = 0xFFFFFDBD
@@@@
-               	je	0x45a4c1 <kfun:kotlin.text.regex.SupplementaryRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x91>
-               	leaq	604407(%rip), %rdi      # 0x4eddac <state_global$kotlin.text.regex.AbstractCharClass>
-               	leaq	-172892(%rip), %rsi     # 0x430160 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
+               	ja	0x45aa53 <kfun:kotlin.text.regex.SupplementaryRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0xb3>
+               	movl	604947(%rip), %eax      # 0x4ee52c <state_global$kotlin.text.regex.AbstractCharClass>
+               	cmpl	$2, %eax
+               	je	0x45aa31 <kfun:kotlin.text.regex.SupplementaryRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x91>
+               	leaq	604935(%rip), %rdi      # 0x4ee52c <state_global$kotlin.text.regex.AbstractCharClass>
+               	leaq	-173580(%rip), %rsi     # 0x430420 <kfun:kotlin.text.regex.AbstractCharClass.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>

@@ -65401,38 +65752,38 @@
@@@[(26, 36)]@@@
-               	movl	$4294966713, %ecx       # imm = 0xFFFFFDB9
-               	addl	92(%rax), %ecx
-               	cmpl	$1, %ecx
-               	ja	0x45a571 <kfun:kotlin.text.regex.SupplementaryRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x141>
-               	movl	604263(%rip), %eax      # 0x4eddac <state_global$kotlin.text.regex.AbstractCharClass>
+               	movl	92(%rax), %eax
+               	addl	$4294966713, %eax       # imm = 0xFFFFFDB9
+               	cmpl	$1, %eax
+               	ja	0x45aae1 <kfun:kotlin.text.regex.SupplementaryRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x141>
+               	movl	604791(%rip), %eax      # 0x4ee52c <state_global$kotlin.text.regex.AbstractCharClass>

@@ -65520,7 +65871,7 @@
@@@[(3, 5)]@@@
-               	movl	%esi, %ebx
+               	movl	%esi, %ebp

@@ -65533,26 +65884,25 @@
@@@[(16, 18), (24, 25), (26, 30)]@@@
-               	addl	%ebx, %esi
+               	addl	%ebp, %esi
@@@@
-               	movl	%ebx, %ebp
@@@@
-               	jns	0x45a7bb <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x16b>
-               	addl	$1, %ebx
+               	jns	0x45ad29 <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x169>
+               	addl	$1, %ebp

@@ -65563,21 +65913,21 @@
@@@[(3, 11), (12, 17), (18, 19), (20, 24), (25, 29)]@@@
-               	movl	$4294967295, %ebp       # imm = 0xFFFFFFFF
-               	cmpl	%eax, %ebx
-               	jge	0x45a7bb <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x16b>
-               	movzbl	608527(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
+               	cmpl	%eax, %ebp
+               	jge	0x45ad2b <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x16b>
+               	movzbl	609065(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x45a732 <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe2>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	28(%r15), %esi
+               	je	0x45aca0 <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xe0>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
+               	movzwl	28(%r15), %esi
@@@@
-               	movl	%ebx, %edx
-               	callq	0x460600 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
+               	movl	%ebp, %edx
+               	callq	0x460bf0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
@@@@
-               	js	0x45a7bb <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x16b>
-               	movl	%eax, %ebx
+               	js	0x45ad2b <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x16b>
+               	movl	%eax, %ebp

@@ -65588,11 +65938,11 @@
@@@[(3, 5)]@@@
-               	movl	%ebx, %esi
+               	movl	%ebp, %esi

@@ -65605,11 +65955,12 @@
@@@[(3, 8), (10, 12)]@@@
-               	jne	0x45a6c0 <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x70>
-               	jmp	0x45a6ef <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x9f>
+               	jne	0x45ac30 <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x70>
+               	jmp	0x45ac5d <kfun:kotlin.text.regex.LowSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x9d>
+               	movl	%ebp, %ebx
@@@@
-               	movl	%ebp, %eax
+               	movl	%ebx, %eax

@@ -65663,29 +66014,28 @@
@@@[(3, 4), (14, 19), (20, 21)]@@@
-               	movl	%r14d, %r15d
@@@@
-               	je	0x45a8b9 <kfun:kotlin.text.regex.LowSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd9>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	28(%rbp), %esi
+               	je	0x45ae26 <kfun:kotlin.text.regex.LowSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd6>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
+               	movzwl	28(%rbp), %esi

@@ -65699,8 +66049,9 @@
@@@[(3, 8)]@@@
-               	je	0x45a89e <kfun:kotlin.text.regex.LowSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xbe>
-               	jmp	0x45a870 <kfun:kotlin.text.regex.LowSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x90>
+               	je	0x45ae0b <kfun:kotlin.text.regex.LowSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xbb>
+               	jmp	0x45ade0 <kfun:kotlin.text.regex.LowSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x90>
+               	movl	%r14d, %r15d

@@ -65721,19 +66072,19 @@
@@@[(17, 23)]@@@
-               	jne	0x45a989 <kfun:kotlin.text.regex.LowSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x49>
-               	movzwl	28(%rbx), %eax
-               	cmpw	28(%r14), %ax
+               	jne	0x45aef9 <kfun:kotlin.text.regex.LowSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x49>
+               	movzwl	28(%r14), %eax
+               	cmpw	%ax, 28(%rbx)

@@ -65742,27 +66093,27 @@
@@@[(3, 11), (14, 22)]@@@
-               	movl	$4294966717, %ecx       # imm = 0xFFFFFDBD
-               	addl	92(%rax), %ecx
-               	cmpl	$3, %ecx
-               	jb	0x45a9dd <kfun:kotlin.text.regex.LowSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
+               	movl	92(%rax), %eax
+               	addl	$4294966717, %eax       # imm = 0xFFFFFDBD
+               	cmpl	$3, %eax
+               	jb	0x45af4d <kfun:kotlin.text.regex.LowSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
@@@@
-               	movl	$4294966713, %ecx       # imm = 0xFFFFFDB9
-               	addl	92(%rax), %ecx
-               	cmpl	$2, %ecx
-               	jb	0x45a9dd <kfun:kotlin.text.regex.LowSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
+               	movl	92(%rax), %eax
+               	addl	$4294966713, %eax       # imm = 0xFFFFFDB9
+               	cmpl	$2, %eax
+               	jb	0x45af4d <kfun:kotlin.text.regex.LowSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>

@@ -65865,15 +66216,15 @@
@@@[(3, 4), (10, 17)]@@@
+               	movq	%rcx, 8(%rsp)
@@@@
-               	movq	%rcx, 8(%rsp)
-               	je	0x45ab7f <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xaf>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	jmp	0x45ab7f <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xaf>
+               	je	0x45b0ed <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xad>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	jmp	0x45b0ed <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xad>

@@ -65885,9 +66236,8 @@
@@@[(3, 4)]@@@
-               	movl	%ebx, %ebp

@@ -65900,18 +66250,18 @@
@@@[(8, 13), (14, 15)]@@@
-               	je	0x45abc0 <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xf0>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	28(%r15), %esi
+               	je	0x45b12e <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xee>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
+               	movzwl	28(%r15), %esi

@@ -65941,8 +66291,9 @@
@@@[(3, 8)]@@@
-               	je	0x45ab7f <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xaf>
-               	jmp	0x45ab50 <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x80>
+               	je	0x45b0ed <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xad>
+               	jmp	0x45b0c0 <kfun:kotlin.text.regex.HighSurrogateCharSet#find(kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x80>
+               	movl	%ebx, %ebp

@@ -66000,30 +66351,29 @@
@@@[(3, 4), (15, 20), (21, 22)]@@@
-               	movl	%ebx, %r14d
@@@@
-               	je	0x45ad5b <kfun:kotlin.text.regex.HighSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xdb>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	28(%rbp), %esi
+               	je	0x45b2c8 <kfun:kotlin.text.regex.HighSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xd8>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
+               	movzwl	28(%rbp), %esi

@@ -66036,8 +66386,9 @@
@@@[(3, 8)]@@@
-               	jne	0x45ad10 <kfun:kotlin.text.regex.HighSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x90>
-               	jmp	0x45ad3d <kfun:kotlin.text.regex.HighSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xbd>
+               	jne	0x45b280 <kfun:kotlin.text.regex.HighSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0x90>
+               	jmp	0x45b2aa <kfun:kotlin.text.regex.HighSurrogateCharSet#findBack(kotlin.Int;kotlin.Int;kotlin.CharSequence;kotlin.text.regex.MatchResultImpl){}kotlin.Int+0xba>
+               	movl	%ebx, %r14d

@@ -66058,19 +66409,19 @@
@@@[(17, 23)]@@@
-               	jne	0x45ae29 <kfun:kotlin.text.regex.HighSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x49>
-               	movzwl	28(%rbx), %eax
-               	cmpw	28(%r14), %ax
+               	jne	0x45b399 <kfun:kotlin.text.regex.HighSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x49>
+               	movzwl	28(%r14), %eax
+               	cmpw	%ax, 28(%rbx)

@@ -66079,27 +66430,27 @@
@@@[(3, 11), (14, 22)]@@@
-               	movl	$4294966717, %ecx       # imm = 0xFFFFFDBD
-               	addl	92(%rax), %ecx
-               	cmpl	$3, %ecx
-               	jb	0x45ae7d <kfun:kotlin.text.regex.HighSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
+               	movl	92(%rax), %eax
+               	addl	$4294966717, %eax       # imm = 0xFFFFFDBD
+               	cmpl	$3, %eax
+               	jb	0x45b3ed <kfun:kotlin.text.regex.HighSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
@@@@
-               	movl	$4294966713, %ecx       # imm = 0xFFFFFDB9
-               	addl	92(%rax), %ecx
-               	cmpl	$2, %ecx
-               	jb	0x45ae7d <kfun:kotlin.text.regex.HighSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>
+               	movl	92(%rax), %eax
+               	addl	$4294966713, %eax       # imm = 0xFFFFFDB9
+               	cmpl	$2, %eax
+               	jb	0x45b3ed <kfun:kotlin.text.regex.HighSurrogateCharSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x9d>

@@ -66270,35 +66621,35 @@
@@@[(23, 31), (37, 45)]@@@
-               	movl	$4294966717, %ecx       # imm = 0xFFFFFDBD
-               	addl	92(%rax), %ecx
-               	cmpl	$3, %ecx
-               	jae	0x45b098 <kfun:kotlin.text.regex.SurrogateRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x48>
+               	movl	92(%rax), %eax
+               	addl	$4294966717, %eax       # imm = 0xFFFFFDBD
+               	cmpl	$3, %eax
+               	jae	0x45b608 <kfun:kotlin.text.regex.SurrogateRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x48>
@@@@
-               	movl	$4294966713, %ecx       # imm = 0xFFFFFDB9
-               	addl	92(%rax), %ecx
-               	cmpl	$2, %ecx
-               	jae	0x45b0b3 <kfun:kotlin.text.regex.SurrogateRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x63>
+               	movl	92(%rax), %eax
+               	addl	$4294966713, %eax       # imm = 0xFFFFFDB9
+               	cmpl	$2, %eax
+               	jae	0x45b623 <kfun:kotlin.text.regex.SurrogateRangeSet#first(kotlin.text.regex.AbstractSet){}kotlin.Boolean+0x63>

@@ -67553,21 +67904,22 @@
@@@[(12, 16), (18, 29)]@@@
-               	jle	0x45c2ac <kfun:kotlin.collections.AbstractList.ListIteratorImpl.previous#internal+0x9c>
-               	movq	24(%rbx), %rcx
+               	jle	0x45c820 <kfun:kotlin.collections.AbstractList.ListIteratorImpl.previous#internal+0xa0>
+               	movq	24(%rbx), %rdx
@@@@
-               	movq	8(%rcx), %rcx
-               	cmpl	%eax, 8(%rcx)
-               	jbe	0x45c2ef <kfun:kotlin.collections.AbstractList.ListIteratorImpl.previous#internal+0xdf>
-               	cltq
-               	movq	16(%rcx,%rax,8), %rax
+               	movl	16(%rbx), %ecx
+               	movq	8(%rdx), %rax
+               	cmpl	%ecx, 8(%rax)
+               	jbe	0x45c863 <kfun:kotlin.collections.AbstractList.ListIteratorImpl.previous#internal+0xe3>
+               	movslq	%ecx, %rcx
+               	movq	16(%rax,%rcx,8), %rax

@@ -67579,19 +67931,19 @@
@@@[(16, 22)]@@@
-               	callq	0x47dcf0 <ThrowException>
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x47ef60 <ThrowException>
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	nopl	(%rax,%rax)

@@ -67816,21 +68168,22 @@
@@@[(21, 26)]@@@
-               	movq	%rcx, 595478(%rip)      # 0x4edd48 <kvar:kotlin.collections.ArrayDeque.$companion#internal>
-               	leaq	595471(%rip), %rdi      # 0x4edd48 <kvar:kotlin.collections.ArrayDeque.$companion#internal>
+               	movq	%rcx, 596006(%rip)      # 0x4ee4c8 <kvar:kotlin.collections.ArrayDeque.$companion#internal>
+               	leaq	595999(%rip), %rdi      # 0x4ee4c8 <kvar:kotlin.collections.ArrayDeque.$companion#internal>
+               	movq	595992(%rip), %rax      # 0x4ee4c8 <kvar:kotlin.collections.ArrayDeque.$companion#internal>

@@ -67840,31 +68193,31 @@
@@@[(22, 24)]@@@
-               	nopl	(%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -67882,20 +68235,21 @@
@@@[(3, 4), (6, 8), (11, 13)]@@@
+               	movq	40(%rax), %rax
@@@@
-               	jmpq	*40(%rax)
+               	jmpq	*%rax
@@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -68308,45 +68662,46 @@
@@@[(43, 46), (48, 52)]@@@
-               	movq	%rcx, 56(%rsp)
+               	movq	48(%rsp), %rax
+               	movq	%rax, 56(%rsp)
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)

@@ -68357,6 +68712,7 @@
@@@[(3, 4)]@@@
+               	nopw	%cs:(%rax,%rax)

@@ -68441,8 +68797,9 @@
@@@[(3, 4)]@@@
+               	pushq	%r12

@@ -68457,65 +68814,65 @@
@@@[(6, 11), (12, 15), (29, 33), (43, 44), (47, 48)]@@@
-               	je	0x45d0eb <kfun:kotlin.sequences.TransformingSequence.object-1.next#internal+0x6b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	8(%rbx), %rdi
+               	je	0x45d68d <kfun:kotlin.sequences.TransformingSequence.object-1.next#internal+0x6d>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
@@@@
-               	movq	16(%rax), %rbx
+               	movq	16(%rax), %r12
+               	movq	8(%rbx), %rdi
@@@@
-               	callq	0x45d080 <kfun:kotlin.sequences.TransformingSequence.object-1.next#internal>
-               	movq	8(%rbx), %rdi
+               	callq	0x45d620 <kfun:kotlin.sequences.TransformingSequence.object-1.next#internal>
+               	movq	8(%r12), %rdi
@@@@
+               	popq	%r12
@@@@
-               	nopl	(%rax,%rax)

@@ -68551,20 +68908,21 @@
@@@[(3, 4), (6, 8), (11, 13)]@@@
+               	movq	24(%rax), %rax
@@@@
-               	jmpq	*24(%rax)
+               	jmpq	*%rax
@@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -68637,19 +68995,20 @@
@@@[(3, 4), (6, 8)]@@@
+               	movq	24(%rax), %rax
@@@@
-               	jmpq	*24(%rax)
+               	jmpq	*%rax

@@ -68748,20 +69107,22 @@
@@@[(13, 14), (22, 23)]@@@
+               	movq	32(%rsp), %rax
@@@@
+               	movq	32(%rsp), %rax

@@ -68772,7 +69133,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -68878,35 +69239,36 @@
@@@[(26, 34), (43, 46)]@@@
-               	callq	0x45d3f0 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
-               	movslq	16(%r15), %rcx
-               	testq	%rcx, %rcx
-               	js	0x45d6a9 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa9>
+               	callq	0x45d9a0 <kfun:kotlin.enums.EnumEntriesList.<get-entries>#internal>
+               	movl	16(%r15), %ecx
+               	testl	%ecx, %ecx
+               	js	0x45dc68 <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xa8>
@@@@
-               	jbe	0x45d6dc <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xdc>
+               	jbe	0x45dc9e <kfun:kotlin.enums.EnumEntriesList.contains#internal+0xde>
+               	movslq	%ecx, %rcx

@@ -69027,22 +69389,22 @@
@@@[(13, 31)]@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	movq	%rax, %r15
-               	addq	$16, %rax
-               	movq	$0, 8(%r15)
-               	leaq	439028(%rip), %rcx      # 0x4c8bf0 <ktypeglobal:kotlin.ranges.IntRange.Companion#internal>
-               	movq	%rcx, 16(%r15)
-               	movq	%rax, 24(%rsp)
-               	movq	%rax, 590916(%rip)      # 0x4edd50 <kvar:kotlin.ranges.IntRange.$companion#internal>
-               	leaq	590909(%rip), %r14      # 0x4edd50 <kvar:kotlin.ranges.IntRange.$companion#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rcx
+               	movq	$0, 8(%rax)
+               	leaq	439479(%rip), %rdx      # 0x4c9370 <ktypeglobal:kotlin.ranges.IntRange.Companion#internal>
+               	movq	%rdx, 16(%rax)
+               	movq	%rcx, 24(%rsp)
+               	movq	%rcx, 591367(%rip)      # 0x4ee4d0 <kvar:kotlin.ranges.IntRange.$companion#internal>
+               	leaq	591360(%rip), %r14      # 0x4ee4d0 <kvar:kotlin.ranges.IntRange.$companion#internal>
+               	movq	591353(%rip), %r15      # 0x4ee4d0 <kvar:kotlin.ranges.IntRange.$companion#internal>

@@ -69099,18 +69461,18 @@
@@@[(13, 25)]@@@
-               	je	0x45da61 <kfun:kotlin.ranges.IntRange#isEmpty(){}kotlin.Boolean+0x31>
-               	leaq	590627(%rip), %rdi      # 0x4edd78 <state_global$kotlin.ranges.IntRange>
-               	leaq	-492(%rip), %rsi        # 0x45d870 <kfun:kotlin.ranges.IntRange.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movl	8(%rbx), %eax
-               	cmpl	12(%rbx), %eax
+               	je	0x45e021 <kfun:kotlin.ranges.IntRange#isEmpty(){}kotlin.Boolean+0x31>
+               	leaq	591075(%rip), %rdi      # 0x4ee4f8 <state_global$kotlin.ranges.IntRange>
+               	leaq	-492(%rip), %rsi        # 0x45de30 <kfun:kotlin.ranges.IntRange.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movl	12(%rbx), %eax
+               	cmpl	%eax, 8(%rbx)

@@ -69122,69 +69484,69 @@
@@@[(71, 77)]@@@
-               	jne	0x45db5f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xef>
-               	movl	12(%r14), %eax
-               	cmpl	12(%rbx), %eax
+               	jne	0x45e11f <kfun:kotlin.ranges.IntRange#equals(kotlin.Any?){}kotlin.Boolean+0xef>
+               	movl	12(%rbx), %eax
+               	cmpl	%eax, 12(%r14)

@@ -69481,12 +69843,13 @@
@@@[(3, 5), (8, 13)]@@@
-               	testl	%ebx, %ebx
+               	cmpl	$0, 24(%rax)
@@@@
-               	cmovnel	%r15d, %ebp
-               	movl	%ebp, 32(%rax)
+               	jne	0x45e5e0 <kfun:kotlin.ranges.IntProgression#iterator(){}kotlin.collections.IntIterator+0x90>
+               	movl	12(%rcx), %r15d
+               	movl	%r15d, 32(%rax)

@@ -69495,18 +69858,19 @@
@@@[(3, 4), (19, 21)]@@@
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	cmpl	12(%rbx), %ecx
+               	cmpl	%ecx, 8(%rbx)

@@ -69549,15 +69913,15 @@
@@@[(3, 21)]@@@
-               	jne	0x45e0e3 <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x83>
-               	movl	8(%r14), %eax
-               	cmpl	8(%rbx), %eax
-               	jne	0x45e0eb <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
-               	movl	12(%r14), %eax
-               	cmpl	12(%rbx), %eax
-               	jne	0x45e0eb <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
-               	movl	16(%r14), %eax
-               	cmpl	16(%rbx), %eax
+               	jne	0x45e6b3 <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x83>
+               	movl	8(%rbx), %eax
+               	cmpl	%eax, 8(%r14)
+               	jne	0x45e6bb <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
+               	movl	12(%rbx), %eax
+               	cmpl	%eax, 12(%r14)
+               	jne	0x45e6bb <kfun:kotlin.ranges.IntProgression#equals(kotlin.Any?){}kotlin.Boolean+0x8b>
+               	movl	16(%rbx), %eax
+               	cmpl	%eax, 16(%r14)

@@ -69677,35 +70041,35 @@
@@@[(33, 39)]@@@
-               	callq	0x42faf0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
-               	xorl	%esi, %esi
-               	subl	16(%r13), %esi
+               	callq	0x42fda0 <kfun:kotlin.text.StringBuilder#append(kotlin.String?){}kotlin.text.StringBuilder>
+               	movl	16(%r13), %esi
+               	negl	%esi

@@ -69865,20 +70229,22 @@
@@@[(16, 17), (18, 19), (20, 22)]@@@
+               	movq	%rax, 288(%rbx)
@@@@
-               	movaps	%xmm0, 416(%rsp)
@@@@
+               	movaps	%xmm0, 416(%rsp)
+               	movq	288(%rbx), %rax

@@ -70549,98 +70915,98 @@
@@@[(16, 20), (36, 40)]@@@
-               	testq	%rcx, %rcx
-               	je	0x45f3d5 <kfun:kotlin.text#toIntOrNull__at__kotlin.String(kotlin.Int){}kotlin.Int?+0x175>
+               	testl	%ecx, %ecx
+               	je	0x45f9b5 <kfun:kotlin.text#toIntOrNull__at__kotlin.String(kotlin.Int){}kotlin.Int?+0x175>
@@@@
-               	nopl	(%rax)
-               	movzbl	589137(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	nopl	(%rax,%rax)
+               	movzbl	589561(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>

@@ -70671,27 +71037,27 @@
@@@[(15, 19)]@@@
-               	testq	%r12, %r12
-               	je	0x45f5d3 <kfun:kotlin.text#toLongOrNull__at__kotlin.String(kotlin.Int){}kotlin.Long?+0x1c3>
+               	testl	%r12d, %r12d
+               	je	0x45fbb3 <kfun:kotlin.text#toLongOrNull__at__kotlin.String(kotlin.Int){}kotlin.Long?+0x1c3>

@@ -70957,103 +71323,104 @@
@@@[(3, 5), (6, 10), (11, 13), (14, 20), (28, 38), (44, 58), (65, 69), (79, 84), (87, 121), (124, 130), (132, 136), (147, 151), (154, 162)]@@@
-               	movl	%ecx, %r14d
+               	movl	%ecx, %r13d
@@@@
-               	movl	%esi, %r12d
-               	movq	%rdi, %r13
+               	movl	%esi, %ebx
+               	movq	%rdi, %rbp
@@@@
-               	movaps	%xmm0, 80(%rsp)
-               	movaps	%xmm0, 64(%rsp)
@@@@
-               	movq	$0, 96(%rsp)
-               	leaq	362948(%rip), %rax      # 0x4b81e0 <ktypeglobal:kotlin.CharArray#internal>
+               	movaps	%xmm0, 32(%rsp)
+               	movaps	%xmm0, 16(%rsp)
+               	movq	$0, 64(%rsp)
+               	leaq	363365(%rip), %rax      # 0x4b8960 <ktypeglobal:kotlin.CharArray#internal>
@@@@
-               	movq	-64(%rax), %rbx
-               	movq	288(%rbx), %rax
-               	movq	%rax, 56(%rsp)
-               	leaq	48(%rsp), %rax
-               	movq	%rax, 288(%rbx)
+               	movq	-64(%rax), %r14
+               	movq	288(%r14), %rax
+               	movq	%rax, 24(%rsp)
+               	leaq	16(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	je	0x45f87d <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x9d>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	testq	%r13, %r13
-               	je	0x45f8ec <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
-               	testb	%r14b, %r14b
-               	jne	0x45f8ec <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10c>
-               	movq	(%r13), %rax
+               	je	0x45fe5c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x9c>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	testq	%rbp, %rbp
+               	je	0x45fecb <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10b>
+               	testb	%r13b, %r13b
+               	jne	0x45fecb <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x10b>
+               	movq	(%rbp), %rax
@@@@
-               	js	0x45fa70 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x290>
-               	movl	8(%r13), %ecx
+               	js	0x460066 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a6>
+               	movl	8(%rbp), %ecx
@@@@
-               	nop
-               	cmpw	%r12w, 16(%r13,%rax,2)
-               	je	0x45fa8d <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2ad>
+               	cmpw	%bx, 16(%rbp,%rax,2)
+               	je	0x460083 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c3>
@@@@
-               	jg	0x45f8d0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
-               	jmp	0x45fa70 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x290>
-               	leaq	8(%rsp), %rax
-               	movq	%rax, 72(%rsp)
-               	movq	%rax, 80(%rsp)
-               	movq	%rax, 88(%rsp)
-               	movq	8(%rsp), %rcx
-               	movw	%r12w, 24(%rsp)
-               	movq	%rax, 96(%rsp)
-               	testb	%r14b, %r14b
-               	jne	0x45f98c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ac>
-               	cmpl	$1, 16(%rsp)
-               	jne	0x45f98c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ac>
-               	testq	%r13, %r13
-               	je	0x45f98c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ac>
-               	movq	(%r13), %rax
+               	jg	0x45feb0 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf0>
+               	jmp	0x460066 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a6>
+               	leaq	80(%rsp), %rax
+               	movq	%rax, 40(%rsp)
+               	movq	%rax, 48(%rsp)
+               	movq	48(%rsp), %rax
+               	movq	%rax, 56(%rsp)
+               	movq	(%rax), %rcx
+               	movw	%bx, 16(%rax)
+               	movq	48(%rsp), %rbx
+               	movq	%rbx, 64(%rsp)
+               	testb	%r13b, %r13b
+               	jne	0x45ff6b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ab>
+               	cmpl	$1, 8(%rbx)
+               	jne	0x45ff6b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ab>
+               	testq	%rbp, %rbp
+               	je	0x45ff6b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ab>
+               	movq	(%rbp), %rax
@@@@
-               	jne	0x45f98c <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ac>
-               	leaq	8(%rsp), %rdi
-               	callq	0x422940 <kfun:kotlin.collections#single__at__kotlin.CharArray(){}kotlin.Char>
+               	jne	0x45ff6b <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ab>
+               	movq	%rbx, %rdi
+               	callq	0x422b50 <kfun:kotlin.collections#single__at__kotlin.CharArray(){}kotlin.Char>
@@@@
-               	js	0x45fa70 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x290>
-               	movl	8(%r13), %edx
+               	js	0x460066 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a6>
+               	movl	8(%rbp), %edx
@@@@
-               	cmpw	%ax, 16(%r13,%rcx,2)
-               	je	0x45fa91 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b1>
+               	cmpw	%ax, 16(%rbp,%rcx,2)
+               	je	0x460087 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2c7>
@@@@
-               	jg	0x45f970 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x190>
-               	jmp	0x45fa70 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x290>
-               	movq	%rbx, 32(%rsp)
-               	movq	(%r13), %rax
+               	jg	0x45ff50 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x190>
+               	jmp	0x460066 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a6>
+               	movq	%r14, (%rsp)
+               	movq	(%rbp), %rax

@@ -71061,21 +71428,22 @@
@@@[(3, 5), (6, 21), (22, 32)]@@@
-               	movq	%r13, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	movl	%eax, %ebx
-               	addl	$-1, %ebx
-               	cmpl	%r15d, %ebx
-               	cmovgl	%r15d, %ebx
-               	testl	%ebx, %ebx
-               	js	0x45fa5d <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x27d>
-               	movb	587370(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movl	%eax, %r14d
+               	addl	$-1, %r14d
+               	cmpl	%r15d, %r14d
+               	cmovgl	%r15d, %r14d
+               	testl	%r14d, %r14d
+               	js	0x460054 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x294>
+               	movq	%rbp, 72(%rsp)
+               	movb	587788(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x45f9d7 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f7>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	leal	-1(%rbx), %eax
-               	movl	%eax, 44(%rsp)
-               	movq	(%r13), %rax
+               	je	0x45ffbd <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1fd>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	leal	-1(%r14), %eax
+               	movl	%eax, 12(%rsp)
+               	movq	(%rbp), %rax

@@ -71083,42 +71451,43 @@
@@@[(3, 7), (9, 11), (16, 22), (23, 29), (30, 34), (39, 52), (53, 63)]@@@
-               	movq	%r13, %rdi
-               	movl	%ebx, %esi
+               	movq	%rbp, %rdi
+               	movl	%r14d, %esi
@@@@
-               	movl	16(%rsp), %r15d
+               	movl	8(%rbx), %r15d
@@@@
-               	je	0x45fa4f <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x26f>
-               	nop
-               	movzbl	587281(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	je	0x46003f <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x27f>
+               	nopw	(%rax,%rax)
+               	movzbl	587689(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x45fa30 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x250>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	24(%rsp,%r12,2), %edi
+               	je	0x460020 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x260>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movzwl	16(%rbx,%r12,2), %edi
@@@@
-               	movzbl	%r14b, %edx
-               	callq	0x45e3f0 <kfun:kotlin.text#equals__at__kotlin.Char(kotlin.Char;kotlin.Boolean){}kotlin.Boolean>
+               	movzbl	%r13b, %edx
+               	callq	0x45e9c0 <kfun:kotlin.text#equals__at__kotlin.Char(kotlin.Char;kotlin.Boolean){}kotlin.Boolean>
@@@@
-               	jne	0x45fa20 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x240>
-               	testl	%ebx, %ebx
-               	movl	44(%rsp), %eax
-               	movl	%eax, %ebx
-               	jg	0x45f9c8 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1e8>
-               	movq	32(%rsp), %rbx
+               	jne	0x460010 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x250>
+               	testl	%r14d, %r14d
+               	movl	12(%rsp), %eax
+               	movl	%eax, %r14d
+               	movq	72(%rsp), %rbp
+               	jg	0x45ffae <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1ee>
+               	movq	(%rsp), %r14
@@@@
-               	jmp	0x45fa70 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x290>
-               	movl	%ebx, %esi
-               	movq	32(%rsp), %rbx
-               	movq	56(%rsp), %rax
-               	movq	%rax, 288(%rbx)
+               	jmp	0x460066 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a6>
+               	movl	%r14d, %esi
+               	movq	(%rsp), %r14
+               	movq	24(%rsp), %rax
+               	movq	%rax, 288(%r14)

@@ -71129,10 +71498,10 @@
@@@[(6, 10)]@@@
-               	jmp	0x45fa70 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x290>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x460066 <kfun:kotlin.text#lastIndexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a6>
+               	nopl	(%rax,%rax)

@@ -71467,16 +71836,16 @@
@@@[(13, 21)]@@@
-               	je	0x45ff77 <kfun:kotlin.text#substring__at__kotlin.CharSequence(kotlin.ranges.IntRange){}kotlin.String+0x87>
-               	leaq	581133(%rip), %rdi      # 0x4edd78 <state_global$kotlin.ranges.IntRange>
-               	leaq	-9986(%rip), %rsi       # 0x45d870 <kfun:kotlin.ranges.IntRange.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
+               	je	0x460567 <kfun:kotlin.text#substring__at__kotlin.CharSequence(kotlin.ranges.IntRange){}kotlin.String+0x87>
+               	leaq	581533(%rip), %rdi      # 0x4ee4f8 <state_global$kotlin.ranges.IntRange>
+               	leaq	-10034(%rip), %rsi      # 0x45de30 <kfun:kotlin.ranges.IntRange.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>

@@ -71630,8 +71999,9 @@
@@@[(6, 7)]@@@
+               	movl	44(%rbx), %eax

@@ -71641,7 +72011,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -71665,25 +72035,26 @@
@@@[(21, 26)]@@@
-               	cmpl	28(%rax), %edx
-               	jge	0x4602eb <kfun:kotlin.text.DelimitedRangesSequence.object-1.calcNext#internal+0xab>
+               	movl	28(%rax), %edx
+               	cmpl	%edx, 36(%rbx)
+               	jge	0x4608de <kfun:kotlin.text.DelimitedRangesSequence.object-1.calcNext#internal+0xae>

@@ -71699,31 +72070,31 @@
@@@[(27, 28), (29, 30)]@@@
-               	movq	8(%rax), %rsi
@@@@
+               	movq	8(%rax), %rsi

@@ -71733,13 +72104,14 @@
@@@[(8, 9), (10, 14)]@@@
+               	movl	28(%rbx), %eax
@@@@
-               	adcl	$0, %ebp
-               	movl	%ebp, 32(%rbx)
+               	adcl	$0, %eax
+               	movl	%eax, 32(%rbx)

@@ -71766,20 +72138,20 @@
@@@[(18, 22)]@@@
-               	jmp	0x460360 <kfun:kotlin.text.DelimitedRangesSequence.object-1.calcNext#internal+0x120>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x460953 <kfun:kotlin.text.DelimitedRangesSequence.object-1.calcNext#internal+0x123>
+               	nopl	(%rax)

@@ -71893,69 +72265,71 @@
@@@[(3, 5), (6, 8), (9, 15), (23, 33), (39, 47), (48, 52), (60, 62), (71, 75), (77, 97), (98, 102), (103, 107)]@@@
-               	movq	%rdi, %r14
+               	movq	%rdi, %r15
@@@@
-               	movaps	%xmm0, 80(%rsp)
-               	movaps	%xmm0, 64(%rsp)
@@@@
-               	movq	$0, 96(%rsp)
-               	leaq	359334(%rip), %rax      # 0x4b81e0 <ktypeglobal:kotlin.CharArray#internal>
+               	movaps	%xmm0, 32(%rsp)
+               	movaps	%xmm0, 16(%rsp)
+               	movq	$0, 64(%rsp)
+               	leaq	359734(%rip), %rax      # 0x4b8960 <ktypeglobal:kotlin.CharArray#internal>
@@@@
-               	movq	-64(%rax), %r15
-               	movq	288(%r15), %rax
-               	movq	%rax, 56(%rsp)
-               	leaq	48(%rsp), %rax
-               	movq	%rax, 288(%r15)
+               	movq	-64(%rax), %r14
+               	movq	288(%r14), %rax
+               	movq	%rax, 24(%rsp)
+               	leaq	16(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	je	0x46069b <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x9b>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	testq	%r14, %r14
-               	je	0x4606f9 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf9>
+               	je	0x460c8b <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x9b>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	testq	%r15, %r15
+               	je	0x460ce9 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf9>
@@@@
-               	jne	0x4606f9 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf9>
-               	movq	(%r14), %rax
+               	jne	0x460ce9 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xf9>
+               	movq	(%r15), %rax
@@@@
-               	movl	8(%r14), %eax
+               	movl	8(%r15), %eax
@@@@
-               	cmpw	%bx, 16(%r14,%rcx,2)
-               	je	0x4608a7 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2a7>
+               	cmpw	%bx, 16(%r15,%rcx,2)
+               	je	0x460ea7 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2b7>
@@@@
-               	jne	0x4606e0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xe0>
-               	jmp	0x46088a <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x28a>
-               	leaq	8(%rsp), %rax
-               	movq	%rax, 72(%rsp)
-               	movq	%rax, 80(%rsp)
-               	movq	%rax, 88(%rsp)
-               	movq	8(%rsp), %rcx
-               	movw	%bx, 24(%rsp)
-               	movq	%rax, 96(%rsp)
+               	jne	0x460cd0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0xe0>
+               	jmp	0x460e8a <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x29a>
+               	leaq	80(%rsp), %rax
+               	movq	%rax, 40(%rsp)
+               	movq	%rax, 48(%rsp)
+               	movq	48(%rsp), %rax
+               	movq	%rax, 56(%rsp)
+               	movq	(%rax), %rcx
+               	movw	%bx, 16(%rax)
+               	movq	48(%rsp), %rbx
+               	movq	%rbx, 64(%rsp)
@@@@
-               	je	0x460819 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x219>
-               	xorl	%r13d, %r13d
+               	je	0x460e18 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x228>
+               	xorl	%eax, %eax
@@@@
-               	cmovsl	%r13d, %r12d
-               	movq	(%r14), %rax
+               	cmovsl	%eax, %r12d
+               	movq	(%r15), %rax

@@ -71963,21 +72337,22 @@
@@@[(3, 5), (9, 18), (24, 28)]@@@
-               	movq	%r14, %rdi
+               	movq	%r15, %rdi
@@@@
-               	jg	0x46088a <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x28a>
-               	movq	%r15, 40(%rsp)
-               	movl	%eax, 32(%rsp)
-               	movb	583879(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	jg	0x460e8a <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x29a>
+               	movq	%r14, 8(%rsp)
+               	movq	%r15, 72(%rsp)
+               	movl	%eax, (%rsp)
+               	movb	584277(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	movl	%eax, 36(%rsp)
-               	movq	(%r14), %rax
+               	movl	%eax, 4(%rsp)
+               	movq	(%r15), %rax

@@ -71985,72 +72360,73 @@
@@@[(3, 5), (7, 22), (26, 34), (38, 48), (52, 55), (56, 71), (74, 80), (83, 85), (94, 98), (105, 111)]@@@
-               	movq	%r14, %rdi
+               	movq	%r15, %rdi
@@@@
-               	movl	%eax, %ebx
-               	movl	16(%rsp), %r15d
-               	testl	%r15d, %r15d
-               	cmovsl	%r13d, %r15d
-               	xorl	%r13d, %r13d
-               	cmpq	%r13, %r15
-               	je	0x4607f3 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1f3>
+               	movl	%eax, %r15d
+               	movl	8(%rbx), %r13d
+               	testl	%r13d, %r13d
+               	movl	$0, %eax
+               	cmovsl	%eax, %r13d
+               	xorl	%r14d, %r14d
+               	cmpq	%r14, %r13
+               	je	0x460df4 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x204>
@@@@
-               	je	0x4607d0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1d0>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movzwl	24(%rsp,%r13,2), %edi
-               	movzwl	%bx, %esi
+               	je	0x460dd0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1e0>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movzwl	16(%rbx,%r14,2), %edi
+               	movzwl	%r15w, %esi
@@@@
-               	jne	0x460882 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x282>
-               	addq	$1, %r13
-               	cmpq	%r13, %r15
-               	jne	0x4607c0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1c0>
-               	movl	32(%rsp), %eax
+               	jne	0x460e82 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x292>
+               	addq	$1, %r14
+               	cmpq	%r14, %r13
+               	jne	0x460dc0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x1d0>
+               	movl	(%rsp), %eax
@@@@
-               	movq	40(%rsp), %r15
+               	movq	8(%rsp), %r14
+               	movq	72(%rsp), %r15
@@@@
-               	movl	$0, %r13d
-               	jne	0x46076b <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x16b>
-               	jmp	0x46088a <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x28a>
-               	cmpl	$1, 16(%rsp)
-               	jne	0x460725 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x125>
-               	testq	%r14, %r14
-               	je	0x460725 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x125>
-               	movq	(%r14), %rax
+               	jne	0x460d65 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x175>
+               	jmp	0x460e8a <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x29a>
+               	cmpl	$1, 8(%rbx)
+               	jne	0x460d1c <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x12c>
+               	testq	%r15, %r15
+               	je	0x460d1c <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x12c>
+               	movq	(%r15), %rax
@@@@
-               	jne	0x460725 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x125>
-               	leaq	8(%rsp), %rdi
-               	callq	0x422940 <kfun:kotlin.collections#single__at__kotlin.CharArray(){}kotlin.Char>
+               	jne	0x460d1c <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x12c>
+               	movq	%rbx, %rdi
+               	callq	0x422b50 <kfun:kotlin.collections#single__at__kotlin.CharArray(){}kotlin.Char>
@@@@
-               	movl	8(%r14), %ecx
+               	movl	8(%r15), %ecx
@@@@
-               	cmpw	%ax, 16(%r14,%rdx,2)
-               	je	0x4608ab <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2ab>
+               	cmpw	%ax, 16(%r15,%rdx,2)
+               	je	0x460eab <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int+0x2bb>
@@@@
-               	movq	40(%rsp), %r15
-               	movq	56(%rsp), %rax
-               	movq	%rax, 288(%r15)
+               	movq	8(%rsp), %r14
+               	movq	24(%rsp), %rax
+               	movq	%rax, 288(%r14)

@@ -72939,53 +73315,53 @@
@@@[(7, 8), (12, 15), (18, 24), (25, 31), (32, 42), (43, 47), (51, 52), (56, 69), (70, 78)]@@@
+               	movapd	%xmm0, 736(%rsp)
@@@@
-               	movapd	%xmm0, 656(%rsp)
-               	leaq	688(%rsp), %r15
+               	leaq	704(%rsp), %r14
@@@@
-               	movq	%rax, 664(%rsp)
-               	leaq	656(%rsp), %rax
-               	movq	%rcx, (%rsp)
+               	movq	%rax, 680(%rsp)
+               	leaq	672(%rsp), %rax
+               	movq	%rcx, 8(%rsp)
@@@@
-               	movabsq	$42949672960, %rbx      # imm = 0xA00000000
-               	movq	%rbx, 672(%rsp)
-               	movb	579774(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movabsq	$42949672960, %r15      # imm = 0xA00000000
+               	movq	%r15, 688(%rsp)
+               	movb	580165(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x461783 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xa3>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	16(%rbp), %r14
-               	movq	%r14, 680(%rsp)
-               	leaq	559162(%rip), %rdi      # 0x4e9fd0 <__unnamed_791>
+               	je	0x461d84 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xa4>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	16(%rbp), %rbx
+               	movq	%rbx, 696(%rsp)
+               	leaq	559545(%rip), %rdi      # 0x4ea750 <__unnamed_791>
@@@@
-               	movq	%r15, %rdx
-               	callq	0x4155c0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
+               	movq	%r14, %rdx
+               	callq	0x4155a0 <kfun:kotlin.collections#copyOfUninitializedElements__at__kotlin.Array<0:0>(kotlin.Int;kotlin.Int){0§<kotlin.Any?>}kotlin.Array<0:0>>
@@@@
+               	movapd	%xmm0, 576(%rsp)
@@@@
-               	movapd	%xmm0, 496(%rsp)
-               	movq	(%rsp), %rcx
-               	movq	288(%rcx), %rax
-               	movq	%rax, 504(%rsp)
-               	leaq	496(%rsp), %rax
-               	movq	%rax, 288(%rcx)
-               	movq	%rbx, 512(%rsp)
+               	movq	8(%rsp), %r14
+               	movq	288(%r14), %rax
+               	movq	%rax, 520(%rsp)
+               	leaq	512(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movq	%r15, 528(%rsp)
@@@@
-               	jne	0x461a1f <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x33f>
-               	movq	16(%rbp), %rbx
-               	movq	%rbx, 520(%rsp)
-               	movq	(%rbx), %rax
+               	jne	0x46202c <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x34c>
+               	movq	16(%rbp), %r12
+               	movq	%r12, 536(%rsp)
+               	movq	(%r12), %rax

@@ -72993,61 +73369,63 @@
@@@[(3, 5), (10, 11), (17, 27), (28, 31), (33, 42), (43, 49), (50, 54), (62, 66), (81, 90)]@@@
-               	movq	%rbx, %rdi
+               	movq	%r12, %rdi
@@@@
+               	movapd	%xmm0, 160(%rsp)
@@@@
-               	movapd	%xmm0, 48(%rsp)
-               	movq	(%rsp), %rbp
-               	movq	288(%rbp), %rax
-               	movq	%rax, 56(%rsp)
-               	leaq	48(%rsp), %rax
-               	movq	%rax, 288(%rbp)
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	leaq	64(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	movq	%rax, 64(%rsp)
+               	movq	%rax, 80(%rsp)
+               	movapd	%xmm0, 496(%rsp)
@@@@
-               	movapd	%xmm0, 448(%rsp)
-               	movq	288(%rbp), %rax
-               	movq	%rax, 456(%rsp)
-               	leaq	448(%rsp), %rax
-               	movq	%rax, 288(%rbp)
+               	movq	288(%r14), %rax
+               	movq	%rax, 472(%rsp)
+               	leaq	464(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	movq	%rax, 464(%rsp)
-               	movq	456(%rsp), %rax
-               	movq	%rax, 288(%rbp)
+               	movq	%rax, 480(%rsp)
+               	movq	472(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	movq	%r14, %rdi
-               	movq	%rbx, %rsi
+               	movq	%rbx, %rdi
+               	movq	%r12, %rsi
@@@@
-               	movq	296(%rbp), %rdi
+               	movq	%r12, 32(%rsp)
+               	movq	%rbx, 24(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x424c30 <kfun:kotlin.collections.ArrayList#<init>(kotlin.Int){}>
-               	jmp	0x461a03 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x323>
-               	nopl	(%rax,%rax)
-               	movq	(%r14), %rax
+               	callq	0x424e60 <kfun:kotlin.collections.ArrayList#<init>(kotlin.Int){}>
+               	movq	24(%rsp), %rbp
+               	jmp	0x462013 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x333>
+               	nopl	(%rax)
+               	movq	(%rbp), %rax

@@ -73055,61 +73433,59 @@
@@@[(3, 5), (32, 39), (45, 50), (51, 62), (66, 69)]@@@
-               	movq	%r14, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	movq	%rbp, %rbx
-               	addl	8(%rbp), %r15d
-               	movq	%r14, %rdi
-               	movq	%rbp, %rsi
+               	movq	32(%rsp), %rsi
+               	addl	8(%rsi), %r15d
+               	movq	%rbp, %rdi
@@@@
-               	je	0x461bc5 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x4e5>
-               	movq	%rbx, %rbp
-               	movzbl	579115(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	je	0x4621c5 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x4e5>
+               	movzbl	579494(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x461970 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x290>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	jmp	0x461970 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x290>
-               	leaq	528(%rsp), %rdx
-               	movq	%r14, %rdi
+               	je	0x461f80 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x2a0>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	jmp	0x461f80 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x2a0>
+               	leaq	544(%rsp), %rdx
+               	movq	%rbx, %r15
+               	movq	%rbx, %rdi
@@@@
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	movq	296(%r14), %rdi

@@ -73119,29 +73495,27 @@
@@@[(6, 10)]@@@
-               	leaq	568(%rsp), %r15
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	movq	296(%r14), %rdi

@@ -73153,20 +73527,20 @@
@@@[(6, 8), (9, 13)]@@@
-               	movq	%r14, %rdi
+               	movq	%r15, %rdi
@@@@
-               	movq	%r15, %rdx
-               	callq	0x45fef0 <kfun:kotlin.text#substring__at__kotlin.CharSequence(kotlin.ranges.IntRange){}kotlin.String>
+               	leaq	584(%rsp), %rdx
+               	callq	0x4604e0 <kfun:kotlin.text#substring__at__kotlin.CharSequence(kotlin.ranges.IntRange){}kotlin.String>

@@ -73178,16 +73552,15 @@
@@@[(8, 21)]@@@
-               	je	0x461b20 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x440>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	jmp	0x461b20 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x440>
-               	movq	(%rsp), %rbp
-               	jmp	0x461ccc <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x5ec>
-               	movl	8(%r14), %edx
-               	movq	(%r14), %rax
+               	je	0x462120 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x440>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	jmp	0x462120 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x440>
+               	movq	24(%rsp), %rdi
+               	movl	8(%rdi), %edx
+               	movq	(%rdi), %rax

@@ -73195,118 +73568,117 @@
@@@[(3, 4), (27, 38), (50, 52), (53, 54), (55, 71), (72, 84), (95, 105), (107, 111), (115, 117), (118, 124), (126, 130), (134, 136), (139, 141), (147, 179), (180, 184)]@@@
-               	movq	%r14, %rdi
@@@@
-               	callq	0x426030 <kfun:kotlin.collections.ArrayList.addAtInternal#internal>
-               	movq	(%rsp), %rbp
-               	jmp	0x461cb8 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x5d8>
-               	leaq	696(%rsp), %rbx
-               	movq	%r14, 72(%rsp)
-               	movq	296(%rbp), %rdi
+               	callq	0x426260 <kfun:kotlin.collections.ArrayList.addAtInternal#internal>
+               	jmp	0x4622bf <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x5df>
+               	leaq	712(%rsp), %rbp
+               	movq	%rbx, 88(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rcx, 80(%rsp)
-               	movq	%rcx, 88(%rsp)
@@@@
-               	movq	72(%rsp), %rcx
@@@@
-               	movq	16(%rax), %rdx
-               	movq	%rcx, 32(%rax)
-               	movq	88(%rsp), %rdi
-               	movq	%rdi, 112(%rsp)
-               	movq	%rbx, %rsi
-               	callq	0x45cd90 <kfun:kotlin.collections#listOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}kotlin.collections.List<0:0>>
+               	movq	104(%rsp), %rax
+               	movq	%rax, 112(%rsp)
+               	movq	88(%rsp), %rcx
+               	movq	%rcx, 120(%rsp)
+               	movq	(%rax), %rdx
+               	movq	%rcx, 16(%rax)
+               	movq	104(%rsp), %rdi
+               	movq	%rdi, 128(%rsp)
+               	movq	%rbp, %rsi
+               	callq	0x45d320 <kfun:kotlin.collections#listOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}kotlin.collections.List<0:0>>
@@@@
-               	movq	%r12, 696(%rsp)
-               	movq	56(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	movq	504(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	movq	%r12, 696(%rsp)
+               	movq	%r12, 712(%rsp)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movq	520(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movq	%r12, 712(%rsp)
@@@@
-               	je	0x461d5c <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x67c>
-               	movq	566819(%rip), %r13      # 0x4ec330 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
-               	movq	%r13, 720(%rsp)
-               	jmp	0x461daa <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x6ca>
-               	movq	296(%rbp), %rdi
+               	je	0x462363 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x683>
+               	movq	565276(%rip), %r15      # 0x4ec330 <kvar:kotlin.collections.EmptyIterator.$instance#internal>
+               	movq	%r15, 736(%rsp)
+               	jmp	0x4623b1 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x6d1>
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %r13
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %r15
@@@@
-               	movq	%r13, 704(%rsp)
+               	movq	%r15, 720(%rsp)
@@@@
-               	movq	%r13, 704(%rsp)
-               	jmp	0x461daa <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x6ca>
-               	movq	296(%rbp), %rdi
+               	movq	%r15, 720(%rsp)
+               	jmp	0x4623b1 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x6d1>
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %r13
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %r15
@@@@
-               	movq	%r13, 712(%rsp)
+               	movq	%r15, 728(%rsp)
@@@@
-               	movq	%r13, 712(%rsp)
+               	movq	%r15, 728(%rsp)
@@@@
-               	movq	%rax, 736(%rsp)
-               	movq	%r13, 40(%rsp)
-               	jmp	0x461e21 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x741>
-               	nop
-               	testb	%r15b, %r15b
-               	cmovneq	16(%rsp), %r12
-               	movq	%r12, %r13
-               	movq	(%rsp), %rbp
-               	movq	%r13, 568(%rsp)
-               	movq	456(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	movsd	8(%r13), %xmm1          # xmm1 = mem[0],zero
-               	movq	40(%rsp), %r13
-               	movq	504(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
+               	movq	%rax, 752(%rsp)
+               	movq	%r15, 16(%rsp)
+               	jmp	0x462433 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x753>
+               	nopl	(%rax,%rax)
+               	testb	%r14b, %r14b
+               	cmovneq	32(%rsp), %r15
+               	movq	%r15, %r12
+               	movq	16(%rsp), %r15
+               	movq	%r12, 584(%rsp)
+               	movq	472(%rsp), %rax
+               	movq	8(%rsp), %r14
+               	movq	%rax, 288(%r14)
+               	movsd	8(%r12), %xmm1          # xmm1 = mem[0],zero
+               	movq	520(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movsd	24(%rsp), %xmm0         # xmm0 = mem[0],zero
@@@@
-               	movsd	%xmm0, 8(%rsp)
-               	movq	(%r13), %rax
+               	movsd	%xmm0, 24(%rsp)
+               	movq	(%r15), %rax

@@ -73314,15 +73686,15 @@
@@@[(3, 5), (12, 18)]@@@
-               	movq	%r13, %rdi
+               	movq	%r15, %rdi
@@@@
-               	je	0x461e5e <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x77e>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	(%r13), %rax
+               	je	0x46246f <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x78f>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	(%r15), %rax

@@ -73330,11 +73702,12 @@
@@@[(3, 7), (8, 10), (11, 12)]@@@
-               	movq	%r13, %rdi
-               	leaq	728(%rsp), %rsi
+               	movq	%r15, %rdi
+               	leaq	744(%rsp), %rsi
@@@@
-               	movq	%rax, %r14
+               	movq	%rax, %r13
@@@@
+               	movapd	%xmm0, 656(%rsp)

@@ -73344,21 +73717,20 @@
@@@[(3, 12), (18, 30)]@@@
-               	movapd	%xmm0, 496(%rsp)
-               	movq	288(%rbp), %rax
-               	movq	%rax, 504(%rsp)
-               	leaq	496(%rsp), %rax
-               	movq	%rax, 288(%rbp)
+               	movq	288(%r14), %rax
+               	movq	%rax, 520(%rsp)
+               	leaq	512(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	je	0x461f3c <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x85c>
-               	leaq	573016(%rip), %rdi      # 0x4edd88 <state_global$kotlin.native.internal.HexStringParser>
-               	leaq	-283895(%rip), %rsi     # 0x41ca40 <kfun:kotlin.native.internal.HexStringParser.$init_global#internal>
-               	callq	0x47dad0 <CallInitGlobalPossiblyLock>
-               	movq	572733(%rip), %r12      # 0x4edc80 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
-               	movq	(%r14), %rax
+               	je	0x46254c <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x86c>
+               	leaq	573384(%rip), %rdi      # 0x4ee508 <state_global$kotlin.native.internal.HexStringParser>
+               	leaq	-285271(%rip), %rsi     # 0x41caf0 <kfun:kotlin.native.internal.HexStringParser.$init_global#internal>
+               	callq	0x47ed40 <CallInitGlobalPossiblyLock>
+               	movq	573101(%rip), %r15      # 0x4ee400 <kvar:kotlin.native.internal.HexStringParser.$companion#internal>
+               	movq	(%r13), %rax

@@ -73366,31 +73738,31 @@
@@@[(3, 5), (9, 19), (22, 30), (37, 43)]@@@
-               	movq	%r14, %rdi
+               	movq	%r13, %rdi
@@@@
-               	xorl	%r15d, %r15d
-               	cmpl	%ebx, %r15d
-               	jle	0x461f95 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x8b5>
-               	jmp	0x461fea <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x90a>
-               	nopl	(%rax)
+               	xorl	%r12d, %r12d
+               	cmpl	%ebx, %r12d
+               	jle	0x4625a5 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x8c5>
+               	jmp	0x4625fb <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x91b>
+               	nop
@@@@
-               	adcl	$0, %r15d
-               	cmpl	%ebx, %r15d
-               	jg	0x461fea <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x90a>
-               	movzbl	577692(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	adcl	$0, %r12d
+               	cmpl	%ebx, %r12d
+               	jg	0x4625fb <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x91b>
+               	movzbl	578068(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	jne	0x461fb0 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x8d0>
-               	movl	%r15d, %esi
-               	movq	(%r14), %rax
+               	jne	0x4625c0 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x8e0>
+               	movl	%r12d, %esi
+               	movq	(%r13), %rax

@@ -73398,18 +73770,18 @@
@@@[(3, 5), (14, 18), (19, 21)]@@@
-               	movq	%r14, %rdi
+               	movq	%r13, %rdi
@@@@
-               	cmpl	%ebx, %r15d
-               	jle	0x461f95 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x8b5>
+               	cmpl	%ebx, %r12d
+               	jle	0x4625a5 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x8c5>
@@@@
-               	movq	(%r14), %rax
+               	movq	(%r13), %rax

@@ -73417,276 +73789,284 @@
@@@[(3, 7), (18, 28), (29, 31), (36, 39), (40, 58), (64, 70), (72, 79), (84, 93), (95, 99), (100, 105), (107, 112), (117, 127), (129, 133), (134, 136), (138, 140), (142, 149), (151, 158), (159, 165), (166, 176), (178, 182), (183, 187), (188, 193), (194, 201), (208, 212), (213, 227), (246, 252), (259, 267), (268, 272), (278, 284), (285, 297), (298, 302), (303, 305), (316, 324), (327, 335), (338, 344), (345, 351), (364, 370), (404, 413)]@@@
-               	movq	%r14, %rdi
-               	movl	%r15d, %esi
+               	movq	%r13, %rdi
+               	movl	%r12d, %esi
@@@@
-               	movq	%rax, %r14
-               	movl	8(%rax), %ebp
-               	testl	%ebp, %ebp
-               	je	0x462e91 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17b1>
-               	leal	-1(%rbp), %eax
+               	movq	%rax, %r13
+               	movl	8(%rax), %ebx
+               	testl	%ebx, %ebx
+               	je	0x4634c9 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17e9>
+               	leal	-1(%rbx), %eax
@@@@
-               	movzwl	16(%r14,%rax,2), %eax
+               	movzwl	16(%r13,%rax,2), %eax
@@@@
-               	jne	0x462260 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xb80>
+               	jne	0x4628a0 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xbc0>
+               	movapd	%xmm0, 80(%rsp)
@@@@
-               	movapd	%xmm0, 48(%rsp)
-               	movq	(%rsp), %rbx
-               	movq	288(%rbx), %rax
-               	movq	%rax, 56(%rsp)
-               	leaq	48(%rsp), %r13
-               	movq	%r13, 288(%rbx)
-               	movabsq	$17179869184, %r15      # imm = 0x400000000
-               	movq	%r15, 64(%rsp)
-               	movq	296(%rbx), %rdi
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	leaq	64(%rsp), %rbp
+               	movq	%rbp, 288(%r14)
+               	movq	%rbp, %r15
+               	movq	%r14, %rbp
+               	movabsq	$17179869184, %r14      # imm = 0x400000000
+               	movq	%r14, 80(%rsp)
+               	movq	296(%rbp), %rdi
@@@@
-               	leaq	356572(%rip), %rcx      # 0x4b91a0 <ktypeglobal:kotlin.Double#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%rdx, 72(%rsp)
+               	leaq	356936(%rip), %r12      # 0x4b9920 <ktypeglobal:kotlin.Double#internal>
+               	movq	%r12, 16(%rax)
+               	movq	%rdx, 88(%rsp)
@@@@
-               	movq	%rdx, 16(%rsp)
-               	movq	%rdx, 544(%rsp)
-               	movq	56(%rsp), %rax
+               	movq	%rdx, 32(%rsp)
+               	movq	%rdx, 560(%rsp)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%rbp)
@@@@
-               	movq	%rax, 56(%rsp)
-               	movq	%r13, 288(%rbx)
-               	movq	%r15, 64(%rsp)
-               	movq	296(%rbx), %rdi
+               	movq	288(%rbp), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%r15, 288(%rbp)
+               	movq	%r14, 80(%rsp)
+               	movq	296(%rbp), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %r12
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %r15
@@@@
-               	leaq	356454(%rip), %rcx      # 0x4b91a0 <ktypeglobal:kotlin.Double#internal>
-               	movq	%rcx, 16(%rax)
-               	movq	%r12, 72(%rsp)
+               	movq	%r12, 16(%rax)
+               	movq	%r15, 88(%rsp)
@@@@
-               	movq	%r12, 552(%rsp)
-               	movq	56(%rsp), %rax
+               	movq	%r15, 568(%rsp)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%rbp)
@@@@
-               	movq	%rax, 56(%rsp)
-               	movq	%r13, 288(%rbx)
-               	movq	%r15, 64(%rsp)
-               	movq	296(%rbx), %rdi
+               	movq	288(%rbp), %rax
+               	movq	%rax, 72(%rsp)
+               	leaq	64(%rsp), %rax
+               	movq	%rax, 288(%rbp)
+               	movq	%r14, 80(%rsp)
+               	movq	296(%rbp), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	356353(%rip), %rcx      # 0x4b91a0 <ktypeglobal:kotlin.Double#internal>
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	movq	%r12, %rcx
@@@@
-               	leaq	16(%rax), %r13
+               	leaq	16(%rax), %r12
@@@@
-               	movq	%r13, 72(%rsp)
+               	movq	%r12, 88(%rsp)
@@@@
-               	movq	%r13, 560(%rsp)
-               	movq	56(%rsp), %rax
-               	movapd	%xmm0, 448(%rsp)
+               	movq	%r12, 576(%rsp)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%rbp)
+               	movapd	%xmm0, 496(%rsp)
@@@@
-               	movq	%rax, 456(%rsp)
-               	leaq	448(%rsp), %rax
-               	movq	%rax, 288(%rbx)
+               	movq	288(%rbp), %rax
+               	movq	%rax, 472(%rsp)
+               	leaq	464(%rsp), %rax
+               	movq	%rax, 288(%rbp)
@@@@
-               	movq	%rax, 464(%rsp)
-               	cmpl	$9, %ebp
-               	ja	0x462e49 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1769>
+               	movq	%rax, 480(%rsp)
+               	cmpl	$9, %ebx
+               	ja	0x463485 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17a5>
@@@@
-               	btl	%ebp, %eax
-               	jae	0x462e49 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1769>
-               	cmpl	$0, 8(%r14)
-               	je	0x462da4 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x16c4>
-               	movzwl	16(%r14), %eax
+               	btl	%ebx, %eax
+               	jae	0x463485 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17a5>
+               	cmpl	$0, 8(%r13)
+               	je	0x4633e3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1703>
+               	movzwl	16(%r13), %eax
@@@@
-               	je	0x4622a0 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xbc0>
-               	movb	$1, %r15b
+               	je	0x4628e0 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc00>
+               	movb	$1, %r14b
@@@@
-               	je	0x4622a3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xbc3>
-               	xorl	%r15d, %r15d
+               	je	0x4628e3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc03>
+               	xorl	%r14d, %r14d
@@@@
-               	jmp	0x4622a3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xbc3>
-               	movl	8(%r14), %ecx
+               	jmp	0x4628e3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc03>
+               	nopl	(%rax)
+               	movl	8(%r13), %ecx
@@@@
-               	movq	(%rsp), %rbp
-               	jl	0x462330 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc50>
-               	movzwl	16(%r14), %edx
-               	movzwl	18(%r14), %eax
+               	jl	0x462970 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc90>
+               	movzwl	16(%r13), %edx
+               	movzwl	18(%r13), %eax
@@@@
-               	jl	0x462330 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc50>
-               	movzwl	20(%r14), %ecx
+               	jl	0x462970 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc90>
+               	movzwl	20(%r13), %ecx
@@@@
-               	je	0x462309 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc29>
-               	jmp	0x462330 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc50>
-               	xorl	%r15d, %r15d
-               	movq	%r14, %rdi
-               	movl	%ebp, %edx
-               	leaq	480(%rsp), %rcx
-               	callq	0x47a510 <Kotlin_String_subSequence>
+               	je	0x46294a <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc6a>
+               	jmp	0x462970 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc90>
+               	xorl	%r14d, %r14d
+               	movq	%r13, %rdi
+               	movl	%ebx, %edx
+               	leaq	496(%rsp), %rcx
+               	callq	0x47b6d0 <Kotlin_String_subSequence>
@@@@
-               	movq	(%rsp), %rbp
-               	jne	0x461de0 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x700>
-               	jmp	0x462edd <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17fd>
+               	movq	16(%rsp), %r15
+               	jne	0x4623f1 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x711>
+               	jmp	0x46351f <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x183f>
@@@@
-               	jne	0x462330 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc50>
-               	movq	%r12, %rdi
-               	movq	%r14, %rsi
-               	callq	0x41d0b0 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double>
+               	jne	0x462970 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xc90>
+               	movq	%r15, %rdi
+               	movq	%r13, %rsi
+               	callq	0x41d180 <kfun:kotlin.native.internal.HexStringParser.Companion#parseDouble(kotlin.String){}kotlin.Double>
@@@@
-               	jmp	0x461e02 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x722>
-               	nopw	(%rax,%rax)
+               	movq	16(%rsp), %r15
+               	jmp	0x462414 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x734>
@@@@
-               	movq	288(%rbp), %rax
-               	movq	%rax, 56(%rsp)
-               	movq	%rbx, 288(%rbp)
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%rbx, 288(%r14)
@@@@
-               	movq	%rax, 64(%rsp)
-               	movq	%r14, 72(%rsp)
-               	movq	%r14, 80(%rsp)
-               	movl	8(%r14), %r13d
-               	movq	%r14, 88(%rsp)
+               	movq	%rax, 80(%rsp)
+               	movq	%r13, 88(%rsp)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 96(%rsp)
+               	movl	8(%rax), %r13d
+               	movq	88(%rsp), %rbx
+               	movq	%rbx, 104(%rsp)
@@@@
-               	cmpl	%eax, 8(%r14)
-               	jbe	0x462da4 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x16c4>
+               	cmpl	%eax, 8(%rbx)
+               	jbe	0x4633e3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1703>
@@@@
-               	movzwl	16(%r14,%rcx,2), %ecx
+               	movzwl	16(%rbx,%rcx,2), %ecx
@@@@
-               	je	0x462f78 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1898>
-               	movq	%r14, 112(%rsp)
-               	xorl	%r15d, %r15d
-               	movq	%r14, %rdi
+               	je	0x4635b1 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x18d1>
+               	movq	%rbx, 128(%rsp)
+               	xorl	%ebp, %ebp
+               	movq	%rbx, %rdi
@@@@
-               	callq	0x460600 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
-               	movl	%eax, %r14d
-               	movq	72(%rsp), %rdi
-               	movq	%rdi, 120(%rsp)
+               	callq	0x460bf0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
+               	movl	%eax, %r15d
+               	movq	88(%rsp), %rdi
+               	movq	%rdi, 136(%rsp)
@@@@
-               	callq	0x460600 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
-               	cmpl	%eax, %r14d
-               	cmovll	%eax, %r14d
+               	callq	0x460bf0 <kfun:kotlin.text#indexOf__at__kotlin.CharSequence(kotlin.Char;kotlin.Int;kotlin.Boolean){}kotlin.Int>
+               	cmpl	%eax, %r15d
+               	cmovll	%eax, %r15d
@@@@
-               	testl	%r14d, %r14d
-               	js	0x4625c2 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xee2>
-               	leal	1(%r14), %esi
+               	testl	%r15d, %r15d
+               	js	0x462c0b <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xf2b>
+               	leal	1(%r15), %esi
@@@@
-               	jne	0x46245a <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xd7a>
-               	movq	%rbx, 152(%rsp)
-               	leal	2(%r14), %esi
+               	jne	0x462aa7 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xdc7>
+               	movq	%rbx, 168(%rsp)
+               	leal	2(%r15), %esi
@@@@
-               	je	0x4624b7 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xdd7>
-               	movl	8(%rax), %r15d
-               	jmp	0x4625bb <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xedb>
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	je	0x462b03 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xe23>
+               	movl	8(%rax), %ebp
+               	jmp	0x462c08 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xf28>
+               	movq	296(%r14), %rdi

@@ -73697,474 +74077,473 @@
@@@[(3, 9), (10, 14), (15, 21), (39, 45), (48, 54), (55, 59), (60, 71), (79, 81), (88, 90), (104, 107), (110, 112), (114, 115), (117, 119), (120, 126), (127, 133), (137, 145), (156, 162), (163, 176), (177, 200), (205, 208), (230, 244), (302, 307), (308, 320), (330, 333), (334, 336), (339, 341), (342, 350), (352, 358), (359, 361), (378, 392), (397, 398), (403, 411), (412, 418), (438, 442), (443, 444), (445, 458), (470, 476), (479, 481), (485, 494), (500, 506), (510, 516), (553, 559), (580, 581), (582, 597), (605, 613), (614, 620), (628, 637), (645, 649), (651, 679), (688, 705), (709, 720), (725, 739)]@@@
-               	movl	%eax, %r15d
-               	addl	$-1, %r15d
-               	js	0x46259e <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xebe>
+               	movl	%eax, %r12d
+               	addl	$-1, %r12d
+               	js	0x462bed <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xf0d>
@@@@
-               	jmp	0x462548 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xe68>
-               	nop
+               	jmp	0x462b98 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xeb8>
+               	nopl	(%rax)
@@@@
-               	cmpl	%r15d, %ebp
-               	jg	0x462585 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xea5>
-               	movzbl	576233(%rip), %eax      # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	cmpl	%r12d, %ebp
+               	jg	0x462bd5 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xef5>
+               	movzbl	576545(%rip), %eax      # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x462540 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xe60>
-               	jmp	0x462df1 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1711>
-               	xorl	%r15d, %r15d
+               	je	0x462b90 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xeb0>
+               	jmp	0x463431 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1751>
+               	xorl	%ebp, %ebp
@@@@
-               	je	0x463175 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1a95>
-               	movb	%al, %r15b
-               	jmp	0x4625b4 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xed4>
+               	je	0x4637af <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1acf>
+               	movb	%al, %bpl
+               	jmp	0x462c02 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xf22>
@@@@
-               	je	0x462da4 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x16c4>
-               	xorl	%r15d, %r15d
+               	je	0x4633e3 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1703>
+               	xorl	%ebp, %ebp
@@@@
-               	sete	%r15b
-               	addl	$2147483647, %r15d      # imm = 0x7FFFFFFF
-               	movl	%r14d, %r12d
-               	movq	(%rsp), %rbp
-               	movq	72(%rsp), %rbx
-               	movq	%rbx, 264(%rsp)
+               	sete	%bpl
+               	addl	$2147483647, %ebp       # imm = 0x7FFFFFFF
+               	movl	%r15d, %r12d
+               	movq	88(%rsp), %rbx
+               	movq	%rbx, 280(%rsp)
@@@@
-               	movl	$0, %r14d
+               	movl	$0, %r15d
@@@@
-               	movl	$1, %r14d
+               	movl	$1, %r15d
@@@@
-               	js	0x4626d8 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xff8>
+               	movl	%ebp, 32(%rsp)
+               	js	0x462d28 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1048>
@@@@
-               	movl	%r15d, %ecx
+               	movl	%ebp, %ecx
@@@@
+               	movl	%ebp, %ecx
@@@@
-               	testl	%r15d, %r15d
+               	testl	%ecx, %ecx
@@@@
-               	movq	72(%rsp), %rdi
-               	movq	%rdi, 296(%rsp)
-               	movl	%r14d, %esi
+               	movq	88(%rsp), %rdi
+               	movq	%rdi, 312(%rsp)
+               	movl	%r15d, %esi
@@@@
-               	leaq	304(%rsp), %rcx
-               	callq	0x47a510 <Kotlin_String_subSequence>
-               	movq	%rax, %r14
+               	leaq	320(%rsp), %rcx
+               	callq	0x47b6d0 <Kotlin_String_subSequence>
+               	movq	%rax, %r15
@@@@
-               	movq	40(%rsp), %r13
-               	jne	0x463048 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1968>
-               	movq	72(%rsp), %rdi
-               	movq	%rdi, 312(%rsp)
+               	movabsq	$17179869184, %r13      # imm = 0x400000000
+               	jne	0x463682 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x19a2>
+               	movq	88(%rsp), %rdi
+               	movq	%rdi, 328(%rsp)
@@@@
-               	jne	0x462ece <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17ee>
-               	subl	%ebp, %r15d
-               	movq	%r14, %rdi
+               	jne	0x463510 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1830>
+               	subl	%ebp, 32(%rsp)
+               	movq	%r15, %rdi
@@@@
-               	leaq	328(%rsp), %rdx
-               	callq	0x47a310 <Kotlin_String_plusImpl>
-               	movq	%rax, %rbx
-               	jmp	0x462714 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1034>
-               	movq	72(%rsp), %rdi
-               	movq	%rdi, 336(%rsp)
-               	movl	%r14d, %esi
+               	leaq	344(%rsp), %rdx
+               	callq	0x47b4d0 <Kotlin_String_plusImpl>
+               	jmp	0x462d66 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1086>
+               	movq	88(%rsp), %rdi
+               	movq	%rdi, 352(%rsp)
+               	movl	%r15d, %esi
@@@@
-               	leaq	344(%rsp), %rcx
-               	callq	0x47a510 <Kotlin_String_subSequence>
-               	movq	%rax, %rbx
-               	movq	(%rax), %rax
-               	andq	$-4, %rax
-               	movq	(%rax), %rax
-               	cmpl	$122, 92(%rax)
-               	movq	40(%rsp), %r13
-               	jne	0x462f21 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1841>
-               	movq	%rbx, 72(%rsp)
-               	movq	%rbx, 352(%rsp)
+               	leaq	360(%rsp), %rcx
+               	callq	0x47b6d0 <Kotlin_String_subSequence>
+               	movq	(%rax), %rcx
+               	andq	$-4, %rcx
+               	movq	(%rcx), %rcx
+               	cmpl	$122, 92(%rcx)
+               	movabsq	$17179869184, %r13      # imm = 0x400000000
+               	jne	0x463510 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1830>
+               	movq	16(%rsp), %r15
+               	movq	%rax, 88(%rsp)
+               	movq	88(%rsp), %rbx
+               	movq	%rbx, 368(%rsp)
@@@@
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax)
+               	nop
@@@@
-               	movq	72(%rsp), %rax
-               	movq	%rax, 368(%rsp)
-               	movslq	8(%rax), %r12
-               	movq	%r12, %r14
-               	testq	%r12, %r12
-               	jne	0x4627a4 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x10c4>
-               	jmp	0x462f30 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1850>
+               	movq	88(%rsp), %rax
+               	movq	%rax, 384(%rsp)
+               	movl	8(%rax), %r12d
+               	testl	%r12d, %r12d
+               	je	0x463568 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1888>
+               	movslq	%r12d, %r14
+               	jmp	0x462df4 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1114>
@@@@
-               	cmpl	%r14d, %r12d
-               	jne	0x46285d <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x117d>
+               	subl	%r14d, %r12d
+               	movl	32(%rsp), %ebp
+               	jne	0x462e97 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x11b7>
@@@@
-               	jne	0x46285d <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x117d>
-               	movq	72(%rsp), %rax
-               	movq	%rax, 416(%rsp)
-               	movl	8(%rax), %edx
-               	cmpl	$53, %edx
-               	jge	0x4628c6 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x11e6>
-               	jmp	0x462919 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1239>
-               	movq	72(%rsp), %rdi
-               	movq	%rdi, 400(%rsp)
+               	je	0x462eea <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x120a>
+               	movq	88(%rsp), %rdi
+               	movq	%rdi, 416(%rsp)
@@@@
-               	jne	0x462ece <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17ee>
-               	subl	%r14d, %r12d
+               	jne	0x463510 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1830>
@@@@
-               	subl	%r15d, %ecx
+               	subl	%ebp, %ecx
@@@@
-               	testl	%r15d, %r15d
+               	testl	%ebp, %ebp
@@@@
-               	addl	%ecx, %r15d
-               	movq	%rax, 72(%rsp)
-               	movq	%rax, 416(%rsp)
+               	addl	%ecx, %ebp
+               	movq	%rax, 88(%rsp)
+               	movq	8(%rsp), %r14
+               	movq	88(%rsp), %rax
+               	movq	%rax, 432(%rsp)
@@@@
-               	jl	0x462919 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1239>
-               	cmpl	$4294966936, %r15d      # imm = 0xFFFFFE98
-               	jg	0x462919 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1239>
+               	jl	0x462f54 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1274>
+               	cmpl	$4294966936, %ebp       # imm = 0xFFFFFE98
+               	jg	0x462f54 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1274>
@@@@
-               	subl	%r15d, %ebx
+               	subl	%ebp, %ebx
@@@@
-               	jne	0x462ece <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x17ee>
-               	movq	%rax, 72(%rsp)
-               	addl	%ebx, %r15d
-               	movq	72(%rsp), %r12
-               	movq	%r12, 440(%rsp)
-               	movq	(%rsp), %rbp
-               	movq	296(%rbp), %rdi
+               	jne	0x463510 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1830>
+               	movq	%rax, 88(%rsp)
+               	addl	%ebx, %ebp
+               	movl	%ebp, %r12d
+               	movq	88(%rsp), %rbp
+               	movq	%rbp, 456(%rsp)
+               	movq	296(%r14), %rdi
@@@@
+               	movq	%r14, %rcx
@@@@
-               	movq	%r14, 576(%rsp)
-               	movq	%r12, 24(%rbx)
-               	movl	%r15d, 32(%rbx)
-               	movl	16(%rsp), %eax
+               	movq	%r14, 592(%rsp)
+               	movq	%rbp, 24(%rbx)
+               	movl	%r12d, 32(%rbx)
+               	movl	60(%rsp), %eax
@@@@
-               	movq	%r14, 576(%rsp)
-               	movq	56(%rsp), %rax
-               	movq	%rax, 288(%rbp)
+               	movq	%r14, 592(%rsp)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%rcx)
@@@@
-               	leaq	48(%rsp), %r14
-               	jne	0x461e02 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x722>
+               	movq	8(%rsp), %r14
+               	jne	0x462414 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x734>
@@@@
+               	movapd	%xmm0, 80(%rsp)
@@@@
-               	movapd	%xmm0, 48(%rsp)
-               	movq	288(%rbp), %rax
-               	movq	%rax, 56(%rsp)
-               	movq	%r14, 288(%rbp)
-               	movabsq	$17179869184, %rbx      # imm = 0x400000000
-               	movq	%rbx, 64(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	leaq	64(%rsp), %rbp
+               	movq	%rbp, 288(%r14)
+               	movq	%r13, 80(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rcx, 584(%rsp)
-               	movq	56(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
+               	movq	%rcx, 600(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
@@@@
-               	movl	92(%rax), %r15d
+               	movl	92(%rax), %ebx
@@@@
-               	movq	%rcx, 56(%rsp)
-               	movq	%r14, 288(%rbp)
-               	movq	%rbx, 64(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%rbp, 288(%r14)
+               	movq	%r13, 80(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	cmpl	$115, %r15d
-               	jne	0x462b30 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1450>
-               	leaq	354416(%rip), %rcx      # 0x4b9320 <ktypeglobal:kotlin.Float#internal>
+               	cmpl	$115, %ebx
+               	jne	0x46316d <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x148d>
+               	leaq	354739(%rip), %rcx      # 0x4b9aa0 <ktypeglobal:kotlin.Float#internal>
@@@@
-               	movq	%rdi, 592(%rsp)
-               	movq	56(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
+               	movq	%rdi, 608(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
@@@@
-               	movq	%rdi, 600(%rsp)
-               	movq	56(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
+               	movq	%rdi, 616(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
@@@@
+               	movapd	%xmm0, 80(%rsp)
@@@@
-               	movapd	%xmm0, 48(%rsp)
-               	movq	288(%rbp), %rax
-               	movq	%rax, 56(%rsp)
-               	leaq	48(%rsp), %r14
-               	movq	%r14, 288(%rbp)
-               	movabsq	$17179869184, %r15      # imm = 0x400000000
-               	movq	%r15, 64(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	8(%rsp), %r14
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	leaq	64(%rsp), %r12
+               	movq	%r12, 288(%r14)
+               	movq	%r13, 80(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	leaq	353706(%rip), %r12      # 0x4b91a0 <ktypeglobal:kotlin.Double#internal>
-               	movq	%r12, 16(%rax)
-               	movq	%rcx, 72(%rsp)
-               	movapd	16(%rsp), %xmm0
+               	leaq	354034(%rip), %rbp      # 0x4b9920 <ktypeglobal:kotlin.Double#internal>
+               	movq	%rbp, 16(%rax)
+               	movq	%rcx, 88(%rsp)
+               	movapd	32(%rsp), %xmm0
@@@@
-               	movq	%rcx, 616(%rsp)
-               	movq	56(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
+               	movq	%rcx, 632(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
@@@@
-               	movq	%rcx, 56(%rsp)
-               	movq	%r14, 288(%rbp)
-               	movq	%r15, 64(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%r12, 288(%r14)
+               	movq	%r13, 80(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%r12, 16(%rax)
-               	movq	%rcx, 72(%rsp)
+               	movq	%rbp, 16(%rax)
+               	movq	%rcx, 88(%rsp)
@@@@
-               	jne	0x462d17 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1637>
-               	movq	%rcx, 624(%rsp)
-               	movq	56(%rsp), %rcx
-               	movq	%rcx, 288(%rbp)
-               	movss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
-               	xorps	155461(%rip), %xmm0     # 0x488bf0 <_IO_stdin_used+0x1f0>
-               	movaps	%xmm0, 16(%rsp)
-               	xorps	%xmm0, %xmm0
-               	movaps	%xmm0, 48(%rsp)
-               	movaps	%xmm0, 64(%rsp)
-               	movq	%rcx, 56(%rsp)
-               	movq	%r14, 288(%rbp)
-               	movq	%r15, 64(%rsp)
-               	movq	296(%rbp), %rdi
+               	jne	0x46335a <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x167a>
+               	movq	%rcx, 640(%rsp)
+               	movq	72(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
+               	movl	24(%rax), %ebx
+               	xorl	$2147483648, %ebx       # imm = 0x80000000
+               	xorpd	%xmm0, %xmm0
+               	movapd	%xmm0, 80(%rsp)
+               	movapd	%xmm0, 64(%rsp)
+               	movq	288(%r14), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%r12, 288(%r14)
+               	movq	%r13, 80(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rdi, 72(%rsp)
-               	movapd	16(%rsp), %xmm0
-               	movss	%xmm0, 24(%rax)
-               	movq	%rdi, 632(%rsp)
-               	jmp	0x462ac8 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x13e8>
-               	movq	%rcx, 640(%rsp)
-               	movq	56(%rsp), %rax
-               	movq	%rax, 288(%rbp)
+               	movq	%rdi, 88(%rsp)
+               	movl	%ebx, 24(%rax)
+               	movq	%rdi, 648(%rsp)
+               	jmp	0x463105 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1425>
+               	movq	8(%rsp), %r14
+               	jmp	0x462414 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x734>
+               	movq	%rcx, 656(%rsp)
+               	movq	72(%rsp), %rax
+               	movq	%rax, 288(%r14)
@@@@
-               	jne	0x463131 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1a51>
-               	xorpd	155289(%rip), %xmm1     # 0x488be0 <_IO_stdin_used+0x1e0>
-               	jmp	0x461e02 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x722>
-               	movq	(%rsp), %rcx
-               	leaq	48(%rsp), %rdx
-               	movq	%rdx, 288(%rcx)
+               	jne	0x46376b <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1a8b>
+               	xorpd	158486(%rip), %xmm1     # 0x489ea0 <_IO_stdin_used+0x1a0>
+               	jmp	0x462414 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x734>
+               	leaq	64(%rsp), %rcx
+               	movq	%rcx, 288(%r14)
@@@@
-               	movq	%rbp, 216(%rsp)
-               	callq	0x481c45 <__cxa_end_catch>
-               	jmp	0x4624f7 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xe17>
-               	movq	664(%rsp), %rax
-               	movq	%rax, 288(%rbp)
-               	movsd	8(%rsp), %xmm0          # xmm0 = mem[0],zero
-               	addq	$744, %rsp              # imm = 0x2E8
+               	movq	%rbp, 232(%rsp)
+               	callq	0x482f15 <__cxa_end_catch>
+               	jmp	0x462b3f <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0xe5f>
+               	movq	680(%rsp), %rax
+               	movq	%rax, 288(%r14)
+               	movsd	24(%rsp), %xmm0         # xmm0 = mem[0],zero
+               	addq	$760, %rsp              # imm = 0x2F8

@@ -74172,203 +74551,200 @@
@@@[(3, 7), (23, 32), (48, 53), (68, 73), (82, 92), (93, 98), (107, 111), (112, 115), (116, 120), (136, 142), (144, 148), (152, 166), (175, 186), (195, 209), (218, 226), (240, 248), (263, 267), (282, 291), (300, 306)]@@@
-               	callq	0x421160 <ThrowArrayIndexOutOfBoundsException>
-               	movq	(%rsp), %rax
+               	callq	0x421370 <ThrowArrayIndexOutOfBoundsException>
+               	movq	8(%rsp), %rax
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	72(%rsp), %rbx
-               	movq	%rbx, 224(%rsp)
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	movq	88(%rsp), %rbx
+               	movq	%rbx, 240(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	movq	296(%rbp), %rdi
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rbx, 536(%rsp)
-               	jmp	0x462fae <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x18ce>
-               	leaq	353547(%rip), %rsi      # 0x4b93e0 <ktypeglobal:kotlin.String#internal>
+               	movq	%rbx, 552(%rsp)
+               	movq	%rbx, %rdi
+               	movq	%r13, %rsi
+               	callq	0x416d30 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
+               	movq	%rbx, %rdi
+               	callq	0x47ef60 <ThrowException>
+               	leaq	353865(%rip), %rsi      # 0x4b9b60 <ktypeglobal:kotlin.String#internal>
@@@@
-               	callq	0x421230 <ThrowClassCastException>
-               	movq	296(%rbp), %rdi
+               	callq	0x421440 <ThrowClassCastException>
+               	movq	8(%rsp), %rax
+               	movq	296(%rax), %rdi
@@@@
-               	movq	%rbx, 488(%rsp)
-               	movq	%rbx, %rdi
-               	callq	0x416d80 <kfun:kotlin.IllegalArgumentException#<init>(){}>
+               	movq	%rbx, 504(%rsp)
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	leaq	353464(%rip), %rsi      # 0x4b93e0 <ktypeglobal:kotlin.String#internal>
+               	callq	0x416d60 <kfun:kotlin.IllegalArgumentException#<init>(){}>
@@@@
-               	callq	0x421230 <ThrowClassCastException>
-               	movq	(%rsp), %rax
+               	callq	0x47ef60 <ThrowException>
+               	movq	8(%rsp), %rax
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	%r14, 96(%rsp)
-               	movq	296(%rbp), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	movq	%rbx, 112(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x46b3f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
-               	leaq	16(%rax), %rbx
+               	callq	0x46c120 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)>
+               	leaq	16(%rax), %rbp
@@@@
-               	movq	%rbx, 104(%rsp)
-               	movq	%rbx, %rdi
-               	movq	%r14, %rsi
-               	callq	0x416d50 <kfun:kotlin.RuntimeException#<init>(kotlin.String?){}>
-               	movq	%rbx, %rdi
-               	callq	0x47dcf0 <ThrowException>
-               	movq	72(%rsp), %rbx
-               	movq	%rbx, 128(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	%rbp, 120(%rsp)
+               	jmp	0x463472 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1792>
+               	movq	88(%rsp), %rbx
+               	movq	%rbx, 144(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rbp, 136(%rsp)
-               	jmp	0x462e36 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1756>
-               	movq	%rbx, 272(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	%rbp, 152(%rsp)
+               	jmp	0x463472 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1792>
+               	leaq	353575(%rip), %rsi      # 0x4b9b60 <ktypeglobal:kotlin.String#internal>
+               	movq	%rbx, %rdi
+               	callq	0x421440 <ThrowClassCastException>
+               	movq	%rbx, 288(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rbp, 280(%rsp)
-               	jmp	0x462e36 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1756>
-               	leaq	353169(%rip), %rsi      # 0x4b93e0 <ktypeglobal:kotlin.String#internal>
-               	movq	%r14, %rdi
-               	callq	0x421230 <ThrowClassCastException>
-               	movq	%rbx, 160(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	%rbp, 296(%rsp)
+               	jmp	0x463472 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1792>
+               	leaq	353495(%rip), %rsi      # 0x4b9b60 <ktypeglobal:kotlin.String#internal>
+               	movq	%r15, %rdi
+               	callq	0x421440 <ThrowClassCastException>
+               	movq	%rbx, 176(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rbp, 168(%rsp)
-               	jmp	0x462e36 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1756>
-               	movq	%rbx, 176(%rsp)
-               	movq	296(%rbp), %rdi
+               	movq	%rbp, 184(%rsp)
+               	jmp	0x463472 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1792>
+               	movq	%rbx, 192(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	leaq	352440(%rip), %rsi      # 0x4b91a0 <ktypeglobal:kotlin.Double#internal>
-               	callq	0x421230 <ThrowClassCastException>
-               	movq	296(%rbp), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	leaq	352766(%rip), %rsi      # 0x4b9920 <ktypeglobal:kotlin.Double#internal>
+               	callq	0x421440 <ThrowClassCastException>
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	296(%rbp), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	movq	296(%r14), %rdi
@@@@
-               	callq	0x47dcf0 <ThrowException>
-               	movq	72(%rsp), %rbx
-               	movq	%rbx, 248(%rsp)
-               	movq	(%rsp), %rax
-               	movq	296(%rax), %rdi
+               	callq	0x47ef60 <ThrowException>
+               	movq	88(%rsp), %rbx
+               	movq	%rbx, 264(%rsp)
+               	movq	296(%r14), %rdi
@@@@
-               	movq	%rbp, 256(%rsp)
-               	jmp	0x462e36 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1756>
-               	nop
+               	movq	%rbp, 272(%rsp)
+               	jmp	0x463472 <kfun:StringBenchmark#summarizeSplittedCsv(){}kotlin.Double+0x1792>
+               	nopw	%cs:(%rax,%rax)

@@ -74378,11 +74754,11 @@
@@@[(3, 13)]@@@
-               	xorpd	%xmm0, %xmm0
-               	movapd	%xmm0, 80(%rsp)
-               	movapd	%xmm0, 64(%rsp)
-               	movupd	%xmm0, 16(%rsp)
-               	leaq	418818(%rip), %rax      # 0x4c95f0 <ktypeglobal:StringBenchmark#internal>
+               	xorps	%xmm0, %xmm0
+               	movaps	%xmm0, 80(%rsp)
+               	movaps	%xmm0, 64(%rsp)
+               	movups	%xmm0, 16(%rsp)
+               	leaq	419142(%rip), %rax      # 0x4c9d70 <ktypeglobal:StringBenchmark#internal>

@@ -74394,21 +74770,21 @@
@@@[(13, 29)]@@@
-               	xorpd	%xmm0, %xmm0
-               	movapd	%xmm0, 256(%rsp)
-               	movapd	%xmm0, 240(%rsp)
-               	movapd	%xmm0, 224(%rsp)
-               	movapd	%xmm0, 208(%rsp)
-               	movapd	%xmm0, 192(%rsp)
-               	movapd	%xmm0, 176(%rsp)
-               	movapd	%xmm0, 160(%rsp)
+               	xorps	%xmm0, %xmm0
+               	movaps	%xmm0, 256(%rsp)
+               	movaps	%xmm0, 240(%rsp)
+               	movaps	%xmm0, 224(%rsp)
+               	movaps	%xmm0, 208(%rsp)
+               	movaps	%xmm0, 192(%rsp)
+               	movaps	%xmm0, 176(%rsp)
+               	movaps	%xmm0, 160(%rsp)

@@ -74416,26 +74792,26 @@
@@@[(20, 32)]@@@
-               	callq	0x424c30 <kfun:kotlin.collections.ArrayList#<init>(kotlin.Int){}>
-               	xorpd	%xmm0, %xmm0
-               	movapd	%xmm0, 144(%rsp)
-               	movapd	%xmm0, 128(%rsp)
-               	movapd	%xmm0, 112(%rsp)
-               	movapd	%xmm0, 96(%rsp)
+               	callq	0x424e60 <kfun:kotlin.collections.ArrayList#<init>(kotlin.Int){}>
+               	xorps	%xmm0, %xmm0
+               	movaps	%xmm0, 144(%rsp)
+               	movaps	%xmm0, 128(%rsp)
+               	movaps	%xmm0, 112(%rsp)
+               	movaps	%xmm0, 96(%rsp)

@@ -74475,23 +74851,23 @@
@@@[(22, 26)]@@@
-               	jmp	0x4634d1 <kfun:#main(){}+0x311>
-               	nopl	(%rax)
+               	jmp	0x463b01 <kfun:#main(){}+0x301>
+               	nopl	(%rax,%rax)

@@ -74589,72 +74965,73 @@
@@@[(45, 46), (57, 61), (87, 95)]@@@
+               	movsd	8(%rbp), %xmm0          # xmm0 = mem[0],zero
@@@@
-               	movq	%rax, 248(%rsp)
-               	movq	%rax, %rdi
+               	movq	24(%rsp), %rdi
+               	movq	%rdi, 248(%rsp)
@@@@
-               	movq	%rax, 264(%rsp)
-               	leaq	519345(%rip), %rsi      # 0x4e23e0 <__unnamed_23>
-               	movq	%rax, %rdi
-               	callq	0x47a310 <Kotlin_String_plusImpl>
+               	movq	24(%rsp), %rdi
+               	movq	%rdi, 264(%rsp)
+               	leaq	519669(%rip), %rsi      # 0x4e2b60 <__unnamed_23>
+               	callq	0x47b4d0 <Kotlin_String_plusImpl>

@@ -74665,7 +75042,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nop

@@ -74724,3582 +75101,3820 @@
@@@[(3791, 3799), (3800, 3806), (3807, 3814), (3815, 3817), (3818, 3824), (3828, 3834), (3838, 3844), (3848, 3854), (3858, 3864), (3868, 3874), (3878, 3884), (3888, 3894), (3898, 3904), (3908, 3914), (3918, 3924), (3928, 3934), (3938, 3944), (3948, 3954), (3958, 3964), (3968, 3974), (3978, 3984), (3988, 3994), (3998, 4004), (4008, 4014), (4018, 4024), (4028, 4034), (4038, 4044), (4048, 4054), (4058, 4064), (4068, 4074), (4078, 4084), (4088, 4094), (4098, 4104), (4108, 4114), (4118, 4124), (4128, 4134), (4138, 4144), (4148, 4154), (4158, 4164), (4168, 4174), (4178, 4184), (4188, 4194), (4198, 4204), (4208, 4214), (4218, 4224), (4228, 4234), (4238, 4244), (4248, 4254), (4258, 4264), (4268, 4274), (4278, 4284), (4288, 4294), (4298, 4304), (4308, 4314), (4318, 4324), (4328, 4334), (4338, 4344), (4348, 4354), (4358, 4364), (4368, 4374), (4378, 4384), (4388, 4394), (4398, 4404), (4408, 4414), (4418, 4424), (4428, 4434), (4438, 4444), (4448, 4454), (4458, 4464), (4468, 4474), (4478, 4484), (4488, 4494), (4498, 4504), (4508, 4514), (4518, 4524), (4528, 4534), (4538, 4544), (4548, 4554), (4558, 4564), (4568, 4574), (4578, 4584), (4588, 4594), (4598, 4604), (4608, 4614), (4618, 4624), (4628, 4634), (4638, 4644), (4648, 4654), (4658, 4664), (4668, 4674), (4678, 4684), (4688, 4694), (4698, 4704), (4708, 4714), (4718, 4724), (4728, 4734), (4738, 4744), (4748, 4754), (4758, 4764), (4768, 4774), (4778, 4784), (4788, 4794), (4798, 4804), (4808, 4814), (4818, 4824), (4828, 4834), (4838, 4844), (4848, 4854), (4858, 4864), (4868, 4874), (4878, 4884), (4888, 4894), (4898, 4904), (4908, 4914), (4918, 4924), (4928, 4934), (4938, 4944), (4948, 4954), (4958, 4964), (4968, 4974), (4978, 4991), (4998, 5004), (5008, 5028), (5029, 5031)]@@@
-               	cmpb	$0, 557613(%rip)        # 0x4eddd4 <_Konan_init_stdlib_guard>
-               	je	0x465bb7 <_Konan_constructors+0x17>
-               	cmpb	$0, 557605(%rip)        # 0x4eddd5 <_Konan_init_main_guard>
-               	je	0x466958 <_Konan_constructors+0xdb8>
+               	cmpl	$0, 557949(%rip)        # 0x4ee554 <state_global$kotlin.text.regex.AbstractSet+0x4>
+               	je	0x4661e7 <_Konan_constructors+0x17>
+               	cmpl	$0, 557944(%rip)        # 0x4ee558 <state_global$kotlin.text.regex.AbstractSet+0x8>
+               	je	0x46749d <_Konan_constructors+0x12cd>
@@@@
-               	movb	$1, 557590(%rip)        # 0x4eddd4 <_Konan_init_stdlib_guard>
-               	leaq	662467(%rip), %rax      # 0x507788 <(anonymous namespace)::initHeadNode>
-               	movq	662492(%rip), %rcx      # 0x5077a8 <(anonymous namespace)::initTailNode>
+               	movl	$1, 557923(%rip)        # 0x4ee554 <state_global$kotlin.text.regex.AbstractSet+0x4>
+               	leaq	662800(%rip), %rax      # 0x507f08 <(anonymous namespace)::initHeadNode>
+               	movq	662825(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
@@@@
-               	cmpq	$0, 662448(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	cmoveq	%rax, %rcx
-               	leaq	550757(%rip), %rdx      # 0x4ec348 <init_node>
-               	movq	%rdx, (%rcx)
-               	cmpq	$0, 662426(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550747(%rip), %rcx      # 0x4ec350 <init_node+0x8>
+               	cmpq	$0, 662781(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	leaq	550744(%rip), %rdx      # 0x4ec358 <init_node.102>
+               	leaq	549170(%rip), %rdx      # 0x4ec348 <init_node>
@@@@
-               	cmpq	$0, 662397(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550734(%rip), %rcx      # 0x4ec360 <init_node.102+0x8>
+               	movq	%rdx, 662792(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662785(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662741(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662368(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550721(%rip), %rcx      # 0x4ec370 <init_node.103+0x8>
+               	movq	%rdx, 662752(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662745(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662701(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662339(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550708(%rip), %rcx      # 0x4ec380 <init_node.104+0x8>
+               	movq	%rdx, 662712(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662705(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662661(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662310(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550695(%rip), %rcx      # 0x4ec390 <init_node.105+0x8>
+               	movq	%rdx, 662672(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662665(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662621(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662281(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550682(%rip), %rcx      # 0x4ec3a0 <init_node.106+0x8>
+               	movq	%rdx, 662632(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662625(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662581(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662252(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550669(%rip), %rcx      # 0x4ec3b0 <init_node.107+0x8>
+               	movq	%rdx, 662592(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662585(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662541(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662223(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550656(%rip), %rcx      # 0x4ec3c0 <init_node.108+0x8>
+               	movq	%rdx, 662552(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662545(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662501(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662194(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550643(%rip), %rcx      # 0x4ec3d0 <init_node.109+0x8>
+               	movq	%rdx, 662512(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662505(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662461(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662165(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550630(%rip), %rcx      # 0x4ec3e0 <init_node.110+0x8>
+               	movq	%rdx, 662472(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662465(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662421(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662136(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550617(%rip), %rcx      # 0x4ec3f0 <init_node.111+0x8>
+               	movq	%rdx, 662432(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662425(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662381(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662107(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550604(%rip), %rcx      # 0x4ec400 <init_node.112+0x8>
+               	movq	%rdx, 662392(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662385(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662341(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662078(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550591(%rip), %rcx      # 0x4ec410 <init_node.113+0x8>
+               	movq	%rdx, 662352(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662345(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662301(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662049(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550578(%rip), %rcx      # 0x4ec420 <init_node.114+0x8>
+               	movq	%rdx, 662312(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662305(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662261(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 662020(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550565(%rip), %rcx      # 0x4ec430 <init_node.115+0x8>
+               	movq	%rdx, 662272(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662265(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662221(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661991(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550552(%rip), %rcx      # 0x4ec440 <init_node.116+0x8>
+               	movq	%rdx, 662232(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662225(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662181(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661962(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550539(%rip), %rcx      # 0x4ec450 <init_node.117+0x8>
+               	movq	%rdx, 662192(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662185(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662141(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661933(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550526(%rip), %rcx      # 0x4ec460 <init_node.118+0x8>
+               	movq	%rdx, 662152(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662145(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662101(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661904(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550513(%rip), %rcx      # 0x4ec470 <init_node.119+0x8>
+               	movq	%rdx, 662112(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662105(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662061(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661875(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550500(%rip), %rcx      # 0x4ec480 <init_node.120+0x8>
+               	movq	%rdx, 662072(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662065(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 662021(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661846(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550487(%rip), %rcx      # 0x4ec490 <init_node.121+0x8>
+               	movq	%rdx, 662032(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	662025(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661981(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661817(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550474(%rip), %rcx      # 0x4ec4a0 <init_node.122+0x8>
+               	movq	%rdx, 661992(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661985(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661941(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661788(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550461(%rip), %rcx      # 0x4ec4b0 <init_node.123+0x8>
+               	movq	%rdx, 661952(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661945(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661901(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661759(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550448(%rip), %rcx      # 0x4ec4c0 <init_node.124+0x8>
+               	movq	%rdx, 661912(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661905(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661861(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661730(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550435(%rip), %rcx      # 0x4ec4d0 <init_node.125+0x8>
+               	movq	%rdx, 661872(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661865(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661821(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661701(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550422(%rip), %rcx      # 0x4ec4e0 <init_node.126+0x8>
+               	movq	%rdx, 661832(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661825(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661781(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661672(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550409(%rip), %rcx      # 0x4ec4f0 <init_node.127+0x8>
+               	movq	%rdx, 661792(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661785(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661741(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661643(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550396(%rip), %rcx      # 0x4ec500 <init_node.128+0x8>
+               	movq	%rdx, 661752(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661745(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661701(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661614(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550383(%rip), %rcx      # 0x4ec510 <init_node.129+0x8>
+               	movq	%rdx, 661712(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661705(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661661(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661585(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550370(%rip), %rcx      # 0x4ec520 <init_node.130+0x8>
+               	movq	%rdx, 661672(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661665(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661621(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661556(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550357(%rip), %rcx      # 0x4ec530 <init_node.131+0x8>
+               	movq	%rdx, 661632(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661625(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661581(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661527(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550344(%rip), %rcx      # 0x4ec540 <init_node.132+0x8>
+               	movq	%rdx, 661592(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661585(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661541(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661498(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550331(%rip), %rcx      # 0x4ec550 <init_node.133+0x8>
+               	movq	%rdx, 661552(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661545(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661501(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661469(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550318(%rip), %rcx      # 0x4ec560 <init_node.134+0x8>
+               	movq	%rdx, 661512(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661505(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661461(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661440(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550305(%rip), %rcx      # 0x4ec570 <init_node.135+0x8>
+               	movq	%rdx, 661472(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661465(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661421(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661411(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550292(%rip), %rcx      # 0x4ec580 <init_node.136+0x8>
+               	movq	%rdx, 661432(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661425(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661381(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661382(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550279(%rip), %rcx      # 0x4ec590 <init_node.137+0x8>
+               	movq	%rdx, 661392(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661385(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661341(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661353(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550266(%rip), %rcx      # 0x4ec5a0 <init_node.138+0x8>
+               	movq	%rdx, 661352(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661345(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661301(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661324(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550253(%rip), %rcx      # 0x4ec5b0 <init_node.139+0x8>
+               	movq	%rdx, 661312(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661305(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661261(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661295(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550240(%rip), %rcx      # 0x4ec5c0 <init_node.140+0x8>
+               	movq	%rdx, 661272(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661265(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661221(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661266(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550227(%rip), %rcx      # 0x4ec5d0 <init_node.141+0x8>
+               	movq	%rdx, 661232(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661225(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661181(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661237(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550214(%rip), %rcx      # 0x4ec5e0 <init_node.142+0x8>
+               	movq	%rdx, 661192(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661185(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661141(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661208(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550201(%rip), %rcx      # 0x4ec5f0 <init_node.143+0x8>
+               	movq	%rdx, 661152(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661145(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661101(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661179(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550188(%rip), %rcx      # 0x4ec600 <init_node.144+0x8>
+               	movq	%rdx, 661112(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661105(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661061(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661150(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550175(%rip), %rcx      # 0x4ec610 <init_node.145+0x8>
+               	movq	%rdx, 661072(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661065(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 661021(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661121(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550162(%rip), %rcx      # 0x4ec620 <init_node.146+0x8>
+               	movq	%rdx, 661032(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	661025(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660981(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661092(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550149(%rip), %rcx      # 0x4ec630 <init_node.147+0x8>
+               	movq	%rdx, 660992(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660985(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660941(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661063(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550136(%rip), %rcx      # 0x4ec640 <init_node.148+0x8>
+               	movq	%rdx, 660952(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660945(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660901(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661034(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550123(%rip), %rcx      # 0x4ec650 <init_node.149+0x8>
+               	movq	%rdx, 660912(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660905(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660861(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 661005(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550110(%rip), %rcx      # 0x4ec660 <init_node.150+0x8>
+               	movq	%rdx, 660872(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660865(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660821(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660976(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550097(%rip), %rcx      # 0x4ec670 <init_node.151+0x8>
+               	movq	%rdx, 660832(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660825(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660781(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660947(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550084(%rip), %rcx      # 0x4ec680 <init_node.152+0x8>
+               	movq	%rdx, 660792(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660785(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660741(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660918(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550071(%rip), %rcx      # 0x4ec690 <init_node.153+0x8>
+               	movq	%rdx, 660752(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660745(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660701(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660889(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550058(%rip), %rcx      # 0x4ec6a0 <init_node.154+0x8>
+               	movq	%rdx, 660712(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660705(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660661(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660860(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550045(%rip), %rcx      # 0x4ec6b0 <init_node.155+0x8>
+               	movq	%rdx, 660672(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660665(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660621(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660831(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550032(%rip), %rcx      # 0x4ec6c0 <init_node.156+0x8>
+               	movq	%rdx, 660632(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660625(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660581(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660802(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550019(%rip), %rcx      # 0x4ec6d0 <init_node.157+0x8>
+               	movq	%rdx, 660592(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660585(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660541(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660773(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	550006(%rip), %rcx      # 0x4ec6e0 <init_node.158+0x8>
+               	movq	%rdx, 660552(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660545(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660501(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660744(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549993(%rip), %rcx      # 0x4ec6f0 <init_node.159+0x8>
+               	movq	%rdx, 660512(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660505(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660461(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660715(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549980(%rip), %rcx      # 0x4ec700 <init_node.160+0x8>
+               	movq	%rdx, 660472(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660465(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660421(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660686(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549967(%rip), %rcx      # 0x4ec710 <init_node.161+0x8>
+               	movq	%rdx, 660432(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660425(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660381(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660657(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549954(%rip), %rcx      # 0x4ec720 <init_node.162+0x8>
+               	movq	%rdx, 660392(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660385(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660341(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660628(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549941(%rip), %rcx      # 0x4ec730 <init_node.163+0x8>
+               	movq	%rdx, 660352(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660345(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660301(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660599(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549928(%rip), %rcx      # 0x4ec740 <init_node.164+0x8>
+               	movq	%rdx, 660312(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660305(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660261(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660570(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549915(%rip), %rcx      # 0x4ec750 <init_node.165+0x8>
+               	movq	%rdx, 660272(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660265(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660221(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660541(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549902(%rip), %rcx      # 0x4ec760 <init_node.166+0x8>
+               	movq	%rdx, 660232(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660225(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660181(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660512(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549889(%rip), %rcx      # 0x4ec770 <init_node.167+0x8>
+               	movq	%rdx, 660192(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660185(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660141(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660483(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549876(%rip), %rcx      # 0x4ec780 <init_node.168+0x8>
+               	movq	%rdx, 660152(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660145(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660101(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660454(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549863(%rip), %rcx      # 0x4ec790 <init_node.169+0x8>
+               	movq	%rdx, 660112(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660105(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660061(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660425(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549850(%rip), %rcx      # 0x4ec7a0 <init_node.170+0x8>
+               	movq	%rdx, 660072(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660065(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 660021(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660396(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549837(%rip), %rcx      # 0x4ec7b0 <init_node.171+0x8>
+               	movq	%rdx, 660032(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	660025(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659981(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660367(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549824(%rip), %rcx      # 0x4ec7c0 <init_node.172+0x8>
+               	movq	%rdx, 659992(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659985(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659941(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660338(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549811(%rip), %rcx      # 0x4ec7d0 <init_node.173+0x8>
+               	movq	%rdx, 659952(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659945(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659901(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660309(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549798(%rip), %rcx      # 0x4ec7e0 <init_node.174+0x8>
+               	movq	%rdx, 659912(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659905(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659861(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660280(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549785(%rip), %rcx      # 0x4ec7f0 <init_node.175+0x8>
+               	movq	%rdx, 659872(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659865(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659821(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660251(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549772(%rip), %rcx      # 0x4ec800 <init_node.176+0x8>
+               	movq	%rdx, 659832(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659825(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659781(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660222(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549759(%rip), %rcx      # 0x4ec810 <init_node.177+0x8>
+               	movq	%rdx, 659792(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659785(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659741(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660193(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549746(%rip), %rcx      # 0x4ec820 <init_node.178+0x8>
+               	movq	%rdx, 659752(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659745(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659701(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660164(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549733(%rip), %rcx      # 0x4ec830 <init_node.179+0x8>
+               	movq	%rdx, 659712(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659705(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659661(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660135(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549720(%rip), %rcx      # 0x4ec840 <init_node.180+0x8>
+               	movq	%rdx, 659672(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659665(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659621(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660106(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549707(%rip), %rcx      # 0x4ec850 <init_node.181+0x8>
+               	movq	%rdx, 659632(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659625(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659581(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660077(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549694(%rip), %rcx      # 0x4ec860 <init_node.182+0x8>
+               	movq	%rdx, 659592(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659585(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659541(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660048(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549681(%rip), %rcx      # 0x4ec870 <init_node.183+0x8>
+               	movq	%rdx, 659552(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659545(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659501(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 660019(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549668(%rip), %rcx      # 0x4ec880 <init_node.184+0x8>
+               	movq	%rdx, 659512(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659505(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659461(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659990(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549655(%rip), %rcx      # 0x4ec890 <init_node.185+0x8>
+               	movq	%rdx, 659472(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659465(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659421(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659961(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549642(%rip), %rcx      # 0x4ec8a0 <init_node.186+0x8>
+               	movq	%rdx, 659432(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659425(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659381(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659932(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549629(%rip), %rcx      # 0x4ec8b0 <init_node.187+0x8>
+               	movq	%rdx, 659392(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659385(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659341(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659903(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549616(%rip), %rcx      # 0x4ec8c0 <init_node.188+0x8>
+               	movq	%rdx, 659352(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659345(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659301(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659874(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549603(%rip), %rcx      # 0x4ec8d0 <init_node.189+0x8>
+               	movq	%rdx, 659312(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659305(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659261(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659845(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549590(%rip), %rcx      # 0x4ec8e0 <init_node.190+0x8>
+               	movq	%rdx, 659272(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659265(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659221(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659816(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549577(%rip), %rcx      # 0x4ec8f0 <init_node.191+0x8>
+               	movq	%rdx, 659232(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659225(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659181(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659787(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549564(%rip), %rcx      # 0x4ec900 <init_node.192+0x8>
+               	movq	%rdx, 659192(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659185(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659141(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659758(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549551(%rip), %rcx      # 0x4ec910 <init_node.193+0x8>
+               	movq	%rdx, 659152(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659145(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659101(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659729(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549538(%rip), %rcx      # 0x4ec920 <init_node.194+0x8>
+               	movq	%rdx, 659112(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659105(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659061(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659700(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549525(%rip), %rcx      # 0x4ec930 <init_node.195+0x8>
+               	movq	%rdx, 659072(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659065(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 659021(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659671(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549512(%rip), %rcx      # 0x4ec940 <init_node.196+0x8>
+               	movq	%rdx, 659032(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	659025(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658981(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659642(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549499(%rip), %rcx      # 0x4ec950 <init_node.197+0x8>
+               	movq	%rdx, 658992(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658985(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658941(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659613(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549486(%rip), %rcx      # 0x4ec960 <init_node.198+0x8>
+               	movq	%rdx, 658952(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658945(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658901(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659584(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549473(%rip), %rcx      # 0x4ec970 <init_node.199+0x8>
+               	movq	%rdx, 658912(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658905(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658861(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659555(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549460(%rip), %rcx      # 0x4ec980 <init_node.200+0x8>
+               	movq	%rdx, 658872(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658865(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658821(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659526(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549447(%rip), %rcx      # 0x4ec990 <init_node.201+0x8>
+               	movq	%rdx, 658832(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658825(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658781(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659497(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549434(%rip), %rcx      # 0x4ec9a0 <init_node.202+0x8>
+               	movq	%rdx, 658792(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658785(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658741(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659468(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549421(%rip), %rcx      # 0x4ec9b0 <init_node.203+0x8>
+               	movq	%rdx, 658752(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658745(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658701(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659439(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549408(%rip), %rcx      # 0x4ec9c0 <init_node.204+0x8>
+               	movq	%rdx, 658712(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658705(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658661(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659410(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549395(%rip), %rcx      # 0x4ec9d0 <init_node.205+0x8>
+               	movq	%rdx, 658672(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658665(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658621(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659381(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549382(%rip), %rcx      # 0x4ec9e0 <init_node.206+0x8>
+               	movq	%rdx, 658632(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658625(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658581(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659352(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549369(%rip), %rcx      # 0x4ec9f0 <init_node.207+0x8>
+               	movq	%rdx, 658592(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658585(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658541(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659323(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549356(%rip), %rcx      # 0x4eca00 <init_node.208+0x8>
+               	movq	%rdx, 658552(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658545(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658501(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659294(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549343(%rip), %rcx      # 0x4eca10 <init_node.209+0x8>
+               	movq	%rdx, 658512(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658505(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658461(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659265(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549330(%rip), %rcx      # 0x4eca20 <init_node.210+0x8>
+               	movq	%rdx, 658472(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658465(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658421(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659236(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549317(%rip), %rcx      # 0x4eca30 <init_node.211+0x8>
+               	movq	%rdx, 658432(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658425(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658381(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659207(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549304(%rip), %rcx      # 0x4eca40 <init_node.212+0x8>
+               	movq	%rdx, 658392(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658385(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658341(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659178(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549291(%rip), %rcx      # 0x4eca50 <init_node.213+0x8>
+               	movq	%rdx, 658352(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658345(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658301(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659149(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549278(%rip), %rcx      # 0x4eca60 <init_node.214+0x8>
+               	movq	%rdx, 658312(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658305(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658261(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659120(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549265(%rip), %rcx      # 0x4eca70 <init_node.215+0x8>
+               	movq	%rdx, 658272(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658265(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658221(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659091(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549252(%rip), %rcx      # 0x4eca80 <init_node.216+0x8>
+               	movq	%rdx, 658232(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658225(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658181(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659062(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549239(%rip), %rcx      # 0x4eca90 <init_node.217+0x8>
+               	movq	%rdx, 658192(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658185(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658141(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	cmpq	$0, 659033(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549226(%rip), %rcx      # 0x4ecaa0 <init_node.218+0x8>
-               	cmoveq	%rax, %rcx
-               	leaq	549223(%rip), %rax      # 0x4ecaa8 <init_node.219>
-               	movq	%rax, (%rcx)
-               	movq	%rax, 659037(%rip)      # 0x5077a8 <(anonymous namespace)::initTailNode>
-               	cmpb	$0, 554115(%rip)        # 0x4eddd5 <_Konan_init_main_guard>
-               	jne	0x465bb6 <_Konan_constructors+0x16>
-               	movb	$1, 554102(%rip)        # 0x4eddd5 <_Konan_init_main_guard>
-               	leaq	658978(%rip), %rax      # 0x507788 <(anonymous namespace)::initHeadNode>
-               	movq	659003(%rip), %rcx      # 0x5077a8 <(anonymous namespace)::initTailNode>
+               	movq	%rdx, 658152(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658145(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
@@@@
-               	cmpq	$0, 658937(%rip)        # 0x507788 <(anonymous namespace)::initHeadNode>
-               	leaq	549162(%rip), %rcx      # 0x4ecac0 <init_node.220+0x8>
+               	movq	%rdx, 658112(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	658105(%rip), %rcx      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rcx
+               	cmpq	$0, 658061(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	movq	%rax, 658941(%rip)      # 0x5077a8 <(anonymous namespace)::initTailNode>
+               	movq	%rax, 658072(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	cmpl	$0, 553153(%rip)        # 0x4ee558 <state_global$kotlin.text.regex.AbstractSet+0x8>
+               	jne	0x4661e6 <_Konan_constructors+0x16>
+               	movl	$1, 553137(%rip)        # 0x4ee558 <state_global$kotlin.text.regex.AbstractSet+0x8>
+               	movq	658042(%rip), %rax      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rax
+               	cmpq	$0, 657998(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
+               	leaq	657991(%rip), %rcx      # 0x507f08 <(anonymous namespace)::initHeadNode>
+               	cmoveq	%rcx, %rax
+               	leaq	546284(%rip), %rdx      # 0x4ecab8 <init_node.220>
+               	movq	%rdx, (%rax)
+               	movq	%rdx, 658002(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	movq	657995(%rip), %rax      # 0x507f28 <(anonymous namespace)::initTailNode>
+               	addq	$8, %rax
+               	cmpq	$0, 657951(%rip)        # 0x507f08 <(anonymous namespace)::initHeadNode>
+               	cmoveq	%rcx, %rax
+               	leaq	546260(%rip), %rcx      # 0x4ecac8 <init_node.221>
+               	movq	%rcx, (%rax)
+               	movq	%rcx, 657962(%rip)      # 0x507f28 <(anonymous namespace)::initTailNode>
@@@@
-               	nopl	(%rax)
+               	nop

@@ -78470,17 +79085,17 @@
@@@[(10, 11), (12, 15)]@@@
-               	movq	(%r15), %rdi
@@@@
-               	addq	8(%rbx), %rdi
+               	movq	8(%rbx), %rdi
+               	addq	(%r15), %rdi

@@ -78742,84 +79357,85 @@
@@@[(54, 58), (75, 78), (79, 87), (108, 112)]@@@
-               	movq	(%rbx), %rdi
-               	callq	0x4670a0 <std::thread::~thread()>
+               	movq	%rbx, %rdi
+               	callq	0x467bf0 <std::thread::~thread()>
@@@@
-               	testq	%rdi, %rdi
-               	jne	0x4670a6 <std::thread::~thread()+0x6>
-               	retq
@@@@
-               	callq	0x481f33 <std::terminate()>
-               	nopl	(%rax)
+               	cmpq	$0, (%rdi)
+               	jne	0x467bf9 <std::thread::~thread()+0x9>
+               	popq	%rax
+               	retq
+               	callq	0x483203 <std::terminate()>
+               	nop
@@@@
-               	movq	(%rbx), %rdi
-               	callq	0x4670a0 <std::thread::~thread()>
+               	movq	%rbx, %rdi
+               	callq	0x467bf0 <std::thread::~thread()>

@@ -79478,42 +80094,44 @@
@@@[(35, 38), (49, 52)]@@@
-               	addq	%rax, 16(%r15)
+               	addq	16(%r15), %rax
+               	movq	%rax, 16(%r15)
@@@@
-               	addq	%rax, 40(%r15)
+               	addq	40(%r15), %rax
+               	movq	%rax, 40(%r15)

@@ -79522,7 +80140,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -79534,42 +80152,44 @@
@@@[(35, 38), (49, 52)]@@@
-               	addq	%rax, 16(%r15)
+               	addq	16(%r15), %rax
+               	movq	%rax, 16(%r15)
@@@@
-               	addq	%rax, 40(%r15)
+               	addq	40(%r15), %rax
+               	movq	%rax, 40(%r15)

@@ -79578,7 +80198,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -79590,42 +80210,44 @@
@@@[(35, 38), (49, 52)]@@@
-               	addq	%rax, 16(%r15)
+               	addq	16(%r15), %rax
+               	movq	%rax, 16(%r15)
@@@@
-               	addq	%rax, 40(%r15)
+               	addq	40(%r15), %rax
+               	movq	%rax, 40(%r15)

@@ -79634,7 +80256,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -79745,31 +80367,35 @@
@@@[(3, 9), (14, 18), (25, 29), (33, 37), (38, 42)]@@@
-               	callq	0x4821e4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
-               	addq	$1, 216(%rbx)
+               	callq	0x4834b4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
+               	movq	216(%rbx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 216(%rbx)
@@@@
-               	addq	$-1, 192(%rbx)
+               	movq	192(%rbx), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 192(%rbx)
@@@@
-               	jmp	0x4137e0 <free@plt>
-               	nop
+               	jmp	0x4137c0 <free@plt>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movl	$328, %edi              # imm = 0x148
-               	addq	-64(%rax), %rdi
+               	movq	-64(%rax), %rdi
+               	addq	$328, %rdi              # imm = 0x148
@@@@
-               	jmp	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	nop
+               	jmp	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	nopw	%cs:(%rax,%rax)

@@ -79809,8 +80435,10 @@
@@@[(3, 9)]@@@
-               	callq	0x4821e4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
-               	addq	$1, 200(%rbx)
+               	callq	0x4834b4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
+               	movq	200(%rbx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 200(%rbx)

@@ -79821,14 +80449,14 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)

@@ -79844,30 +80472,34 @@
@@@[(3, 9), (14, 18), (25, 29)]@@@
-               	callq	0x4821e4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
-               	addq	$1, 224(%r14)
+               	callq	0x4834b4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
+               	movq	224(%r14), %rax
+               	addq	$1, %rax
+               	movq	%rax, 224(%r14)
@@@@
-               	addq	$-1, 200(%r14)
+               	movq	200(%r14), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 200(%r14)
@@@@
-               	jmp	0x4137e0 <free@plt>
-               	nopl	(%rax)
+               	jmp	0x4137c0 <free@plt>
+               	nopw	%cs:(%rax,%rax)

@@ -79889,12 +80521,14 @@
@@@[(3, 9)]@@@
-               	callq	0x4821e4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
-               	addq	$1, 40(%rbx)
+               	callq	0x4834b4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
+               	movq	40(%rbx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 40(%rbx)

@@ -79902,7 +80536,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -79936,97 +80570,96 @@
@@@[(51, 52), (53, 63), (69, 73)]@@@
-               	movq	%rax, %rcx
@@@@
-               	movq	(%rsp), %rax
-               	shlq	$32, %rax
-               	orq	%r12, %rax
-               	movq	%rcx, %r12
-               	movq	%rax, 16(%rcx)
+               	movq	(%rsp), %rcx
+               	shlq	$32, %rcx
+               	orq	%rcx, %r12
+               	movq	%r12, 16(%rax)
+               	movq	%rax, %r12
@@@@
-               	je	0x4682da <AddTLSRecord+0x24a>
-               	nopl	(%rax)
+               	je	0x468e8a <AddTLSRecord+0x24a>
+               	nopw	(%rax,%rax)

@@ -80050,98 +80683,102 @@
@@@[(93, 94), (113, 117), (118, 121)]@@@
+               	movq	(%r12), %rax
@@@@
-               	addq	$1, 120(%r15)
+               	movq	120(%r15), %rax
+               	addq	$1, %rax
+               	movq	%rax, 120(%r15)
@@@@
-               	addl	%eax, 156(%r15)
+               	addl	156(%r15), %eax
+               	movl	%eax, 156(%r15)

@@ -80161,79 +80798,80 @@
@@@[(6, 10), (11, 13), (19, 21), (25, 35), (36, 38), (42, 50), (51, 61), (62, 64), (69, 71), (72, 78), (80, 82), (89, 101), (102, 104), (105, 114), (118, 120)]@@@
-               	je	0x46844b <LookupTLS+0x5b>
-               	movq	104(%r9), %rbx
+               	je	0x46900b <LookupTLS+0x5b>
+               	movq	104(%r9), %rbp
@@@@
-               	orq	%rbx, %rax
+               	orq	%rbp, %rax
@@@@
-               	divq	%rbx
+               	divq	%rbp
@@@@
-               	jne	0x468471 <LookupTLS+0x81>
-               	jmp	0x4684cc <LookupTLS+0xdc>
-               	addl	168(%r9), %r14d
-               	jmp	0x4684e8 <LookupTLS+0xf8>
-               	leaq	547066(%rip), %rax      # 0x4edd58 <__KonanTlsKey>
+               	jne	0x469031 <LookupTLS+0x81>
+               	jmp	0x46908c <LookupTLS+0xdc>
+               	movq	168(%r9), %rax
+               	jmp	0x4690a8 <LookupTLS+0xf8>
+               	leaq	545978(%rip), %rax      # 0x4ee4d8 <__KonanTlsKey>
@@@@
-               	divl	%ebx
+               	divl	%ebp
@@@@
-               	je	0x4684cc <LookupTLS+0xdc>
-               	movq	(%rax), %rbp
-               	cmpq	%r8, 8(%rbp)
-               	je	0x4684c7 <LookupTLS+0xd7>
+               	je	0x46908c <LookupTLS+0xdc>
+               	movq	(%rax), %rbx
+               	cmpq	%r8, 8(%rbx)
+               	je	0x469087 <LookupTLS+0xd7>
@@@@
-               	movq	%rbp, %rdi
-               	movq	(%rbp), %rbp
-               	testq	%rbp, %rbp
-               	je	0x4684cc <LookupTLS+0xdc>
-               	movq	8(%rbp), %rsi
+               	movq	%rbx, %rdi
+               	movq	(%rbx), %rbx
+               	testq	%rbx, %rbx
+               	je	0x46908c <LookupTLS+0xdc>
+               	movq	8(%rbx), %rsi
@@@@
-               	orq	%rbx, %rax
+               	orq	%rbp, %rax
@@@@
-               	divq	%rbx
+               	divq	%rbp
@@@@
-               	je	0x4684bb <LookupTLS+0xcb>
-               	jmp	0x4684cc <LookupTLS+0xdc>
-               	nop
+               	je	0x46907b <LookupTLS+0xcb>
+               	jmp	0x46908c <LookupTLS+0xdc>
+               	nopl	(%rax)
@@@@
-               	divl	%ebx
+               	divl	%ebp
@@@@
-               	jne	0x4684ce <LookupTLS+0xde>
-               	jmp	0x4684cc <LookupTLS+0xdc>
-               	testq	%rbp, %rbp
-               	jne	0x4684ce <LookupTLS+0xde>
-               	xorl	%ebp, %ebp
-               	movq	8(%rbp), %rax
+               	jne	0x46908e <LookupTLS+0xde>
+               	jmp	0x46908c <LookupTLS+0xdc>
+               	testq	%rbx, %rbx
+               	jne	0x46908e <LookupTLS+0xde>
+               	xorl	%ebx, %ebx
+               	movq	8(%rbx), %rax
@@@@
-               	movq	16(%rbp), %rax
+               	movq	16(%rbx), %rax
@@@@
-               	addl	16(%rbp), %r14d
-               	movslq	%r14d, %rax
-               	shlq	$3, %rax
-               	addq	72(%r9), %rax
+               	movq	16(%rbx), %rax
+               	addl	%r14d, %eax
+               	cltq
+               	movq	72(%r9), %rcx
+               	leaq	(%rcx,%rax,8), %rax
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)

@@ -80241,92 +80879,93 @@
@@@[(39, 45), (46, 53), (70, 76)]@@@
-               	movslq	8(%rsi), %rdx
-               	testq	%rdx, %rdx
-               	je	0x468616 <Kotlin_processArrayInMark+0xb6>
+               	movl	8(%rsi), %eax
+               	testl	%eax, %eax
+               	je	0x4691d6 <Kotlin_processArrayInMark+0xb6>
@@@@
-               	leaq	-8(,%rdx,8), %r8
-               	testb	$8, %r8b
-               	jne	0x4685a6 <Kotlin_processArrayInMark+0x46>
+               	movslq	%eax, %r8
+               	leaq	-8(,%r8,8), %rdx
+               	testb	$8, %dl
+               	jne	0x469166 <Kotlin_processArrayInMark+0x46>
@@@@
-               	testq	%r8, %r8
-               	je	0x468616 <Kotlin_processArrayInMark+0xb6>
-               	leaq	(%rsi,%rdx,8), %r8
+               	testq	%rdx, %rdx
+               	je	0x4691d6 <Kotlin_processArrayInMark+0xb6>
+               	leaq	(%rsi,%r8,8), %r8

@@ -80448,215 +81087,221 @@
@@@[(105, 109), (133, 147), (148, 152)]@@@
-               	addq	$-1, 546612(%rip)       # 0x4ee080 <kotlin::mm::GlobalData::instance_+0xa8>
+               	movq	545533(%rip), %rax      # 0x4ee808 <kotlin::mm::GlobalData::instance_+0xa8>
+               	addq	$-1, %rax
+               	movq	%rax, 545522(%rip)      # 0x4ee808 <kotlin::mm::GlobalData::instance_+0xa8>
@@@@
-               	callq	0x48219e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
-               	addq	$1, 24(%rsp)
-               	addq	$-1, 546560(%rip)       # 0x4ee098 <kotlin::mm::GlobalData::instance_+0xc0>
-               	jmp	0x46895c <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x17c>
-               	movq	546535(%rip), %rdi      # 0x4ee088 <kotlin::mm::GlobalData::instance_+0xb0>
+               	callq	0x48346e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
+               	movq	24(%rsp), %rax
+               	addq	$1, %rax
+               	movq	%rax, 24(%rsp)
+               	movq	545463(%rip), %rax      # 0x4ee820 <kotlin::mm::GlobalData::instance_+0xc0>
+               	addq	$-1, %rax
+               	movq	%rax, 545452(%rip)      # 0x4ee820 <kotlin::mm::GlobalData::instance_+0xc0>
+               	jmp	0x469526 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x186>
+               	movq	545427(%rip), %rdi      # 0x4ee810 <kotlin::mm::GlobalData::instance_+0xb0>
@@@@
-               	je	0x4689c0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x1e0>
-               	nopw	(%rax,%rax)
+               	je	0x4695a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)+0x200>
+               	nopw	%cs:(%rax,%rax)

@@ -80779,213 +81424,226 @@
@@@[(3, 22), (23, 25), (26, 38), (39, 53), (54, 61), (62, 72), (73, 79), (81, 94), (101, 107), (108, 126), (127, 129), (133, 138), (142, 146), (151, 163), (178, 188), (189, 200), (204, 208), (212, 240), (241, 244), (245, 247), (248, 259), (260, 261), (262, 267), (268, 269), (270, 274), (281, 285), (286, 289), (290, 296), (297, 304), (308, 315), (319, 333), (335, 353), (355, 363)]@@@
-               	movq	280(%r12), %rdx
-               	xorl	%ecx, %ecx
-               	testq	%rdx, %rdx
-               	je	0x468dd7 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xc7>
-               	movslq	16(%rdx), %rax
-               	leaq	(%rdx,%rax,8), %rsi
-               	leaq	(,%rax,8), %rdi
-               	movslq	20(%rdx), %rbp
-               	leaq	(%rsi,%rbp,8), %rbx
+               	movq	280(%r12), %r13
+               	movq	%r13, 8(%rsp)
+               	testq	%r13, %r13
+               	je	0x4699e4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf4>
+               	movslq	16(%r13), %rax
+               	leaq	(,%rax,8), %rcx
+               	addq	%r13, %rcx
+               	leaq	(,%rax,8), %rdx
+               	movslq	20(%r13), %rsi
+               	leaq	(%rcx,%rsi,8), %rbx
@@@@
-               	subq	%rdi, %rbx
+               	subq	%rdx, %rbx
@@@@
-               	leaq	(%rdx,%rax,8), %r13
-               	addq	$24, %r13
-               	testq	%rdx, %rdx
-               	je	0x468de5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
+               	leaq	24(,%rax,8), %rbp
+               	addq	%r13, %rbp
+               	movq	%rbp, 16(%rsp)
+               	movq	%rbx, 24(%rsp)
+               	testq	%r13, %r13
+               	je	0x469a0c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
+               	cmpq	%rbx, %rbp
+               	jb	0x469a0c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
@@@@
-               	cmpq	%rbx, %r13
-               	jb	0x468de5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
-               	movq	8(%rdx), %rdx
-               	testq	%rdx, %rdx
-               	je	0x468dde <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xce>
-               	movslq	16(%rdx), %rax
-               	leaq	(%rdx,%rax,8), %r13
-               	addq	$24, %r13
+               	movq	8(%r13), %r13
+               	testq	%r13, %r13
+               	je	0x4699f2 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x102>
+               	movslq	16(%r13), %rax
+               	leaq	24(,%rax,8), %rbp
+               	addq	%r13, %rbp
@@@@
-               	movslq	20(%rdx), %rsi
-               	leaq	-24(,%rsi,8), %rbx
-               	addq	%r13, %rbx
+               	movq	%rbp, 16(%rsp)
+               	movslq	20(%r13), %rcx
+               	leaq	-24(,%rcx,8), %rbx
+               	addq	%rbp, %rbx
@@@@
-               	cmpq	%rbx, %r13
-               	jae	0x468da5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x95>
-               	jmp	0x468de5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
+               	movq	%rbx, 24(%rsp)
+               	cmpq	%rbx, %rbp
+               	jae	0x4699a0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xb0>
+               	movq	%r13, 8(%rsp)
+               	jmp	0x469a0c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11c>
+               	pxor	%xmm0, %xmm0
+               	movdqa	%xmm0, 16(%rsp)
@@@@
-               	xorl	%r13d, %r13d
-               	jmp	0x468de5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xd5>
+               	jmp	0x469a0a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x11a>
+               	movq	$0, 8(%rsp)
+               	pxor	%xmm0, %xmm0
+               	movdqa	%xmm0, 16(%rsp)
@@@@
-               	xorl	%edx, %edx
-               	movq	64(%r12), %rsi
-               	movq	72(%r12), %rdi
-               	movl	%ecx, %eax
-               	movq	%rdx, %rbp
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	xorl	%ebp, %ebp
+               	movq	72(%r12), %rcx
+               	movq	64(%r12), %rdx
+               	xorl	%esi, %esi
+               	movl	%esi, %eax
+               	nopw	(%rax,%rax)
@@@@
-               	jne	0x468e00 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xf0>
-               	testq	%rbp, %rbp
-               	jne	0x468e3d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x12d>
-               	movl	$1, %ecx
-               	movq	%rsi, %rdx
+               	jne	0x469a20 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x130>
@@@@
-               	je	0x468def <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xdf>
-               	jmp	0x468e3d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x12d>
-               	nopl	(%rax)
-               	movl	$2, %ecx
-               	movq	%rbp, %rdx
-               	cmpq	%rbp, %rdi
-               	je	0x468def <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0xdf>
+               	jne	0x469a5a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
+               	testq	%rbp, %rbp
+               	jne	0x469a5a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x16a>
+               	movq	%rdx, 8(%rsp)
+               	movl	$1, %esi
+               	movq	%rdx, %r13
+               	jmp	0x469a18 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
+               	nop
+               	movl	$2, %esi
+               	cmpq	%r13, %rcx
+               	je	0x469a18 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x128>
@@@@
-               	movdqa	%xmm0, (%rsp)
+               	movdqa	%xmm0, 32(%rsp)
@@@@
-               	jne	0x469081 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x371>
-               	movq	(%rbp), %rsi
+               	jne	0x469cd3 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3e3>
+               	movq	8(%rsp), %rax
+               	movq	(%rax), %rsi
@@@@
-               	je	0x468e88 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x178>
-               	movdqa	(%rsp), %xmm1
+               	je	0x469aac <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1bc>
+               	movdqa	32(%rsp), %xmm1
@@@@
-               	movdqa	%xmm1, (%rsp)
-               	addq	$8, %rbp
-               	movq	64(%r12), %rcx
-               	movq	72(%r12), %rdx
-               	movq	%rbp, %rdi
-               	movq	%rbp, %rsi
-               	movq	%rdi, %rbp
+               	movdqa	%xmm1, 32(%rsp)
+               	addq	$8, %r13
+               	movq	%r13, 8(%rsp)
+               	movq	72(%r12), %rcx
+               	movq	64(%r12), %rdx
@@@@
-               	cmpq	%rdx, %rsi
-               	je	0x468eb0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1a0>
-               	jmp	0x468fcb <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2bb>
-               	testq	%rbp, %rbp
-               	jne	0x468e46 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
-               	movq	%rcx, %rdi
-               	movq	%rcx, %rsi
+               	cmpq	%rcx, %r13
+               	je	0x469ad0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1e0>
+               	jmp	0x469c0e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x31e>
@@@@
-               	je	0x468e9c <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x18c>
-               	jmp	0x468e46 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
-               	movq	(%r13), %rsi
+               	jne	0x469a64 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
+               	testq	%rbp, %rbp
+               	jne	0x469a64 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
+               	movq	%rdx, 8(%rsp)
+               	movq	%rdx, %r13
+               	jmp	0x469abf <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x1cf>
+               	movq	16(%rsp), %rax
+               	movq	(%rax), %rsi
@@@@
-               	je	0x468f18 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x208>
-               	movdqa	(%rsp), %xmm1
+               	je	0x469b41 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x251>
+               	movdqa	32(%rsp), %xmm1
@@@@
-               	movapd	%xmm1, (%rsp)
-               	addq	$8, %r13
-               	testq	%rbp, %rbp
-               	je	0x468f71 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
-               	nopw	%cs:(%rax,%rax)
-               	nop
-               	cmpq	%rbx, %r13
-               	jb	0x468f71 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
-               	movq	8(%rbp), %rbp
-               	testq	%rbp, %rbp
-               	je	0x468f6a <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x25a>
-               	movslq	16(%rbp), %rax
-               	leaq	24(,%rax,8), %r13
-               	addq	%rbp, %r13
+               	movapd	%xmm1, 32(%rsp)
+               	addq	$8, %rbp
+               	movq	%rbp, 16(%rsp)
+               	testq	%r13, %r13
+               	je	0x469bbe <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
+               	cmpq	%rbx, %rbp
+               	jb	0x469bbe <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
+               	nopl	(%rax)
+               	movq	8(%r13), %r13
+               	testq	%r13, %r13
+               	je	0x469ba4 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2b4>
+               	movslq	16(%r13), %rax
+               	leaq	24(,%rax,8), %rbp
+               	addq	%r13, %rbp
@@@@
-               	movslq	20(%rbp), %rcx
+               	movq	%rbp, 16(%rsp)
+               	movslq	20(%r13), %rcx
@@@@
-               	addq	%r13, %rbx
+               	addq	%rbp, %rbx
@@@@
-               	cmpq	%rbx, %r13
-               	jae	0x468f35 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x225>
-               	jmp	0x468f71 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x261>
+               	movq	%rbx, 24(%rsp)
+               	cmpq	%rbx, %rbp
+               	jae	0x469b60 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
+               	movq	%r13, 8(%rsp)
+               	jmp	0x469bbe <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2ce>
+               	movq	$0, 8(%rsp)
+               	xorpd	%xmm0, %xmm0
+               	movapd	%xmm0, 16(%rsp)
@@@@
-               	xorl	%ebx, %ebx
@@@@
-               	movq	64(%r12), %rcx
-               	movq	72(%r12), %rdx
+               	xorl	%ebx, %ebx
+               	movq	72(%r12), %rcx
+               	movq	64(%r12), %rdx
@@@@
-               	movq	%rbp, %rdi
@@@@
-               	movq	%rdi, %rbp
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	nopl	(%rax)
@@@@
-               	jne	0x468f90 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x280>
+               	jne	0x469bd0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2e0>
+               	testq	%r13, %r13
+               	jne	0x469a64 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
@@@@
-               	jne	0x468e46 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
+               	jne	0x469a64 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
+               	movq	%rdx, 8(%rsp)
@@@@
-               	movq	%rcx, %rdi
-               	testq	%r13, %r13
-               	je	0x468f80 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
-               	jmp	0x468e46 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
+               	movq	%rdx, %r13
+               	jmp	0x469bca <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
@@@@
-               	movq	%rbp, %rdi
-               	cmpq	%rbp, %rdx
-               	je	0x468f80 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x270>
-               	jmp	0x468e46 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x136>
+               	cmpq	%r13, %rcx
+               	je	0x469bca <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2da>
+               	jmp	0x469a64 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x174>
@@@@
-               	movdqa	%xmm0, (%rsp)
-               	jmp	0x468fe5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d5>
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	movdqa	%xmm0, 32(%rsp)
+               	jmp	0x469c35 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x345>
+               	nopw	(%rax,%rax)
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
@@@@
-               	jne	0x468fe0 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x2d0>
-               	cmpb	$0, 544232(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	je	0x469023 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x313>
-               	cmpq	%r14, 544215(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	jne	0x469023 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x313>
-               	leaq	544206(%rip), %rcx      # 0x4eddd8 <(anonymous namespace)::current>
-               	pshufd	$78, (%rsp), %xmm0      # xmm0 = mem[2,3,0,1]
+               	jne	0x469c30 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x340>
+               	cmpb	$0, 543008(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x469c74 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
+               	cmpq	%r14, 542991(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	jne	0x469c74 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x384>
+               	leaq	542982(%rip), %rcx      # 0x4ee560 <(anonymous namespace)::current>
+               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
@@@@
-               	je	0x46904f <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x33f>
-               	movdqu	(%rax), %xmm1
-               	jmp	0x469063 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x353>
-               	cmpb	$0, 544438(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x46906b <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x35b>
-               	cmpq	%r14, 544421(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x46906b <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x35b>
-               	leaq	544412(%rip), %rcx      # 0x4eded8 <(anonymous namespace)::last>
-               	pshufd	$78, (%rsp), %xmm0      # xmm0 = mem[2,3,0,1]
+               	je	0x469ca1 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3b1>
+               	movupd	(%rax), %xmm1
+               	jmp	0x469cb5 <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3c5>
+               	cmpb	$0, 543213(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x469cbd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
+               	cmpq	%r14, 543196(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x469cbd <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x3cd>
+               	leaq	543187(%rip), %rcx      # 0x4ee660 <(anonymous namespace)::last>
+               	pshufd	$78, 32(%rsp), %xmm0    # xmm0 = mem[2,3,0,1]
@@@@
-               	jne	0x46901d <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x30d>
-               	pxor	%xmm1, %xmm1
-               	movdqu	%xmm1, 16(%rax)
-               	movdqu	%xmm1, (%rax)
+               	jne	0x469c6e <void kotlin::gc::collectRootSetForThread<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&, kotlin::mm::ThreadData&)+0x37e>
+               	xorpd	%xmm1, %xmm1
+               	movupd	%xmm1, 16(%rax)
+               	movupd	%xmm1, (%rax)

@@ -81036,41 +81694,41 @@
@@@[(36, 44), (46, 48), (49, 51)]@@@
-               	callq	0x473980 <mi_free>
-               	movq	(%r15), %rax
-               	movq	32(%r15), %rcx
-               	movq	%rcx, 8(%rax)
+               	callq	0x4747c0 <mi_free>
+               	movq	32(%r15), %rax
+               	movq	(%r15), %rcx
+               	movq	%rax, 8(%rcx)
@@@@
-               	movdqu	16(%rax), %xmm1
+               	movdqu	16(%rcx), %xmm1
@@@@
-               	movdqu	%xmm1, 16(%rax)
+               	movdqu	%xmm1, 16(%rcx)

@@ -81109,12 +81767,12 @@
@@@[(9, 13)]@@@
-               	jmp	0x469233 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
-               	movl	%ebx, %ebx
+               	jmp	0x469e83 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x73>
+               	movl	%eax, %ebx

@@ -81133,26 +81791,28 @@
@@@[(14, 18), (19, 23), (24, 27), (28, 35)]@@@
-               	movslq	20(%rcx), %rbp
-               	testq	%rbp, %rbp
+               	movl	20(%rcx), %ecx
+               	testl	%ecx, %ecx
@@@@
-               	js	0x469270 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
-               	movl	%ebp, %ebp
+               	js	0x469ec0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xb0>
+               	movl	%ecx, %ebp
@@@@
-               	jmp	0x469282 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc2>
+               	jmp	0x469ed5 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0xc5>
+               	nop
@@@@
-               	movl	24(%rax), %eax
-               	negq	%rbp
-               	imulq	%rax, %rbp
+               	movslq	%ecx, %rcx
+               	movl	24(%rax), %ebp
+               	negq	%rcx
+               	imulq	%rcx, %rbp

@@ -81174,68 +81834,69 @@
@@@[(24, 35), (44, 50)]@@@
-               	movslq	20(%rax), %rbx
-               	testq	%rbx, %rbx
-               	jns	0x4691eb <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
-               	movl	8(%rsi), %eax
-               	negq	%rbx
+               	movl	20(%rax), %eax
+               	testl	%eax, %eax
+               	jns	0x469e3b <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x2b>
+               	cltq
+               	movl	8(%rsi), %ebx
+               	negq	%rax
@@@@
-               	je	0x469361 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
-               	nopw	(%rax,%rax)
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	je	0x469fb1 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)+0x1a1>
+               	nopl	(%rax)
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>

@@ -81255,23 +81916,23 @@
@@@[(10, 13), (14, 15)]@@@
-               	jne	0x469478 <GCStateHolder::schedule()+0x68>
-               	movq	40(%rbx), %rax
+               	jne	0x46a0c8 <GCStateHolder::schedule()+0x68>
@@@@
+               	movq	40(%rbx), %rax

@@ -81280,35 +81941,38 @@
@@@[(8, 10), (11, 16), (17, 21), (31, 35)]@@@
+               	movq	%rdi, %rax
+               	movq	(%rdi), %rdi
@@@@
-               	je	0x4694a0 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
-               	movl	%esi, %eax
+               	je	0x46a0f9 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
+               	movl	8(%rax), %ecx
+               	movl	%ecx, %eax
@@@@
-               	testl	%esi, %esi
-               	jne	0x4694a0 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x20>
+               	testl	%ecx, %ecx
+               	jne	0x46a0f9 <kotlin::ThreadStateGuard::~ThreadStateGuard()+0x29>
@@@@
-               	jmp	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	nopl	(%rax)
+               	jmp	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	nopw	%cs:(%rax,%rax)

@@ -81321,54 +81985,52 @@
@@@[(3, 8), (15, 21), (60, 65)]@@@
-               	movl	$248, %eax
-               	addq	(%rdi), %rax
-               	movq	%rax, %rdi
+               	movq	(%rdi), %rdi
+               	addq	$248, %rdi
@@@@
-               	je	0x469521 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
-               	nopw	(%rax,%rax)
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	je	0x46a181 <std::_Function_handler<void (long), kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_1>::_M_invoke(std::_Any_data const&, long&&)+0x41>
+               	nopw	%cs:(%rax,%rax)
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
@@@@
-               	movq	(%rdi), %rdi
-               	jmp	0x46b190 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
-               	nopl	(%rax,%rax)
+               	jmp	0x46bec0 <kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_2::operator()() const>
+               	nopw	%cs:(%rax,%rax)

@@ -81411,96 +82073,99 @@
@@@[(6, 9), (15, 18), (19, 25), (35, 39), (43, 49), (67, 111), (113, 121), (133, 157), (159, 164)]@@@
-               	movq	%rcx, 208(%rsp)
+               	movq	%rcx, 192(%rsp)
+               	leaq	104(%rsp), %r13
@@@@
-               	jmp	0x469695 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe5>
+               	jmp	0x46a303 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf3>
+               	nopl	(%rax,%rax)
@@@@
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
-               	leaq	104(%rsp), %rdi
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	movq	%r13, %rdi
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
@@@@
-               	je	0x469609 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
-               	movq	(%rax), %r13
+               	je	0x46a269 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x59>
+               	movq	(%rax), %rbp
@@@@
-               	je	0x4696c1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x111>
-               	nopl	(%rax,%rax)
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	je	0x46a331 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x121>
+               	nopw	%cs:(%rax,%rax)
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
@@@@
-               	movups	%xmm0, 542440(%rip)     # 0x4eddd8 <(anonymous namespace)::current>
-               	movups	%xmm0, 542449(%rip)     # 0x4edde8 <(anonymous namespace)::current+0x10>
-               	movups	%xmm0, 542458(%rip)     # 0x4eddf8 <(anonymous namespace)::current+0x20>
-               	movups	%xmm0, 542467(%rip)     # 0x4ede08 <(anonymous namespace)::current+0x30>
-               	movups	%xmm0, 542476(%rip)     # 0x4ede18 <(anonymous namespace)::current+0x40>
-               	movups	%xmm0, 542485(%rip)     # 0x4ede28 <(anonymous namespace)::current+0x50>
-               	movups	%xmm0, 542494(%rip)     # 0x4ede38 <(anonymous namespace)::current+0x60>
-               	movups	%xmm0, 542503(%rip)     # 0x4ede48 <(anonymous namespace)::current+0x70>
-               	movups	%xmm0, 542512(%rip)     # 0x4ede58 <(anonymous namespace)::current+0x80>
-               	movups	%xmm0, 542521(%rip)     # 0x4ede68 <(anonymous namespace)::current+0x90>
-               	movups	%xmm0, 542530(%rip)     # 0x4ede78 <(anonymous namespace)::current+0xa0>
-               	movups	%xmm0, 542539(%rip)     # 0x4ede88 <(anonymous namespace)::current+0xb0>
-               	movups	%xmm0, 542548(%rip)     # 0x4ede98 <(anonymous namespace)::current+0xc0>
-               	movups	%xmm0, 542557(%rip)     # 0x4edea8 <(anonymous namespace)::current+0xd0>
-               	movups	%xmm0, 542566(%rip)     # 0x4edeb8 <(anonymous namespace)::current+0xe0>
-               	movups	%xmm0, 542575(%rip)     # 0x4edec8 <(anonymous namespace)::current+0xf0>
-               	movq	%r13, 542328(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	movb	$1, 542329(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
-               	movq	%rax, 542325(%rip)      # 0x4edde8 <(anonymous namespace)::current+0x10>
-               	movb	$1, 542326(%rip)        # 0x4eddf0 <(anonymous namespace)::current+0x18>
-               	movb	$0, 542293(%rip)        # 0x4eddd6 <(anonymous namespace)::lock>
+               	movups	%xmm0, 541184(%rip)     # 0x4ee560 <(anonymous namespace)::current>
+               	movups	%xmm0, 541193(%rip)     # 0x4ee570 <(anonymous namespace)::current+0x10>
+               	movups	%xmm0, 541202(%rip)     # 0x4ee580 <(anonymous namespace)::current+0x20>
+               	movups	%xmm0, 541211(%rip)     # 0x4ee590 <(anonymous namespace)::current+0x30>
+               	movups	%xmm0, 541220(%rip)     # 0x4ee5a0 <(anonymous namespace)::current+0x40>
+               	movups	%xmm0, 541229(%rip)     # 0x4ee5b0 <(anonymous namespace)::current+0x50>
+               	movups	%xmm0, 541238(%rip)     # 0x4ee5c0 <(anonymous namespace)::current+0x60>
+               	movups	%xmm0, 541247(%rip)     # 0x4ee5d0 <(anonymous namespace)::current+0x70>
+               	movups	%xmm0, 541256(%rip)     # 0x4ee5e0 <(anonymous namespace)::current+0x80>
+               	movups	%xmm0, 541265(%rip)     # 0x4ee5f0 <(anonymous namespace)::current+0x90>
+               	movups	%xmm0, 541274(%rip)     # 0x4ee600 <(anonymous namespace)::current+0xa0>
+               	movups	%xmm0, 541283(%rip)     # 0x4ee610 <(anonymous namespace)::current+0xb0>
+               	movups	%xmm0, 541292(%rip)     # 0x4ee620 <(anonymous namespace)::current+0xc0>
+               	movups	%xmm0, 541301(%rip)     # 0x4ee630 <(anonymous namespace)::current+0xd0>
+               	movups	%xmm0, 541310(%rip)     # 0x4ee640 <(anonymous namespace)::current+0xe0>
+               	movups	%xmm0, 541319(%rip)     # 0x4ee650 <(anonymous namespace)::current+0xf0>
+               	movq	%rbp, 541072(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	movb	$1, 541073(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>
+               	movq	%rax, 541069(%rip)      # 0x4ee570 <(anonymous namespace)::current+0x10>
+               	movb	$1, 541070(%rip)        # 0x4ee578 <(anonymous namespace)::current+0x18>
+               	movb	$0, 541035(%rip)        # 0x4ee55c <(anonymous namespace)::lock>
@@@@
-               	xchgb	%al, 547079(%rip)       # 0x4ef098 <(anonymous namespace)::markingRequested (.0.0)>
-               	movq	%r13, %rax
-               	xchgq	%rax, 547085(%rip)      # 0x4ef0a8 <(anonymous namespace)::markingEpoch (.0)>
-               	callq	0x467db0 <kotlin::mm::RequestThreadsSuspension()>
+               	xchgb	%al, 545823(%rip)       # 0x4ef820 <(anonymous namespace)::markingRequested (.0.0)>
+               	movq	%rbp, %rax
+               	xchgq	%rax, 545829(%rip)      # 0x4ef830 <(anonymous namespace)::markingEpoch (.0)>
+               	callq	0x468900 <kotlin::mm::RequestThreadsSuspension()>
@@@@
-               	jne	0x4697b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x200>
-               	cmpb	$0, 542232(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	je	0x4697da <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x22a>
-               	leaq	542215(%rip), %rbx      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 542208(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x4697f3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x243>
-               	cmpb	$0, 542463(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469800 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x250>
-               	leaq	542446(%rip), %rbx      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%r13, 542439(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469800 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x250>
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
+               	jne	0x46a420 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x210>
+               	cmpb	$0, 540976(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x46a44a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x23a>
+               	leaq	540959(%rip), %rbx      # 0x4ee560 <(anonymous namespace)::current>
+               	cmpq	%rbp, 540952(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46a463 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x253>
+               	cmpb	$0, 541207(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46a470 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
+               	leaq	541190(%rip), %rbx      # 0x4ee660 <(anonymous namespace)::last>
+               	cmpq	%rbp, 541183(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46a470 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x260>
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>
@@@@
-               	movb	$0, 542159(%rip)        # 0x4eddd6 <(anonymous namespace)::lock>
-               	nopw	(%rax,%rax)
+               	movq	%rbp, (%rsp)
+               	movb	$0, 540897(%rip)        # 0x4ee55c <(anonymous namespace)::lock>
+               	nopl	(%rax,%rax)

@@ -81508,281 +82173,291 @@
@@@[(64, 84), (95, 102), (103, 116), (172, 193), (194, 199), (203, 206), (225, 230), (231, 236), (244, 248), (272, 284), (312, 315), (316, 321), (339, 346), (350, 372)]@@@
-               	je	0x4698ef <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x33f>
-               	leaq	541938(%rip), %rax      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 541931(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x469908 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x358>
-               	cmpb	$0, 542186(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469913 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
-               	leaq	542169(%rip), %rax      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%r13, 542162(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469913 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x363>
+               	je	0x46a563 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x353>
+               	leaq	540682(%rip), %rax      # 0x4ee560 <(anonymous namespace)::current>
+               	movq	(%rsp), %rcx
+               	cmpq	%rcx, 540671(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46a580 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x370>
+               	cmpb	$0, 540926(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46a58b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
+               	leaq	540909(%rip), %rax      # 0x4ee660 <(anonymous namespace)::last>
+               	movq	(%rsp), %rcx
+               	cmpq	%rcx, 540898(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46a58b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x37b>
@@@@
-               	movq	216(%rsp), %rdi
-               	movq	%r13, %rsi
-               	callq	0x46aa30 <GCStateHolder::ValueWithCondVar<long>::set(long)>
+               	movq	200(%rsp), %rdi
+               	movq	(%rsp), %rbp
+               	movq	%rbp, %rsi
+               	callq	0x46b740 <GCStateHolder::ValueWithCondVar<long>::set(long)>
@@@@
-               	movq	%r13, %rsi
-               	callq	0x4687e0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
-               	movq	%r13, %rdi
-               	movq	208(%rsp), %rsi
-               	callq	0x4691c0 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax)
+               	movq	%rbp, %rsi
+               	callq	0x4693a0 <kotlin::gc::ConcurrentMarkAndSweep::CollectRootSetAndStartMarking(kotlin::gc::GCHandle)>
+               	movq	%rbp, %rdi
+               	movq	192(%rsp), %rsi
+               	callq	0x469e10 <void kotlin::gc::Mark<kotlin::gc::internal::MarkTraits>(kotlin::gc::GCHandle, kotlin::gc::internal::MarkTraits::MarkQueue&)>
+               	nop
@@@@
-               	jne	0x4699f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x440>
-               	cmpb	$0, 541656(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	leaq	542385(%rip), %r14      # 0x4ee0c0 <kotlin::mm::GlobalData::instance_+0xe8>
-               	je	0x469a21 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x471>
-               	leaq	541632(%rip), %rax      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 541625(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x469a3f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x48f>
-               	cmpb	$0, 541880(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469a60 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b0>
-               	leaq	541863(%rip), %rax      # 0x4eded8 <(anonymous namespace)::last>
+               	jne	0x46a660 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x450>
+               	cmpb	$0, 540400(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	leaq	541129(%rip), %r14      # 0x4ee848 <kotlin::mm::GlobalData::instance_+0xe8>
+               	je	0x46a695 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x485>
+               	leaq	540376(%rip), %rax      # 0x4ee560 <(anonymous namespace)::current>
+               	movq	(%rsp), %rcx
+               	cmpq	%rcx, 540365(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46a6b7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4a7>
+               	cmpb	$0, 540620(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46a6d0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c0>
+               	leaq	540603(%rip), %rax      # 0x4ee660 <(anonymous namespace)::last>
@@@@
-               	cmpq	%r13, 541851(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469a62 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b2>
+               	movq	(%rsp), %rcx
+               	cmpq	%rcx, 540587(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46a6d2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
@@@@
-               	jmp	0x469a62 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4b2>
-               	nopl	(%rax,%rax)
+               	jmp	0x46a6d2 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4c2>
@@@@
-               	jne	0x469a80 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4d0>
-               	leaq	16(%rsp), %r15
-               	movq	%r15, 24(%rsp)
+               	jne	0x46a6f0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x4e0>
+               	leaq	8(%rsp), %r15
@@@@
-               	movq	$0, 32(%rsp)
-               	movq	542224(%rip), %rbp      # 0x4ee0c0 <kotlin::mm::GlobalData::instance_+0xe8>
+               	movq	%r15, 8(%rsp)
+               	movq	$0, 24(%rsp)
+               	movq	540968(%rip), %rbp      # 0x4ee848 <kotlin::mm::GlobalData::instance_+0xe8>
@@@@
-               	addq	$-1, 542188(%rip)       # 0x4ee0b8 <kotlin::mm::GlobalData::instance_+0xe0>
+               	movq	540933(%rip), %rax      # 0x4ee840 <kotlin::mm::GlobalData::instance_+0xe0>
+               	addq	$-1, %rax
+               	movq	%rax, 540922(%rip)      # 0x4ee840 <kotlin::mm::GlobalData::instance_+0xe0>
@@@@
-               	callq	0x48219e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
-               	addq	$1, 32(%rsp)
-               	addq	$-1, 542136(%rip)       # 0x4ee0d0 <kotlin::mm::GlobalData::instance_+0xf8>
-               	jmp	0x469adc <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x52c>
+               	callq	0x48346e <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
+               	movq	24(%rsp), %rax
+               	addq	$1, %rax
+               	movq	%rax, 24(%rsp)
+               	movq	540859(%rip), %rax      # 0x4ee858 <kotlin::mm::GlobalData::instance_+0xf8>
+               	addq	$-1, %rax
+               	movq	%rax, 540848(%rip)      # 0x4ee858 <kotlin::mm::GlobalData::instance_+0xf8>
+               	jmp	0x46a756 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x546>
@@@@
-               	movq	32(%rsp), %rax
-               	movq	%r15, 24(%rsp)
+               	movq	24(%rsp), %rax
@@@@
-               	movq	$0, 32(%rsp)
-               	jmp	0x469ba0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x5f0>
+               	movq	%r15, 8(%rsp)
+               	movq	$0, 24(%rsp)
+               	jmp	0x46a830 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
@@@@
-               	je	0x469be1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x631>
-               	nopw	(%rax,%rax)
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	movq	(%rsp), %r14
+               	je	0x46a871 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x661>
+               	nop
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
@@@@
-               	jne	0x469bd0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x620>
-               	cmpb	$0, 541176(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	je	0x469bfa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x64a>
-               	leaq	541159(%rip), %rax      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 541152(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x469c13 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x663>
-               	cmpb	$0, 541407(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469c3d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
-               	leaq	541390(%rip), %rax      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%r13, 541383(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469c3d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x68d>
+               	jne	0x46a860 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x650>
+               	cmpb	$0, 539888(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x46a88a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x67a>
+               	leaq	539871(%rip), %rax      # 0x4ee560 <(anonymous namespace)::current>
+               	cmpq	%r14, 539864(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46a8a3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x693>
+               	cmpb	$0, 540119(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46a8cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>
+               	leaq	540102(%rip), %rax      # 0x4ee660 <(anonymous namespace)::last>
+               	cmpq	%r14, 540095(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46a8cd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6bd>

@@ -81807,186 +82482,197 @@
@@@[(10, 14), (21, 29), (42, 64), (131, 155), (160, 169), (175, 181), (189, 211), (214, 222), (223, 226), (231, 234), (254, 259), (262, 270), (271, 275), (278, 286), (287, 294)]@@@
-               	addq	$-1, 541570(%rip)       # 0x4ee0b8 <kotlin::mm::GlobalData::instance_+0xe0>
+               	movq	540283(%rip), %rax      # 0x4ee840 <kotlin::mm::GlobalData::instance_+0xe0>
+               	addq	$-1, %rax
+               	movq	%rax, 540272(%rip)      # 0x4ee840 <kotlin::mm::GlobalData::instance_+0xe0>
@@@@
-               	jmp	0x469c68 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6b8>
-               	nop
-               	movb	$0, 541569(%rip)        # 0x4ee0d8 <kotlin::mm::GlobalData::instance_+0x100>
-               	movq	541530(%rip), %rbx      # 0x4ee0b8 <kotlin::mm::GlobalData::instance_+0xe0>
+               	jmp	0x46a8f8 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x6e8>
+               	nopl	(%rax,%rax)
+               	movb	$0, 540265(%rip)        # 0x4ee860 <kotlin::mm::GlobalData::instance_+0x100>
+               	movq	540226(%rip), %rbx      # 0x4ee840 <kotlin::mm::GlobalData::instance_+0xe0>
@@@@
-               	jne	0x469d70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7c0>
-               	cmpb	$0, 540760(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	je	0x469d9a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x7ea>
-               	leaq	540743(%rip), %rax      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 540736(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x469db3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x803>
-               	cmpb	$0, 540991(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469ddd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
-               	leaq	540974(%rip), %rax      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%r13, 540967(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469ddd <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82d>
+               	jne	0x46aa10 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x800>
+               	cmpb	$0, 539456(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x46aa3a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x82a>
+               	leaq	539439(%rip), %rax      # 0x4ee560 <(anonymous namespace)::current>
+               	cmpq	%r14, 539432(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46aa53 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x843>
+               	cmpb	$0, 539687(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46aa7d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
+               	leaq	539670(%rip), %rax      # 0x4ee660 <(anonymous namespace)::last>
+               	cmpq	%r14, 539663(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46aa7d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x86d>
@@@@
-               	jne	0x469e80 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8d0>
-               	cmpb	$0, 540488(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	je	0x469eaa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x8fa>
-               	leaq	540471(%rip), %rbx      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 540464(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x469ec3 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x913>
-               	cmpb	$0, 540719(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469ed0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x920>
-               	leaq	540702(%rip), %rbx      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%r13, 540695(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469ed0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x920>
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
+               	jne	0x46ab20 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x910>
+               	cmpb	$0, 539184(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x46ab4a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x93a>
+               	leaq	539167(%rip), %rbx      # 0x4ee560 <(anonymous namespace)::current>
+               	cmpq	%r14, 539160(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46ab63 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x953>
+               	cmpb	$0, 539415(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46ab70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
+               	leaq	539398(%rip), %rbx      # 0x4ee660 <(anonymous namespace)::last>
+               	cmpq	%r14, 539391(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46ab70 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x960>
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>
@@@@
-               	leaq	104(%rsp), %rax
-               	movups	%xmm0, (%rax)
-               	movq	$0, 16(%rax)
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
-               	movq	541162(%rip), %rax      # 0x4ee0e0 <kotlin::mm::GlobalData::instance_+0x108>
+               	movups	%xmm0, (%r13)
+               	movq	$0, 16(%r13)
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>
+               	movq	539861(%rip), %rax      # 0x4ee868 <kotlin::mm::GlobalData::instance_+0x108>
@@@@
-               	je	0x469f21 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x971>
-               	nop
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	je	0x46abc1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9b1>
+               	nopl	(%rax,%rax)
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
@@@@
-               	cmpb	$0, 540332(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	je	0x469f46 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x996>
-               	leaq	540315(%rip), %rax      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%r13, 540308(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x469f5f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9af>
-               	cmpb	$0, 540563(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x469f7d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
-               	leaq	540546(%rip), %rax      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%r13, 540539(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x469f7d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
+               	cmpb	$0, 539028(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x46abea <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9da>
+               	leaq	539011(%rip), %rax      # 0x4ee560 <(anonymous namespace)::current>
+               	movq	(%rsp), %rcx
+               	cmpq	%rcx, 539000(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46ac07 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9f7>
+               	cmpb	$0, 539255(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46ac1e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
+               	leaq	539238(%rip), %rax      # 0x4ee660 <(anonymous namespace)::last>
+               	movq	(%rsp), %rcx
+               	cmpq	%rcx, 539227(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46ac1e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa0e>
@@@@
-               	jne	0x469f7d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x9cd>
+               	je	0x46ac40 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa30>
+               	movb	$0, 538935(%rip)        # 0x4ee55c <(anonymous namespace)::lock>
+               	movq	(%r14), %rbx
+               	testq	%rbx, %rbx
+               	jne	0x46ac5a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa4a>
+               	jmp	0x46ae00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movq	%r13, 136(%rsp)
-               	movb	$0, 540234(%rip)        # 0x4eddd6 <(anonymous namespace)::lock>
+               	movb	$0, 538894(%rip)        # 0x4ee55c <(anonymous namespace)::lock>
@@@@
-               	jmp	0x469fb7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
+               	jmp	0x46ac77 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
+               	nop
@@@@
-               	testb	$64, 88(%rax)
-               	jne	0x46a010 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa60>
+               	movl	88(%rax), %eax
+               	testb	$64, %al
+               	jne	0x46acd0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xac0>
@@@@
-               	movslq	20(%rax), %rcx
-               	testq	%rcx, %rcx
-               	js	0x46a0e6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb36>
-               	movl	%ecx, %ecx
+               	movl	20(%rax), %eax
+               	testl	%eax, %eax
+               	js	0x46adb6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba6>
+               	movl	%eax, %ecx
@@@@
-               	jmp	0x46a0f4 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb44>
-               	nopw	(%rax,%rax)
+               	jmp	0x46adc6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbb6>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movslq	20(%rax), %rcx
-               	testq	%rcx, %rcx
-               	js	0x46a02c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa7c>
-               	movl	%ecx, %ecx
+               	movl	20(%rax), %eax
+               	testl	%eax, %eax
+               	js	0x46acea <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xada>
+               	movl	%eax, %ecx
@@@@
-               	jmp	0x46a03a <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa8a>
-               	movl	24(%rbx), %eax
-               	negq	%rcx
+               	jmp	0x46acfa <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaea>
+               	cltq
+               	movl	24(%rbx), %ecx
+               	negq	%rax

@@ -81995,38 +82681,42 @@
@@@[(3, 13), (14, 17), (37, 47), (51, 60)]@@@
-               	callq	0x46b0f0 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
-               	movq	16(%rsp), %r15
-               	movq	24(%rsp), %rbx
-               	movq	$0, 16(%rsp)
-               	movq	%r15, 160(%rsp)
+               	callq	0x46be10 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)>
+               	movq	16(%rsp), %rbx
+               	movq	8(%rsp), %rax
+               	movq	$0, 8(%rsp)
+               	movq	%rax, 144(%rsp)
@@@@
-               	je	0x46a0a5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xaf5>
+               	movq	144(%rsp), %r15
+               	je	0x46ad6d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb5d>
@@@@
-               	addq	$1, 120(%rsp)
-               	leaq	160(%rsp), %rdi
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
-               	leaq	16(%rsp), %r15
+               	movq	120(%rsp), %rax
+               	addq	$1, %rax
+               	movq	%rax, 120(%rsp)
+               	leaq	144(%rsp), %rdi
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	leaq	8(%rsp), %r15
@@@@
-               	jne	0x469fb7 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa07>
-               	jmp	0x46a130 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xb80>
-               	movl	24(%rbx), %eax
-               	negq	%rcx
+               	jne	0x46ac77 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xa67>
+               	jmp	0x46ae00 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbf0>
+               	cltq
+               	movl	24(%rbx), %ecx
+               	negq	%rax

@@ -82035,422 +82725,441 @@
@@@[(14, 17), (32, 56), (62, 69), (73, 74), (75, 81), (85, 102), (110, 162), (236, 238), (251, 266), (269, 276), (277, 290), (296, 299), (300, 306), (307, 354), (358, 363), (364, 370), (387, 391), (408, 414), (420, 465), (528, 541), (542, 545), (557, 567), (611, 615)]@@@
-               	nop
-               	movq	540585(%rip), %rax      # 0x4ee0e0 <kotlin::mm::GlobalData::instance_+0x108>
+               	movq	539233(%rip), %rax      # 0x4ee868 <kotlin::mm::GlobalData::instance_+0x108>
@@@@
-               	jne	0x46a150 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xba0>
-               	cmpb	$0, 539768(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	movq	136(%rsp), %rsi
-               	je	0x46a182 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbd2>
-               	leaq	539743(%rip), %rax      # 0x4eddd8 <(anonymous namespace)::current>
-               	cmpq	%rsi, 539736(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	je	0x46a19b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xbeb>
-               	cmpb	$0, 539991(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x46a1b9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
-               	leaq	539974(%rip), %rax      # 0x4eded8 <(anonymous namespace)::last>
-               	cmpq	%rsi, 539967(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x46a1b9 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc09>
+               	jne	0x46ae20 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc10>
+               	cmpb	$0, 538416(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	movq	(%rsp), %r14
+               	je	0x46ae4e <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc3e>
+               	leaq	538395(%rip), %rax      # 0x4ee560 <(anonymous namespace)::current>
+               	cmpq	%r14, 538388(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	je	0x46ae67 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc57>
+               	cmpb	$0, 538643(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46ae85 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
+               	leaq	538626(%rip), %rax      # 0x4ee660 <(anonymous namespace)::last>
+               	cmpq	%r14, 538619(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46ae85 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc75>
@@@@
-               	movb	$0, 539670(%rip)        # 0x4eddd6 <(anonymous namespace)::lock>
-               	movq	200(%rsp), %rdi
-               	callq	0x46aa30 <GCStateHolder::ValueWithCondVar<long>::set(long)>
+               	movb	$0, 538320(%rip)        # 0x4ee55c <(anonymous namespace)::lock>
+               	movq	184(%rsp), %rdi
+               	movq	%r14, %rsi
+               	callq	0x46b740 <GCStateHolder::ValueWithCondVar<long>::set(long)>
@@@@
+               	leaq	104(%rsp), %r13
@@@@
-               	je	0x46a1f1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc41>
-               	nop
-               	callq	0x4669b0 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
+               	je	0x46aed1 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcc1>
+               	nopw	%cs:(%rax,%rax)
+               	callq	0x467500 <kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>::yield()>
@@@@
-               	jne	0x46a1e0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xc30>
-               	cmpb	$0, 539624(%rip)        # 0x4edde0 <(anonymous namespace)::current+0x8>
-               	movq	136(%rsp), %r13
-               	je	0x46a2c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd10>
-               	cmpq	%r13, 539595(%rip)      # 0x4eddd8 <(anonymous namespace)::current>
-               	jne	0x46a2c0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd10>
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
-               	movq	%rax, 539609(%rip)      # 0x4eddf8 <(anonymous namespace)::current+0x20>
-               	movb	$1, 539610(%rip)        # 0x4ede00 <(anonymous namespace)::current+0x28>
+               	jne	0x46aec0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xcb0>
+               	cmpb	$0, 538256(%rip)        # 0x4ee568 <(anonymous namespace)::current+0x8>
+               	je	0x46af90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
+               	cmpq	%r14, 538235(%rip)      # 0x4ee560 <(anonymous namespace)::current>
+               	jne	0x46af90 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd80>
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>
+               	movq	%rax, 538249(%rip)      # 0x4ee580 <(anonymous namespace)::current+0x20>
+               	movb	$1, 538250(%rip)        # 0x4ee588 <(anonymous namespace)::current+0x28>
@@@@
-               	movups	%xmm0, 539536(%rip)     # 0x4eddd8 <(anonymous namespace)::current>
-               	movups	%xmm0, 539545(%rip)     # 0x4edde8 <(anonymous namespace)::current+0x10>
-               	movups	%xmm0, 539554(%rip)     # 0x4eddf8 <(anonymous namespace)::current+0x20>
-               	movups	%xmm0, 539563(%rip)     # 0x4ede08 <(anonymous namespace)::current+0x30>
-               	movups	%xmm0, 539572(%rip)     # 0x4ede18 <(anonymous namespace)::current+0x40>
-               	movups	%xmm0, 539581(%rip)     # 0x4ede28 <(anonymous namespace)::current+0x50>
-               	movups	%xmm0, 539590(%rip)     # 0x4ede38 <(anonymous namespace)::current+0x60>
-               	movups	%xmm0, 539599(%rip)     # 0x4ede48 <(anonymous namespace)::current+0x70>
-               	movups	%xmm0, 539608(%rip)     # 0x4ede58 <(anonymous namespace)::current+0x80>
-               	movups	%xmm0, 539617(%rip)     # 0x4ede68 <(anonymous namespace)::current+0x90>
-               	movups	%xmm0, 539626(%rip)     # 0x4ede78 <(anonymous namespace)::current+0xa0>
-               	movups	%xmm0, 539635(%rip)     # 0x4ede88 <(anonymous namespace)::current+0xb0>
-               	movups	%xmm0, 539644(%rip)     # 0x4ede98 <(anonymous namespace)::current+0xc0>
-               	movups	%xmm0, 539653(%rip)     # 0x4edea8 <(anonymous namespace)::current+0xd0>
-               	movups	%xmm0, 539662(%rip)     # 0x4edeb8 <(anonymous namespace)::current+0xe0>
-               	movups	%xmm0, 539671(%rip)     # 0x4edec8 <(anonymous namespace)::current+0xf0>
-               	jmp	0x46a2e5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
-               	nopw	%cs:(%rax,%rax)
-               	cmpb	$0, 539673(%rip)        # 0x4edee0 <(anonymous namespace)::last+0x8>
-               	je	0x46a2e5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
-               	cmpq	%r13, 539656(%rip)      # 0x4eded8 <(anonymous namespace)::last>
-               	jne	0x46a2e5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xd35>
-               	callq	0x482b90 <std::chrono::_V2::steady_clock::now()>
-               	movq	%rax, 539674(%rip)      # 0x4edef8 <(anonymous namespace)::last+0x20>
-               	movb	$1, 539675(%rip)        # 0x4edf00 <(anonymous namespace)::last+0x28>
-               	movb	$0, 539370(%rip)        # 0x4eddd6 <(anonymous namespace)::lock>
+               	movups	%xmm0, 538176(%rip)     # 0x4ee560 <(anonymous namespace)::current>
+               	movups	%xmm0, 538185(%rip)     # 0x4ee570 <(anonymous namespace)::current+0x10>
+               	movups	%xmm0, 538194(%rip)     # 0x4ee580 <(anonymous namespace)::current+0x20>
+               	movups	%xmm0, 538203(%rip)     # 0x4ee590 <(anonymous namespace)::current+0x30>
+               	movups	%xmm0, 538212(%rip)     # 0x4ee5a0 <(anonymous namespace)::current+0x40>
+               	movups	%xmm0, 538221(%rip)     # 0x4ee5b0 <(anonymous namespace)::current+0x50>
+               	movups	%xmm0, 538230(%rip)     # 0x4ee5c0 <(anonymous namespace)::current+0x60>
+               	movups	%xmm0, 538239(%rip)     # 0x4ee5d0 <(anonymous namespace)::current+0x70>
+               	movups	%xmm0, 538248(%rip)     # 0x4ee5e0 <(anonymous namespace)::current+0x80>
+               	movups	%xmm0, 538257(%rip)     # 0x4ee5f0 <(anonymous namespace)::current+0x90>
+               	movups	%xmm0, 538266(%rip)     # 0x4ee600 <(anonymous namespace)::current+0xa0>
+               	movups	%xmm0, 538275(%rip)     # 0x4ee610 <(anonymous namespace)::current+0xb0>
+               	movups	%xmm0, 538284(%rip)     # 0x4ee620 <(anonymous namespace)::current+0xc0>
+               	movups	%xmm0, 538293(%rip)     # 0x4ee630 <(anonymous namespace)::current+0xd0>
+               	movups	%xmm0, 538302(%rip)     # 0x4ee640 <(anonymous namespace)::current+0xe0>
+               	movups	%xmm0, 538311(%rip)     # 0x4ee650 <(anonymous namespace)::current+0xf0>
+               	jmp	0x46afb5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
+               	nop
+               	cmpb	$0, 538321(%rip)        # 0x4ee668 <(anonymous namespace)::last+0x8>
+               	je	0x46afb5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
+               	cmpq	%r14, 538304(%rip)      # 0x4ee660 <(anonymous namespace)::last>
+               	jne	0x46afb5 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xda5>
+               	callq	0x483e60 <std::chrono::_V2::steady_clock::now()>
+               	movq	%rax, 538322(%rip)      # 0x4ee680 <(anonymous namespace)::last+0x20>
+               	movb	$1, 538323(%rip)        # 0x4ee688 <(anonymous namespace)::last+0x28>
+               	movb	$0, 538016(%rip)        # 0x4ee55c <(anonymous namespace)::lock>
@@@@
-               	movq	%rbx, 152(%rsp)
+               	movq	%rbx, %r13
@@@@
-               	movabsq	$8245936382198116210, %r13 # imm = 0x726F737365636F72
-               	movq	%r13, 14(%rax)
-               	movq	$22, 168(%rsp)
-               	movb	$1, 192(%rsp)
-               	movq	$0, 144(%rsp)
-               	movq	%rbp, 16(%rsp)
+               	movabsq	$8245936382198116210, %rcx # imm = 0x726F737365636F72
+               	movq	%rcx, 14(%rax)
+               	movq	$22, 152(%rsp)
+               	movq	144(%rsp), %rbx
+               	movb	$0, 22(%rbx)
+               	movb	$1, 176(%rsp)
+               	movq	$0, 136(%rsp)
+               	movq	%rbp, 8(%rsp)
+               	movb	$0, 48(%rsp)
@@@@
-               	movq	%rax, %rbx
-               	movq	%rax, 24(%rsp)
-               	movq	$22, 40(%rsp)
-               	movups	135657(%rip), %xmm0     # 0x48b663 <typeinfo name for kotlin::gc::GCSchedulerData+0x1012>
-               	movups	%xmm0, (%rax)
-               	movq	%r13, 14(%rax)
+               	movq	%rax, 16(%rsp)
@@@@
-               	movb	$1, 56(%rsp)
-               	leaq	1530(%rip), %r13        # 0x46aa90 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
-               	movq	%r13, 64(%rsp)
+               	movups	(%rbx), %xmm0
+               	movups	%xmm0, (%rax)
+               	movq	14(%rbx), %rcx
+               	movq	%rcx, 14(%rax)
+               	movq	$22, 24(%rsp)
+               	movq	16(%rsp), %rbx
+               	movb	$0, 22(%rbx)
+               	movb	$1, 48(%rsp)
+               	leaq	1576(%rip), %rax        # 0x46b7a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
+               	movq	%rax, 56(%rsp)
@@@@
-               	movq	%rbp, 8(%rax)
+               	movq	8(%rsp), %rcx
+               	movq	%rcx, 8(%rax)
@@@@
+               	movq	%rax, %rcx
+               	addq	$32, %rcx
+               	movq	%rcx, 16(%rax)
+               	leaq	32(%rsp), %rdx
+               	cmpq	%rdx, %rbx
+               	je	0x46b2b0 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a0>
@@@@
-               	movq	$22, 32(%rax)
-               	movq	$22, 24(%rax)
-               	leaq	40(%rsp), %rcx
-               	movq	%rcx, 24(%rsp)
-               	movq	$0, 32(%rsp)
-               	movb	$0, 40(%rsp)
-               	movb	$1, 48(%rax)
-               	movq	%r13, 56(%rax)
-               	movq	%rax, 8(%rsp)
-               	leaq	144(%rsp), %rdi
-               	leaq	8(%rsp), %rsi
-               	movq	531132(%rip), %rdx      # 0x4ebfc0 <write+0x4ebfc0>
-               	callq	0x484dbe <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
-               	movq	8(%rsp), %rdi
-               	testq	%rdi, %rdi
-               	movq	136(%rsp), %r13
-               	movq	152(%rsp), %rbx
-               	je	0x46a529 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf79>
-               	movq	(%rdi), %rax
-               	callq	*8(%rax)
-               	movq	$0, 8(%rsp)
-               	cmpb	$0, 56(%rsp)
-               	je	0x46a54d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf9d>
-               	movq	24(%rsp), %rdi
-               	leaq	40(%rsp), %rax
-               	cmpq	%rax, %rdi
-               	je	0x46a54d <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xf9d>
-               	callq	0x4137e0 <free@plt>
-               	cmpq	$0, (%rbp)
-               	jne	0x46a69f <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10ef>
-               	movq	144(%rsp), %rax
-               	movq	%rax, (%rbp)
-               	movq	$0, 144(%rsp)
-               	cmpb	$0, 192(%rsp)
-               	je	0x46a387 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
-               	movq	160(%rsp), %rdi
-               	leaq	176(%rsp), %rax
-               	cmpq	%rax, %rdi
-               	je	0x46a387 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
-               	callq	0x4137e0 <free@plt>
-               	jmp	0x46a387 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xdd7>
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax,%rax)
+               	movq	32(%rsp), %rcx
+               	movq	%rcx, 32(%rax)
+               	jmp	0x46b2b6 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x10a6>
+               	nopl	(%rax)
@@@@
-               	movq	240(%rsp), %rax
-               	addq	%rax, 32(%rbp)
+               	movq	224(%rsp), %rax
+               	addq	32(%rbp), %rax
+               	movq	%rax, 32(%rbp)
@@@@
-               	leaq	104(%rsp), %rax
-               	movups	%xmm0, 8(%rax)
-               	movq	%r13, 160(%rbp)
+               	movups	%xmm0, 8(%r13)
+               	movq	(%rsp), %rax
+               	movq	%rax, 160(%rbp)
@@@@
-               	movq	%rbp, 16(%rsp)
+               	movq	%rbp, 8(%rsp)
+               	nopw	%cs:(%rax,%rax)
+               	nop
@@@@
-               	callq	0x473980 <mi_free>
-               	jmp	0x46a620 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1070>
-               	movq	%r13, 16(%rsp)
+               	callq	0x4747c0 <mi_free>
+               	jmp	0x46b250 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1040>
+               	movq	%r14, 8(%rsp)
@@@@
-               	jmp	0x46a5ed <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x103d>
+               	jmp	0x46b211 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1001>
+               	movups	(%rdx), %xmm0
+               	movups	%xmm0, (%rcx)
+               	movq	%r13, %rbx
+               	movq	24(%rsp), %rcx
+               	movq	%rcx, 24(%rax)
+               	movq	%rdx, 16(%rsp)
+               	movq	$0, 24(%rsp)
+               	movb	$0, 32(%rsp)
+               	movb	$1, 48(%rax)
+               	leaq	1216(%rip), %rcx        # 0x46b7a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)>
+               	movq	%rcx, 56(%rax)
+               	movq	%rax, 64(%rsp)
+               	leaq	136(%rsp), %rdi
+               	leaq	64(%rsp), %rsi
+               	movq	527555(%rip), %rdx      # 0x4ebfc0 <write+0x4ebfc0>
+               	callq	0x48608e <std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())>
+               	movq	64(%rsp), %rdi
+               	testq	%rdi, %rdi
+               	je	0x46b312 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1102>
+               	movq	(%rdi), %rax
+               	callq	*8(%rax)
+               	movq	$0, 64(%rsp)
+               	cmpb	$0, 48(%rsp)
+               	leaq	104(%rsp), %r13
+               	je	0x46b33b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
+               	movq	16(%rsp), %rdi
+               	leaq	32(%rsp), %rax
+               	cmpq	%rax, %rdi
+               	je	0x46b33b <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x112b>
+               	callq	0x4137c0 <free@plt>
+               	cmpq	$0, (%rbp)
+               	jne	0x46b3ae <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x119e>
+               	movq	136(%rsp), %rax
+               	movq	%rax, (%rbp)
+               	movq	$0, 136(%rsp)
+               	cmpb	$0, 176(%rsp)
+               	je	0x46b057 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
+               	movq	144(%rsp), %rdi
+               	leaq	160(%rsp), %rax
+               	cmpq	%rax, %rdi
+               	je	0x46b057 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
+               	callq	0x4137c0 <free@plt>
+               	jmp	0x46b057 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0xe47>
@@@@
-               	movq	$0, 8(%rsp)
-               	cmpb	$0, 56(%rsp)
-               	je	0x46a744 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1194>
-               	movq	24(%rsp), %rbx
-               	leaq	40(%rsp), %rax
-               	cmpq	%rax, %rbx
-               	jne	0x46a73c <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x118c>
-               	jmp	0x46a744 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1194>
+               	movq	$0, 64(%rsp)
+               	cmpb	$0, 48(%rsp)
+               	je	0x46b453 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
+               	movq	16(%rsp), %rbx
+               	jmp	0x46b441 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1231>
@@@@
+               	leaq	32(%rsp), %rax
+               	cmpq	%rax, %rbx
+               	je	0x46b453 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1243>
@@@@
-               	je	0x46a768 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x11b8>
-               	callq	0x4137e0 <free@plt>
-               	cmpq	$0, 530504(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x46a7ff <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x124f>
-               	movq	152(%rsp), %rdi
+               	je	0x46b477 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x1267>
+               	callq	0x4137c0 <free@plt>
+               	cmpq	$0, 527161(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x46b509 <std::invoke_result<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>::type kotlin::ScopedThread::Run<kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3>(kotlin::ScopedThread::attributes, kotlin::gc::ConcurrentMarkAndSweep::ConcurrentMarkAndSweep(kotlin::mm::ObjectFactory<kotlin::gc::ConcurrentMarkAndSweep>&, kotlin::gc::GCScheduler&)::$_3&&)+0x12f9>
+               	movq	%r13, %rdi
@@@@
-               	callq	0x4669c0 <__clang_call_terminate>
-               	nopw	(%rax,%rax)
+               	callq	0x467510 <__clang_call_terminate>
+               	nopw	%cs:(%rax,%rax)

@@ -82511,37 +83220,36 @@
@@@[(3, 7), (8, 13), (18, 24), (26, 27), (32, 40), (41, 54)]@@@
-               	movq	8(%rdi), %r15
-               	movq	%r15, 8(%rsp)
+               	movq	8(%rdi), %rdi
+               	movq	%rdi, 8(%rsp)
@@@@
-               	cmpq	$0, 529937(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x46a9b5 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x35>
-               	movq	%r15, %rdi
+               	cmpq	$0, 526593(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x46b6c2 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x32>
@@@@
-               	movq	168(%rbx), %rax
-               	cmpq	104(%rbx), %rax
-               	jg	0x46a9fd <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x7d>
+               	movq	104(%rbx), %rax
+               	cmpq	%rax, 168(%rbx)
+               	jg	0x46b708 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x78>
@@@@
+               	nopl	(%rax)
@@@@
-               	callq	0x4827e0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
-               	movq	168(%rbx), %rax
-               	cmpq	104(%rbx), %rax
-               	jle	0x46a9d0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
+               	callq	0x483ab0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
+               	movq	104(%rbx), %rax
+               	cmpq	%rax, 168(%rbx)
+               	jle	0x46b6e0 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x50>
@@@@
-               	je	0x46aa19 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x99>
-               	movq	8(%rsp), %r15
-               	testq	%r15, %r15
-               	je	0x46aa19 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x99>
-               	cmpq	$0, 529838(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x46aa14 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x94>
-               	movq	%r15, %rdi
+               	je	0x46b726 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
+               	movq	8(%rsp), %rdi
+               	testq	%rdi, %rdi
+               	je	0x46b726 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x96>
+               	cmpq	$0, 526494(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x46b721 <long const& GCStateHolder::ValueWithCondVar<long>::wait<GCStateHolder::waitScheduled()::'lambda'()>(GCStateHolder::waitScheduled()::'lambda'())+0x91>

@@ -82552,8 +83260,8 @@
@@@[(3, 7)]@@@
-               	callq	0x482aca <std::__throw_system_error(int)>
-               	nop
+               	callq	0x483d9a <std::__throw_system_error(int)>
+               	nopl	(%rax)

@@ -82599,140 +83307,140 @@
@@@[(39, 41), (42, 58), (71, 79), (80, 85), (89, 107), (108, 121), (122, 128), (138, 143), (169, 175), (182, 188), (196, 201)]@@@
-               	movq	%rax, 128(%rsp)
-               	leaq	128(%r13), %rax
@@@@
-               	xorl	%eax, %eax
-               	movq	%rax, 40(%rsp)
-               	leaq	8(%rsp), %rbp
-               	movq	%r14, 112(%rsp)
-               	movq	%r15, 104(%rsp)
-               	jmp	0x46ab65 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	leaq	128(%r13), %rax
+               	movq	%rax, 112(%rsp)
+               	xorl	%ebp, %ebp
+               	leaq	8(%rsp), %rbx
+               	movq	%r14, 104(%rsp)
+               	movq	%r15, 96(%rsp)
+               	jmp	0x46b865 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>
+               	nopl	(%rax)
@@@@
-               	movq	32(%r13), %rbx
-               	movb	$1, %al
-               	testq	%rbx, %rbx
-               	jne	0x46abd8 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x148>
+               	movq	32(%r13), %rax
+               	movb	$1, %cl
+               	testq	%rax, %rax
+               	jne	0x46b8d3 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x133>
@@@@
-               	movq	40(%rsp), %rax
-               	cmpq	%rax, 160(%r13)
-               	jne	0x46abd2 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x142>
+               	cmpq	%rbp, 160(%r13)
+               	jne	0x46b8cd <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12d>
@@@@
-               	movq	%rbp, %rsi
-               	callq	0x4827e0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
-               	movq	32(%r13), %rbx
-               	testq	%rbx, %rbx
-               	je	0x46aba0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x110>
-               	jmp	0x46abd4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x144>
-               	xorl	%ebx, %ebx
-               	movb	16(%rsp), %al
-               	movq	16(%r13), %rcx
+               	movq	%rbx, %rsi
+               	callq	0x483ab0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
+               	movq	32(%r13), %rax
+               	testq	%rax, %rax
+               	je	0x46b8a0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x100>
+               	jmp	0x46b8cf <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x12f>
+               	xorl	%eax, %eax
+               	movb	16(%rsp), %cl
+               	movq	16(%r13), %rdx
@@@@
-               	movq	%rcx, 72(%rsp)
-               	movq	24(%r13), %rcx
-               	movq	160(%r13), %rdx
-               	movq	%rdx, 40(%rsp)
-               	movq	%rbx, 88(%rsp)
-               	movq	%rcx, 80(%rsp)
-               	movq	128(%rsp), %rcx
+               	movq	%rdx, 64(%rsp)
+               	movq	24(%r13), %rdx
+               	movq	160(%r13), %rbx
+               	movq	%rax, 80(%rsp)
+               	movq	%rdx, 72(%rsp)
+               	movq	120(%rsp), %rax
@@@@
-               	movups	%xmm0, (%rcx)
-               	testb	%al, %al
-               	je	0x46af11 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x481>
+               	movups	%xmm0, (%rax)
+               	testb	%cl, %cl
+               	je	0x46bc34 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x494>
@@@@
-               	testq	%rbx, %rbx
-               	je	0x46adc0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
+               	cmpq	$0, 80(%rsp)
+               	je	0x46bae0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
+               	movq	%rbx, 144(%rsp)
@@@@
-               	jne	0x46acd4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x244>
-               	jmp	0x46ad80 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
-               	nop
+               	jne	0x46b9de <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
+               	jmp	0x46ba90 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x2f0>
+               	nopl	(%rax)
@@@@
-               	callq	0x4821e4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
-               	addq	$1, 280(%r14)
+               	callq	0x4834b4 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
+               	movq	280(%r14), %rax
+               	addq	$1, %rax
+               	movq	%rax, 280(%r14)
@@@@
-               	testb	$64, 88(%rsi)
-               	je	0x46acf1 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x261>
+               	movl	88(%rsi), %eax
+               	testb	$64, %al
+               	je	0x46b9fc <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x25c>

@@ -82751,99 +83459,103 @@
@@@[(6, 10), (18, 35), (51, 54), (55, 60), (67, 69), (97, 102)]@@@
-               	addq	$-1, 256(%r14)
+               	movq	256(%r14), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 256(%r14)
@@@@
-               	jne	0x46acd4 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x244>
-               	nopl	(%rax)
-               	cmpq	$0, 136(%rsp)
-               	movq	112(%rsp), %r14
-               	movq	104(%rsp), %r15
-               	movq	144(%rsp), %rdi
-               	je	0x46adc0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x330>
-               	movl	60(%rsp), %ecx
+               	jne	0x46b9de <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x23e>
+               	nop
+               	cmpq	$0, 128(%rsp)
+               	movq	104(%rsp), %r14
+               	movq	96(%rsp), %r15
+               	movq	144(%rsp), %rbx
+               	movq	136(%rsp), %rdi
+               	je	0x46bae0 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x340>
+               	movl	52(%rsp), %ecx
@@@@
-               	movq	40(%rsp), %rax
-               	movq	%rax, 24(%rsp)
+               	movq	%rbx, 24(%rsp)
@@@@
-               	je	0x46af1b <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x48b>
-               	movq	120(%rsp), %rdi
+               	je	0x46bc3e <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0x49e>
+               	movq	%rbx, %r12
+               	movq	112(%rsp), %rdi
@@@@
-               	nopl	(%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	leaq	8(%rsp), %rbp
-               	je	0x46ab65 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xd5>
+               	leaq	8(%rsp), %rbx
+               	movq	%r12, %rbp
+               	je	0x46b865 <std::invoke_result<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>::type kotlin::ScopedThread::Run<kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0>(kotlin::ScopedThread::attributes, kotlin::gc::FinalizerProcessor::StartFinalizerThreadIfNone()::$_0&&)+0xc5>

@@ -82989,7 +83701,7 @@
@@@[(3, 5)]@@@
-               	movq	%rsi, %r13
+               	movq	%rsi, %rbx

@@ -82999,27 +83711,31 @@
@@@[(3, 5), (6, 18), (20, 30), (31, 33)]@@@
-               	movq	(%rbp), %rbx
+               	movq	(%rbp), %r13
@@@@
-               	testq	%rbx, %rbx
-               	je	0x46b14c <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
-               	movq	%rbx, %rdi
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
-               	movq	%rbx, %rdi
-               	callq	0x473980 <mi_free>
+               	testq	%r13, %r13
+               	je	0x46be6c <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x5c>
+               	movq	%r13, %rdi
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	movq	%r13, %rdi
+               	callq	0x4747c0 <mi_free>
@@@@
-               	jne	0x46b159 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x69>
-               	movq	%r12, 8(%r13)
+               	jne	0x46be75 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::ExtractUnsafe(kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node*, unsigned long)+0x65>
+               	movq	%r12, 8(%rbx)
+               	movq	16(%rbx), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 16(%rbx)
+               	movq	24(%rbx), %rax
+               	subq	%r14, %rax
+               	movq	%rax, 24(%rbx)
@@@@
-               	addq	$-1, 16(%r13)
-               	subq	%r14, 24(%r13)

@@ -83028,7 +83744,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax)
+               	nopw	(%rax,%rax)

@@ -83036,29 +83752,29 @@
@@@[(3, 5)]@@@
-               	movq	%rdi, %rbx
+               	movq	(%rdi), %rbx

@@ -83223,127 +83939,129 @@
@@@[(3, 5), (6, 10), (11, 39), (40, 44), (46, 50), (51, 60), (66, 68), (69, 70), (75, 92), (94, 113), (115, 136), (142, 147), (148, 150), (159, 169), (170, 177), (181, 220)]@@@
-               	movq	%rsi, %r12
+               	movq	%rsi, %r15
@@@@
-               	addq	$15, %r12
-               	andq	$-8, %r12
+               	addq	$15, %r15
+               	andq	$-8, %r15
@@@@
-               	movq	16(%rax), %rbp
-               	movq	40(%rbp), %rax
-               	addq	%r12, %rax
-               	movq	%rax, 40(%rbp)
-               	cmpq	48(%rbp), %rax
-               	jb	0x46b462 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x72>
-               	cmpq	$0, 24(%rbp)
-               	je	0x46b608 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x218>
-               	leaq	8(%rbp), %rdi
-               	movq	%rbp, %rsi
-               	callq	*32(%rbp)
-               	movq	$0, 40(%rbp)
-               	movq	$0, 56(%rbp)
-               	movq	(%rbp), %rax
+               	movq	16(%rax), %rbx
+               	movq	40(%rbx), %rax
+               	addq	%r15, %rax
+               	movq	%rax, 40(%rbx)
+               	cmpq	48(%rbx), %rax
+               	jb	0x46c190 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x70>
+               	cmpq	$0, 24(%rbx)
+               	je	0x46c348 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x228>
+               	leaq	8(%rbx), %rdi
+               	movq	%rbx, %rsi
+               	callq	*32(%rbx)
+               	movq	$0, 40(%rbx)
+               	movq	$0, 56(%rbx)
+               	movq	(%rbx), %rax
@@@@
-               	movq	%rax, 48(%rbp)
-               	movq	(%rbp), %rax
+               	movq	%rax, 48(%rbx)
+               	movq	(%rbx), %rax
@@@@
-               	movq	%rax, 64(%rbp)
-               	movb	539600(%rip), %al       # 0x4ef038 <kotlin::mm::internal::gSuspensionRequested>
+               	movq	%rax, 64(%rbx)
+               	movb	538154(%rip), %al       # 0x4ef7c0 <kotlin::mm::internal::gSuspensionRequested>
@@@@
-               	je	0x46b471 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x81>
-               	callq	0x467e80 <kotlin::mm::SuspendIfRequestedSlowPath()>
-               	movq	%r12, %rdi
-               	callq	0x46b680 <kotlin::allocateInObjectPool(unsigned long)>
-               	movq	%rax, %rbp
+               	je	0x46c19f <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x7f>
+               	callq	0x4689f0 <kotlin::mm::SuspendIfRequestedSlowPath()>
+               	movq	%r15, %rdi
+               	callq	0x46c3b0 <kotlin::allocateInObjectPool(unsigned long)>
@@@@
+               	movq	%rax, 24(%rsp)
+               	movb	$0, 36(%rsp)
@@@@
-               	movq	%rax, 32(%rsp)
@@@@
-               	callq	0x469410 <GCStateHolder::schedule()>
-               	movq	%rax, %rbp
-               	movq	(%rbx), %r15
-               	movq	128(%r15), %r13
-               	movq	%r13, 16(%rsp)
-               	movb	$0, 24(%rsp)
-               	cmpq	$0, 527069(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x46b4ed <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfd>
-               	movq	%r13, %rdi
+               	callq	0x46a060 <GCStateHolder::schedule()>
+               	movq	%rax, %r12
+               	movq	(%rbx), %rbp
+               	movq	128(%rbp), %rdi
+               	movq	%rdi, 8(%rsp)
+               	movb	$0, 16(%rsp)
+               	cmpq	$0, 523693(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x46c21a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0xfa>
@@@@
-               	jne	0x46b623 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x233>
-               	movb	$1, 24(%rsp)
-               	cmpq	%rbp, 120(%r15)
-               	jge	0x46b537 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x147>
-               	leaq	136(%r15), %rbx
-               	leaq	16(%rsp), %r13
-               	nopl	(%rax,%rax)
-               	cmpb	$0, 312(%r15)
-               	jne	0x46b52b <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13b>
+               	jne	0x46c363 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x243>
+               	movb	$1, 16(%rsp)
+               	cmpq	%r12, 120(%rbp)
+               	jge	0x46c261 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x141>
+               	leaq	136(%rbp), %rbx
+               	leaq	8(%rsp), %r13
+               	nopw	%cs:(%rax,%rax)
+               	nop
+               	cmpb	$0, 312(%rbp)
+               	jne	0x46c25a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x13a>
@@@@
-               	callq	0x4827e0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
-               	cmpq	%rbp, 120(%r15)
-               	jl	0x46b510 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
-               	cmpb	$0, 24(%rsp)
-               	je	0x46b553 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x163>
-               	movq	16(%rsp), %r13
-               	testq	%r13, %r13
-               	je	0x46b553 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x163>
-               	cmpq	$0, 526964(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x46b54e <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15e>
-               	movq	%r13, %rdi
+               	callq	0x483ab0 <std::condition_variable::wait(std::unique_lock<std::mutex>&)>
+               	cmpq	%r12, 120(%rbp)
+               	jl	0x46c240 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x120>
+               	cmpb	$0, 16(%rsp)
+               	je	0x46c27f <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
+               	movq	8(%rsp), %rdi
+               	testq	%rdi, %rdi
+               	je	0x46c27f <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15f>
+               	cmpq	$0, 523589(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x46c27a <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x15a>
@@@@
-               	je	0x46b584 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
-               	addq	$328, %rdi              # imm = 0x148
-               	movl	12(%rsp), %ecx
+               	je	0x46c2b4 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
+               	movl	32(%rsp), %ecx
@@@@
-               	xchgl	%eax, (%rdi)
+               	xchgl	%eax, 328(%rdi)
@@@@
-               	je	0x46b584 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	movq	%r12, %rdi
-               	callq	0x46b680 <kotlin::allocateInObjectPool(unsigned long)>
-               	movq	%rax, %rbp
+               	je	0x46c2b4 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x194>
+               	addq	$328, %rdi              # imm = 0x148
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movq	%r15, %rdi
+               	callq	0x46c3b0 <kotlin::allocateInObjectPool(unsigned long)>
@@@@
-               	je	0x46b60d <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x21d>
-               	movq	$0, (%rbp)
-               	movq	%rbp, 16(%rsp)
+               	je	0x46c34d <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x22d>
+               	movq	$0, (%rax)
+               	movq	%rax, 8(%rsp)
+               	movq	8(%rsp), %rbx
@@@@
-               	movq	$0, 16(%rsp)
-               	movq	(%rax), %rbx
-               	movq	%rbp, (%rax)
-               	testq	%rbx, %rbx
-               	je	0x46b5df <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1ef>
-               	movq	%rbx, %rdi
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
-               	movq	%rbx, %rdi
-               	callq	0x473980 <mi_free>
-               	jmp	0x46b5df <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1ef>
-               	movq	$0, 16(%rsp)
-               	movq	%rbp, 24(%r14)
-               	movq	%rbp, 32(%r14)
-               	addq	$1, 40(%r14)
-               	addq	%r12, 48(%r14)
-               	leaq	16(%rsp), %rdi
-               	callq	0x469190 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
-               	movq	%rbp, %rax
+               	movq	$0, 8(%rsp)
+               	movq	(%rax), %r12
+               	movq	%rbx, (%rax)
+               	testq	%r12, %r12
+               	je	0x46c314 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
+               	movq	%r12, %rdi
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	movq	%r12, %rdi
+               	callq	0x4747c0 <mi_free>
+               	jmp	0x46c314 <kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Producer::Insert(unsigned long)+0x1f4>
+               	movq	$0, 8(%rsp)
+               	movq	%rbx, 24(%r14)
+               	movq	%rbx, 32(%r14)
+               	movq	40(%r14), %rax
+               	addq	$1, %rax
+               	movq	%rax, 40(%r14)
+               	addq	48(%r14), %r15
+               	movq	%r15, 48(%r14)
+               	leaq	8(%rsp), %rdi
+               	callq	0x469de0 <std::unique_ptr<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node, kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Deleter<kotlin::mm::internal::ObjectFactoryStorage<8ul, kotlin::gc::AllocatorWithGC<kotlin::gc::Allocator, kotlin::gc::ConcurrentMarkAndSweep::ThreadData> >::Node> >::~unique_ptr()>
+               	movq	%rbx, %rax

@@ -83352,65 +84070,66 @@
@@@[(3, 9), (21, 26), (30, 34), (64, 70)]@@@
-               	callq	0x482be2 <std::__throw_bad_function_call()>
-               	leaq	131174(%rip), %rdi      # 0x48b67a <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
-               	movq	%r12, %rsi
+               	callq	0x483eb2 <std::__throw_bad_function_call()>
+               	leaq	132582(%rip), %rdi      # 0x48c93a <typeinfo name for kotlin::gc::GCSchedulerData+0x1029>
+               	movq	%r15, %rsi
@@@@
-               	movq	32(%rsp), %rdi
-               	movl	12(%rsp), %esi
-               	callq	0x469480 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
+               	leaq	24(%rsp), %rdi
+               	callq	0x46a0d0 <kotlin::ThreadStateGuard::~ThreadStateGuard()>
@@@@
-               	callq	0x4669c0 <__clang_call_terminate>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x467510 <__clang_call_terminate>
+               	nop
@@@@
-               	jne	0x46b6ff <kotlin::allocateInObjectPool(unsigned long)+0x7f>
-               	addl	$1, 16(%rax)
+               	jne	0x46c434 <kotlin::allocateInObjectPool(unsigned long)+0x84>
+               	movl	16(%rax), %ecx
+               	addl	$1, %ecx
+               	movl	%ecx, 16(%rax)

@@ -83420,31 +84139,33 @@
@@@[(30, 32), (34, 38)]@@@
-               	movb	96(%rdx), %cl
+               	movq	96(%rdx), %rcx
@@@@
-               	orb	$2, 126(%rdx,%rax)
+               	movb	126(%rdx,%rax), %cl
+               	orb	$2, %cl
+               	movb	%cl, 126(%rdx,%rax)

@@ -83456,214 +84177,214 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)

@@ -83766,71 +84487,55 @@
@@@[(3, 14), (15, 24), (25, 71)]@@@
-               	jne	0x46bd76 <_mi_random_init+0xe6>
-               	movb	(%rsp), %r8b
-               	movb	1(%rsp), %r15b
-               	movb	2(%rsp), %dil
-               	movb	3(%rsp), %al
-               	movl	%eax, 44(%rsp)
+               	jne	0x46ca67 <_mi_random_init+0xa7>
+               	movb	(%rsp), %al
+               	movb	1(%rsp), %r11b
+               	movb	2(%rsp), %r10b
+               	movb	3(%rsp), %r9b
@@@@
-               	movb	5(%rsp), %al
-               	movl	%eax, 52(%rsp)
-               	movb	6(%rsp), %al
-               	movl	%eax, 48(%rsp)
-               	movb	7(%rsp), %al
-               	movl	%eax, 64(%rsp)
+               	movb	5(%rsp), %bpl
+               	movb	6(%rsp), %r8b
+               	movb	7(%rsp), %bl
@@@@
-               	movb	9(%rsp), %al
-               	movl	%eax, 76(%rsp)
-               	movb	10(%rsp), %al
-               	movl	%eax, 92(%rsp)
-               	movb	11(%rsp), %al
-               	movl	%eax, 100(%rsp)
-               	movb	12(%rsp), %sil
-               	movb	13(%rsp), %al
-               	movl	%eax, 60(%rsp)
-               	movb	14(%rsp), %al
-               	movl	%eax, 80(%rsp)
-               	movb	15(%rsp), %al
-               	movl	%eax, 96(%rsp)
-               	movb	16(%rsp), %r10b
-               	movb	17(%rsp), %r13b
-               	movb	18(%rsp), %al
-               	movl	%eax, 56(%rsp)
-               	movb	19(%rsp), %al
-               	movl	%eax, 88(%rsp)
-               	movb	20(%rsp), %r11b
-               	movb	21(%rsp), %bpl
-               	movb	22(%rsp), %r12b
-               	movb	23(%rsp), %al
-               	movl	%eax, 68(%rsp)
-               	movb	24(%rsp), %r9b
-               	movb	25(%rsp), %al
-               	movl	%eax, 72(%rsp)
-               	movb	26(%rsp), %al
-               	jmp	0x46c0b7 <_mi_random_init+0x427>
+               	movb	9(%rsp), %sil
+               	movl	%esi, 36(%rsp)
+               	movb	10(%rsp), %sil
+               	movl	%esi, 48(%rsp)
+               	movb	11(%rsp), %sil
+               	movl	%esi, 52(%rsp)
+               	movb	12(%rsp), %r12b
+               	movb	13(%rsp), %sil
+               	movl	%esi, 32(%rsp)
+               	movb	14(%rsp), %sil
+               	movl	%esi, 40(%rsp)
+               	movb	15(%rsp), %sil
+               	movl	%esi, 44(%rsp)
+               	movb	16(%rsp), %r13b
+               	movb	17(%rsp), %r15b
+               	movb	18(%rsp), %dil
+               	jmp	0x46cd64 <_mi_random_init+0x3a4>

@@ -83891,261 +84596,249 @@
@@@[(3, 13), (17, 18), (19, 28), (29, 31), (32, 54), (55, 57), (58, 80), (81, 83), (84, 106), (107, 109), (110, 127), (128, 139), (140, 142), (143, 176), (177, 179), (180, 220), (221, 223), (224, 295), (296, 309), (310, 312), (313, 315), (317, 331), (334, 336), (340, 361), (362, 385), (387, 393), (397, 398), (400, 401), (402, 406), (407, 423), (429, 442)]@@@
-               	movq	%rcx, %r8
-               	shrq	$31, %r8
-               	xorq	%rcx, %r8
-               	movq	%r8, %rax
-               	cmoveq	%rbp, %rax
-               	movl	%r8d, (%rsp)
-               	movq	%rax, %rcx
-               	shrq	$30, %rcx
-               	xorq	%rax, %rcx
-               	imulq	%rbx, %rcx
@@@@
-               	imulq	%r15, %rax
@@@@
-               	shrq	$31, %rcx
-               	xorq	%rax, %rcx
-               	movl	%ecx, 4(%rsp)
-               	movq	%rcx, %rax
-               	cmoveq	%rbp, %rax
-               	movq	%rax, %rdx
+               	cmoveq	%rbp, %rcx
+               	movl	%eax, (%rsp)
+               	movq	%rcx, %rdx
@@@@
-               	xorq	%rax, %rdx
+               	xorq	%rcx, %rdx
@@@@
-               	movq	%rdx, %rax
-               	shrq	$27, %rax
-               	xorq	%rdx, %rax
-               	imulq	%r15, %rax
-               	movq	%rax, %rdx
-               	shrq	$31, %rdx
-               	xorq	%rax, %rdx
-               	movl	%edx, 8(%rsp)
-               	movq	%rdx, %rax
-               	cmoveq	%rbp, %rax
-               	movq	%rax, %rsi
+               	movq	%rdx, %rsi
+               	shrq	$27, %rsi
+               	xorq	%rdx, %rsi
+               	imulq	%r15, %rsi
+               	movq	%rsi, %rcx
+               	shrq	$31, %rcx
+               	xorq	%rsi, %rcx
+               	movl	%ecx, 4(%rsp)
+               	movq	%rcx, %rdx
+               	cmoveq	%rbp, %rdx
+               	movq	%rdx, %rsi
@@@@
-               	xorq	%rax, %rsi
+               	xorq	%rdx, %rsi
@@@@
-               	movq	%rsi, %rax
-               	shrq	$27, %rax
-               	xorq	%rsi, %rax
-               	imulq	%r15, %rax
-               	movq	%rax, %rsi
-               	shrq	$31, %rsi
-               	xorq	%rax, %rsi
-               	movl	%esi, 12(%rsp)
-               	movq	%rsi, %rax
-               	cmoveq	%rbp, %rax
-               	movq	%rax, %rdi
+               	movq	%rsi, %rdi
+               	shrq	$27, %rdi
+               	xorq	%rsi, %rdi
+               	imulq	%r15, %rdi
+               	movq	%rdi, %rdx
+               	shrq	$31, %rdx
+               	xorq	%rdi, %rdx
+               	movl	%edx, 8(%rsp)
+               	movq	%rdx, %rsi
+               	cmoveq	%rbp, %rsi
+               	movq	%rsi, %rdi
@@@@
-               	xorq	%rax, %rdi
+               	xorq	%rsi, %rdi
@@@@
-               	movq	%rdi, %rax
-               	shrq	$27, %rax
-               	xorq	%rdi, %rax
-               	imulq	%r15, %rax
-               	movq	%rax, %r10
-               	shrq	$31, %r10
-               	xorq	%rax, %r10
-               	movq	%r10, %rax
-               	cmoveq	%rbp, %rax
-               	movl	%r10d, 16(%rsp)
-               	movq	%rax, %rdi
+               	movq	%rdi, %rsi
+               	shrq	$27, %rsi
+               	xorq	%rdi, %rsi
+               	imulq	%r15, %rsi
+               	movq	%rsi, %r12
+               	shrq	$31, %r12
+               	xorq	%rsi, %r12
+               	movl	%r12d, 12(%rsp)
+               	movq	%r12, %rsi
+               	cmoveq	%rbp, %rsi
+               	movq	%rsi, %rdi
@@@@
-               	xorq	%rax, %rdi
+               	xorq	%rsi, %rdi
@@@@
-               	movq	%rdi, %rax
-               	shrq	$27, %rax
-               	xorq	%rdi, %rax
-               	imulq	%r15, %rax
-               	movq	%rax, %r11
-               	shrq	$31, %r11
-               	xorq	%rax, %r11
-               	movl	%r11d, 20(%rsp)
-               	movq	%r11, %rdi
+               	movq	%rdi, %rsi
+               	shrq	$27, %rsi
+               	xorq	%rdi, %rsi
+               	imulq	%r15, %rsi
+               	movq	%rsi, %r13
+               	shrq	$31, %r13
+               	xorq	%rsi, %r13
+               	movq	%r13, %rdi
@@@@
-               	movq	%rdi, %rax
-               	shrq	$30, %rax
-               	xorq	%rdi, %rax
-               	imulq	%rbx, %rax
-               	movq	%rax, %rdi
+               	movl	%r13d, 16(%rsp)
+               	movq	%rdi, %rsi
+               	shrq	$30, %rsi
+               	xorq	%rdi, %rsi
+               	imulq	%rbx, %rsi
+               	movq	%rsi, %rdi
@@@@
-               	xorq	%rax, %rdi
+               	xorq	%rsi, %rdi
@@@@
-               	movq	%rdi, %r9
-               	shrq	$31, %r9
-               	xorq	%rdi, %r9
-               	movl	%r9d, 24(%rsp)
-               	cmovneq	%r9, %rbp
-               	movq	%rbp, %rax
-               	shrq	$30, %rax
-               	xorq	%rbp, %rax
-               	imulq	%rbx, %rax
-               	movq	%rax, %rdi
+               	movq	%rdi, %rsi
+               	shrq	$31, %rsi
+               	xorq	%rdi, %rsi
+               	movl	%esi, 20(%rsp)
+               	cmoveq	%rbp, %rsi
+               	movq	%rsi, %rdi
+               	shrq	$30, %rdi
+               	xorq	%rsi, %rdi
+               	imulq	%rbx, %rdi
+               	movq	%rdi, %rsi
+               	shrq	$27, %rsi
+               	xorq	%rdi, %rsi
+               	imulq	%r15, %rsi
+               	movq	%rsi, %rdi
+               	shrq	$31, %rdi
+               	xorq	%rsi, %rdi
+               	movl	%edi, 24(%rsp)
+               	cmoveq	%rbp, %rdi
+               	movq	%rdi, %rsi
+               	shrq	$30, %rsi
+               	xorq	%rdi, %rsi
+               	imulq	%rbx, %rsi
+               	movq	%rsi, %rdi
@@@@
-               	xorq	%rax, %rdi
+               	xorq	%rsi, %rdi
@@@@
-               	movq	%rdi, %rax
-               	shrq	$31, %rax
-               	xorl	%edi, %eax
-               	movl	%eax, 28(%rsp)
-               	movl	%r8d, %r15d
+               	movq	%rdi, %rsi
+               	shrq	$31, %rsi
+               	xorl	%edi, %esi
+               	movl	%esi, 28(%rsp)
+               	movl	%eax, %r11d
+               	shrl	$8, %r11d
+               	movl	%eax, %r10d
+               	shrl	$16, %r10d
+               	movl	%eax, %r9d
+               	shrl	$24, %r9d
+               	movl	%ecx, %ebp
+               	shrl	$8, %ebp
+               	movl	%ecx, %r8d
+               	shrl	$16, %r8d
+               	movl	%ecx, %ebx
+               	shrl	$24, %ebx
+               	movl	%edx, %esi
+               	shrl	$8, %esi
+               	movl	%esi, 36(%rsp)
+               	movl	%edx, %esi
+               	shrl	$16, %esi
+               	movl	%esi, 48(%rsp)
+               	movl	%edx, %esi
+               	shrl	$24, %esi
+               	movl	%esi, 52(%rsp)
+               	movl	%r12d, %esi
+               	shrl	$8, %esi
+               	movl	%esi, 32(%rsp)
+               	movl	%r12d, %esi
+               	shrl	$16, %esi
+               	movl	%esi, 40(%rsp)
+               	movl	%r12d, %esi
+               	shrl	$24, %esi
+               	movl	%esi, 44(%rsp)
+               	movl	%r13d, %r15d
@@@@
-               	movl	%r8d, %edi
+               	movl	%r13d, %edi
@@@@
-               	movl	%r8d, %eax
-               	shrl	$24, %eax
-               	movl	%eax, 44(%rsp)
-               	movl	%ecx, %eax
-               	shrl	$8, %eax
-               	movl	%eax, 52(%rsp)
-               	movl	%ecx, %eax
-               	shrl	$16, %eax
-               	movl	%eax, 48(%rsp)
-               	movl	%ecx, %eax
-               	shrl	$24, %eax
-               	movl	%eax, 64(%rsp)
-               	movl	%edx, %eax
-               	shrl	$8, %eax
-               	movl	%eax, 76(%rsp)
-               	movl	%edx, %eax
-               	shrl	$16, %eax
-               	movl	%eax, 92(%rsp)
-               	movl	%edx, %eax
-               	shrl	$24, %eax
-               	movl	%eax, 100(%rsp)
-               	movl	%esi, %eax
-               	shrl	$8, %eax
-               	movl	%eax, 60(%rsp)
-               	movl	%esi, %eax
-               	shrl	$16, %eax
-               	movl	%eax, 80(%rsp)
-               	movl	%esi, %eax
-               	shrl	$24, %eax
-               	movl	%eax, 96(%rsp)
-               	movl	%r10d, %r13d
-               	shrl	$8, %r13d
-               	movl	%r10d, %eax
-               	shrl	$16, %eax
-               	movl	%eax, 56(%rsp)
-               	movl	%r10d, %eax
-               	shrl	$24, %eax
-               	movl	%eax, 88(%rsp)
-               	movl	%r11d, %ebp
-               	shrl	$8, %ebp
-               	movl	%r11d, %r12d
-               	shrl	$16, %r12d
-               	movl	%r11d, %eax
-               	shrl	$24, %eax
-               	movl	%eax, 68(%rsp)
-               	movl	%r9d, %eax
-               	shrl	$8, %eax
-               	movl	%eax, 72(%rsp)
-               	movl	%r9d, %eax
-               	shrl	$16, %eax
-               	movl	%eax, 84(%rsp)
-               	movzbl	%r8b, %ebx
-               	movzbl	%r15b, %eax
-               	shll	$8, %eax
-               	orl	%ebx, %eax
-               	movzbl	%dil, %edi
-               	shll	$16, %edi
-               	orl	%eax, %edi
-               	movzbl	44(%rsp), %eax
-               	shll	$24, %eax
-               	orl	%edi, %eax
+               	movzbl	%al, %eax
+               	movzbl	%r11b, %esi
+               	shll	$8, %esi
+               	orl	%eax, %esi
+               	movzbl	%r10b, %eax
+               	shll	$16, %eax
+               	orl	%esi, %eax
+               	movzbl	%r9b, %esi
+               	shll	$24, %esi
+               	orl	%eax, %esi
@@@@
-               	movdqu	%xmm0, 116(%r14)
-               	movdqu	%xmm0, 104(%r14)
-               	movdqu	%xmm0, 88(%r14)
-               	movdqu	%xmm0, 72(%r14)
-               	movdqu	%xmm0, 56(%r14)
-               	movaps	117580(%rip), %xmm1     # 0x488c50 <_IO_stdin_used+0x250>
+               	movdqu	%xmm0, 108(%r14)
+               	movdqu	%xmm0, 92(%r14)
+               	movdqu	%xmm0, 76(%r14)
+               	movdqu	%xmm0, 60(%r14)
+               	movdqu	%xmm0, 44(%r14)
+               	movq	$0, 124(%r14)
+               	movaps	119117(%rip), %xmm1     # 0x489f00 <_IO_stdin_used+0x200>
@@@@
-               	movl	%eax, 16(%r14)
+               	movl	%esi, 16(%r14)
@@@@
-               	movzbl	52(%rsp), %ecx
+               	movzbl	%bpl, %ecx
@@@@
-               	movzbl	48(%rsp), %edi
-               	shll	$16, %edi
-               	orl	%ecx, %edi
-               	movzbl	%r10b, %eax
-               	movzbl	%r11b, %ecx
+               	movzbl	%r8b, %eax
+               	shll	$16, %eax
+               	orl	%ecx, %eax
+               	movzbl	%bl, %ecx
+               	shll	$24, %ecx
+               	orl	%eax, %ecx
+               	movl	%ecx, 20(%r14)
+               	movzbl	%r13b, %eax
+               	movzbl	20(%rsp), %ecx
@@@@
-               	movzbl	%sil, %edx
+               	movzbl	%r12b, %edx
@@@@
-               	movzbl	64(%rsp), %eax
-               	shll	$24, %eax
-               	orl	%edi, %eax
-               	movzbl	%r13b, %ecx
-               	movzbl	%bpl, %edx
-               	shll	$8, %edx
-               	orl	%ecx, %edx
-               	movzbl	76(%rsp), %ecx
-               	movzbl	60(%rsp), %esi
-               	shll	$8, %esi
-               	orl	%ecx, %esi
-               	movd	%esi, %xmm2
-               	pinsrw	$1, %edx, %xmm2
-               	movzbl	56(%rsp), %ecx
-               	movzbl	%r12b, %edx
+               	movzbl	%r15b, %eax
+               	movzbl	21(%rsp), %ecx
+               	shll	$8, %ecx
+               	orl	%eax, %ecx
+               	movzbl	36(%rsp), %eax
+               	movzbl	32(%rsp), %edx
@@@@
-               	orl	%ecx, %edx
-               	movzbl	92(%rsp), %ecx
-               	movzbl	80(%rsp), %esi
-               	shll	$8, %esi
-               	orl	%ecx, %esi
-               	movd	%esi, %xmm3
-               	pinsrw	$1, %edx, %xmm3
-               	movzbl	100(%rsp), %ecx
-               	movd	%ecx, %xmm4
-               	movzbl	96(%rsp), %ecx
-               	pinsrw	$2, %ecx, %xmm4
-               	movl	%eax, 20(%r14)
-               	movzbl	88(%rsp), %eax
-               	pinsrw	$4, %eax, %xmm4
-               	movzbl	68(%rsp), %eax
-               	pinsrw	$6, %eax, %xmm4
-               	movzbl	%r9b, %eax
-               	movzbl	72(%rsp), %ecx
+               	orl	%eax, %edx
+               	movd	%edx, %xmm2
+               	pinsrw	$1, %ecx, %xmm2
+               	movzbl	%dil, %eax
+               	movzbl	22(%rsp), %ecx
@@@@
+               	movzbl	48(%rsp), %eax
+               	movzbl	40(%rsp), %edx
+               	shll	$8, %edx
+               	orl	%eax, %edx
+               	movd	%edx, %xmm3
+               	pinsrw	$1, %ecx, %xmm3
@@@@
+               	pslld	$8, %xmm2
@@@@
-               	pslld	$8, %xmm2
@@@@
+               	movzbl	44(%rsp), %eax
+               	movzbl	52(%rsp), %ecx
+               	movd	%ecx, %xmm1
+               	pinsrw	$2, %eax, %xmm1
@@@@
-               	pslld	$24, %xmm4
-               	por	%xmm0, %xmm4
-               	movdqu	%xmm4, 24(%r14)
-               	movzbl	84(%rsp), %eax
+               	movzbl	19(%rsp), %eax
+               	pinsrw	$4, %eax, %xmm1
+               	movzbl	23(%rsp), %eax
+               	pinsrw	$6, %eax, %xmm1
+               	pslld	$24, %xmm1
+               	por	%xmm0, %xmm1
+               	movdqu	%xmm1, 24(%r14)
+               	movzbl	24(%rsp), %eax
+               	movzbl	25(%rsp), %ecx
+               	shll	$8, %ecx
+               	orl	%eax, %ecx
+               	movzbl	26(%rsp), %eax
@@@@
-               	movl	28(%rsp), %eax
-               	movl	%eax, 44(%r14)
+               	movzbl	28(%rsp), %eax
+               	movzbl	29(%rsp), %ecx
+               	shll	$8, %ecx
+               	orl	%eax, %ecx
+               	movzbl	30(%rsp), %eax
+               	shll	$16, %eax
+               	orl	%ecx, %eax
+               	movzbl	31(%rsp), %ecx
+               	shll	$24, %ecx
+               	orl	%eax, %ecx
+               	movl	%ecx, 44(%r14)

@@ -84153,7 +84846,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax)
+               	nopw	(%rax,%rax)

@@ -84180,25 +84873,27 @@
@@@[(14, 15), (16, 21), (27, 29)]@@@
-               	orq	%r15, %rax
@@@@
-               	addl	$-1, 3008(%rbx)
+               	movl	3008(%rbx), %ecx
+               	addl	$-1, %ecx
+               	movl	%ecx, 3008(%rbx)
+               	orq	%r15, %rax
@@@@
-               	nop
+               	nopw	(%rax,%rax)

@@ -84208,42 +84903,42 @@
@@@[(3, 13), (33, 39)]@@@
-               	cmpb	$1, 535964(%rip)        # 0x4ef0b4 <_mi_process_is_initialized>
-               	jne	0x46ca1b <mi_process_done+0x71b>
-               	cmpb	$0, 635955(%rip)        # 0x507758 <mi_process_done.process_done>
-               	jne	0x46ca1b <mi_process_done+0x71b>
-               	movb	$1, 635942(%rip)        # 0x507758 <mi_process_done.process_done>
+               	cmpb	$0, 534596(%rip)        # 0x4ef83c <_mi_process_is_initialized>
+               	je	0x46d700 <mi_process_done+0x720>
+               	cmpb	$0, 634579(%rip)        # 0x507ed8 <mi_process_done.process_done>
+               	jne	0x46d700 <mi_process_done+0x720>
+               	movb	$1, 634566(%rip)        # 0x507ed8 <mi_process_done.process_done>
@@@@
-               	movl	$176, %edi
-               	addq	(%rax), %rdi
-               	callq	0x46f710 <mi_stats_merge_from>
+               	movq	(%rax), %rdi
+               	addq	$176, %rdi
+               	callq	0x470430 <mi_stats_merge_from>

@@ -84350,63 +85045,64 @@
@@@[(32, 37), (49, 50), (52, 55), (60, 61), (62, 67), (72, 74)]@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	72(%rsp)
+               	movq	72(%rsp), %rax
+               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
+               	imulq	%rdx
@@@@
+               	movq	72(%rsp), %rax
@@@@
-               	movq	%r14, %rax
-               	imulq	72(%rsp)
+               	imulq	%r14
@@@@
-               	imulq	$1000, 80(%rsp), %rsi   # imm = 0x3E8
@@@@
-               	movq	%r14, %rax
-               	imulq	88(%rsp)
+               	movq	88(%rsp), %rax
+               	imulq	$1000, 80(%rsp), %rcx   # imm = 0x3E8
+               	imulq	%r14
@@@@
-               	addq	%rsi, %rbx
+               	addq	%rcx, %rbx

@@ -84616,10 +85312,10 @@
@@@[(6, 10)]@@@
-               	jmp	0x46c5fb <mi_process_done+0x2fb>
-               	nopw	(%rax,%rax)
+               	jmp	0x46d2dd <mi_process_done+0x2fd>
+               	nop

@@ -84629,78 +85325,87 @@
@@@[(3, 27), (88, 104), (126, 131)]@@@
-               	cmpb	$0, 534111(%rip)        # 0x4ef0b4 <_mi_process_is_initialized>
-               	jne	0x46d80c <mi_process_init+0xdcc>
-               	movb	$1, 534098(%rip)        # 0x4ef0b4 <_mi_process_is_initialized>
-               	cmpb	$0, 534680(%rip)        # 0x4ef301 <mi_process_setup_auto_thread_done.tls_initialized>
-               	jne	0x46caae <mi_process_init+0x6e>
-               	movb	$1, 534671(%rip)        # 0x4ef301 <mi_process_setup_auto_thread_done.tls_initialized>
-               	leaq	528191(%rip), %rdi      # 0x4ed9b8 <_mi_heap_default_key>
-               	leaq	3504(%rip), %rsi        # 0x46d830 <mi_pthread_done>
+               	cmpb	$0, 532743(%rip)        # 0x4ef83c <_mi_process_is_initialized>
+               	je	0x46d746 <mi_process_init+0x26>
+               	addq	$104, %rsp
+               	popq	%rbx
+               	popq	%r12
+               	popq	%r13
+               	popq	%r14
+               	popq	%r15
+               	popq	%rbp
+               	retq
+               	movb	$1, 532719(%rip)        # 0x4ef83c <_mi_process_is_initialized>
+               	cmpb	$0, 533293(%rip)        # 0x4efa81 <mi_process_setup_auto_thread_done.tls_initialized>
+               	jne	0x46d799 <mi_process_init+0x79>
+               	movb	$1, 533284(%rip)        # 0x4efa81 <mi_process_setup_auto_thread_done.tls_initialized>
+               	leaq	526780(%rip), %rdi      # 0x4ee120 <_mi_heap_default_key>
+               	leaq	3525(%rip), %rsi        # 0x46e530 <mi_pthread_done>
@@@@
-               	callq	0x46de30 <_mi_verbose_message>
-               	callq	0x46df50 <mi_thread_init>
-               	callq	0x46df50 <mi_thread_init>
-               	movq	$-80, %r15
-               	movq	%fs:(%r15), %rax
-               	movl	$176, %edi
-               	addq	(%rax), %rdi
-               	leaq	533836(%rip), %rax      # 0x4ef0c0 <_mi_stats_main>
+               	callq	0x46eb50 <_mi_verbose_message>
+               	callq	0x46ec70 <mi_thread_init>
+               	callq	0x46ec70 <mi_thread_init>
+               	movq	$-80, %r14
+               	movq	%fs:(%r14), %rax
+               	movq	(%rax), %rdi
+               	addq	$176, %rdi
+               	leaq	532447(%rip), %rax      # 0x4ef840 <_mi_stats_main>
@@@@
-               	movabsq	$-4835703278458516699, %rax # imm = 0xBCE4217D2849CB25
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
+               	imulq	%rcx

@@ -84710,8 +85415,9 @@
@@@[(3, 8)]@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
+               	imulq	%rcx

@@ -84721,31 +85427,32 @@
@@@[(9, 14)]@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
+               	imulq	%rdx

@@ -84790,61 +85497,61 @@
@@@[(3, 6), (43, 45), (50, 54), (55, 75), (76, 80), (81, 86)]@@@
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax)
+               	nopl	(%rax,%rax)
@@@@
-               	leaq	(%r14,%rbp), %rcx
+               	leaq	(%r15,%rbp), %rcx
@@@@
-               	je	0x46cdf0 <mi_process_init+0x3b0>
-               	movq	%rbx, %r14
+               	je	0x46dae0 <mi_process_init+0x3c0>
+               	movq	%rbx, %r15
@@@@
-               	jne	0x46cdb0 <mi_process_init+0x370>
-               	movq	%fs:(%r15), %rdi
-               	callq	0x46c250 <_mi_heap_random_next>
-               	movq	%rax, %r14
-               	andl	$536739840, %r14d       # imm = 0x1FFE0000
-               	shlq	$13, %r14
-               	orq	%r13, %r14
-               	jmp	0x46cdb0 <mi_process_init+0x370>
-               	cmpq	$0, 567312(%rip)        # 0x4f7608 <mi_clock_diff>
-               	jne	0x46ce71 <mi_process_init+0x431>
+               	jne	0x46daa0 <mi_process_init+0x380>
+               	movq	%fs:(%r14), %rdi
+               	callq	0x46cf20 <_mi_heap_random_next>
+               	movq	%rax, %r15
+               	andl	$536739840, %r15d       # imm = 0x1FFE0000
+               	shlq	$13, %r15
+               	orq	%r13, %r15
+               	jmp	0x46daa0 <mi_process_init+0x380>
+               	cmpq	$0, 565920(%rip)        # 0x4f7d88 <mi_clock_diff>
+               	jne	0x46db67 <mi_process_init+0x447>
@@@@
-               	leaq	8(%rsp), %r15
-               	movq	%r15, %rsi
+               	leaq	8(%rsp), %r14
+               	movq	%r14, %rsi
@@@@
-               	movabsq	$-4835703278458516699, %rax # imm = 0xBCE4217D2849CB25
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$-4835703278458516699, %rcx # imm = 0xBCE4217D2849CB25
+               	imulq	%rcx

@@ -84852,26 +85559,28 @@
@@@[(3, 5), (6, 19), (20, 22), (23, 25), (32, 37)]@@@
-               	movq	%r15, %rsi
+               	movq	%r14, %rsi
@@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	16(%rsp)
-               	movq	8(%rsp), %rax
-               	subq	%rbp, %rax
-               	movq	%rdx, %rcx
-               	shrq	$63, %rcx
+               	movq	8(%rsp), %rcx
+               	movq	16(%rsp), %rax
+               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
+               	imulq	%rdx
+               	subq	%rbp, %rcx
+               	movq	%rdx, %rax
+               	shrq	$63, %rax
@@@@
-               	addq	%rcx, %rdx
+               	addq	%rax, %rdx
@@@@
-               	imulq	$1000, %rax, %rax       # imm = 0x3E8
+               	imulq	$1000, %rcx, %rax       # imm = 0x3E8
@@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
+               	imulq	%rdx

@@ -84893,20 +85602,20 @@
@@@[(7, 19), (23, 25)]@@@
-               	je	0x46d3b0 <mi_process_init+0x970>
-               	movq	%r13, %r15
-               	shlq	$30, %r15
-               	addq	%r14, %r15
-               	movq	566980(%rip), %rax      # 0x4f75c8 <mi_unix_mmap.large_page_try_ok>
-               	cmpb	$0, 566981(%rip)        # 0x4f75d0 <mi_unix_mmap.mi_huge_pages_available>
+               	je	0x46e0c0 <mi_process_init+0x9a0>
+               	movq	%r13, %r14
+               	shlq	$30, %r14
+               	addq	%r15, %r14
+               	movq	565579(%rip), %rax      # 0x4f7d48 <mi_unix_mmap.large_page_try_ok>
+               	cmpb	$0, 565580(%rip)        # 0x4f7d50 <mi_unix_mmap.mi_huge_pages_available>
@@@@
-               	movq	%r15, %rdi
+               	movq	%r14, %rdi

@@ -84914,15 +85623,15 @@
@@@[(15, 17)]@@@
-               	movq	%r15, %rdi
+               	movq	%r14, %rdi

@@ -84945,74 +85654,75 @@
@@@[(13, 19), (24, 28), (70, 75)]@@@
-               	callq	0x46f1b0 <_mi_warning_message>
-               	cmpq	%r15, %rbx
-               	jne	0x46d2c0 <mi_process_init+0x880>
+               	callq	0x46fed0 <_mi_warning_message>
+               	cmpq	%r14, %rbx
+               	jne	0x46dfd0 <mi_process_init+0x8b0>
@@@@
-               	movq	532769(%rip), %rax      # 0x4ef130 <_mi_stats_main+0x70>
-               	nop
+               	movq	531368(%rip), %rax      # 0x4ef8b0 <_mi_stats_main+0x70>
+               	nopl	(%rax,%rax)
@@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
+               	imulq	%rcx

@@ -85020,20 +85730,20 @@
@@@[(7, 19), (23, 25)]@@@
-               	je	0x46d3b0 <mi_process_init+0x970>
-               	movq	%r13, %r15
-               	shlq	$30, %r15
-               	addq	%r14, %r15
-               	movq	566440(%rip), %rax      # 0x4f75c8 <mi_unix_mmap.large_page_try_ok>
-               	cmpb	$0, 566441(%rip)        # 0x4f75d0 <mi_unix_mmap.mi_huge_pages_available>
+               	je	0x46e0c0 <mi_process_init+0x9a0>
+               	movq	%r13, %r14
+               	shlq	$30, %r14
+               	addq	%r15, %r14
+               	movq	565029(%rip), %rax      # 0x4f7d48 <mi_unix_mmap.large_page_try_ok>
+               	cmpb	$0, 565030(%rip)        # 0x4f7d50 <mi_unix_mmap.mi_huge_pages_available>
@@@@
-               	movq	%r15, %rdi
+               	movq	%r14, %rdi

@@ -85041,15 +85751,15 @@
@@@[(15, 17)]@@@
-               	movq	%r15, %rdi
+               	movq	%r14, %rdi

@@ -85058,142 +85768,144 @@
@@@[(3, 9), (14, 18), (60, 65), (87, 92), (93, 97), (105, 107), (171, 179), (183, 189)]@@@
-               	jae	0x46d2b0 <mi_process_init+0x870>
-               	cmpq	%r15, %rbx
-               	jne	0x46d2c0 <mi_process_init+0x880>
+               	jae	0x46dfc0 <mi_process_init+0x8a0>
+               	cmpq	%r14, %rbx
+               	jne	0x46dfd0 <mi_process_init+0x8b0>
@@@@
-               	movq	532320(%rip), %rax      # 0x4ef130 <_mi_stats_main+0x70>
+               	movq	530909(%rip), %rax      # 0x4ef8b0 <_mi_stats_main+0x70>
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)
@@@@
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	16(%rsp)
+               	movq	16(%rsp), %rax
+               	movabsq	$4835703278458516699, %rcx # imm = 0x431BDE82D7B634DB
+               	imulq	%rcx
@@@@
-               	jmp	0x46d0ea <mi_process_init+0x6aa>
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	jmp	0x46dded <mi_process_init+0x6cd>
+               	nopw	(%rax,%rax)
@@@@
-               	cmpq	%r15, %rbx
-               	je	0x46d1b4 <mi_process_init+0x774>
+               	cmpq	%r14, %rbx
+               	je	0x46deb7 <mi_process_init+0x797>
@@@@
-               	movq	%r15, %rdx
+               	movq	%r14, %rdx
@@@@
-               	cmoveq	%r13, %r14
-               	testq	%r14, %r14
-               	jne	0x46d3c8 <mi_process_init+0x988>
-               	jmp	0x46d4fd <mi_process_init+0xabd>
+               	cmoveq	%r13, %r15
+               	testq	%r15, %r15
+               	jne	0x46e0d8 <mi_process_init+0x9b8>
+               	jmp	0x46e20d <mi_process_init+0xaed>
@@@@
-               	cmoveq	%r13, %r14
-               	testq	%r14, %r14
-               	je	0x46d4fd <mi_process_init+0xabd>
+               	cmoveq	%r13, %r15
+               	testq	%r15, %r15
+               	je	0x46e20d <mi_process_init+0xaed>

@@ -85201,13 +85913,13 @@
@@@[(11, 13)]@@@
-               	xchgq	%r14, (%rax)
+               	xchgq	%r15, (%rax)

@@ -85218,15 +85930,15 @@
@@@[(16, 18)]@@@
-               	movq	$-80, %r15
+               	movq	$-80, %r14

@@ -85235,101 +85947,101 @@
@@@[(18, 28), (54, 56), (109, 111)]@@@
-               	cmoveq	%r13, %r14
-               	testq	%r14, %r14
-               	jne	0x46d3c8 <mi_process_init+0x988>
-               	jmp	0x46d4fd <mi_process_init+0xabd>
-               	callq	0x46f500 <_mi_os_numa_node_count_get>
+               	cmoveq	%r13, %r15
+               	testq	%r15, %r15
+               	jne	0x46e0d8 <mi_process_init+0x9b8>
+               	jmp	0x46e20d <mi_process_init+0xaed>
+               	callq	0x470220 <_mi_os_numa_node_count_get>
@@@@
-               	movq	%r14, %rdi
+               	movq	%r15, %rdi
@@@@
-               	movq	%r14, %rdx
+               	movq	%r15, %rdx

@@ -85412,46 +86124,39 @@
@@@[(43, 60)]@@@
-               	callq	0x46de30 <_mi_verbose_message>
-               	addq	$104, %rsp
-               	popq	%rbx
-               	popq	%r12
-               	popq	%r13
-               	popq	%r14
-               	popq	%r15
-               	popq	%rbp
-               	retq
-               	callq	0x46f500 <_mi_os_numa_node_count_get>
-               	jmp	0x46cc9b <mi_process_init+0x25b>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x46eb50 <_mi_verbose_message>
+               	jmp	0x46d737 <mi_process_init+0x17>
+               	callq	0x470220 <_mi_os_numa_node_count_get>
+               	jmp	0x46d991 <mi_process_init+0x271>
+               	nop

@@ -85557,48 +86262,51 @@
@@@[(7, 15), (31, 34)]@@@
-               	addq	%rdx, 3016(%rbp)
-               	subq	%rdx, 3016(%r14)
+               	movq	3016(%rbp), %rax
+               	addq	%rdx, %rax
+               	movq	%rax, 3016(%rbp)
+               	movq	3016(%r14), %rax
+               	subq	%rdx, %rax
+               	movq	%rax, 3016(%r14)
@@@@
-               	jmp	0x46da3d <mi_pthread_done+0x20d>
-               	nopl	(%rax)
+               	jmp	0x46e74d <mi_pthread_done+0x21d>

@@ -85790,27 +86498,27 @@
@@@[(26, 34)]@@@
-               	callq	0x46fc00 <mi_heap_collect_ex>
-               	movl	$176, %edi
-               	addq	(%r15), %rdi
-               	callq	0x46f710 <mi_stats_merge_from>
+               	callq	0x470920 <mi_heap_collect_ex>
+               	movq	(%r15), %rdi
+               	addq	$176, %rdi
+               	callq	0x470430 <mi_stats_merge_from>

@@ -85821,9 +86529,9 @@
@@@[(3, 9)]@@@
-               	jmp	0x46ef90 <_mi_os_free_ex>
-               	movl	$176, %edi
-               	addq	(%r15), %rdi
+               	jmp	0x46fca0 <_mi_os_free_ex>
+               	movq	(%r15), %rdi
+               	addq	$176, %rdi

@@ -85831,8 +86539,8 @@
@@@[(3, 7)]@@@
-               	jmp	0x46f710 <mi_stats_merge_from>
-               	nop
+               	jmp	0x470430 <mi_stats_merge_from>
+               	nopw	%cs:(%rax,%rax)

@@ -86083,60 +86791,60 @@
@@@[(14, 15), (17, 26)]@@@
-               	movq	64(%rsp), %rdx
@@@@
-               	movl	(%rax,%rcx,4), %ecx
-               	movq	72(%rsp), %rdi
-               	cmpl	(%rax,%rdi,4), %ecx
-               	jne	0x46e2e2 <mi_option_get+0x192>
+               	movq	72(%rsp), %rdx
+               	movl	(%rax,%rdx,4), %edx
+               	cmpl	%edx, (%rax,%rcx,4)
+               	movq	64(%rsp), %rdx
+               	jne	0x46f002 <mi_option_get+0x192>

@@ -86148,48 +86856,48 @@
@@@[(33, 35), (38, 40), (43, 45), (48, 50)]@@@
-               	movzbl	(%rcx,%rdi,4), %ecx
+               	movl	(%rcx,%rdi,4), %ecx
@@@@
-               	movzbl	(%rcx,%rdi,4), %ecx
+               	movl	(%rcx,%rdi,4), %ecx
@@@@
-               	movzbl	(%rcx,%rdi,4), %ecx
+               	movl	(%rcx,%rdi,4), %ecx
@@@@
-               	movzbl	(%rcx,%rdi,4), %ecx
+               	movl	(%rcx,%rdi,4), %ecx

@@ -86197,31 +86905,31 @@
@@@[(3, 5)]@@@
-               	movzbl	(%rbp,%rcx,4), %ecx
+               	movl	(%rbp,%rcx,4), %ecx

@@ -86229,44 +86937,44 @@
@@@[(50, 54)]@@@
-               	jmp	0x46e181 <mi_option_get+0x31>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x46eea1 <mi_option_get+0x31>
+               	nop

@@ -87148,17 +87856,21 @@
@@@[(7, 12), (16, 20), (21, 22)]@@@
-               	js	0x46f1ac <_mi_stat_decrease+0x7c>
-               	addq	%rsi, 8(%rdi)
+               	js	0x46fec0 <_mi_stat_decrease+0x80>
+               	addq	8(%rdi), %rsi
+               	movq	%rsi, 8(%rdi)
@@@@
-               	subq	%rsi, (%rdi)
+               	movq	(%rdi), %rax
+               	subq	%rsi, %rax
+               	movq	%rax, (%rdi)
@@@@
+               	nopw	(%rax,%rax)

@@ -87292,19 +88004,22 @@
@@@[(7, 12), (17, 21), (22, 24)]@@@
-               	jle	0x46f3ce <_mi_stat_increase+0x6e>
-               	addq	%rsi, (%rdi)
+               	jle	0x4700f1 <_mi_stat_increase+0x71>
+               	addq	(%rdi), %rsi
+               	movq	%rsi, (%rdi)
@@@@
-               	subq	%rsi, 8(%rdi)
+               	movq	8(%rdi), %rax
+               	subq	%rsi, %rax
+               	movq	%rax, 8(%rdi)
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)

@@ -87494,22 +88209,23 @@
@@@[(19, 28)]@@@
-               	cmpq	$0, 556861(%rip)        # 0x4f7620 <mi_error_handler>
-               	je	0x46f6f7 <_mi_error_message+0x147>
-               	movq	556852(%rip), %rax      # 0x4f7620 <mi_error_handler>
-               	movq	556853(%rip), %rsi      # 0x4f7628 <mi_error_arg>
+               	movq	555422(%rip), %rax      # 0x4f7da0 <mi_error_handler>
+               	testq	%rax, %rax
+               	je	0x470419 <_mi_error_message+0x149>
+               	movq	555410(%rip), %rax      # 0x4f7da0 <mi_error_handler>
+               	movq	555411(%rip), %rsi      # 0x4f7da8 <mi_error_arg>

@@ -87519,284 +88235,284 @@
@@@[(3, 5)]@@@
-               	nopw	(%rax,%rax)
+               	nopl	(%rax)

@@ -87812,66 +88528,67 @@
@@@[(16, 21), (80, 82)]@@@
-               	cmpq	$0, 621319(%rip)        # 0x507748 <deferred_free>
-               	je	0x46fc4d <mi_heap_collect_ex+0x4d>
+               	movq	619880(%rip), %rax      # 0x507ec8 <deferred_free>
+               	testq	%rax, %rax
+               	je	0x47096f <mi_heap_collect_ex+0x4f>
@@@@
-               	nopl	(%rax,%rax)
+               	nopl	(%rax)

@@ -88151,22 +88868,26 @@
@@@[(19, 23), (25, 29)]@@@
-               	addq	$-1, 3016(%r12)
+               	movq	3016(%r12), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 3016(%r12)
@@@@
-               	andb	$-2, 6(%rbx)
+               	movb	6(%rbx), %al
+               	andb	$-2, %al
+               	movb	%al, 6(%rbx)

@@ -88175,104 +88896,106 @@
@@@[(3, 11), (16, 17), (33, 50), (67, 69)]@@@
-               	jb	0x4702a0 <mi_heap_collect_ex+0x6a0>
-               	leaq	520373(%rip), %rdi      # 0x4ef300 <os_preloading>
-               	cmpq	%rdi, %rcx
-               	jae	0x4702a0 <mi_heap_collect_ex+0x6a0>
+               	jb	0x470fd0 <mi_heap_collect_ex+0x6b0>
+               	leaq	518914(%rip), %rax      # 0x4efa80 <os_preloading>
+               	cmpq	%rax, %rcx
+               	jae	0x470fd0 <mi_heap_collect_ex+0x6b0>
@@@@
-               	nopl	(%rax)
@@@@
-               	movq	248(%rdx), %rbp
-               	leaq	1(%rbp), %rdi
-               	movq	%rdi, 248(%rdx)
-               	cmpq	240(%rdx), %rbp
-               	jl	0x4702c2 <mi_heap_collect_ex+0x6c2>
-               	movq	%rdi, 240(%rdx)
-               	addq	$1, (%rcx)
+               	movq	248(%rdx), %rdi
+               	leaq	1(%rdi), %rax
+               	movq	%rax, 248(%rdx)
+               	cmpq	240(%rdx), %rdi
+               	jl	0x470ff2 <mi_heap_collect_ex+0x6d2>
+               	movq	%rax, 240(%rdx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)
+               	movq	40(%rbx), %rax
@@@@
-               	nop
+               	nopl	(%rax)

@@ -88281,74 +89004,77 @@
@@@[(7, 13), (31, 33), (52, 56), (78, 79)]@@@
-               	je	0x470695 <mi_heap_collect_ex+0xa95>
-               	addq	$-1, 120(%r15)
+               	je	0x4713fb <mi_heap_collect_ex+0xadb>
+               	movq	120(%r15), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 120(%r15)
@@@@
-               	nop
+               	nopl	(%rax)
@@@@
-               	addq	$1, 424(%rcx)
+               	movq	424(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 424(%rcx)
@@@@
-               	nop

@@ -88356,43 +89082,44 @@
@@@[(21, 25), (49, 52)]@@@
-               	addq	$1, 8(%rcx)
+               	movq	8(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rcx)
@@@@
-               	jmp	0x470614 <mi_heap_collect_ex+0xa14>
-               	nopl	(%rax)
+               	jmp	0x471374 <mi_heap_collect_ex+0xa54>

@@ -88428,40 +89155,42 @@
@@@[(24, 28)]@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)

@@ -88470,38 +89199,39 @@
@@@[(18, 21)]@@@
-               	callq	0x470af0 <_mi_arena_free>
+               	callq	0x471860 <_mi_arena_free>
+               	nopw	%cs:(%rax,%rax)

@@ -88551,25 +89281,27 @@
@@@[(28, 32)]@@@
-               	andb	$-2, 7(%rbx)
+               	movb	7(%rbx), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%rbx)

@@ -88577,21 +89309,23 @@
@@@[(3, 7), (23, 27)]@@@
-               	subl	%eax, 16(%rbx)
+               	movl	16(%rbx), %ecx
+               	subl	%eax, %ecx
+               	movl	%ecx, 16(%rbx)
@@@@
-               	jmp	0x47081b <_mi_page_free_collect+0x7b>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x47158b <_mi_page_free_collect+0x7b>
+               	nopl	(%rax)

@@ -88599,50 +89333,52 @@
@@@[(3, 7)]@@@
-               	andb	$-3, 6(%rdi)
+               	movb	6(%rdi), %al
+               	andb	$-3, %al
+               	movb	%al, 6(%rdi)

@@ -88653,22 +89389,22 @@
@@@[(3, 5)]@@@
-               	nopw	(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -88734,20 +89470,24 @@
@@@[(13, 20), (22, 27)]@@@
-               	jne	0x470aa0 <_mi_page_free+0x230>
-               	addq	$-1, 3016(%r14)
+               	jne	0x471810 <_mi_page_free+0x230>
+               	addq	$32, %r8
+               	movq	3016(%r14), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 3016(%r14)
@@@@
-               	andb	$-2, 6(%rdi)
-               	addq	$32, %r8
+               	movb	6(%rdi), %al
+               	andb	$-2, %al
+               	movb	%al, 6(%rdi)

@@ -88756,8 +89496,7 @@
@@@[(3, 6)]@@@
-               	jmp	0x4716d0 <_mi_segment_page_free>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x472460 <_mi_segment_page_free>

@@ -89239,68 +89978,72 @@
@@@[(79, 89)]@@@
-               	jae	0x471190 <mi_os_commitx+0x1f0>
-               	addq	$1, 516259(%rip)        # 0x4ef2a8 <_mi_stats_main+0x1e8>
-               	addq	$1, 516243(%rip)        # 0x4ef2a0 <_mi_stats_main+0x1e0>
+               	jae	0x471f00 <mi_os_commitx+0x1f0>
+               	movq	514740(%rip), %rax      # 0x4efa28 <_mi_stats_main+0x1e8>
+               	addq	$1, %rax
+               	movq	%rax, 514729(%rip)      # 0x4efa28 <_mi_stats_main+0x1e8>
+               	movq	514714(%rip), %rax      # 0x4efa20 <_mi_stats_main+0x1e0>
+               	addq	$1, %rax
+               	movq	%rax, 514703(%rip)      # 0x4efa20 <_mi_stats_main+0x1e0>

@@ -89331,6 +90074,7 @@
@@@[(3, 4)]@@@
+               	nopw	%cs:(%rax,%rax)

@@ -89683,67 +90427,68 @@
@@@[(38, 42), (45, 50), (51, 55)]@@@
-               	jmp	0x4717bd <_mi_segment_page_free+0xed>
-               	movzbl	96(%rdx), %ecx
+               	jmp	0x47254d <_mi_segment_page_free+0xed>
+               	movq	96(%rdx), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rcx, %rdi
+               	movzbl	%cl, %ecx
+               	movq	%rcx, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rcx, %rcx
-               	jne	0x4717da <_mi_segment_page_free+0x10a>
+               	testb	%cl, %cl
+               	jne	0x47256c <_mi_segment_page_free+0x10c>

@@ -89792,7 +90537,7 @@
@@@[(3, 5)]@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -89804,70 +90549,78 @@
@@@[(3, 7), (8, 14), (31, 33), (51, 59), (61, 62), (66, 67), (68, 72), (95, 103)]@@@
-               	cmpq	$67108864, %rsi         # imm = 0x4000000
-               	jae	0x471a8c <mi_segment_page_clear+0x1dc>
+               	cmpl	$67108864, %esi         # imm = 0x4000000
+               	jae	0x47284d <mi_segment_page_clear+0x1fd>
@@@@
-               	movl	$160, %edi
-               	addq	112(%r15), %rdi
-               	callq	0x46f130 <_mi_stat_decrease>
+               	movq	112(%r15), %rdi
+               	addq	$160, %rdi
+               	callq	0x46fe40 <_mi_stat_decrease>
@@@@
-               	nopl	(%rax)
+               	nop
@@@@
-               	addq	$1, 40(%rcx)
-               	andb	$-10, 1(%rbx)
+               	movq	40(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 40(%rcx)
+               	movb	1(%rbx), %al
+               	andb	$-10, %al
+               	movb	%al, 1(%rbx)
@@@@
-               	movups	%xmm0, 6(%rbx)
@@@@
+               	movups	%xmm0, 38(%rbx)
@@@@
-               	addq	$-1, 56(%r14)
+               	movq	56(%r14), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 56(%r14)
@@@@
-               	imull	$1000, (%rsp), %ecx     # imm = 0x3E8
-               	movabsq	$4835703278458516699, %rax # imm = 0x431BDE82D7B634DB
-               	imulq	8(%rsp)
+               	movq	(%rsp), %rax
+               	imull	$1000, %eax, %ecx       # imm = 0x3E8
+               	movq	8(%rsp), %rax
+               	movabsq	$4835703278458516699, %rdx # imm = 0x431BDE82D7B634DB
+               	imulq	%rdx

@@ -89894,61 +90647,62 @@
@@@[(21, 25), (27, 34), (35, 39), (58, 62)]@@@
-               	jmp	0x471a5f <mi_segment_page_clear+0x1af>
-               	movb	96(%r14), %cl
+               	jmp	0x47281f <mi_segment_page_clear+0x1cf>
+               	movq	96(%r14), %rcx
@@@@
-               	movzbl	(%rbx), %ecx
-               	movq	%rsi, %rdi
-               	imulq	%rcx, %rdi
+               	movb	(%rbx), %cl
+               	movzbl	%cl, %ecx
+               	movq	%rcx, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rcx, %rcx
-               	jne	0x471a7b <mi_segment_page_clear+0x1cb>
+               	testb	%cl, %cl
+               	jne	0x47283c <mi_segment_page_clear+0x1ec>
@@@@
-               	jmp	0x471aaf <mi_segment_page_clear+0x1ff>
-               	movb	96(%rax), %cl
+               	jmp	0x472871 <mi_segment_page_clear+0x221>
+               	movq	96(%rax), %rcx

@@ -89973,229 +90727,230 @@
@@@[(118, 124), (127, 132), (133, 137), (256, 260), (282, 286), (311, 315)]@@@
-               	jne	0x471bf1 <mi_segment_free+0xf1>
-               	jmp	0x471bd5 <mi_segment_free+0xd5>
-               	movzbl	96(%r14), %ecx
+               	jne	0x4729b1 <mi_segment_free+0xf1>
+               	jmp	0x472995 <mi_segment_free+0xd5>
+               	movq	96(%r14), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rcx, %rdi
+               	movzbl	%cl, %ecx
+               	movq	%rcx, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rcx, %rcx
-               	jne	0x471c76 <mi_segment_free+0x176>
+               	testb	%cl, %cl
+               	jne	0x472a37 <mi_segment_free+0x177>
@@@@
-               	movl	$160, %edi
-               	addq	112(%r12), %rdi
+               	movq	112(%r12), %rdi
+               	addq	$160, %rdi
@@@@
-               	movl	$160, %edi
-               	addq	112(%r12), %rdi
+               	movq	112(%r12), %rdi
+               	addq	$160, %rdi
@@@@
-               	jmp	0x471e82 <mi_segment_free+0x382>
-               	nopl	(%rax)
+               	jmp	0x472c42 <mi_segment_free+0x382>
+               	nop

@@ -90230,51 +90985,54 @@
@@@[(21, 25), (47, 48)]@@@
-               	addq	$1, 424(%rcx)
+               	movq	424(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 424(%rcx)
@@@@
+               	nop

@@ -90282,41 +91040,43 @@
@@@[(20, 24)]@@@
-               	addq	$1, 8(%rcx)
+               	movq	8(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rcx)

@@ -90325,7 +91085,6 @@
@@@[(3, 4)]@@@
-               	nopw	%cs:(%rax,%rax)

@@ -90353,106 +91112,110 @@
@@@[(24, 28), (61, 63), (100, 104)]@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)
@@@@
-               	nopl	(%rax)
+               	nop
@@@@
-               	addq	$1, 8(%rcx)
+               	movq	8(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rcx)

@@ -90461,7 +91224,6 @@
@@@[(3, 4)]@@@
-               	nopl	(%rax)

@@ -90510,32 +91272,34 @@
@@@[(12, 16)]@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)

@@ -90544,81 +91308,82 @@
@@@[(18, 21), (105, 109)]@@@
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	nopl	(%rax,%rax)
@@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)

@@ -90627,7 +91392,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax,%rax)
+               	nop

@@ -90658,185 +91423,192 @@
@@@[(38, 42), (45, 50), (51, 55), (136, 138), (157, 161), (180, 181), (218, 222), (240, 245)]@@@
-               	jmp	0x47259d <mi_segment_abandon+0xdd>
-               	movzbl	96(%rdx), %ecx
+               	jmp	0x47336d <mi_segment_abandon+0xdd>
+               	movq	96(%rdx), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rcx, %rdi
+               	movzbl	%cl, %ecx
+               	movq	%rcx, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rcx, %rcx
-               	jne	0x4725b9 <mi_segment_abandon+0xf9>
+               	testb	%cl, %cl
+               	jne	0x47338b <mi_segment_abandon+0xfb>
@@@@
-               	nopl	(%rax,%rax)
+               	nopl	(%rax)
@@@@
-               	addq	$1, (%rdx)
+               	movq	(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rdx)
@@@@
+               	nop
@@@@
-               	addq	$1, 8(%rcx)
+               	movq	8(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rcx)
@@@@
-               	movq	609971(%rip), %rax      # 0x507680 <abandoned>
-               	nopl	(%rax)
+               	movq	608348(%rip), %rax      # 0x507e00 <abandoned>
+               	nopw	%cs:(%rax,%rax)
+               	nop

@@ -90858,154 +91630,157 @@
@@@[(92, 98), (101, 106), (107, 111), (136, 140), (205, 211)]@@@
-               	jne	0x4728b3 <mi_segment_abandon+0x3f3>
-               	jmp	0x472899 <mi_segment_abandon+0x3d9>
-               	movzbl	96(%r15), %ecx
+               	jne	0x473693 <mi_segment_abandon+0x403>
+               	jmp	0x473679 <mi_segment_abandon+0x3e9>
+               	movq	96(%r15), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rcx, %rdi
+               	movzbl	%cl, %ecx
+               	movq	%rcx, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rcx, %rcx
-               	jne	0x472933 <mi_segment_abandon+0x473>
+               	testb	%cl, %cl
+               	jne	0x473714 <mi_segment_abandon+0x484>
@@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)
@@@@
-               	jne	0x472657 <mi_segment_abandon+0x197>
-               	jmp	0x47263a <mi_segment_abandon+0x17a>
-               	nopw	(%rax,%rax)
+               	jne	0x473429 <mi_segment_abandon+0x199>
+               	jmp	0x47340c <mi_segment_abandon+0x17c>
+               	nop

@@ -91018,7 +91793,7 @@
@@@[(3, 5)]@@@
-               	movb	96(%r12), %cl
+               	movq	96(%r12), %rcx

@@ -91026,29 +91801,31 @@
@@@[(29, 35)]@@@
-               	addl	$-1, 136(%r12,%rbx)
-               	je	0x472ac8 <_mi_free_delayed_block+0x98>
+               	movl	136(%r12,%rbx), %eax
+               	addl	$-1, %eax
+               	movl	%eax, 136(%r12,%rbx)
+               	je	0x4738b2 <_mi_free_delayed_block+0xa2>

@@ -91061,15 +91838,15 @@
@@@[(11, 15)]@@@
-               	jmp	0x472c00 <_mi_page_unfull>
-               	nop
+               	jmp	0x4739f0 <_mi_page_unfull>
+               	nopl	(%rax,%rax)

@@ -91150,27 +91927,26 @@
@@@[(11, 18)]@@@
-               	cmpq	$9, %rsi
-               	jb	0x472c73 <_mi_page_unfull+0x73>
-               	movq	%rsi, %rdx
-               	addq	$7, %rdx
+               	cmpl	$9, %esi
+               	jb	0x473a5f <_mi_page_unfull+0x6f>
+               	leaq	7(%rsi), %rdx

@@ -91233,22 +92009,22 @@
@@@[(3, 5)]@@@
-               	nop
+               	nopw	(%rax,%rax)

@@ -91523,83 +92299,86 @@
@@@[(20, 24), (54, 57), (91, 97)]@@@
-               	addq	$1, (%rdx)
+               	movq	(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rdx)
@@@@
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	je	0x4732c0 <mi_segment_reclaim+0x1c0>
-               	addq	$-1, 40(%r15)
+               	je	0x4740b0 <mi_segment_reclaim+0x1c0>
+               	movq	40(%r15), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 40(%r15)

@@ -91607,115 +92386,121 @@
@@@[(21, 25), (45, 49), (85, 89), (127, 131), (139, 145)]@@@
-               	addq	$1, 232(%rcx)
+               	movq	232(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 232(%rcx)
@@@@
-               	jmp	0x47338a <mi_segment_reclaim+0x28a>
-               	nop
+               	jmp	0x474184 <mi_segment_reclaim+0x294>
+               	nopl	(%rax)
@@@@
-               	addq	$1, 200(%rsi)
+               	movq	200(%rsi), %rax
+               	addq	$1, %rax
+               	movq	%rax, 200(%rsi)
@@@@
-               	callq	0x4718b0 <mi_segment_page_clear>
-               	nopl	(%rax)
+               	callq	0x472650 <mi_segment_page_clear>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	je	0x4734b0 <mi_segment_reclaim+0x3b0>
-               	addq	$-1, 40(%r15)
+               	je	0x4742c0 <mi_segment_reclaim+0x3d0>
+               	movq	40(%r15), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 40(%r15)

@@ -91723,70 +92508,74 @@
@@@[(21, 25), (45, 49), (80, 84)]@@@
-               	addq	$1, 232(%rcx)
+               	movq	232(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 232(%rcx)
@@@@
-               	jmp	0x47356a <mi_segment_reclaim+0x46a>
-               	nop
+               	jmp	0x474394 <mi_segment_reclaim+0x4a4>
+               	nopl	(%rax)
@@@@
-               	addq	$1, 8(%rdx)
+               	movq	8(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rdx)

@@ -91805,28 +92594,27 @@
@@@[(3, 4), (8, 12)]@@@
-               	nopl	(%rax)
@@@@
-               	cmpq	$67108864, %r8          # imm = 0x4000000
-               	jae	0x4738f8 <_mi_page_reclaim+0x298>
+               	cmpl	$67108864, %r8d         # imm = 0x4000000
+               	jae	0x474732 <_mi_page_reclaim+0x2a2>

@@ -91960,49 +92748,52 @@
@@@[(13, 19), (28, 32), (34, 40), (41, 49), (53, 56), (58, 60)]@@@
-               	jne	0x4738e0 <_mi_page_reclaim+0x280>
-               	addq	$1, 3016(%rdi)
+               	jne	0x474710 <_mi_page_reclaim+0x280>
+               	movq	3016(%rdi), %rax
+               	addq	$1, %rax
+               	movq	%rax, 3016(%rdi)
@@@@
-               	jmp	0x47391a <_mi_page_reclaim+0x2ba>
-               	movb	96(%rax), %cl
+               	jmp	0x474755 <_mi_page_reclaim+0x2c5>
+               	movq	96(%rax), %rcx
@@@@
-               	movzbl	(%rsi), %ecx
-               	testq	%rcx, %rcx
-               	je	0x47392a <_mi_page_reclaim+0x2ca>
+               	movb	(%rsi), %cl
+               	testb	%cl, %cl
+               	je	0x474763 <_mi_page_reclaim+0x2d3>
@@@@
-               	jmp	0x473672 <_mi_page_reclaim+0x12>
-               	movq	80(%rax), %r10
-               	movq	%rdx, %r9
-               	subq	%r10, %r9
+               	jmp	0x4744a2 <_mi_page_reclaim+0x12>
+               	movq	80(%rax), %r9
+               	movq	%rdx, %r10
+               	subq	%r9, %r10
@@@@
-               	je	0x47396f <_mi_page_reclaim+0x30f>
+               	je	0x4747ab <_mi_page_reclaim+0x31b>
+               	movzbl	%cl, %ecx
@@@@
-               	addq	%r10, %rax
+               	addq	%r9, %rax

@@ -92010,41 +92801,43 @@
@@@[(3, 11), (20, 22), (34, 40), (49, 53)]@@@
-               	subq	%rcx, %r9
-               	movq	%r9, %r8
-               	jmp	0x473672 <_mi_page_reclaim+0x12>
-               	nopw	(%rax,%rax)
+               	subq	%rcx, %r10
+               	movq	%r10, %r8
+               	jmp	0x4744a2 <_mi_page_reclaim+0x12>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	movb	96(%rdi), %cl
+               	movq	96(%rdi), %rcx
@@@@
-               	addl	$-1, 136(%rdi,%rax)
-               	je	0x4739e6 <mi_free+0x66>
+               	movl	136(%rdi,%rax), %ecx
+               	addl	$-1, %ecx
+               	movl	%ecx, 136(%rdi,%rax)
+               	je	0x474830 <mi_free+0x70>
@@@@
-               	jmp	0x472af0 <_mi_page_retire>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x4738e0 <_mi_page_retire>
+               	nopl	(%rax)

@@ -92060,32 +92853,33 @@
@@@[(15, 18), (20, 24)]@@@
-               	movzbl	(%r9), %ebx
+               	movb	(%r9), %cl
+               	movzbl	%cl, %ebx
@@@@
-               	testq	%rbx, %rbx
-               	jne	0x473a97 <mi_free_generic+0x97>
+               	testb	%bl, %bl
+               	jne	0x4748d8 <mi_free_generic+0x98>

@@ -92095,30 +92889,32 @@
@@@[(25, 31)]@@@
-               	addl	$-1, 136(%rdi,%r11)
-               	je	0x473b0d <mi_free_generic+0x10d>
+               	movl	136(%rdi,%r11), %eax
+               	addl	$-1, %eax
+               	movl	%eax, 136(%rdi,%r11)
+               	je	0x474958 <mi_free_generic+0x118>

@@ -92130,49 +92926,49 @@
@@@[(26, 30)]@@@
-               	jmp	0x473b4b <mi_free_generic+0x14b>
-               	movb	96(%rax), %cl
+               	jmp	0x474997 <mi_free_generic+0x157>
+               	movq	96(%rax), %rcx

@@ -92182,8 +92978,7 @@
@@@[(3, 6)]@@@
-               	jmp	0x473aa4 <mi_free_generic+0xa4>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x4748e5 <mi_free_generic+0xa5>

@@ -92194,86 +92989,91 @@
@@@[(18, 26), (49, 52)]@@@
-               	addl	$-1, 16(%r14)
-               	andb	$-2, 7(%r14)
+               	movl	16(%r14), %eax
+               	addl	$-1, %eax
+               	movl	%eax, 16(%r14)
+               	movb	7(%r14), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%r14)
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)

@@ -92282,72 +93082,76 @@
@@@[(20, 24), (52, 56)]@@@
-               	addq	$1, (%rdx)
+               	movq	(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rdx)
@@@@
-               	addq	$1, 8(%rdx)
+               	movq	8(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rdx)

@@ -92863,21 +93667,21 @@
@@@[(10, 20)]@@@
-               	callq	0x473fa0 <_mi_fprintf>
-               	movq	(%r14), %rax
-               	cmpq	8(%r14), %rax
-               	leaq	96189(%rip), %rax       # 0x48be32 <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
-               	leaq	96200(%rip), %rdx       # 0x48be44 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>
+               	callq	0x474e00 <_mi_fprintf>
+               	movq	8(%r14), %rax
+               	cmpq	%rax, (%r14)
+               	leaq	97309(%rip), %rax       # 0x48d0f2 <typeinfo name for kotlin::gc::GCSchedulerData+0x17e1>
+               	leaq	97320(%rip), %rdx       # 0x48d104 <typeinfo name for kotlin::gc::GCSchedulerData+0x17f3>

@@ -93614,70 +94418,73 @@
@@@[(14, 19), (32, 34), (88, 96)]@@@
-               	cmpq	$0, 599432(%rip)        # 0x507748 <deferred_free>
-               	je	0x4751e5 <_mi_malloc_generic+0x65>
+               	movq	597673(%rip), %rcx      # 0x507ec8 <deferred_free>
+               	testq	%rcx, %rcx
+               	je	0x476047 <_mi_malloc_generic+0x67>
@@@@
-               	nopl	(%rax)
+               	nop
@@@@
-               	callq	0x46f5b0 <_mi_error_message>
-               	jmp	0x475299 <_mi_malloc_generic+0x119>
-               	addl	$1, 16(%rax)
+               	callq	0x4702d0 <_mi_error_message>
+               	jmp	0x4760fe <_mi_malloc_generic+0x11e>
+               	movl	16(%rax), %edx
+               	addl	$1, %edx
+               	movl	%edx, 16(%rax)

@@ -93690,7 +94497,6 @@
@@@[(3, 4)]@@@
-               	nopl	(%rax,%rax)

@@ -93742,37 +94548,43 @@
@@@[(16, 19), (20, 21), (29, 35), (38, 43), (44, 45), (49, 55)]@@@
-               	callq	0x46f5b0 <_mi_error_message>
-               	movq	8(%rbx), %rcx
+               	callq	0x4702d0 <_mi_error_message>
@@@@
+               	movq	8(%rbx), %rcx
@@@@
-               	andb	$-2, 7(%rbx)
-               	jmp	0x4753bd <mi_find_page+0x10d>
+               	movb	7(%rbx), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%rbx)
+               	jmp	0x476226 <mi_find_page+0x116>
@@@@
-               	subl	%eax, 16(%rbx)
-               	movq	8(%rbx), %rcx
+               	movl	16(%rbx), %ecx
+               	subl	%eax, %ecx
+               	movl	%ecx, 16(%rbx)
@@@@
+               	movq	8(%rbx), %rcx
@@@@
-               	je	0x4753ca <mi_find_page+0x11a>
-               	andb	$1, 7(%rbx)
+               	je	0x476237 <mi_find_page+0x127>
+               	movb	7(%rbx), %al
+               	andb	$1, %al
+               	movb	%al, 7(%rbx)

@@ -93809,91 +94621,100 @@
@@@[(10, 14), (59, 79), (98, 102), (104, 110), (120, 125)]@@@
-               	cmpq	$67108864, %rsi         # imm = 0x4000000
-               	jae	0x47553b <mi_find_page+0x28b>
+               	cmpl	$67108864, %esi         # imm = 0x4000000
+               	jae	0x4763d2 <mi_find_page+0x2c2>
@@@@
-               	jmp	0x475519 <mi_find_page+0x269>
-               	addq	$1, 744(%rax)
-               	addq	$1, 736(%rax)
-               	jmp	0x475519 <mi_find_page+0x269>
-               	addq	$1, 728(%rax)
-               	addq	$1, 720(%rax)
+               	jmp	0x4763b0 <mi_find_page+0x2a0>
+               	movq	744(%rax), %rcx
+               	addq	$1, %rcx
+               	movq	%rcx, 744(%rax)
+               	movq	736(%rax), %rcx
+               	addq	$1, %rcx
+               	movq	%rcx, 736(%rax)
+               	jmp	0x4763b0 <mi_find_page+0x2a0>
+               	movq	728(%rax), %rcx
+               	addq	$1, %rcx
+               	movq	%rcx, 728(%rax)
+               	movq	720(%rax), %rcx
+               	addq	$1, %rcx
+               	movq	%rcx, 720(%rax)
@@@@
-               	jmp	0x47555d <mi_find_page+0x2ad>
-               	movb	96(%rax), %cl
+               	jmp	0x4763f5 <mi_find_page+0x2e5>
+               	movq	96(%rax), %rcx
@@@@
-               	movzbl	(%r14), %ebx
-               	testq	%rbx, %rbx
-               	je	0x47556e <mi_find_page+0x2be>
+               	movb	(%r14), %bl
+               	testb	%bl, %bl
+               	je	0x476404 <mi_find_page+0x2f4>
@@@@
-               	je	0x4755b1 <mi_find_page+0x301>
-               	imulq	%rbx, %rdx
+               	je	0x47644a <mi_find_page+0x33a>
+               	movzbl	%bl, %edi
+               	imulq	%rdi, %rdx

@@ -93903,8 +94724,8 @@
@@@[(3, 7)]@@@
-               	jmp	0x47545f <mi_find_page+0x1af>
-               	nopl	(%rax)
+               	jmp	0x4762cb <mi_find_page+0x1bb>
+               	nopw	%cs:(%rax,%rax)

@@ -94012,46 +94833,48 @@
@@@[(20, 24)]@@@
-               	addq	$1, 8(%rdx)
+               	movq	8(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rdx)

@@ -94062,96 +94885,95 @@
@@@[(3, 8), (40, 44), (47, 52), (53, 57), (77, 83), (84, 86), (87, 99), (102, 111), (112, 114), (118, 123), (124, 125)]@@@
-               	jmp	0x475839 <mi_page_fresh_alloc+0x279>
-               	nopl	(%rax)
+               	jmp	0x4766e9 <mi_page_fresh_alloc+0x289>
+               	nopw	%cs:(%rax,%rax)
+               	nop
@@@@
-               	jmp	0x475890 <mi_page_fresh_alloc+0x2d0>
-               	movzbl	96(%rdx), %ecx
+               	jmp	0x476740 <mi_page_fresh_alloc+0x2e0>
+               	movq	96(%rdx), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rcx, %rdi
+               	movzbl	%cl, %ecx
+               	movq	%rcx, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rcx, %rcx
-               	jne	0x4758ad <mi_page_fresh_alloc+0x2ed>
+               	testb	%cl, %cl
+               	jne	0x47675f <mi_page_fresh_alloc+0x2ff>
@@@@
-               	je	0x475d77 <mi_page_fresh_alloc+0x7b7>
-               	movq	%r15, %rdi
-               	andq	$-4194304, %rdi         # imm = 0xFFC00000
+               	je	0x476c52 <mi_page_fresh_alloc+0x7f2>
+               	movq	%r15, %rsi
+               	andq	$-4194304, %rsi         # imm = 0xFFC00000
@@@@
-               	movl	112(%rdi), %edx
+               	movl	112(%rsi), %edx
@@@@
-               	jne	0x475915 <mi_page_fresh_alloc+0x355>
-               	movq	72(%rdi), %rax
-               	movq	16(%rsp), %rbx
-               	movzbl	(%r15), %r9d
-               	testq	%r9, %r9
-               	jne	0x475978 <mi_page_fresh_alloc+0x3b8>
-               	jmp	0x47592e <mi_page_fresh_alloc+0x36e>
-               	movb	96(%rdi), %cl
+               	jne	0x4767b9 <mi_page_fresh_alloc+0x359>
+               	movq	72(%rsi), %rax
+               	jmp	0x4767c5 <mi_page_fresh_alloc+0x365>
+               	movq	96(%rsi), %rcx
@@@@
-               	movzbl	(%r15), %r9d
-               	testq	%r9, %r9
-               	jne	0x475978 <mi_page_fresh_alloc+0x3b8>
-               	movq	80(%rdi), %rsi
+               	movb	(%r15), %cl
+               	movzbl	%cl, %edi
+               	testb	%dil, %dil
+               	jne	0x47681f <mi_page_fresh_alloc+0x3bf>
+               	movq	80(%rsi), %rbp
@@@@
-               	subq	%rsi, %rcx
+               	subq	%rbp, %rcx
@@@@
-               	je	0x475975 <mi_page_fresh_alloc+0x3b5>
-               	imulq	%r9, %rax
-               	addq	%rdi, %rax
+               	je	0x47681c <mi_page_fresh_alloc+0x3bc>
+               	imulq	%rdi, %rax
@@@@
+               	addq	%rbp, %rax

@@ -94168,74 +94990,75 @@
@@@[(7, 10), (12, 29), (30, 51), (52, 74), (75, 85), (87, 91), (105, 109), (113, 119)]@@@
-               	movq	%rax, %r8
-               	jmp	0x4759a9 <mi_page_fresh_alloc+0x3e9>
+               	jmp	0x47684a <mi_page_fresh_alloc+0x3ea>
@@@@
-               	movl	%eax, %r8d
-               	movw	%r8w, 4(%r15)
-               	movb	1(%r15), %al
-               	movb	7(%r15), %cl
-               	shrb	$3, %al
-               	andb	$1, %al
-               	andb	$-2, %cl
-               	orb	%al, %cl
-               	movb	%cl, 7(%r15)
+               	movw	%ax, 4(%r15)
+               	movb	1(%r15), %cl
+               	shrb	$3, %cl
+               	andb	$1, %cl
+               	movb	7(%r15), %dl
+               	andb	$-2, %dl
+               	orb	%cl, %dl
+               	movb	%dl, 7(%r15)
@@@@
-               	jne	0x475ae2 <mi_page_fresh_alloc+0x522>
-               	movzwl	2(%r15), %r10d
-               	cmpw	%r8w, %r10w
-               	jae	0x475ae2 <mi_page_fresh_alloc+0x522>
-               	movl	112(%rdi), %eax
-               	cmpl	$3, %eax
-               	jne	0x4759f7 <mi_page_fresh_alloc+0x437>
-               	movq	72(%rdi), %rsi
-               	testb	%r9b, %r9b
-               	je	0x475a07 <mi_page_fresh_alloc+0x447>
+               	jne	0x4769a0 <mi_page_fresh_alloc+0x540>
+               	movzwl	2(%r15), %ecx
+               	cmpw	%ax, %cx
+               	jae	0x4769a0 <mi_page_fresh_alloc+0x540>
+               	movzwl	%cx, %r8d
+               	movl	112(%rsi), %edx
+               	cmpl	$3, %edx
+               	jne	0x47689c <mi_page_fresh_alloc+0x43c>
+               	movq	72(%rsi), %rax
+               	testb	%dil, %dil
+               	je	0x4768ad <mi_page_fresh_alloc+0x44d>
@@@@
-               	jmp	0x475a91 <mi_page_fresh_alloc+0x4d1>
-               	movb	96(%rdi), %cl
-               	movl	$1, %esi
-               	shlq	%cl, %rsi
-               	testb	%r9b, %r9b
-               	jne	0x4759ef <mi_page_fresh_alloc+0x42f>
-               	movq	80(%rdi), %rdx
-               	movq	%rsi, %rcx
-               	subq	%rdx, %rcx
-               	cmpl	$1, %eax
-               	ja	0x475a3b <mi_page_fresh_alloc+0x47b>
+               	jmp	0x47693d <mi_page_fresh_alloc+0x4dd>
+               	movq	96(%rsi), %rcx
+               	movl	$1, %eax
+               	shlq	%cl, %rax
+               	testb	%dil, %dil
+               	jne	0x476894 <mi_page_fresh_alloc+0x434>
+               	movq	80(%rsi), %rbx
+               	movq	%rax, %rcx
+               	subq	%rbx, %rcx
+               	cmpl	$1, %edx
+               	ja	0x4768e1 <mi_page_fresh_alloc+0x481>
@@@@
-               	je	0x475a3b <mi_page_fresh_alloc+0x47b>
-               	imulq	%r9, %rsi
-               	addq	%rsi, %rdi
-               	addq	%rdx, %rdi
-               	movq	%rdi, %rax
+               	je	0x4768e1 <mi_page_fresh_alloc+0x481>
+               	imulq	%rdi, %rax
+               	addq	%rax, %rsi
+               	addq	%rbx, %rsi
+               	movq	%rsi, %rax
@@@@
-               	je	0x475a76 <mi_page_fresh_alloc+0x4b6>
-               	movq	%rdi, %rax
+               	je	0x476922 <mi_page_fresh_alloc+0x4c2>
+               	movq	%rsi, %rax
@@@@
-               	addq	$1, (%rdx)
+               	movq	(%rdx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rdx)
@@@@
-               	ja	0x475797 <mi_page_fresh_alloc+0x1d7>
-               	jmp	0x47579b <mi_page_fresh_alloc+0x1db>
-               	movl	%edi, %eax
+               	ja	0x47663e <mi_page_fresh_alloc+0x1de>
+               	jmp	0x476642 <mi_page_fresh_alloc+0x1e2>
+               	movl	%esi, %eax

@@ -94244,14 +95067,15 @@
@@@[(3, 14)]@@@
-               	movq	%rcx, %rsi
-               	cmpl	$67108864, %ebp         # imm = 0x4000000
-               	cmovbq	%rbp, %rsi
-               	movzwl	%r8w, %r12d
-               	subq	%r10, %r12
+               	movq	%rcx, %rax
+               	movl	20(%r15), %esi
+               	cmpl	$67108864, %esi         # imm = 0x4000000
+               	cmovaeq	%rax, %rsi
+               	movzwl	4(%r15), %r12d
+               	subq	%r8, %r12

@@ -94260,45 +95084,50 @@
@@@[(3, 9), (11, 17), (34, 35), (56, 60)]@@@
-               	callq	0x476580 <mi_page_free_list_extend>
-               	addw	%r12w, 2(%r15)
+               	callq	0x477470 <mi_page_free_list_extend>
+               	movzwl	2(%r15), %eax
+               	addl	%r12d, %eax
+               	movw	%ax, 2(%r15)
@@@@
-               	jne	0x475ae2 <mi_page_fresh_alloc+0x522>
-               	andb	$-2, 7(%r15)
+               	jne	0x4769a0 <mi_page_fresh_alloc+0x540>
+               	movb	7(%r15), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%r15)
@@@@
-               	nop
@@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)

@@ -94340,21 +95169,22 @@
@@@[(3, 4)]@@@
+               	nopw	%cs:(%rax,%rax)

@@ -94421,16 +95251,18 @@
@@@[(13, 19)]@@@
-               	jne	0x475d60 <mi_page_fresh_alloc+0x7a0>
-               	addq	$1, 3016(%r12)
+               	jne	0x476c30 <mi_page_fresh_alloc+0x7d0>
+               	movq	3016(%r12), %rax
+               	addq	$1, %rax
+               	movq	%rax, 3016(%r12)

@@ -94440,7 +95272,7 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -94451,23 +95283,23 @@
@@@[(3, 5), (11, 13), (15, 23)]@@@
-               	movq	%rdi, %r13
+               	movq	%rdi, %r12
@@@@
-               	movq	(%r14), %r12
+               	movq	(%r14), %r13
@@@@
-               	testq	%r12, %r12
-               	je	0x4763b0 <mi_page_queue_find_free_ex+0x620>
-               	movq	%r12, %rbx
-               	movq	48(%r12), %r12
+               	testq	%r13, %r13
+               	je	0x477290 <mi_page_queue_find_free_ex+0x620>
+               	movq	%r13, %rbx
+               	movq	48(%r13), %r13

@@ -94485,81 +95317,85 @@
@@@[(28, 32), (33, 43), (95, 99)]@@@
-               	andb	$-2, 7(%rbx)
+               	movb	7(%rbx), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%rbx)
@@@@
-               	jne	0x47655c <mi_page_queue_find_free_ex+0x7cc>
-               	movzwl	2(%rbx), %edi
-               	movzwl	4(%rbx), %ebp
-               	cmpw	%bp, %di
-               	jb	0x476496 <mi_page_queue_find_free_ex+0x706>
+               	jne	0x47744a <mi_page_queue_find_free_ex+0x7da>
+               	movzwl	2(%rbx), %eax
+               	movzwl	4(%rbx), %ecx
+               	cmpw	%cx, %ax
+               	jb	0x477377 <mi_page_queue_find_free_ex+0x707>
@@@@
-               	subl	%eax, 16(%rbx)
+               	movl	16(%rbx), %ecx
+               	subl	%eax, %ecx
+               	movl	%ecx, 16(%rbx)

@@ -94570,22 +95406,22 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nop

@@ -94815,140 +95651,146 @@
@@@[(28, 34), (37, 41), (42, 56), (57, 61), (62, 64), (78, 79), (83, 85), (94, 98), (117, 125), (127, 131), (133, 135), (140, 150), (152, 164), (165, 172), (174, 176), (181, 185), (186, 190), (192, 194), (195, 205)]@@@
-               	andb	$-2, 7(%rbx)
-               	jmp	0x475dd0 <mi_page_queue_find_free_ex+0x40>
+               	movb	7(%rbx), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%rbx)
+               	jmp	0x476cb0 <mi_page_queue_find_free_ex+0x40>
@@@@
-               	subl	%eax, 16(%rbx)
+               	movl	16(%rbx), %edx
+               	subl	%eax, %edx
+               	movl	%edx, 16(%rbx)
@@@@
-               	jne	0x47636d <mi_page_queue_find_free_ex+0x5dd>
-               	jmp	0x475dd0 <mi_page_queue_find_free_ex+0x40>
-               	nopl	(%rax)
-               	movq	3024(%r13), %rbp
-               	cmpq	3032(%r13), %rbp
-               	jbe	0x476410 <mi_page_queue_find_free_ex+0x680>
-               	movl	$74, %r12d
+               	jne	0x47724d <mi_page_queue_find_free_ex+0x5dd>
+               	jmp	0x476cb0 <mi_page_queue_find_free_ex+0x40>
+               	nop
+               	movq	3024(%r12), %rbp
+               	cmpq	3032(%r12), %rbp
+               	jbe	0x4772f0 <mi_page_queue_find_free_ex+0x680>
+               	movl	$74, %r13d
@@@@
-               	movq	%r12, 3024(%r13)
-               	movq	%r15, 3032(%r13)
+               	movq	%r13, 3024(%r12)
+               	movq	%r15, 3032(%r12)
@@@@
-               	movq	%r13, %rdi
+               	movq	%r12, %rdi
@@@@
-               	nopl	(%rax)
@@@@
-               	movl	$74, %r12d
+               	movl	$74, %r13d
@@@@
-               	cmpq	3032(%r13), %rbp
-               	ja	0x4763c9 <mi_page_queue_find_free_ex+0x639>
+               	cmpq	3032(%r12), %rbp
+               	ja	0x4772ab <mi_page_queue_find_free_ex+0x63b>
@@@@
-               	callq	0x470870 <_mi_page_free>
-               	jmp	0x476440 <mi_page_queue_find_free_ex+0x6b0>
-               	cmpq	%r12, %rbp
-               	cmovbq	%rbp, %r12
+               	callq	0x4715e0 <_mi_page_free>
+               	jmp	0x477320 <mi_page_queue_find_free_ex+0x6b0>
+               	cmpq	%r13, %rbp
+               	cmovbq	%rbp, %r13
@@@@
-               	jmp	0x476440 <mi_page_queue_find_free_ex+0x6b0>
+               	jmp	0x477320 <mi_page_queue_find_free_ex+0x6b0>
+               	movzwl	%ax, %r8d
+               	movzwl	%cx, %ebp
@@@@
-               	movl	20(%rbx), %r8d
+               	movl	20(%rbx), %edi
@@@@
-               	movzbl	(%rbx), %ecx
-               	testq	%rcx, %rcx
-               	jne	0x476514 <mi_page_queue_find_free_ex+0x784>
-               	jmp	0x4764cc <mi_page_queue_find_free_ex+0x73c>
-               	movb	96(%rax), %cl
+               	movb	(%rbx), %cl
+               	testb	%cl, %cl
+               	jne	0x4773f9 <mi_page_queue_find_free_ex+0x789>
+               	jmp	0x4773b0 <mi_page_queue_find_free_ex+0x740>
+               	movq	96(%rax), %rcx
@@@@
-               	movzbl	(%rbx), %ecx
-               	testq	%rcx, %rcx
-               	jne	0x476514 <mi_page_queue_find_free_ex+0x784>
-               	movq	80(%rax), %r10
-               	movq	%rsi, %r9
-               	subq	%r10, %r9
+               	movb	(%rbx), %cl
+               	testb	%cl, %cl
+               	jne	0x4773f9 <mi_page_queue_find_free_ex+0x789>
+               	movq	80(%rax), %r9
+               	movq	%rsi, %r10
+               	subq	%r9, %r10
@@@@
-               	ja	0x476511 <mi_page_queue_find_free_ex+0x781>
-               	testl	%r8d, %r8d
-               	je	0x476511 <mi_page_queue_find_free_ex+0x781>
+               	ja	0x4773f6 <mi_page_queue_find_free_ex+0x786>
+               	testl	%edi, %edi
+               	je	0x4773f6 <mi_page_queue_find_free_ex+0x786>
+               	movzbl	%cl, %ecx
@@@@
-               	addq	%r10, %rax
+               	addq	%r9, %rax
@@@@
-               	divq	%r8
-               	jmp	0x4764ff <mi_page_queue_find_free_ex+0x76f>
+               	divq	%rdi
+               	jmp	0x4773e4 <mi_page_queue_find_free_ex+0x774>
@@@@
-               	divl	%r8d
-               	movq	%r8, %rax
+               	divl	%edi
+               	movq	%rdi, %rax
@@@@
-               	cmpq	%r8, %rax
+               	cmpq	%rdi, %rax
@@@@
-               	subq	%rcx, %r9
-               	movq	%r9, %rsi
-               	cmpl	$67108864, %r8d         # imm = 0x4000000
-               	cmovbq	%r8, %rsi
-               	subq	%rdi, %rbp
+               	subq	%rcx, %r10
+               	movq	%r10, %rsi
+               	cmpl	$67108864, %edi         # imm = 0x4000000
+               	cmovbq	%rdi, %rsi
+               	subq	%r8, %rbp

@@ -94957,12 +95799,18 @@
@@@[(3, 9), (10, 20)]@@@
-               	callq	0x476580 <mi_page_free_list_extend>
-               	addw	%bp, 2(%rbx)
+               	callq	0x477470 <mi_page_free_list_extend>
+               	movzwl	2(%rbx), %eax
+               	addl	%ebp, %eax
+               	movw	%ax, 2(%rbx)
@@@@
-               	jne	0x47655c <mi_page_queue_find_free_ex+0x7cc>
-               	andb	$-2, 7(%rbx)
-               	andb	$1, 7(%rbx)
+               	jne	0x47744a <mi_page_queue_find_free_ex+0x7da>
+               	movb	7(%rbx), %al
+               	andb	$-2, %al
+               	movb	%al, 7(%rbx)
+               	movb	7(%rbx), %al
+               	andb	$1, %al
+               	movb	%al, 7(%rbx)

@@ -94975,66 +95823,68 @@
@@@[(3, 5), (7, 49), (50, 54), (55, 61), (62, 66), (67, 83), (85, 111), (112, 116)]@@@
-               	movq	%rdx, %r9
+               	movq	%rdx, %r8
@@@@
-               	movl	20(%rdi), %r10d
-               	movl	112(%rax), %edx
-               	cmpl	$3, %edx
-               	jne	0x47659e <mi_page_free_list_extend+0x1e>
-               	movq	72(%rax), %r8
-               	jmp	0x4765aa <mi_page_free_list_extend+0x2a>
-               	movb	96(%rax), %cl
-               	movl	$1, %r8d
-               	shlq	%cl, %r8
-               	movzbl	(%rdi), %ecx
-               	imulq	%rcx, %r8
-               	addq	%rax, %r8
-               	testq	%rcx, %rcx
-               	jne	0x4765f3 <mi_page_free_list_extend+0x73>
-               	addq	80(%rax), %r8
-               	cmpl	$1, %edx
-               	ja	0x4765f3 <mi_page_free_list_extend+0x73>
-               	testl	%r10d, %r10d
-               	je	0x4765f3 <mi_page_free_list_extend+0x73>
-               	movq	%r8, %rax
+               	movl	20(%rdi), %r9d
+               	movl	112(%rax), %r10d
+               	cmpl	$3, %r10d
+               	jne	0x477490 <mi_page_free_list_extend+0x20>
+               	movq	72(%rax), %r11
+               	jmp	0x47749d <mi_page_free_list_extend+0x2d>
+               	movq	96(%rax), %rcx
+               	movl	$1, %r11d
+               	shlq	%cl, %r11
+               	movb	(%rdi), %cl
+               	movzbl	%cl, %edx
+               	movq	%rdx, %rcx
+               	imulq	%r11, %rcx
+               	addq	%rax, %rcx
+               	testb	%dl, %dl
+               	jne	0x4774ea <mi_page_free_list_extend+0x7a>
+               	addq	80(%rax), %rcx
+               	cmpl	$1, %r10d
+               	ja	0x4774ea <mi_page_free_list_extend+0x7a>
+               	testl	%r9d, %r9d
+               	je	0x4774ea <mi_page_free_list_extend+0x7a>
+               	movq	%rcx, %rax
@@@@
-               	je	0x4765da <mi_page_free_list_extend+0x5a>
-               	movq	%r8, %rax
+               	je	0x4774d2 <mi_page_free_list_extend+0x62>
+               	movq	%rcx, %rax
@@@@
-               	divq	%r10
-               	jmp	0x4765e2 <mi_page_free_list_extend+0x62>
-               	movl	%r8d, %eax
+               	divq	%r9
+               	jmp	0x4774d9 <mi_page_free_list_extend+0x69>
+               	movl	%ecx, %eax
@@@@
-               	divl	%r10d
-               	movq	%r10, %rax
+               	divl	%r9d
+               	movq	%r9, %rax
@@@@
-               	leaq	(%r8,%rax), %rcx
-               	cmpq	%r10, %rax
-               	cmovbq	%rcx, %r8
-               	movzwl	2(%rdi), %r11d
-               	movq	%r11, %rdx
-               	imulq	%rsi, %rdx
-               	leaq	(%r8,%rdx), %r10
-               	leaq	(%r9,%r11), %rax
+               	leaq	(%rcx,%rax), %rdx
+               	cmpq	%r9, %rax
+               	cmovbq	%rdx, %rcx
+               	movzwl	2(%rdi), %r10d
+               	movq	%r10, %r11
+               	imulq	%rsi, %r11
+               	leaq	(%rcx,%r11), %r9
+               	leaq	(%r8,%r10), %rax
@@@@
-               	leaq	(%r8,%rax), %rcx
-               	cmpq	%rax, %rdx
-               	jg	0x47663e <mi_page_free_list_extend+0xbe>
-               	addq	$1, %r11
-               	imulq	%rsi, %r11
-               	addq	%r11, %r8
-               	movq	%r10, %rdx
-               	nopw	(%rax,%rax)
-               	movq	%r8, (%rdx)
-               	addq	%rsi, %rdx
-               	addq	%rsi, %r8
-               	cmpq	%rcx, %rdx
-               	jbe	0x476630 <mi_page_free_list_extend+0xb0>
+               	leaq	(%rcx,%rax), %rdx
+               	cmpq	%rax, %r11
+               	jg	0x47752e <mi_page_free_list_extend+0xbe>
+               	addq	$1, %r10
+               	imulq	%rsi, %r10
+               	addq	%r10, %rcx
+               	movq	%r9, %rax
+               	nopl	(%rax)
+               	movq	%rcx, (%rax)
+               	addq	%rsi, %rax
+               	addq	%rsi, %rcx
+               	cmpq	%rdx, %rax
+               	jbe	0x477520 <mi_page_free_list_extend+0xb0>
@@@@
-               	movq	%rax, (%rcx)
-               	movq	%r10, 8(%rdi)
+               	movq	%rax, (%rdx)
+               	movq	%r9, 8(%rdi)

@@ -95046,210 +95896,214 @@
@@@[(3, 6), (10, 16), (17, 19), (20, 22), (38, 40), (52, 53), (57, 58), (79, 89), (90, 94), (97, 99), (111, 113), (150, 156), (160, 164), (205, 209), (216, 222), (244, 256), (285, 289), (293, 298)]@@@
-               	movq	%r8, %r14
+               	movq	%r9, %r14
+               	movq	%r8, %rbx
@@@@
-               	je	0x4766ee <mi_segment_reclaim_or_alloc+0x9e>
-               	addq	$-1, 88(%r14)
+               	je	0x4775ee <mi_segment_reclaim_or_alloc+0xae>
+               	movq	88(%rbx), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 88(%rbx)
@@@@
-               	movq	%rax, 104(%r14)
+               	movq	%rax, 104(%rbx)
@@@@
-               	movq	112(%r14), %rcx
+               	movq	112(%rbx), %rcx
@@@@
-               	nop
+               	nopl	(%rax)
@@@@
+               	movq	%rsi, 24(%rsp)
@@@@
-               	movq	%rsi, 24(%rsp)
@@@@
-               	ja	0x476772 <mi_segment_reclaim_or_alloc+0x122>
-               	movq	593893(%rip), %rdx      # 0x507740 <abandoned_visited_count>
-               	leal	1(%rax), %edi
-               	andl	$4194303, %edi          # imm = 0x3FFFFF
-               	orq	%rcx, %rdi
+               	ja	0x477672 <mi_segment_reclaim_or_alloc+0x132>
+               	movq	591973(%rip), %rdx      # 0x507ec0 <abandoned_visited_count>
+               	leal	1(%rax), %esi
+               	andl	$4194303, %esi          # imm = 0x3FFFFF
+               	orq	%rcx, %rsi
@@@@
-               	cmpxchgq	%rdi, 593680(%rip)      # 0x507680 <abandoned>
-               	je	0x4767cc <mi_segment_reclaim_or_alloc+0x17c>
+               	cmpxchgq	%rsi, 591760(%rip)      # 0x507e00 <abandoned>
+               	je	0x4776cc <mi_segment_reclaim_or_alloc+0x18c>
@@@@
-               	movq	%rax, %rbx
+               	movq	%rax, %rsi
@@@@
-               	movq	%rbp, 16(%rbx)
+               	movq	%rbp, 16(%rsi)
@@@@
-               	subq	$1, 593547(%rip)        # 0x5076c0 <abandoned_count>
-               	addq	$1, 48(%r15)
+               	subq	$1, 591627(%rip)        # 0x507e40 <abandoned_count>
+               	movq	48(%r15), %rax
+               	addq	$1, %rax
+               	movq	%rax, 48(%r15)
@@@@
-               	movq	%r14, 40(%rsp)
-               	movq	%r9, 48(%rsp)
+               	movq	%rbx, 40(%rsp)
+               	movq	%r14, 48(%rsp)
@@@@
-               	movq	48(%rsp), %r9
-               	movq	40(%rsp), %r14
+               	movq	48(%rsp), %r14
+               	movq	40(%rsp), %rbx
@@@@
-               	movq	%r14, %r8
-               	movq	%r9, %rbx
-               	callq	0x473100 <mi_segment_reclaim>
-               	movq	%rbx, %r9
+               	movq	%rbx, %r8
+               	callq	0x473ef0 <mi_segment_reclaim>
@@@@
-               	movq	%r14, %r8
-               	movq	%r9, %rbx
-               	callq	0x473100 <mi_segment_reclaim>
-               	movq	%rbx, %r9
-               	jmp	0x4768e9 <mi_segment_reclaim_or_alloc+0x299>
-               	movq	593348(%rip), %rax      # 0x507700 <abandoned_visited>
-               	nopl	(%rax)
+               	movq	%rbx, %r8
+               	callq	0x473ef0 <mi_segment_reclaim>
+               	jmp	0x4777ea <mi_segment_reclaim_or_alloc+0x2aa>
+               	movq	591433(%rip), %rax      # 0x507e80 <abandoned_visited>
+               	nopw	(%rax,%rax)
@@@@
-               	addq	$1, 424(%rcx)
+               	movq	424(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 424(%rcx)
@@@@
-               	movq	%r14, %r8
-               	callq	0x476c80 <mi_segment_init>
+               	movq	%rbx, %r8
+               	movq	%r14, %r9
+               	callq	0x477ba0 <mi_segment_init>

@@ -95263,24 +96117,23 @@
@@@[(3, 9), (20, 25), (26, 30)]@@@
-               	movq	%r14, %r8
-               	movq	%r9, %rbx
-               	callq	0x473100 <mi_segment_reclaim>
-               	movq	%rbx, %r9
+               	movq	%rbx, %r8
+               	callq	0x473ef0 <mi_segment_reclaim>
@@@@
-               	movq	%r14, %r8
-               	callq	0x476c80 <mi_segment_init>
+               	movq	%rbx, %r8
+               	movq	%r14, %r9
+               	callq	0x477ba0 <mi_segment_init>
@@@@
-               	jmp	0x4769b2 <mi_segment_reclaim_or_alloc+0x362>
-               	nopw	(%rax,%rax)
+               	jmp	0x4778c3 <mi_segment_reclaim_or_alloc+0x383>
+               	nopl	(%rax)

@@ -95291,73 +96144,76 @@
@@@[(22, 26), (79, 83), (86, 91), (92, 96)]@@@
-               	addq	$-1, 56(%r15)
+               	movq	56(%r15), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 56(%r15)
@@@@
-               	jmp	0x476ab2 <mi_segment_find_free+0xa2>
-               	movzbl	96(%r15), %ecx
+               	jmp	0x4779c9 <mi_segment_find_free+0xa9>
+               	movq	96(%r15), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rax, %rdi
+               	movzbl	%al, %eax
+               	movq	%rax, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rax, %rax
-               	jne	0x476b13 <mi_segment_find_free+0x103>
+               	testb	%al, %al
+               	jne	0x477a2b <mi_segment_find_free+0x10b>

@@ -95365,95 +96221,98 @@
@@@[(18, 22), (40, 44), (47, 52), (53, 57), (85, 93)]@@@
-               	addq	$1, 56(%r15)
+               	movq	56(%r15), %rax
+               	addq	$1, %rax
+               	movq	%rax, 56(%r15)
@@@@
-               	jmp	0x476b95 <mi_segment_find_free+0x185>
-               	movzbl	96(%r15), %ecx
+               	jmp	0x477ab3 <mi_segment_find_free+0x193>
+               	movq	96(%r15), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rax, %rdi
+               	movzbl	%al, %eax
+               	movq	%rax, %rdi
+               	imulq	%rsi, %rdi
@@@@
-               	testq	%rax, %rax
-               	jne	0x476bb1 <mi_segment_find_free+0x1a1>
+               	testb	%al, %al
+               	jne	0x477ad1 <mi_segment_find_free+0x1b1>
@@@@
-               	jmp	0x476c61 <mi_segment_find_free+0x251>
-               	movq	56(%r15), %rax
-               	cmpq	64(%r15), %rax
-               	jne	0x476c61 <mi_segment_find_free+0x251>
+               	jmp	0x477b81 <mi_segment_find_free+0x261>
+               	movq	64(%r15), %rax
+               	cmpq	%rax, 56(%r15)
+               	jne	0x477b81 <mi_segment_find_free+0x261>

@@ -95480,406 +96339,400 @@
@@@[(3, 12), (14, 15), (16, 18), (31, 39), (40, 47), (56, 59), (60, 62), (63, 84), (85, 116), (120, 126), (127, 132), (133, 137), (141, 147), (155, 165), (168, 181), (191, 198), (202, 207), (215, 221), (227, 232), (237, 242), (244, 264), (267, 270), (271, 277), (279, 281), (285, 287), (291, 297), (298, 320), (321, 335), (339, 345), (353, 363), (365, 373), (377, 388), (389, 398), (399, 411), (413, 426), (431, 443), (445, 451), (456, 466), (471, 475), (476, 479), (481, 489), (490, 500), (504, 518), (519, 525), (527, 533), (534, 538), (539, 542), (543, 546), (547, 548), (549, 555), (556, 564), (566, 570), (571, 577), (582, 586), (587, 594), (595, 599), (600, 608), (609, 628), (629, 637), (645, 647), (648, 650), (651, 655)]@@@
-               	movq	%r9, 32(%rsp)
-               	movq	%r8, %rbp
-               	movl	%edx, %r12d
-               	movq	%rdi, %r14
+               	movq	%r9, 56(%rsp)
+               	movq	%r8, %r12
+               	movq	%rcx, %r14
+               	movl	%edx, %r13d
+               	movq	%rdi, %rbp
@@@@
-               	movq	%rcx, 112(%rsp)
@@@@
-               	cmpl	$3, %r12d
+               	cmpl	$3, %r13d
@@@@
-               	cmpl	$1, %r12d
-               	movq	%rbx, 72(%rsp)
-               	ja	0x476d1d <mi_segment_init+0x9d>
-               	movq	56(%rbp), %rbx
+               	cmpl	$1, %r13d
+               	movq	%rbx, 80(%rsp)
+               	ja	0x477c35 <mi_segment_init+0x95>
+               	movq	56(%r12), %rbx
@@@@
-               	callq	0x46e150 <mi_option_get>
-               	xorl	%r11d, %r11d
-               	movl	$0, %ecx
-               	movl	$0, %r13d
+               	callq	0x46ee70 <mi_option_get>
+               	xorl	%ecx, %ecx
+               	movl	$0, %edx
@@@@
-               	setne	%r13b
-               	movb	$1, %r11b
+               	setne	%dl
@@@@
-               	movb	%r13b, 9(%rsp)
+               	movb	%dl, 9(%rsp)
@@@@
-               	testq	%r14, %r14
-               	je	0x476e65 <mi_segment_init+0x1e5>
-               	cmpl	$1, %r12d
-               	ja	0x476d8f <mi_segment_init+0x10f>
-               	cmpl	%r12d, 112(%r14)
-               	jne	0x476d8f <mi_segment_init+0x10f>
-               	cmpq	%rbx, 72(%r14)
-               	jne	0x476d8f <mi_segment_init+0x10f>
-               	movq	$0, 16(%r14)
-               	leaq	24(%r14), %rbx
+               	testq	%rbp, %rbp
+               	je	0x477d76 <mi_segment_init+0x1d6>
+               	movq	%r14, 96(%rsp)
+               	cmpl	$1, %r13d
+               	ja	0x477c9c <mi_segment_init+0xfc>
+               	cmpl	%r13d, 112(%rbp)
+               	jne	0x477c9c <mi_segment_init+0xfc>
+               	cmpq	%rbx, 72(%rbp)
+               	jne	0x477c9c <mi_segment_init+0xfc>
+               	movq	$0, 16(%rbp)
+               	leaq	24(%rbp), %r14
@@@@
-               	movups	%xmm0, 104(%r14)
-               	movups	%xmm0, 88(%r14)
-               	movups	%xmm0, 72(%r14)
-               	movups	%xmm0, 56(%r14)
-               	movups	%xmm0, 40(%r14)
-               	movups	%xmm0, 24(%r14)
-               	movq	64(%rsp), %r13
-               	jmp	0x476f76 <mi_segment_init+0x2f6>
-               	movl	%r12d, 52(%rsp)
-               	movq	%rbp, %r12
-               	cmpq	$0, 64(%r14)
-               	je	0x476ea8 <mi_segment_init+0x228>
-               	leaq	121(%r14), %rbx
-               	xorl	%ebp, %ebp
-               	jmp	0x476de5 <mi_segment_init+0x165>
-               	nopl	(%rax)
+               	movups	%xmm0, 104(%rbp)
+               	movups	%xmm0, 88(%rbp)
+               	movups	%xmm0, 72(%rbp)
+               	movups	%xmm0, 56(%rbp)
+               	movups	%xmm0, 40(%rbp)
+               	movups	%xmm0, 24(%rbp)
+               	jmp	0x477e8c <mi_segment_init+0x2ec>
+               	movl	%r13d, 24(%rsp)
+               	movq	%r12, %r14
+               	cmpq	$0, 64(%rbp)
+               	je	0x477dcd <mi_segment_init+0x22d>
+               	movb	9(%rsp), %r13b
+               	leaq	121(%rbp), %rbx
+               	xorl	%r12d, %r12d
+               	jmp	0x477cf5 <mi_segment_init+0x155>
@@@@
-               	je	0x476def <mi_segment_init+0x16f>
-               	andb	$-3, (%rbx)
+               	je	0x477cff <mi_segment_init+0x15f>
+               	movzbl	(%rbx), %eax
+               	andb	$-3, %al
+               	movb	%al, (%rbx)
@@@@
-               	addq	$1, %rbp
-               	movq	64(%r14), %rax
+               	nopl	(%rax)
+               	addq	$1, %r12
+               	movq	64(%rbp), %rax
@@@@
-               	cmpq	%rax, %rbp
-               	jae	0x476eaa <mi_segment_init+0x22a>
+               	cmpq	%rax, %r12
+               	jae	0x477dcf <mi_segment_init+0x22f>
@@@@
-               	je	0x476db0 <mi_segment_init+0x130>
-               	cmpb	$0, 8(%r14)
-               	jne	0x476dd0 <mi_segment_init+0x150>
+               	je	0x477cbd <mi_segment_init+0x11d>
+               	cmpb	$0, 8(%rbp)
+               	jne	0x477ce0 <mi_segment_init+0x140>
@@@@
-               	cmpl	$3, 112(%r14)
-               	jne	0x476e14 <mi_segment_init+0x194>
-               	movq	72(%r14), %rsi
-               	jmp	0x476e21 <mi_segment_init+0x1a1>
-               	movzbl	96(%r14), %ecx
+               	cmpl	$3, 112(%rbp)
+               	jne	0x477d22 <mi_segment_init+0x182>
+               	movq	72(%rbp), %rsi
+               	jmp	0x477d2e <mi_segment_init+0x18e>
+               	movq	96(%rbp), %rcx
@@@@
-               	movq	%rsi, %rdi
-               	imulq	%rax, %rdi
-               	addq	%r14, %rdi
-               	testq	%rax, %rax
-               	jne	0x476e3e <mi_segment_init+0x1be>
-               	movq	80(%r14), %rax
+               	movzbl	%al, %eax
+               	movq	%rax, %rdi
+               	imulq	%rsi, %rdi
+               	addq	%rbp, %rdi
+               	testb	%al, %al
+               	jne	0x477d4d <mi_segment_init+0x1ad>
+               	movq	80(%rbp), %rax
@@@@
-               	je	0x476dd0 <mi_segment_init+0x150>
-               	orb	$8, (%rbx)
-               	jmp	0x476dd0 <mi_segment_init+0x150>
+               	je	0x477ce0 <mi_segment_init+0x140>
+               	movzbl	(%rbx), %eax
+               	orb	$8, %al
+               	jmp	0x477cd1 <mi_segment_init+0x131>
@@@@
-               	je	0x4778cb <mi_segment_init+0xc4b>
-               	movq	%rbp, 104(%rsp)
-               	movq	486200(%rip), %rcx      # 0x4ed9c0 <os_page_size>
+               	je	0x4787c1 <mi_segment_init+0xc21>
+               	movq	484244(%rip), %rcx      # 0x4ee128 <os_page_size>
@@@@
-               	jmp	0x477013 <mi_segment_init+0x393>
+               	leaq	4194303(%rbp), %rcx
+               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
+               	movq	%r14, 96(%rsp)
+               	jbe	0x477f44 <mi_segment_init+0x3a4>
+               	jmp	0x478657 <mi_segment_init+0xab7>
@@@@
-               	movq	%r14, %rdi
-               	movq	64(%rsp), %r13
-               	movq	%r13, %rsi
+               	movq	%rbp, %rdi
+               	movq	88(%rsp), %rsi
@@@@
-               	movq	%r12, %rbp
-               	je	0x476edf <mi_segment_init+0x25f>
+               	movq	%r14, %r12
+               	movl	24(%rsp), %r13d
+               	je	0x477e06 <mi_segment_init+0x266>
@@@@
-               	jne	0x476ef0 <mi_segment_init+0x270>
-               	jmp	0x4778cb <mi_segment_init+0xc4b>
-               	movq	%r12, %rbp
-               	movq	64(%rsp), %r13
-               	movq	%rbp, %r12
-               	movq	$0, 16(%r14)
-               	leaq	24(%r14), %rbx
-               	leaq	-24(%r13), %rdx
-               	xorl	%ebp, %ebp
-               	movq	%rbx, %rdi
+               	jne	0x477e17 <mi_segment_init+0x277>
+               	jmp	0x4787c1 <mi_segment_init+0xc21>
+               	movq	%r14, %r12
+               	movl	24(%rsp), %r13d
+               	movq	$0, 16(%rbp)
+               	leaq	24(%rbp), %r14
+               	movq	88(%rsp), %rax
+               	leaq	-24(%rax), %rdx
+               	xorl	%ebx, %ebx
+               	movq	%r14, %rdi
@@@@
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	shlq	$6, %rbp
-               	movb	%cl, 120(%r14,%rbp)
-               	movzbl	121(%r14,%rbp), %ecx
+               	shlq	$6, %rbx
+               	movb	%cl, 120(%rbp,%rbx)
+               	movzbl	121(%rbp,%rbx), %ecx
@@@@
-               	movb	%dl, 121(%r14,%rbp)
+               	movb	%dl, 121(%rbp,%rbx)
@@@@
-               	movb	%cl, 121(%r14,%rbp)
+               	movb	%cl, 121(%rbp,%rbx)
@@@@
-               	movb	%cl, 121(%r14,%rbp)
-               	movzbl	%al, %ebp
-               	movl	%ebp, %eax
+               	movb	%cl, 121(%rbp,%rbx)
+               	movzbl	%al, %ebx
+               	movl	%ebx, %eax
@@@@
-               	cmpq	%rbp, %r15
-               	ja	0x476f20 <mi_segment_init+0x2a0>
-               	movl	52(%rsp), %eax
-               	movq	%r12, %rbp
-               	movl	%eax, %r12d
-               	movl	%r12d, 112(%r14)
-               	movq	%r15, 64(%r14)
-               	movq	112(%rsp), %rax
-               	movq	%rax, 96(%r14)
-               	movq	72(%rsp), %rax
-               	movq	%rax, 72(%r14)
-               	movq	%r13, 80(%r14)
+               	cmpq	%rbx, %r15
+               	ja	0x477e40 <mi_segment_init+0x2a0>
+               	movq	80(%rsp), %rbx
+               	movl	%r13d, 112(%rbp)
+               	movq	%r15, 64(%rbp)
+               	movq	96(%rsp), %rax
+               	movq	%rax, 96(%rbp)
+               	movq	%rbx, 72(%rbp)
+               	movq	88(%rsp), %rax
+               	movq	%rax, 80(%rbp)
@@@@
-               	xchgq	%rax, 104(%r14)
-               	movq	484952(%rip), %rax      # 0x4ed600 <_mi_heap_main+0xb28>
-               	xorq	%r14, %rax
-               	movq	%rax, 88(%r14)
-               	cmpl	$1, %r12d
-               	ja	0x4778ce <mi_segment_init+0xc4e>
-               	movl	112(%r14), %eax
+               	xchgq	%rax, 104(%rbp)
+               	movq	482986(%rip), %rax      # 0x4edd68 <_mi_heap_main+0xb28>
+               	xorq	%rbp, %rax
+               	movq	%rax, 88(%rbp)
+               	cmpl	$1, %r13d
+               	ja	0x4787c3 <mi_segment_init+0xc23>
+               	movl	112(%rbp), %eax
@@@@
-               	je	0x476fe4 <mi_segment_init+0x364>
-               	xorl	%ebp, %ebp
-               	jmp	0x476fe4 <mi_segment_init+0x364>
+               	je	0x477efa <mi_segment_init+0x35a>
+               	xorl	%r12d, %r12d
+               	jmp	0x477efa <mi_segment_init+0x35a>
@@@@
-               	jmp	0x477010 <mi_segment_init+0x390>
-               	addq	$16, %rbp
-               	movq	$0, (%rbx)
-               	movq	8(%rbp), %rax
-               	movq	%rax, 32(%r14)
+               	jmp	0x477f28 <mi_segment_init+0x388>
+               	addq	$16, %r12
+               	movq	$0, (%r14)
+               	movq	8(%r12), %rax
+               	movq	%rax, 32(%rbp)
@@@@
-               	cmoveq	%rbp, %rcx
-               	movq	%r14, (%rcx)
-               	movq	%r14, 8(%rbp)
-               	jmp	0x4778ce <mi_segment_init+0xc4e>
+               	cmoveq	%r12, %rcx
+               	movq	%rbp, (%rcx)
+               	movq	%rbp, 8(%r12)
+               	jmp	0x4787c3 <mi_segment_init+0xc23>
@@@@
-               	leaq	4194303(%rbp), %rax
-               	movq	%rax, 80(%rsp)
-               	cmpq	$71303167, %rax         # imm = 0x43FFFFF
-               	movl	%r12d, 52(%rsp)
-               	ja	0x477759 <mi_segment_init+0xad9>
-               	movq	525729(%rip), %rax      # 0x4f75d8 <_mi_numa_node_count>
+               	leaq	4194303(%rbp), %rcx
+               	cmpq	$71303167, %rcx         # imm = 0x43FFFFF
+               	movq	%r14, 96(%rsp)
+               	ja	0x478657 <mi_segment_init+0xab7>
+               	movq	523789(%rip), %rax      # 0x4f7d58 <_mi_numa_node_count>
@@@@
-               	je	0x477247 <mi_segment_init+0x5c7>
-               	movq	80(%rsp), %rsi
-               	shrq	$22, %rsi
+               	movq	%rcx, 32(%rsp)
+               	je	0x478836 <mi_segment_init+0xc96>
+               	movq	%rbp, 104(%rsp)
+               	movl	%r13d, 24(%rsp)
+               	movq	%r12, 72(%rsp)
+               	movl	$4294967295, %r10d      # imm = 0xFFFFFFFF
@@@@
-               	movq	%rsi, 24(%rsp)
-               	movq	%rbp, 96(%rsp)
-               	jae	0x477076 <mi_segment_init+0x3f6>
-               	movq	525776(%rip), %r9       # 0x4f7630 <regions_count>
-               	testq	%r9, %r9
-               	je	0x47727a <mi_segment_init+0x5fa>
-               	movq	32(%rsp), %rax
-               	movq	(%rax), %rbp
-               	jmp	0x47714e <mi_segment_init+0x4ce>
-               	movq	525659(%rip), %rax      # 0x4f75d8 <_mi_numa_node_count>
+               	jb	0x477f88 <mi_segment_init+0x3e8>
+               	movq	523741(%rip), %rax      # 0x4f7d58 <_mi_numa_node_count>
@@@@
-               	jne	0x477257 <mi_segment_init+0x5d7>
-               	movq	525727(%rip), %r9       # 0x4f7630 <regions_count>
-               	testq	%r9, %r9
-               	je	0x47727a <mi_segment_init+0x5fa>
-               	movq	32(%rsp), %rax
+               	jne	0x478845 <mi_segment_init+0xca5>
+               	shrq	$22, %rcx
+               	movq	%rcx, 40(%rsp)
+               	movb	10(%rsp), %r9b
+               	movq	523795(%rip), %r12      # 0x4f7db0 <regions_count>
+               	testq	%r12, %r12
+               	je	0x478138 <mi_segment_init+0x598>
+               	movq	56(%rsp), %rax
@@@@
-               	leaq	525708(%rip), %r8       # 0x4f7640 <regions>
-               	notb	%r11b
-               	movq	%r9, %r14
-               	movl	%r11d, 92(%rsp)
-               	movq	%r9, 56(%rsp)
-               	movl	%r10d, 88(%rsp)
-               	jmp	0x4770de <mi_segment_init+0x45e>
+               	leaq	523776(%rip), %r8       # 0x4f7dc0 <regions>
+               	movq	%r12, %r13
+               	movq	%r15, 112(%rsp)
+               	movq	%r12, 64(%rsp)
+               	jmp	0x477fde <mi_segment_init+0x43e>
@@@@
-               	addq	$-1, %r14
-               	je	0x47727a <mi_segment_init+0x5fa>
-               	cmpq	%r9, %rbp
+               	addq	$-1, %r13
+               	je	0x478138 <mi_segment_init+0x598>
+               	cmpq	%r12, %rbp
@@@@
-               	je	0x4770d0 <mi_segment_init+0x450>
-               	movl	%eax, %edx
-               	shrl	$8, %edx
-               	andl	$1, %edx
+               	je	0x477fd0 <mi_segment_init+0x430>
+               	testb	%r9b, %r9b
+               	sete	%dl
+               	movl	%eax, %esi
+               	shrl	$8, %esi
+               	andl	$1, %esi
@@@@
-               	testb	%dl, %r11b
-               	jne	0x4770d0 <mi_segment_init+0x450>
+               	testb	%sil, %dl
+               	jne	0x477fd0 <mi_segment_init+0x430>
@@@@
-               	je	0x4770d0 <mi_segment_init+0x450>
+               	je	0x477fd0 <mi_segment_init+0x430>
+               	movl	%r10d, %r12d
@@@@
-               	leaq	40(%rsp), %rdx
-               	movq	%r8, %r12
-               	callq	0x477a70 <_mi_bitmap_try_find_claim_field>
+               	movq	40(%rsp), %rsi
+               	leaq	48(%rsp), %rdx
+               	movq	%r8, %r14
+               	movl	%r9d, %r15d
+               	callq	0x478980 <_mi_bitmap_try_find_claim_field>
@@@@
-               	movl	88(%rsp), %r10d
-               	movq	56(%rsp), %r9
-               	movl	92(%rsp), %r11d
-               	movq	%r12, %r8
-               	movq	24(%rsp), %rsi
+               	movl	%r15d, %r9d
+               	movl	%r12d, %r10d
+               	movq	64(%rsp), %r12
+               	movq	112(%rsp), %r15
+               	movq	%r14, %r8
@@@@
-               	jmp	0x47723a <mi_segment_init+0x5ba>
-               	testb	%r11b, %r11b
-               	movq	%r9, 56(%rsp)
-               	je	0x4771c5 <mi_segment_init+0x545>
-               	leaq	525533(%rip), %r8       # 0x4f7640 <regions>
-               	movq	%r9, %r12
-               	jmp	0x47717e <mi_segment_init+0x4fe>
-               	nopl	(%rax,%rax)
+               	jmp	0x478121 <mi_segment_init+0x581>
+               	testb	%r9b, %r9b
+               	je	0x4780c1 <mi_segment_init+0x521>
+               	leaq	523605(%rip), %r8       # 0x4f7dc0 <regions>
+               	movq	%r12, %r14
+               	jmp	0x47807e <mi_segment_init+0x4de>
@@@@
-               	addq	$-1, %r12
-               	je	0x47727a <mi_segment_init+0x5fa>
-               	cmpq	%r9, %rbp
+               	addq	$-1, %r14
+               	je	0x478138 <mi_segment_init+0x598>
+               	cmpq	%r12, %rbp
@@@@
-               	movq	%rbp, %r14
-               	shlq	$6, %r14
-               	movq	(%r14,%r8), %rax
+               	movq	%rbp, %r13
+               	shlq	$6, %r13
+               	movq	(%r13,%r8), %rax
@@@@
-               	je	0x477170 <mi_segment_init+0x4f0>
-               	leaq	(%r14,%r8), %rdi
+               	je	0x478070 <mi_segment_init+0x4d0>
+               	leaq	(%r8,%r13), %rdi
@@@@
-               	leaq	40(%rsp), %rdx
+               	movq	40(%rsp), %rsi
+               	leaq	48(%rsp), %rdx
@@@@
-               	callq	0x477a70 <_mi_bitmap_try_find_claim_field>
-               	movq	56(%rsp), %r9
+               	callq	0x478980 <_mi_bitmap_try_find_claim_field>
@@@@
-               	movq	24(%rsp), %rsi
@@@@
-               	je	0x477170 <mi_segment_init+0x4f0>
-               	addq	%r14, %r8
-               	jmp	0x47723a <mi_segment_init+0x5ba>
+               	je	0x478070 <mi_segment_init+0x4d0>
+               	addq	%r13, %r8
+               	jmp	0x478121 <mi_segment_init+0x581>
@@@@
-               	leaq	525426(%rip), %r8       # 0x4f7640 <regions>
-               	movq	%r9, %rbx
-               	jmp	0x4771ee <mi_segment_init+0x56e>
-               	nopw	%cs:(%rax,%rax)
+               	leaq	523510(%rip), %r8       # 0x4f7dc0 <regions>
+               	movq	%r12, %rbx
+               	jmp	0x4780da <mi_segment_init+0x53a>
+               	nop
@@@@
-               	je	0x47727a <mi_segment_init+0x5fa>
-               	cmpq	%r9, %rbp
+               	je	0x478138 <mi_segment_init+0x598>
+               	cmpq	%r12, %rbp
@@@@
-               	movq	%rbp, %r12
-               	shlq	$6, %r12
-               	movq	(%r12,%r8), %rax
+               	movq	%rbp, %r14
+               	shlq	$6, %r14
+               	movq	(%r14,%r8), %rax
@@@@
-               	jne	0x4771e0 <mi_segment_init+0x560>
-               	leaq	(%r12,%r8), %rdi
+               	jne	0x4780d0 <mi_segment_init+0x530>
+               	leaq	(%r14,%r8), %rdi
@@@@
-               	leaq	40(%rsp), %rdx
-               	movq	%r8, %r14
-               	callq	0x477a70 <_mi_bitmap_try_find_claim_field>
+               	movq	40(%rsp), %rsi
+               	leaq	48(%rsp), %rdx
+               	movq	%r8, %r13
+               	callq	0x478980 <_mi_bitmap_try_find_claim_field>
@@@@
-               	movq	56(%rsp), %r9
-               	movq	%r14, %r8
-               	movq	24(%rsp), %rsi
+               	movq	%r13, %r8
@@@@
-               	je	0x4771e0 <mi_segment_init+0x560>
-               	addq	%r12, %r8
-               	movq	32(%rsp), %rax
+               	je	0x4780d0 <mi_segment_init+0x530>
+               	addq	%r14, %r8
+               	movq	72(%rsp), %r12
+               	movl	24(%rsp), %r13d
+               	movq	56(%rsp), %rax
@@@@
-               	jmp	0x477424 <mi_segment_init+0x7a4>
-               	movl	%r11d, %ebx
-               	callq	0x46f500 <_mi_os_numa_node_count_get>
-               	movl	%ebx, %r11d
-               	jmp	0x477040 <mi_segment_init+0x3c0>
-               	movl	%r11d, %ebx
-               	callq	0x477950 <_mi_os_numa_node_get>
-               	movl	%ebx, %r11d
-               	movq	24(%rsp), %rsi
-               	movl	%eax, %r10d
-               	movq	525247(%rip), %r9       # 0x4f7630 <regions_count>
-               	testq	%r9, %r9
-               	jne	0x47709a <mi_segment_init+0x41a>
-               	movb	10(%rsp), %bl
-               	movq	525227(%rip), %rax      # 0x4f7630 <regions_count>
+               	jmp	0x4782f1 <mi_segment_init+0x751>
+               	movb	9(%rsp), %bl
+               	movb	10(%rsp), %bpl
+               	movq	523368(%rip), %rax      # 0x4f7db0 <regions_count>
@@@@
-               	ja	0x47773e <mi_segment_init+0xabe>
-               	testb	%r13b, %r13b
-               	je	0x4772a8 <mi_segment_init+0x628>
+               	movq	72(%rsp), %r12
+               	movl	24(%rsp), %r13d
+               	ja	0x47863c <mi_segment_init+0xa9c>
+               	testb	%bl, %bl
+               	je	0x478174 <mi_segment_init+0x5d4>
@@@@
-               	testb	%bl, %bl
+               	testb	%bpl, %bpl
@@@@
+               	testb	%bl, %bl
+               	setne	%dl
@@@@
-               	andb	%cl, %r13b
-               	movb	%r13b, 15(%rsp)
+               	andb	%cl, %dl
+               	movb	%dl, 15(%rsp)

@@ -95889,70 +96742,70 @@
@@@[(19, 23), (32, 37), (38, 41), (42, 44), (45, 49), (50, 54), (55, 62), (63, 69), (70, 80), (81, 82), (89, 99)]@@@
-               	movzbl	12(%rsp), %ecx
+               	xorl	%ecx, %ecx
+               	cmpb	$0, 12(%rsp)
+               	setne	%cl
@@@@
-               	callq	0x46f1b0 <_mi_warning_message>
-               	movq	24(%rsp), %rsi
-               	jmp	0x47741c <mi_segment_init+0x79c>
+               	callq	0x46fed0 <_mi_warning_message>
+               	jmp	0x4782e9 <mi_segment_init+0x749>
@@@@
-               	movq	24(%rsp), %rsi
-               	jmp	0x47741c <mi_segment_init+0x79c>
+               	jmp	0x4782e9 <mi_segment_init+0x749>
@@@@
-               	leaq	525021(%rip), %rbx      # 0x4f7640 <regions>
+               	leaq	523154(%rip), %rsi      # 0x4f7dc0 <regions>
@@@@
-               	xchgq	%rcx, 48(%rdx,%rbx)
-               	leaq	(%rdx,%rbx), %rdi
+               	xchgq	%rcx, 48(%rdx,%rsi)
+               	leaq	(%rdx,%rsi), %rdi
@@@@
-               	movq	$0, 16(%rdx,%rbx)
-               	movzbl	14(%rsp), %ecx
+               	movq	$0, 16(%rdx,%rsi)
+               	movsbq	14(%rsp), %rcx
@@@@
-               	movq	%rcx, 24(%rdx,%rbx)
-               	xorl	%ecx, %ecx
-               	subb	12(%rsp), %cl
+               	movq	%rcx, 24(%rdx,%rsi)
+               	movb	12(%rsp), %cl
+               	andb	$1, %cl
+               	negb	%cl
@@@@
-               	movq	%rcx, 32(%rdx,%rbx)
-               	movq	$0, 40(%rdx,%rbx)
-               	movq	$0, 40(%rsp)
+               	movq	%rcx, 32(%rdx,%rsi)
+               	movq	$0, 40(%rdx,%rsi)
+               	movq	$0, 48(%rsp)
@@@@
-               	cmpq	$268435455, 80(%rsp)    # imm = 0xFFFFFFF
-               	movq	24(%rsp), %rsi
-               	ja	0x4773dc <mi_segment_init+0x75c>
-               	testq	%rsi, %rsi
-               	je	0x4773da <mi_segment_init+0x75a>
+               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
+               	ja	0x4782a9 <mi_segment_init+0x709>
+               	movq	40(%rsp), %rcx
+               	testq	%rcx, %rcx
+               	je	0x4782a7 <mi_segment_init+0x707>
@@@@
-               	movl	%esi, %ecx
@@@@
-               	leaq	(%rbx,%rdx), %r8
-               	movq	%rax, 8(%rdx,%rbx)
-               	movzbl	15(%rsp), %eax
-               	movzbl	13(%rsp), %ebx
-               	addq	%rbx, %rbx
+               	leaq	(%rsi,%rdx), %r8
+               	movq	%rax, 8(%rdx,%rsi)
+               	movzbl	13(%rsp), %eax
+               	addq	%rax, %rax
+               	movzbl	15(%rsp), %ebx

@@ -95960,35 +96813,33 @@
@@@[(7, 13), (14, 24), (26, 27), (34, 39), (42, 46)]@@@
-               	movq	40(%rsp), %rax
-               	movq	%rax, %rbp
-               	shrq	$6, %rbp
+               	movq	48(%rsp), %rax
+               	movq	%rax, %rsi
+               	shrq	$6, %rsi
@@@@
-               	movq	80(%rsp), %r10
-               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
-               	ja	0x47746c <mi_segment_init+0x7ec>
-               	testq	%rsi, %rsi
-               	je	0x47746a <mi_segment_init+0x7ea>
+               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
+               	ja	0x478339 <mi_segment_init+0x799>
+               	movq	40(%rsp), %rcx
+               	testq	%rcx, %rcx
+               	je	0x478337 <mi_segment_init+0x797>
@@@@
-               	movl	%esi, %ecx
@@@@
-               	movq	24(%r8,%rbp,8), %rax
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax,%rax)
+               	movq	24(%r8,%rsi,8), %rax
+               	nop
@@@@
-               	cmpxchgq	%rcx, 24(%r8,%rbp,8)
-               	jne	0x477480 <mi_segment_init+0x800>
+               	cmpxchgq	%rcx, 24(%r8,%rsi,8)
+               	jne	0x478340 <mi_segment_init+0x7a0>

@@ -95998,86 +96849,89 @@
@@@[(3, 13), (14, 18), (19, 32), (33, 40), (41, 45), (46, 58), (60, 61), (65, 70), (74, 76), (78, 92), (93, 95), (97, 99), (101, 104), (105, 108), (112, 127), (128, 134), (135, 139)]@@@
-               	movq	40(%rsp), %rbx
-               	movl	%ebx, %r14d
-               	andl	$63, %r14d
-               	shlq	$22, %r14
-               	addq	%r9, %r14
+               	movq	48(%rsp), %rdi
+               	movl	%edi, %ebp
+               	andl	$63, %ebp
+               	shlq	$22, %rbp
+               	addq	%r9, %rbp
@@@@
-               	je	0x477500 <mi_segment_init+0x880>
-               	movq	%rbx, %rdx
+               	je	0x4783c3 <mi_segment_init+0x823>
+               	movq	%rdi, %rdx
@@@@
-               	movq	$-1, %rdi
-               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
-               	ja	0x47753d <mi_segment_init+0x8bd>
-               	testq	%rsi, %rsi
-               	je	0x47753b <mi_segment_init+0x8bb>
-               	movl	%ebx, %eax
+               	movq	$-1, %rsi
+               	cmpq	$268435455, 32(%rsp)    # imm = 0xFFFFFFF
+               	ja	0x47840d <mi_segment_init+0x86d>
+               	movq	40(%rsp), %rcx
+               	testq	%rcx, %rcx
+               	je	0x47840b <mi_segment_init+0x86b>
+               	movl	%edi, %eax
@@@@
-               	movq	$-1, %rdi
-               	movl	%esi, %ecx
-               	shlq	%cl, %rdi
-               	notq	%rdi
+               	movq	$-1, %rsi
+               	shlq	%cl, %rsi
+               	notq	%rsi
@@@@
-               	shlq	%cl, %rdi
-               	jmp	0x47753d <mi_segment_init+0x8bd>
+               	shlq	%cl, %rsi
+               	jmp	0x47840d <mi_segment_init+0x86d>
@@@@
-               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
-               	ja	0x477605 <mi_segment_init+0x985>
-               	testq	%rsi, %rsi
-               	je	0x477603 <mi_segment_init+0x983>
-               	movl	%ebx, %eax
+               	movq	32(%rsp), %rbx
+               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
+               	ja	0x4784e6 <mi_segment_init+0x946>
+               	movq	40(%rsp), %rcx
+               	testq	%rcx, %rcx
+               	je	0x4784e4 <mi_segment_init+0x944>
+               	movl	%edi, %eax
@@@@
-               	movl	%esi, %ecx
@@@@
-               	jmp	0x477605 <mi_segment_init+0x985>
-               	xorl	%edi, %edi
+               	movq	32(%rsp), %rbx
+               	jmp	0x4784e6 <mi_segment_init+0x946>
+               	xorl	%esi, %esi
@@@@
-               	orq	%rdi, %rcx
+               	orq	%rsi, %rcx
@@@@
-               	jne	0x477550 <mi_segment_init+0x8d0>
-               	andq	%rdi, %rax
-               	cmpq	%rdi, %rax
-               	je	0x47761c <mi_segment_init+0x99c>
-               	movq	%r9, 32(%rsp)
-               	movq	%r8, %r13
+               	jne	0x478420 <mi_segment_init+0x880>
+               	andq	%rsi, %rax
+               	cmpq	%rsi, %rax
+               	movq	32(%rsp), %rbx
+               	je	0x4784fd <mi_segment_init+0x95d>
+               	movq	%rdi, 64(%rsp)
+               	movq	%r9, 56(%rsp)
+               	movq	%r8, 24(%rsp)
@@@@
-               	movq	%r10, %rsi
+               	movq	%rbx, %rsi
@@@@
-               	movq	%r14, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	movq	%r10, %rbp
-               	callq	0x470fa0 <mi_os_commitx>
+               	callq	0x471d10 <mi_os_commitx>
@@@@
-               	je	0x4775bb <mi_segment_init+0x93b>
-               	movq	%rbp, %r10
+               	je	0x478498 <mi_segment_init+0x8f8>
@@@@
-               	movq	24(%rsp), %rsi
-               	movq	%r13, %r8
-               	movq	32(%rsp), %r9
-               	jmp	0x47761c <mi_segment_init+0x99c>
-               	movq	40(%rsp), %rdx
-               	cmpq	$268435455, %rbp        # imm = 0xFFFFFFF
-               	jbe	0x4775d3 <mi_segment_init+0x953>
+               	movq	32(%rsp), %rbx
+               	movq	24(%rsp), %r8
+               	movq	56(%rsp), %r9
+               	movq	64(%rsp), %rdi
+               	jmp	0x4784fd <mi_segment_init+0x95d>
+               	movq	48(%rsp), %rdx
+               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
+               	jbe	0x4784b2 <mi_segment_init+0x912>
@@@@
-               	movq	%r13, %rbp
-               	jmp	0x477734 <mi_segment_init+0xab4>
-               	movq	24(%rsp), %rcx
+               	movq	24(%rsp), %rdi
+               	jmp	0x478632 <mi_segment_init+0xa92>
+               	movq	40(%rsp), %rcx
@@@@
-               	movq	%r13, %rbp
-               	je	0x47772d <mi_segment_init+0xaad>
+               	movq	24(%rsp), %rdi
+               	je	0x47862b <mi_segment_init+0xa8b>

@@ -96086,169 +96940,168 @@
@@@[(6, 8), (13, 33), (34, 41), (42, 81), (82, 90), (91, 93), (94, 101), (102, 104), (105, 111), (115, 122), (123, 136), (146, 148), (156, 162), (174, 178), (181, 186), (188, 193), (195, 199), (213, 215), (218, 226), (244, 246)]@@@
-               	movq	%rbx, %rax
+               	movq	%rdi, %rax
@@@@
-               	leaq	40(%r8), %rdx
-               	movq	40(%rsp), %rbp
-               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
-               	jbe	0x477647 <mi_segment_init+0x9c7>
-               	shrq	$6, %rbp
-               	movq	(%rdx,%rbp,8), %rax
-               	testq	%rax, %rax
-               	je	0x477711 <mi_segment_init+0xa91>
-               	leaq	(%rdx,%rbp,8), %rdx
-               	xorl	%edi, %edi
-               	jmp	0x4776a5 <mi_segment_init+0xa25>
-               	movl	%ebp, %eax
+               	movq	48(%rsp), %rdx
+               	movq	$-1, %rsi
+               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
+               	ja	0x47853c <mi_segment_init+0x99c>
+               	movq	40(%rsp), %rcx
+               	testq	%rcx, %rcx
+               	je	0x47853a <mi_segment_init+0x99a>
+               	movl	%edx, %eax
@@@@
-               	movq	$-1, %rdi
-               	movl	%esi, %ecx
-               	shlq	%cl, %rdi
-               	notq	%rdi
+               	movq	$-1, %rsi
+               	shlq	%cl, %rsi
+               	notq	%rsi
@@@@
-               	shlq	%cl, %rdi
-               	testq	%rsi, %rsi
-               	cmoveq	%rsi, %rdi
-               	shrq	$6, %rbp
-               	movq	(%rdx,%rbp,8), %rcx
-               	testq	%rdi, %rcx
-               	je	0x477711 <mi_segment_init+0xa91>
-               	leaq	(%rdx,%rbp,8), %rdx
-               	cmpq	$268435455, %r10        # imm = 0xFFFFFFF
-               	jbe	0x477689 <mi_segment_init+0xa09>
-               	xorl	%edi, %edi
-               	jmp	0x4776a5 <mi_segment_init+0xa25>
-               	movq	$-1, %rdi
-               	testq	%rsi, %rsi
-               	je	0x4776a5 <mi_segment_init+0xa25>
-               	movl	%esi, %ecx
-               	shlq	%cl, %rdi
-               	notq	%rdi
+               	shlq	%cl, %rsi
+               	movq	32(%rsp), %rbx
+               	jmp	0x47853c <mi_segment_init+0x99c>
+               	xorl	%esi, %esi
+               	shrq	$6, %rdx
+               	movq	40(%r8,%rdx,8), %rax
+               	testq	%rsi, %rax
+               	je	0x47860f <mi_segment_init+0xa6f>
+               	movq	48(%rsp), %rdx
+               	cmpq	$268435455, %rbx        # imm = 0xFFFFFFF
+               	jbe	0x478560 <mi_segment_init+0x9c0>
+               	xorl	%esi, %esi
+               	jmp	0x478592 <mi_segment_init+0x9f2>
+               	movq	40(%rsp), %rcx
+               	testq	%rcx, %rcx
+               	je	0x47858b <mi_segment_init+0x9eb>
+               	movl	%edx, %eax
+               	andl	$63, %eax
+               	movq	$-1, %rsi
+               	shlq	%cl, %rsi
+               	notq	%rsi
@@@@
-               	shlq	%cl, %rdi
-               	notq	%rdi
+               	shlq	%cl, %rsi
+               	movq	32(%rsp), %rbx
+               	notq	%rsi
+               	jmp	0x478592 <mi_segment_init+0x9f2>
+               	movq	$-1, %rsi
+               	shrq	$6, %rdx
@@@@
-               	andq	%rdi, (%rdx)
+               	andq	%rsi, 40(%r8,%rdx,8)
@@@@
-               	je	0x4776e6 <mi_segment_init+0xa66>
-               	movq	%r9, %r13
-               	movq	%r8, %rbp
+               	movq	%r9, 56(%rsp)
+               	movq	%rdi, 64(%rsp)
+               	je	0x4785eb <mi_segment_init+0xa4b>
+               	movq	%r8, 24(%rsp)
@@@@
-               	andq	$-4194304, %r10         # imm = 0xFFC00000
+               	andq	$-4194304, %rbx         # imm = 0xFFC00000
@@@@
-               	movq	%r14, %rdi
-               	movq	%r10, %rsi
-               	callq	0x477d10 <_mi_os_unreset>
+               	movq	%rbp, %rdi
+               	movq	%rbx, %rsi
+               	callq	0x478c20 <_mi_os_unreset>
@@@@
-               	movq	%rbp, %r8
-               	movq	%r13, %r9
-               	jmp	0x477711 <mi_segment_init+0xa91>
+               	movq	24(%rsp), %r8
+               	movq	56(%rsp), %r9
+               	movq	64(%rsp), %rdi
+               	jmp	0x47860f <mi_segment_init+0xa6f>
@@@@
-               	movq	%rbx, 32(%rsp)
-               	movq	%r8, %r13
-               	movq	%r9, %rbp
-               	movq	%r10, %rbx
-               	callq	0x46e150 <mi_option_get>
-               	movq	%rbx, %r10
-               	movq	%rbp, %r9
-               	movq	%r13, %r8
+               	movq	%r8, %rbx
+               	callq	0x46ee70 <mi_option_get>
+               	movq	64(%rsp), %rdi
+               	movq	56(%rsp), %r9
+               	movq	%rbx, %r8
@@@@
-               	addq	%rbx, %r8
+               	addq	%rdi, %r8
@@@@
-               	andq	%rsi, 16(%rbp,%rdx,8)
-               	leaq	83939(%rip), %rdi       # 0x48bf28 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
-               	movq	96(%rsp), %rbp
+               	andq	%rsi, 16(%rdi,%rdx,8)
+               	leaq	84901(%rip), %rdi       # 0x48d1e8 <typeinfo name for kotlin::gc::GCSchedulerData+0x18d7>
+               	movq	104(%rsp), %rbp
@@@@
-               	callq	0x477b30 <_mi_arena_alloc_aligned>
-               	movq	%rax, %r14
+               	callq	0x478a40 <_mi_arena_alloc_aligned>
+               	movq	%rax, %rbp
@@@@
-               	testq	%r14, %r14
-               	movq	104(%rsp), %rbp
-               	je	0x4778cb <mi_segment_init+0xc4b>
+               	testq	%rbp, %rbp
+               	je	0x4787c1 <mi_segment_init+0xc21>
@@@@
-               	movq	64(%rsp), %r13
-               	jne	0x4777e2 <mi_segment_init+0xb62>
-               	movq	%r8, 32(%rsp)
+               	jne	0x4786d8 <mi_segment_init+0xb38>
+               	movq	%r8, 24(%rsp)
@@@@
-               	movq	%r14, %rdi
-               	movq	%r13, %rsi
+               	movq	%rbp, %rdi
+               	movq	88(%rsp), %rsi
@@@@
-               	movq	%r8, (%r14)
+               	movq	%r8, (%rbp)
@@@@
-               	movb	%cl, 8(%r14)
-               	movb	%al, 9(%r14)
-               	movq	112(%rbp), %rcx
-               	leaq	489661(%rip), %rax      # 0x4ef0c0 <_mi_stats_main>
+               	movb	%cl, 8(%rbp)
+               	movb	%al, 9(%rbp)
+               	movq	112(%r12), %rcx
+               	leaq	487751(%rip), %rax      # 0x4ef840 <_mi_stats_main>
@@@@
-               	nopl	(%rax)
+               	nop

@@ -96256,30 +97109,32 @@
@@@[(20, 24), (28, 30), (33, 39)]@@@
-               	addq	$1, (%rcx)
+               	movq	(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rcx)
@@@@
-               	movq	%r14, %rdi
+               	movq	%rbp, %rdi
@@@@
-               	callq	0x471290 <_mi_mem_free>
-               	xorl	%r14d, %r14d
-               	movq	%r14, %rax
+               	callq	0x472020 <_mi_mem_free>
+               	xorl	%ebp, %ebp
+               	movq	%rbp, %rax

@@ -96292,28 +97147,36 @@
@@@[(6, 10), (11, 23), (24, 41), (45, 46)]@@@
-               	addq	$1, 8(%rcx)
+               	movq	8(%rcx), %rax
+               	addq	$1, %rax
+               	movq	%rax, 8(%rcx)
@@@@
-               	addq	56(%rbp), %rax
-               	movq	%rax, 56(%rbp)
-               	cmpq	64(%rbp), %rax
-               	jbe	0x477914 <mi_segment_init+0xc94>
-               	movq	%rax, 64(%rbp)
-               	movq	72(%rbp), %rax
+               	addq	56(%r12), %rax
+               	movq	%rax, 56(%r12)
+               	cmpq	64(%r12), %rax
+               	jbe	0x478814 <mi_segment_init+0xc74>
+               	movq	%rax, 64(%r12)
+               	movq	72(%r12), %rax
@@@@
-               	movq	%rax, 72(%rbp)
-               	cmpq	80(%rbp), %rax
-               	jbe	0x476ef0 <mi_segment_init+0x270>
-               	movq	%rax, 80(%rbp)
-               	jmp	0x476ef0 <mi_segment_init+0x270>
+               	movq	%rax, 72(%r12)
+               	cmpq	80(%r12), %rax
+               	jbe	0x477e17 <mi_segment_init+0x277>
+               	movq	%rax, 80(%r12)
+               	jmp	0x477e17 <mi_segment_init+0x277>
+               	callq	0x470220 <_mi_os_numa_node_count_get>
+               	movq	32(%rsp), %rcx
+               	jmp	0x477f59 <mi_segment_init+0x3b9>
+               	callq	0x478870 <_mi_os_numa_node_get>
+               	movq	32(%rsp), %rcx
+               	movl	%eax, %r10d
+               	jmp	0x477f88 <mi_segment_init+0x3e8>
@@@@
-               	movq	24(%rsp), %rsi

@@ -96321,15 +97184,15 @@
@@@[(3, 15), (17, 19)]@@@
-               	movq	523381(%rip), %r14      # 0x4f75d8 <_mi_numa_node_count>
-               	testq	%r14, %r14
-               	je	0x4779dc <_mi_os_numa_node_get+0x8c>
-               	xorl	%ebx, %ebx
-               	cmpq	$2, %r14
-               	jb	0x4779cd <_mi_os_numa_node_get+0x7d>
+               	movq	521429(%rip), %rbx      # 0x4f7d58 <_mi_numa_node_count>
+               	testq	%rbx, %rbx
+               	je	0x4788f7 <_mi_os_numa_node_get+0x87>
+               	xorl	%eax, %eax
+               	cmpq	$2, %rbx
+               	jb	0x4788ea <_mi_os_numa_node_get+0x7a>
@@@@
-               	xorl	%ebx, %ebx
+               	xorl	%r14d, %r14d

@@ -96337,108 +97200,105 @@
@@@[(3, 20), (21, 28), (29, 34), (39, 45), (46, 50), (51, 65), (66, 70), (72, 74), (76, 78), (79, 93), (94, 100)]@@@
-               	jne	0x4779a6 <_mi_os_numa_node_get+0x56>
-               	movq	16(%rsp), %rbx
-               	cmpq	%r14, %rbx
-               	jb	0x4779cd <_mi_os_numa_node_get+0x7d>
-               	movq	%rbx, %rax
-               	orq	%r14, %rax
-               	shrq	$32, %rax
-               	je	0x4779c4 <_mi_os_numa_node_get+0x74>
-               	movq	%rbx, %rax
+               	movq	16(%rsp), %rax
+               	cmovneq	%r14, %rax
+               	cmpq	%rbx, %rax
+               	jb	0x4788ea <_mi_os_numa_node_get+0x7a>
+               	movq	%rax, %rcx
+               	orq	%rbx, %rcx
+               	shrq	$32, %rcx
+               	je	0x4788e4 <_mi_os_numa_node_get+0x74>
@@@@
-               	divq	%r14
-               	movq	%rdx, %rbx
-               	jmp	0x4779cd <_mi_os_numa_node_get+0x7d>
-               	movl	%ebx, %eax
+               	divq	%rbx
+               	movq	%rdx, %rax
+               	jmp	0x4788ea <_mi_os_numa_node_get+0x7a>
@@@@
-               	divl	%r14d
-               	movl	%edx, %ebx
-               	movl	%ebx, %eax
+               	divl	%ebx
+               	movl	%edx, %eax
@@@@
-               	movq	523253(%rip), %r14      # 0x4f75d8 <_mi_numa_node_count>
-               	testq	%r14, %r14
-               	jne	0x477968 <_mi_os_numa_node_get+0x18>
+               	movq	521306(%rip), %rbx      # 0x4f7d58 <_mi_numa_node_count>
+               	testq	%rbx, %rbx
+               	jne	0x478888 <_mi_os_numa_node_get+0x18>
@@@@
-               	callq	0x46e150 <mi_option_get>
-               	movq	%rax, %r14
+               	callq	0x46ee70 <mi_option_get>
+               	movq	%rax, %rbx
@@@@
-               	jg	0x477a4c <_mi_os_numa_node_get+0xfc>
-               	movl	$4294967295, %r14d      # imm = 0xFFFFFFFF
-               	leaq	81674(%rip), %r15       # 0x48b911 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
-               	leaq	16(%rsp), %rbx
-               	cmpl	$255, %r14d
-               	je	0x477a42 <_mi_os_numa_node_get+0xf2>
-               	leal	2(%r14), %ecx
+               	jg	0x478961 <_mi_os_numa_node_get+0xf1>
+               	movl	$4294967295, %ebx       # imm = 0xFFFFFFFF
+               	leaq	82608(%rip), %r14       # 0x48cbd1 <typeinfo name for kotlin::gc::GCSchedulerData+0x12c0>
+               	leaq	16(%rsp), %r15
+               	cmpl	$255, %ebx
+               	je	0x478959 <_mi_os_numa_node_get+0xe9>
+               	leal	2(%rbx), %ecx
@@@@
-               	movq	%rbx, %rdi
-               	movq	%r15, %rdx
+               	movq	%r15, %rdi
+               	movq	%r14, %rdx
@@@@
-               	movq	%rbx, %rdi
+               	movq	%r15, %rdi
@@@@
-               	addl	$1, %r14d
+               	addl	$1, %ebx
@@@@
-               	je	0x477a0c <_mi_os_numa_node_get+0xbc>
-               	jmp	0x477a48 <_mi_os_numa_node_get+0xf8>
-               	movl	$256, %r14d             # imm = 0x100
-               	addl	$1, %r14d
-               	movq	%r14, 523141(%rip)      # 0x4f75d8 <_mi_numa_node_count>
-               	leaq	81623(%rip), %rdi       # 0x48b931 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
-               	movq	%r14, %rsi
+               	je	0x478926 <_mi_os_numa_node_get+0xb6>
+               	jmp	0x47895e <_mi_os_numa_node_get+0xee>
+               	movl	$256, %ebx              # imm = 0x100
+               	addl	$1, %ebx
+               	movq	%rbx, 521200(%rip)      # 0x4f7d58 <_mi_numa_node_count>
+               	leaq	82562(%rip), %rdi       # 0x48cbf1 <typeinfo name for kotlin::gc::GCSchedulerData+0x12e0>
+               	movq	%rbx, %rsi
@@@@
-               	callq	0x46de30 <_mi_verbose_message>
-               	jmp	0x477968 <_mi_os_numa_node_get+0x18>
-               	nopl	(%rax)
+               	callq	0x46eb50 <_mi_verbose_message>
+               	jmp	0x478888 <_mi_os_numa_node_get+0x18>
+               	nop

@@ -96470,9 +97330,9 @@
@@@[(3, 9)]@@@
-               	movq	%r8, %r13
-               	movq	%rcx, %r12
-               	movq	%rdx, %r15
+               	movq	%r8, %r14
+               	movq	%rcx, %r15
+               	movq	%rdx, %r12

@@ -96480,106 +97340,107 @@
@@@[(8, 12), (14, 18), (22, 28), (29, 35), (37, 39), (41, 45), (47, 51), (52, 56), (62, 70), (79, 83), (84, 85), (88, 92), (93, 97), (112, 122), (136, 140), (142, 143), (144, 147), (148, 152), (153, 159)]@@@
-               	je	0x477c96 <_mi_arena_alloc_aligned+0x166>
-               	movq	%r12, 24(%rsp)
+               	je	0x478bab <_mi_arena_alloc_aligned+0x16b>
+               	movq	%r15, 24(%rsp)
@@@@
-               	movq	522816(%rip), %rax      # 0x4f75d8 <_mi_numa_node_count>
-               	xorl	%r14d, %r14d
+               	movq	520880(%rip), %rax      # 0x4f7d58 <_mi_numa_node_count>
+               	xorl	%r13d, %r13d
@@@@
-               	leaq	489424(%rip), %rbp      # 0x4ef380 <mi_arenas>
-               	xorl	%r12d, %r12d
-               	jmp	0x477bfe <_mi_arena_alloc_aligned+0xce>
+               	leaq	487488(%rip), %rbp      # 0x4efb00 <mi_arenas>
+               	xorl	%r15d, %r15d
+               	jmp	0x478b0f <_mi_arena_alloc_aligned+0xcf>
@@@@
-               	cmpb	$0, (%r15)
-               	je	0x477c15 <_mi_arena_alloc_aligned+0xe5>
-               	movq	%r12, %rsi
+               	cmpb	$0, (%r12)
+               	je	0x478b26 <_mi_arena_alloc_aligned+0xe6>
+               	movq	%r15, %rsi
@@@@
-               	movq	%r15, %r8
+               	movq	%r12, %r8
@@@@
-               	pushq	%r13
-               	callq	0x477e30 <mi_arena_alloc_from>
+               	pushq	%r14
+               	callq	0x478d40 <mi_arena_alloc_from>
@@@@
-               	jne	0x477ce5 <_mi_arena_alloc_aligned+0x1b5>
-               	addq	$1, %r12
+               	jne	0x478bff <_mi_arena_alloc_aligned+0x1bf>
+               	addq	$1, %r15
@@@@
-               	cmpq	$64, %r12
-               	je	0x477c1d <_mi_arena_alloc_aligned+0xed>
+               	cmpq	$64, %r15
+               	je	0x478b2e <_mi_arena_alloc_aligned+0xee>
@@@@
-               	js	0x477bc0 <_mi_arena_alloc_aligned+0x90>
-               	cmpl	%r14d, %eax
-               	jne	0x477bf0 <_mi_arena_alloc_aligned+0xc0>
-               	jmp	0x477bc0 <_mi_arena_alloc_aligned+0x90>
+               	js	0x478ad0 <_mi_arena_alloc_aligned+0x90>
+               	cmpl	%r13d, %eax
+               	jne	0x478b01 <_mi_arena_alloc_aligned+0xc1>
+               	jmp	0x478ad0 <_mi_arena_alloc_aligned+0x90>
@@@@
-               	movq	24(%rsp), %r12
-               	jmp	0x477c74 <_mi_arena_alloc_aligned+0x144>
+               	movq	24(%rsp), %r15
+               	jmp	0x478b88 <_mi_arena_alloc_aligned+0x148>
@@@@
-               	nop
@@@@
-               	movq	%r15, %r8
-               	movq	%r12, %r9
+               	movq	%r12, %r8
+               	movq	%r15, %r9
@@@@
-               	pushq	%r13
-               	callq	0x477e30 <mi_arena_alloc_from>
+               	pushq	%r14
+               	callq	0x478d40 <mi_arena_alloc_from>
@@@@
-               	js	0x477c66 <_mi_arena_alloc_aligned+0x136>
-               	cmpl	%r14d, %eax
-               	je	0x477c66 <_mi_arena_alloc_aligned+0x136>
-               	cmpb	$0, (%r15)
-               	jne	0x477c40 <_mi_arena_alloc_aligned+0x110>
+               	js	0x478b7a <_mi_arena_alloc_aligned+0x13a>
+               	cmpl	%r13d, %eax
+               	je	0x478b7a <_mi_arena_alloc_aligned+0x13a>
+               	cmpb	$0, (%r12)
+               	jne	0x478b50 <_mi_arena_alloc_aligned+0x110>
@@@@
-               	jmp	0x477ce5 <_mi_arena_alloc_aligned+0x1b5>
-               	movb	$1, (%r13)
+               	jmp	0x478bff <_mi_arena_alloc_aligned+0x1bf>
+               	movb	$1, (%r14)
@@@@
+               	xorl	%esi, %esi
@@@@
-               	movzbl	(%rax), %esi
+               	cmpb	$0, (%rax)
+               	setne	%sil
@@@@
-               	movq	%r15, %rdx
-               	callq	0x46e570 <_mi_os_alloc_aligned>
+               	movq	%r12, %rdx
+               	callq	0x46f280 <_mi_os_alloc_aligned>
@@@@
-               	je	0x477cb0 <_mi_arena_alloc_aligned+0x180>
-               	movb	(%r15), %cl
-               	movb	%cl, (%r12)
+               	je	0x478bc5 <_mi_arena_alloc_aligned+0x185>
+               	movb	(%r12), %cl
+               	movb	%cl, (%r15)

@@ -96588,10 +97449,10 @@
@@@[(3, 11)]@@@
-               	callq	0x477950 <_mi_os_numa_node_get>
-               	movl	%eax, %r14d
-               	jmp	0x477ba5 <_mi_arena_alloc_aligned+0x75>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x478870 <_mi_os_numa_node_get>
+               	movl	%eax, %r13d
+               	jmp	0x478ab5 <_mi_arena_alloc_aligned+0x75>
+               	nopl	(%rax,%rax)

@@ -97475,60 +98336,62 @@
@@@[(19, 22), (24, 28), (42, 46), (48, 54), (56, 62), (66, 69), (71, 73), (79, 83)]@@@
-               	movzbl	(%r8), %r11d
+               	movb	(%r8), %cl
+               	movzbl	%cl, %r11d
@@@@
-               	testq	%r11, %r11
-               	jne	0x478a29 <_mi_usable_size+0x109>
+               	testb	%r11b, %r11b
+               	jne	0x47993e <_mi_usable_size+0x10e>
@@@@
-               	jmp	0x478a18 <_mi_usable_size+0xf8>
-               	movb	96(%rax), %cl
+               	jmp	0x47992d <_mi_usable_size+0xfd>
+               	movq	96(%rax), %rcx
@@@@
-               	movzbl	(%r8), %ecx
-               	testq	%rcx, %rcx
-               	je	0x4789e0 <_mi_usable_size+0xc0>
+               	movb	(%r8), %cl
+               	testb	%cl, %cl
+               	je	0x4798f2 <_mi_usable_size+0xc2>
@@@@
-               	movq	80(%rax), %r9
-               	movq	%rdx, %r8
-               	subq	%r9, %r8
+               	movq	80(%rax), %r8
+               	movq	%rdx, %r9
+               	subq	%r8, %r9
@@@@
-               	je	0x478a0d <_mi_usable_size+0xed>
+               	je	0x479922 <_mi_usable_size+0xf2>
+               	movzbl	%cl, %ecx
@@@@
-               	addq	%r9, %rax
+               	addq	%r8, %rax
@@@@
-               	jmp	0x478a62 <_mi_usable_size+0x142>
-               	movq	%r8, %rax
+               	jmp	0x479977 <_mi_usable_size+0x147>
+               	movq	%r9, %rax

@@ -97565,37 +98428,37 @@
@@@[(3, 7), (14, 18)]@@@
-               	subq	%rcx, %r8
-               	movq	%r8, %rax
+               	subq	%rcx, %r9
+               	movq	%r9, %rax
@@@@
-               	jmp	0x478a9b <_mi_usable_size+0x17b>
-               	movb	96(%r8), %cl
+               	jmp	0x4799b0 <_mi_usable_size+0x180>
+               	movq	96(%r8), %rcx

@@ -97610,26 +98473,26 @@
@@@[(20, 24)]@@@
-               	jmp	0x478b2c <_mi_usable_size+0x20c>
-               	movb	96(%r8), %cl
+               	jmp	0x479a41 <_mi_usable_size+0x211>
+               	movq	96(%r8), %rcx

@@ -97664,7 +98527,7 @@
@@@[(3, 5)]@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)

@@ -97672,34 +98535,36 @@
@@@[(10, 16), (25, 27)]@@@
-               	je	0x478c18 <_mi_heap_malloc_zero+0x88>
-               	addl	$1, 16(%rax)
+               	je	0x479b3e <_mi_heap_malloc_zero+0x8e>
+               	movl	16(%rax), %ecx
+               	addl	$1, %ecx
+               	movl	%ecx, 16(%rax)
@@@@
-               	movb	96(%rax), %cl
+               	movq	96(%rax), %rcx

@@ -97710,12 +98575,11 @@
@@@[(7, 12)]@@@
-               	jne	0x478bc6 <_mi_heap_malloc_zero+0x36>
-               	jmp	0x478c0d <_mi_heap_malloc_zero+0x7d>
-               	nopw	(%rax,%rax)
+               	jne	0x479aeb <_mi_heap_malloc_zero+0x3b>
+               	jmp	0x479b33 <_mi_heap_malloc_zero+0x83>

@@ -97915,9 +98779,9 @@
@@@[(3, 6), (7, 8)]@@@
-               	callq	0x4797f0 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
-               	movq	8(%rsp), %rbx
+               	callq	0x47a720 <kotlin::internal::GetCurrentStackTrace(unsigned long)>
@@@@
+               	movq	8(%rsp), %rbx

@@ -98456,21 +99320,24 @@
@@@[(3, 5), (6, 11), (12, 16), (26, 30)]@@@
+               	movq	%rdi, %rax
+               	movq	8(%rdi), %rdi
@@@@
-               	je	0x4797e0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
-               	movl	%esi, %eax
+               	je	0x47a70a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
+               	movl	16(%rax), %ecx
+               	movl	%ecx, %eax
@@@@
-               	testl	%esi, %esi
-               	jne	0x4797e0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x20>
+               	testl	%ecx, %ecx
+               	jne	0x47a70a <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()+0x2a>
@@@@
-               	jmp	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	nopl	(%rax)
+               	jmp	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	nopw	(%rax,%rax)

@@ -98479,78 +99346,222 @@
@@@[(3, 10), (11, 26), (29, 34), (35, 79), (80, 81), (83, 112), (115, 197), (198, 226), (228, 230), (232, 242), (243, 257), (263, 272)]@@@
-               	subq	$56, %rsp
-               	movq	%rdi, %r15
+               	subq	$120, %rsp
+               	movq	%rdi, %r13
+               	movq	$0, 48(%rsp)
+               	movl	$1, 56(%rsp)
+               	movb	$0, 60(%rsp)
@@@@
-               	movq	-64(%rax), %r12
-               	movl	$1, %r14d
-               	testq	%r12, %r12
-               	je	0x479829 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x39>
-               	xchgl	%r14d, 328(%r12)
-               	jmp	0x47982c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c>
-               	xorl	%r12d, %r12d
+               	movq	-64(%rax), %rax
+               	testq	%rax, %rax
+               	je	0x47a778 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x58>
+               	movl	$1, %ecx
+               	xchgl	%ecx, 328(%rax)
+               	movq	%rax, 48(%rsp)
+               	movl	%ecx, 56(%rsp)
+               	movb	$1, 60(%rsp)
@@@@
-               	leaq	317(%rip), %rdi         # 0x479980 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
-               	leaq	16(%rsp), %rsi
+               	movq	$0, 32(%rsp)
+               	leaq	920(%rip), %rdi         # 0x47ab30 <(anonymous namespace)::depthCountCallback(_Unwind_Context*, void*)>
+               	leaq	32(%rsp), %rsi
@@@@
-               	movq	16(%rsp), %rbx
-               	cmpq	$4, %rbx
-               	jbe	0x4798ec <kotlin::internal::GetCurrentStackTrace(unsigned long)+0xfc>
-               	addq	$-4, %rbx
-               	movq	%rbx, %rax
-               	shrq	$61, %rax
-               	jne	0x47994b <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x15b>
+               	movq	32(%rsp), %r12
+               	cmpq	$4, %r12
+               	jbe	0x47a84a <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x12a>
+               	addq	$-4, %r12
+               	movq	8(%rsp), %r15
+               	movq	(%rsp), %rbx
+               	movq	%r15, %rdx
+               	subq	%rbx, %rdx
+               	movq	%rdx, %r14
+               	sarq	$3, %r14
+               	movq	%r12, %rbp
+               	subq	%r14, %rbp
+               	jbe	0x47a871 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x151>
+               	je	0x47aa5c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
+               	movq	16(%rsp), %rax
+               	subq	%r15, %rax
+               	sarq	$3, %rax
+               	cmpq	%rbp, %rax
+               	jae	0x47a891 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x171>
+               	movabsq	$2305843009213693951, %rax # imm = 0x1FFFFFFFFFFFFFFF
+               	movq	%r14, %rcx
+               	xorq	%rax, %rcx
+               	cmpq	%rbp, %rcx
+               	jb	0x47aaf6 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3d6>
+               	movq	%rdx, 64(%rsp)
+               	movq	%r13, 80(%rsp)
+               	cmpq	%rbp, %r14
+               	movq	%r14, %rcx
+               	cmovbq	%rbp, %rcx
+               	leaq	(%rcx,%r14), %rdi
+               	cmpq	%rax, %rdi
+               	cmovaq	%rax, %rdi
+               	addq	%r14, %rcx
+               	cmovbq	%rax, %rdi
+               	testq	%rdi, %rdi
+               	movq	%rdi, 72(%rsp)
+               	je	0x47a8b1 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x191>
@@@@
-               	movq	%rbx, %rdi
@@@@
-               	leaq	(,%rbx,8), %rbp
-               	movq	%rax, %rdi
+               	jmp	0x47a8b4 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x194>
+               	xorps	%xmm0, %xmm0
+               	movups	%xmm0, (%r13)
+               	movq	$0, 16(%r13)
+               	movq	(%rsp), %rdi
+               	testq	%rdi, %rdi
+               	je	0x47aab2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
+               	callq	0x4137c0 <free@plt>
+               	jmp	0x47aab2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x392>
+               	jae	0x47aa5c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
+               	leaq	(%rbx,%r12,8), %rax
+               	cmpq	%r15, %rax
+               	je	0x47aa5c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
+               	movq	%rax, 8(%rsp)
+               	movq	%rax, %r15
+               	jmp	0x47aa5c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x33c>
+               	leaq	8(%rsp), %rbx
+               	leaq	(,%rbp,8), %rdx
+               	movq	%r15, %rdi
+               	xorl	%esi, %esi
+               	callq	0x413800 <memset@plt>
+               	leaq	(%r15,%rbp,8), %rax
+               	jmp	0x47aa50 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x330>
+               	xorl	%r13d, %r13d
+               	leaq	(,%r14,8), %rdi
+               	addq	%r13, %rdi
+               	shlq	$3, %rbp
@@@@
+               	cmpq	%r15, %rbx
+               	je	0x47aa15 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
+               	movq	64(%rsp), %rdi
+               	addq	$-8, %rdi
+               	movq	%r13, %rcx
+               	cmpq	$24, %rdi
+               	jb	0x47a9f2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
+               	shrq	$3, %rdi
+               	addq	$1, %rdi
+               	leaq	(%rbx,%rdi,8), %rax
+               	cmpq	%rax, %r13
+               	jae	0x47a914 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x1f4>
+               	leaq	(,%rdi,8), %rax
+               	addq	%r13, %rax
+               	movq	%r13, %rcx
+               	cmpq	%rbx, %rax
+               	ja	0x47a9f2 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2d2>
+               	movq	%rdi, %rax
+               	andq	$-4, %rax
+               	leaq	-4(%rax), %rsi
+               	movq	%rsi, %rdx
+               	shrq	$2, %rdx
+               	addq	$1, %rdx
+               	movl	%edx, %ecx
+               	andl	$3, %ecx
+               	cmpq	$12, %rsi
+               	jae	0x47a939 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x219>
+               	xorl	%esi, %esi
+               	jmp	0x47a9a3 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x283>
+               	andq	$-4, %rdx
+               	negq	%rdx
+               	xorl	%esi, %esi
+               	movups	(%rbx,%rsi,8), %xmm0
+               	movups	16(%rbx,%rsi,8), %xmm1
+               	movups	%xmm0, (%r13,%rsi,8)
+               	movups	%xmm1, 16(%r13,%rsi,8)
+               	movups	32(%rbx,%rsi,8), %xmm0
+               	movups	48(%rbx,%rsi,8), %xmm1
+               	movups	%xmm0, 32(%r13,%rsi,8)
+               	movups	%xmm1, 48(%r13,%rsi,8)
+               	movups	64(%rbx,%rsi,8), %xmm0
+               	movups	80(%rbx,%rsi,8), %xmm1
+               	movups	%xmm0, 64(%r13,%rsi,8)
+               	movups	%xmm1, 80(%r13,%rsi,8)
+               	movups	96(%rbx,%rsi,8), %xmm0
+               	movups	112(%rbx,%rsi,8), %xmm1
+               	movups	%xmm0, 96(%r13,%rsi,8)
+               	movups	%xmm1, 112(%r13,%rsi,8)
+               	addq	$16, %rsi
+               	addq	$4, %rdx
+               	jne	0x47a942 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x222>
+               	testq	%rcx, %rcx
+               	je	0x47a9de <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2be>
+               	leaq	16(,%rsi,8), %rdx
+               	negq	%rcx
+               	nopw	(%rax,%rax)
+               	movups	-16(%rbx,%rdx), %xmm0
+               	movups	(%rbx,%rdx), %xmm1
+               	movups	%xmm0, -16(%r13,%rdx)
+               	movups	%xmm1, (%r13,%rdx)
+               	addq	$32, %rdx
+               	incq	%rcx
+               	jne	0x47a9c0 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2a0>
+               	cmpq	%rax, %rdi
+               	je	0x47aa15 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2f5>
+               	leaq	(,%rax,8), %rcx
+               	addq	%r13, %rcx
+               	leaq	(%rbx,%rax,8), %rbx
+               	subq	%rbx, %r15
+               	xorl	%eax, %eax
+               	nopw	(%rax,%rax)
+               	movq	(%rbx,%rax), %rdx
+               	movq	%rdx, (%rcx,%rax)
+               	addq	$8, %rax
+               	cmpq	%rax, %r15
+               	jne	0x47aa00 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x2e0>
+               	movq	(%rsp), %rbx
+               	testq	%rbx, %rbx
+               	je	0x47aa22 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x302>
+               	movq	%rbx, %rdi
+               	callq	0x4137c0 <free@plt>
+               	leaq	16(%rsp), %rbx
@@@@
-               	leaq	(,%rbx,8), %rbx
-               	addq	%r13, %rbx
-               	movq	%rbx, 8(%rsp)
-               	sarq	$3, %rbp
-               	movq	$0, 24(%rsp)
-               	movq	$4, 32(%rsp)
-               	movq	%r13, 40(%rsp)
-               	movq	%rbp, 48(%rsp)
-               	leaq	195(%rip), %rdi         # 0x479990 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
-               	leaq	24(%rsp), %rsi
+               	leaq	(,%r12,8), %rax
+               	addq	%r13, %rax
+               	movq	%rax, 8(%rsp)
+               	movq	72(%rsp), %rax
+               	leaq	(,%rax,8), %rax
+               	addq	%r13, %rax
+               	movq	80(%rsp), %r13
+               	movq	%rax, (%rbx)
+               	movq	(%rsp), %rbx
+               	movq	8(%rsp), %r15
+               	subq	%rbx, %r15
+               	sarq	$3, %r15
+               	movq	$0, 88(%rsp)
+               	movq	$4, 96(%rsp)
+               	movq	%rbx, 104(%rsp)
+               	movq	%r15, 112(%rsp)
+               	leaq	186(%rip), %rdi         # 0x47ab40 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)>
+               	leaq	88(%rsp), %rsi
@@@@
-               	movups	%xmm0, (%r15)
+               	movups	%xmm0, (%r13)
@@@@
-               	movq	%rbx, 16(%r15)
-               	jmp	0x479909 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x119>
-               	xorps	%xmm0, %xmm0
-               	movups	%xmm0, (%r15)
-               	movq	$0, 16(%r15)
-               	movq	(%rsp), %rdi
+               	movq	16(%rsp), %rax
+               	movq	%rax, 16(%r13)
+               	movq	$0, 16(%rsp)
+               	movq	48(%rsp), %rdi
@@@@
-               	je	0x479909 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x119>
-               	callq	0x4137e0 <free@plt>
-               	testq	%r12, %r12
-               	je	0x47993c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
-               	movl	%r14d, %eax
-               	xchgl	%eax, 328(%r12)
-               	testl	%r14d, %r14d
-               	jne	0x47993c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
+               	je	0x47aae7 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
+               	movl	56(%rsp), %ecx
+               	movl	%ecx, %eax
+               	xchgl	%eax, 328(%rdi)
+               	testl	%ecx, %ecx
+               	jne	0x47aae7 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
@@@@
-               	je	0x47993c <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x14c>
-               	addq	$328, %r12              # imm = 0x148
-               	movq	%r12, %rdi
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	addq	$56, %rsp
+               	je	0x47aae7 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3c7>
+               	addq	$328, %rdi              # imm = 0x148
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	addq	$120, %rsp

@@ -98558,46 +99569,45 @@
@@@[(3, 10), (11, 21), (22, 26), (28, 32), (34, 36), (49, 55), (57, 59), (60, 62)]@@@
-               	leaq	75342(%rip), %rdi       # 0x48bfa0 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
-               	callq	0x479740 <std::__throw_length_error(char const*)>
-               	movq	%rax, %rbx
-               	jmp	0x479962 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x172>
+               	leaq	75619(%rip), %rdi       # 0x48d260 <typeinfo name for kotlin::gc::GCSchedulerData+0x194f>
+               	callq	0x47a660 <std::__throw_length_error(char const*)>
+               	jmp	0x47ab04 <kotlin::internal::GetCurrentStackTrace(unsigned long)+0x3e4>
@@@@
-               	xorl	%r13d, %r13d
-               	movq	%r13, %rdi
-               	callq	0x4799d0 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
-               	movq	%r12, %rdi
-               	movl	%r14d, %esi
-               	callq	0x4797c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
+               	movq	%rsp, %rdi
+               	callq	0x47ab80 <std::vector<void*, kotlin::std_support::allocator<void*> >::~vector()>
+               	leaq	40(%rsp), %rdi
+               	callq	0x47a6e0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
@@@@
-               	callq	0x4669c0 <__clang_call_terminate>
-               	nopl	(%rax)
+               	callq	0x467510 <__clang_call_terminate>
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	addq	$1, (%rsi)
+               	movq	(%rsi), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rsi)
@@@@
-               	nopw	(%rax,%rax)
+               	nopl	(%rax)
@@@@
-               	movq	(%rbx), %rax
-               	cmpq	24(%rbx), %rax
-               	jae	0x4799a5 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
+               	movq	24(%rbx), %rax
+               	cmpq	%rax, (%rbx)
+               	jae	0x47ab55 <(anonymous namespace)::unwindCallback(_Unwind_Context*, void*)+0x15>
@@@@
+               	leaq	1(%rcx), %rdx
+               	movq	%rdx, (%rbx)
@@@@
-               	leaq	1(%rcx), %rsi
-               	movq	%rsi, (%rbx)

@@ -98605,11 +99615,12 @@
@@@[(3, 4), (10, 12)]@@@
+               	movq	(%rdi), %rdi
@@@@
-               	nopl	(%rax,%rax)
+               	nop

@@ -98722,41 +99733,43 @@
@@@[(13, 23)]@@@
-               	jae	0x479bd0 <CreateStringFromCString+0x1f0>
-               	addq	$1, (%rsp)
-               	jmp	0x479c00 <CreateStringFromCString+0x220>
-               	nopw	(%rax,%rax)
+               	jae	0x47ad80 <CreateStringFromCString+0x1f0>
+               	movq	(%rsp), %rax
+               	addq	$1, %rax
+               	movq	%rax, (%rsp)
+               	jmp	0x47adb0 <CreateStringFromCString+0x220>
+               	nopl	(%rax)

@@ -98772,12 +99785,13 @@
@@@[(3, 6)]@@@
-               	movzbl	(%r8), %ecx
+               	movb	(%r8), %al
+               	movzbl	%al, %ecx

@@ -98786,45 +99800,47 @@
@@@[(12, 16), (20, 23), (25, 29), (47, 55), (56, 61)]@@@
-               	je	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
-               	movzbl	(%r9), %esi
+               	je	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movb	(%r9), %sil
@@@@
-               	jne	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
+               	jne	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movzbl	%sil, %eax
@@@@
-               	andl	$63, %esi
-               	orl	%esi, %ecx
+               	andl	$63, %eax
+               	orl	%eax, %ecx
@@@@
-               	je	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
-               	movzbl	(%r9), %r10d
-               	movl	%r10d, %r9d
-               	andb	$-64, %r9b
+               	je	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movb	(%r9), %r9b
+               	movl	%r9d, %r10d
+               	andb	$-64, %r10b
@@@@
-               	cmpb	$-128, %r9b
-               	jne	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
+               	cmpb	$-128, %r10b
+               	jne	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movzbl	%r9b, %r10d

@@ -98834,41 +99850,43 @@
@@@[(13, 17), (21, 28), (43, 49), (51, 54)]@@@
-               	je	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
-               	movzbl	(%r9), %esi
+               	je	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movb	(%r9), %sil
@@@@
-               	jne	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
-               	andl	$63, %esi
-               	orl	%esi, %r10d
+               	jne	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movzbl	%sil, %eax
+               	andl	$63, %eax
+               	orl	%eax, %r10d
@@@@
-               	je	0x479e58 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
-               	movzbl	(%rax), %r10d
-               	movl	%r10d, %eax
+               	je	0x47b01b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
+               	movb	(%rax), %r9b
+               	movl	%r9d, %eax
@@@@
-               	jne	0x479e61 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x211>
+               	jne	0x47b024 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x224>
+               	movzbl	%r9b, %r10d

@@ -98876,45 +99894,47 @@
@@@[(14, 20), (28, 36), (37, 49), (50, 54), (60, 62)]@@@
-               	je	0x479e58 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x208>
-               	movzbl	(%rax), %r11d
-               	movl	%r11d, %eax
+               	je	0x47b01b <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x21b>
+               	movb	(%rax), %cl
+               	movl	%ecx, %eax
@@@@
-               	je	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
-               	movzbl	(%r9), %ecx
-               	movl	%ecx, %esi
-               	andb	$-64, %sil
+               	je	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movb	(%r9), %sil
+               	movl	%esi, %r11d
+               	andb	$-64, %r11b
@@@@
-               	cmpb	$-128, %sil
-               	jne	0x479dff <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1af>
-               	andl	$63, %r11d
-               	shll	$6, %r11d
-               	orl	%r10d, %r11d
+               	cmpb	$-128, %r11b
+               	jne	0x47afc1 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x1c1>
+               	movzbl	%cl, %eax
+               	andl	$63, %eax
+               	shll	$6, %eax
+               	orl	%r10d, %eax
+               	movzbl	%sil, %ecx
@@@@
-               	orl	%r11d, %ecx
-               	jmp	0x479c67 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x17>
+               	orl	%eax, %ecx
+               	jmp	0x47ae19 <utf8::internal::utf_error utf8::internal::validate_next<char const*>(char const*&, char const*, unsigned int&)+0x19>
@@@@
-               	nopw	(%rax,%rax)
+               	nopl	(%rax)

@@ -99019,61 +100039,61 @@
@@@[(3, 6), (8, 9), (21, 22), (24, 25), (44, 45), (47, 48), (58, 59), (61, 62)]@@@
-               	ja	0x479fd7 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
-               	movq	(%rbx), %rax
+               	ja	0x47b197 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)+0x37>
@@@@
+               	movq	(%rbx), %rax
@@@@
-               	movq	(%rbx), %rax
@@@@
+               	movq	(%rbx), %rax
@@@@
-               	movq	(%rbx), %rax
@@@@
+               	movq	(%rbx), %rax
@@@@
-               	movq	(%rbx), %rax
@@@@
+               	movq	(%rbx), %rax

@@ -99082,25 +100102,25 @@
@@@[(3, 4), (6, 7)]@@@
-               	movq	(%rbx), %rax
@@@@
+               	movq	(%rbx), %rax

@@ -99116,19 +100136,19 @@
@@@[(3, 4), (6, 7)]@@@
-               	movq	(%rbx), %rax
@@@@
+               	movq	(%rbx), %rax

@@ -99137,41 +100157,41 @@
@@@[(3, 4), (6, 7)]@@@
-               	movq	(%rbx), %rax
@@@@
+               	movq	(%rbx), %rax

@@ -99184,21 +100204,21 @@
@@@[(3, 4), (6, 7)]@@@
-               	movq	(%rdi), %r14
@@@@
+               	movq	(%rdi), %r14

@@ -99264,9 +100284,9 @@
@@@[(3, 9)]@@@
-               	movl	8(%rsi), %ebp
-               	addl	8(%rdi), %ebp
-               	js	0x47a3d0 <Kotlin_String_plusImpl+0xc0>
+               	movl	8(%rdi), %ebp
+               	addl	8(%rsi), %ebp
+               	js	0x47b590 <Kotlin_String_plusImpl+0xc0>

@@ -99471,42 +100491,42 @@
@@@[(7, 13), (34, 40), (51, 57)]@@@
-               	movq	16(%rdi,%rax,8), %rcx
-               	cmpq	16(%rsi,%rax,8), %rcx
-               	jne	0x47a698 <Kotlin_String_compareTo+0x48>
+               	movq	16(%rsi,%rax,8), %rcx
+               	cmpq	%rcx, 16(%rdi,%rax,8)
+               	jne	0x47b858 <Kotlin_String_compareTo+0x48>
@@@@
-               	movzwl	16(%rdi,%rax,2), %ecx
-               	cmpw	16(%rsi,%rax,2), %cx
-               	jne	0x47a6c7 <Kotlin_String_compareTo+0x77>
+               	movzwl	16(%rsi,%rax,2), %ecx
+               	cmpw	%cx, 16(%rdi,%rax,2)
+               	jne	0x47b887 <Kotlin_String_compareTo+0x77>
@@@@
-               	movzwl	16(%rdi,%rax), %ecx
-               	cmpw	16(%rsi,%rax), %cx
-               	jmp	0x47a6df <Kotlin_String_compareTo+0x8f>
+               	movzwl	16(%rsi,%rax), %ecx
+               	cmpw	%cx, 16(%rdi,%rax)
+               	jmp	0x47b89f <Kotlin_String_compareTo+0x8f>

@@ -99710,43 +100730,43 @@
@@@[(17, 21), (22, 38)]@@@
-               	je	0x47aa0d <Kotlin_String_lastIndexOfString+0x12d>
-               	xorl	%ebp, %ebp
+               	je	0x47bbcd <Kotlin_String_lastIndexOfString+0x12d>
+               	xorl	%ecx, %ecx
@@@@
-               	cmpq	%rbp, %r15
-               	je	0x47a9e3 <Kotlin_String_lastIndexOfString+0x103>
-               	leaq	1(%rbp), %rcx
-               	movzwl	(%rdx), %r11d
-               	addq	$2, %rdx
-               	cmpw	18(%rsi,%rbp,2), %r11w
-               	movq	%rcx, %rbp
-               	je	0x47a9b0 <Kotlin_String_lastIndexOfString+0xd0>
+               	cmpq	%rcx, %r15
+               	je	0x47bba3 <Kotlin_String_lastIndexOfString+0x103>
+               	movzwl	18(%rsi,%rcx,2), %r11d
+               	addq	$1, %rcx
+               	leaq	2(%rdx), %rbp
+               	cmpw	%r11w, (%rdx)
+               	movq	%rbp, %rdx
+               	je	0x47bb70 <Kotlin_String_lastIndexOfString+0xd0>

@@ -99765,46 +100785,45 @@
@@@[(39, 48), (60, 62)]@@@
-               	jg	0x47ab3b <Kotlin_String_hashCode+0x11b>
-               	callq	0x47ac10 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
-               	jmp	0x47ab68 <Kotlin_String_hashCode+0x148>
-               	movq	%r14, %rax
-               	addq	$-1, %rax
+               	jg	0x47bcfb <Kotlin_String_hashCode+0x11b>
+               	callq	0x47bdd0 <(anonymous namespace)::SSETraits::polyHashUnalignedUnrollUpTo8(int, unsigned short const*)>
+               	jmp	0x47bd28 <Kotlin_String_hashCode+0x148>
+               	leaq	-1(%r14), %rax
@@@@
-               	nopl	(%rax)
+               	nopw	%cs:(%rax,%rax)

@@ -100462,38 +101481,38 @@
@@@[(27, 41)]@@@
-               	je	0x47b96f <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4af>
-               	movslq	8(%rbp), %rsi
-               	movq	%rsi, %rax
-               	orq	%rdi, %rax
-               	shrq	$32, %rax
-               	je	0x47b620 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>
-               	movq	%rsi, %rax
+               	je	0x47cb35 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x4b5>
+               	movl	8(%rbp), %esi
+               	movslq	%esi, %rax
+               	movq	%rax, %rdx
+               	orq	%rdi, %rdx
+               	shrq	$32, %rdx
+               	je	0x47c7e0 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x160>

@@ -100538,14 +101557,16 @@
@@@[(3, 7), (10, 13), (15, 16)]@@@
-               	addq	$40, 56(%rbx)
+               	movq	56(%rbx), %rax
+               	addq	$40, %rax
+               	movq	%rax, 56(%rbx)
@@@@
-               	jmp	0x47b8eb <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x42b>
-               	movq	8(%rbx), %rcx
+               	jmp	0x47cab1 <(anonymous namespace)::RunFinalizerHooksImpl(ObjHeader*, TypeInfo const*)+0x431>
@@@@
+               	movq	8(%rbx), %rcx

@@ -100634,10 +101655,10 @@
@@@[(3, 5), (7, 9)]@@@
-               	movq	48(%rsp), %rcx
-               	movq	%rcx, 32(%rax)
@@@@
+               	movq	48(%rsp), %rcx
+               	movq	%rcx, 32(%rax)

@@ -100710,7 +101731,7 @@
@@@[(3, 5)]@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)

@@ -100892,53 +101913,53 @@
@@@[(7, 13), (47, 51), (54, 62)]@@@
-               	jne	0x47c83e <Kotlin_initRuntimeIfNeeded+0xb6e>
-               	movq	%rax, %r14
-               	movb	572055(%rip), %al       # 0x507798 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
+               	jne	0x47d9fe <Kotlin_initRuntimeIfNeeded+0xb6e>
+               	movq	%rax, %r12
+               	movb	569431(%rip), %al       # 0x507f18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
@@@@
-               	je	0x47c7e7 <Kotlin_initRuntimeIfNeeded+0xb17>
-               	movq	%rax, %r12
+               	je	0x47d9a6 <Kotlin_initRuntimeIfNeeded+0xb16>
+               	movq	%rax, %r14
@@@@
-               	movq	%r14, %rax
-               	cmpq	$0, -48(%r14)
-               	jne	0x47c987 <Kotlin_initRuntimeIfNeeded+0xcb7>
-               	movq	%r12, -48(%r14)
+               	movq	%r12, %rax
+               	cmpq	$0, -48(%r12)
+               	jne	0x47db47 <Kotlin_initRuntimeIfNeeded+0xcb7>
+               	movq	%r14, -48(%r12)

@@ -100994,108 +102015,108 @@
@@@[(82, 88), (101, 111), (113, 114), (115, 122), (123, 125)]@@@
-               	movq	%r14, %rax
-               	movq	%r15, -64(%r14)
-               	movq	%r15, (%r12)
+               	movq	%r12, %rax
+               	movq	%r15, -64(%r12)
+               	movq	%r15, (%r14)
@@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	movq	%rbx, 40(%rsp)
-               	movq	(%r12), %rbx
-               	movq	%r14, %rax
-               	movq	-40(%r14), %r13
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movq	%rbx, 48(%rsp)
+               	movq	(%r14), %rbx
+               	movq	%r12, %rax
+               	movq	-40(%r12), %r13
@@@@
-               	movq	%r14, 48(%rsp)
@@@@
-               	jne	0x47c56d <Kotlin_initRuntimeIfNeeded+0x89d>
-               	movq	%rbx, 72(%rsp)
-               	callq	0x47b9d0 <(anonymous namespace)::theState()>
+               	movq	%r14, 40(%rsp)
+               	jne	0x47d736 <Kotlin_initRuntimeIfNeeded+0x8a6>
+               	movq	%rbx, 88(%rsp)
+               	callq	0x47cb90 <(anonymous namespace)::theState()>
@@@@
-               	movq	-64(%r14), %rbx
+               	movq	-64(%r12), %rbx

@@ -101109,16 +102130,20 @@
@@@[(3, 8), (11, 16), (19, 21)]@@@
-               	leaq	24(%rax), %rbp
+               	movq	16(%r13), %rax
+               	leaq	-4(,%rax,4), %rbp
+               	andq	$-8, %rbp
+               	leaq	(%rbx,%rbp), %r14
@@@@
-               	movq	%rax, 24(%rbx)
-               	movq	%rbp, 48(%r13)
+               	movq	%rax, (%rbx,%rbp)
+               	movq	%r14, 48(%r13)
+               	movq	(%rbx,%rbp), %rax
@@@@
-               	movq	%rbp, 80(%r13)
+               	movq	%r14, 80(%r13)

@@ -101129,7 +102154,7 @@
@@@[(3, 5)]@@@
-               	movq	-64(%r14), %rbp
+               	movq	-64(%r12), %rbp

@@ -101140,290 +102165,293 @@
@@@[(20, 40), (43, 55), (81, 85), (88, 91), (93, 107), (111, 137), (145, 150), (152, 155), (156, 161), (168, 178), (179, 180), (181, 184), (187, 189), (193, 211), (213, 215), (219, 242), (244, 247), (249, 251), (252, 275), (276, 291), (298, 304), (306, 310), (316, 336), (337, 348), (349, 352), (353, 357), (358, 376), (378, 379), (387, 390), (399, 411), (414, 418), (419, 424), (429, 433), (435, 436), (437, 438)]@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	movl	(%r13), %ebp
-               	movslq	%ebp, %r9
-               	movq	16(%rsp), %r8
-               	movq	152(%r8), %rsi
-               	movq	%r9, %rax
-               	orq	%rsi, %rax
-               	shrq	$32, %rax
-               	je	0x47c2a5 <Kotlin_initRuntimeIfNeeded+0x5d5>
-               	movq	%r9, %rax
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movl	(%r13), %r8d
+               	movslq	%r8d, %rax
+               	movq	16(%rsp), %r9
+               	movq	152(%r9), %rsi
+               	movq	%rax, %rcx
+               	orq	%rsi, %rcx
+               	shrq	$32, %rcx
+               	movq	%rax, 80(%rsp)
+               	je	0x47d447 <Kotlin_initRuntimeIfNeeded+0x5b7>
@@@@
-               	movq	144(%r8), %rax
-               	movq	(%rax,%rbx,8), %rax
-               	testq	%rax, %rax
-               	jne	0x47c2bd <Kotlin_initRuntimeIfNeeded+0x5ed>
-               	jmp	0x47c316 <Kotlin_initRuntimeIfNeeded+0x646>
-               	movq	%r15, 466360(%rip)      # 0x4edff0 <kotlin::mm::GlobalData::instance_+0x18>
-               	cmpq	$0, 458104(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	jne	0x47c010 <Kotlin_initRuntimeIfNeeded+0x340>
-               	jmp	0x47c01c <Kotlin_initRuntimeIfNeeded+0x34c>
-               	movq	-64(%r14), %rbx
+               	jmp	0x47d450 <Kotlin_initRuntimeIfNeeded+0x5c0>
+               	movq	-64(%r12), %rbx
@@@@
-               	jmp	0x47c55a <Kotlin_initRuntimeIfNeeded+0x88a>
-               	movl	%ebp, %eax
+               	jmp	0x47d723 <Kotlin_initRuntimeIfNeeded+0x893>
+               	movl	%r8d, %eax
@@@@
-               	movq	144(%r8), %rax
+               	movq	40(%rsp), %r14
+               	movq	144(%r9), %rax
@@@@
-               	je	0x47c316 <Kotlin_initRuntimeIfNeeded+0x646>
-               	movq	(%rax), %r12
-               	cmpl	8(%r12), %ebp
-               	jne	0x47c2e1 <Kotlin_initRuntimeIfNeeded+0x611>
-               	testq	%r12, %r12
-               	jne	0x47c504 <Kotlin_initRuntimeIfNeeded+0x834>
-               	jmp	0x47c316 <Kotlin_initRuntimeIfNeeded+0x646>
+               	je	0x47d4bc <Kotlin_initRuntimeIfNeeded+0x62c>
+               	movq	(%rax), %rbp
+               	cmpl	8(%rbp), %r8d
+               	jne	0x47d489 <Kotlin_initRuntimeIfNeeded+0x5f9>
+               	testq	%rbp, %rbp
+               	jne	0x47d6d9 <Kotlin_initRuntimeIfNeeded+0x849>
+               	jmp	0x47d4bc <Kotlin_initRuntimeIfNeeded+0x62c>
@@@@
-               	jne	0x47c316 <Kotlin_initRuntimeIfNeeded+0x646>
-               	cmpl	%ecx, %ebp
-               	je	0x47c30d <Kotlin_initRuntimeIfNeeded+0x63d>
-               	movq	%r12, %rdi
-               	movq	(%r12), %r12
-               	testq	%r12, %r12
-               	je	0x47c316 <Kotlin_initRuntimeIfNeeded+0x646>
-               	movslq	8(%r12), %rcx
-               	movq	%rcx, %rax
-               	orq	%rsi, %rax
-               	shrq	$32, %rax
-               	je	0x47c2d2 <Kotlin_initRuntimeIfNeeded+0x602>
-               	movq	%rcx, %rax
+               	jne	0x47d4bc <Kotlin_initRuntimeIfNeeded+0x62c>
+               	cmpl	%ecx, %r8d
+               	je	0x47d4b3 <Kotlin_initRuntimeIfNeeded+0x623>
+               	movq	%rbp, %rdi
+               	movq	(%rbp), %rbp
+               	testq	%rbp, %rbp
+               	je	0x47d4bc <Kotlin_initRuntimeIfNeeded+0x62c>
+               	movl	8(%rbp), %ecx
+               	movslq	%ecx, %rax
+               	movq	%rax, %rdx
+               	orq	%rsi, %rdx
+               	shrq	$32, %rdx
+               	je	0x47d479 <Kotlin_initRuntimeIfNeeded+0x5e9>
@@@@
-               	jne	0x47c504 <Kotlin_initRuntimeIfNeeded+0x834>
-               	movq	%rbx, 32(%rsp)
-               	movq	%r9, 64(%rsp)
+               	jne	0x47d6d9 <Kotlin_initRuntimeIfNeeded+0x849>
+               	movq	%rbx, 72(%rsp)
@@@@
-               	movq	%r8, %rbx
+               	movl	%r8d, %r14d
+               	movq	%r9, %rbx
@@@@
-               	movq	%rax, %r12
-               	movl	%ebp, 8(%rax)
+               	movq	%rax, %rbp
+               	movl	%r14d, 32(%rsp)
+               	movl	%r14d, 8(%rax)
@@@@
-               	jne	0x47c371 <Kotlin_initRuntimeIfNeeded+0x6a1>
-               	movq	16(%rsp), %r8
-               	movq	144(%r8), %rbp
-               	movq	32(%rsp), %rdi
-               	jmp	0x47c484 <Kotlin_initRuntimeIfNeeded+0x7b4>
+               	jne	0x47d51b <Kotlin_initRuntimeIfNeeded+0x68b>
+               	movq	16(%rsp), %r9
+               	movq	144(%r9), %r12
+               	movq	72(%rsp), %rbx
+               	jmp	0x47d649 <Kotlin_initRuntimeIfNeeded+0x7b9>
@@@@
-               	movl	%ebp, 32(%rsp)
@@@@
-               	je	0x47c927 <Kotlin_initRuntimeIfNeeded+0xc57>
+               	movq	%rbp, 64(%rsp)
+               	je	0x47dae7 <Kotlin_initRuntimeIfNeeded+0xc57>
@@@@
-               	movq	%rax, %rbp
+               	movq	%rax, %r12
@@@@
-               	movq	16(%rsp), %r8
-               	movq	160(%r8), %rbx
-               	movq	$0, 160(%r8)
-               	testq	%rbx, %rbx
-               	je	0x47c433 <Kotlin_initRuntimeIfNeeded+0x763>
-               	leaq	160(%r8), %rsi
-               	xorl	%edi, %edi
-               	jmp	0x47c3f3 <Kotlin_initRuntimeIfNeeded+0x723>
+               	movq	16(%rsp), %rax
+               	movq	160(%rax), %rbp
+               	movq	$0, 160(%rax)
+               	testq	%rbp, %rbp
+               	movl	32(%rsp), %r8d
+               	je	0x47d5e9 <Kotlin_initRuntimeIfNeeded+0x759>
+               	movq	16(%rsp), %rax
+               	leaq	160(%rax), %rdi
+               	xorl	%ebx, %ebx
+               	jmp	0x47d5a6 <Kotlin_initRuntimeIfNeeded+0x716>
@@@@
-               	movq	(%rbp,%rdx,8), %rax
+               	movq	(%r12,%rdx,8), %rax
@@@@
-               	movq	%rax, (%rcx)
-               	movq	(%rbp,%rdx,8), %rax
-               	movq	%rcx, (%rax)
-               	movq	%rdi, %rdx
-               	movq	%rdx, %rdi
-               	testq	%rbx, %rbx
-               	je	0x47c433 <Kotlin_initRuntimeIfNeeded+0x763>
-               	movq	%rbx, %rcx
-               	movq	(%rbx), %rbx
-               	movslq	8(%rcx), %rax
-               	movq	%rax, %rdx
+               	movq	%rax, (%rsi)
+               	movq	(%r12,%rdx,8), %rax
+               	movq	%rsi, (%rax)
+               	movq	%rbx, %rdx
+               	movq	%rdx, %rbx
+               	testq	%rbp, %rbp
+               	je	0x47d5e9 <Kotlin_initRuntimeIfNeeded+0x759>
+               	movq	%rbp, %rsi
+               	movq	(%rbp), %rbp
+               	movl	8(%rsi), %eax
+               	movslq	%eax, %rcx
+               	movq	%rcx, %rdx
@@@@
-               	je	0x47c3cb <Kotlin_initRuntimeIfNeeded+0x6fb>
+               	je	0x47d580 <Kotlin_initRuntimeIfNeeded+0x6f0>
+               	movq	%rcx, %rax
@@@@
-               	movq	(%rbp,%rdx,8), %rax
+               	movq	(%r12,%rdx,8), %rax
@@@@
-               	jne	0x47c3da <Kotlin_initRuntimeIfNeeded+0x70a>
-               	movq	(%rsi), %rax
-               	movq	%rax, (%rcx)
-               	movq	%rcx, (%rsi)
-               	movq	%rsi, (%rbp,%rdx,8)
-               	cmpq	$0, (%rcx)
-               	je	0x47c3eb <Kotlin_initRuntimeIfNeeded+0x71b>
-               	movq	%rcx, (%rbp,%rdi,8)
-               	jmp	0x47c3eb <Kotlin_initRuntimeIfNeeded+0x71b>
-               	movq	144(%r8), %rdi
-               	leaq	192(%r8), %rax
+               	jne	0x47d58e <Kotlin_initRuntimeIfNeeded+0x6fe>
+               	movq	(%rdi), %rax
+               	movq	%rax, (%rsi)
+               	movq	%rsi, (%rdi)
+               	movq	%rdi, (%r12,%rdx,8)
+               	cmpq	$0, (%rsi)
+               	je	0x47d59e <Kotlin_initRuntimeIfNeeded+0x70e>
+               	movq	%rsi, (%r12,%rbx,8)
+               	jmp	0x47d59e <Kotlin_initRuntimeIfNeeded+0x70e>
+               	movq	16(%rsp), %r9
+               	movq	144(%r9), %rdi
+               	leaq	192(%r9), %rax
@@@@
-               	je	0x47c450 <Kotlin_initRuntimeIfNeeded+0x780>
-               	callq	0x4137e0 <free@plt>
-               	movq	16(%rsp), %r8
-               	movq	%r14, 152(%r8)
-               	movq	%rbp, 144(%r8)
-               	movq	64(%rsp), %rax
+               	movq	64(%rsp), %rbp
+               	je	0x47d616 <Kotlin_initRuntimeIfNeeded+0x786>
+               	movq	%r9, %rbx
+               	callq	0x4137c0 <free@plt>
+               	movq	%rbx, %r9
+               	movl	32(%rsp), %r8d
+               	movq	%r14, 152(%r9)
+               	movq	%r12, 144(%r9)
+               	movq	80(%rsp), %rax
@@@@
-               	movq	%rdx, %rdi
-               	jmp	0x47c484 <Kotlin_initRuntimeIfNeeded+0x7b4>
-               	movl	32(%rsp), %eax
+               	movq	%rdx, %rbx
+               	jmp	0x47d649 <Kotlin_initRuntimeIfNeeded+0x7b9>
+               	movl	%r8d, %eax
@@@@
-               	movl	%edx, %edi
-               	movq	(%rbp,%rdi,8), %rax
+               	movl	%edx, %ebx
+               	movq	(%r12,%rbx,8), %rax
@@@@
-               	movq	%rax, (%r12)
-               	movq	(%rbp,%rdi,8), %rax
-               	movq	%r12, (%rax)
-               	jmp	0x47c4fc <Kotlin_initRuntimeIfNeeded+0x82c>
-               	movq	%r8, %rcx
-               	addq	$160, %rcx
-               	movq	160(%r8), %rax
-               	movq	%rax, (%r12)
-               	movq	%r12, 160(%r8)
-               	movq	(%r12), %rax
+               	movq	%rax, (%rbp)
+               	movq	(%r12,%rbx,8), %rax
+               	movq	%rbp, (%rax)
+               	jmp	0x47d6c2 <Kotlin_initRuntimeIfNeeded+0x832>
+               	movq	%r9, %rsi
+               	addq	$160, %rsi
+               	movq	160(%r9), %rax
+               	movq	%rax, (%rbp)
+               	movq	%rbp, 160(%r9)
+               	movq	(%rbp), %rax
@@@@
-               	je	0x47c4f7 <Kotlin_initRuntimeIfNeeded+0x827>
-               	movq	152(%r8), %rsi
-               	movslq	8(%rax), %rax
-               	movq	%rax, %rdx
-               	orq	%rsi, %rdx
+               	je	0x47d6be <Kotlin_initRuntimeIfNeeded+0x82e>
+               	movq	152(%r9), %rdi
+               	movl	8(%rax), %eax
+               	movslq	%eax, %rcx
+               	movq	%rcx, %rdx
+               	orq	%rdi, %rdx
@@@@
-               	je	0x47c4e7 <Kotlin_initRuntimeIfNeeded+0x817>
+               	je	0x47d6af <Kotlin_initRuntimeIfNeeded+0x81f>
+               	movq	%rcx, %rax
@@@@
-               	divq	%rsi
-               	jmp	0x47c4eb <Kotlin_initRuntimeIfNeeded+0x81b>
+               	divq	%rdi
+               	jmp	0x47d6b3 <Kotlin_initRuntimeIfNeeded+0x823>
@@@@
-               	divl	%esi
-               	movq	%r12, (%rbp,%rdx,8)
-               	movq	144(%r8), %rbp
-               	movq	%rcx, (%rbp,%rdi,8)
-               	addq	$1, 168(%r8)
-               	movq	%r13, 16(%r12)
-               	movq	-64(%r14), %rbx
+               	divl	%edi
+               	movq	%rbp, (%r12,%rdx,8)
+               	movq	144(%r9), %r12
+               	movq	%rsi, (%r12,%rbx,8)
+               	movq	168(%r9), %rax
+               	addq	$1, %rax
+               	movq	%rax, 168(%r9)
+               	movq	56(%rsp), %r12
+               	movq	%r13, 16(%rbp)
+               	movq	%r9, %rdi
+               	movq	-64(%r12), %rbx
@@@@
-               	movq	%r8, %rdi
@@@@
-               	movq	56(%rsp), %r12
-               	jne	0x47c55a <Kotlin_initRuntimeIfNeeded+0x88a>
+               	jne	0x47d723 <Kotlin_initRuntimeIfNeeded+0x893>
@@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	jmp	0x47c55a <Kotlin_initRuntimeIfNeeded+0x88a>
-               	movq	56(%rsp), %r12
-               	movq	%r14, %rax
-               	movq	%r13, -40(%r14)
-               	movq	(%r12), %rbp
-               	movq	72(%rsp), %rbx
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movq	%r12, %rax
+               	movq	%r13, -40(%r12)
+               	movq	(%r14), %rbp
+               	movq	88(%rsp), %rbx
@@@@
-               	movq	%r13, 8(%r12)
-               	movq	569852(%rip), %rbx      # 0x507788 <(anonymous namespace)::initHeadNode>
+               	movq	%r13, 8(%r14)
+               	movq	567220(%rip), %rbx      # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	je	0x47c5b4 <Kotlin_initRuntimeIfNeeded+0x8e4>
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	je	0x47d773 <Kotlin_initRuntimeIfNeeded+0x8e3>
+               	nopl	(%rax)
@@@@
-               	jne	0x47c5a0 <Kotlin_initRuntimeIfNeeded+0x8d0>
-               	movq	(%r12), %rbp
+               	jne	0x47d760 <Kotlin_initRuntimeIfNeeded+0x8d0>
+               	movq	(%r14), %rbp
@@@@
-               	movq	72(%rbp), %rax
@@@@
+               	movq	72(%rbp), %rax

@@ -101464,35 +102492,35 @@
@@@[(25, 27)]@@@
-               	nopw	(%rax,%rax)
+               	nopl	(%rax)

@@ -101503,65 +102531,64 @@
@@@[(3, 4), (5, 12), (13, 18), (28, 34), (39, 43), (62, 70)]@@@
-               	movq	48(%rsp), %r14
@@@@
-               	movq	40(%rsp), %r13
-               	je	0x47c784 <Kotlin_initRuntimeIfNeeded+0xab4>
-               	movq	569384(%rip), %rbp      # 0x507788 <(anonymous namespace)::initHeadNode>
+               	movq	40(%rsp), %r14
+               	movq	48(%rsp), %r13
+               	je	0x47d944 <Kotlin_initRuntimeIfNeeded+0xab4>
+               	movq	566756(%rip), %rbp      # 0x507f08 <(anonymous namespace)::initHeadNode>
@@@@
-               	je	0x47c7b4 <Kotlin_initRuntimeIfNeeded+0xae4>
-               	movq	(%r12), %rbx
-               	nopl	(%rax)
+               	je	0x47d974 <Kotlin_initRuntimeIfNeeded+0xae4>
+               	movq	(%r14), %rbx
@@@@
-               	je	0x47c7b4 <Kotlin_initRuntimeIfNeeded+0xae4>
-               	movq	(%r12), %rbx
-               	nopl	(%rax,%rax)
+               	je	0x47d974 <Kotlin_initRuntimeIfNeeded+0xae4>
+               	movq	(%r14), %rbx
+               	nopw	(%rax,%rax)
@@@@
-               	jne	0x47c7a0 <Kotlin_initRuntimeIfNeeded+0xad0>
-               	movl	$1, 16(%r12)
+               	jne	0x47d960 <Kotlin_initRuntimeIfNeeded+0xad0>
+               	movl	$1, 16(%r14)
@@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	movq	-48(%r14), %rbp
-               	leaq	569195(%rip), %rdi      # 0x507760 <konan::terminationKeyOnceControl>
-               	leaq	2820(%rip), %rsi        # 0x47d300 <konan::onThreadExitInit()>
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movq	-48(%r12), %rbp
+               	leaq	566571(%rip), %rdi      # 0x507ee0 <konan::terminationKeyOnceControl>
+               	leaq	2884(%rip), %rsi        # 0x47e500 <konan::onThreadExitInit()>

@@ -101613,95 +102640,95 @@
@@@[(14, 16), (69, 72), (137, 140)]@@@
-               	leaq	192(%rax), %rbp
+               	leaq	192(%rax), %r12
@@@@
-               	movq	48(%rsp), %rax
-               	movq	-64(%rax), %r14
+               	movq	-64(%r12), %r14
@@@@
-               	callq	0x4669c0 <__clang_call_terminate>
+               	callq	0x467510 <__clang_call_terminate>
+               	nopl	(%rax)

@@ -101716,328 +102743,334 @@
@@@[(30, 34), (35, 39), (40, 44), (45, 47), (49, 53), (70, 84), (87, 89), (99, 101), (110, 117), (119, 133), (136, 143), (146, 156), (168, 175), (177, 180), (183, 198), (200, 203), (224, 226), (227, 229), (231, 235), (238, 246), (251, 253), (254, 258), (259, 263), (264, 268), (269, 271), (280, 288), (289, 291), (292, 296), (297, 298), (299, 307), (310, 334), (336, 342), (351, 357), (361, 363), (364, 372), (385, 396), (402, 410), (414, 416), (417, 429), (435, 441), (467, 471), (473, 477)]@@@
-               	movslq	(%rbx), %rax
-               	movq	%rax, 16(%rsp)
+               	movl	(%rbx), %eax
+               	movl	%eax, 12(%rsp)
@@@@
-               	callq	0x47b9d0 <(anonymous namespace)::theState()>
-               	movq	%rax, %r15
+               	callq	0x47cb90 <(anonymous namespace)::theState()>
+               	movq	%rax, %r13
@@@@
-               	movq	248(%rbx), %r13
-               	leaq	328(%r13), %r14
+               	movq	248(%rbx), %r15
+               	leaq	328(%r15), %r14
@@@@
-               	xchgl	%ebx, 328(%r13)
+               	xchgl	%ebx, 328(%r15)
@@@@
-               	testq	%r13, %r13
-               	je	0x47cb57 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe7>
+               	testq	%r15, %r15
+               	je	0x47dd15 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0xe5>
@@@@
-               	movslq	(%rax), %rsi
-               	movq	152(%r15), %rcx
-               	movq	%rsi, %rax
-               	orq	%rcx, %rax
-               	shrq	$32, %rax
-               	je	0x47cb91 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x121>
-               	movq	%rsi, %rax
+               	movl	(%rax), %esi
+               	movslq	%esi, %rax
+               	movq	152(%r13), %rcx
+               	movq	%rax, %rdx
+               	orq	%rcx, %rdx
+               	shrq	$32, %rdx
+               	je	0x47dd4e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x11e>
@@@@
-               	movq	144(%r15), %r8
+               	movq	144(%r13), %r8
@@@@
-               	movq	144(%r15), %r8
+               	movq	144(%r13), %r8
@@@@
-               	jne	0x47cc1c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x1ac>
-               	jmp	0x47cccf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
-               	movq	%rdi, %rbx
+               	jne	0x47ddcc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19c>
+               	jmp	0x47de93 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
+               	nopl	(%rax)
+               	movq	%rdi, %rbp
@@@@
-               	je	0x47cccf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
-               	movslq	8(%rdi), %rbp
-               	movq	%rbp, %rax
-               	orq	%rcx, %rax
-               	shrq	$32, %rax
-               	je	0x47cc00 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x190>
-               	movq	%rbp, %rax
+               	je	0x47de93 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
+               	movl	8(%rdi), %ebx
+               	movslq	%ebx, %rax
+               	movq	%rax, %rdx
+               	orq	%rcx, %rdx
+               	shrq	$32, %rdx
+               	je	0x47ddb0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x180>
@@@@
-               	je	0x47cc0f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x19f>
-               	jmp	0x47cccf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
-               	nopl	(%rax)
-               	movl	%ebp, %eax
+               	je	0x47ddbf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x18f>
+               	jmp	0x47de93 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
+               	movl	%ebx, %eax
@@@@
-               	jne	0x47cccf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
-               	cmpl	%ebp, %esi
-               	jne	0x47cbc0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
-               	testq	%rbx, %rbx
-               	je	0x47cccf <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x25f>
+               	jne	0x47de93 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
+               	cmpl	%ebx, %esi
+               	jne	0x47dd80 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x150>
+               	testq	%rbp, %rbp
+               	je	0x47de93 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x263>
@@@@
-               	je	0x47ccbc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
-               	movslq	8(%rax), %rax
-               	movq	%rax, %rdx
+               	je	0x47de76 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
+               	movl	8(%rax), %eax
+               	movslq	%eax, %rbp
+               	movq	%rbp, %rdx
@@@@
-               	je	0x47cc7c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20c>
+               	je	0x47de36 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x206>
+               	movq	%rbp, %rax
@@@@
-               	jne	0x47cc85 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
-               	jmp	0x47ccbc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x24c>
-               	movq	(%rdi), %rbp
-               	testq	%rbp, %rbp
-               	je	0x47cca3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x233>
-               	movslq	8(%rbp), %rax
-               	movq	%rax, %rdx
+               	jne	0x47de3f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x20f>
+               	jmp	0x47de76 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x246>
+               	movq	(%rdi), %rbx
+               	testq	%rbx, %rbx
+               	je	0x47de5d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x22d>
+               	movl	8(%rbx), %eax
+               	movslq	%eax, %rbp
+               	movq	%rbp, %rdx
@@@@
-               	je	0x47cc8b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x21b>
+               	je	0x47de45 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x215>
+               	movq	%rbp, %rax
@@@@
-               	movq	144(%r15), %r8
+               	movq	144(%r13), %r8
@@@@
-               	movq	%r15, %rax
+               	movq	%r13, %rax
@@@@
-               	jne	0x47ccb4 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x244>
-               	movq	%rbp, (%r10)
+               	jne	0x47de6e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x23e>
+               	movq	%rbx, (%r10)
@@@@
-               	callq	0x4137e0 <free@plt>
-               	addq	$-1, 168(%r15)
-               	testq	%r13, %r13
+               	callq	0x4137c0 <free@plt>
+               	movq	168(%r13), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 168(%r13)
+               	testq	%r15, %r15
@@@@
-               	movq	%r15, %rdi
+               	movq	%r13, %rdi
@@@@
-               	jmp	0x47cd0c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x29c>
-               	movq	-64(%r12), %r13
+               	jmp	0x47ded0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2a0>
+               	movq	-64(%r12), %r15
@@@@
-               	xchgl	%ebx, 328(%r13)
-               	movq	%r15, %rdi
+               	xchgl	%ebx, 328(%r15)
+               	movq	%r13, %rdi
@@@@
-               	testq	%r13, %r13
-               	je	0x47cd37 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
+               	testq	%r15, %r15
+               	je	0x47defb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
@@@@
-               	xchgl	%eax, 328(%r13)
+               	xchgl	%eax, 328(%r15)
@@@@
-               	je	0x47cd37 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2c7>
-               	addq	$328, %r13              # imm = 0x148
-               	movq	%r13, %rdi
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	je	0x47defb <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x2cb>
+               	addq	$328, %r15              # imm = 0x148
+               	movq	%r15, %rdi
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
@@@@
-               	movq	24(%rax), %rbx
+               	movq	24(%rax), %rbp
@@@@
-               	cmpq	%rbx, %r13
-               	je	0x47ce35 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
+               	cmpq	%rbp, %r13
+               	je	0x47dff5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
@@@@
-               	movq	40(%rax), %r14
@@@@
-               	leaq	50401(%rip), %rbp       # 0x489240 <_IO_stdin_used+0x840>
-               	jmp	0x47cd95 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
-               	nopw	%cs:(%rax,%rax)
-               	nop
+               	movq	40(%rax), %r14
+               	leaq	50653(%rip), %rbx       # 0x48a500 <_IO_stdin_used+0x800>
+               	jmp	0x47df55 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
+               	nopl	(%rax,%rax)
@@@@
-               	callq	0x47d380 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
-               	addq	$40, %rbx
-               	cmpq	%r14, %rbx
-               	je	0x47cdf0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
-               	cmpq	%rbx, %r13
-               	je	0x47ce35 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
-               	movl	(%rbx), %ecx
-               	cmpq	$3, %rcx
-               	ja	0x47cd83 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
-               	movq	8(%rbx), %rax
-               	movslq	(%rbp,%rcx,4), %rcx
-               	addq	%rbp, %rcx
+               	callq	0x47e580 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
+               	addq	$40, %rbp
+               	cmpq	%r14, %rbp
+               	je	0x47dfb0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x380>
+               	cmpq	%rbp, %r13
+               	je	0x47dff5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
+               	movl	(%rbp), %ecx
+               	cmpl	$3, %ecx
+               	ja	0x47df43 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x313>
+               	movq	8(%rbp), %rax
+               	movslq	(%rbx,%rcx,4), %rcx
+               	addq	%rbx, %rcx
@@@@
-               	movq	%rbp, %r15
-               	movq	16(%rbx), %rsi
-               	movq	24(%rbx), %rbp
+               	movq	%rbx, %r15
+               	movq	24(%rbp), %rbx
+               	movq	16(%rbp), %rsi
@@@@
-               	movq	%rbp, %rdi
-               	callq	0x47d380 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
-               	movq	%r15, %rbp
+               	movq	%rbx, %rdi
+               	callq	0x47e580 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)>
+               	movq	%r15, %rbx
@@@@
-               	movq	8(%r12), %rbx
+               	movq	8(%r12), %rbp
@@@@
-               	leaq	480(%rbx), %r14
-               	cmpq	%rbx, %r13
-               	jne	0x47cd95 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
-               	jmp	0x47ce35 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
+               	leaq	480(%rbp), %r14
+               	cmpq	%rbp, %r13
+               	jne	0x47df55 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x325>
+               	jmp	0x47dff5 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3c5>
@@@@
-               	movq	112(%r14), %rbp
-               	leaq	96(%r14), %rbx
-               	cmpq	%rbx, %rbp
-               	movq	8(%rsp), %r13
-               	jne	0x47d044 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5d4>
+               	movq	112(%r14), %rbx
+               	leaq	96(%r14), %rbp
+               	cmpq	%rbp, %rbx
+               	movl	12(%rsp), %r13d
+               	movq	16(%rsp), %r15
+               	jne	0x47e214 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x5e4>
@@@@
-               	callq	0x467e10 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
-               	movq	248(%r14), %rbp
-               	movl	$1, %ebx
-               	xchgl	%ebx, 328(%rbp)
+               	callq	0x468960 <kotlin::mm::StableRefRegistry::UnregisterStableRef(kotlin::mm::ThreadData*, kotlin::MultiSourceQueue<ObjHeader*, kotlin::SpinLock<(kotlin::MutexThreadStateHandling)0>, kotlin::std_support::allocator<ObjHeader*> >::Node*)>
+               	movq	248(%r14), %rbx
+               	movl	$1, %ebp
+               	xchgl	%ebp, 328(%rbx)
@@@@
-               	testq	%rbp, %rbp
+               	testq	%rbx, %rbx
@@@@
-               	je	0x47cec6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
-               	addq	$328, %rbp              # imm = 0x148
-               	movl	%ebx, %eax
-               	xchgl	%eax, (%rbp)
-               	testl	%ebx, %ebx
-               	jne	0x47cec6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
+               	je	0x47e08a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
+               	addq	$328, %rbx              # imm = 0x148
+               	movl	%ebp, %eax
+               	xchgl	%eax, (%rbx)
+               	testl	%ebp, %ebp
+               	jne	0x47e08a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
@@@@
-               	je	0x47cec6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x456>
-               	movq	%rbp, %rdi
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	je	0x47e08a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x45a>
+               	movq	%rbx, %rdi
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
@@@@
-               	callq	0x4137e0 <free@plt>
-               	movq	(%r13), %rax
+               	callq	0x4137c0 <free@plt>
+               	movq	(%r15), %rax
@@@@
-               	movq	(%r13), %rbx
-               	movl	567344(%rip), %edi      # 0x50775c <konan::terminationKey>
+               	movq	(%r15), %rbx
+               	movl	564706(%rip), %edi      # 0x507edc <konan::terminationKey>

@@ -102046,200 +103079,217 @@
@@@[(23, 24), (35, 53), (73, 82), (95, 102), (103, 109), (113, 116), (118, 122), (124, 126), (127, 129), (130, 136), (138, 140), (141, 143), (147, 151), (152, 157), (160, 174), (176, 183), (186, 194), (200, 212), (223, 224), (235, 242), (244, 247), (256, 263), (265, 268), (301, 307)]@@@
+               	movq	16(%rsp), %r15
@@@@
-               	callq	0x4137e0 <free@plt>
-               	jmp	0x47d0c7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x657>
-               	nopl	(%rax,%rax)
-               	movq	%rbp, %rdi
-               	callq	0x482301 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
-               	movq	%rax, %rbp
-               	cmpq	%rbx, %rax
-               	je	0x47ce4f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3df>
-               	movq	40(%rbp), %rsi
+               	callq	0x4137c0 <free@plt>
+               	jmp	0x47e2b3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x683>
+               	nop
+               	movq	%rbx, %rdi
+               	callq	0x4835d1 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
+               	movq	%rax, %rbx
+               	cmpq	%rbp, %rax
+               	je	0x47e014 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x3e4>
+               	movq	40(%rbx), %rsi
@@@@
-               	je	0x47d0b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x647>
+               	je	0x47e2a3 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x673>
+               	movq	352(%rbx), %rbp
+               	testq	%rbp, %rbp
+               	je	0x47e280 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x650>
+               	movq	%rbp, %rdi
+               	callq	0x4683c0 <void std::allocator_traits<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node> >::_S_destroy<kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>(kotlin::std_support::allocator<kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node>&, kotlin::SingleLockList<kotlin::mm::ThreadData, std::recursive_mutex, kotlin::std_support::allocator<kotlin::mm::ThreadData> >::Node*, ...)>
+               	movq	%rbp, %rdi
+               	callq	0x4137c0 <free@plt>
@@@@
-               	cmpq	$0, 454377(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
-               	je	0x47d0dd <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x66d>
-               	leaq	462632(%rip), %rdi      # 0x4ee000 <kotlin::mm::GlobalData::instance_+0x28>
+               	movslq	%r13d, %rbp
+               	cmpq	$0, 449786(%rip)        # 0x4ebfb8 <write+0x4ebfb8>
+               	je	0x47e2cc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x69c>
+               	leaq	459969(%rip), %rdi      # 0x4ee788 <kotlin::mm::GlobalData::instance_+0x28>
@@@@
-               	movq	%r13, %rdi
-               	callq	0x4137e0 <free@plt>
-               	callq	0x47b9d0 <(anonymous namespace)::theState()>
+               	movq	%r15, %rdi
+               	callq	0x4137c0 <free@plt>
+               	callq	0x47cb90 <(anonymous namespace)::theState()>
@@@@
-               	movq	16(%rsp), %rcx
-               	movq	%rcx, %rax
+               	movq	%rbp, %rax
@@@@
-               	je	0x47d12d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6bd>
-               	movq	%rcx, %rax
+               	je	0x47e317 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6e7>
+               	movq	%rbp, %rax
@@@@
-               	movq	%rdx, %r8
+               	movq	%rdx, %rcx
@@@@
-               	movq	(%rax,%r8,8), %rax
+               	movq	(%rax,%rcx,8), %rax
@@@@
-               	jne	0x47d14a <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6da>
-               	jmp	0x47d2b2 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
-               	movl	%ecx, %eax
+               	jne	0x47e334 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x704>
+               	jmp	0x47e4b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
+               	movl	%r13d, %eax
@@@@
-               	movl	%edx, %r8d
+               	movl	%edx, %ecx
@@@@
-               	movq	(%rax,%r8,8), %rax
+               	movq	(%rax,%rcx,8), %rax
@@@@
-               	cmpl	%ecx, 8(%rbx)
-               	jne	0x47d160 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6f0>
+               	cmpl	%r13d, 8(%rbx)
+               	jne	0x47e350 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
@@@@
-               	jne	0x47d1bc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x74c>
-               	jmp	0x47d2b2 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
+               	jne	0x47e39d <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x76d>
+               	jmp	0x47e4b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
+               	nop
@@@@
-               	je	0x47d2b2 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
-               	movslq	8(%rbx), %rsi
-               	movq	%rsi, %rax
-               	orq	%rdi, %rax
-               	shrq	$32, %rax
-               	je	0x47d1a0 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x730>
-               	movq	%rsi, %rax
+               	je	0x47e4b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
+               	movl	8(%rbx), %esi
+               	movslq	%esi, %rax
+               	movq	%rax, %rdx
+               	orq	%rdi, %rdx
+               	shrq	$32, %rdx
+               	je	0x47e380 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x750>
@@@@
-               	cmpq	%r8, %rdx
-               	je	0x47d1af <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x73f>
-               	jmp	0x47d2b2 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
-               	nopl	(%rax)
+               	cmpq	%rcx, %rdx
+               	je	0x47e38f <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x75f>
+               	jmp	0x47e4b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
@@@@
-               	cmpq	%r8, %rdx
-               	jne	0x47d2b2 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x842>
-               	cmpl	%ecx, %esi
-               	jne	0x47d160 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x6f0>
+               	cmpq	%rcx, %rdx
+               	jne	0x47e4b7 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x887>
+               	cmpl	%r13d, %esi
+               	jne	0x47e350 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x720>
@@@@
-               	movslq	8(%rbx), %rax
-               	movq	%rax, %rcx
-               	orq	%rdi, %rcx
-               	shrq	$32, %rcx
-               	je	0x47d1e6 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x776>
+               	movl	8(%rbx), %eax
+               	movslq	%eax, %rcx
+               	movq	%rcx, %rdx
+               	orq	%rdi, %rdx
+               	shrq	$32, %rdx
+               	je	0x47e3cc <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x79c>
+               	movq	%rcx, %rax
@@@@
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	je	0x47d29c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x82c>
-               	movslq	8(%rax), %rax
-               	movq	%rax, %rcx
+               	je	0x47e497 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x867>
+               	movl	8(%rax), %eax
+               	movslq	%eax, %rdx
+               	movq	%rdx, %rcx
@@@@
-               	je	0x47d25c <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7ec>
+               	je	0x47e457 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x827>
+               	movq	%rdx, %rax
@@@@
-               	je	0x47d283 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x813>
-               	movslq	8(%r10), %rax
-               	movq	%rax, %rdx
+               	je	0x47e47e <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x84e>
+               	movl	8(%r10), %eax
+               	movslq	%eax, %rbp
+               	movq	%rbp, %rdx
@@@@
-               	je	0x47d26b <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x7fb>
+               	je	0x47e466 <(anonymous namespace)::Kotlin_deinitRuntimeCallback(void*)+0x836>
+               	movq	%rbp, %rax
@@@@
-               	callq	0x4137e0 <free@plt>
-               	addq	$-1, 224(%r14)
+               	callq	0x4137c0 <free@plt>
+               	movq	224(%r14), %rax
+               	addq	$-1, %rax
+               	movq	%rax, 224(%r14)

@@ -102251,23 +103301,23 @@
@@@[(13, 17)]@@@
-               	callq	0x4669c0 <__clang_call_terminate>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x467510 <__clang_call_terminate>
+               	nopl	(%rax)

@@ -102356,91 +103406,95 @@
@@@[(20, 30), (33, 37), (38, 42), (51, 57), (59, 61), (62, 64), (65, 67), (68, 76), (78, 80), (81, 85), (86, 88), (89, 93), (94, 100), (101, 103), (112, 117), (118, 121)]@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	callq	0x47b9d0 <(anonymous namespace)::theState()>
-               	movq	%rax, %r12
-               	movl	$1, %ebx
-               	xchgl	%ebx, 328(%r15)
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	callq	0x47cb90 <(anonymous namespace)::theState()>
+               	movq	%rax, %rbx
+               	movl	$1, %ebp
+               	xchgl	%ebp, 328(%r15)
@@@@
-               	je	0x47d510 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x190>
-               	movl	%ebx, %eax
+               	je	0x47e71b <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x19b>
+               	movl	%ebp, %eax
@@@@
-               	testl	%ebx, %ebx
-               	jne	0x47d4ce <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
+               	testl	%ebp, %ebp
+               	jne	0x47e6ce <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x14e>
@@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	addl	$1, 264(%r12)
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	movl	264(%rbx), %eax
+               	addl	$1, %eax
+               	movl	%eax, 264(%rbx)
@@@@
-               	movq	%r12, %rdi
+               	movq	%rbx, %rdi
@@@@
-               	movq	%r14, %rbx
+               	movq	%r14, %r12
@@@@
-               	xchgl	%eax, (%rbx)
+               	xchgl	%eax, (%r12)
@@@@
-               	je	0x47d553 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1d3>
-               	jmp	0x47d56a <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
-               	callq	0x47b9d0 <(anonymous namespace)::theState()>
-               	movq	%rax, %r12
+               	je	0x47e768 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1e8>
+               	jmp	0x47e77f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
+               	callq	0x47cb90 <(anonymous namespace)::theState()>
+               	movq	%rax, %rbx
@@@@
-               	movq	%r12, %rdi
+               	movq	%rbx, %rdi
@@@@
-               	addl	$1, 264(%r12)
+               	movl	264(%rbx), %eax
+               	addl	$1, %eax
+               	movl	%eax, 264(%rbx)
@@@@
-               	movq	-64(%rax), %rbx
+               	movq	-64(%rax), %r12
@@@@
-               	xchgl	%ebp, 328(%rbx)
-               	movq	%r12, %rdi
+               	xchgl	%ebp, 328(%r12)
+               	movq	%rbx, %rdi
@@@@
-               	testq	%rbx, %rbx
-               	je	0x47d5a6 <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x226>
-               	addq	$328, %rbx              # imm = 0x148
+               	testq	%r12, %r12
+               	je	0x47e7bb <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x23b>
+               	addq	$328, %r12              # imm = 0x148
@@@@
-               	xchgl	%eax, (%rbx)
+               	xchgl	%eax, (%r12)
@@@@
-               	je	0x47d56a <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ea>
-               	movq	%rbx, %rdi
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	addq	$40, %r12
+               	je	0x47e77f <(anonymous namespace)::Future::cancelUnlocked(MemoryState*)+0x1ff>
@@@@
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	addq	$40, %rbx
+               	movq	%rbx, %rdi

@@ -102449,8 +103503,8 @@
@@@[(3, 7)]@@@
-               	addq	$40, %r12
-               	movq	%r12, %rdi
+               	addq	$40, %rbx
+               	movq	%rbx, %rdi

@@ -102467,24 +103521,24 @@
@@@[(3, 7)]@@@
-               	jmp	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	nopw	%cs:(%rax,%rax)
+               	jmp	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	nopl	(%rax,%rax)

@@ -102660,101 +103714,107 @@
@@@[(44, 45), (48, 57), (67, 72), (73, 78), (103, 105), (128, 140)]@@@
+               	subq	$32, %rsp
@@@@
-               	cmpxchgl	%ebp, 459393(%rip)      # 0x4edbc4 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
-               	jne	0x47d94a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1a>
-               	callq	0x47d9d0 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
+               	cmpxchgl	%ebp, 456669(%rip)      # 0x4ee334 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
+               	jne	0x47eb5e <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()>((anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'())+0x1e>
+               	callq	0x47ec10 <(anonymous namespace)::TerminateHandler::queuedHandler()::'lambda'()::operator()() const>
+               	movq	$0, 16(%rsp)
+               	movl	$1, 24(%rsp)
+               	movb	$0, 28(%rsp)
@@@@
-               	movl	459337(%rip), %edi      # 0x4edbc0 <(anonymous namespace)::concurrentTerminateWrapper>
+               	movq	%rbx, 16(%rsp)
+               	movl	%ebp, 24(%rsp)
+               	movb	$1, 28(%rsp)
+               	movl	456577(%rip), %edi      # 0x4ee330 <(anonymous namespace)::concurrentTerminateWrapper>
@@@@
-               	movq	%rbx, %rdi
-               	movl	%ebp, %esi
-               	callq	0x4797c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
+               	leaq	8(%rsp), %rdi
+               	callq	0x47a6e0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
@@@@
-               	nopw	(%rax,%rax)
+               	nopw	%cs:(%rax,%rax)
@@@@
-               	je	0x47d9eb <(anonymous namespace)::TerminateHandler::instance()+0xb>
-               	leaq	-996(%rip), %rdi        # 0x47d620 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
-               	callq	0x481f1a <std::set_terminate(void (*)())>
-               	movq	%rax, 564624(%rip)      # 0x5077a0 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
-               	leaq	564609(%rip), %rdi      # 0x507798 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
-               	callq	0x481ed0 <__cxa_guard_release>
+               	je	0x47ec2b <(anonymous namespace)::TerminateHandler::instance()+0xb>
+               	leaq	-1044(%rip), %rdi       # 0x47e830 <(anonymous namespace)::TerminateHandler::kotlinHandler()>
+               	callq	0x4831ea <std::set_terminate(void (*)())>
+               	movq	%rax, 561872(%rip)      # 0x507f20 <(anonymous namespace)::TerminateHandler::instance()::singleton (.0)>
+               	leaq	561857(%rip), %rdi      # 0x507f18 <guard variable for (anonymous namespace)::TerminateHandler::instance()::singleton>
+               	callq	0x4831a0 <__cxa_guard_release>

@@ -102763,51 +103823,60 @@
@@@[(3, 5), (8, 18), (28, 33), (34, 39), (68, 75)]@@@
+               	subq	$32, %rsp
+               	movq	%rdi, 24(%rsp)
@@@@
-               	cmpxchgl	%ebp, 459153(%rip)      # 0x4edbc4 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
-               	jne	0x47da3a <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x1a>
-               	callq	0x47dac0 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
+               	cmpxchgl	%ebp, 456376(%rip)      # 0x4ee334 <(anonymous namespace)::concurrentTerminateWrapper+0x4>
+               	jne	0x47ec88 <void (anonymous namespace)::$_0::operator()<(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1>((anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1)+0x28>
+               	leaq	24(%rsp), %rdi
+               	callq	0x47ed30 <(anonymous namespace)::terminateWithUnhandledException(ObjHeader*)::$_1::operator()() const>
+               	movq	$0, 8(%rsp)
+               	movl	$1, 16(%rsp)
+               	movb	$0, 20(%rsp)
@@@@
-               	movl	459097(%rip), %edi      # 0x4edbc0 <(anonymous namespace)::concurrentTerminateWrapper>
+               	movq	%rbx, 8(%rsp)
+               	movl	%ebp, 16(%rsp)
+               	movb	$1, 20(%rsp)
+               	movl	456279(%rip), %edi      # 0x4ee330 <(anonymous namespace)::concurrentTerminateWrapper>
@@@@
-               	movq	%rbx, %rdi
-               	movl	%ebp, %esi
-               	callq	0x4797c0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
+               	movq	%rsp, %rdi
+               	callq	0x47a6e0 <kotlin::NativeOrUnregisteredThreadGuard::~NativeOrUnregisteredThreadGuard()>
@@@@
-               	callq	0x421990 <ReportUnhandledException>
-               	callq	0x478f20 <konan::abort()>
-               	nopl	(%rax,%rax)
+               	movq	(%rdi), %rdi
+               	callq	0x421ba0 <ReportUnhandledException>
+               	callq	0x479e40 <konan::abort()>
+               	nop

@@ -103032,120 +104101,127 @@
@@@[(12, 18), (24, 26), (35, 49), (51, 55), (58, 60), (61, 71), (73, 77), (79, 85), (89, 95), (98, 119), (129, 133), (134, 142), (143, 147), (151, 153)]@@@
-               	addq	$1, (%rdi,%r8,8)
-               	jne	0x47ddf0 <addHighPrecision+0xe0>
+               	movq	(%rdi,%r8,8), %rax
+               	incq	%rax
+               	movq	%rax, (%rdi,%r8,8)
+               	jne	0x47f066 <addHighPrecision+0xe6>
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)
@@@@
-               	jae	0x47de1b <subtractHighPrecision+0x1b>
-               	xorl	%r10d, %r10d
-               	jmp	0x47ded0 <subtractHighPrecision+0xd0>
-               	movl	%r8d, %r10d
-               	andl	$-4, %r10d
-               	leaq	-4(%r10), %rax
-               	movq	%rax, %r9
+               	jae	0x47f08a <subtractHighPrecision+0x1a>
+               	xorl	%eax, %eax
+               	jmp	0x47f150 <subtractHighPrecision+0xe0>
+               	movl	%r8d, %eax
+               	andl	$-4, %eax
+               	leaq	-4(%rax), %rbx
+               	movq	%rbx, %r9
@@@@
-               	testq	%rax, %rax
-               	je	0x47e144 <subtractHighPrecision+0x344>
+               	testq	%rbx, %rbx
+               	je	0x47f3ca <subtractHighPrecision+0x35a>
@@@@
-               	xorl	%eax, %eax
+               	xorl	%r10d, %r10d
@@@@
-               	nopw	(%rax,%rax)
-               	movdqu	(%rdi,%rax,8), %xmm1
-               	movdqu	16(%rdi,%rax,8), %xmm2
-               	movdqu	32(%rdi,%rax,8), %xmm3
-               	movdqu	48(%rdi,%rax,8), %xmm4
+               	nopl	(%rax)
+               	movdqu	(%rdi,%r10,8), %xmm1
+               	movdqu	16(%rdi,%r10,8), %xmm2
+               	movdqu	32(%rdi,%r10,8), %xmm3
+               	movdqu	48(%rdi,%r10,8), %xmm4
@@@@
-               	movdqu	%xmm1, (%rdi,%rax,8)
-               	movdqu	%xmm2, 16(%rdi,%rax,8)
+               	movdqu	%xmm1, (%rdi,%r10,8)
+               	movdqu	%xmm2, 16(%rdi,%r10,8)
@@@@
-               	movdqu	%xmm3, 32(%rdi,%rax,8)
-               	movdqu	%xmm4, 48(%rdi,%rax,8)
-               	addq	$8, %rax
+               	movdqu	%xmm3, 32(%rdi,%r10,8)
+               	movdqu	%xmm4, 48(%rdi,%r10,8)
+               	addq	$8, %r10
@@@@
-               	je	0x47dec0 <subtractHighPrecision+0xc0>
-               	movdqu	(%rdi,%rax,8), %xmm0
-               	movdqu	16(%rdi,%rax,8), %xmm1
+               	je	0x47f13c <subtractHighPrecision+0xcc>
+               	movdqu	(%rdi,%r10,8), %xmm0
+               	movdqu	16(%rdi,%r10,8), %xmm1
@@@@
-               	movdqu	%xmm0, (%rdi,%rax,8)
-               	movdqu	%xmm1, 16(%rdi,%rax,8)
-               	cmpq	%r8, %r10
-               	je	0x47dedd <subtractHighPrecision+0xdd>
-               	nopl	(%rax)
-               	notq	(%rdi,%r10,8)
-               	addq	$1, %r10
-               	cmpq	%r10, %r8
-               	jne	0x47ded0 <subtractHighPrecision+0xd0>
+               	movdqu	%xmm0, (%rdi,%r10,8)
+               	movdqu	%xmm1, 16(%rdi,%r10,8)
+               	cmpq	%r8, %rax
+               	je	0x47f164 <subtractHighPrecision+0xf4>
+               	nopw	%cs:(%rax,%rax)
+               	nop
+               	movq	(%rdi,%rax,8), %rbx
+               	notq	%rbx
+               	movq	%rbx, (%rdi,%rax,8)
+               	addq	$1, %rax
+               	cmpq	%rax, %r8
+               	jne	0x47f150 <subtractHighPrecision+0xe0>
@@@@
-               	movl	$2, %eax
-               	cmovgl	%esi, %eax
+               	movl	$2, %r9d
+               	cmovgl	%esi, %r9d
@@@@
-               	nopl	(%rax)
-               	addq	$1, (%rdi,%rbx,8)
-               	jne	0x47df20 <subtractHighPrecision+0x120>
+               	nop
+               	movq	(%rdi,%rbx,8), %rax
+               	incq	%rax
+               	movq	%rax, (%rdi,%rbx,8)
+               	jne	0x47f1a6 <subtractHighPrecision+0x136>
@@@@
-               	cmpq	%rbx, %rax
-               	jne	0x47df10 <subtractHighPrecision+0x110>
+               	cmpq	%rbx, %r9
+               	jne	0x47f190 <subtractHighPrecision+0x120>
@@@@
-               	nopl	(%rax)
+               	nop

@@ -103183,21 +104259,23 @@
@@@[(9, 15)]@@@
-               	addq	$1, (%rdi,%r9,8)
-               	jne	0x47e020 <subtractHighPrecision+0x220>
+               	movq	(%rdi,%r9,8), %rax
+               	incq	%rax
+               	movq	%rax, (%rdi,%r9,8)
+               	jne	0x47f2a6 <subtractHighPrecision+0x236>

@@ -103205,14 +104283,13 @@
@@@[(10, 13)]@@@
-               	nopw	%cs:(%rax,%rax)
-               	nopl	(%rax)
+               	nopl	(%rax,%rax)

@@ -103238,41 +104315,44 @@
@@@[(6, 10), (27, 34), (41, 43), (50, 56)]@@@
-               	notq	(%rdi,%rax,8)
+               	movq	(%rdi,%rax,8), %rcx
+               	notq	%rcx
+               	movq	%rcx, (%rdi,%rax,8)
@@@@
-               	nopl	(%rax)
-               	addq	$1, (%rdi,%rcx,8)
-               	jne	0x47e140 <subtractHighPrecision+0x340>
+               	movq	(%rdi,%rcx,8), %rdx
+               	incq	%rdx
+               	movq	%rdx, (%rdi,%rcx,8)
+               	jne	0x47f3c6 <subtractHighPrecision+0x356>
@@@@
-               	xorl	%eax, %eax
+               	xorl	%r10d, %r10d
@@@@
-               	jne	0x47e0bd <subtractHighPrecision+0x2bd>
-               	jmp	0x47e0df <subtractHighPrecision+0x2df>
-               	nopw	%cs:(%rax,%rax)
+               	jne	0x47f33d <subtractHighPrecision+0x2cd>
+               	jmp	0x47f35f <subtractHighPrecision+0x2ef>
+               	nopl	(%rax)

@@ -103350,9 +104430,11 @@
@@@[(3, 6), (7, 10)]@@@
-               	jg	0x47e230 <simpleShiftLeftHighPrecision+0xc0>
+               	jg	0x47f4b0 <simpleShiftLeftHighPrecision+0xc0>
+               	movq	(%rbx), %rax
@@@@
-               	shlq	%cl, (%rbx)
+               	shlq	%cl, %rax
+               	movq	%rax, (%rbx)

@@ -103385,20 +104467,19 @@
@@@[(18, 19)]@@@
-               	nopw	%cs:(%rax,%rax)

@@ -103815,193 +104896,204 @@
@@@[(3, 9), (11, 17), (20, 22), (23, 27), (29, 36), (37, 40), (41, 45), (48, 55), (71, 75), (77, 79), (80, 81), (85, 88), (91, 101), (103, 105), (108, 112), (116, 117), (121, 124), (203, 209), (211, 217), (220, 222), (223, 227), (229, 236), (237, 240), (241, 245), (248, 252), (253, 259), (262, 264), (265, 267)]@@@
-               	jl	0x47ebb7 <timesTenToTheEHighPrecision+0x427>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	jl	0x47fe5d <timesTenToTheEHighPrecision+0x44d>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nop
-               	movl	(%rdi,%rax,8), %ebx
-               	movl	4(%rdi,%rax,8), %edx
+               	nopl	(%rax)
+               	movq	(%rdi,%rax,8), %rbx
+               	movl	%ebx, %ebx
@@@@
+               	movq	(%rdi,%rax,8), %rbx
+               	shrq	$32, %rbx
@@@@
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	movq	8(%rdi,%rax,8), %rbx
+               	movl	%ebx, %ebx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	movl	12(%rdi,%rax,8), %edx
+               	movq	8(%rdi,%rax,8), %rbx
+               	shrq	$32, %rbx
@@@@
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47e8e0 <timesTenToTheEHighPrecision+0x150>
-               	jmp	0x47efe7 <timesTenToTheEHighPrecision+0x857>
+               	cmpq	%rax, %rdx
+               	jne	0x47fb60 <timesTenToTheEHighPrecision+0x150>
+               	jmp	0x4802a6 <timesTenToTheEHighPrecision+0x896>
+               	nop
@@@@
-               	movl	%r8d, %r10d
-               	andl	$2147483646, %r10d      # imm = 0x7FFFFFFE
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nop
+               	nopl	(%rax)
@@@@
-               	movl	4(%rdi,%rcx,8), %edx
@@@@
-               	imulq	$1000000000, %rdx, %rax # imm = 0x3B9ACA00
+               	movl	4(%rdi,%rcx,8), %eax
+               	imulq	$1000000000, %rax, %rax # imm = 0x3B9ACA00
@@@@
-               	movl	8(%rdi,%rcx,8), %edx
-               	imulq	$1000000000, %rdx, %rdx # imm = 0x3B9ACA00
-               	addq	%rax, %rdx
-               	movl	%edx, 8(%rdi,%rcx,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rcx,8), %ebx
+               	imulq	$1000000000, %rbx, %rbx # imm = 0x3B9ACA00
+               	addq	%rax, %rbx
+               	movl	%ebx, 8(%rdi,%rcx,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rax
+               	addq	%rbx, %rax
@@@@
-               	cmpq	%rcx, %r10
-               	jne	0x47e980 <timesTenToTheEHighPrecision+0x1f0>
+               	cmpq	%rcx, %rdx
+               	jne	0x47fc10 <timesTenToTheEHighPrecision+0x200>
@@@@
-               	movl	4(%rdi,%rcx,8), %ebx
@@@@
-               	imulq	$1000000000, %rbx, %rax # imm = 0x3B9ACA00
+               	movl	4(%rdi,%rcx,8), %eax
+               	imulq	$1000000000, %rax, %rax # imm = 0x3B9ACA00
@@@@
-               	jmp	0x47ef4f <timesTenToTheEHighPrecision+0x7bf>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	jmp	0x4801ff <timesTenToTheEHighPrecision+0x7ef>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nopw	(%rax,%rax)
-               	movl	(%rdi,%rax,8), %ebx
-               	movl	4(%rdi,%rax,8), %edx
+               	nopw	%cs:(%rax,%rax)
+               	movq	(%rdi,%rax,8), %rbx
+               	movl	%ebx, %ebx
@@@@
+               	movq	(%rdi,%rax,8), %rbx
+               	shrq	$32, %rbx
@@@@
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	movq	8(%rdi,%rax,8), %rbx
+               	movl	%ebx, %ebx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	movl	12(%rdi,%rax,8), %edx
+               	movq	8(%rdi,%rax,8), %rbx
+               	shrq	$32, %rbx
@@@@
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47eb10 <timesTenToTheEHighPrecision+0x380>
+               	cmpq	%rax, %rdx
+               	jne	0x47fda0 <timesTenToTheEHighPrecision+0x390>
@@@@
-               	je	0x47eb93 <timesTenToTheEHighPrecision+0x403>
-               	movl	(%rdi,%rax,8), %edx
-               	movl	4(%rdi,%rax,8), %ebx
+               	je	0x47fe39 <timesTenToTheEHighPrecision+0x429>
+               	movq	(%rdi,%rax,8), %rdx
+               	movl	%edx, %edx
@@@@
+               	movq	(%rdi,%rax,8), %rdx
+               	shrq	$32, %rdx
@@@@
-               	leaq	(%rbx,%rbx,4), %rdx
+               	leaq	(%rdx,%rdx,4), %rdx

@@ -104009,288 +105101,295 @@
@@@[(7, 13), (15, 18), (19, 20), (24, 27), (30, 40), (42, 44), (47, 51), (55, 56), (60, 69), (71, 73), (74, 75), (79, 82), (85, 95), (97, 99), (102, 106), (110, 111), (115, 124), (126, 128), (129, 130), (134, 137), (140, 150), (152, 154), (157, 161), (165, 166), (170, 179), (181, 183), (184, 185), (189, 192), (195, 205), (207, 209), (212, 216), (220, 221), (225, 234), (236, 238), (239, 240), (244, 247), (250, 260), (262, 264), (267, 271), (275, 276), (280, 289), (291, 293), (294, 295), (299, 302), (305, 315), (317, 319), (322, 326), (330, 331), (335, 338), (339, 345), (347, 353), (356, 358), (359, 363), (365, 372), (373, 376), (377, 381), (384, 388), (389, 395), (398, 400), (401, 403), (415, 417)]@@@
-               	jmp	0x47efe7 <timesTenToTheEHighPrecision+0x857>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	jmp	0x4802a6 <timesTenToTheEHighPrecision+0x896>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nop
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)
@@@@
-               	movl	4(%rdi,%rax,8), %edx
@@@@
-               	imulq	$1000, %rdx, %rcx       # imm = 0x3E8
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$1000, %rcx, %rcx       # imm = 0x3E8
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	imulq	$1000, %rdx, %rdx       # imm = 0x3E8
-               	addq	%rcx, %rdx
-               	movl	%edx, 8(%rdi,%rax,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rax,8), %ebx
+               	imulq	$1000, %rbx, %rbx       # imm = 0x3E8
+               	addq	%rcx, %rbx
+               	movl	%ebx, 8(%rdi,%rax,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rcx
+               	addq	%rbx, %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47ebd0 <timesTenToTheEHighPrecision+0x440>
+               	cmpq	%rax, %rdx
+               	jne	0x47fe80 <timesTenToTheEHighPrecision+0x470>
@@@@
-               	movl	4(%rdi,%rax,8), %ebx
@@@@
-               	imulq	$1000, %rbx, %rcx       # imm = 0x3E8
-               	jmp	0x47ef78 <timesTenToTheEHighPrecision+0x7e8>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$1000, %rcx, %rcx       # imm = 0x3E8
+               	jmp	0x480228 <timesTenToTheEHighPrecision+0x818>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	movl	4(%rdi,%rax,8), %edx
@@@@
-               	imulq	$10000, %rdx, %rcx      # imm = 0x2710
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$10000, %rcx, %rcx      # imm = 0x2710
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	imulq	$10000, %rdx, %rdx      # imm = 0x2710
-               	addq	%rcx, %rdx
-               	movl	%edx, 8(%rdi,%rax,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rax,8), %ebx
+               	imulq	$10000, %rbx, %rbx      # imm = 0x2710
+               	addq	%rcx, %rbx
+               	movl	%ebx, 8(%rdi,%rax,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rcx
+               	addq	%rbx, %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47ec70 <timesTenToTheEHighPrecision+0x4e0>
+               	cmpq	%rax, %rdx
+               	jne	0x47ff20 <timesTenToTheEHighPrecision+0x510>
@@@@
-               	movl	4(%rdi,%rax,8), %ebx
@@@@
-               	imulq	$10000, %rbx, %rcx      # imm = 0x2710
-               	jmp	0x47ef78 <timesTenToTheEHighPrecision+0x7e8>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$10000, %rcx, %rcx      # imm = 0x2710
+               	jmp	0x480228 <timesTenToTheEHighPrecision+0x818>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	movl	4(%rdi,%rax,8), %edx
@@@@
-               	imulq	$100000, %rdx, %rcx     # imm = 0x186A0
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$100000, %rcx, %rcx     # imm = 0x186A0
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	imulq	$100000, %rdx, %rdx     # imm = 0x186A0
-               	addq	%rcx, %rdx
-               	movl	%edx, 8(%rdi,%rax,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rax,8), %ebx
+               	imulq	$100000, %rbx, %rbx     # imm = 0x186A0
+               	addq	%rcx, %rbx
+               	movl	%ebx, 8(%rdi,%rax,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rcx
+               	addq	%rbx, %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47ed10 <timesTenToTheEHighPrecision+0x580>
+               	cmpq	%rax, %rdx
+               	jne	0x47ffc0 <timesTenToTheEHighPrecision+0x5b0>
@@@@
-               	movl	4(%rdi,%rax,8), %ebx
@@@@
-               	imulq	$100000, %rbx, %rcx     # imm = 0x186A0
-               	jmp	0x47ef78 <timesTenToTheEHighPrecision+0x7e8>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$100000, %rcx, %rcx     # imm = 0x186A0
+               	jmp	0x480228 <timesTenToTheEHighPrecision+0x818>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	movl	4(%rdi,%rax,8), %edx
@@@@
-               	imulq	$1000000, %rdx, %rcx    # imm = 0xF4240
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$1000000, %rcx, %rcx    # imm = 0xF4240
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	imulq	$1000000, %rdx, %rdx    # imm = 0xF4240
-               	addq	%rcx, %rdx
-               	movl	%edx, 8(%rdi,%rax,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rax,8), %ebx
+               	imulq	$1000000, %rbx, %rbx    # imm = 0xF4240
+               	addq	%rcx, %rbx
+               	movl	%ebx, 8(%rdi,%rax,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rcx
+               	addq	%rbx, %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47edb0 <timesTenToTheEHighPrecision+0x620>
+               	cmpq	%rax, %rdx
+               	jne	0x480060 <timesTenToTheEHighPrecision+0x650>
@@@@
-               	movl	4(%rdi,%rax,8), %ebx
@@@@
-               	imulq	$1000000, %rbx, %rcx    # imm = 0xF4240
-               	jmp	0x47ef78 <timesTenToTheEHighPrecision+0x7e8>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$1000000, %rcx, %rcx    # imm = 0xF4240
+               	jmp	0x480228 <timesTenToTheEHighPrecision+0x818>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	movl	4(%rdi,%rax,8), %edx
@@@@
-               	imulq	$100000000, %rdx, %rcx  # imm = 0x5F5E100
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$100000000, %rcx, %rcx  # imm = 0x5F5E100
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	imulq	$100000000, %rdx, %rdx  # imm = 0x5F5E100
-               	addq	%rcx, %rdx
-               	movl	%edx, 8(%rdi,%rax,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rax,8), %ebx
+               	imulq	$100000000, %rbx, %rbx  # imm = 0x5F5E100
+               	addq	%rcx, %rbx
+               	movl	%ebx, 8(%rdi,%rax,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rcx
+               	addq	%rbx, %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47ee50 <timesTenToTheEHighPrecision+0x6c0>
+               	cmpq	%rax, %rdx
+               	jne	0x480100 <timesTenToTheEHighPrecision+0x6f0>
@@@@
-               	movl	4(%rdi,%rax,8), %ebx
@@@@
-               	imulq	$100000000, %rbx, %rcx  # imm = 0x5F5E100
-               	jmp	0x47ef78 <timesTenToTheEHighPrecision+0x7e8>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$100000000, %rcx, %rcx  # imm = 0x5F5E100
+               	jmp	0x480228 <timesTenToTheEHighPrecision+0x818>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nopl	(%rax,%rax)
+               	nopw	(%rax,%rax)
@@@@
-               	movl	4(%rdi,%rax,8), %edx
@@@@
-               	imulq	$10000000, %rdx, %rcx   # imm = 0x989680
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$10000000, %rcx, %rcx   # imm = 0x989680
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	imulq	$10000000, %rdx, %rdx   # imm = 0x989680
-               	addq	%rcx, %rdx
-               	movl	%edx, 8(%rdi,%rax,8)
-               	shrq	$32, %rdx
+               	movl	8(%rdi,%rax,8), %ebx
+               	imulq	$10000000, %rbx, %rbx   # imm = 0x989680
+               	addq	%rcx, %rbx
+               	movl	%ebx, 8(%rdi,%rax,8)
+               	shrq	$32, %rbx
@@@@
-               	addq	%rdx, %rcx
+               	addq	%rbx, %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47eef0 <timesTenToTheEHighPrecision+0x760>
+               	cmpq	%rax, %rdx
+               	jne	0x4801a0 <timesTenToTheEHighPrecision+0x790>
@@@@
-               	movl	4(%rdi,%rax,8), %ebx
@@@@
-               	imulq	$10000000, %rbx, %rcx   # imm = 0x989680
+               	movl	4(%rdi,%rax,8), %ecx
+               	imulq	$10000000, %rcx, %rcx   # imm = 0x989680
@@@@
-               	jmp	0x47f00b <timesTenToTheEHighPrecision+0x87b>
-               	movl	%r8d, %r9d
-               	andl	$2147483646, %r9d       # imm = 0x7FFFFFFE
+               	jmp	0x4802d1 <timesTenToTheEHighPrecision+0x8c1>
+               	movl	%r8d, %edx
+               	andl	$2147483646, %edx       # imm = 0x7FFFFFFE
@@@@
-               	nop
-               	movl	(%rdi,%rax,8), %ebx
-               	movl	4(%rdi,%rax,8), %edx
+               	nopl	(%rax)
+               	movq	(%rdi,%rax,8), %rbx
+               	movl	%ebx, %ebx
@@@@
+               	movq	(%rdi,%rax,8), %rbx
+               	shrq	$32, %rbx
@@@@
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	movl	8(%rdi,%rax,8), %edx
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	movq	8(%rdi,%rax,8), %rbx
+               	movl	%ebx, %ebx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	movl	12(%rdi,%rax,8), %edx
+               	movq	8(%rdi,%rax,8), %rbx
+               	shrq	$32, %rbx
@@@@
-               	leaq	(%rdx,%rdx,4), %rdx
-               	leaq	(%rcx,%rdx,2), %rcx
+               	leaq	(%rbx,%rbx,4), %rbx
+               	leaq	(%rcx,%rbx,2), %rcx
@@@@
-               	cmpq	%rax, %r9
-               	jne	0x47ef90 <timesTenToTheEHighPrecision+0x800>
+               	cmpq	%rax, %rdx
+               	jne	0x480240 <timesTenToTheEHighPrecision+0x830>
@@@@
-               	je	0x47f013 <timesTenToTheEHighPrecision+0x883>
-               	movl	(%rdi,%rax,8), %edx
-               	movl	4(%rdi,%rax,8), %ebx
+               	je	0x4802d9 <timesTenToTheEHighPrecision+0x8c9>
+               	movq	(%rdi,%rax,8), %rdx
+               	movl	%edx, %edx
@@@@
+               	movq	(%rdi,%rax,8), %rdx
+               	shrq	$32, %rdx
@@@@
-               	leaq	(%rbx,%rbx,4), %rdx
+               	leaq	(%rdx,%rdx,4), %rdx
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)

@@ -104299,31 +105398,31 @@
@@@[(3, 9)]@@@
-               	subq	$200, %rsp
-               	movl	%edx, %r12d
-               	movl	%esi, %r14d
+               	subq	$184, %rsp
+               	movl	%edx, %r15d
+               	movl	%esi, %r12d

@@ -104355,42 +105454,42 @@
@@@[(29, 33)]@@@
-               	testl	%r14d, %r14d
-               	cmovnsl	%r14d, %r8d
+               	testl	%r12d, %r12d
+               	cmovnsl	%r12d, %r8d

@@ -104417,111 +105516,112 @@
@@@[(25, 31), (33, 37), (38, 50), (51, 57), (58, 84), (85, 91), (94, 106), (113, 121), (122, 128), (137, 141), (149, 154), (163, 171), (172, 176)]@@@
-               	cmpl	$22, %r12d
-               	jbe	0x47f210 <createDouble1(unsigned long long*, int, int)+0x1e0>
-               	jmp	0x47f237 <createDouble1(unsigned long long*, int, int)+0x207>
+               	cmpl	$22, %r15d
+               	jbe	0x4804d0 <createDouble1(unsigned long long*, int, int)+0x1e0>
+               	jmp	0x4804f7 <createDouble1(unsigned long long*, int, int)+0x207>
@@@@
-               	cmpl	$22, %r12d
-               	ja	0x47f237 <createDouble1(unsigned long long*, int, int)+0x207>
+               	cmpl	$22, %r15d
+               	ja	0x4804f7 <createDouble1(unsigned long long*, int, int)+0x207>
@@@@
-               	jg	0x47f237 <createDouble1(unsigned long long*, int, int)+0x207>
-               	movq	8(%rsp), %rdi
-               	movl	%r14d, %esi
-               	callq	0x47e440 <toDoubleHighPrecision>
-               	movl	%r12d, %eax
-               	leaq	110707(%rip), %rcx      # 0x49a2a0 <tens>
+               	jg	0x4804f7 <createDouble1(unsigned long long*, int, int)+0x207>
+               	movq	16(%rsp), %rdi
+               	movl	%r12d, %esi
+               	callq	0x47f6c0 <toDoubleHighPrecision>
+               	movl	%r15d, %eax
+               	leaq	110707(%rip), %rcx      # 0x49b560 <tens>
@@@@
-               	jmp	0x47fcaa <createDouble1(unsigned long long*, int, int)+0xc7a>
-               	cmpl	$-22, %r12d
-               	jb	0x47f265 <createDouble1(unsigned long long*, int, int)+0x235>
+               	jmp	0x480fb8 <createDouble1(unsigned long long*, int, int)+0xcc8>
+               	cmpl	$-22, %r15d
+               	jb	0x480525 <createDouble1(unsigned long long*, int, int)+0x235>
@@@@
-               	jg	0x47f265 <createDouble1(unsigned long long*, int, int)+0x235>
-               	negl	%r12d
-               	movq	8(%rsp), %rdi
-               	movl	%r14d, %esi
-               	callq	0x47e440 <toDoubleHighPrecision>
-               	leaq	110662(%rip), %rax      # 0x49a2a0 <tens>
-               	divsd	(%rax,%r12,8), %xmm0
-               	jmp	0x47fcaa <createDouble1(unsigned long long*, int, int)+0xc7a>
-               	cmpl	$308, %r12d             # imm = 0x134
-               	ja	0x47f2a2 <createDouble1(unsigned long long*, int, int)+0x272>
-               	movq	8(%rsp), %rdi
-               	movl	%r14d, %esi
-               	callq	0x47e440 <toDoubleHighPrecision>
+               	jg	0x480525 <createDouble1(unsigned long long*, int, int)+0x235>
+               	negl	%r15d
+               	movq	16(%rsp), %rdi
+               	movl	%r12d, %esi
+               	callq	0x47f6c0 <toDoubleHighPrecision>
+               	leaq	110662(%rip), %rax      # 0x49b560 <tens>
+               	divsd	(%rax,%r15,8), %xmm0
+               	jmp	0x480fb8 <createDouble1(unsigned long long*, int, int)+0xcc8>
+               	cmpl	$308, %r15d             # imm = 0x134
+               	ja	0x480562 <createDouble1(unsigned long long*, int, int)+0x272>
+               	movq	16(%rsp), %rdi
+               	movl	%r12d, %esi
+               	callq	0x47f6c0 <toDoubleHighPrecision>
@@@@
-               	cvtsi2sd	%r12d, %xmm1
-               	movsd	38922(%rip), %xmm0      # xmm0 = mem[0],zero
-                                                # 0x488a98 <_IO_stdin_used+0x98>
+               	cvtsi2sd	%r15d, %xmm1
+               	movsd	38986(%rip), %xmm0      # xmm0 = mem[0],zero
+                                                # 0x489d98 <_IO_stdin_used+0x98>
@@@@
-               	jmp	0x47f33c <createDouble1(unsigned long long*, int, int)+0x30c>
-               	cmpl	$309, %r12d             # imm = 0x135
-               	jl	0x47f2d7 <createDouble1(unsigned long long*, int, int)+0x2a7>
-               	movq	8(%rsp), %rdi
-               	movl	%r14d, %esi
-               	callq	0x47e440 <toDoubleHighPrecision>
+               	jmp	0x4805fb <createDouble1(unsigned long long*, int, int)+0x30b>
+               	cmpl	$309, %r15d             # imm = 0x135
+               	jl	0x480597 <createDouble1(unsigned long long*, int, int)+0x2a7>
+               	movq	16(%rsp), %rdi
+               	movl	%r12d, %esi
+               	callq	0x47f6c0 <toDoubleHighPrecision>
@@@@
-               	jmp	0x47f33c <createDouble1(unsigned long long*, int, int)+0x30c>
-               	movq	8(%rsp), %rdi
-               	movl	%r14d, %esi
-               	callq	0x47e440 <toDoubleHighPrecision>
+               	jmp	0x4805fb <createDouble1(unsigned long long*, int, int)+0x30b>
+               	movq	16(%rsp), %rdi
+               	movl	%r12d, %esi
+               	callq	0x47f6c0 <toDoubleHighPrecision>
@@@@
-               	cmpl	$4294966988, %r12d      # imm = 0xFFFFFECC
-               	jl	0x47f314 <createDouble1(unsigned long long*, int, int)+0x2e4>
-               	movl	%r12d, %eax
+               	cmpl	$4294966988, %r15d      # imm = 0xFFFFFECC
+               	jl	0x4805d4 <createDouble1(unsigned long long*, int, int)+0x2e4>
+               	movl	%r15d, %eax
@@@@
-               	jmp	0x47f33c <createDouble1(unsigned long long*, int, int)+0x30c>
-               	leal	52(%r12), %eax
+               	jmp	0x4805fb <createDouble1(unsigned long long*, int, int)+0x30b>
+               	leal	52(%r15), %eax
@@@@
-               	mulsd	38756(%rip), %xmm2      # 0x488aa0 <_IO_stdin_used+0xa0>
-               	movabsq	$9218868437227405312, %r13 # imm = 0x7FF0000000000000
+               	mulsd	38821(%rip), %xmm2      # 0x489da0 <_IO_stdin_used+0xa0>
+               	movq	%r15, %rbp
+               	movabsq	$9218868437227405312, %r15 # imm = 0x7FF0000000000000
@@@@
-               	movq	%xmm0, %r15
-               	leal	1(%r14), %eax
-               	movl	%eax, 120(%rsp)
-               	movq	72(%rsp), %rax
+               	movq	%xmm0, %rbx
+               	leal	1(%r12), %eax
+               	movl	%eax, 112(%rsp)
+               	movq	64(%rsp), %rax
@@@@
-               	movq	%rax, 96(%rsp)
-               	movslq	%r12d, %rax
+               	movq	%rax, 88(%rsp)
+               	movslq	%ebp, %rax

@@ -104530,30 +105630,30 @@
@@@[(7, 11), (12, 15), (16, 25), (28, 30), (34, 36)]@@@
-               	movq	%rdi, 176(%rsp)
-               	movl	%r12d, %edi
+               	movq	%rdi, 160(%rsp)
+               	movl	%ebp, %edi
@@@@
-               	movl	%edi, 64(%rsp)
+               	movl	%edi, 60(%rsp)
+               	movq	%rbx, %rdi
@@@@
-               	movq	%rsi, 168(%rsp)
-               	addl	%edx, %ecx
-               	addl	$3, %ecx
-               	movl	%ecx, 124(%rsp)
-               	movl	%r12d, %ecx
+               	movq	%rsi, 152(%rsp)
+               	leal	3(%rcx,%rdx), %ecx
+               	movl	%ecx, 116(%rsp)
+               	movl	%ebp, %ecx
@@@@
-               	movl	%r12d, %ecx
+               	movl	%ebp, %ecx
@@@@
-               	addl	%r14d, %ecx
+               	addl	%r12d, %ecx

@@ -104561,100 +105661,101 @@
@@@[(3, 12), (16, 20), (24, 28), (30, 33), (35, 61), (62, 64), (66, 74), (76, 108), (109, 115), (123, 127), (133, 141), (145, 151), (152, 153)]@@@
-               	movq	%r14, 88(%rsp)
-               	leal	(%r14,%rdx), %ecx
-               	addl	$1, %ecx
-               	movl	%ecx, 132(%rsp)
-               	movslq	%ecx, %rcx
+               	movq	%r12, 80(%rsp)
+               	leal	(%r12,%rdx), %esi
+               	addl	$1, %esi
+               	movslq	%esi, %rcx
@@@@
-               	movq	%rax, 184(%rsp)
-               	xorl	%eax, %eax
-               	movq	%rax, 56(%rsp)
+               	movq	%rax, 168(%rsp)
@@@@
-               	xorl	%r14d, %r14d
+               	xorl	%eax, %eax
+               	movq	%rax, 8(%rsp)
+               	xorl	%r12d, %r12d
@@@@
-               	movq	%r12, 104(%rsp)
+               	movq	%rbp, 96(%rsp)
+               	movl	%esi, 124(%rsp)
@@@@
-               	movq	%rdx, 136(%rsp)
-               	movq	%r12, %rbp
-               	movabsq	$4503599627370496, %rdx # imm = 0x10000000000000
-               	leaq	-1(%rdx), %rcx
-               	andq	%r15, %rcx
-               	movq	%rcx, %rsi
-               	orq	%rdx, %rsi
-               	testq	%r13, %r15
-               	cmoveq	%rcx, %rsi
-               	movl	%eax, %r12d
-               	movq	%rsi, %rax
-               	movq	%rsi, 16(%rsp)
-               	movq	%rsi, 80(%rsp)
-               	movq	%r15, %rax
+               	movq	%rdx, 128(%rsp)
+               	movabsq	$4503599627370496, %rsi # imm = 0x10000000000000
+               	leaq	-1(%rsi), %rcx
+               	andq	%rdi, %rcx
+               	movq	%rcx, %rdx
+               	orq	%rsi, %rdx
+               	testq	%r15, %rdi
+               	cmoveq	%rcx, %rdx
+               	movl	%eax, %r13d
+               	movq	%rdx, 24(%rsp)
+               	movq	%rdi, 144(%rsp)
+               	movq	%rdi, %rax
@@@@
-               	leal	-1075(%rax), %r13d
+               	leal	-1075(%rax), %ebx
@@@@
-               	cmovel	%eax, %r13d
-               	movq	56(%rsp), %rdi
-               	testq	%rdi, %rdi
-               	je	0x47f4d9 <createDouble1(unsigned long long*, int, int)+0x4a9>
-               	cmpq	8(%rsp), %rdi
-               	je	0x47f4d9 <createDouble1(unsigned long long*, int, int)+0x4a9>
-               	callq	0x4137e0 <free@plt>
+               	cmovel	%eax, %ebx
@@@@
-               	je	0x47f4e8 <createDouble1(unsigned long long*, int, int)+0x4b8>
-               	callq	0x4137e0 <free@plt>
-               	movq	(%rsp), %rdi
-               	testq	%rdi, %rdi
-               	je	0x47f4f6 <createDouble1(unsigned long long*, int, int)+0x4c6>
-               	callq	0x4137e0 <free@plt>
-               	testq	%r14, %r14
-               	je	0x47f503 <createDouble1(unsigned long long*, int, int)+0x4d3>
-               	movq	%r14, %rdi
-               	callq	0x4137e0 <free@plt>
-               	movl	%r13d, %eax
-               	movq	%rbp, %rcx
+               	je	0x480790 <createDouble1(unsigned long long*, int, int)+0x4a0>
+               	cmpq	16(%rsp), %rdi
+               	je	0x480790 <createDouble1(unsigned long long*, int, int)+0x4a0>
+               	callq	0x4137c0 <free@plt>
+               	movq	(%rsp), %rbp
+               	testq	%rbp, %rbp
+               	movq	8(%rsp), %r15
+               	je	0x4807a6 <createDouble1(unsigned long long*, int, int)+0x4b6>
+               	movq	%rbp, %rdi
+               	callq	0x4137c0 <free@plt>
+               	testq	%r15, %r15
+               	je	0x4807b3 <createDouble1(unsigned long long*, int, int)+0x4c3>
+               	movq	%r15, %rdi
+               	callq	0x4137c0 <free@plt>
+               	testq	%r12, %r12
+               	je	0x4807c0 <createDouble1(unsigned long long*, int, int)+0x4d0>
+               	movq	%r12, %rdi
+               	callq	0x4137c0 <free@plt>
+               	movl	%ebx, %eax
+               	movq	96(%rsp), %rcx
@@@@
-               	movq	%r15, 152(%rsp)
-               	movq	%r12, 144(%rsp)
-               	js	0x47f5f0 <createDouble1(unsigned long long*, int, int)+0x5c0>
+               	movq	%r13, 136(%rsp)
+               	js	0x4808b0 <createDouble1(unsigned long long*, int, int)+0x5c0>
+               	movl	%ebx, %r14d
@@@@
-               	movq	72(%rsp), %rax
+               	movq	16(%rsp), %rbp
+               	movq	%r15, 8(%rsp)
+               	movq	64(%rsp), %rax
@@@@
-               	movq	8(%rsp), %rsi
-               	movq	96(%rsp), %rdx
-               	callq	0x4137d0 <memcpy@plt>
-               	movq	%rbx, 56(%rsp)
+               	movq	%rbp, %rsi
+               	movq	88(%rsp), %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%rbx, 32(%rsp)
@@@@
-               	movl	%ebp, %edx
-               	callq	0x47e790 <timesTenToTheEHighPrecision>
-               	movl	%r13d, %ebp
+               	movq	96(%rsp), %rdx
+               	callq	0x47fa10 <timesTenToTheEHighPrecision>
+               	movl	%r14d, %ebp
@@@@
-               	movl	%r13d, %r12d

@@ -104663,197 +105764,202 @@
@@@[(3, 6), (9, 19), (21, 27), (35, 43), (50, 60), (61, 67), (68, 72), (76, 105), (113, 115), (117, 120), (122, 128), (129, 148), (156, 164), (171, 181), (182, 186), (191, 195), (201, 223), (224, 231), (232, 240), (246, 250), (251, 253), (254, 259), (260, 275), (280, 284), (285, 287), (288, 297), (298, 304), (308, 312), (313, 314)]@@@
-               	movq	16(%rsp), %rax
+               	movq	24(%rsp), %rax
+               	movq	%rax, 72(%rsp)
@@@@
-               	movl	%r12d, %edx
-               	callq	0x47e170 <simpleShiftLeftHighPrecision>
-               	movq	56(%rsp), %r12
-               	movq	%r13, %rbp
-               	jmp	0x47f7f0 <createDouble1(unsigned long long*, int, int)+0x7c0>
+               	movl	%r14d, %edx
+               	callq	0x47f3f0 <simpleShiftLeftHighPrecision>
+               	movq	%rbx, %rbp
+               	movq	32(%rsp), %r14
+               	jmp	0x480ab0 <createDouble1(unsigned long long*, int, int)+0x7c0>
@@@@
-               	js	0x47f6a2 <createDouble1(unsigned long long*, int, int)+0x672>
-               	negl	%r13d
-               	movl	%r13d, %r15d
+               	js	0x480964 <createDouble1(unsigned long long*, int, int)+0x674>
+               	negl	%ebx
+               	movl	%ebx, %r15d
@@@@
-               	je	0x47fbb1 <createDouble1(unsigned long long*, int, int)+0xb81>
-               	movq	%rax, %r12
-               	movq	72(%rsp), %rax
-               	leaq	(%r12,%rax,8), %rdi
+               	je	0x480f14 <createDouble1(unsigned long long*, int, int)+0xc24>
+               	movq	%rax, %r14
+               	movq	64(%rsp), %rax
+               	leaq	(%r14,%rax,8), %rdi
@@@@
-               	movq	%r12, %rdi
-               	movq	8(%rsp), %rsi
-               	movq	96(%rsp), %rdx
-               	callq	0x4137d0 <memcpy@plt>
-               	movq	%r12, %rdi
+               	movq	%r14, %rdi
+               	movq	16(%rsp), %rsi
+               	movq	88(%rsp), %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%r14, %rdi
@@@@
-               	movq	104(%rsp), %rdx
-               	callq	0x47e790 <timesTenToTheEHighPrecision>
-               	movq	%r12, %rdi
+               	movq	96(%rsp), %rdx
+               	callq	0x47fa10 <timesTenToTheEHighPrecision>
+               	movq	%r14, %rdi
@@@@
-               	movl	%r13d, %edx
-               	callq	0x47e170 <simpleShiftLeftHighPrecision>
+               	movl	%ebx, %edx
+               	callq	0x47f3f0 <simpleShiftLeftHighPrecision>
@@@@
-               	je	0x47fbda <createDouble1(unsigned long long*, int, int)+0xbaa>
-               	movq	%rax, %rbx
-               	movq	16(%rsp), %rax
-               	movq	%rax, (%rbx)
-               	movl	$1, %ebp
-               	jmp	0x47f7f0 <createDouble1(unsigned long long*, int, int)+0x7c0>
-               	testl	%r13d, %r13d
-               	js	0x47f72f <createDouble1(unsigned long long*, int, int)+0x6ff>
-               	movq	(%rsp), %r15
-               	movl	%r13d, %eax
-               	shrl	$6, %eax
-               	addl	124(%rsp), %eax
-               	movq	%rax, %r12
-               	movslq	%eax, %rbx
-               	leaq	(,%rbx,8), %rsi
+               	je	0x480f1b <createDouble1(unsigned long long*, int, int)+0xc2b>
+               	movq	%rax, %rbp
+               	movq	24(%rsp), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%rax, (%rbp)
+               	movl	$1, %r13d
+               	jmp	0x480ab0 <createDouble1(unsigned long long*, int, int)+0x7c0>
+               	testl	%ebx, %ebx
+               	js	0x4809e4 <createDouble1(unsigned long long*, int, int)+0x6f4>
+               	movl	%ebx, %r13d
+               	shrl	$6, %r13d
+               	addl	116(%rsp), %r13d
+               	movslq	%r13d, %r15
+               	leaq	(,%r15,8), %rsi
@@@@
-               	leaq	-8(,%rbx,8), %rdx
+               	leaq	-8(,%r15,8), %rdx
@@@@
-               	movq	16(%rsp), %rax
+               	movq	24(%rsp), %rax
+               	movq	%rax, 72(%rsp)
@@@@
-               	movl	%ebx, %esi
-               	movl	64(%rsp), %edx
-               	callq	0x47e790 <timesTenToTheEHighPrecision>
+               	movl	%r15d, %esi
+               	movl	60(%rsp), %edx
+               	callq	0x47fa10 <timesTenToTheEHighPrecision>
@@@@
-               	movl	%ebx, %esi
-               	movl	%r13d, %edx
-               	callq	0x47e170 <simpleShiftLeftHighPrecision>
-               	movq	8(%rsp), %rax
-               	movq	88(%rsp), %r15
-               	movq	%rbp, %rbx
-               	movq	%r12, %rbp
-               	movq	%rax, %r12
-               	jmp	0x47f7f0 <createDouble1(unsigned long long*, int, int)+0x7c0>
-               	negl	%r13d
-               	movl	%r13d, %r15d
+               	movl	%r15d, %esi
+               	movl	%ebx, %edx
+               	callq	0x47f3f0 <simpleShiftLeftHighPrecision>
+               	movq	16(%rsp), %r14
+               	movq	80(%rsp), %r15
+               	jmp	0x480ab0 <createDouble1(unsigned long long*, int, int)+0x7c0>
+               	negl	%ebx
+               	movl	%ebx, %r15d
@@@@
-               	je	0x47fbb1 <createDouble1(unsigned long long*, int, int)+0xb81>
-               	movq	%rax, %r12
-               	movq	72(%rsp), %rax
-               	leaq	(%r12,%rax,8), %rdi
+               	je	0x480f14 <createDouble1(unsigned long long*, int, int)+0xc24>
+               	movq	%rax, %r14
+               	movq	64(%rsp), %rax
+               	leaq	(%r14,%rax,8), %rdi
@@@@
-               	movq	%r12, %rdi
-               	movq	8(%rsp), %rsi
-               	movq	96(%rsp), %rdx
-               	callq	0x4137d0 <memcpy@plt>
-               	movq	%r12, %rdi
+               	movq	%r14, %rdi
+               	movq	16(%rsp), %rsi
+               	movq	88(%rsp), %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%r14, %rdi
@@@@
-               	movl	%r13d, %edx
-               	callq	0x47e170 <simpleShiftLeftHighPrecision>
+               	movl	%ebx, %edx
+               	callq	0x47f3f0 <simpleShiftLeftHighPrecision>
@@@@
-               	je	0x47fbda <createDouble1(unsigned long long*, int, int)+0xbaa>
-               	movq	%rax, %rbx
+               	je	0x480f1b <createDouble1(unsigned long long*, int, int)+0xc2b>
+               	movq	%rax, %rbp
@@@@
-               	movq	16(%rsp), %rax
-               	movq	%rax, (%rbx)
-               	movq	%rbx, %rdi
-               	movl	116(%rsp), %ebp
-               	movl	%ebp, %esi
-               	movl	64(%rsp), %edx
-               	callq	0x47e790 <timesTenToTheEHighPrecision>
-               	nopw	(%rax,%rax)
-               	movq	%r12, %rdi
+               	movq	24(%rsp), %rax
+               	movq	%rax, 72(%rsp)
+               	movq	%rax, (%rbp)
+               	movq	%rbp, %rdi
+               	movl	108(%rsp), %ebx
+               	movl	%ebx, %esi
+               	movl	60(%rsp), %edx
+               	callq	0x47fa10 <timesTenToTheEHighPrecision>
+               	movl	%ebx, %r13d
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax)
+               	movq	%r14, 32(%rsp)
+               	movq	%r14, %rdi
@@@@
-               	movq	%rbx, %rdx
-               	movl	%ebp, %ecx
-               	callq	0x47e390 <compareHighPrecision>
+               	movq	%rbp, %rdx
+               	movl	%r13d, %ecx
+               	callq	0x47f610 <compareHighPrecision>
+               	movl	%eax, %r14d
@@@@
-               	movq	%rbx, 32(%rsp)
-               	movq	%rbp, 160(%rsp)
-               	movl	%eax, 28(%rsp)
-               	movq	%r12, %r13
-               	jle	0x47f860 <createDouble1(unsigned long long*, int, int)+0x830>
+               	movq	%rbp, (%rsp)
+               	jle	0x480b30 <createDouble1(unsigned long long*, int, int)+0x840>
+               	movq	%r13, %rbx
@@@@
-               	je	0x47fbc1 <createDouble1(unsigned long long*, int, int)+0xb91>
-               	movq	%rax, %r12
+               	je	0x480e9b <createDouble1(unsigned long long*, int, int)+0xbab>
+               	movq	%rax, %r13
@@@@
-               	movq	%r13, %rsi
+               	movq	32(%rsp), %rsi
@@@@
-               	callq	0x4137d0 <memcpy@plt>
-               	movq	%r12, %rdi
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%r13, 8(%rsp)
+               	movq	%r13, %rdi
@@@@
-               	movq	32(%rsp), %rdx
-               	movq	160(%rsp), %rcx
-               	callq	0x47de00 <subtractHighPrecision>
-               	jmp	0x47f8d0 <createDouble1(unsigned long long*, int, int)+0x8a0>
-               	je	0x47f8aa <createDouble1(unsigned long long*, int, int)+0x87a>
-               	movq	%rbp, %rbx
-               	movslq	%ebx, %rbp
+               	movq	(%rsp), %rdx
+               	movq	%rbx, %r13
+               	movl	%r13d, %ecx
+               	callq	0x47f070 <subtractHighPrecision>
+               	jmp	0x480bb0 <createDouble1(unsigned long long*, int, int)+0x8c0>
+               	nopw	(%rax,%rax)
+               	je	0x480b7e <createDouble1(unsigned long long*, int, int)+0x88e>
+               	movslq	%r13d, %rbp
@@@@
-               	je	0x47fbc1 <createDouble1(unsigned long long*, int, int)+0xb91>
-               	movq	%rax, %r12
+               	je	0x480e9b <createDouble1(unsigned long long*, int, int)+0xbab>
+               	movq	%rax, %rbx
@@@@
-               	movq	32(%rsp), %rsi
+               	movq	(%rsp), %rsi
@@@@
-               	callq	0x4137d0 <memcpy@plt>
-               	movq	%r12, %rdi
-               	movl	%ebx, %esi
-               	movq	%r13, %rdx
+               	callq	0x4137e0 <memcpy@plt>
+               	movq	%rbx, 8(%rsp)
+               	movq	%rbx, %rdi
+               	movl	%r13d, %esi
+               	movq	32(%rsp), %rdx
@@@@
-               	callq	0x47de00 <subtractHighPrecision>
-               	movl	%ebx, %r15d
-               	jmp	0x47f8d0 <createDouble1(unsigned long long*, int, int)+0x8a0>
+               	callq	0x47f070 <subtractHighPrecision>
+               	movl	%r13d, %r15d
+               	jmp	0x480bb0 <createDouble1(unsigned long long*, int, int)+0x8c0>
@@@@
-               	je	0x47fbde <createDouble1(unsigned long long*, int, int)+0xbae>
-               	movq	%rax, %r12
+               	je	0x480f29 <createDouble1(unsigned long long*, int, int)+0xc39>
+               	movq	%rax, 8(%rsp)
@@@@
+               	nopw	%cs:(%rax,%rax)

@@ -104861,245 +105967,268 @@
@@@[(3, 13), (14, 18), (21, 23), (24, 32), (40, 43), (44, 47), (48, 50), (52, 54), (55, 60), (61, 65), (72, 77), (78, 80), (81, 86), (93, 95), (97, 104), (105, 109), (110, 111), (112, 114), (116, 118), (125, 130), (131, 133), (134, 139), (140, 158), (159, 182), (187, 202), (203, 214), (215, 223), (227, 234), (236, 239), (240, 253), (254, 260), (274, 329), (333, 350), (351, 376), (388, 392), (397, 408), (409, 417), (418, 428)]@@@
-               	movq	%r12, (%rsp)
-               	je	0x47fbbc <createDouble1(unsigned long long*, int, int)+0xb8c>
-               	movq	%rax, %r14
-               	leal	1(%r15), %eax
-               	movl	%eax, 68(%rsp)
-               	movq	16(%rsp), %rax
+               	je	0x480e92 <createDouble1(unsigned long long*, int, int)+0xba2>
+               	movq	%rax, %r12
+               	leal	1(%r15), %ebx
+               	movq	72(%rsp), %rax
@@@@
-               	movq	%rax, 80(%rsp)
-               	movq	%r14, %rdi
+               	movq	%rax, 24(%rsp)
+               	movq	%r12, %rdi
@@@@
-               	movq	%r12, %r10
+               	movq	8(%rsp), %rax
@@@@
-               	leaq	80(%rsp), %rax
-               	cmovleq	%rax, %r10
-               	movq	%r13, 56(%rsp)
-               	jle	0x47fa39 <createDouble1(unsigned long long*, int, int)+0xa09>
+               	leaq	24(%rsp), %rcx
+               	cmovleq	%rcx, %rax
+               	jle	0x480d2c <createDouble1(unsigned long long*, int, int)+0xa3c>
+               	movl	%ebx, %r10d
@@@@
-               	nopl	(%rax)
+               	nopw	%cs:(%rax,%rax)
+               	nopl	(%rax,%rax)
@@@@
-               	movl	(%r14,%rdi,4), %esi
-               	movl	4(%r14,%rdi,4), %eax
+               	movl	(%r12,%rdi,4), %esi
@@@@
-               	movl	(%r10,%rdi,4), %edx
+               	movl	(%rax,%rdi,4), %edx
@@@@
-               	movl	%edx, (%r14,%rdi,4)
+               	movl	%edx, (%r12,%rdi,4)
@@@@
-               	addq	%rdx, %rax
-               	movl	4(%r10,%rdi,4), %edx
+               	movl	4(%r12,%rdi,4), %esi
+               	addq	%rdx, %rsi
+               	movl	4(%rax,%rdi,4), %edx
@@@@
-               	addq	%rax, %rdx
-               	movl	%edx, 4(%r14,%rdi,4)
+               	addq	%rsi, %rdx
+               	movl	%edx, 4(%r12,%rdi,4)
@@@@
-               	addl	%edx, (%r14,%rdi,4)
-               	jae	0x47f9b9 <createDouble1(unsigned long long*, int, int)+0x989>
+               	addl	(%r12,%rdi,4), %edx
+               	movl	%edx, (%r12,%rdi,4)
+               	jae	0x480c9c <createDouble1(unsigned long long*, int, int)+0x9ac>
@@@@
-               	leaq	(%r14,%rbx,8), %rdx
+               	leaq	(%r12,%rbx,8), %rdx
@@@@
-               	addl	$1, (%rdx)
+               	nop
+               	movl	(%rdx), %esi
+               	incl	%esi
+               	movl	%esi, (%rdx)
@@@@
-               	nopw	%cs:(%rax,%rax)
+               	movl	%r10d, %ebx
@@@@
-               	movl	4(%r14,%rdi,4), %eax
-               	movl	8(%r14,%rdi,4), %edx
-               	addq	%rbp, %rax
-               	movl	(%r10,%rdi,4), %ebp
+               	movl	4(%r12,%rdi,4), %edx
+               	addq	%rbp, %rdx
+               	movl	(%rax,%rdi,4), %ebp
@@@@
-               	addq	%rax, %rbp
-               	movl	%ebp, 4(%r14,%rdi,4)
+               	addq	%rdx, %rbp
+               	movl	%ebp, 4(%r12,%rdi,4)
@@@@
+               	movl	8(%r12,%rdi,4), %edx
@@@@
-               	movl	4(%r10,%rdi,4), %ebp
+               	movl	4(%rax,%rdi,4), %ebp
@@@@
-               	movl	%ebp, 8(%r14,%rdi,4)
+               	movl	%ebp, 8(%r12,%rdi,4)
@@@@
-               	addl	%ebp, 4(%r14,%rdi,4)
-               	jae	0x47fa39 <createDouble1(unsigned long long*, int, int)+0xa09>
+               	addl	4(%r12,%rdi,4), %ebp
+               	movl	%ebp, 4(%r12,%rdi,4)
+               	jae	0x480d2c <createDouble1(unsigned long long*, int, int)+0xa3c>
@@@@
-               	leaq	(%r14,%rsi,8), %rax
+               	leaq	(%r12,%rsi,8), %rax
@@@@
-               	addl	$1, (%rax)
+               	nopl	(%rax,%rax)
+               	movl	(%rax), %ecx
+               	incl	%ecx
+               	movl	%ecx, (%rax)
@@@@
-               	je	0x47fa30 <createDouble1(unsigned long long*, int, int)+0xa00>
-               	movq	16(%rsp), %rax
-               	movq	%rax, 80(%rsp)
-               	movq	%r14, %rdi
-               	movl	68(%rsp), %esi
-               	movq	32(%rsp), %rdx
-               	movq	160(%rsp), %rbp
-               	movl	%ebp, %ecx
-               	callq	0x47e390 <compareHighPrecision>
+               	je	0x480d20 <createDouble1(unsigned long long*, int, int)+0xa30>
+               	movq	24(%rsp), %rax
+               	shrq	%rax
+               	movq	%rax, 24(%rsp)
+               	movq	%r12, %rdi
+               	movl	%ebx, %esi
+               	movq	(%rsp), %rdx
+               	movl	%r13d, %ecx
+               	callq	0x47f610 <compareHighPrecision>
@@@@
-               	js	0x47fac1 <createDouble1(unsigned long long*, int, int)+0xa91>
-               	movq	104(%rsp), %r12
-               	movabsq	$9218868437227405312, %r13 # imm = 0x7FF0000000000000
-               	movq	152(%rsp), %r15
-               	movq	144(%rsp), %rbx
-               	movq	136(%rsp), %rdx
-               	je	0x47fb55 <createDouble1(unsigned long long*, int, int)+0xb25>
-               	cmpl	$0, 28(%rsp)
-               	js	0x47fb80 <createDouble1(unsigned long long*, int, int)+0xb50>
-               	cmpq	%r13, %r15
-               	je	0x47fc74 <createDouble1(unsigned long long*, int, int)+0xc44>
-               	addq	$1, %r15
+               	js	0x480da6 <createDouble1(unsigned long long*, int, int)+0xab6>
+               	movabsq	$9218868437227405312, %r15 # imm = 0x7FF0000000000000
+               	movq	144(%rsp), %rdi
+               	movq	136(%rsp), %rbx
+               	movq	128(%rsp), %rdx
+               	je	0x480e37 <createDouble1(unsigned long long*, int, int)+0xb47>
+               	testl	%r14d, %r14d
+               	js	0x480e61 <createDouble1(unsigned long long*, int, int)+0xb71>
+               	cmpq	%r15, %rdi
+               	je	0x480f7f <createDouble1(unsigned long long*, int, int)+0xc8f>
+               	addq	$1, %rdi
@@@@
-               	jl	0x47f479 <createDouble1(unsigned long long*, int, int)+0x449>
-               	jmp	0x47fc58 <createDouble1(unsigned long long*, int, int)+0xc28>
-               	cmpl	$0, 28(%rsp)
-               	movabsq	$9218868437227405312, %r13 # imm = 0x7FF0000000000000
-               	movq	152(%rsp), %r15
-               	movq	144(%rsp), %rbx
-               	jns	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
+               	jl	0x480735 <createDouble1(unsigned long long*, int, int)+0x445>
+               	jmp	0x480f63 <createDouble1(unsigned long long*, int, int)+0xc73>
+               	movl	%ebx, %ecx
+               	testl	%r14d, %r14d
+               	movabsq	$9218868437227405312, %r15 # imm = 0x7FF0000000000000
+               	movq	144(%rsp), %r14
+               	movq	136(%rsp), %rbx
+               	jns	0x480f44 <createDouble1(unsigned long long*, int, int)+0xc54>
@@@@
-               	cmpq	%rax, 16(%rsp)
-               	jne	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
-               	movq	%r14, %rdi
-               	movl	68(%rsp), %r12d
-               	movl	%r12d, %esi
+               	cmpq	%rax, 24(%rsp)
+               	jne	0x480f44 <createDouble1(unsigned long long*, int, int)+0xc54>
+               	movq	%r13, %rbp
+               	movq	%r12, %rdi
+               	movl	%ecx, %r13d
+               	movl	%ecx, %esi
@@@@
-               	callq	0x47e170 <simpleShiftLeftHighPrecision>
-               	movq	%r14, %rdi
-               	movl	%r12d, %esi
-               	movq	32(%rsp), %rdx
+               	callq	0x47f3f0 <simpleShiftLeftHighPrecision>
+               	movq	%r12, %rdi
+               	movl	%r13d, %esi
+               	movq	(%rsp), %rdx
@@@@
-               	jle	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
-               	addq	$-1, %r15
-               	movq	136(%rsp), %rcx
+               	jle	0x480f44 <createDouble1(unsigned long long*, int, int)+0xc54>
+               	movq	%r14, %rdi
+               	addq	$-1, %rdi
+               	movq	128(%rsp), %rcx
@@@@
-               	movq	104(%rsp), %r12
-               	jl	0x47f46d <createDouble1(unsigned long long*, int, int)+0x43d>
+               	jl	0x480729 <createDouble1(unsigned long long*, int, int)+0x439>
@@@@
-               	jl	0x47f46d <createDouble1(unsigned long long*, int, int)+0x43d>
-               	jmp	0x47fcbc <createDouble1(unsigned long long*, int, int)+0xc8c>
-               	testb	$1, 16(%rsp)
-               	jne	0x47fc3c <createDouble1(unsigned long long*, int, int)+0xc0c>
-               	cmpl	$0, 28(%rsp)
-               	jns	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
+               	jl	0x480729 <createDouble1(unsigned long long*, int, int)+0x439>
+               	jmp	0x480fca <createDouble1(unsigned long long*, int, int)+0xcda>
+               	movl	24(%rsp), %eax
+               	testb	$1, %al
+               	jne	0x480f49 <createDouble1(unsigned long long*, int, int)+0xc59>
+               	testl	%r14d, %r14d
+               	jns	0x480f7c <createDouble1(unsigned long long*, int, int)+0xc8c>
@@@@
-               	cmpq	%rax, 16(%rsp)
-               	jne	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
-               	addq	$-1, %r15
+               	cmpq	%rax, 24(%rsp)
+               	jne	0x480f7c <createDouble1(unsigned long long*, int, int)+0xc8c>
+               	addq	$-1, %rdi
@@@@
-               	jmp	0x47fc6e <createDouble1(unsigned long long*, int, int)+0xc3e>
-               	movq	(%rsp), %r15
-               	movq	32(%rsp), %rbx
-               	jmp	0x47fbff <createDouble1(unsigned long long*, int, int)+0xbcf>
-               	xorl	%r14d, %r14d
-               	jmp	0x47fbc7 <createDouble1(unsigned long long*, int, int)+0xb97>
-               	xorl	%eax, %eax
-               	movq	%rax, (%rsp)
-               	movq	32(%rsp), %rbx
-               	movq	%r13, %r12
-               	jmp	0x47fbe7 <createDouble1(unsigned long long*, int, int)+0xbb7>
-               	xorl	%ebx, %ebx
-               	movq	56(%rsp), %r12
-               	jmp	0x47fbe7 <createDouble1(unsigned long long*, int, int)+0xbb7>
-               	xorl	%ebx, %ebx
-               	jmp	0x47fbe7 <createDouble1(unsigned long long*, int, int)+0xbb7>
-               	xorl	%eax, %eax
-               	movq	%rax, (%rsp)
-               	movq	%r13, %r12
-               	testq	%r12, %r12
-               	je	0x47fbfb <createDouble1(unsigned long long*, int, int)+0xbcb>
-               	cmpq	8(%rsp), %r12
-               	je	0x47fbfb <createDouble1(unsigned long long*, int, int)+0xbcb>
-               	movq	%r12, %rdi
-               	callq	0x4137e0 <free@plt>
-               	movq	(%rsp), %r15
-               	testq	%rbx, %rbx
-               	je	0x47fc0c <createDouble1(unsigned long long*, int, int)+0xbdc>
-               	movq	%rbx, %rdi
-               	callq	0x4137e0 <free@plt>
+               	jmp	0x480f79 <createDouble1(unsigned long long*, int, int)+0xc89>
+               	xorl	%r12d, %r12d
+               	movq	(%rsp), %rbp
+               	jmp	0x480eb6 <createDouble1(unsigned long long*, int, int)+0xbc6>
+               	xorl	%r15d, %r15d
+               	movq	(%rsp), %rbp
+               	movq	32(%rsp), %r14
+               	testq	%r14, %r14
+               	jne	0x480ec5 <createDouble1(unsigned long long*, int, int)+0xbd5>
+               	jmp	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	movq	(%rsp), %rbp
+               	jmp	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	xorl	%ebp, %ebp
+               	movq	8(%rsp), %r15
+               	movq	32(%rsp), %r14
+               	testq	%r14, %r14
+               	je	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	cmpq	16(%rsp), %r14
+               	je	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	movq	%r14, %rdi
+               	callq	0x4137c0 <free@plt>
+               	testq	%rbp, %rbp
+               	je	0x480ee1 <createDouble1(unsigned long long*, int, int)+0xbf1>
+               	movq	%rbp, %rdi
+               	callq	0x4137c0 <free@plt>
@@@@
-               	callq	0x4137e0 <free@plt>
-               	movsd	36495(%rip), %xmm0      # xmm0 = mem[0],zero
-                                                # 0x488ab0 <_IO_stdin_used+0xb0>
+               	callq	0x4137c0 <free@plt>
+               	movsd	36538(%rip), %xmm0      # xmm0 = mem[0],zero
+                                                # 0x489db0 <_IO_stdin_used+0xb0>
+               	testq	%r12, %r12
+               	je	0x480fb8 <createDouble1(unsigned long long*, int, int)+0xcc8>
+               	movq	%r12, %rdi
+               	callq	0x4137c0 <free@plt>
+               	movsd	36513(%rip), %xmm0      # xmm0 = mem[0],zero
+                                                # 0x489db0 <_IO_stdin_used+0xb0>
+               	jmp	0x480fb8 <createDouble1(unsigned long long*, int, int)+0xcc8>
+               	movq	8(%rsp), %r15
+               	jmp	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	xorl	%ebp, %ebp
+               	movq	8(%rsp), %r15
@@@@
-               	je	0x47fcaa <createDouble1(unsigned long long*, int, int)+0xc7a>
-               	movq	%r14, %rdi
-               	callq	0x4137e0 <free@plt>
-               	movsd	36470(%rip), %xmm0      # xmm0 = mem[0],zero
-                                                # 0x488ab0 <_IO_stdin_used+0xb0>
-               	jmp	0x47fcaa <createDouble1(unsigned long long*, int, int)+0xc7a>
-               	cmpl	$0, 28(%rsp)
-               	js	0x47fccd <createDouble1(unsigned long long*, int, int)+0xc9d>
-               	addq	$1, %r15
+               	jne	0x480ec5 <createDouble1(unsigned long long*, int, int)+0xbd5>
+               	jmp	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	xorl	%r15d, %r15d
+               	movq	32(%rsp), %r14
+               	testq	%r14, %r14
+               	jne	0x480ec5 <createDouble1(unsigned long long*, int, int)+0xbd5>
+               	jmp	0x480ed4 <createDouble1(unsigned long long*, int, int)+0xbe4>
+               	movq	8(%rsp), %r15
+               	testq	%r15, %r15
+               	jne	0x480ee6 <createDouble1(unsigned long long*, int, int)+0xbf6>
+               	jmp	0x480eee <createDouble1(unsigned long long*, int, int)+0xbfe>
+               	movq	%r14, %r15
+               	jmp	0x480f7f <createDouble1(unsigned long long*, int, int)+0xc8f>
+               	testl	%r14d, %r14d
+               	js	0x480fdb <createDouble1(unsigned long long*, int, int)+0xceb>
+               	addq	$1, %rdi
@@@@
-               	addq	%rax, %r15
-               	jmp	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
+               	addq	%rax, %rdi
+               	jmp	0x480f7c <createDouble1(unsigned long long*, int, int)+0xc8c>
@@@@
-               	subq	%rax, %r15
-               	movq	%r15, %r13
-               	movq	56(%rsp), %rdi
-               	testq	%rdi, %rdi
-               	je	0x47fc8a <createDouble1(unsigned long long*, int, int)+0xc5a>
-               	cmpq	8(%rsp), %rdi
-               	je	0x47fc8a <createDouble1(unsigned long long*, int, int)+0xc5a>
-               	callq	0x4137e0 <free@plt>
+               	subq	%rax, %rdi
+               	movq	%rdi, %r15
+               	movq	(%rsp), %r14
@@@@
-               	callq	0x4137e0 <free@plt>
-               	movq	(%rsp), %rdi
-               	callq	0x4137e0 <free@plt>
+               	testq	%rdi, %rdi
+               	je	0x480f99 <createDouble1(unsigned long long*, int, int)+0xca9>
+               	cmpq	16(%rsp), %rdi
+               	je	0x480f99 <createDouble1(unsigned long long*, int, int)+0xca9>
+               	callq	0x4137c0 <free@plt>
@@@@
-               	callq	0x4137e0 <free@plt>
-               	movq	%r13, %xmm0
-               	addq	$200, %rsp
+               	callq	0x4137c0 <free@plt>
+               	movq	8(%rsp), %rdi
+               	callq	0x4137c0 <free@plt>
+               	movq	%r12, %rdi
+               	callq	0x4137c0 <free@plt>
+               	movq	%r15, %xmm0
+               	addq	$184, %rsp

@@ -105108,21 +106237,21 @@
@@@[(7, 13), (21, 27)]@@@
-               	addq	%rax, %r15
-               	jmp	0x47fc71 <createDouble1(unsigned long long*, int, int)+0xc41>
-               	addq	$-1, %r15
+               	addq	%rax, %rdi
+               	jmp	0x480f7c <createDouble1(unsigned long long*, int, int)+0xc8c>
+               	addq	$-1, %rdi
@@@@
-               	jge	0x47fcc4 <createDouble1(unsigned long long*, int, int)+0xc94>
-               	jmp	0x47fba1 <createDouble1(unsigned long long*, int, int)+0xb71>
-               	nopw	(%rax,%rax)
+               	jge	0x480fd2 <createDouble1(unsigned long long*, int, int)+0xce2>
+               	jmp	0x480e82 <createDouble1(unsigned long long*, int, int)+0xb92>
+               	nopw	%cs:(%rax,%rax)

@@ -105133,217 +106262,198 @@
@@@[(3, 5), (11, 15), (17, 33), (34, 46), (52, 54), (55, 60), (68, 84), (86, 108), (109, 111), (112, 121), (122, 128), (130, 133), (135, 137), (143, 149), (150, 158), (159, 163), (164, 167), (168, 176), (177, 179), (183, 188), (189, 191), (193, 197), (199, 202), (203, 211), (212, 214), (218, 223), (224, 226), (228, 232), (234, 237), (238, 246), (247, 249), (253, 258), (259, 261), (263, 269), (270, 279), (280, 286), (288, 291), (300, 304)]@@@
-               	movq	%rdi, %r13
+               	movq	%rdi, %r14
@@@@
-               	callq	0x479e70 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::reserve(unsigned long)>
-               	movl	8(%r13), %eax
+               	callq	0x47b030 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::reserve(unsigned long)>
+               	movl	8(%r14), %eax
@@@@
-               	je	0x480037 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x347>
-               	leaq	16(,%rax,2), %r12
-               	addq	%r13, %r12
-               	addq	$16, %r13
-               	jmp	0x47fd6c <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x7c>
-               	nop
-               	movb	%r14b, (%rax,%rbp)
-               	movq	%r15, 16(%rsp)
+               	je	0x4812f1 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x2f1>
+               	leaq	(%r14,%rax,2), %r12
+               	addq	$16, %r12
+               	addq	$16, %r14
+               	movl	$15, %edx
+               	jmp	0x48107c <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x7c>
+               	movb	%r15b, (%rax,%rbp)
+               	movq	%r13, 16(%rsp)
@@@@
-               	movb	$0, (%rax,%r15)
-               	cmpq	%r12, %r13
-               	je	0x480037 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x347>
-               	leaq	2(%r13), %rax
-               	movzwl	(%r13), %ebp
-               	movzwl	%bp, %r14d
+               	movb	$0, (%rax,%r13)
+               	cmpq	%r12, %r14
+               	je	0x4812f1 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x2f1>
+               	leaq	2(%r14), %rax
+               	movzwl	(%r14), %ebp
+               	movzwl	%bp, %r15d
@@@@
-               	movq	%rax, %r13
+               	movq	%rax, %r14
@@@@
-               	jne	0x47fdd5 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0xe5>
-               	jmp	0x480212 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x522>
+               	jne	0x4810e5 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0xe5>
+               	jmp	0x4814da <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x4da>
+               	nop
@@@@
-               	jne	0x480240 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x550>
-               	addq	$4, %r13
-               	shll	$10, %r14d
-               	addl	%eax, %r14d
-               	addl	$4238353408, %r14d      # imm = 0xFCA02400
-               	cmpl	$1114111, %r14d         # imm = 0x10FFFF
-               	ja	0x4801e4 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x4f4>
-               	movl	%r14d, %eax
+               	jne	0x481508 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x508>
+               	addq	$4, %r14
+               	shll	$10, %r15d
+               	addl	%eax, %r15d
+               	addl	$4238353408, %r15d      # imm = 0xFCA02400
+               	cmpl	$1114111, %r15d         # imm = 0x10FFFF
+               	ja	0x4814ac <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x4ac>
+               	movl	%r15d, %eax
@@@@
-               	je	0x4801e4 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x4f4>
-               	cmpl	$127, %r14d
-               	ja	0x47fe30 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x140>
-               	movq	8(%rsp), %rax
-               	movq	16(%rsp), %rbp
-               	leaq	1(%rbp), %r15
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x480017 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x327>
-               	movq	24(%rsp), %rcx
-               	jmp	0x480017 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x327>
-               	nopw	(%rax,%rax)
-               	cmpl	$2047, %r14d            # imm = 0x7FF
-               	ja	0x47fea0 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x1b0>
-               	movl	%r14d, %ebx
+               	je	0x4814ac <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x4ac>
+               	cmpl	$127, %r15d
+               	jbe	0x4812ad <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x2ad>
+               	cmpl	$2047, %r15d            # imm = 0x7FF
+               	ja	0x481180 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x180>
+               	movl	%r15d, %ebx
@@@@
-               	movq	8(%rsp), %rax
+               	orb	$-64, %bl
@@@@
-               	leaq	1(%rbp), %r15
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x47fe61 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x171>
+               	leaq	1(%rbp), %r13
+               	movq	8(%rsp), %rax
+               	leaq	24(%rsp), %rcx
+               	cmpq	%rcx, %rax
@@@@
-               	orb	$-64, %bl
-               	cmpq	%rcx, %r15
-               	jbe	0x47fe7b <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x18b>
+               	cmoveq	%rdx, %rcx
+               	cmpq	%rcx, %r13
+               	jbe	0x48115c <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x15c>
@@@@
-               	callq	0x47a210 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	callq	0x47b3d0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movl	$15, %edx
@@@@
-               	movq	%r15, 16(%rsp)
+               	movq	%r13, 16(%rsp)
@@@@
-               	movl	%r14d, %ebp
-               	cmpl	$65535, %r14d           # imm = 0xFFFF
-               	ja	0x47fee3 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x1f3>
+               	movl	%r15d, %ebp
+               	cmpl	$65535, %r15d           # imm = 0xFFFF
+               	ja	0x481195 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x195>
@@@@
-               	movq	8(%rsp), %rax
-               	movq	16(%rsp), %r15
-               	leaq	1(%r15), %rbx
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x47fed1 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x1e1>
-               	movq	24(%rsp), %rcx
@@@@
-               	cmpq	%rcx, %rbx
-               	ja	0x47ff6c <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x27c>
-               	jmp	0x47ff7e <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x28e>
+               	jmp	0x4811f9 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x1f9>
@@@@
+               	orb	$-16, %bpl
+               	movq	16(%rsp), %r13
+               	leaq	1(%r13), %rbx
@@@@
-               	movq	16(%rsp), %r15
-               	leaq	1(%r15), %rbx
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x47ff08 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x218>
+               	leaq	24(%rsp), %rcx
+               	cmpq	%rcx, %rax
@@@@
-               	orb	$-16, %bpl
+               	cmoveq	%rdx, %rcx
@@@@
-               	movq	%r15, %rsi
-               	callq	0x47a210 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movq	%r13, %rsi
+               	callq	0x47b3d0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movl	$15, %edx
@@@@
-               	movb	%bpl, (%rax,%r15)
+               	movb	%bpl, (%rax,%r13)
@@@@
-               	movb	$0, 1(%rax,%r15)
-               	movl	%r14d, %ebp
+               	movb	$0, 1(%rax,%r13)
+               	movl	%r15d, %ebp
@@@@
+               	orb	$-128, %bpl
+               	movq	16(%rsp), %r13
+               	leaq	1(%r13), %rbx
@@@@
-               	movq	16(%rsp), %r15
-               	leaq	1(%r15), %rbx
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x47ff63 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x273>
+               	leaq	24(%rsp), %rcx
+               	cmpq	%rcx, %rax
@@@@
-               	orb	$-128, %bpl
+               	cmoveq	%rdx, %rcx
@@@@
-               	movq	%r15, %rsi
-               	callq	0x47a210 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movq	%r13, %rsi
+               	callq	0x47b3d0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movl	$15, %edx
@@@@
-               	movb	%bpl, (%rax,%r15)
+               	movb	%bpl, (%rax,%r13)
@@@@
-               	movb	$0, 1(%rax,%r15)
-               	movl	%r14d, %ebp
+               	movb	$0, 1(%rax,%r13)
+               	movl	%r15d, %ebp
@@@@
+               	orb	$-128, %bpl
+               	movq	16(%rsp), %r13
+               	leaq	1(%r13), %rbx
@@@@
-               	movq	16(%rsp), %r15
-               	leaq	1(%r15), %rbx
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x47ffbe <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x2ce>
+               	leaq	24(%rsp), %rcx
+               	cmpq	%rcx, %rax
@@@@
-               	orb	$-128, %bpl
+               	cmoveq	%rdx, %rcx
@@@@
-               	movq	%r15, %rsi
-               	callq	0x47a210 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movq	%r13, %rsi
+               	callq	0x47b3d0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movl	$15, %edx
@@@@
-               	movb	%bpl, (%rax,%r15)
+               	movb	%bpl, (%rax,%r13)
@@@@
-               	movb	$0, 1(%rax,%r15)
-               	andb	$63, %r14b
-               	movq	8(%rsp), %rax
+               	movb	$0, 1(%rax,%r13)
+               	andb	$63, %r15b
+               	orb	$-128, %r15b
@@@@
-               	leaq	1(%rbp), %r15
-               	movl	$15, %ecx
-               	leaq	24(%rsp), %rdx
-               	cmpq	%rdx, %rax
-               	je	0x480013 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x323>
+               	leaq	1(%rbp), %r13
+               	movq	8(%rsp), %rax
+               	leaq	24(%rsp), %rcx
+               	cmpq	%rcx, %rax
@@@@
-               	orb	$-128, %r14b
-               	cmpq	%rcx, %r15
-               	jbe	0x47fd50 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x60>
+               	cmoveq	%rdx, %rcx
+               	cmpq	%rcx, %r13
+               	jbe	0x481060 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x60>
@@@@
-               	callq	0x47a210 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	callq	0x47b3d0 <std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)>
+               	movl	$15, %edx
@@@@
-               	jmp	0x480075 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x385>
-               	nop
+               	jmp	0x481335 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x335>
+               	nopl	(%rax,%rax)

@@ -105351,86 +106461,88 @@
@@@[(3, 7), (11, 13), (14, 16)]@@@
-               	movl	48(%rsp,%rcx,8), %esi
-               	movl	52(%rsp,%rcx,8), %edi
+               	movq	48(%rsp,%rcx,8), %rsi
+               	movl	%esi, %esi
@@@@
+               	movq	48(%rsp,%rcx,8), %rsi
+               	shrq	$32, %rsi
@@@@
-               	leaq	(%rdi,%rdi,4), %rsi
+               	leaq	(%rsi,%rsi,4), %rsi

@@ -105441,63 +106553,64 @@
@@@[(8, 14), (87, 92)]@@@
-               	movl	%r14d, 8(%rax)
-               	leaq	439061(%rip), %rsi      # 0x4eb518 <typeinfo for utf8::invalid_code_point>
-               	leaq	5494(%rip), %rdx        # 0x481780 <std::exception::~exception()>
+               	movl	%r15d, 8(%rax)
+               	leaq	434253(%rip), %rsi      # 0x4eb518 <typeinfo for utf8::invalid_code_point>
+               	leaq	5502(%rip), %rdx        # 0x482a50 <std::exception::~exception()>
@@@@
-               	jne	0x4802bd <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x5cd>
-               	jmp	0x4802c2 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x5d2>
+               	jne	0x481585 <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x585>
+               	jmp	0x48158a <Kotlin_native_FloatingPointParser_parseDoubleImpl+0x58a>
+               	nopl	(%rax,%rax)

@@ -105521,23 +106634,24 @@
@@@[(6, 7)]@@@
+               	movq	$0, (%rsp)

@@ -105551,34 +106665,35 @@
@@@[(29, 31), (34, 35)]@@@
-               	movl	%ebp, %edi
+               	movl	24(%rcx), %edi
@@@@
+               	nopl	(%rax)

@@ -105634,84 +106749,87 @@
@@@[(24, 25), (26, 43), (44, 54), (58, 74), (91, 94)]@@@
-               	movl	$65533, %r13d           # imm = 0xFFFD
@@@@
-               	jmp	0x48058d <Kotlin_io_Console_print+0xbd>
-               	nopl	(%rax,%rax)
-               	cmpq	%r12, %rbp
-               	je	0x4805b5 <Kotlin_io_Console_print+0xe5>
-               	movzwl	2(%rbx), %ecx
-               	shll	$10, %eax
-               	leal	(%rax,%rcx), %edi
-               	addl	$4238353408, %edi       # imm = 0xFCA02400
-               	movl	%ecx, %eax
-               	andl	$64512, %eax            # imm = 0xFC00
-               	addq	$4, %rbx
-               	cmpl	$56320, %eax            # imm = 0xDC00
-               	cmovnel	%r13d, %edi
-               	cmoveq	%rbx, %rbp
+               	jmp	0x481835 <Kotlin_io_Console_print+0x85>
+               	nop
+               	movl	$65533, %edi            # imm = 0xFFFD
@@@@
-               	callq	0x479fa0 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
-               	movq	%rbp, %rbx
-               	cmpq	%r12, %rbp
-               	je	0x4805c4 <Kotlin_io_Console_print+0xf4>
-               	leaq	2(%rbx), %rbp
+               	callq	0x47b160 <std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > utf8::unchecked::append<std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > > >(unsigned int, std::back_insert_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, kotlin::std_support::allocator<char> > >)>
+               	movq	%r13, %rbx
+               	cmpq	%r12, %r13
+               	je	0x4818a0 <Kotlin_io_Console_print+0xf0>
+               	leaq	2(%rbx), %r13
@@@@
-               	je	0x480550 <Kotlin_io_Console_print+0x80>
+               	jne	0x481880 <Kotlin_io_Console_print+0xd0>
+               	cmpq	%r12, %r13
+               	je	0x481891 <Kotlin_io_Console_print+0xe1>
+               	movzwl	2(%rbx), %ecx
+               	movl	%ecx, %edx
+               	andl	$64512, %edx            # imm = 0xFC00
+               	cmpl	$56320, %edx            # imm = 0xDC00
+               	jne	0x481820 <Kotlin_io_Console_print+0x70>
+               	shll	$10, %eax
+               	addq	$4, %rbx
+               	leal	(%rax,%rcx), %edi
+               	addl	$4238353408, %edi       # imm = 0xFCA02400
+               	movq	%rbx, %r13
+               	jmp	0x481825 <Kotlin_io_Console_print+0x75>
+               	nopl	(%rax)
@@@@
-               	movl	16(%rsp), %edx
+               	movq	16(%rsp), %rax
+               	movl	%eax, %edx

@@ -105720,31 +106838,30 @@
@@@[(34, 39)]@@@
-               	callq	0x467cb0 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
-               	jmp	0x480657 <Kotlin_io_Console_print+0x187>
-               	nopw	%cs:(%rax,%rax)
+               	callq	0x468800 <kotlin::mm::ThreadSuspensionData::suspendIfRequestedSlowPath()>
+               	jmp	0x481936 <Kotlin_io_Console_print+0x186>

@@ -105846,40 +106963,39 @@
@@@[(21, 24), (28, 29), (32, 34), (35, 36)]@@@
-               	movq	288(%rax), %rcx
-               	jmp	0x4808ec <Init_and_run_start+0x18c>
+               	jmp	0x481bb3 <Init_and_run_start+0x183>
@@@@
-               	movq	288(%rax), %rcx
@@@@
-               	nopl	(%rax,%rax)
+               	nopl	(%rax)
@@@@
+               	movq	288(%rax), %rcx

@@ -105888,33 +107004,34 @@
@@@[(6, 7), (8, 10)]@@@
-               	movaps	%xmm0, 16(%rsp)
@@@@
+               	movaps	%xmm0, 16(%rsp)
+               	movq	288(%rax), %rcx

@@ -105956,12 +107073,12 @@
@@@[(3, 5)]@@@
-               	nopl	(%rax)
+               	nopl	(%rax,%rax)
